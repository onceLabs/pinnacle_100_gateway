
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
   0:	d8 88 00 20 f9 5e 00 00 91 8f 01 00 b1 5e 00 00     ... .^.......^..
  10:	b1 5e 00 00 b1 5e 00 00 b1 5e 00 00 00 00 00 00     .^...^...^......
	...
  2c:	51 50 00 00 b1 5e 00 00 00 00 00 00 09 50 00 00     QP...^.......P..
  3c:	b1 5e 00 00                                         .^..

00000040 <_irq_vector_table>:
  40:	d5 50 00 00 d5 50 00 00 d5 50 00 00 d5 50 00 00     .P...P...P...P..
  50:	d5 50 00 00 d5 50 00 00 d5 50 00 00 d5 50 00 00     .P...P...P...P..
  60:	d5 50 00 00 d5 50 00 00 d5 50 00 00 d5 50 00 00     .P...P...P...P..
  70:	d5 50 00 00 d5 50 00 00 d5 50 00 00 d5 50 00 00     .P...P...P...P..
  80:	d5 50 00 00 d5 50 00 00 d5 50 00 00 d5 50 00 00     .P...P...P...P..
  90:	d5 50 00 00 d5 50 00 00 d5 50 00 00 d5 50 00 00     .P...P...P...P..
  a0:	d5 50 00 00 d5 50 00 00 d5 50 00 00 d5 50 00 00     .P...P...P...P..
  b0:	d5 50 00 00 d5 50 00 00 d5 50 00 00 d5 50 00 00     .P...P...P...P..
  c0:	d5 50 00 00 d5 50 00 00 d5 50 00 00 d5 50 00 00     .P...P...P...P..
  d0:	d5 50 00 00 d5 50 00 00 d5 50 00 00 d5 50 00 00     .P...P...P...P..
  e0:	d5 50 00 00 d5 50 00 00 d5 50 00 00 d5 50 00 00     .P...P...P...P..
  f0:	d5 50 00 00 d5 50 00 00 d5 50 00 00 d5 50 00 00     .P...P...P...P..

Disassembly of section text:

00000100 <memchr>:
     100:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     104:	2a10      	cmp	r2, #16
     106:	db2b      	blt.n	160 <CONFIG_IDLE_STACK_SIZE+0x20>
     108:	f010 0f07 	tst.w	r0, #7
     10c:	d008      	beq.n	120 <memchr+0x20>
     10e:	f810 3b01 	ldrb.w	r3, [r0], #1
     112:	3a01      	subs	r2, #1
     114:	428b      	cmp	r3, r1
     116:	d02d      	beq.n	174 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7>
     118:	f010 0f07 	tst.w	r0, #7
     11c:	b342      	cbz	r2, 170 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x3>
     11e:	d1f6      	bne.n	10e <memchr+0xe>
     120:	b4f0      	push	{r4, r5, r6, r7}
     122:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
     126:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
     12a:	f022 0407 	bic.w	r4, r2, #7
     12e:	f07f 0700 	mvns.w	r7, #0
     132:	2300      	movs	r3, #0
     134:	e8f0 5602 	ldrd	r5, r6, [r0], #8
     138:	3c08      	subs	r4, #8
     13a:	ea85 0501 	eor.w	r5, r5, r1
     13e:	ea86 0601 	eor.w	r6, r6, r1
     142:	fa85 f547 	uadd8	r5, r5, r7
     146:	faa3 f587 	sel	r5, r3, r7
     14a:	fa86 f647 	uadd8	r6, r6, r7
     14e:	faa5 f687 	sel	r6, r5, r7
     152:	b98e      	cbnz	r6, 178 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xb>
     154:	d1ee      	bne.n	134 <memchr+0x34>
     156:	bcf0      	pop	{r4, r5, r6, r7}
     158:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     15c:	f002 0207 	and.w	r2, r2, #7
     160:	b132      	cbz	r2, 170 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x3>
     162:	f810 3b01 	ldrb.w	r3, [r0], #1
     166:	3a01      	subs	r2, #1
     168:	ea83 0301 	eor.w	r3, r3, r1
     16c:	b113      	cbz	r3, 174 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7>
     16e:	d1f8      	bne.n	162 <CONFIG_IDLE_STACK_SIZE+0x22>
     170:	2000      	movs	r0, #0
     172:	4770      	bx	lr
     174:	3801      	subs	r0, #1
     176:	4770      	bx	lr
     178:	2d00      	cmp	r5, #0
     17a:	bf06      	itte	eq
     17c:	4635      	moveq	r5, r6
     17e:	3803      	subeq	r0, #3
     180:	3807      	subne	r0, #7
     182:	f015 0f01 	tst.w	r5, #1
     186:	d107      	bne.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     188:	3001      	adds	r0, #1
     18a:	f415 7f80 	tst.w	r5, #256	; 0x100
     18e:	bf02      	ittt	eq
     190:	3001      	addeq	r0, #1
     192:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
     196:	3001      	addeq	r0, #1
     198:	bcf0      	pop	{r4, r5, r6, r7}
     19a:	3801      	subs	r0, #1
     19c:	4770      	bx	lr
     19e:	bf00      	nop

000001a0 <__aeabi_drsub>:
     1a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     1a4:	e002      	b.n	1ac <__adddf3>
     1a6:	bf00      	nop

000001a8 <__aeabi_dsub>:
     1a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000001ac <__adddf3>:
     1ac:	b530      	push	{r4, r5, lr}
     1ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
     1b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
     1b6:	ea94 0f05 	teq	r4, r5
     1ba:	bf08      	it	eq
     1bc:	ea90 0f02 	teqeq	r0, r2
     1c0:	bf1f      	itttt	ne
     1c2:	ea54 0c00 	orrsne.w	ip, r4, r0
     1c6:	ea55 0c02 	orrsne.w	ip, r5, r2
     1ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     1ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     1d2:	f000 80e2 	beq.w	39a <__data_size+0x21>
     1d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
     1da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     1de:	bfb8      	it	lt
     1e0:	426d      	neglt	r5, r5
     1e2:	dd0c      	ble.n	1fe <__adddf3+0x52>
     1e4:	442c      	add	r4, r5
     1e6:	ea80 0202 	eor.w	r2, r0, r2
     1ea:	ea81 0303 	eor.w	r3, r1, r3
     1ee:	ea82 0000 	eor.w	r0, r2, r0
     1f2:	ea83 0101 	eor.w	r1, r3, r1
     1f6:	ea80 0202 	eor.w	r2, r0, r2
     1fa:	ea81 0303 	eor.w	r3, r1, r3
     1fe:	2d36      	cmp	r5, #54	; 0x36
     200:	bf88      	it	hi
     202:	bd30      	pophi	{r4, r5, pc}
     204:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     208:	ea4f 3101 	mov.w	r1, r1, lsl #12
     20c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     210:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     214:	d002      	beq.n	21c <__adddf3+0x70>
     216:	4240      	negs	r0, r0
     218:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     21c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     220:	ea4f 3303 	mov.w	r3, r3, lsl #12
     224:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     228:	d002      	beq.n	230 <__adddf3+0x84>
     22a:	4252      	negs	r2, r2
     22c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     230:	ea94 0f05 	teq	r4, r5
     234:	f000 80a7 	beq.w	386 <__data_size+0xd>
     238:	f1a4 0401 	sub.w	r4, r4, #1
     23c:	f1d5 0e20 	rsbs	lr, r5, #32
     240:	db0d      	blt.n	25e <__adddf3+0xb2>
     242:	fa02 fc0e 	lsl.w	ip, r2, lr
     246:	fa22 f205 	lsr.w	r2, r2, r5
     24a:	1880      	adds	r0, r0, r2
     24c:	f141 0100 	adc.w	r1, r1, #0
     250:	fa03 f20e 	lsl.w	r2, r3, lr
     254:	1880      	adds	r0, r0, r2
     256:	fa43 f305 	asr.w	r3, r3, r5
     25a:	4159      	adcs	r1, r3
     25c:	e00e      	b.n	27c <__adddf3+0xd0>
     25e:	f1a5 0520 	sub.w	r5, r5, #32
     262:	f10e 0e20 	add.w	lr, lr, #32
     266:	2a01      	cmp	r2, #1
     268:	fa03 fc0e 	lsl.w	ip, r3, lr
     26c:	bf28      	it	cs
     26e:	f04c 0c02 	orrcs.w	ip, ip, #2
     272:	fa43 f305 	asr.w	r3, r3, r5
     276:	18c0      	adds	r0, r0, r3
     278:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     27c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     280:	d507      	bpl.n	292 <__adddf3+0xe6>
     282:	f04f 0e00 	mov.w	lr, #0
     286:	f1dc 0c00 	rsbs	ip, ip, #0
     28a:	eb7e 0000 	sbcs.w	r0, lr, r0
     28e:	eb6e 0101 	sbc.w	r1, lr, r1
     292:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     296:	d31b      	bcc.n	2d0 <__adddf3+0x124>
     298:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     29c:	d30c      	bcc.n	2b8 <__adddf3+0x10c>
     29e:	0849      	lsrs	r1, r1, #1
     2a0:	ea5f 0030 	movs.w	r0, r0, rrx
     2a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
     2a8:	f104 0401 	add.w	r4, r4, #1
     2ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
     2b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     2b4:	f080 809a 	bcs.w	3ec <CONFIG_LOG_FAILURE_REPORT_PERIOD+0x4>
     2b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     2bc:	bf08      	it	eq
     2be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     2c2:	f150 0000 	adcs.w	r0, r0, #0
     2c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     2ca:	ea41 0105 	orr.w	r1, r1, r5
     2ce:	bd30      	pop	{r4, r5, pc}
     2d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     2d4:	4140      	adcs	r0, r0
     2d6:	eb41 0101 	adc.w	r1, r1, r1
     2da:	3c01      	subs	r4, #1
     2dc:	bf28      	it	cs
     2de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     2e2:	d2e9      	bcs.n	2b8 <__adddf3+0x10c>
     2e4:	f091 0f00 	teq	r1, #0
     2e8:	bf04      	itt	eq
     2ea:	4601      	moveq	r1, r0
     2ec:	2000      	moveq	r0, #0
     2ee:	fab1 f381 	clz	r3, r1
     2f2:	bf08      	it	eq
     2f4:	3320      	addeq	r3, #32
     2f6:	f1a3 030b 	sub.w	r3, r3, #11
     2fa:	f1b3 0220 	subs.w	r2, r3, #32
     2fe:	da0c      	bge.n	31a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x1a>
     300:	320c      	adds	r2, #12
     302:	dd08      	ble.n	316 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x16>
     304:	f102 0c14 	add.w	ip, r2, #20
     308:	f1c2 020c 	rsb	r2, r2, #12
     30c:	fa01 f00c 	lsl.w	r0, r1, ip
     310:	fa21 f102 	lsr.w	r1, r1, r2
     314:	e00c      	b.n	330 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x30>
     316:	f102 0214 	add.w	r2, r2, #20
     31a:	bfd8      	it	le
     31c:	f1c2 0c20 	rsble	ip, r2, #32
     320:	fa01 f102 	lsl.w	r1, r1, r2
     324:	fa20 fc0c 	lsr.w	ip, r0, ip
     328:	bfdc      	itt	le
     32a:	ea41 010c 	orrle.w	r1, r1, ip
     32e:	4090      	lslle	r0, r2
     330:	1ae4      	subs	r4, r4, r3
     332:	bfa2      	ittt	ge
     334:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     338:	4329      	orrge	r1, r5
     33a:	bd30      	popge	{r4, r5, pc}
     33c:	ea6f 0404 	mvn.w	r4, r4
     340:	3c1f      	subs	r4, #31
     342:	da1c      	bge.n	37e <__data_size+0x5>
     344:	340c      	adds	r4, #12
     346:	dc0e      	bgt.n	366 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x66>
     348:	f104 0414 	add.w	r4, r4, #20
     34c:	f1c4 0220 	rsb	r2, r4, #32
     350:	fa20 f004 	lsr.w	r0, r0, r4
     354:	fa01 f302 	lsl.w	r3, r1, r2
     358:	ea40 0003 	orr.w	r0, r0, r3
     35c:	fa21 f304 	lsr.w	r3, r1, r4
     360:	ea45 0103 	orr.w	r1, r5, r3
     364:	bd30      	pop	{r4, r5, pc}
     366:	f1c4 040c 	rsb	r4, r4, #12
     36a:	f1c4 0220 	rsb	r2, r4, #32
     36e:	fa20 f002 	lsr.w	r0, r0, r2
     372:	fa01 f304 	lsl.w	r3, r1, r4
     376:	ea40 0003 	orr.w	r0, r0, r3
     37a:	4629      	mov	r1, r5
     37c:	bd30      	pop	{r4, r5, pc}
     37e:	fa21 f004 	lsr.w	r0, r1, r4
     382:	4629      	mov	r1, r5
     384:	bd30      	pop	{r4, r5, pc}
     386:	f094 0f00 	teq	r4, #0
     38a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     38e:	bf06      	itte	eq
     390:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     394:	3401      	addeq	r4, #1
     396:	3d01      	subne	r5, #1
     398:	e74e      	b.n	238 <__adddf3+0x8c>
     39a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     39e:	bf18      	it	ne
     3a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     3a4:	d029      	beq.n	3fa <CONFIG_LOG_FAILURE_REPORT_PERIOD+0x12>
     3a6:	ea94 0f05 	teq	r4, r5
     3aa:	bf08      	it	eq
     3ac:	ea90 0f02 	teqeq	r0, r2
     3b0:	d005      	beq.n	3be <__data_size+0x45>
     3b2:	ea54 0c00 	orrs.w	ip, r4, r0
     3b6:	bf04      	itt	eq
     3b8:	4619      	moveq	r1, r3
     3ba:	4610      	moveq	r0, r2
     3bc:	bd30      	pop	{r4, r5, pc}
     3be:	ea91 0f03 	teq	r1, r3
     3c2:	bf1e      	ittt	ne
     3c4:	2100      	movne	r1, #0
     3c6:	2000      	movne	r0, #0
     3c8:	bd30      	popne	{r4, r5, pc}
     3ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     3ce:	d105      	bne.n	3dc <__data_size+0x63>
     3d0:	0040      	lsls	r0, r0, #1
     3d2:	4149      	adcs	r1, r1
     3d4:	bf28      	it	cs
     3d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     3da:	bd30      	pop	{r4, r5, pc}
     3dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     3e0:	bf3c      	itt	cc
     3e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     3e6:	bd30      	popcc	{r4, r5, pc}
     3e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     3ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     3f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     3f4:	f04f 0000 	mov.w	r0, #0
     3f8:	bd30      	pop	{r4, r5, pc}
     3fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     3fe:	bf1a      	itte	ne
     400:	4619      	movne	r1, r3
     402:	4610      	movne	r0, r2
     404:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     408:	bf1c      	itt	ne
     40a:	460b      	movne	r3, r1
     40c:	4602      	movne	r2, r0
     40e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     412:	bf06      	itte	eq
     414:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     418:	ea91 0f03 	teqeq	r1, r3
     41c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     420:	bd30      	pop	{r4, r5, pc}
     422:	bf00      	nop

00000424 <__aeabi_ui2d>:
     424:	f090 0f00 	teq	r0, #0
     428:	bf04      	itt	eq
     42a:	2100      	moveq	r1, #0
     42c:	4770      	bxeq	lr
     42e:	b530      	push	{r4, r5, lr}
     430:	f44f 6480 	mov.w	r4, #1024	; 0x400
     434:	f104 0432 	add.w	r4, r4, #50	; 0x32
     438:	f04f 0500 	mov.w	r5, #0
     43c:	f04f 0100 	mov.w	r1, #0
     440:	e750      	b.n	2e4 <__adddf3+0x138>
     442:	bf00      	nop

00000444 <__aeabi_i2d>:
     444:	f090 0f00 	teq	r0, #0
     448:	bf04      	itt	eq
     44a:	2100      	moveq	r1, #0
     44c:	4770      	bxeq	lr
     44e:	b530      	push	{r4, r5, lr}
     450:	f44f 6480 	mov.w	r4, #1024	; 0x400
     454:	f104 0432 	add.w	r4, r4, #50	; 0x32
     458:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     45c:	bf48      	it	mi
     45e:	4240      	negmi	r0, r0
     460:	f04f 0100 	mov.w	r1, #0
     464:	e73e      	b.n	2e4 <__adddf3+0x138>
     466:	bf00      	nop

00000468 <__aeabi_f2d>:
     468:	0042      	lsls	r2, r0, #1
     46a:	ea4f 01e2 	mov.w	r1, r2, asr #3
     46e:	ea4f 0131 	mov.w	r1, r1, rrx
     472:	ea4f 7002 	mov.w	r0, r2, lsl #28
     476:	bf1f      	itttt	ne
     478:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     47c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     480:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     484:	4770      	bxne	lr
     486:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     48a:	bf08      	it	eq
     48c:	4770      	bxeq	lr
     48e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     492:	bf04      	itt	eq
     494:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     498:	4770      	bxeq	lr
     49a:	b530      	push	{r4, r5, lr}
     49c:	f44f 7460 	mov.w	r4, #896	; 0x380
     4a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     4a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     4a8:	e71c      	b.n	2e4 <__adddf3+0x138>
     4aa:	bf00      	nop

000004ac <__aeabi_ul2d>:
     4ac:	ea50 0201 	orrs.w	r2, r0, r1
     4b0:	bf08      	it	eq
     4b2:	4770      	bxeq	lr
     4b4:	b530      	push	{r4, r5, lr}
     4b6:	f04f 0500 	mov.w	r5, #0
     4ba:	e00a      	b.n	4d2 <__aeabi_l2d+0x16>

000004bc <__aeabi_l2d>:
     4bc:	ea50 0201 	orrs.w	r2, r0, r1
     4c0:	bf08      	it	eq
     4c2:	4770      	bxeq	lr
     4c4:	b530      	push	{r4, r5, lr}
     4c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     4ca:	d502      	bpl.n	4d2 <__aeabi_l2d+0x16>
     4cc:	4240      	negs	r0, r0
     4ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     4d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
     4d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
     4da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     4de:	f43f aed8 	beq.w	292 <__adddf3+0xe6>
     4e2:	f04f 0203 	mov.w	r2, #3
     4e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4ea:	bf18      	it	ne
     4ec:	3203      	addne	r2, #3
     4ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4f2:	bf18      	it	ne
     4f4:	3203      	addne	r2, #3
     4f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     4fa:	f1c2 0320 	rsb	r3, r2, #32
     4fe:	fa00 fc03 	lsl.w	ip, r0, r3
     502:	fa20 f002 	lsr.w	r0, r0, r2
     506:	fa01 fe03 	lsl.w	lr, r1, r3
     50a:	ea40 000e 	orr.w	r0, r0, lr
     50e:	fa21 f102 	lsr.w	r1, r1, r2
     512:	4414      	add	r4, r2
     514:	e6bd      	b.n	292 <__adddf3+0xe6>
     516:	bf00      	nop

00000518 <__aeabi_dmul>:
     518:	b570      	push	{r4, r5, r6, lr}
     51a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     51e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     522:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     526:	bf1d      	ittte	ne
     528:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     52c:	ea94 0f0c 	teqne	r4, ip
     530:	ea95 0f0c 	teqne	r5, ip
     534:	f000 f8de 	bleq	6f4 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x118>
     538:	442c      	add	r4, r5
     53a:	ea81 0603 	eor.w	r6, r1, r3
     53e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     542:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     546:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     54a:	bf18      	it	ne
     54c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     550:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     554:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     558:	d038      	beq.n	5cc <__aeabi_dmul+0xb4>
     55a:	fba0 ce02 	umull	ip, lr, r0, r2
     55e:	f04f 0500 	mov.w	r5, #0
     562:	fbe1 e502 	umlal	lr, r5, r1, r2
     566:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     56a:	fbe0 e503 	umlal	lr, r5, r0, r3
     56e:	f04f 0600 	mov.w	r6, #0
     572:	fbe1 5603 	umlal	r5, r6, r1, r3
     576:	f09c 0f00 	teq	ip, #0
     57a:	bf18      	it	ne
     57c:	f04e 0e01 	orrne.w	lr, lr, #1
     580:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     584:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     588:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     58c:	d204      	bcs.n	598 <__aeabi_dmul+0x80>
     58e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     592:	416d      	adcs	r5, r5
     594:	eb46 0606 	adc.w	r6, r6, r6
     598:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     59c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     5a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     5a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     5a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     5ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     5b0:	bf88      	it	hi
     5b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     5b6:	d81e      	bhi.n	5f6 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x1a>
     5b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     5bc:	bf08      	it	eq
     5be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     5c2:	f150 0000 	adcs.w	r0, r0, #0
     5c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     5ca:	bd70      	pop	{r4, r5, r6, pc}
     5cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     5d0:	ea46 0101 	orr.w	r1, r6, r1
     5d4:	ea40 0002 	orr.w	r0, r0, r2
     5d8:	ea81 0103 	eor.w	r1, r1, r3
     5dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     5e0:	bfc2      	ittt	gt
     5e2:	ebd4 050c 	rsbsgt	r5, r4, ip
     5e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     5ea:	bd70      	popgt	{r4, r5, r6, pc}
     5ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     5f0:	f04f 0e00 	mov.w	lr, #0
     5f4:	3c01      	subs	r4, #1
     5f6:	f300 80ab 	bgt.w	750 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x174>
     5fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
     5fe:	bfde      	ittt	le
     600:	2000      	movle	r0, #0
     602:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     606:	bd70      	pople	{r4, r5, r6, pc}
     608:	f1c4 0400 	rsb	r4, r4, #0
     60c:	3c20      	subs	r4, #32
     60e:	da35      	bge.n	67c <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0xa0>
     610:	340c      	adds	r4, #12
     612:	dc1b      	bgt.n	64c <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x70>
     614:	f104 0414 	add.w	r4, r4, #20
     618:	f1c4 0520 	rsb	r5, r4, #32
     61c:	fa00 f305 	lsl.w	r3, r0, r5
     620:	fa20 f004 	lsr.w	r0, r0, r4
     624:	fa01 f205 	lsl.w	r2, r1, r5
     628:	ea40 0002 	orr.w	r0, r0, r2
     62c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     630:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     634:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     638:	fa21 f604 	lsr.w	r6, r1, r4
     63c:	eb42 0106 	adc.w	r1, r2, r6
     640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     644:	bf08      	it	eq
     646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     64a:	bd70      	pop	{r4, r5, r6, pc}
     64c:	f1c4 040c 	rsb	r4, r4, #12
     650:	f1c4 0520 	rsb	r5, r4, #32
     654:	fa00 f304 	lsl.w	r3, r0, r4
     658:	fa20 f005 	lsr.w	r0, r0, r5
     65c:	fa01 f204 	lsl.w	r2, r1, r4
     660:	ea40 0002 	orr.w	r0, r0, r2
     664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     668:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     66c:	f141 0100 	adc.w	r1, r1, #0
     670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     674:	bf08      	it	eq
     676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     67a:	bd70      	pop	{r4, r5, r6, pc}
     67c:	f1c4 0520 	rsb	r5, r4, #32
     680:	fa00 f205 	lsl.w	r2, r0, r5
     684:	ea4e 0e02 	orr.w	lr, lr, r2
     688:	fa20 f304 	lsr.w	r3, r0, r4
     68c:	fa01 f205 	lsl.w	r2, r1, r5
     690:	ea43 0302 	orr.w	r3, r3, r2
     694:	fa21 f004 	lsr.w	r0, r1, r4
     698:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     69c:	fa21 f204 	lsr.w	r2, r1, r4
     6a0:	ea20 0002 	bic.w	r0, r0, r2
     6a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     6a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     6ac:	bf08      	it	eq
     6ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     6b2:	bd70      	pop	{r4, r5, r6, pc}
     6b4:	f094 0f00 	teq	r4, #0
     6b8:	d10f      	bne.n	6da <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0xfe>
     6ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     6be:	0040      	lsls	r0, r0, #1
     6c0:	eb41 0101 	adc.w	r1, r1, r1
     6c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     6c8:	bf08      	it	eq
     6ca:	3c01      	subeq	r4, #1
     6cc:	d0f7      	beq.n	6be <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0xe2>
     6ce:	ea41 0106 	orr.w	r1, r1, r6
     6d2:	f095 0f00 	teq	r5, #0
     6d6:	bf18      	it	ne
     6d8:	4770      	bxne	lr
     6da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     6de:	0052      	lsls	r2, r2, #1
     6e0:	eb43 0303 	adc.w	r3, r3, r3
     6e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     6e8:	bf08      	it	eq
     6ea:	3d01      	subeq	r5, #1
     6ec:	d0f7      	beq.n	6de <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x102>
     6ee:	ea43 0306 	orr.w	r3, r3, r6
     6f2:	4770      	bx	lr
     6f4:	ea94 0f0c 	teq	r4, ip
     6f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     6fc:	bf18      	it	ne
     6fe:	ea95 0f0c 	teqne	r5, ip
     702:	d00c      	beq.n	71e <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x142>
     704:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     708:	bf18      	it	ne
     70a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     70e:	d1d1      	bne.n	6b4 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0xd8>
     710:	ea81 0103 	eor.w	r1, r1, r3
     714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     718:	f04f 0000 	mov.w	r0, #0
     71c:	bd70      	pop	{r4, r5, r6, pc}
     71e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     722:	bf06      	itte	eq
     724:	4610      	moveq	r0, r2
     726:	4619      	moveq	r1, r3
     728:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     72c:	d019      	beq.n	762 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x186>
     72e:	ea94 0f0c 	teq	r4, ip
     732:	d102      	bne.n	73a <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x15e>
     734:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     738:	d113      	bne.n	762 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x186>
     73a:	ea95 0f0c 	teq	r5, ip
     73e:	d105      	bne.n	74c <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x170>
     740:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     744:	bf1c      	itt	ne
     746:	4610      	movne	r0, r2
     748:	4619      	movne	r1, r3
     74a:	d10a      	bne.n	762 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x186>
     74c:	ea81 0103 	eor.w	r1, r1, r3
     750:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     754:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     758:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     75c:	f04f 0000 	mov.w	r0, #0
     760:	bd70      	pop	{r4, r5, r6, pc}
     762:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     766:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     76a:	bd70      	pop	{r4, r5, r6, pc}

0000076c <__aeabi_ddiv>:
     76c:	b570      	push	{r4, r5, r6, lr}
     76e:	f04f 0cff 	mov.w	ip, #255	; 0xff
     772:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     776:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     77a:	bf1d      	ittte	ne
     77c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     780:	ea94 0f0c 	teqne	r4, ip
     784:	ea95 0f0c 	teqne	r5, ip
     788:	f000 f8a7 	bleq	8da <CONFIG_ISR_STACK_SIZE+0xda>
     78c:	eba4 0405 	sub.w	r4, r4, r5
     790:	ea81 0e03 	eor.w	lr, r1, r3
     794:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     798:	ea4f 3101 	mov.w	r1, r1, lsl #12
     79c:	f000 8088 	beq.w	8b0 <CONFIG_ISR_STACK_SIZE+0xb0>
     7a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
     7a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     7a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     7ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     7b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
     7b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     7b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     7bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
     7c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     7c4:	429d      	cmp	r5, r3
     7c6:	bf08      	it	eq
     7c8:	4296      	cmpeq	r6, r2
     7ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     7ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
     7d2:	d202      	bcs.n	7da <CONFIG_NET_SOCKETS_DNS_TIMEOUT+0xa>
     7d4:	085b      	lsrs	r3, r3, #1
     7d6:	ea4f 0232 	mov.w	r2, r2, rrx
     7da:	1ab6      	subs	r6, r6, r2
     7dc:	eb65 0503 	sbc.w	r5, r5, r3
     7e0:	085b      	lsrs	r3, r3, #1
     7e2:	ea4f 0232 	mov.w	r2, r2, rrx
     7e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     7ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     7ee:	ebb6 0e02 	subs.w	lr, r6, r2
     7f2:	eb75 0e03 	sbcs.w	lr, r5, r3
     7f6:	bf22      	ittt	cs
     7f8:	1ab6      	subcs	r6, r6, r2
     7fa:	4675      	movcs	r5, lr
     7fc:	ea40 000c 	orrcs.w	r0, r0, ip
     800:	085b      	lsrs	r3, r3, #1
     802:	ea4f 0232 	mov.w	r2, r2, rrx
     806:	ebb6 0e02 	subs.w	lr, r6, r2
     80a:	eb75 0e03 	sbcs.w	lr, r5, r3
     80e:	bf22      	ittt	cs
     810:	1ab6      	subcs	r6, r6, r2
     812:	4675      	movcs	r5, lr
     814:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     818:	085b      	lsrs	r3, r3, #1
     81a:	ea4f 0232 	mov.w	r2, r2, rrx
     81e:	ebb6 0e02 	subs.w	lr, r6, r2
     822:	eb75 0e03 	sbcs.w	lr, r5, r3
     826:	bf22      	ittt	cs
     828:	1ab6      	subcs	r6, r6, r2
     82a:	4675      	movcs	r5, lr
     82c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     830:	085b      	lsrs	r3, r3, #1
     832:	ea4f 0232 	mov.w	r2, r2, rrx
     836:	ebb6 0e02 	subs.w	lr, r6, r2
     83a:	eb75 0e03 	sbcs.w	lr, r5, r3
     83e:	bf22      	ittt	cs
     840:	1ab6      	subcs	r6, r6, r2
     842:	4675      	movcs	r5, lr
     844:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     848:	ea55 0e06 	orrs.w	lr, r5, r6
     84c:	d018      	beq.n	880 <CONFIG_ISR_STACK_SIZE+0x80>
     84e:	ea4f 1505 	mov.w	r5, r5, lsl #4
     852:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     856:	ea4f 1606 	mov.w	r6, r6, lsl #4
     85a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     85e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     862:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     866:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     86a:	d1c0      	bne.n	7ee <CONFIG_NET_SOCKETS_DNS_TIMEOUT+0x1e>
     86c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     870:	d10b      	bne.n	88a <CONFIG_ISR_STACK_SIZE+0x8a>
     872:	ea41 0100 	orr.w	r1, r1, r0
     876:	f04f 0000 	mov.w	r0, #0
     87a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     87e:	e7b6      	b.n	7ee <CONFIG_NET_SOCKETS_DNS_TIMEOUT+0x1e>
     880:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     884:	bf04      	itt	eq
     886:	4301      	orreq	r1, r0
     888:	2000      	moveq	r0, #0
     88a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     88e:	bf88      	it	hi
     890:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     894:	f63f aeaf 	bhi.w	5f6 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x1a>
     898:	ebb5 0c03 	subs.w	ip, r5, r3
     89c:	bf04      	itt	eq
     89e:	ebb6 0c02 	subseq.w	ip, r6, r2
     8a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     8a6:	f150 0000 	adcs.w	r0, r0, #0
     8aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     8ae:	bd70      	pop	{r4, r5, r6, pc}
     8b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     8b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     8b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     8bc:	bfc2      	ittt	gt
     8be:	ebd4 050c 	rsbsgt	r5, r4, ip
     8c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     8c6:	bd70      	popgt	{r4, r5, r6, pc}
     8c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     8cc:	f04f 0e00 	mov.w	lr, #0
     8d0:	3c01      	subs	r4, #1
     8d2:	e690      	b.n	5f6 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x1a>
     8d4:	ea45 0e06 	orr.w	lr, r5, r6
     8d8:	e68d      	b.n	5f6 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x1a>
     8da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     8de:	ea94 0f0c 	teq	r4, ip
     8e2:	bf08      	it	eq
     8e4:	ea95 0f0c 	teqeq	r5, ip
     8e8:	f43f af3b 	beq.w	762 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x186>
     8ec:	ea94 0f0c 	teq	r4, ip
     8f0:	d10a      	bne.n	908 <CONFIG_ISR_STACK_SIZE+0x108>
     8f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     8f6:	f47f af34 	bne.w	762 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x186>
     8fa:	ea95 0f0c 	teq	r5, ip
     8fe:	f47f af25 	bne.w	74c <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x170>
     902:	4610      	mov	r0, r2
     904:	4619      	mov	r1, r3
     906:	e72c      	b.n	762 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x186>
     908:	ea95 0f0c 	teq	r5, ip
     90c:	d106      	bne.n	91c <CONFIG_ISR_STACK_SIZE+0x11c>
     90e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     912:	f43f aefd 	beq.w	710 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x134>
     916:	4610      	mov	r0, r2
     918:	4619      	mov	r1, r3
     91a:	e722      	b.n	762 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x186>
     91c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     920:	bf18      	it	ne
     922:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     926:	f47f aec5 	bne.w	6b4 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0xd8>
     92a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     92e:	f47f af0d 	bne.w	74c <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x170>
     932:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     936:	f47f aeeb 	bne.w	710 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x134>
     93a:	e712      	b.n	762 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x186>

0000093c <__aeabi_uldivmod>:
     93c:	b953      	cbnz	r3, 954 <__aeabi_uldivmod+0x18>
     93e:	b94a      	cbnz	r2, 954 <__aeabi_uldivmod+0x18>
     940:	2900      	cmp	r1, #0
     942:	bf08      	it	eq
     944:	2800      	cmpeq	r0, #0
     946:	bf1c      	itt	ne
     948:	f04f 31ff 	movne.w	r1, #4294967295
     94c:	f04f 30ff 	movne.w	r0, #4294967295
     950:	f000 b80c 	b.w	96c <__aeabi_idiv0>
     954:	f1ad 0c08 	sub.w	ip, sp, #8
     958:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     95c:	f000 f8ce 	bl	afc <__udivmoddi4>
     960:	f8dd e004 	ldr.w	lr, [sp, #4]
     964:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     968:	b004      	add	sp, #16
     96a:	4770      	bx	lr

0000096c <__aeabi_idiv0>:
     96c:	4770      	bx	lr
     96e:	bf00      	nop

00000970 <__gedf2>:
     970:	f04f 3cff 	mov.w	ip, #4294967295
     974:	e006      	b.n	984 <__cmpdf2+0x4>
     976:	bf00      	nop

00000978 <__ledf2>:
     978:	f04f 0c01 	mov.w	ip, #1
     97c:	e002      	b.n	984 <__cmpdf2+0x4>
     97e:	bf00      	nop

00000980 <__cmpdf2>:
     980:	f04f 0c01 	mov.w	ip, #1
     984:	f84d cd04 	str.w	ip, [sp, #-4]!
     988:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     98c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     994:	bf18      	it	ne
     996:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     99a:	d01b      	beq.n	9d4 <__cmpdf2+0x54>
     99c:	b001      	add	sp, #4
     99e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     9a2:	bf0c      	ite	eq
     9a4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     9a8:	ea91 0f03 	teqne	r1, r3
     9ac:	bf02      	ittt	eq
     9ae:	ea90 0f02 	teqeq	r0, r2
     9b2:	2000      	moveq	r0, #0
     9b4:	4770      	bxeq	lr
     9b6:	f110 0f00 	cmn.w	r0, #0
     9ba:	ea91 0f03 	teq	r1, r3
     9be:	bf58      	it	pl
     9c0:	4299      	cmppl	r1, r3
     9c2:	bf08      	it	eq
     9c4:	4290      	cmpeq	r0, r2
     9c6:	bf2c      	ite	cs
     9c8:	17d8      	asrcs	r0, r3, #31
     9ca:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     9ce:	f040 0001 	orr.w	r0, r0, #1
     9d2:	4770      	bx	lr
     9d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     9d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     9dc:	d102      	bne.n	9e4 <__cmpdf2+0x64>
     9de:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     9e2:	d107      	bne.n	9f4 <__cmpdf2+0x74>
     9e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     9e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     9ec:	d1d6      	bne.n	99c <__cmpdf2+0x1c>
     9ee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     9f2:	d0d3      	beq.n	99c <__cmpdf2+0x1c>
     9f4:	f85d 0b04 	ldr.w	r0, [sp], #4
     9f8:	4770      	bx	lr
     9fa:	bf00      	nop

000009fc <__aeabi_cdrcmple>:
     9fc:	4684      	mov	ip, r0
     9fe:	4610      	mov	r0, r2
     a00:	4662      	mov	r2, ip
     a02:	468c      	mov	ip, r1
     a04:	4619      	mov	r1, r3
     a06:	4663      	mov	r3, ip
     a08:	e000      	b.n	a0c <__aeabi_cdcmpeq>
     a0a:	bf00      	nop

00000a0c <__aeabi_cdcmpeq>:
     a0c:	b501      	push	{r0, lr}
     a0e:	f7ff ffb7 	bl	980 <__cmpdf2>
     a12:	2800      	cmp	r0, #0
     a14:	bf48      	it	mi
     a16:	f110 0f00 	cmnmi.w	r0, #0
     a1a:	bd01      	pop	{r0, pc}

00000a1c <__aeabi_dcmpeq>:
     a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
     a20:	f7ff fff4 	bl	a0c <__aeabi_cdcmpeq>
     a24:	bf0c      	ite	eq
     a26:	2001      	moveq	r0, #1
     a28:	2000      	movne	r0, #0
     a2a:	f85d fb08 	ldr.w	pc, [sp], #8
     a2e:	bf00      	nop

00000a30 <__aeabi_dcmplt>:
     a30:	f84d ed08 	str.w	lr, [sp, #-8]!
     a34:	f7ff ffea 	bl	a0c <__aeabi_cdcmpeq>
     a38:	bf34      	ite	cc
     a3a:	2001      	movcc	r0, #1
     a3c:	2000      	movcs	r0, #0
     a3e:	f85d fb08 	ldr.w	pc, [sp], #8
     a42:	bf00      	nop

00000a44 <__aeabi_dcmple>:
     a44:	f84d ed08 	str.w	lr, [sp, #-8]!
     a48:	f7ff ffe0 	bl	a0c <__aeabi_cdcmpeq>
     a4c:	bf94      	ite	ls
     a4e:	2001      	movls	r0, #1
     a50:	2000      	movhi	r0, #0
     a52:	f85d fb08 	ldr.w	pc, [sp], #8
     a56:	bf00      	nop

00000a58 <__aeabi_dcmpge>:
     a58:	f84d ed08 	str.w	lr, [sp, #-8]!
     a5c:	f7ff ffce 	bl	9fc <__aeabi_cdrcmple>
     a60:	bf94      	ite	ls
     a62:	2001      	movls	r0, #1
     a64:	2000      	movhi	r0, #0
     a66:	f85d fb08 	ldr.w	pc, [sp], #8
     a6a:	bf00      	nop

00000a6c <__aeabi_dcmpgt>:
     a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
     a70:	f7ff ffc4 	bl	9fc <__aeabi_cdrcmple>
     a74:	bf34      	ite	cc
     a76:	2001      	movcc	r0, #1
     a78:	2000      	movcs	r0, #0
     a7a:	f85d fb08 	ldr.w	pc, [sp], #8
     a7e:	bf00      	nop

00000a80 <__aeabi_dcmpun>:
     a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     a88:	d102      	bne.n	a90 <__aeabi_dcmpun+0x10>
     a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     a8e:	d10a      	bne.n	aa6 <__aeabi_dcmpun+0x26>
     a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     a98:	d102      	bne.n	aa0 <__aeabi_dcmpun+0x20>
     a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     a9e:	d102      	bne.n	aa6 <__aeabi_dcmpun+0x26>
     aa0:	f04f 0000 	mov.w	r0, #0
     aa4:	4770      	bx	lr
     aa6:	f04f 0001 	mov.w	r0, #1
     aaa:	4770      	bx	lr

00000aac <__aeabi_d2iz>:
     aac:	ea4f 0241 	mov.w	r2, r1, lsl #1
     ab0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     ab4:	d215      	bcs.n	ae2 <__aeabi_d2iz+0x36>
     ab6:	d511      	bpl.n	adc <__aeabi_d2iz+0x30>
     ab8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     abc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     ac0:	d912      	bls.n	ae8 <__aeabi_d2iz+0x3c>
     ac2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     ac6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     aca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     ace:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     ad2:	fa23 f002 	lsr.w	r0, r3, r2
     ad6:	bf18      	it	ne
     ad8:	4240      	negne	r0, r0
     ada:	4770      	bx	lr
     adc:	f04f 0000 	mov.w	r0, #0
     ae0:	4770      	bx	lr
     ae2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     ae6:	d105      	bne.n	af4 <__aeabi_d2iz+0x48>
     ae8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
     aec:	bf08      	it	eq
     aee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     af2:	4770      	bx	lr
     af4:	f04f 0000 	mov.w	r0, #0
     af8:	4770      	bx	lr
     afa:	bf00      	nop

00000afc <__udivmoddi4>:
     afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     b00:	4686      	mov	lr, r0
     b02:	468c      	mov	ip, r1
     b04:	4608      	mov	r0, r1
     b06:	9e08      	ldr	r6, [sp, #32]
     b08:	4615      	mov	r5, r2
     b0a:	4674      	mov	r4, lr
     b0c:	4619      	mov	r1, r3
     b0e:	2b00      	cmp	r3, #0
     b10:	f040 80c2 	bne.w	c98 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0xe0>
     b14:	4285      	cmp	r5, r0
     b16:	fab2 f282 	clz	r2, r2
     b1a:	d945      	bls.n	ba8 <__udivmoddi4+0xac>
     b1c:	b14a      	cbz	r2, b32 <__udivmoddi4+0x36>
     b1e:	f1c2 0320 	rsb	r3, r2, #32
     b22:	fa00 fc02 	lsl.w	ip, r0, r2
     b26:	fa2e f303 	lsr.w	r3, lr, r3
     b2a:	4095      	lsls	r5, r2
     b2c:	ea43 0c0c 	orr.w	ip, r3, ip
     b30:	4094      	lsls	r4, r2
     b32:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     b36:	b2a8      	uxth	r0, r5
     b38:	fbbc f8fe 	udiv	r8, ip, lr
     b3c:	0c23      	lsrs	r3, r4, #16
     b3e:	fb0e cc18 	mls	ip, lr, r8, ip
     b42:	fb08 f900 	mul.w	r9, r8, r0
     b46:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     b4a:	4599      	cmp	r9, r3
     b4c:	d928      	bls.n	ba0 <__udivmoddi4+0xa4>
     b4e:	18eb      	adds	r3, r5, r3
     b50:	f108 37ff 	add.w	r7, r8, #4294967295
     b54:	d204      	bcs.n	b60 <__udivmoddi4+0x64>
     b56:	4599      	cmp	r9, r3
     b58:	d902      	bls.n	b60 <__udivmoddi4+0x64>
     b5a:	f1a8 0702 	sub.w	r7, r8, #2
     b5e:	442b      	add	r3, r5
     b60:	eba3 0309 	sub.w	r3, r3, r9
     b64:	b2a4      	uxth	r4, r4
     b66:	fbb3 fcfe 	udiv	ip, r3, lr
     b6a:	fb0e 331c 	mls	r3, lr, ip, r3
     b6e:	fb0c f000 	mul.w	r0, ip, r0
     b72:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     b76:	42a0      	cmp	r0, r4
     b78:	d914      	bls.n	ba4 <__udivmoddi4+0xa8>
     b7a:	192c      	adds	r4, r5, r4
     b7c:	f10c 33ff 	add.w	r3, ip, #4294967295
     b80:	d204      	bcs.n	b8c <__udivmoddi4+0x90>
     b82:	42a0      	cmp	r0, r4
     b84:	d902      	bls.n	b8c <__udivmoddi4+0x90>
     b86:	f1ac 0302 	sub.w	r3, ip, #2
     b8a:	442c      	add	r4, r5
     b8c:	1a24      	subs	r4, r4, r0
     b8e:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
     b92:	b11e      	cbz	r6, b9c <__udivmoddi4+0xa0>
     b94:	40d4      	lsrs	r4, r2
     b96:	2300      	movs	r3, #0
     b98:	6034      	str	r4, [r6, #0]
     b9a:	6073      	str	r3, [r6, #4]
     b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     ba0:	4647      	mov	r7, r8
     ba2:	e7dd      	b.n	b60 <__udivmoddi4+0x64>
     ba4:	4663      	mov	r3, ip
     ba6:	e7f1      	b.n	b8c <__udivmoddi4+0x90>
     ba8:	bb92      	cbnz	r2, c10 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x58>
     baa:	1b43      	subs	r3, r0, r5
     bac:	2101      	movs	r1, #1
     bae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     bb2:	b2af      	uxth	r7, r5
     bb4:	fbb3 fcfe 	udiv	ip, r3, lr
     bb8:	0c20      	lsrs	r0, r4, #16
     bba:	fb0e 331c 	mls	r3, lr, ip, r3
     bbe:	fb0c f807 	mul.w	r8, ip, r7
     bc2:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     bc6:	4598      	cmp	r8, r3
     bc8:	d962      	bls.n	c90 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0xd8>
     bca:	18eb      	adds	r3, r5, r3
     bcc:	f10c 30ff 	add.w	r0, ip, #4294967295
     bd0:	d204      	bcs.n	bdc <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x24>
     bd2:	4598      	cmp	r8, r3
     bd4:	d902      	bls.n	bdc <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x24>
     bd6:	f1ac 0002 	sub.w	r0, ip, #2
     bda:	442b      	add	r3, r5
     bdc:	eba3 0308 	sub.w	r3, r3, r8
     be0:	b2a4      	uxth	r4, r4
     be2:	fbb3 fcfe 	udiv	ip, r3, lr
     be6:	fb0e 331c 	mls	r3, lr, ip, r3
     bea:	fb0c f707 	mul.w	r7, ip, r7
     bee:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     bf2:	42a7      	cmp	r7, r4
     bf4:	d94e      	bls.n	c94 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0xdc>
     bf6:	192c      	adds	r4, r5, r4
     bf8:	f10c 33ff 	add.w	r3, ip, #4294967295
     bfc:	d204      	bcs.n	c08 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x50>
     bfe:	42a7      	cmp	r7, r4
     c00:	d902      	bls.n	c08 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x50>
     c02:	f1ac 0302 	sub.w	r3, ip, #2
     c06:	442c      	add	r4, r5
     c08:	1be4      	subs	r4, r4, r7
     c0a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     c0e:	e7c0      	b.n	b92 <__udivmoddi4+0x96>
     c10:	f1c2 0320 	rsb	r3, r2, #32
     c14:	fa20 f103 	lsr.w	r1, r0, r3
     c18:	4095      	lsls	r5, r2
     c1a:	4090      	lsls	r0, r2
     c1c:	fa2e f303 	lsr.w	r3, lr, r3
     c20:	4303      	orrs	r3, r0
     c22:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     c26:	b2af      	uxth	r7, r5
     c28:	fbb1 fcfe 	udiv	ip, r1, lr
     c2c:	fb0e 101c 	mls	r0, lr, ip, r1
     c30:	0c19      	lsrs	r1, r3, #16
     c32:	fb0c f807 	mul.w	r8, ip, r7
     c36:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     c3a:	4588      	cmp	r8, r1
     c3c:	fa04 f402 	lsl.w	r4, r4, r2
     c40:	d922      	bls.n	c88 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0xd0>
     c42:	1869      	adds	r1, r5, r1
     c44:	f10c 30ff 	add.w	r0, ip, #4294967295
     c48:	d204      	bcs.n	c54 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x9c>
     c4a:	4588      	cmp	r8, r1
     c4c:	d902      	bls.n	c54 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x9c>
     c4e:	f1ac 0002 	sub.w	r0, ip, #2
     c52:	4429      	add	r1, r5
     c54:	eba1 0108 	sub.w	r1, r1, r8
     c58:	b29b      	uxth	r3, r3
     c5a:	fbb1 fcfe 	udiv	ip, r1, lr
     c5e:	fb0e 111c 	mls	r1, lr, ip, r1
     c62:	fb0c f707 	mul.w	r7, ip, r7
     c66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     c6a:	429f      	cmp	r7, r3
     c6c:	d90e      	bls.n	c8c <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0xd4>
     c6e:	18eb      	adds	r3, r5, r3
     c70:	f10c 31ff 	add.w	r1, ip, #4294967295
     c74:	d204      	bcs.n	c80 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0xc8>
     c76:	429f      	cmp	r7, r3
     c78:	d902      	bls.n	c80 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0xc8>
     c7a:	f1ac 0102 	sub.w	r1, ip, #2
     c7e:	442b      	add	r3, r5
     c80:	1bdb      	subs	r3, r3, r7
     c82:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     c86:	e792      	b.n	bae <__udivmoddi4+0xb2>
     c88:	4660      	mov	r0, ip
     c8a:	e7e3      	b.n	c54 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x9c>
     c8c:	4661      	mov	r1, ip
     c8e:	e7f7      	b.n	c80 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0xc8>
     c90:	4660      	mov	r0, ip
     c92:	e7a3      	b.n	bdc <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x24>
     c94:	4663      	mov	r3, ip
     c96:	e7b7      	b.n	c08 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x50>
     c98:	4283      	cmp	r3, r0
     c9a:	d906      	bls.n	caa <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0xf2>
     c9c:	b916      	cbnz	r6, ca4 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0xec>
     c9e:	2100      	movs	r1, #0
     ca0:	4608      	mov	r0, r1
     ca2:	e77b      	b.n	b9c <__udivmoddi4+0xa0>
     ca4:	e9c6 e000 	strd	lr, r0, [r6]
     ca8:	e7f9      	b.n	c9e <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0xe6>
     caa:	fab3 f783 	clz	r7, r3
     cae:	b98f      	cbnz	r7, cd4 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x11c>
     cb0:	4283      	cmp	r3, r0
     cb2:	d301      	bcc.n	cb8 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x100>
     cb4:	4572      	cmp	r2, lr
     cb6:	d808      	bhi.n	cca <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x112>
     cb8:	ebbe 0402 	subs.w	r4, lr, r2
     cbc:	eb60 0303 	sbc.w	r3, r0, r3
     cc0:	2001      	movs	r0, #1
     cc2:	469c      	mov	ip, r3
     cc4:	b91e      	cbnz	r6, cce <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x116>
     cc6:	2100      	movs	r1, #0
     cc8:	e768      	b.n	b9c <__udivmoddi4+0xa0>
     cca:	4638      	mov	r0, r7
     ccc:	e7fa      	b.n	cc4 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x10c>
     cce:	e9c6 4c00 	strd	r4, ip, [r6]
     cd2:	e7f8      	b.n	cc6 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x10e>
     cd4:	f1c7 0c20 	rsb	ip, r7, #32
     cd8:	40bb      	lsls	r3, r7
     cda:	fa22 f40c 	lsr.w	r4, r2, ip
     cde:	431c      	orrs	r4, r3
     ce0:	fa2e f10c 	lsr.w	r1, lr, ip
     ce4:	fa20 f30c 	lsr.w	r3, r0, ip
     ce8:	40b8      	lsls	r0, r7
     cea:	4301      	orrs	r1, r0
     cec:	ea4f 4914 	mov.w	r9, r4, lsr #16
     cf0:	fa0e f507 	lsl.w	r5, lr, r7
     cf4:	fbb3 f8f9 	udiv	r8, r3, r9
     cf8:	fa1f fe84 	uxth.w	lr, r4
     cfc:	fb09 3018 	mls	r0, r9, r8, r3
     d00:	0c0b      	lsrs	r3, r1, #16
     d02:	fb08 fa0e 	mul.w	sl, r8, lr
     d06:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     d0a:	459a      	cmp	sl, r3
     d0c:	fa02 f207 	lsl.w	r2, r2, r7
     d10:	d940      	bls.n	d94 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x1dc>
     d12:	18e3      	adds	r3, r4, r3
     d14:	f108 30ff 	add.w	r0, r8, #4294967295
     d18:	d204      	bcs.n	d24 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x16c>
     d1a:	459a      	cmp	sl, r3
     d1c:	d902      	bls.n	d24 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x16c>
     d1e:	f1a8 0002 	sub.w	r0, r8, #2
     d22:	4423      	add	r3, r4
     d24:	eba3 030a 	sub.w	r3, r3, sl
     d28:	b289      	uxth	r1, r1
     d2a:	fbb3 f8f9 	udiv	r8, r3, r9
     d2e:	fb09 3318 	mls	r3, r9, r8, r3
     d32:	fb08 fe0e 	mul.w	lr, r8, lr
     d36:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     d3a:	458e      	cmp	lr, r1
     d3c:	d92c      	bls.n	d98 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x1e0>
     d3e:	1861      	adds	r1, r4, r1
     d40:	f108 33ff 	add.w	r3, r8, #4294967295
     d44:	d204      	bcs.n	d50 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x198>
     d46:	458e      	cmp	lr, r1
     d48:	d902      	bls.n	d50 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x198>
     d4a:	f1a8 0302 	sub.w	r3, r8, #2
     d4e:	4421      	add	r1, r4
     d50:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     d54:	fba0 9802 	umull	r9, r8, r0, r2
     d58:	eba1 010e 	sub.w	r1, r1, lr
     d5c:	4541      	cmp	r1, r8
     d5e:	46ce      	mov	lr, r9
     d60:	4643      	mov	r3, r8
     d62:	d302      	bcc.n	d6a <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x1b2>
     d64:	d106      	bne.n	d74 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x1bc>
     d66:	454d      	cmp	r5, r9
     d68:	d204      	bcs.n	d74 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x1bc>
     d6a:	ebb9 0e02 	subs.w	lr, r9, r2
     d6e:	eb68 0304 	sbc.w	r3, r8, r4
     d72:	3801      	subs	r0, #1
     d74:	2e00      	cmp	r6, #0
     d76:	d0a6      	beq.n	cc6 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x10e>
     d78:	ebb5 020e 	subs.w	r2, r5, lr
     d7c:	eb61 0103 	sbc.w	r1, r1, r3
     d80:	fa01 fc0c 	lsl.w	ip, r1, ip
     d84:	fa22 f307 	lsr.w	r3, r2, r7
     d88:	ea4c 0303 	orr.w	r3, ip, r3
     d8c:	40f9      	lsrs	r1, r7
     d8e:	e9c6 3100 	strd	r3, r1, [r6]
     d92:	e798      	b.n	cc6 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x10e>
     d94:	4640      	mov	r0, r8
     d96:	e7c5      	b.n	d24 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x16c>
     d98:	4643      	mov	r3, r8
     d9a:	e7d9      	b.n	d50 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x198>

00000d9c <strcmp>:
     d9c:	f810 2b01 	ldrb.w	r2, [r0], #1
     da0:	f811 3b01 	ldrb.w	r3, [r1], #1
     da4:	2a01      	cmp	r2, #1
     da6:	bf28      	it	cs
     da8:	429a      	cmpcs	r2, r3
     daa:	d0f7      	beq.n	d9c <strcmp>
     dac:	1ad0      	subs	r0, r2, r3
     dae:	4770      	bx	lr

00000db0 <strlen>:
     db0:	4603      	mov	r3, r0
     db2:	f813 2b01 	ldrb.w	r2, [r3], #1
     db6:	2a00      	cmp	r2, #0
     db8:	d1fb      	bne.n	db2 <strlen+0x2>
     dba:	1a18      	subs	r0, r3, r0
     dbc:	3801      	subs	r0, #1
     dbe:	4770      	bx	lr

00000dc0 <_dtoa_r>:
     dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     dc4:	6a47      	ldr	r7, [r0, #36]	; 0x24
     dc6:	b097      	sub	sp, #92	; 0x5c
     dc8:	4614      	mov	r4, r2
     dca:	461d      	mov	r5, r3
     dcc:	e9cd 4504 	strd	r4, r5, [sp, #16]
     dd0:	9e23      	ldr	r6, [sp, #140]	; 0x8c
     dd2:	4683      	mov	fp, r0
     dd4:	b97f      	cbnz	r7, df6 <_dtoa_r+0x36>
     dd6:	2010      	movs	r0, #16
     dd8:	f011 fb1a 	bl	12410 <malloc>
     ddc:	4602      	mov	r2, r0
     dde:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
     de2:	b920      	cbnz	r0, dee <_dtoa_r+0x2e>
     de4:	4ba2      	ldr	r3, [pc, #648]	; (1070 <CONFIG_FPROTECT_BLOCK_SIZE+0x70>)
     de6:	21ea      	movs	r1, #234	; 0xea
     de8:	48a2      	ldr	r0, [pc, #648]	; (1074 <CONFIG_FPROTECT_BLOCK_SIZE+0x74>)
     dea:	f012 fb5d 	bl	134a8 <__assert_func>
     dee:	e9c0 7701 	strd	r7, r7, [r0, #4]
     df2:	6007      	str	r7, [r0, #0]
     df4:	60c7      	str	r7, [r0, #12]
     df6:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
     dfa:	6819      	ldr	r1, [r3, #0]
     dfc:	b159      	cbz	r1, e16 <_dtoa_r+0x56>
     dfe:	685a      	ldr	r2, [r3, #4]
     e00:	604a      	str	r2, [r1, #4]
     e02:	2301      	movs	r3, #1
     e04:	4093      	lsls	r3, r2
     e06:	608b      	str	r3, [r1, #8]
     e08:	4658      	mov	r0, fp
     e0a:	f012 f875 	bl	12ef8 <_Bfree>
     e0e:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
     e12:	2200      	movs	r2, #0
     e14:	601a      	str	r2, [r3, #0]
     e16:	1e2b      	subs	r3, r5, #0
     e18:	bfb9      	ittee	lt
     e1a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
     e1e:	9305      	strlt	r3, [sp, #20]
     e20:	2300      	movge	r3, #0
     e22:	6033      	strge	r3, [r6, #0]
     e24:	9f05      	ldr	r7, [sp, #20]
     e26:	4b94      	ldr	r3, [pc, #592]	; (1078 <CONFIG_FPROTECT_BLOCK_SIZE+0x78>)
     e28:	bfbc      	itt	lt
     e2a:	2201      	movlt	r2, #1
     e2c:	6032      	strlt	r2, [r6, #0]
     e2e:	43bb      	bics	r3, r7
     e30:	d119      	bne.n	e66 <_dtoa_r+0xa6>
     e32:	9a22      	ldr	r2, [sp, #136]	; 0x88
     e34:	f242 730f 	movw	r3, #9999	; 0x270f
     e38:	6013      	str	r3, [r2, #0]
     e3a:	f3c7 0313 	ubfx	r3, r7, #0, #20
     e3e:	4323      	orrs	r3, r4
     e40:	f000 85e2 	beq.w	1a08 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x680>
     e44:	9b24      	ldr	r3, [sp, #144]	; 0x90
     e46:	b953      	cbnz	r3, e5e <_dtoa_r+0x9e>
     e48:	4b8c      	ldr	r3, [pc, #560]	; (107c <CONFIG_FPROTECT_BLOCK_SIZE+0x7c>)
     e4a:	e021      	b.n	e90 <_dtoa_r+0xd0>
     e4c:	4b8c      	ldr	r3, [pc, #560]	; (1080 <CONFIG_FPROTECT_BLOCK_SIZE+0x80>)
     e4e:	9308      	str	r3, [sp, #32]
     e50:	3308      	adds	r3, #8
     e52:	9a24      	ldr	r2, [sp, #144]	; 0x90
     e54:	6013      	str	r3, [r2, #0]
     e56:	9808      	ldr	r0, [sp, #32]
     e58:	b017      	add	sp, #92	; 0x5c
     e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     e5e:	4b87      	ldr	r3, [pc, #540]	; (107c <CONFIG_FPROTECT_BLOCK_SIZE+0x7c>)
     e60:	9308      	str	r3, [sp, #32]
     e62:	3303      	adds	r3, #3
     e64:	e7f5      	b.n	e52 <_dtoa_r+0x92>
     e66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
     e6a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
     e6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
     e72:	2200      	movs	r2, #0
     e74:	2300      	movs	r3, #0
     e76:	f7ff fdd1 	bl	a1c <__aeabi_dcmpeq>
     e7a:	4680      	mov	r8, r0
     e7c:	b150      	cbz	r0, e94 <_dtoa_r+0xd4>
     e7e:	9a22      	ldr	r2, [sp, #136]	; 0x88
     e80:	2301      	movs	r3, #1
     e82:	6013      	str	r3, [r2, #0]
     e84:	9b24      	ldr	r3, [sp, #144]	; 0x90
     e86:	b113      	cbz	r3, e8e <_dtoa_r+0xce>
     e88:	9a24      	ldr	r2, [sp, #144]	; 0x90
     e8a:	4b7e      	ldr	r3, [pc, #504]	; (1084 <CONFIG_FPROTECT_BLOCK_SIZE+0x84>)
     e8c:	6013      	str	r3, [r2, #0]
     e8e:	4b7e      	ldr	r3, [pc, #504]	; (1088 <CONFIG_FPROTECT_BLOCK_SIZE+0x88>)
     e90:	9308      	str	r3, [sp, #32]
     e92:	e7e0      	b.n	e56 <_dtoa_r+0x96>
     e94:	ab14      	add	r3, sp, #80	; 0x50
     e96:	9301      	str	r3, [sp, #4]
     e98:	ab15      	add	r3, sp, #84	; 0x54
     e9a:	9300      	str	r3, [sp, #0]
     e9c:	4658      	mov	r0, fp
     e9e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
     ea2:	f012 faa9 	bl	133f8 <__d2b>
     ea6:	f3c7 560a 	ubfx	r6, r7, #20, #11
     eaa:	9003      	str	r0, [sp, #12]
     eac:	2e00      	cmp	r6, #0
     eae:	d07a      	beq.n	fa6 <_dtoa_r+0x1e6>
     eb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
     eb2:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
     eb6:	f3c3 0313 	ubfx	r3, r3, #0, #20
     eba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
     ebe:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
     ec2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
     ec6:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
     eca:	4619      	mov	r1, r3
     ecc:	2200      	movs	r2, #0
     ece:	4b6f      	ldr	r3, [pc, #444]	; (108c <CONFIG_FPROTECT_BLOCK_SIZE+0x8c>)
     ed0:	f7ff f96a 	bl	1a8 <__aeabi_dsub>
     ed4:	a360      	add	r3, pc, #384	; (adr r3, 1058 <CONFIG_FPROTECT_BLOCK_SIZE+0x58>)
     ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
     eda:	f7ff fb1d 	bl	518 <__aeabi_dmul>
     ede:	a360      	add	r3, pc, #384	; (adr r3, 1060 <CONFIG_FPROTECT_BLOCK_SIZE+0x60>)
     ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
     ee4:	f7ff f962 	bl	1ac <__adddf3>
     ee8:	4604      	mov	r4, r0
     eea:	4630      	mov	r0, r6
     eec:	460d      	mov	r5, r1
     eee:	f7ff faa9 	bl	444 <__aeabi_i2d>
     ef2:	a35d      	add	r3, pc, #372	; (adr r3, 1068 <CONFIG_FPROTECT_BLOCK_SIZE+0x68>)
     ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
     ef8:	f7ff fb0e 	bl	518 <__aeabi_dmul>
     efc:	4602      	mov	r2, r0
     efe:	460b      	mov	r3, r1
     f00:	4620      	mov	r0, r4
     f02:	4629      	mov	r1, r5
     f04:	f7ff f952 	bl	1ac <__adddf3>
     f08:	4604      	mov	r4, r0
     f0a:	460d      	mov	r5, r1
     f0c:	f7ff fdce 	bl	aac <__aeabi_d2iz>
     f10:	2200      	movs	r2, #0
     f12:	4607      	mov	r7, r0
     f14:	2300      	movs	r3, #0
     f16:	4620      	mov	r0, r4
     f18:	4629      	mov	r1, r5
     f1a:	f7ff fd89 	bl	a30 <__aeabi_dcmplt>
     f1e:	b140      	cbz	r0, f32 <_dtoa_r+0x172>
     f20:	4638      	mov	r0, r7
     f22:	f7ff fa8f 	bl	444 <__aeabi_i2d>
     f26:	4622      	mov	r2, r4
     f28:	462b      	mov	r3, r5
     f2a:	f7ff fd77 	bl	a1c <__aeabi_dcmpeq>
     f2e:	b900      	cbnz	r0, f32 <_dtoa_r+0x172>
     f30:	3f01      	subs	r7, #1
     f32:	2f16      	cmp	r7, #22
     f34:	d854      	bhi.n	fe0 <_dtoa_r+0x220>
     f36:	4b56      	ldr	r3, [pc, #344]	; (1090 <CONFIG_FPROTECT_BLOCK_SIZE+0x90>)
     f38:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
     f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
     f40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
     f44:	f7ff fd74 	bl	a30 <__aeabi_dcmplt>
     f48:	2800      	cmp	r0, #0
     f4a:	d04b      	beq.n	fe4 <_dtoa_r+0x224>
     f4c:	3f01      	subs	r7, #1
     f4e:	2300      	movs	r3, #0
     f50:	9312      	str	r3, [sp, #72]	; 0x48
     f52:	9b14      	ldr	r3, [sp, #80]	; 0x50
     f54:	1b9b      	subs	r3, r3, r6
     f56:	1e5a      	subs	r2, r3, #1
     f58:	bf45      	ittet	mi
     f5a:	f1c3 0301 	rsbmi	r3, r3, #1
     f5e:	9306      	strmi	r3, [sp, #24]
     f60:	2300      	movpl	r3, #0
     f62:	2300      	movmi	r3, #0
     f64:	920a      	str	r2, [sp, #40]	; 0x28
     f66:	bf54      	ite	pl
     f68:	9306      	strpl	r3, [sp, #24]
     f6a:	930a      	strmi	r3, [sp, #40]	; 0x28
     f6c:	2f00      	cmp	r7, #0
     f6e:	db3b      	blt.n	fe8 <_dtoa_r+0x228>
     f70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     f72:	970f      	str	r7, [sp, #60]	; 0x3c
     f74:	443b      	add	r3, r7
     f76:	930a      	str	r3, [sp, #40]	; 0x28
     f78:	2300      	movs	r3, #0
     f7a:	930b      	str	r3, [sp, #44]	; 0x2c
     f7c:	9b20      	ldr	r3, [sp, #128]	; 0x80
     f7e:	2b09      	cmp	r3, #9
     f80:	f200 808a 	bhi.w	1098 <CONFIG_FPROTECT_BLOCK_SIZE+0x98>
     f84:	2b05      	cmp	r3, #5
     f86:	bfc4      	itt	gt
     f88:	3b04      	subgt	r3, #4
     f8a:	9320      	strgt	r3, [sp, #128]	; 0x80
     f8c:	9b20      	ldr	r3, [sp, #128]	; 0x80
     f8e:	f1a3 0302 	sub.w	r3, r3, #2
     f92:	bfcc      	ite	gt
     f94:	2400      	movgt	r4, #0
     f96:	2401      	movle	r4, #1
     f98:	2b03      	cmp	r3, #3
     f9a:	f200 8088 	bhi.w	10ae <CONFIG_FPROTECT_BLOCK_SIZE+0xae>
     f9e:	e8df f003 	tbb	[pc, r3]
     fa2:	382b      	.short	0x382b
     fa4:	5736      	.short	0x5736
     fa6:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	; 0x50
     faa:	441e      	add	r6, r3
     fac:	f206 4332 	addw	r3, r6, #1074	; 0x432
     fb0:	2b20      	cmp	r3, #32
     fb2:	bfc1      	itttt	gt
     fb4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
     fb8:	409f      	lslgt	r7, r3
     fba:	f206 4312 	addwgt	r3, r6, #1042	; 0x412
     fbe:	fa24 f303 	lsrgt.w	r3, r4, r3
     fc2:	bfd6      	itet	le
     fc4:	f1c3 0320 	rsble	r3, r3, #32
     fc8:	ea47 0003 	orrgt.w	r0, r7, r3
     fcc:	fa04 f003 	lslle.w	r0, r4, r3
     fd0:	f7ff fa28 	bl	424 <__aeabi_ui2d>
     fd4:	2201      	movs	r2, #1
     fd6:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
     fda:	3e01      	subs	r6, #1
     fdc:	9213      	str	r2, [sp, #76]	; 0x4c
     fde:	e774      	b.n	eca <_dtoa_r+0x10a>
     fe0:	2301      	movs	r3, #1
     fe2:	e7b5      	b.n	f50 <_dtoa_r+0x190>
     fe4:	9012      	str	r0, [sp, #72]	; 0x48
     fe6:	e7b4      	b.n	f52 <_dtoa_r+0x192>
     fe8:	9b06      	ldr	r3, [sp, #24]
     fea:	1bdb      	subs	r3, r3, r7
     fec:	9306      	str	r3, [sp, #24]
     fee:	427b      	negs	r3, r7
     ff0:	930b      	str	r3, [sp, #44]	; 0x2c
     ff2:	2300      	movs	r3, #0
     ff4:	930f      	str	r3, [sp, #60]	; 0x3c
     ff6:	e7c1      	b.n	f7c <_dtoa_r+0x1bc>
     ff8:	2300      	movs	r3, #0
     ffa:	930e      	str	r3, [sp, #56]	; 0x38
     ffc:	9b21      	ldr	r3, [sp, #132]	; 0x84
     ffe:	2b00      	cmp	r3, #0
    1000:	dc58      	bgt.n	10b4 <CONFIG_FPROTECT_BLOCK_SIZE+0xb4>
    1002:	2301      	movs	r3, #1
    1004:	9309      	str	r3, [sp, #36]	; 0x24
    1006:	4699      	mov	r9, r3
    1008:	461a      	mov	r2, r3
    100a:	9221      	str	r2, [sp, #132]	; 0x84
    100c:	e00c      	b.n	1028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>
    100e:	2301      	movs	r3, #1
    1010:	e7f3      	b.n	ffa <_dtoa_r+0x23a>
    1012:	2300      	movs	r3, #0
    1014:	930e      	str	r3, [sp, #56]	; 0x38
    1016:	9b21      	ldr	r3, [sp, #132]	; 0x84
    1018:	18fb      	adds	r3, r7, r3
    101a:	f103 0901 	add.w	r9, r3, #1
    101e:	9309      	str	r3, [sp, #36]	; 0x24
    1020:	464b      	mov	r3, r9
    1022:	2b01      	cmp	r3, #1
    1024:	bfb8      	it	lt
    1026:	2301      	movlt	r3, #1
    1028:	f8db 0024 	ldr.w	r0, [fp, #36]	; 0x24
    102c:	2100      	movs	r1, #0
    102e:	2204      	movs	r2, #4
    1030:	f102 0514 	add.w	r5, r2, #20
    1034:	429d      	cmp	r5, r3
    1036:	d941      	bls.n	10bc <CONFIG_FPROTECT_BLOCK_SIZE+0xbc>
    1038:	6041      	str	r1, [r0, #4]
    103a:	4658      	mov	r0, fp
    103c:	f011 ff1c 	bl	12e78 <_Balloc>
    1040:	9008      	str	r0, [sp, #32]
    1042:	2800      	cmp	r0, #0
    1044:	d13d      	bne.n	10c2 <CONFIG_FPROTECT_BLOCK_SIZE+0xc2>
    1046:	4b13      	ldr	r3, [pc, #76]	; (1094 <CONFIG_FPROTECT_BLOCK_SIZE+0x94>)
    1048:	4602      	mov	r2, r0
    104a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    104e:	e6cb      	b.n	de8 <_dtoa_r+0x28>
    1050:	2301      	movs	r3, #1
    1052:	e7df      	b.n	1014 <CONFIG_FPROTECT_BLOCK_SIZE+0x14>
    1054:	f3af 8000 	nop.w
    1058:	636f4361 	.word	0x636f4361
    105c:	3fd287a7 	.word	0x3fd287a7
    1060:	8b60c8b3 	.word	0x8b60c8b3
    1064:	3fc68a28 	.word	0x3fc68a28
    1068:	509f79fb 	.word	0x509f79fb
    106c:	3fd34413 	.word	0x3fd34413
    1070:	0002289a 	.word	0x0002289a
    1074:	000228b1 	.word	0x000228b1
    1078:	7ff00000 	.word	0x7ff00000
    107c:	00022896 	.word	0x00022896
    1080:	0002288d 	.word	0x0002288d
    1084:	0002286a 	.word	0x0002286a
    1088:	00022869 	.word	0x00022869
    108c:	3ff80000 	.word	0x3ff80000
    1090:	00020b30 	.word	0x00020b30
    1094:	00022925 	.word	0x00022925
    1098:	2401      	movs	r4, #1
    109a:	2300      	movs	r3, #0
    109c:	9320      	str	r3, [sp, #128]	; 0x80
    109e:	940e      	str	r4, [sp, #56]	; 0x38
    10a0:	f04f 33ff 	mov.w	r3, #4294967295
    10a4:	9309      	str	r3, [sp, #36]	; 0x24
    10a6:	4699      	mov	r9, r3
    10a8:	2200      	movs	r2, #0
    10aa:	2312      	movs	r3, #18
    10ac:	e7ad      	b.n	100a <CONFIG_FPROTECT_BLOCK_SIZE+0xa>
    10ae:	2301      	movs	r3, #1
    10b0:	930e      	str	r3, [sp, #56]	; 0x38
    10b2:	e7f5      	b.n	10a0 <CONFIG_FPROTECT_BLOCK_SIZE+0xa0>
    10b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
    10b6:	9309      	str	r3, [sp, #36]	; 0x24
    10b8:	4699      	mov	r9, r3
    10ba:	e7b5      	b.n	1028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>
    10bc:	3101      	adds	r1, #1
    10be:	0052      	lsls	r2, r2, #1
    10c0:	e7b6      	b.n	1030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>
    10c2:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    10c6:	9a08      	ldr	r2, [sp, #32]
    10c8:	601a      	str	r2, [r3, #0]
    10ca:	f1b9 0f0e 	cmp.w	r9, #14
    10ce:	d86f      	bhi.n	11b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b0>
    10d0:	2c00      	cmp	r4, #0
    10d2:	d06d      	beq.n	11b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b0>
    10d4:	2f00      	cmp	r7, #0
    10d6:	dd36      	ble.n	1146 <CONFIG_FPROTECT_BLOCK_SIZE+0x146>
    10d8:	4ba1      	ldr	r3, [pc, #644]	; (1360 <CONFIG_FPROTECT_BLOCK_SIZE+0x360>)
    10da:	f007 020f 	and.w	r2, r7, #15
    10de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    10e2:	e9d3 3400 	ldrd	r3, r4, [r3]
    10e6:	05f8      	lsls	r0, r7, #23
    10e8:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    10ec:	ea4f 1427 	mov.w	r4, r7, asr #4
    10f0:	d517      	bpl.n	1122 <CONFIG_FPROTECT_BLOCK_SIZE+0x122>
    10f2:	4b9c      	ldr	r3, [pc, #624]	; (1364 <CONFIG_FPROTECT_BLOCK_SIZE+0x364>)
    10f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    10f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    10fc:	f7ff fb36 	bl	76c <__aeabi_ddiv>
    1100:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1104:	f004 040f 	and.w	r4, r4, #15
    1108:	f04f 0803 	mov.w	r8, #3
    110c:	4d95      	ldr	r5, [pc, #596]	; (1364 <CONFIG_FPROTECT_BLOCK_SIZE+0x364>)
    110e:	b95c      	cbnz	r4, 1128 <CONFIG_FPROTECT_BLOCK_SIZE+0x128>
    1110:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    1114:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1118:	f7ff fb28 	bl	76c <__aeabi_ddiv>
    111c:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1120:	e02b      	b.n	117a <CONFIG_FPROTECT_BLOCK_SIZE+0x17a>
    1122:	f04f 0802 	mov.w	r8, #2
    1126:	e7f1      	b.n	110c <CONFIG_FPROTECT_BLOCK_SIZE+0x10c>
    1128:	07e1      	lsls	r1, r4, #31
    112a:	d509      	bpl.n	1140 <CONFIG_FPROTECT_BLOCK_SIZE+0x140>
    112c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    1130:	e9d5 2300 	ldrd	r2, r3, [r5]
    1134:	f7ff f9f0 	bl	518 <__aeabi_dmul>
    1138:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    113c:	f108 0801 	add.w	r8, r8, #1
    1140:	1064      	asrs	r4, r4, #1
    1142:	3508      	adds	r5, #8
    1144:	e7e3      	b.n	110e <CONFIG_FPROTECT_BLOCK_SIZE+0x10e>
    1146:	f000 8107 	beq.w	1358 <CONFIG_FPROTECT_BLOCK_SIZE+0x358>
    114a:	427c      	negs	r4, r7
    114c:	4b84      	ldr	r3, [pc, #528]	; (1360 <CONFIG_FPROTECT_BLOCK_SIZE+0x360>)
    114e:	4d85      	ldr	r5, [pc, #532]	; (1364 <CONFIG_FPROTECT_BLOCK_SIZE+0x364>)
    1150:	f004 020f 	and.w	r2, r4, #15
    1154:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    1158:	e9d3 2300 	ldrd	r2, r3, [r3]
    115c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    1160:	f7ff f9da 	bl	518 <__aeabi_dmul>
    1164:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1168:	1124      	asrs	r4, r4, #4
    116a:	2300      	movs	r3, #0
    116c:	f04f 0802 	mov.w	r8, #2
    1170:	2c00      	cmp	r4, #0
    1172:	f040 80e5 	bne.w	1340 <CONFIG_FPROTECT_BLOCK_SIZE+0x340>
    1176:	2b00      	cmp	r3, #0
    1178:	d1d0      	bne.n	111c <CONFIG_FPROTECT_BLOCK_SIZE+0x11c>
    117a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    117c:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    1180:	2b00      	cmp	r3, #0
    1182:	f000 814c 	beq.w	141e <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x96>
    1186:	4b78      	ldr	r3, [pc, #480]	; (1368 <CONFIG_FPROTECT_BLOCK_SIZE+0x368>)
    1188:	2200      	movs	r2, #0
    118a:	4620      	mov	r0, r4
    118c:	4629      	mov	r1, r5
    118e:	f7ff fc4f 	bl	a30 <__aeabi_dcmplt>
    1192:	2800      	cmp	r0, #0
    1194:	f000 8143 	beq.w	141e <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x96>
    1198:	f1b9 0f00 	cmp.w	r9, #0
    119c:	f000 813f 	beq.w	141e <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x96>
    11a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    11a2:	2b00      	cmp	r3, #0
    11a4:	f300 80e4 	bgt.w	1370 <CONFIG_FPROTECT_BLOCK_SIZE+0x370>
    11a8:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    11ac:	e9cd 3404 	strd	r3, r4, [sp, #16]
    11b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
    11b2:	2b00      	cmp	r3, #0
    11b4:	db02      	blt.n	11bc <CONFIG_FPROTECT_BLOCK_SIZE+0x1bc>
    11b6:	2f0e      	cmp	r7, #14
    11b8:	f340 8242 	ble.w	1640 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x2b8>
    11bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    11be:	2a00      	cmp	r2, #0
    11c0:	f040 8267 	bne.w	1692 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x30a>
    11c4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    11c6:	f8dd 8018 	ldr.w	r8, [sp, #24]
    11ca:	2500      	movs	r5, #0
    11cc:	f1b8 0f00 	cmp.w	r8, #0
    11d0:	d00d      	beq.n	11ee <CONFIG_FPROTECT_BLOCK_SIZE+0x1ee>
    11d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    11d4:	2b00      	cmp	r3, #0
    11d6:	dd0a      	ble.n	11ee <CONFIG_FPROTECT_BLOCK_SIZE+0x1ee>
    11d8:	4543      	cmp	r3, r8
    11da:	9a06      	ldr	r2, [sp, #24]
    11dc:	bfa8      	it	ge
    11de:	4643      	movge	r3, r8
    11e0:	1ad2      	subs	r2, r2, r3
    11e2:	9206      	str	r2, [sp, #24]
    11e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    11e6:	eba8 0803 	sub.w	r8, r8, r3
    11ea:	1ad3      	subs	r3, r2, r3
    11ec:	930a      	str	r3, [sp, #40]	; 0x28
    11ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    11f0:	b30b      	cbz	r3, 1236 <CONFIG_FPROTECT_BLOCK_SIZE+0x236>
    11f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    11f4:	2b00      	cmp	r3, #0
    11f6:	f000 82a6 	beq.w	1746 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x3be>
    11fa:	2c00      	cmp	r4, #0
    11fc:	f000 82a1 	beq.w	1742 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x3ba>
    1200:	4629      	mov	r1, r5
    1202:	4622      	mov	r2, r4
    1204:	4658      	mov	r0, fp
    1206:	f011 ff9f 	bl	13148 <__pow5mult>
    120a:	9a03      	ldr	r2, [sp, #12]
    120c:	4601      	mov	r1, r0
    120e:	4605      	mov	r5, r0
    1210:	4658      	mov	r0, fp
    1212:	f011 feef 	bl	12ff4 <__multiply>
    1216:	9903      	ldr	r1, [sp, #12]
    1218:	4606      	mov	r6, r0
    121a:	4658      	mov	r0, fp
    121c:	f011 fe6c 	bl	12ef8 <_Bfree>
    1220:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1222:	1b1b      	subs	r3, r3, r4
    1224:	930b      	str	r3, [sp, #44]	; 0x2c
    1226:	f000 8291 	beq.w	174c <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x3c4>
    122a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    122c:	4631      	mov	r1, r6
    122e:	4658      	mov	r0, fp
    1230:	f011 ff8a 	bl	13148 <__pow5mult>
    1234:	9003      	str	r0, [sp, #12]
    1236:	2101      	movs	r1, #1
    1238:	4658      	mov	r0, fp
    123a:	f011 fec5 	bl	12fc8 <__i2b>
    123e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1240:	4604      	mov	r4, r0
    1242:	2b00      	cmp	r3, #0
    1244:	f000 8284 	beq.w	1750 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x3c8>
    1248:	461a      	mov	r2, r3
    124a:	4601      	mov	r1, r0
    124c:	4658      	mov	r0, fp
    124e:	f011 ff7b 	bl	13148 <__pow5mult>
    1252:	9b20      	ldr	r3, [sp, #128]	; 0x80
    1254:	2b01      	cmp	r3, #1
    1256:	4604      	mov	r4, r0
    1258:	dc03      	bgt.n	1262 <CONFIG_FPROTECT_BLOCK_SIZE+0x262>
    125a:	9b04      	ldr	r3, [sp, #16]
    125c:	2b00      	cmp	r3, #0
    125e:	f000 827c 	beq.w	175a <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x3d2>
    1262:	2600      	movs	r6, #0
    1264:	6923      	ldr	r3, [r4, #16]
    1266:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    126a:	6918      	ldr	r0, [r3, #16]
    126c:	f01f f846 	bl	202fc <__hi0bits>
    1270:	960f      	str	r6, [sp, #60]	; 0x3c
    1272:	f1c0 0020 	rsb	r0, r0, #32
    1276:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1278:	4418      	add	r0, r3
    127a:	f010 001f 	ands.w	r0, r0, #31
    127e:	f000 8291 	beq.w	17a4 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x41c>
    1282:	f1c0 0320 	rsb	r3, r0, #32
    1286:	2b04      	cmp	r3, #4
    1288:	f340 8281 	ble.w	178e <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x406>
    128c:	9b06      	ldr	r3, [sp, #24]
    128e:	f1c0 001c 	rsb	r0, r0, #28
    1292:	4403      	add	r3, r0
    1294:	9306      	str	r3, [sp, #24]
    1296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1298:	4403      	add	r3, r0
    129a:	4480      	add	r8, r0
    129c:	930a      	str	r3, [sp, #40]	; 0x28
    129e:	9b06      	ldr	r3, [sp, #24]
    12a0:	2b00      	cmp	r3, #0
    12a2:	dd05      	ble.n	12b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2b0>
    12a4:	9903      	ldr	r1, [sp, #12]
    12a6:	461a      	mov	r2, r3
    12a8:	4658      	mov	r0, fp
    12aa:	f011 ffa7 	bl	131fc <__lshift>
    12ae:	9003      	str	r0, [sp, #12]
    12b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    12b2:	2b00      	cmp	r3, #0
    12b4:	dd05      	ble.n	12c2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c2>
    12b6:	4621      	mov	r1, r4
    12b8:	461a      	mov	r2, r3
    12ba:	4658      	mov	r0, fp
    12bc:	f011 ff9e 	bl	131fc <__lshift>
    12c0:	4604      	mov	r4, r0
    12c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    12c4:	2b00      	cmp	r3, #0
    12c6:	f000 8276 	beq.w	17b6 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x42e>
    12ca:	9803      	ldr	r0, [sp, #12]
    12cc:	4621      	mov	r1, r4
    12ce:	f01f f864 	bl	2039a <__mcmp>
    12d2:	2800      	cmp	r0, #0
    12d4:	f280 826f 	bge.w	17b6 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x42e>
    12d8:	2300      	movs	r3, #0
    12da:	9903      	ldr	r1, [sp, #12]
    12dc:	220a      	movs	r2, #10
    12de:	4658      	mov	r0, fp
    12e0:	f011 fe2c 	bl	12f3c <__multadd>
    12e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    12e6:	9003      	str	r0, [sp, #12]
    12e8:	1e7e      	subs	r6, r7, #1
    12ea:	2b00      	cmp	r3, #0
    12ec:	f000 825c 	beq.w	17a8 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x420>
    12f0:	2300      	movs	r3, #0
    12f2:	4629      	mov	r1, r5
    12f4:	220a      	movs	r2, #10
    12f6:	4658      	mov	r0, fp
    12f8:	f011 fe20 	bl	12f3c <__multadd>
    12fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    12fe:	2b00      	cmp	r3, #0
    1300:	4605      	mov	r5, r0
    1302:	dc03      	bgt.n	130c <CONFIG_FPROTECT_BLOCK_SIZE+0x30c>
    1304:	9b20      	ldr	r3, [sp, #128]	; 0x80
    1306:	2b02      	cmp	r3, #2
    1308:	f300 825e 	bgt.w	17c8 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x440>
    130c:	f1b8 0f00 	cmp.w	r8, #0
    1310:	dd05      	ble.n	131e <CONFIG_FPROTECT_BLOCK_SIZE+0x31e>
    1312:	4629      	mov	r1, r5
    1314:	4642      	mov	r2, r8
    1316:	4658      	mov	r0, fp
    1318:	f011 ff70 	bl	131fc <__lshift>
    131c:	4605      	mov	r5, r0
    131e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1320:	2b00      	cmp	r3, #0
    1322:	f000 82d0 	beq.w	18c6 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x53e>
    1326:	6869      	ldr	r1, [r5, #4]
    1328:	4658      	mov	r0, fp
    132a:	f011 fda5 	bl	12e78 <_Balloc>
    132e:	4607      	mov	r7, r0
    1330:	2800      	cmp	r0, #0
    1332:	f040 827f 	bne.w	1834 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x4ac>
    1336:	4b0d      	ldr	r3, [pc, #52]	; (136c <CONFIG_FPROTECT_BLOCK_SIZE+0x36c>)
    1338:	4602      	mov	r2, r0
    133a:	f240 21ea 	movw	r1, #746	; 0x2ea
    133e:	e553      	b.n	de8 <_dtoa_r+0x28>
    1340:	07e2      	lsls	r2, r4, #31
    1342:	d506      	bpl.n	1352 <CONFIG_FPROTECT_BLOCK_SIZE+0x352>
    1344:	e9d5 2300 	ldrd	r2, r3, [r5]
    1348:	f7ff f8e6 	bl	518 <__aeabi_dmul>
    134c:	f108 0801 	add.w	r8, r8, #1
    1350:	2301      	movs	r3, #1
    1352:	1064      	asrs	r4, r4, #1
    1354:	3508      	adds	r5, #8
    1356:	e70b      	b.n	1170 <CONFIG_FPROTECT_BLOCK_SIZE+0x170>
    1358:	f04f 0802 	mov.w	r8, #2
    135c:	e70d      	b.n	117a <CONFIG_FPROTECT_BLOCK_SIZE+0x17a>
    135e:	bf00      	nop
    1360:	00020b30 	.word	0x00020b30
    1364:	00020b08 	.word	0x00020b08
    1368:	3ff00000 	.word	0x3ff00000
    136c:	00022925 	.word	0x00022925
    1370:	4620      	mov	r0, r4
    1372:	4bad      	ldr	r3, [pc, #692]	; (1628 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x2a0>)
    1374:	2200      	movs	r2, #0
    1376:	4629      	mov	r1, r5
    1378:	f7ff f8ce 	bl	518 <__aeabi_dmul>
    137c:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1380:	9c09      	ldr	r4, [sp, #36]	; 0x24
    1382:	1e7e      	subs	r6, r7, #1
    1384:	f108 0801 	add.w	r8, r8, #1
    1388:	4640      	mov	r0, r8
    138a:	f7ff f85b 	bl	444 <__aeabi_i2d>
    138e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    1392:	f7ff f8c1 	bl	518 <__aeabi_dmul>
    1396:	4ba5      	ldr	r3, [pc, #660]	; (162c <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x2a4>)
    1398:	2200      	movs	r2, #0
    139a:	f7fe ff07 	bl	1ac <__adddf3>
    139e:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
    13a2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    13a6:	9311      	str	r3, [sp, #68]	; 0x44
    13a8:	2c00      	cmp	r4, #0
    13aa:	d13b      	bne.n	1424 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x9c>
    13ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    13b0:	4b9f      	ldr	r3, [pc, #636]	; (1630 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x2a8>)
    13b2:	2200      	movs	r2, #0
    13b4:	f7fe fef8 	bl	1a8 <__aeabi_dsub>
    13b8:	4602      	mov	r2, r0
    13ba:	460b      	mov	r3, r1
    13bc:	e9cd 2304 	strd	r2, r3, [sp, #16]
    13c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    13c4:	f7ff fb52 	bl	a6c <__aeabi_dcmpgt>
    13c8:	2800      	cmp	r0, #0
    13ca:	f040 8157 	bne.w	167c <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x2f4>
    13ce:	e9dd 2110 	ldrd	r2, r1, [sp, #64]	; 0x40
    13d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    13d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    13da:	f7ff fb29 	bl	a30 <__aeabi_dcmplt>
    13de:	2800      	cmp	r0, #0
    13e0:	f43f aee2 	beq.w	11a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a8>
    13e4:	2400      	movs	r4, #0
    13e6:	4625      	mov	r5, r4
    13e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
    13ea:	f8dd a020 	ldr.w	sl, [sp, #32]
    13ee:	43de      	mvns	r6, r3
    13f0:	f04f 0800 	mov.w	r8, #0
    13f4:	4621      	mov	r1, r4
    13f6:	4658      	mov	r0, fp
    13f8:	f011 fd7e 	bl	12ef8 <_Bfree>
    13fc:	2d00      	cmp	r5, #0
    13fe:	f000 80a9 	beq.w	1554 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x1cc>
    1402:	f1b8 0f00 	cmp.w	r8, #0
    1406:	d005      	beq.n	1414 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x8c>
    1408:	45a8      	cmp	r8, r5
    140a:	d003      	beq.n	1414 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x8c>
    140c:	4641      	mov	r1, r8
    140e:	4658      	mov	r0, fp
    1410:	f011 fd72 	bl	12ef8 <_Bfree>
    1414:	4629      	mov	r1, r5
    1416:	4658      	mov	r0, fp
    1418:	f011 fd6e 	bl	12ef8 <_Bfree>
    141c:	e09a      	b.n	1554 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x1cc>
    141e:	463e      	mov	r6, r7
    1420:	464c      	mov	r4, r9
    1422:	e7b1      	b.n	1388 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS>
    1424:	4b83      	ldr	r3, [pc, #524]	; (1634 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x2ac>)
    1426:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    142a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
    142e:	9b08      	ldr	r3, [sp, #32]
    1430:	441c      	add	r4, r3
    1432:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1434:	2b00      	cmp	r3, #0
    1436:	d04a      	beq.n	14ce <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x146>
    1438:	4602      	mov	r2, r0
    143a:	460b      	mov	r3, r1
    143c:	2000      	movs	r0, #0
    143e:	497e      	ldr	r1, [pc, #504]	; (1638 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x2b0>)
    1440:	f7ff f994 	bl	76c <__aeabi_ddiv>
    1444:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    1448:	f7fe feae 	bl	1a8 <__aeabi_dsub>
    144c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    1450:	f8dd a020 	ldr.w	sl, [sp, #32]
    1454:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1458:	f7ff fb28 	bl	aac <__aeabi_d2iz>
    145c:	4605      	mov	r5, r0
    145e:	f7fe fff1 	bl	444 <__aeabi_i2d>
    1462:	4602      	mov	r2, r0
    1464:	460b      	mov	r3, r1
    1466:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    146a:	f7fe fe9d 	bl	1a8 <__aeabi_dsub>
    146e:	3530      	adds	r5, #48	; 0x30
    1470:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1474:	4602      	mov	r2, r0
    1476:	460b      	mov	r3, r1
    1478:	f80a 5b01 	strb.w	r5, [sl], #1
    147c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    1480:	f7ff faf4 	bl	a6c <__aeabi_dcmpgt>
    1484:	2800      	cmp	r0, #0
    1486:	d165      	bne.n	1554 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x1cc>
    1488:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    148c:	496b      	ldr	r1, [pc, #428]	; (163c <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x2b4>)
    148e:	2000      	movs	r0, #0
    1490:	f7fe fe8a 	bl	1a8 <__aeabi_dsub>
    1494:	4602      	mov	r2, r0
    1496:	460b      	mov	r3, r1
    1498:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    149c:	f7ff fae6 	bl	a6c <__aeabi_dcmpgt>
    14a0:	2800      	cmp	r0, #0
    14a2:	f040 810d 	bne.w	16c0 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x338>
    14a6:	45a2      	cmp	sl, r4
    14a8:	f000 80ea 	beq.w	1680 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x2f8>
    14ac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    14b0:	4b5d      	ldr	r3, [pc, #372]	; (1628 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x2a0>)
    14b2:	2200      	movs	r2, #0
    14b4:	f7ff f830 	bl	518 <__aeabi_dmul>
    14b8:	4b5b      	ldr	r3, [pc, #364]	; (1628 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x2a0>)
    14ba:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    14be:	2200      	movs	r2, #0
    14c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    14c4:	f7ff f828 	bl	518 <__aeabi_dmul>
    14c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
    14cc:	e7c2      	b.n	1454 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0xcc>
    14ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    14d2:	f7ff f821 	bl	518 <__aeabi_dmul>
    14d6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    14da:	f8dd a020 	ldr.w	sl, [sp, #32]
    14de:	46a0      	mov	r8, r4
    14e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    14e4:	f7ff fae2 	bl	aac <__aeabi_d2iz>
    14e8:	4605      	mov	r5, r0
    14ea:	f7fe ffab 	bl	444 <__aeabi_i2d>
    14ee:	4602      	mov	r2, r0
    14f0:	460b      	mov	r3, r1
    14f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    14f6:	f7fe fe57 	bl	1a8 <__aeabi_dsub>
    14fa:	3530      	adds	r5, #48	; 0x30
    14fc:	f80a 5b01 	strb.w	r5, [sl], #1
    1500:	4602      	mov	r2, r0
    1502:	460b      	mov	r3, r1
    1504:	45a2      	cmp	sl, r4
    1506:	e9cd 2304 	strd	r2, r3, [sp, #16]
    150a:	f04f 0200 	mov.w	r2, #0
    150e:	d123      	bne.n	1558 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x1d0>
    1510:	4b49      	ldr	r3, [pc, #292]	; (1638 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x2b0>)
    1512:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    1516:	f7fe fe49 	bl	1ac <__adddf3>
    151a:	4602      	mov	r2, r0
    151c:	460b      	mov	r3, r1
    151e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1522:	f7ff faa3 	bl	a6c <__aeabi_dcmpgt>
    1526:	2800      	cmp	r0, #0
    1528:	f040 80ca 	bne.w	16c0 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x338>
    152c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    1530:	4941      	ldr	r1, [pc, #260]	; (1638 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x2b0>)
    1532:	2000      	movs	r0, #0
    1534:	f7fe fe38 	bl	1a8 <__aeabi_dsub>
    1538:	4602      	mov	r2, r0
    153a:	460b      	mov	r3, r1
    153c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1540:	f7ff fa76 	bl	a30 <__aeabi_dcmplt>
    1544:	b170      	cbz	r0, 1564 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x1dc>
    1546:	46c2      	mov	sl, r8
    1548:	f108 38ff 	add.w	r8, r8, #4294967295
    154c:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
    1550:	2b30      	cmp	r3, #48	; 0x30
    1552:	d0f8      	beq.n	1546 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x1be>
    1554:	4637      	mov	r7, r6
    1556:	e055      	b.n	1604 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x27c>
    1558:	4b33      	ldr	r3, [pc, #204]	; (1628 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x2a0>)
    155a:	f7fe ffdd 	bl	518 <__aeabi_dmul>
    155e:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1562:	e7bd      	b.n	14e0 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x158>
    1564:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    1568:	e9cd 3404 	strd	r3, r4, [sp, #16]
    156c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    156e:	2b00      	cmp	r3, #0
    1570:	f6ff ae28 	blt.w	11c4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c4>
    1574:	2f0e      	cmp	r7, #14
    1576:	f73f ae25 	bgt.w	11c4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c4>
    157a:	4b2e      	ldr	r3, [pc, #184]	; (1634 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x2ac>)
    157c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    1580:	e9d3 3400 	ldrd	r3, r4, [r3]
    1584:	e9cd 3406 	strd	r3, r4, [sp, #24]
    1588:	9b21      	ldr	r3, [sp, #132]	; 0x84
    158a:	2b00      	cmp	r3, #0
    158c:	da02      	bge.n	1594 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x20c>
    158e:	f1b9 0f00 	cmp.w	r9, #0
    1592:	d064      	beq.n	165e <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x2d6>
    1594:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    1598:	f8dd a020 	ldr.w	sl, [sp, #32]
    159c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    15a0:	4620      	mov	r0, r4
    15a2:	4629      	mov	r1, r5
    15a4:	f7ff f8e2 	bl	76c <__aeabi_ddiv>
    15a8:	f7ff fa80 	bl	aac <__aeabi_d2iz>
    15ac:	4606      	mov	r6, r0
    15ae:	f7fe ff49 	bl	444 <__aeabi_i2d>
    15b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    15b6:	f7fe ffaf 	bl	518 <__aeabi_dmul>
    15ba:	4602      	mov	r2, r0
    15bc:	460b      	mov	r3, r1
    15be:	4620      	mov	r0, r4
    15c0:	4629      	mov	r1, r5
    15c2:	f106 0430 	add.w	r4, r6, #48	; 0x30
    15c6:	f7fe fdef 	bl	1a8 <__aeabi_dsub>
    15ca:	f80a 4b01 	strb.w	r4, [sl], #1
    15ce:	9c08      	ldr	r4, [sp, #32]
    15d0:	ebaa 0404 	sub.w	r4, sl, r4
    15d4:	45a1      	cmp	r9, r4
    15d6:	4602      	mov	r2, r0
    15d8:	460b      	mov	r3, r1
    15da:	f040 8082 	bne.w	16e2 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x35a>
    15de:	f7fe fde5 	bl	1ac <__adddf3>
    15e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    15e6:	4604      	mov	r4, r0
    15e8:	460d      	mov	r5, r1
    15ea:	f7ff fa3f 	bl	a6c <__aeabi_dcmpgt>
    15ee:	2800      	cmp	r0, #0
    15f0:	d165      	bne.n	16be <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x336>
    15f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    15f6:	4620      	mov	r0, r4
    15f8:	4629      	mov	r1, r5
    15fa:	f7ff fa0f 	bl	a1c <__aeabi_dcmpeq>
    15fe:	b108      	cbz	r0, 1604 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x27c>
    1600:	07f3      	lsls	r3, r6, #31
    1602:	d45c      	bmi.n	16be <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x336>
    1604:	9903      	ldr	r1, [sp, #12]
    1606:	4658      	mov	r0, fp
    1608:	f011 fc76 	bl	12ef8 <_Bfree>
    160c:	2300      	movs	r3, #0
    160e:	f88a 3000 	strb.w	r3, [sl]
    1612:	9b22      	ldr	r3, [sp, #136]	; 0x88
    1614:	3701      	adds	r7, #1
    1616:	601f      	str	r7, [r3, #0]
    1618:	9b24      	ldr	r3, [sp, #144]	; 0x90
    161a:	2b00      	cmp	r3, #0
    161c:	f43f ac1b 	beq.w	e56 <_dtoa_r+0x96>
    1620:	f8c3 a000 	str.w	sl, [r3]
    1624:	e417      	b.n	e56 <_dtoa_r+0x96>
    1626:	bf00      	nop
    1628:	40240000 	.word	0x40240000
    162c:	401c0000 	.word	0x401c0000
    1630:	40140000 	.word	0x40140000
    1634:	00020b30 	.word	0x00020b30
    1638:	3fe00000 	.word	0x3fe00000
    163c:	3ff00000 	.word	0x3ff00000
    1640:	4ba2      	ldr	r3, [pc, #648]	; (18cc <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x544>)
    1642:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    1646:	e9d3 3400 	ldrd	r3, r4, [r3]
    164a:	e9cd 3406 	strd	r3, r4, [sp, #24]
    164e:	9b21      	ldr	r3, [sp, #132]	; 0x84
    1650:	2b00      	cmp	r3, #0
    1652:	da9f      	bge.n	1594 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x20c>
    1654:	f1b9 0f00 	cmp.w	r9, #0
    1658:	dc9c      	bgt.n	1594 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x20c>
    165a:	f47f aec3 	bne.w	13e4 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x5c>
    165e:	4b9c      	ldr	r3, [pc, #624]	; (18d0 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x548>)
    1660:	2200      	movs	r2, #0
    1662:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    1666:	f7fe ff57 	bl	518 <__aeabi_dmul>
    166a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    166e:	f7ff f9f3 	bl	a58 <__aeabi_dcmpge>
    1672:	4604      	mov	r4, r0
    1674:	2800      	cmp	r0, #0
    1676:	f47f aeb5 	bne.w	13e4 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x5c>
    167a:	463e      	mov	r6, r7
    167c:	4625      	mov	r5, r4
    167e:	e0b4      	b.n	17ea <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x462>
    1680:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    1684:	e9cd 3404 	strd	r3, r4, [sp, #16]
    1688:	9b15      	ldr	r3, [sp, #84]	; 0x54
    168a:	2b00      	cmp	r3, #0
    168c:	db01      	blt.n	1692 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x30a>
    168e:	2f0e      	cmp	r7, #14
    1690:	ddd6      	ble.n	1640 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x2b8>
    1692:	9a20      	ldr	r2, [sp, #128]	; 0x80
    1694:	2a01      	cmp	r2, #1
    1696:	dc36      	bgt.n	1706 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x37e>
    1698:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    169a:	b382      	cbz	r2, 16fe <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x376>
    169c:	f203 4333 	addw	r3, r3, #1075	; 0x433
    16a0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    16a2:	f8dd 8018 	ldr.w	r8, [sp, #24]
    16a6:	9a06      	ldr	r2, [sp, #24]
    16a8:	441a      	add	r2, r3
    16aa:	9206      	str	r2, [sp, #24]
    16ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    16ae:	2101      	movs	r1, #1
    16b0:	441a      	add	r2, r3
    16b2:	4658      	mov	r0, fp
    16b4:	920a      	str	r2, [sp, #40]	; 0x28
    16b6:	f011 fc87 	bl	12fc8 <__i2b>
    16ba:	4605      	mov	r5, r0
    16bc:	e586      	b.n	11cc <CONFIG_FPROTECT_BLOCK_SIZE+0x1cc>
    16be:	463e      	mov	r6, r7
    16c0:	4653      	mov	r3, sl
    16c2:	469a      	mov	sl, r3
    16c4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    16c8:	2a39      	cmp	r2, #57	; 0x39
    16ca:	d106      	bne.n	16da <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x352>
    16cc:	9a08      	ldr	r2, [sp, #32]
    16ce:	429a      	cmp	r2, r3
    16d0:	d1f7      	bne.n	16c2 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x33a>
    16d2:	9908      	ldr	r1, [sp, #32]
    16d4:	2230      	movs	r2, #48	; 0x30
    16d6:	3601      	adds	r6, #1
    16d8:	700a      	strb	r2, [r1, #0]
    16da:	781a      	ldrb	r2, [r3, #0]
    16dc:	3201      	adds	r2, #1
    16de:	701a      	strb	r2, [r3, #0]
    16e0:	e738      	b.n	1554 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x1cc>
    16e2:	4b7c      	ldr	r3, [pc, #496]	; (18d4 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x54c>)
    16e4:	2200      	movs	r2, #0
    16e6:	f7fe ff17 	bl	518 <__aeabi_dmul>
    16ea:	2200      	movs	r2, #0
    16ec:	2300      	movs	r3, #0
    16ee:	4604      	mov	r4, r0
    16f0:	460d      	mov	r5, r1
    16f2:	f7ff f993 	bl	a1c <__aeabi_dcmpeq>
    16f6:	2800      	cmp	r0, #0
    16f8:	f43f af50 	beq.w	159c <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x214>
    16fc:	e782      	b.n	1604 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x27c>
    16fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
    1700:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    1704:	e7cc      	b.n	16a0 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x318>
    1706:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1708:	f109 34ff 	add.w	r4, r9, #4294967295
    170c:	42a3      	cmp	r3, r4
    170e:	db08      	blt.n	1722 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x39a>
    1710:	f1b9 0f00 	cmp.w	r9, #0
    1714:	eba3 0404 	sub.w	r4, r3, r4
    1718:	db0e      	blt.n	1738 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x3b0>
    171a:	f8dd 8018 	ldr.w	r8, [sp, #24]
    171e:	464b      	mov	r3, r9
    1720:	e7c1      	b.n	16a6 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x31e>
    1722:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1724:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    1726:	940b      	str	r4, [sp, #44]	; 0x2c
    1728:	1ae3      	subs	r3, r4, r3
    172a:	441a      	add	r2, r3
    172c:	f8dd 8018 	ldr.w	r8, [sp, #24]
    1730:	920f      	str	r2, [sp, #60]	; 0x3c
    1732:	464b      	mov	r3, r9
    1734:	2400      	movs	r4, #0
    1736:	e7b6      	b.n	16a6 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x31e>
    1738:	9b06      	ldr	r3, [sp, #24]
    173a:	eba3 0809 	sub.w	r8, r3, r9
    173e:	2300      	movs	r3, #0
    1740:	e7b1      	b.n	16a6 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x31e>
    1742:	9e03      	ldr	r6, [sp, #12]
    1744:	e571      	b.n	122a <CONFIG_FPROTECT_BLOCK_SIZE+0x22a>
    1746:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    1748:	9903      	ldr	r1, [sp, #12]
    174a:	e570      	b.n	122e <CONFIG_FPROTECT_BLOCK_SIZE+0x22e>
    174c:	9603      	str	r6, [sp, #12]
    174e:	e572      	b.n	1236 <CONFIG_FPROTECT_BLOCK_SIZE+0x236>
    1750:	9b20      	ldr	r3, [sp, #128]	; 0x80
    1752:	2b01      	cmp	r3, #1
    1754:	dc17      	bgt.n	1786 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x3fe>
    1756:	9b04      	ldr	r3, [sp, #16]
    1758:	b9ab      	cbnz	r3, 1786 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x3fe>
    175a:	9b05      	ldr	r3, [sp, #20]
    175c:	f3c3 0313 	ubfx	r3, r3, #0, #20
    1760:	b99b      	cbnz	r3, 178a <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x402>
    1762:	9b05      	ldr	r3, [sp, #20]
    1764:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
    1768:	0d36      	lsrs	r6, r6, #20
    176a:	0536      	lsls	r6, r6, #20
    176c:	b136      	cbz	r6, 177c <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x3f4>
    176e:	9b06      	ldr	r3, [sp, #24]
    1770:	3301      	adds	r3, #1
    1772:	9306      	str	r3, [sp, #24]
    1774:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1776:	3301      	adds	r3, #1
    1778:	930a      	str	r3, [sp, #40]	; 0x28
    177a:	2601      	movs	r6, #1
    177c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    177e:	2b00      	cmp	r3, #0
    1780:	f47f ad70 	bne.w	1264 <CONFIG_FPROTECT_BLOCK_SIZE+0x264>
    1784:	960f      	str	r6, [sp, #60]	; 0x3c
    1786:	2001      	movs	r0, #1
    1788:	e575      	b.n	1276 <CONFIG_FPROTECT_BLOCK_SIZE+0x276>
    178a:	2600      	movs	r6, #0
    178c:	e7f6      	b.n	177c <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x3f4>
    178e:	f43f ad86 	beq.w	129e <CONFIG_FPROTECT_BLOCK_SIZE+0x29e>
    1792:	9a06      	ldr	r2, [sp, #24]
    1794:	331c      	adds	r3, #28
    1796:	441a      	add	r2, r3
    1798:	9206      	str	r2, [sp, #24]
    179a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    179c:	441a      	add	r2, r3
    179e:	4498      	add	r8, r3
    17a0:	920a      	str	r2, [sp, #40]	; 0x28
    17a2:	e57c      	b.n	129e <CONFIG_FPROTECT_BLOCK_SIZE+0x29e>
    17a4:	4603      	mov	r3, r0
    17a6:	e7f4      	b.n	1792 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x40a>
    17a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    17aa:	2b00      	cmp	r3, #0
    17ac:	dc2b      	bgt.n	1806 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x47e>
    17ae:	9b20      	ldr	r3, [sp, #128]	; 0x80
    17b0:	2b02      	cmp	r3, #2
    17b2:	dc09      	bgt.n	17c8 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x440>
    17b4:	e027      	b.n	1806 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x47e>
    17b6:	f1b9 0f00 	cmp.w	r9, #0
    17ba:	dc1d      	bgt.n	17f8 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x470>
    17bc:	9b20      	ldr	r3, [sp, #128]	; 0x80
    17be:	2b02      	cmp	r3, #2
    17c0:	dd1a      	ble.n	17f8 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x470>
    17c2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    17c6:	463e      	mov	r6, r7
    17c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    17ca:	2b00      	cmp	r3, #0
    17cc:	f47f ae0c 	bne.w	13e8 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x60>
    17d0:	4621      	mov	r1, r4
    17d2:	2205      	movs	r2, #5
    17d4:	4658      	mov	r0, fp
    17d6:	f011 fbb1 	bl	12f3c <__multadd>
    17da:	4601      	mov	r1, r0
    17dc:	4604      	mov	r4, r0
    17de:	9803      	ldr	r0, [sp, #12]
    17e0:	f01e fddb 	bl	2039a <__mcmp>
    17e4:	2800      	cmp	r0, #0
    17e6:	f77f adff 	ble.w	13e8 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x60>
    17ea:	f8dd a020 	ldr.w	sl, [sp, #32]
    17ee:	2331      	movs	r3, #49	; 0x31
    17f0:	f80a 3b01 	strb.w	r3, [sl], #1
    17f4:	3601      	adds	r6, #1
    17f6:	e5fb      	b.n	13f0 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x68>
    17f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    17fa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    17fe:	463e      	mov	r6, r7
    1800:	2b00      	cmp	r3, #0
    1802:	f47f ad83 	bne.w	130c <CONFIG_FPROTECT_BLOCK_SIZE+0x30c>
    1806:	9f08      	ldr	r7, [sp, #32]
    1808:	9803      	ldr	r0, [sp, #12]
    180a:	4621      	mov	r1, r4
    180c:	f01e fcee 	bl	201ec <quorem>
    1810:	f100 0930 	add.w	r9, r0, #48	; 0x30
    1814:	f807 9b01 	strb.w	r9, [r7], #1
    1818:	9b08      	ldr	r3, [sp, #32]
    181a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    181c:	1afb      	subs	r3, r7, r3
    181e:	429a      	cmp	r2, r3
    1820:	f340 80cb 	ble.w	19ba <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x632>
    1824:	9903      	ldr	r1, [sp, #12]
    1826:	2300      	movs	r3, #0
    1828:	220a      	movs	r2, #10
    182a:	4658      	mov	r0, fp
    182c:	f011 fb86 	bl	12f3c <__multadd>
    1830:	9003      	str	r0, [sp, #12]
    1832:	e7e9      	b.n	1808 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x480>
    1834:	692a      	ldr	r2, [r5, #16]
    1836:	3202      	adds	r2, #2
    1838:	0092      	lsls	r2, r2, #2
    183a:	f105 010c 	add.w	r1, r5, #12
    183e:	300c      	adds	r0, #12
    1840:	f01e fabf 	bl	1fdc2 <memcpy>
    1844:	2201      	movs	r2, #1
    1846:	4639      	mov	r1, r7
    1848:	4658      	mov	r0, fp
    184a:	f011 fcd7 	bl	131fc <__lshift>
    184e:	9b08      	ldr	r3, [sp, #32]
    1850:	f103 0a01 	add.w	sl, r3, #1
    1854:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    1858:	4413      	add	r3, r2
    185a:	930a      	str	r3, [sp, #40]	; 0x28
    185c:	9b04      	ldr	r3, [sp, #16]
    185e:	f003 0301 	and.w	r3, r3, #1
    1862:	46a8      	mov	r8, r5
    1864:	930b      	str	r3, [sp, #44]	; 0x2c
    1866:	4605      	mov	r5, r0
    1868:	f10a 33ff 	add.w	r3, sl, #4294967295
    186c:	4621      	mov	r1, r4
    186e:	9803      	ldr	r0, [sp, #12]
    1870:	9306      	str	r3, [sp, #24]
    1872:	f01e fcbb 	bl	201ec <quorem>
    1876:	4641      	mov	r1, r8
    1878:	9009      	str	r0, [sp, #36]	; 0x24
    187a:	f100 0930 	add.w	r9, r0, #48	; 0x30
    187e:	9803      	ldr	r0, [sp, #12]
    1880:	f01e fd8b 	bl	2039a <__mcmp>
    1884:	462a      	mov	r2, r5
    1886:	4621      	mov	r1, r4
    1888:	4607      	mov	r7, r0
    188a:	4658      	mov	r0, fp
    188c:	f011 fd22 	bl	132d4 <__mdiff>
    1890:	68c2      	ldr	r2, [r0, #12]
    1892:	4601      	mov	r1, r0
    1894:	b302      	cbz	r2, 18d8 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x550>
    1896:	4658      	mov	r0, fp
    1898:	f011 fb2e 	bl	12ef8 <_Bfree>
    189c:	2f00      	cmp	r7, #0
    189e:	da3a      	bge.n	1916 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x58e>
    18a0:	9903      	ldr	r1, [sp, #12]
    18a2:	2201      	movs	r2, #1
    18a4:	4658      	mov	r0, fp
    18a6:	f011 fca9 	bl	131fc <__lshift>
    18aa:	4621      	mov	r1, r4
    18ac:	9003      	str	r0, [sp, #12]
    18ae:	f01e fd74 	bl	2039a <__mcmp>
    18b2:	2800      	cmp	r0, #0
    18b4:	dc03      	bgt.n	18be <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x536>
    18b6:	d129      	bne.n	190c <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x584>
    18b8:	f019 0f01 	tst.w	r9, #1
    18bc:	d026      	beq.n	190c <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x584>
    18be:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    18c2:	d11d      	bne.n	1900 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x578>
    18c4:	e032      	b.n	192c <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x5a4>
    18c6:	4628      	mov	r0, r5
    18c8:	e7c1      	b.n	184e <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x4c6>
    18ca:	bf00      	nop
    18cc:	00020b30 	.word	0x00020b30
    18d0:	40140000 	.word	0x40140000
    18d4:	40240000 	.word	0x40240000
    18d8:	900e      	str	r0, [sp, #56]	; 0x38
    18da:	9803      	ldr	r0, [sp, #12]
    18dc:	f01e fd5d 	bl	2039a <__mcmp>
    18e0:	990e      	ldr	r1, [sp, #56]	; 0x38
    18e2:	900c      	str	r0, [sp, #48]	; 0x30
    18e4:	4658      	mov	r0, fp
    18e6:	f011 fb07 	bl	12ef8 <_Bfree>
    18ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    18ec:	bb5a      	cbnz	r2, 1946 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x5be>
    18ee:	9b20      	ldr	r3, [sp, #128]	; 0x80
    18f0:	b953      	cbnz	r3, 1908 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x580>
    18f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    18f4:	b943      	cbnz	r3, 1908 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x580>
    18f6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    18fa:	d017      	beq.n	192c <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x5a4>
    18fc:	2f00      	cmp	r7, #0
    18fe:	dd05      	ble.n	190c <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x584>
    1900:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1902:	f103 0931 	add.w	r9, r3, #49	; 0x31
    1906:	e001      	b.n	190c <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x584>
    1908:	2f00      	cmp	r7, #0
    190a:	da2a      	bge.n	1962 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x5da>
    190c:	f8dd a018 	ldr.w	sl, [sp, #24]
    1910:	f80a 9b01 	strb.w	r9, [sl], #1
    1914:	e56e      	b.n	13f4 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x6c>
    1916:	9b20      	ldr	r3, [sp, #128]	; 0x80
    1918:	433b      	orrs	r3, r7
    191a:	d104      	bne.n	1926 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x59e>
    191c:	9b04      	ldr	r3, [sp, #16]
    191e:	f003 0301 	and.w	r3, r3, #1
    1922:	2b00      	cmp	r3, #0
    1924:	d0bc      	beq.n	18a0 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x518>
    1926:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    192a:	d136      	bne.n	199a <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x612>
    192c:	9f06      	ldr	r7, [sp, #24]
    192e:	2339      	movs	r3, #57	; 0x39
    1930:	f807 3b01 	strb.w	r3, [r7], #1
    1934:	46ba      	mov	sl, r7
    1936:	3f01      	subs	r7, #1
    1938:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
    193c:	2b39      	cmp	r3, #57	; 0x39
    193e:	d05b      	beq.n	19f8 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x670>
    1940:	3301      	adds	r3, #1
    1942:	703b      	strb	r3, [r7, #0]
    1944:	e556      	b.n	13f4 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x6c>
    1946:	2f00      	cmp	r7, #0
    1948:	db06      	blt.n	1958 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x5d0>
    194a:	9b20      	ldr	r3, [sp, #128]	; 0x80
    194c:	433b      	orrs	r3, r7
    194e:	d106      	bne.n	195e <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x5d6>
    1950:	9b04      	ldr	r3, [sp, #16]
    1952:	f003 0301 	and.w	r3, r3, #1
    1956:	b913      	cbnz	r3, 195e <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x5d6>
    1958:	2a00      	cmp	r2, #0
    195a:	dca1      	bgt.n	18a0 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x518>
    195c:	e7d6      	b.n	190c <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x584>
    195e:	2a00      	cmp	r2, #0
    1960:	dce1      	bgt.n	1926 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x59e>
    1962:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1964:	f80a 9c01 	strb.w	r9, [sl, #-1]
    1968:	4553      	cmp	r3, sl
    196a:	4657      	mov	r7, sl
    196c:	d02f      	beq.n	19ce <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x646>
    196e:	9903      	ldr	r1, [sp, #12]
    1970:	2300      	movs	r3, #0
    1972:	220a      	movs	r2, #10
    1974:	4658      	mov	r0, fp
    1976:	f011 fae1 	bl	12f3c <__multadd>
    197a:	45a8      	cmp	r8, r5
    197c:	9003      	str	r0, [sp, #12]
    197e:	f04f 0300 	mov.w	r3, #0
    1982:	f04f 020a 	mov.w	r2, #10
    1986:	4641      	mov	r1, r8
    1988:	4658      	mov	r0, fp
    198a:	d10b      	bne.n	19a4 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x61c>
    198c:	f011 fad6 	bl	12f3c <__multadd>
    1990:	4680      	mov	r8, r0
    1992:	4605      	mov	r5, r0
    1994:	f10a 0a01 	add.w	sl, sl, #1
    1998:	e766      	b.n	1868 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x4e0>
    199a:	f8dd a018 	ldr.w	sl, [sp, #24]
    199e:	f109 0901 	add.w	r9, r9, #1
    19a2:	e7b5      	b.n	1910 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x588>
    19a4:	f011 faca 	bl	12f3c <__multadd>
    19a8:	4629      	mov	r1, r5
    19aa:	4680      	mov	r8, r0
    19ac:	2300      	movs	r3, #0
    19ae:	220a      	movs	r2, #10
    19b0:	4658      	mov	r0, fp
    19b2:	f011 fac3 	bl	12f3c <__multadd>
    19b6:	4605      	mov	r5, r0
    19b8:	e7ec      	b.n	1994 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x60c>
    19ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
    19bc:	2b00      	cmp	r3, #0
    19be:	bfc8      	it	gt
    19c0:	461f      	movgt	r7, r3
    19c2:	9b08      	ldr	r3, [sp, #32]
    19c4:	bfd8      	it	le
    19c6:	2701      	movle	r7, #1
    19c8:	441f      	add	r7, r3
    19ca:	f04f 0800 	mov.w	r8, #0
    19ce:	9903      	ldr	r1, [sp, #12]
    19d0:	2201      	movs	r2, #1
    19d2:	4658      	mov	r0, fp
    19d4:	f011 fc12 	bl	131fc <__lshift>
    19d8:	4621      	mov	r1, r4
    19da:	9003      	str	r0, [sp, #12]
    19dc:	f01e fcdd 	bl	2039a <__mcmp>
    19e0:	2800      	cmp	r0, #0
    19e2:	dca7      	bgt.n	1934 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x5ac>
    19e4:	d102      	bne.n	19ec <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x664>
    19e6:	f019 0f01 	tst.w	r9, #1
    19ea:	d1a3      	bne.n	1934 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x5ac>
    19ec:	46ba      	mov	sl, r7
    19ee:	f817 3d01 	ldrb.w	r3, [r7, #-1]!
    19f2:	2b30      	cmp	r3, #48	; 0x30
    19f4:	d0fa      	beq.n	19ec <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x664>
    19f6:	e4fd      	b.n	13f4 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x6c>
    19f8:	9b08      	ldr	r3, [sp, #32]
    19fa:	42bb      	cmp	r3, r7
    19fc:	d19a      	bne.n	1934 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x5ac>
    19fe:	9a08      	ldr	r2, [sp, #32]
    1a00:	2331      	movs	r3, #49	; 0x31
    1a02:	3601      	adds	r6, #1
    1a04:	7013      	strb	r3, [r2, #0]
    1a06:	e4f5      	b.n	13f4 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x6c>
    1a08:	9b24      	ldr	r3, [sp, #144]	; 0x90
    1a0a:	2b00      	cmp	r3, #0
    1a0c:	f47f aa1e 	bne.w	e4c <_dtoa_r+0x8c>
    1a10:	4b01      	ldr	r3, [pc, #4]	; (1a18 <CONFIG_MODEM_HL7800_ALLOW_SLEEP_DELAY_MS+0x690>)
    1a12:	f7ff ba3d 	b.w	e90 <_dtoa_r+0xd0>
    1a16:	bf00      	nop
    1a18:	0002288d 	.word	0x0002288d

00001a1c <modem_configure>:
		break;
	}
}

static void modem_configure(void)
{
    1a1c:	b508      	push	{r3, lr}
	hl7800_evt_agent.event_callback = modem_event_callback;
    1a1e:	4803      	ldr	r0, [pc, #12]	; (1a2c <modem_configure+0x10>)
    1a20:	4b03      	ldr	r3, [pc, #12]	; (1a30 <modem_configure+0x14>)
    1a22:	6043      	str	r3, [r0, #4]
	mdm_hl7800_register_event_callback(&hl7800_evt_agent);
    1a24:	f00b fe88 	bl	d738 <mdm_hl7800_register_event_callback>
}
    1a28:	bd08      	pop	{r3, pc}
    1a2a:	bf00      	nop
    1a2c:	20001e38 	.word	0x20001e38
    1a30:	00001a35 	.word	0x00001a35

00001a34 <modem_event_callback>:
	uint8_t code = ((struct mdm_hl7800_compound_event *)event_data)->code;
    1a34:	780b      	ldrb	r3, [r1, #0]
	switch (event)
    1a36:	2802      	cmp	r0, #2
    1a38:	d02e      	beq.n	1a98 <modem_event_callback+0x64>
{
    1a3a:	b500      	push	{lr}
    1a3c:	b089      	sub	sp, #36	; 0x24
	switch (event)
    1a3e:	d80a      	bhi.n	1a56 <modem_event_callback+0x22>
    1a40:	2801      	cmp	r0, #1
    1a42:	d12c      	bne.n	1a9e <modem_event_callback+0x6a>
		switch (code)
    1a44:	2b05      	cmp	r3, #5
    1a46:	d80d      	bhi.n	1a64 <modem_event_callback+0x30>
    1a48:	2b05      	cmp	r3, #5
    1a4a:	d808      	bhi.n	1a5e <modem_event_callback+0x2a>
    1a4c:	e8df f003 	tbb	[pc, r3]
    1a50:	0c20100c 	.word	0x0c20100c
    1a54:	100c      	.short	0x100c
	switch (event)
    1a56:	3803      	subs	r0, #3
    1a58:	b2c0      	uxtb	r0, r0
    1a5a:	2806      	cmp	r0, #6
    1a5c:	d81f      	bhi.n	1a9e <modem_event_callback+0x6a>
}
    1a5e:	b009      	add	sp, #36	; 0x24
    1a60:	f85d fb04 	ldr.w	pc, [sp], #4
    1a64:	2bf0      	cmp	r3, #240	; 0xf0
    1a66:	d1fa      	bne.n	1a5e <modem_event_callback+0x2a>
			dk_set_led_on(DK_LED3);
    1a68:	2002      	movs	r0, #2
    1a6a:	f01c fee1 	bl	1e830 <dk_set_led_on>
			break;
    1a6e:	e7f6      	b.n	1a5e <modem_event_callback+0x2a>
			dk_set_led_on(DK_LED4);
    1a70:	2003      	movs	r0, #3
    1a72:	f01c fedd 	bl	1e830 <dk_set_led_on>
			dk_set_led_off(DK_LED1);
    1a76:	2000      	movs	r0, #0
    1a78:	f01c fedf 	bl	1e83a <dk_set_led_off>
			dk_set_led_off(DK_LED2);
    1a7c:	2001      	movs	r0, #1
    1a7e:	f01c fedc 	bl	1e83a <dk_set_led_off>
			dk_set_led_off(DK_LED3);
    1a82:	2002      	movs	r0, #2
    1a84:	f01c fed9 	bl	1e83a <dk_set_led_off>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    1a88:	4818      	ldr	r0, [pc, #96]	; (1aec <modem_event_callback+0xb8>)
    1a8a:	f00f fbc1 	bl	11210 <z_impl_k_sem_give>
}
    1a8e:	e7e6      	b.n	1a5e <modem_event_callback+0x2a>
			dk_set_led_on(DK_LED1);
    1a90:	2000      	movs	r0, #0
    1a92:	f01c fecd 	bl	1e830 <dk_set_led_on>
			break;
    1a96:	e7e2      	b.n	1a5e <modem_event_callback+0x2a>
		lte_apn_config = (struct mdm_hl7800_apn *)event_data;
    1a98:	4b15      	ldr	r3, [pc, #84]	; (1af0 <modem_event_callback+0xbc>)
    1a9a:	6019      	str	r1, [r3, #0]
		break;
    1a9c:	4770      	bx	lr
		LOG_ERR("Unknown modem event");
    1a9e:	4b15      	ldr	r3, [pc, #84]	; (1af4 <modem_event_callback+0xc0>)
    1aa0:	9307      	str	r3, [sp, #28]
    1aa2:	2302      	movs	r3, #2
    1aa4:	f88d 3004 	strb.w	r3, [sp, #4]
    1aa8:	2300      	movs	r3, #0
    1aaa:	f88d 3005 	strb.w	r3, [sp, #5]
    1aae:	f88d 3006 	strb.w	r3, [sp, #6]
    1ab2:	f88d 3007 	strb.w	r3, [sp, #7]
    1ab6:	9a01      	ldr	r2, [sp, #4]
    1ab8:	9206      	str	r2, [sp, #24]
    1aba:	4619      	mov	r1, r3
    1abc:	f363 0100 	bfi	r1, r3, #0, #1
    1ac0:	f363 0141 	bfi	r1, r3, #1, #1
    1ac4:	f363 0182 	bfi	r1, r3, #2, #1
    1ac8:	f363 01c5 	bfi	r1, r3, #3, #3
    1acc:	2201      	movs	r2, #1
    1ace:	f362 1188 	bfi	r1, r2, #6, #3
    1ad2:	2208      	movs	r2, #8
    1ad4:	f362 2152 	bfi	r1, r2, #9, #10
    1ad8:	f363 41de 	bfi	r1, r3, #19, #12
    1adc:	f363 71df 	bfi	r1, r3, #31, #1
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
    1ae0:	aa06      	add	r2, sp, #24
    1ae2:	4805      	ldr	r0, [pc, #20]	; (1af8 <modem_event_callback+0xc4>)
    1ae4:	f015 ffa2 	bl	17a2c <z_impl_z_log_msg_static_create>
}
    1ae8:	e7b9      	b.n	1a5e <modem_event_callback+0x2a>
    1aea:	bf00      	nop
    1aec:	20000584 	.word	0x20000584
    1af0:	20001e40 	.word	0x20001e40
    1af4:	00020bf8 	.word	0x00020bf8
    1af8:	00020a50 	.word	0x00020a50

00001afc <main>:

void main(void)
{
    1afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1b00:	b094      	sub	sp, #80	; 0x50
	int ret = 0;

	if (dk_leds_init() != 0)
    1b02:	f00d f981 	bl	ee08 <dk_leds_init>
    1b06:	2800      	cmp	r0, #0
    1b08:	d15a      	bne.n	1bc0 <main+0xc4>
	{
		LOG_ERR("Failed to initialize the LEDs Library");
	}

	dk_set_led_on(DK_LED1);
    1b0a:	2000      	movs	r0, #0
    1b0c:	f01c fe90 	bl	1e830 <dk_set_led_on>
	modem_configure();
    1b10:	f7ff ff84 	bl	1a1c <modem_configure>

	LOG_INF("Connecting to LTE network");
    1b14:	4b3d      	ldr	r3, [pc, #244]	; (1c0c <main+0x110>)
    1b16:	930d      	str	r3, [sp, #52]	; 0x34
    1b18:	f04f 0802 	mov.w	r8, #2
    1b1c:	f88d 8004 	strb.w	r8, [sp, #4]
    1b20:	2400      	movs	r4, #0
    1b22:	f88d 4005 	strb.w	r4, [sp, #5]
    1b26:	f88d 4006 	strb.w	r4, [sp, #6]
    1b2a:	f88d 4007 	strb.w	r4, [sp, #7]
    1b2e:	9b01      	ldr	r3, [sp, #4]
    1b30:	930c      	str	r3, [sp, #48]	; 0x30
    1b32:	4621      	mov	r1, r4
    1b34:	f364 0100 	bfi	r1, r4, #0, #1
    1b38:	f364 0141 	bfi	r1, r4, #1, #1
    1b3c:	f364 0182 	bfi	r1, r4, #2, #1
    1b40:	f364 01c5 	bfi	r1, r4, #3, #3
    1b44:	2703      	movs	r7, #3
    1b46:	f367 1188 	bfi	r1, r7, #6, #3
    1b4a:	2608      	movs	r6, #8
    1b4c:	f366 2152 	bfi	r1, r6, #9, #10
    1b50:	f364 41de 	bfi	r1, r4, #19, #12
    1b54:	f364 71df 	bfi	r1, r4, #31, #1
    1b58:	4d2d      	ldr	r5, [pc, #180]	; (1c10 <main+0x114>)
    1b5a:	4623      	mov	r3, r4
    1b5c:	aa0c      	add	r2, sp, #48	; 0x30
    1b5e:	4628      	mov	r0, r5
    1b60:	f015 ff64 	bl	17a2c <z_impl_z_log_msg_static_create>
	return z_impl_k_sem_take(sem, timeout);
    1b64:	f04f 32ff 	mov.w	r2, #4294967295
    1b68:	f04f 33ff 	mov.w	r3, #4294967295
    1b6c:	4829      	ldr	r0, [pc, #164]	; (1c14 <main+0x118>)
    1b6e:	f00f fb77 	bl	11260 <z_impl_k_sem_take>

	k_sem_take(&lte_connected, K_FOREVER);

	LOG_INF("Connected to LTE network");
    1b72:	4b29      	ldr	r3, [pc, #164]	; (1c18 <main+0x11c>)
    1b74:	9313      	str	r3, [sp, #76]	; 0x4c
    1b76:	f88d 8004 	strb.w	r8, [sp, #4]
    1b7a:	f88d 4005 	strb.w	r4, [sp, #5]
    1b7e:	f88d 4006 	strb.w	r4, [sp, #6]
    1b82:	f88d 4007 	strb.w	r4, [sp, #7]
    1b86:	9b01      	ldr	r3, [sp, #4]
    1b88:	9312      	str	r3, [sp, #72]	; 0x48
    1b8a:	4621      	mov	r1, r4
    1b8c:	f364 0100 	bfi	r1, r4, #0, #1
    1b90:	f364 0141 	bfi	r1, r4, #1, #1
    1b94:	f364 0182 	bfi	r1, r4, #2, #1
    1b98:	f364 01c5 	bfi	r1, r4, #3, #3
    1b9c:	f367 1188 	bfi	r1, r7, #6, #3
    1ba0:	f366 2152 	bfi	r1, r6, #9, #10
    1ba4:	f364 41de 	bfi	r1, r4, #19, #12
    1ba8:	f364 71df 	bfi	r1, r4, #31, #1
    1bac:	4623      	mov	r3, r4
    1bae:	aa12      	add	r2, sp, #72	; 0x48
    1bb0:	4628      	mov	r0, r5
    1bb2:	f015 ff3b 	bl	17a2c <z_impl_z_log_msg_static_create>
	p100_socket_init();
    1bb6:	f000 fa37 	bl	2028 <p100_socket_init>
}
    1bba:	b014      	add	sp, #80	; 0x50
    1bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("Failed to initialize the LEDs Library");
    1bc0:	4b16      	ldr	r3, [pc, #88]	; (1c1c <main+0x120>)
    1bc2:	9307      	str	r3, [sp, #28]
    1bc4:	2302      	movs	r3, #2
    1bc6:	f88d 3004 	strb.w	r3, [sp, #4]
    1bca:	2300      	movs	r3, #0
    1bcc:	f88d 3005 	strb.w	r3, [sp, #5]
    1bd0:	f88d 3006 	strb.w	r3, [sp, #6]
    1bd4:	f88d 3007 	strb.w	r3, [sp, #7]
    1bd8:	9a01      	ldr	r2, [sp, #4]
    1bda:	9206      	str	r2, [sp, #24]
    1bdc:	4619      	mov	r1, r3
    1bde:	f363 0100 	bfi	r1, r3, #0, #1
    1be2:	f363 0141 	bfi	r1, r3, #1, #1
    1be6:	f363 0182 	bfi	r1, r3, #2, #1
    1bea:	f363 01c5 	bfi	r1, r3, #3, #3
    1bee:	2201      	movs	r2, #1
    1bf0:	f362 1188 	bfi	r1, r2, #6, #3
    1bf4:	2208      	movs	r2, #8
    1bf6:	f362 2152 	bfi	r1, r2, #9, #10
    1bfa:	f363 41de 	bfi	r1, r3, #19, #12
    1bfe:	f363 71df 	bfi	r1, r3, #31, #1
    1c02:	aa06      	add	r2, sp, #24
    1c04:	4802      	ldr	r0, [pc, #8]	; (1c10 <main+0x114>)
    1c06:	f015 ff11 	bl	17a2c <z_impl_z_log_msg_static_create>
    1c0a:	e77e      	b.n	1b0a <main+0xe>
    1c0c:	00020c34 	.word	0x00020c34
    1c10:	00020a50 	.word	0x00020a50
    1c14:	20000584 	.word	0x20000584
    1c18:	00020c50 	.word	0x00020c50
    1c1c:	00020c0c 	.word	0x00020c0c

00001c20 <button_handler>:
    return 0;
}

static void button_handler(uint32_t button_state, uint32_t has_changed)
{
    switch (has_changed)
    1c20:	2901      	cmp	r1, #1
    1c22:	d000      	beq.n	1c26 <button_handler+0x6>
    1c24:	4770      	bx	lr
    {
    case DK_BTN1_MSK:
        // Call send() when button 1 is pressed
        if (button_state & DK_BTN1_MSK)
    1c26:	f010 0f01 	tst.w	r0, #1
    1c2a:	d0fb      	beq.n	1c24 <button_handler+0x4>
{
    1c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c2e:	b085      	sub	sp, #20
    1c30:	af02      	add	r7, sp, #8
        {
            int err = send(sock, MESSAGE_TO_SEND, SSTRLEN(MESSAGE_TO_SEND), 0);
    1c32:	4b53      	ldr	r3, [pc, #332]	; (1d80 <button_handler+0x160>)
    1c34:	6818      	ldr	r0, [r3, #0]
		union { uintptr_t x; socklen_t val; } parm5 = { .val = addrlen };
		return (ssize_t) arch_syscall_invoke6(parm0.x, parm1.x, parm2.x, parm3.x, parm4.x, parm5.x, K_SYSCALL_ZSOCK_SENDTO);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
    1c36:	2300      	movs	r3, #0
    1c38:	9301      	str	r3, [sp, #4]
    1c3a:	9300      	str	r3, [sp, #0]
    1c3c:	2217      	movs	r2, #23
    1c3e:	4951      	ldr	r1, [pc, #324]	; (1d84 <button_handler+0x164>)
    1c40:	f016 fb9c 	bl	1837c <z_impl_zsock_sendto>
            if (err < 0)
    1c44:	2800      	cmp	r0, #0
    1c46:	db20      	blt.n	1c8a <button_handler+0x6a>
            {
                LOG_INF("Failed to send message, %d", errno);
                return;
            }
            LOG_INF("Successfully sent message: %s", MESSAGE_TO_SEND);
    1c48:	466c      	mov	r4, sp
    1c4a:	2300      	movs	r3, #0
    1c4c:	713b      	strb	r3, [r7, #4]
    1c4e:	2302      	movs	r3, #2
    1c50:	717b      	strb	r3, [r7, #5]
    1c52:	b088      	sub	sp, #32
    1c54:	f10d 0c08 	add.w	ip, sp, #8
    1c58:	f11c 0210 	adds.w	r2, ip, #16
    1c5c:	d054      	beq.n	1d08 <button_handler+0xe8>
    1c5e:	200e      	movs	r0, #14
    1c60:	b122      	cbz	r2, 1c6c <button_handler+0x4c>
    1c62:	2804      	cmp	r0, #4
    1c64:	dd02      	ble.n	1c6c <button_handler+0x4c>
    1c66:	4b48      	ldr	r3, [pc, #288]	; (1d88 <button_handler+0x168>)
    1c68:	f8cc 3014 	str.w	r3, [ip, #20]
    1c6c:	2300      	movs	r3, #0
    1c6e:	703b      	strb	r3, [r7, #0]
    1c70:	2302      	movs	r3, #2
    1c72:	707b      	strb	r3, [r7, #1]
    1c74:	2a00      	cmp	r2, #0
    1c76:	d055      	beq.n	1d24 <button_handler+0x104>
    1c78:	2808      	cmp	r0, #8
    1c7a:	dd02      	ble.n	1c82 <button_handler+0x62>
    1c7c:	4b41      	ldr	r3, [pc, #260]	; (1d84 <button_handler+0x164>)
    1c7e:	f8cc 3018 	str.w	r3, [ip, #24]
    1c82:	f10c 031c 	add.w	r3, ip, #28
    1c86:	2100      	movs	r1, #0
    1c88:	e04a      	b.n	1d20 <button_handler+0x100>
                LOG_INF("Failed to send message, %d", errno);
    1c8a:	f017 fa1d 	bl	190c8 <__errno>
    1c8e:	6804      	ldr	r4, [r0, #0]
    1c90:	466d      	mov	r5, sp
    1c92:	b088      	sub	sp, #32
    1c94:	ab02      	add	r3, sp, #8
    1c96:	f113 0210 	adds.w	r2, r3, #16
    1c9a:	d02f      	beq.n	1cfc <button_handler+0xdc>
    1c9c:	210c      	movs	r1, #12
    1c9e:	b13a      	cbz	r2, 1cb0 <button_handler+0x90>
    1ca0:	4608      	mov	r0, r1
    1ca2:	2904      	cmp	r1, #4
    1ca4:	dd01      	ble.n	1caa <button_handler+0x8a>
    1ca6:	4e39      	ldr	r6, [pc, #228]	; (1d8c <button_handler+0x16c>)
    1ca8:	615e      	str	r6, [r3, #20]
    1caa:	2808      	cmp	r0, #8
    1cac:	dd00      	ble.n	1cb0 <button_handler+0x90>
    1cae:	619c      	str	r4, [r3, #24]
    1cb0:	290b      	cmp	r1, #11
    1cb2:	dd26      	ble.n	1d02 <button_handler+0xe2>
    1cb4:	240c      	movs	r4, #12
    1cb6:	b13a      	cbz	r2, 1cc8 <button_handler+0xa8>
    1cb8:	2103      	movs	r1, #3
    1cba:	7139      	strb	r1, [r7, #4]
    1cbc:	2100      	movs	r1, #0
    1cbe:	7179      	strb	r1, [r7, #5]
    1cc0:	71b9      	strb	r1, [r7, #6]
    1cc2:	71f9      	strb	r1, [r7, #7]
    1cc4:	6878      	ldr	r0, [r7, #4]
    1cc6:	6118      	str	r0, [r3, #16]
    1cc8:	2100      	movs	r1, #0
    1cca:	f36f 0100 	bfc	r1, #0, #1
    1cce:	f36f 0141 	bfc	r1, #1, #1
    1cd2:	f36f 0182 	bfc	r1, #2, #1
    1cd6:	f36f 01c5 	bfc	r1, #3, #3
    1cda:	2303      	movs	r3, #3
    1cdc:	f363 1188 	bfi	r1, r3, #6, #3
    1ce0:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
    1ce4:	f364 2152 	bfi	r1, r4, #9, #10
    1ce8:	f36f 41de 	bfc	r1, #19, #12
    1cec:	f36f 71df 	bfc	r1, #31, #1
    1cf0:	2300      	movs	r3, #0
    1cf2:	4827      	ldr	r0, [pc, #156]	; (1d90 <button_handler+0x170>)
    1cf4:	f015 fe9a 	bl	17a2c <z_impl_z_log_msg_static_create>
    1cf8:	46ad      	mov	sp, r5
                return;
    1cfa:	e03a      	b.n	1d72 <button_handler+0x152>
                LOG_INF("Failed to send message, %d", errno);
    1cfc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    1d00:	e7cd      	b.n	1c9e <button_handler+0x7e>
    1d02:	f06f 041b 	mvn.w	r4, #27
    1d06:	e7d6      	b.n	1cb6 <button_handler+0x96>
            LOG_INF("Successfully sent message: %s", MESSAGE_TO_SEND);
    1d08:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    1d0c:	e7a8      	b.n	1c60 <button_handler+0x40>
    1d0e:	f101 0508 	add.w	r5, r1, #8
    1d12:	eb05 0e07 	add.w	lr, r5, r7
    1d16:	f81e ec08 	ldrb.w	lr, [lr, #-8]
    1d1a:	f803 eb01 	strb.w	lr, [r3], #1
    1d1e:	3101      	adds	r1, #1
    1d20:	2901      	cmp	r1, #1
    1d22:	d9f4      	bls.n	1d0e <button_handler+0xee>
    1d24:	280d      	cmp	r0, #13
    1d26:	dd27      	ble.n	1d78 <button_handler+0x158>
    1d28:	230e      	movs	r3, #14
    1d2a:	b14a      	cbz	r2, 1d40 <button_handler+0x120>
    1d2c:	2103      	movs	r1, #3
    1d2e:	7139      	strb	r1, [r7, #4]
    1d30:	2100      	movs	r1, #0
    1d32:	7179      	strb	r1, [r7, #5]
    1d34:	71b9      	strb	r1, [r7, #6]
    1d36:	2101      	movs	r1, #1
    1d38:	71f9      	strb	r1, [r7, #7]
    1d3a:	6878      	ldr	r0, [r7, #4]
    1d3c:	f8cc 0010 	str.w	r0, [ip, #16]
    1d40:	2100      	movs	r1, #0
    1d42:	f36f 0100 	bfc	r1, #0, #1
    1d46:	f36f 0141 	bfc	r1, #1, #1
    1d4a:	f36f 0182 	bfc	r1, #2, #1
    1d4e:	f36f 01c5 	bfc	r1, #3, #3
    1d52:	2003      	movs	r0, #3
    1d54:	f360 1188 	bfi	r1, r0, #6, #3
    1d58:	f3c3 0309 	ubfx	r3, r3, #0, #10
    1d5c:	f363 2152 	bfi	r1, r3, #9, #10
    1d60:	f36f 41de 	bfc	r1, #19, #12
    1d64:	f36f 71df 	bfc	r1, #31, #1
    1d68:	2300      	movs	r3, #0
    1d6a:	4809      	ldr	r0, [pc, #36]	; (1d90 <button_handler+0x170>)
    1d6c:	f015 fe5e 	bl	17a2c <z_impl_z_log_msg_static_create>
    1d70:	46a5      	mov	sp, r4
        }
        break;
    }
}
    1d72:	370c      	adds	r7, #12
    1d74:	46bd      	mov	sp, r7
    1d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
            LOG_INF("Successfully sent message: %s", MESSAGE_TO_SEND);
    1d78:	f06f 031b 	mvn.w	r3, #27
    1d7c:	e7d5      	b.n	1d2a <button_handler+0x10a>
    1d7e:	bf00      	nop
    1d80:	20001f4c 	.word	0x20001f4c
    1d84:	00020c84 	.word	0x00020c84
    1d88:	00020cb8 	.word	0x00020cb8
    1d8c:	00020c9c 	.word	0x00020c9c
    1d90:	00020aa8 	.word	0x00020aa8

00001d94 <server_resolve>:
{
    1d94:	b590      	push	{r4, r7, lr}
    1d96:	b087      	sub	sp, #28
    1d98:	af00      	add	r7, sp, #0
		union { uintptr_t x; void * val; } parm2 = { .val = dst };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_ZSOCK_INET_PTON);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_inet_pton(family, src, dst);
    1d9a:	4c36      	ldr	r4, [pc, #216]	; (1e74 <server_resolve+0xe0>)
    1d9c:	4622      	mov	r2, r4
    1d9e:	4936      	ldr	r1, [pc, #216]	; (1e78 <server_resolve+0xe4>)
    1da0:	2001      	movs	r0, #1
    1da2:	f016 fdbf 	bl	18924 <z_impl_zsock_inet_pton>
    server4->sin_family = AF_INET;
    1da6:	2001      	movs	r0, #1
    1da8:	f824 0c04 	strh.w	r0, [r4, #-4]
    server4->sin_port = ((SERVER_PORT_INT >> 8) & 0xff) | ((SERVER_PORT_INT << 8) & 0xff00);
    1dac:	f648 4309 	movw	r3, #35849	; 0x8c09
    1db0:	f824 3c02 	strh.w	r3, [r4, #-2]
		union { uintptr_t x; size_t val; } parm3 = { .val = size };
		return (char *) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_NET_ADDR_NTOP);
	}
#endif
	compiler_barrier();
	return z_impl_net_addr_ntop(family, src, dst, size);
    1db4:	2310      	movs	r3, #16
    1db6:	f107 0208 	add.w	r2, r7, #8
    1dba:	4621      	mov	r1, r4
    1dbc:	f017 fecd 	bl	19b5a <z_impl_net_addr_ntop>
    LOG_INF("IPv4 Address found %s", ipv4_addr);
    1dc0:	2300      	movs	r3, #0
    1dc2:	713b      	strb	r3, [r7, #4]
    1dc4:	2302      	movs	r3, #2
    1dc6:	717b      	strb	r3, [r7, #5]
    1dc8:	b088      	sub	sp, #32
    1dca:	46ec      	mov	ip, sp
    1dcc:	f11c 0210 	adds.w	r2, ip, #16
    1dd0:	d015      	beq.n	1dfe <server_resolve+0x6a>
    1dd2:	200e      	movs	r0, #14
    1dd4:	b122      	cbz	r2, 1de0 <server_resolve+0x4c>
    1dd6:	2804      	cmp	r0, #4
    1dd8:	dd02      	ble.n	1de0 <server_resolve+0x4c>
    1dda:	4b28      	ldr	r3, [pc, #160]	; (1e7c <server_resolve+0xe8>)
    1ddc:	f8cc 3014 	str.w	r3, [ip, #20]
    1de0:	2300      	movs	r3, #0
    1de2:	703b      	strb	r3, [r7, #0]
    1de4:	2302      	movs	r3, #2
    1de6:	707b      	strb	r3, [r7, #1]
    1de8:	b1b2      	cbz	r2, 1e18 <server_resolve+0x84>
    1dea:	2808      	cmp	r0, #8
    1dec:	dd03      	ble.n	1df6 <server_resolve+0x62>
    1dee:	f107 0308 	add.w	r3, r7, #8
    1df2:	f8cc 3018 	str.w	r3, [ip, #24]
    1df6:	f10c 031c 	add.w	r3, ip, #28
    1dfa:	2100      	movs	r1, #0
    1dfc:	e00a      	b.n	1e14 <server_resolve+0x80>
    1dfe:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    1e02:	e7e7      	b.n	1dd4 <server_resolve+0x40>
    1e04:	f101 0418 	add.w	r4, r1, #24
    1e08:	443c      	add	r4, r7
    1e0a:	f814 4c18 	ldrb.w	r4, [r4, #-24]
    1e0e:	f803 4b01 	strb.w	r4, [r3], #1
    1e12:	3101      	adds	r1, #1
    1e14:	2901      	cmp	r1, #1
    1e16:	d9f5      	bls.n	1e04 <server_resolve+0x70>
    1e18:	280d      	cmp	r0, #13
    1e1a:	dd27      	ble.n	1e6c <server_resolve+0xd8>
    1e1c:	230e      	movs	r3, #14
    1e1e:	b14a      	cbz	r2, 1e34 <server_resolve+0xa0>
    1e20:	2103      	movs	r1, #3
    1e22:	7139      	strb	r1, [r7, #4]
    1e24:	2100      	movs	r1, #0
    1e26:	7179      	strb	r1, [r7, #5]
    1e28:	71b9      	strb	r1, [r7, #6]
    1e2a:	2101      	movs	r1, #1
    1e2c:	71f9      	strb	r1, [r7, #7]
    1e2e:	6878      	ldr	r0, [r7, #4]
    1e30:	f8cc 0010 	str.w	r0, [ip, #16]
    1e34:	2100      	movs	r1, #0
    1e36:	f36f 0100 	bfc	r1, #0, #1
    1e3a:	f36f 0141 	bfc	r1, #1, #1
    1e3e:	f36f 0182 	bfc	r1, #2, #1
    1e42:	f36f 01c5 	bfc	r1, #3, #3
    1e46:	2003      	movs	r0, #3
    1e48:	f360 1188 	bfi	r1, r0, #6, #3
    1e4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    1e50:	f363 2152 	bfi	r1, r3, #9, #10
    1e54:	f36f 41de 	bfc	r1, #19, #12
    1e58:	f36f 71df 	bfc	r1, #31, #1
    1e5c:	2300      	movs	r3, #0
    1e5e:	4808      	ldr	r0, [pc, #32]	; (1e80 <server_resolve+0xec>)
    1e60:	f015 fde4 	bl	17a2c <z_impl_z_log_msg_static_create>
}
    1e64:	2000      	movs	r0, #0
    1e66:	371c      	adds	r7, #28
    1e68:	46bd      	mov	sp, r7
    1e6a:	bd90      	pop	{r4, r7, pc}
    LOG_INF("IPv4 Address found %s", ipv4_addr);
    1e6c:	f06f 031b 	mvn.w	r3, #27
    1e70:	e7d5      	b.n	1e1e <server_resolve+0x8a>
    1e72:	bf00      	nop
    1e74:	20001f48 	.word	0x20001f48
    1e78:	00020cd8 	.word	0x00020cd8
    1e7c:	00020ce8 	.word	0x00020ce8
    1e80:	00020aa8 	.word	0x00020aa8

00001e84 <server_connect>:
{
    1e84:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e86:	b089      	sub	sp, #36	; 0x24
    1e88:	af00      	add	r7, sp, #0
	return z_impl_zsock_socket(family, type, proto);
    1e8a:	2211      	movs	r2, #17
    1e8c:	2102      	movs	r1, #2
    1e8e:	2001      	movs	r0, #1
    1e90:	f002 fabc 	bl	440c <z_impl_zsock_socket>
    sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
    1e94:	4b5e      	ldr	r3, [pc, #376]	; (2010 <CONFIG_HEAP_MEM_POOL_SIZE+0x10>)
    1e96:	6018      	str	r0, [r3, #0]
    if (sock < 0)
    1e98:	2800      	cmp	r0, #0
    1e9a:	db2c      	blt.n	1ef6 <server_connect+0x72>
	return z_impl_zsock_connect(sock, addr, addrlen);
    1e9c:	2208      	movs	r2, #8
    1e9e:	495d      	ldr	r1, [pc, #372]	; (2014 <CONFIG_HEAP_MEM_POOL_SIZE+0x14>)
    1ea0:	f016 fa1c 	bl	182dc <z_impl_zsock_connect>
    if (err < 0)
    1ea4:	2800      	cmp	r0, #0
    1ea6:	db6c      	blt.n	1f82 <server_connect+0xfe>
    LOG_INF("Successfully connected to server");
    1ea8:	4b5b      	ldr	r3, [pc, #364]	; (2018 <CONFIG_HEAP_MEM_POOL_SIZE+0x18>)
    1eaa:	61fb      	str	r3, [r7, #28]
    1eac:	2302      	movs	r3, #2
    1eae:	713b      	strb	r3, [r7, #4]
    1eb0:	2400      	movs	r4, #0
    1eb2:	717c      	strb	r4, [r7, #5]
    1eb4:	71bc      	strb	r4, [r7, #6]
    1eb6:	71fc      	strb	r4, [r7, #7]
    1eb8:	687b      	ldr	r3, [r7, #4]
    1eba:	61bb      	str	r3, [r7, #24]
    1ebc:	4621      	mov	r1, r4
    1ebe:	f364 0100 	bfi	r1, r4, #0, #1
    1ec2:	f364 0141 	bfi	r1, r4, #1, #1
    1ec6:	f364 0182 	bfi	r1, r4, #2, #1
    1eca:	f364 01c5 	bfi	r1, r4, #3, #3
    1ece:	2303      	movs	r3, #3
    1ed0:	f363 1188 	bfi	r1, r3, #6, #3
    1ed4:	2308      	movs	r3, #8
    1ed6:	f363 2152 	bfi	r1, r3, #9, #10
    1eda:	f364 41de 	bfi	r1, r4, #19, #12
    1ede:	f364 71df 	bfi	r1, r4, #31, #1
    1ee2:	4623      	mov	r3, r4
    1ee4:	f107 0218 	add.w	r2, r7, #24
    1ee8:	484c      	ldr	r0, [pc, #304]	; (201c <CONFIG_HEAP_MEM_POOL_SIZE+0x1c>)
    1eea:	f015 fd9f 	bl	17a2c <z_impl_z_log_msg_static_create>
    return 0;
    1eee:	4620      	mov	r0, r4
}
    1ef0:	3724      	adds	r7, #36	; 0x24
    1ef2:	46bd      	mov	sp, r7
    1ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG_ERR("Failed to create socket: %d.", errno);
    1ef6:	f017 f8e7 	bl	190c8 <__errno>
    1efa:	6804      	ldr	r4, [r0, #0]
    1efc:	466d      	mov	r5, sp
    1efe:	b088      	sub	sp, #32
    1f00:	466b      	mov	r3, sp
    1f02:	f113 0210 	adds.w	r2, r3, #16
    1f06:	d00d      	beq.n	1f24 <server_connect+0xa0>
    1f08:	210c      	movs	r1, #12
    1f0a:	b13a      	cbz	r2, 1f1c <server_connect+0x98>
    1f0c:	4608      	mov	r0, r1
    1f0e:	2904      	cmp	r1, #4
    1f10:	dd01      	ble.n	1f16 <server_connect+0x92>
    1f12:	4e43      	ldr	r6, [pc, #268]	; (2020 <CONFIG_HEAP_MEM_POOL_SIZE+0x20>)
    1f14:	615e      	str	r6, [r3, #20]
    1f16:	2808      	cmp	r0, #8
    1f18:	dd07      	ble.n	1f2a <server_connect+0xa6>
    1f1a:	619c      	str	r4, [r3, #24]
    1f1c:	290b      	cmp	r1, #11
    1f1e:	dd2d      	ble.n	1f7c <server_connect+0xf8>
    1f20:	240c      	movs	r4, #12
    1f22:	e004      	b.n	1f2e <server_connect+0xaa>
    1f24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    1f28:	e7ef      	b.n	1f0a <server_connect+0x86>
    1f2a:	f06f 041b 	mvn.w	r4, #27
    1f2e:	b13a      	cbz	r2, 1f40 <server_connect+0xbc>
    1f30:	2103      	movs	r1, #3
    1f32:	7139      	strb	r1, [r7, #4]
    1f34:	2100      	movs	r1, #0
    1f36:	7179      	strb	r1, [r7, #5]
    1f38:	71b9      	strb	r1, [r7, #6]
    1f3a:	71f9      	strb	r1, [r7, #7]
    1f3c:	6878      	ldr	r0, [r7, #4]
    1f3e:	6118      	str	r0, [r3, #16]
    1f40:	2100      	movs	r1, #0
    1f42:	f36f 0100 	bfc	r1, #0, #1
    1f46:	f36f 0141 	bfc	r1, #1, #1
    1f4a:	f36f 0182 	bfc	r1, #2, #1
    1f4e:	f36f 01c5 	bfc	r1, #3, #3
    1f52:	2301      	movs	r3, #1
    1f54:	f363 1188 	bfi	r1, r3, #6, #3
    1f58:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
    1f5c:	f363 2152 	bfi	r1, r3, #9, #10
    1f60:	f36f 41de 	bfc	r1, #19, #12
    1f64:	f36f 71df 	bfc	r1, #31, #1
    1f68:	2300      	movs	r3, #0
    1f6a:	482c      	ldr	r0, [pc, #176]	; (201c <CONFIG_HEAP_MEM_POOL_SIZE+0x1c>)
    1f6c:	f015 fd5e 	bl	17a2c <z_impl_z_log_msg_static_create>
    1f70:	46ad      	mov	sp, r5
        return -errno;
    1f72:	f017 f8a9 	bl	190c8 <__errno>
    1f76:	6800      	ldr	r0, [r0, #0]
    1f78:	4240      	negs	r0, r0
    1f7a:	e7b9      	b.n	1ef0 <server_connect+0x6c>
        LOG_ERR("Failed to create socket: %d.", errno);
    1f7c:	f06f 041b 	mvn.w	r4, #27
    1f80:	e7d5      	b.n	1f2e <server_connect+0xaa>
        LOG_ERR("Connect failed : %d", errno);
    1f82:	f017 f8a1 	bl	190c8 <__errno>
    1f86:	6804      	ldr	r4, [r0, #0]
    1f88:	466d      	mov	r5, sp
    1f8a:	b088      	sub	sp, #32
    1f8c:	466b      	mov	r3, sp
    1f8e:	f113 0210 	adds.w	r2, r3, #16
    1f92:	d00d      	beq.n	1fb0 <server_connect+0x12c>
    1f94:	210c      	movs	r1, #12
    1f96:	b13a      	cbz	r2, 1fa8 <server_connect+0x124>
    1f98:	4608      	mov	r0, r1
    1f9a:	2904      	cmp	r1, #4
    1f9c:	dd01      	ble.n	1fa2 <server_connect+0x11e>
    1f9e:	4e21      	ldr	r6, [pc, #132]	; (2024 <CONFIG_HEAP_MEM_POOL_SIZE+0x24>)
    1fa0:	615e      	str	r6, [r3, #20]
    1fa2:	2808      	cmp	r0, #8
    1fa4:	dd07      	ble.n	1fb6 <server_connect+0x132>
    1fa6:	619c      	str	r4, [r3, #24]
    1fa8:	290b      	cmp	r1, #11
    1faa:	dd2d      	ble.n	2008 <CONFIG_HEAP_MEM_POOL_SIZE+0x8>
    1fac:	240c      	movs	r4, #12
    1fae:	e004      	b.n	1fba <server_connect+0x136>
    1fb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    1fb4:	e7ef      	b.n	1f96 <server_connect+0x112>
    1fb6:	f06f 041b 	mvn.w	r4, #27
    1fba:	b13a      	cbz	r2, 1fcc <server_connect+0x148>
    1fbc:	2103      	movs	r1, #3
    1fbe:	7139      	strb	r1, [r7, #4]
    1fc0:	2100      	movs	r1, #0
    1fc2:	7179      	strb	r1, [r7, #5]
    1fc4:	71b9      	strb	r1, [r7, #6]
    1fc6:	71f9      	strb	r1, [r7, #7]
    1fc8:	6878      	ldr	r0, [r7, #4]
    1fca:	6118      	str	r0, [r3, #16]
    1fcc:	2100      	movs	r1, #0
    1fce:	f36f 0100 	bfc	r1, #0, #1
    1fd2:	f36f 0141 	bfc	r1, #1, #1
    1fd6:	f36f 0182 	bfc	r1, #2, #1
    1fda:	f36f 01c5 	bfc	r1, #3, #3
    1fde:	2301      	movs	r3, #1
    1fe0:	f363 1188 	bfi	r1, r3, #6, #3
    1fe4:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
    1fe8:	f363 2152 	bfi	r1, r3, #9, #10
    1fec:	f36f 41de 	bfc	r1, #19, #12
    1ff0:	f36f 71df 	bfc	r1, #31, #1
    1ff4:	2300      	movs	r3, #0
    1ff6:	4809      	ldr	r0, [pc, #36]	; (201c <CONFIG_HEAP_MEM_POOL_SIZE+0x1c>)
    1ff8:	f015 fd18 	bl	17a2c <z_impl_z_log_msg_static_create>
    1ffc:	46ad      	mov	sp, r5
        return -errno;
    1ffe:	f017 f863 	bl	190c8 <__errno>
    2002:	6800      	ldr	r0, [r0, #0]
    2004:	4240      	negs	r0, r0
    2006:	e773      	b.n	1ef0 <server_connect+0x6c>
        LOG_ERR("Connect failed : %d", errno);
    2008:	f06f 041b 	mvn.w	r4, #27
    200c:	e7d5      	b.n	1fba <server_connect+0x136>
    200e:	bf00      	nop
    2010:	20001f4c 	.word	0x20001f4c
    2014:	20001f44 	.word	0x20001f44
    2018:	00020d34 	.word	0x00020d34
    201c:	00020aa8 	.word	0x00020aa8
    2020:	00020d00 	.word	0x00020d00
    2024:	00020d20 	.word	0x00020d20

00002028 <p100_socket_init>:

int p100_socket_init()
{
    2028:	b5f0      	push	{r4, r5, r6, r7, lr}
    202a:	b0a3      	sub	sp, #140	; 0x8c
    202c:	af02      	add	r7, sp, #8
    int received;

    if (dk_buttons_init(button_handler) != 0)
    202e:	48b8      	ldr	r0, [pc, #736]	; (2310 <p100_socket_init+0x2e8>)
    2030:	f00c fd98 	bl	eb64 <dk_buttons_init>
    2034:	bb50      	cbnz	r0, 208c <p100_socket_init+0x64>
    {
        LOG_ERR("Failed to initialize the buttons library");
    }

    if (server_resolve() != 0)
    2036:	f7ff fead 	bl	1d94 <server_resolve>
    203a:	2800      	cmp	r0, #0
    203c:	d149      	bne.n	20d2 <p100_socket_init+0xaa>
    {
        LOG_INF("Failed to resolve server name");
        return -1;
    }

    if (server_connect() != 0)
    203e:	f7ff ff21 	bl	1e84 <server_connect>
    2042:	2800      	cmp	r0, #0
    2044:	d168      	bne.n	2118 <p100_socket_init+0xf0>
    {
        LOG_INF("Failed to initialize client");
        return -1;
    }

    LOG_INF("Press button 1 send your message");
    2046:	4bb3      	ldr	r3, [pc, #716]	; (2314 <p100_socket_init+0x2ec>)
    2048:	637b      	str	r3, [r7, #52]	; 0x34
    204a:	2302      	movs	r3, #2
    204c:	713b      	strb	r3, [r7, #4]
    204e:	2300      	movs	r3, #0
    2050:	717b      	strb	r3, [r7, #5]
    2052:	71bb      	strb	r3, [r7, #6]
    2054:	71fb      	strb	r3, [r7, #7]
    2056:	687a      	ldr	r2, [r7, #4]
    2058:	633a      	str	r2, [r7, #48]	; 0x30
    205a:	4619      	mov	r1, r3
    205c:	f363 0100 	bfi	r1, r3, #0, #1
    2060:	f363 0141 	bfi	r1, r3, #1, #1
    2064:	f363 0182 	bfi	r1, r3, #2, #1
    2068:	f363 01c5 	bfi	r1, r3, #3, #3
    206c:	2203      	movs	r2, #3
    206e:	f362 1188 	bfi	r1, r2, #6, #3
    2072:	2208      	movs	r2, #8
    2074:	f362 2152 	bfi	r1, r2, #9, #10
    2078:	f363 41de 	bfi	r1, r3, #19, #12
    207c:	f363 71df 	bfi	r1, r3, #31, #1
    2080:	f107 0230 	add.w	r2, r7, #48	; 0x30
    2084:	48a4      	ldr	r0, [pc, #656]	; (2318 <p100_socket_init+0x2f0>)
    2086:	f015 fcd1 	bl	17a2c <z_impl_z_log_msg_static_create>
    208a:	e105      	b.n	2298 <p100_socket_init+0x270>
        LOG_ERR("Failed to initialize the buttons library");
    208c:	4ba3      	ldr	r3, [pc, #652]	; (231c <p100_socket_init+0x2f4>)
    208e:	61fb      	str	r3, [r7, #28]
    2090:	2302      	movs	r3, #2
    2092:	713b      	strb	r3, [r7, #4]
    2094:	2300      	movs	r3, #0
    2096:	717b      	strb	r3, [r7, #5]
    2098:	71bb      	strb	r3, [r7, #6]
    209a:	71fb      	strb	r3, [r7, #7]
    209c:	687a      	ldr	r2, [r7, #4]
    209e:	61ba      	str	r2, [r7, #24]
    20a0:	4619      	mov	r1, r3
    20a2:	f363 0100 	bfi	r1, r3, #0, #1
    20a6:	f363 0141 	bfi	r1, r3, #1, #1
    20aa:	f363 0182 	bfi	r1, r3, #2, #1
    20ae:	f363 01c5 	bfi	r1, r3, #3, #3
    20b2:	2201      	movs	r2, #1
    20b4:	f362 1188 	bfi	r1, r2, #6, #3
    20b8:	2208      	movs	r2, #8
    20ba:	f362 2152 	bfi	r1, r2, #9, #10
    20be:	f363 41de 	bfi	r1, r3, #19, #12
    20c2:	f363 71df 	bfi	r1, r3, #31, #1
    20c6:	f107 0218 	add.w	r2, r7, #24
    20ca:	4893      	ldr	r0, [pc, #588]	; (2318 <p100_socket_init+0x2f0>)
    20cc:	f015 fcae 	bl	17a2c <z_impl_z_log_msg_static_create>
    20d0:	e7b1      	b.n	2036 <p100_socket_init+0xe>
        LOG_INF("Failed to resolve server name");
    20d2:	4b93      	ldr	r3, [pc, #588]	; (2320 <p100_socket_init+0x2f8>)
    20d4:	67fb      	str	r3, [r7, #124]	; 0x7c
    20d6:	2302      	movs	r3, #2
    20d8:	713b      	strb	r3, [r7, #4]
    20da:	2300      	movs	r3, #0
    20dc:	717b      	strb	r3, [r7, #5]
    20de:	71bb      	strb	r3, [r7, #6]
    20e0:	71fb      	strb	r3, [r7, #7]
    20e2:	687a      	ldr	r2, [r7, #4]
    20e4:	67ba      	str	r2, [r7, #120]	; 0x78
    20e6:	4619      	mov	r1, r3
    20e8:	f363 0100 	bfi	r1, r3, #0, #1
    20ec:	f363 0141 	bfi	r1, r3, #1, #1
    20f0:	f363 0182 	bfi	r1, r3, #2, #1
    20f4:	f363 01c5 	bfi	r1, r3, #3, #3
    20f8:	2203      	movs	r2, #3
    20fa:	f362 1188 	bfi	r1, r2, #6, #3
    20fe:	2208      	movs	r2, #8
    2100:	f362 2152 	bfi	r1, r2, #9, #10
    2104:	f363 41de 	bfi	r1, r3, #19, #12
    2108:	f363 71df 	bfi	r1, r3, #31, #1
    210c:	f107 0278 	add.w	r2, r7, #120	; 0x78
    2110:	4881      	ldr	r0, [pc, #516]	; (2318 <p100_socket_init+0x2f0>)
    2112:	f015 fc8b 	bl	17a2c <z_impl_z_log_msg_static_create>
        return -1;
    2116:	e064      	b.n	21e2 <p100_socket_init+0x1ba>
        LOG_INF("Failed to initialize client");
    2118:	4b82      	ldr	r3, [pc, #520]	; (2324 <p100_socket_init+0x2fc>)
    211a:	667b      	str	r3, [r7, #100]	; 0x64
    211c:	2302      	movs	r3, #2
    211e:	713b      	strb	r3, [r7, #4]
    2120:	2300      	movs	r3, #0
    2122:	717b      	strb	r3, [r7, #5]
    2124:	71bb      	strb	r3, [r7, #6]
    2126:	71fb      	strb	r3, [r7, #7]
    2128:	687a      	ldr	r2, [r7, #4]
    212a:	663a      	str	r2, [r7, #96]	; 0x60
    212c:	4619      	mov	r1, r3
    212e:	f363 0100 	bfi	r1, r3, #0, #1
    2132:	f363 0141 	bfi	r1, r3, #1, #1
    2136:	f363 0182 	bfi	r1, r3, #2, #1
    213a:	f363 01c5 	bfi	r1, r3, #3, #3
    213e:	2203      	movs	r2, #3
    2140:	f362 1188 	bfi	r1, r2, #6, #3
    2144:	2208      	movs	r2, #8
    2146:	f362 2152 	bfi	r1, r2, #9, #10
    214a:	f363 41de 	bfi	r1, r3, #19, #12
    214e:	f363 71df 	bfi	r1, r3, #31, #1
    2152:	f107 0260 	add.w	r2, r7, #96	; 0x60
    2156:	4870      	ldr	r0, [pc, #448]	; (2318 <p100_socket_init+0x2f0>)
    2158:	f015 fc68 	bl	17a2c <z_impl_z_log_msg_static_create>
        return -1;
    215c:	e041      	b.n	21e2 <p100_socket_init+0x1ba>
    {
        received = recv(sock, recv_buf, sizeof(recv_buf) - 1, 0);

        if (received < 0)
        {
            LOG_ERR("Socket error: %d, exit", errno);
    215e:	f016 ffb3 	bl	190c8 <__errno>
    2162:	6804      	ldr	r4, [r0, #0]
    2164:	466d      	mov	r5, sp
    2166:	b088      	sub	sp, #32
    2168:	ab02      	add	r3, sp, #8
    216a:	f113 0210 	adds.w	r2, r3, #16
    216e:	d00d      	beq.n	218c <p100_socket_init+0x164>
    2170:	210c      	movs	r1, #12
    2172:	b13a      	cbz	r2, 2184 <p100_socket_init+0x15c>
    2174:	4608      	mov	r0, r1
    2176:	2904      	cmp	r1, #4
    2178:	dd01      	ble.n	217e <p100_socket_init+0x156>
    217a:	4e6b      	ldr	r6, [pc, #428]	; (2328 <p100_socket_init+0x300>)
    217c:	615e      	str	r6, [r3, #20]
    217e:	2808      	cmp	r0, #8
    2180:	dd07      	ble.n	2192 <p100_socket_init+0x16a>
    2182:	619c      	str	r4, [r3, #24]
    2184:	290b      	cmp	r1, #11
    2186:	dd31      	ble.n	21ec <p100_socket_init+0x1c4>
    2188:	240c      	movs	r4, #12
    218a:	e004      	b.n	2196 <p100_socket_init+0x16e>
    218c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    2190:	e7ef      	b.n	2172 <p100_socket_init+0x14a>
    2192:	f06f 041b 	mvn.w	r4, #27
    2196:	b13a      	cbz	r2, 21a8 <p100_socket_init+0x180>
    2198:	2103      	movs	r1, #3
    219a:	7139      	strb	r1, [r7, #4]
    219c:	2100      	movs	r1, #0
    219e:	7179      	strb	r1, [r7, #5]
    21a0:	71b9      	strb	r1, [r7, #6]
    21a2:	71f9      	strb	r1, [r7, #7]
    21a4:	6878      	ldr	r0, [r7, #4]
    21a6:	6118      	str	r0, [r3, #16]
    21a8:	2100      	movs	r1, #0
    21aa:	f36f 0100 	bfc	r1, #0, #1
    21ae:	f36f 0141 	bfc	r1, #1, #1
    21b2:	f36f 0182 	bfc	r1, #2, #1
    21b6:	f36f 01c5 	bfc	r1, #3, #3
    21ba:	2301      	movs	r3, #1
    21bc:	f363 1188 	bfi	r1, r3, #6, #3
    21c0:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
    21c4:	f363 2152 	bfi	r1, r3, #9, #10
    21c8:	f36f 41de 	bfc	r1, #19, #12
    21cc:	f36f 71df 	bfc	r1, #31, #1
    21d0:	2300      	movs	r3, #0
    21d2:	4851      	ldr	r0, [pc, #324]	; (2318 <p100_socket_init+0x2f0>)
    21d4:	f015 fc2a 	bl	17a2c <z_impl_z_log_msg_static_create>
    21d8:	46ad      	mov	sp, r5

        recv_buf[received] = 0;
        LOG_INF("Data received from the server: (%s)", recv_buf);
    }

    (void)close(sock);
    21da:	4b54      	ldr	r3, [pc, #336]	; (232c <p100_socket_init+0x304>)
    21dc:	6818      	ldr	r0, [r3, #0]
	return z_impl_zsock_close(sock);
    21de:	f016 f805 	bl	181ec <z_impl_zsock_close>

    return -1;
    21e2:	f04f 30ff 	mov.w	r0, #4294967295
    21e6:	3784      	adds	r7, #132	; 0x84
    21e8:	46bd      	mov	sp, r7
    21ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
            LOG_ERR("Socket error: %d, exit", errno);
    21ec:	f06f 041b 	mvn.w	r4, #27
    21f0:	e7d1      	b.n	2196 <p100_socket_init+0x16e>
            LOG_ERR("Empty datagram");
    21f2:	4b4f      	ldr	r3, [pc, #316]	; (2330 <p100_socket_init+0x308>)
    21f4:	64fb      	str	r3, [r7, #76]	; 0x4c
    21f6:	2302      	movs	r3, #2
    21f8:	713b      	strb	r3, [r7, #4]
    21fa:	2300      	movs	r3, #0
    21fc:	717b      	strb	r3, [r7, #5]
    21fe:	71bb      	strb	r3, [r7, #6]
    2200:	71fb      	strb	r3, [r7, #7]
    2202:	687a      	ldr	r2, [r7, #4]
    2204:	64ba      	str	r2, [r7, #72]	; 0x48
    2206:	4619      	mov	r1, r3
    2208:	f363 0100 	bfi	r1, r3, #0, #1
    220c:	f363 0141 	bfi	r1, r3, #1, #1
    2210:	f363 0182 	bfi	r1, r3, #2, #1
    2214:	f363 01c5 	bfi	r1, r3, #3, #3
    2218:	2201      	movs	r2, #1
    221a:	f362 1188 	bfi	r1, r2, #6, #3
    221e:	2208      	movs	r2, #8
    2220:	f362 2152 	bfi	r1, r2, #9, #10
    2224:	f363 41de 	bfi	r1, r3, #19, #12
    2228:	f363 71df 	bfi	r1, r3, #31, #1
    222c:	f107 0248 	add.w	r2, r7, #72	; 0x48
    2230:	4839      	ldr	r0, [pc, #228]	; (2318 <p100_socket_init+0x2f0>)
    2232:	f015 fbfb 	bl	17a2c <z_impl_z_log_msg_static_create>
    2236:	e7d0      	b.n	21da <p100_socket_init+0x1b2>
        LOG_INF("Data received from the server: (%s)", recv_buf);
    2238:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
    223c:	e048      	b.n	22d0 <p100_socket_init+0x2a8>
    223e:	2300      	movs	r3, #0
    2240:	703b      	strb	r3, [r7, #0]
    2242:	2302      	movs	r3, #2
    2244:	707b      	strb	r3, [r7, #1]
    2246:	2a00      	cmp	r2, #0
    2248:	d14a      	bne.n	22e0 <p100_socket_init+0x2b8>
    224a:	f1bc 0f0d 	cmp.w	ip, #13
    224e:	dd5c      	ble.n	230a <p100_socket_init+0x2e2>
    2250:	230e      	movs	r3, #14
    2252:	b142      	cbz	r2, 2266 <p100_socket_init+0x23e>
    2254:	2003      	movs	r0, #3
    2256:	7138      	strb	r0, [r7, #4]
    2258:	2000      	movs	r0, #0
    225a:	7178      	strb	r0, [r7, #5]
    225c:	71b8      	strb	r0, [r7, #6]
    225e:	2001      	movs	r0, #1
    2260:	71f8      	strb	r0, [r7, #7]
    2262:	6878      	ldr	r0, [r7, #4]
    2264:	6108      	str	r0, [r1, #16]
    2266:	f36f 0400 	bfc	r4, #0, #1
    226a:	f36f 0441 	bfc	r4, #1, #1
    226e:	f36f 0482 	bfc	r4, #2, #1
    2272:	f36f 04c5 	bfc	r4, #3, #3
    2276:	2103      	movs	r1, #3
    2278:	f361 1488 	bfi	r4, r1, #6, #3
    227c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    2280:	f363 2452 	bfi	r4, r3, #9, #10
    2284:	f36f 44de 	bfc	r4, #19, #12
    2288:	f36f 74df 	bfc	r4, #31, #1
    228c:	2300      	movs	r3, #0
    228e:	4621      	mov	r1, r4
    2290:	4821      	ldr	r0, [pc, #132]	; (2318 <p100_socket_init+0x2f0>)
    2292:	f015 fbcb 	bl	17a2c <z_impl_z_log_msg_static_create>
    2296:	46ad      	mov	sp, r5
        received = recv(sock, recv_buf, sizeof(recv_buf) - 1, 0);
    2298:	4b24      	ldr	r3, [pc, #144]	; (232c <p100_socket_init+0x304>)
    229a:	6818      	ldr	r0, [r3, #0]
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
    229c:	2300      	movs	r3, #0
    229e:	9301      	str	r3, [sp, #4]
    22a0:	9300      	str	r3, [sp, #0]
    22a2:	22ff      	movs	r2, #255	; 0xff
    22a4:	4923      	ldr	r1, [pc, #140]	; (2334 <p100_socket_init+0x30c>)
    22a6:	f016 fb05 	bl	188b4 <z_impl_zsock_recvfrom>
        if (received < 0)
    22aa:	2800      	cmp	r0, #0
    22ac:	f6ff af57 	blt.w	215e <p100_socket_init+0x136>
        if (received == 0)
    22b0:	2800      	cmp	r0, #0
    22b2:	d09e      	beq.n	21f2 <p100_socket_init+0x1ca>
        recv_buf[received] = 0;
    22b4:	2300      	movs	r3, #0
    22b6:	4a1f      	ldr	r2, [pc, #124]	; (2334 <p100_socket_init+0x30c>)
    22b8:	5413      	strb	r3, [r2, r0]
        LOG_INF("Data received from the server: (%s)", recv_buf);
    22ba:	466d      	mov	r5, sp
    22bc:	713b      	strb	r3, [r7, #4]
    22be:	2302      	movs	r3, #2
    22c0:	717b      	strb	r3, [r7, #5]
    22c2:	b088      	sub	sp, #32
    22c4:	a902      	add	r1, sp, #8
    22c6:	f111 0210 	adds.w	r2, r1, #16
    22ca:	d0b5      	beq.n	2238 <p100_socket_init+0x210>
    22cc:	f04f 0c0e 	mov.w	ip, #14
    22d0:	2a00      	cmp	r2, #0
    22d2:	d0b4      	beq.n	223e <p100_socket_init+0x216>
    22d4:	f1bc 0f04 	cmp.w	ip, #4
    22d8:	ddb1      	ble.n	223e <p100_socket_init+0x216>
    22da:	4b17      	ldr	r3, [pc, #92]	; (2338 <p100_socket_init+0x310>)
    22dc:	614b      	str	r3, [r1, #20]
    22de:	e7ae      	b.n	223e <p100_socket_init+0x216>
    22e0:	f1bc 0f08 	cmp.w	ip, #8
    22e4:	dd01      	ble.n	22ea <p100_socket_init+0x2c2>
    22e6:	4b13      	ldr	r3, [pc, #76]	; (2334 <p100_socket_init+0x30c>)
    22e8:	618b      	str	r3, [r1, #24]
    22ea:	f101 031c 	add.w	r3, r1, #28
    22ee:	2000      	movs	r0, #0
    22f0:	e008      	b.n	2304 <p100_socket_init+0x2dc>
    22f2:	f100 0680 	add.w	r6, r0, #128	; 0x80
    22f6:	eb06 0e07 	add.w	lr, r6, r7
    22fa:	f81e ec80 	ldrb.w	lr, [lr, #-128]
    22fe:	f803 eb01 	strb.w	lr, [r3], #1
    2302:	3001      	adds	r0, #1
    2304:	2801      	cmp	r0, #1
    2306:	d9f4      	bls.n	22f2 <p100_socket_init+0x2ca>
    2308:	e79f      	b.n	224a <p100_socket_init+0x222>
    230a:	f06f 031b 	mvn.w	r3, #27
    230e:	e7a0      	b.n	2252 <p100_socket_init+0x22a>
    2310:	00001c21 	.word	0x00001c21
    2314:	00020dc0 	.word	0x00020dc0
    2318:	00020aa8 	.word	0x00020aa8
    231c:	00020d58 	.word	0x00020d58
    2320:	00020d84 	.word	0x00020d84
    2324:	00020da4 	.word	0x00020da4
    2328:	00020de4 	.word	0x00020de4
    232c:	20001f4c 	.word	0x20001f4c
    2330:	00020dfc 	.word	0x00020dfc
    2334:	20001e44 	.word	0x20001e44
    2338:	00020e0c 	.word	0x00020e0c

0000233c <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
    233c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2340:	b091      	sub	sp, #68	; 0x44
    2342:	9205      	str	r2, [sp, #20]
    2344:	9302      	str	r3, [sp, #8]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
    2346:	4613      	mov	r3, r2
    2348:	f002 0204 	and.w	r2, r2, #4
    234c:	9200      	str	r2, [sp, #0]
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    234e:	f3c3 02c2 	ubfx	r2, r3, #3, #3
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
    2352:	f010 0303 	ands.w	r3, r0, #3
    2356:	9301      	str	r3, [sp, #4]
    2358:	f040 8223 	bne.w	27a2 <cbvprintf_package+0x466>
    235c:	4607      	mov	r7, r0
    235e:	468a      	mov	sl, r1
    2360:	3201      	adds	r2, #1
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
    2362:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
    2364:	2800      	cmp	r0, #0
    2366:	d047      	beq.n	23f8 <cbvprintf_package+0xbc>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
    2368:	b127      	cbz	r7, 2374 <cbvprintf_package+0x38>
    236a:	1be3      	subs	r3, r4, r7
    236c:	3304      	adds	r3, #4
    236e:	4553      	cmp	r3, sl
    2370:	f200 821a 	bhi.w	27a8 <cbvprintf_package+0x46c>
	 * Here we branch directly into the code processing strings
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
    2374:	9b02      	ldr	r3, [sp, #8]
    2376:	1e5d      	subs	r5, r3, #1
	unsigned int s_ro_cnt = 0; /* number of ro strings */
    2378:	9b01      	ldr	r3, [sp, #4]
    237a:	9304      	str	r3, [sp, #16]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
    237c:	9306      	str	r3, [sp, #24]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
    237e:	9303      	str	r3, [sp, #12]
	bool parsing = false;
    2380:	2600      	movs	r6, #0
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
    2382:	f04f 3bff 	mov.w	fp, #4294967295
	align = VA_STACK_ALIGN(char *);
    2386:	f04f 0804 	mov.w	r8, #4
	size = sizeof(char *);
    238a:	46c1      	mov	r9, r8

		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
    238c:	b10f      	cbz	r7, 2392 <cbvprintf_package+0x56>
				*(const char **)buf = s;
    238e:	9b02      	ldr	r3, [sp, #8]
    2390:	6023      	str	r3, [r4, #0]
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    2392:	1e53      	subs	r3, r2, #1
    2394:	9307      	str	r3, [sp, #28]
    2396:	2a00      	cmp	r2, #0
    2398:	f340 815f 	ble.w	265a <cbvprintf_package+0x31e>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
    239c:	9b05      	ldr	r3, [sp, #20]
    239e:	f013 0202 	ands.w	r2, r3, #2
    23a2:	d026      	beq.n	23f2 <cbvprintf_package+0xb6>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    23a4:	2001      	movs	r0, #1
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    23a6:	1be1      	subs	r1, r4, r7
    23a8:	088b      	lsrs	r3, r1, #2
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    23aa:	b11a      	cbz	r2, 23b4 <cbvprintf_package+0x78>
    23ac:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    23b0:	f080 8200 	bcs.w	27b4 <cbvprintf_package+0x478>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    23b4:	9903      	ldr	r1, [sp, #12]
    23b6:	290f      	cmp	r1, #15
    23b8:	f200 81ff 	bhi.w	27ba <cbvprintf_package+0x47e>
					__ASSERT(false, "str_ptr_pos[] too small");
					return -EINVAL;
				}

				if (buf0 != NULL) {
    23bc:	2f00      	cmp	r7, #0
    23be:	f000 8164 	beq.w	268a <cbvprintf_package+0x34e>
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
    23c2:	b2db      	uxtb	r3, r3
    23c4:	f101 0240 	add.w	r2, r1, #64	; 0x40
    23c8:	446a      	add	r2, sp
    23ca:	f802 3c10 	strb.w	r3, [r2, #-16]
					str_ptr_arg[s_idx] = arg_idx;
    23ce:	f802 bc20 	strb.w	fp, [r2, #-32]
					if (is_ro) {
    23d2:	2800      	cmp	r0, #0
    23d4:	f000 8155 	beq.w	2682 <cbvprintf_package+0x346>
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
    23d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    23dc:	f101 0240 	add.w	r2, r1, #64	; 0x40
    23e0:	446a      	add	r2, sp
    23e2:	f802 3c10 	strb.w	r3, [r2, #-16]
						s_ro_cnt++;
    23e6:	9b04      	ldr	r3, [sp, #16]
    23e8:	3301      	adds	r3, #1
    23ea:	9304      	str	r3, [sp, #16]
					 * and size of the pointer position prefix.
					 */
					len += strlen(s) + 1 + 1;
				}

				s_idx++;
    23ec:	9b03      	ldr	r3, [sp, #12]
    23ee:	3301      	adds	r3, #1
    23f0:	9303      	str	r3, [sp, #12]
			}
			buf += sizeof(char *);
    23f2:	3404      	adds	r4, #4

			is_str_arg = false;
    23f4:	2200      	movs	r2, #0
    23f6:	e03d      	b.n	2474 <cbvprintf_package+0x138>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
    23f8:	f001 0a07 	and.w	sl, r1, #7
    23fc:	4454      	add	r4, sl
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
    23fe:	f1ca 0a08 	rsb	sl, sl, #8
    2402:	e7b1      	b.n	2368 <cbvprintf_package+0x2c>
				parsing = false;
    2404:	2600      	movs	r6, #0
    2406:	e034      	b.n	2472 <cbvprintf_package+0x136>
    2408:	2600      	movs	r6, #0
    240a:	e032      	b.n	2472 <cbvprintf_package+0x136>
    240c:	2600      	movs	r6, #0
    240e:	e030      	b.n	2472 <cbvprintf_package+0x136>
				align = VA_STACK_ALIGN(intmax_t);
    2410:	f04f 0808 	mov.w	r8, #8
				size = sizeof(intmax_t);
    2414:	46c1      	mov	r9, r8
    2416:	e02c      	b.n	2472 <cbvprintf_package+0x136>
				if (*fmt == '%') {
    2418:	2925      	cmp	r1, #37	; 0x25
    241a:	d12a      	bne.n	2472 <cbvprintf_package+0x136>
					arg_idx++;
    241c:	f10b 0b01 	add.w	fp, fp, #1
					parsing = true;
    2420:	2601      	movs	r6, #1
					align = VA_STACK_ALIGN(int);
    2422:	f04f 0804 	mov.w	r8, #4
					size = sizeof(int);
    2426:	46c1      	mov	r9, r8
				continue;
    2428:	e023      	b.n	2472 <cbvprintf_package+0x136>
			switch (*fmt) {
    242a:	2947      	cmp	r1, #71	; 0x47
    242c:	d8ec      	bhi.n	2408 <cbvprintf_package+0xcc>
    242e:	292a      	cmp	r1, #42	; 0x2a
    2430:	d312      	bcc.n	2458 <cbvprintf_package+0x11c>
    2432:	392a      	subs	r1, #42	; 0x2a
    2434:	b2c9      	uxtb	r1, r1
    2436:	2001      	movs	r0, #1
    2438:	fa00 f101 	lsl.w	r1, r0, r1
    243c:	f64f 70da 	movw	r0, #65498	; 0xffda
    2440:	4201      	tst	r1, r0
    2442:	d116      	bne.n	2472 <cbvprintf_package+0x136>
    2444:	f011 5f62 	tst.w	r1, #947912704	; 0x38800000
    2448:	f040 80c4 	bne.w	25d4 <cbvprintf_package+0x298>
    244c:	f011 0f01 	tst.w	r1, #1
    2450:	f040 808e 	bne.w	2570 <cbvprintf_package+0x234>
				parsing = false;
    2454:	2600      	movs	r6, #0
    2456:	e00c      	b.n	2472 <cbvprintf_package+0x136>
			switch (*fmt) {
    2458:	2925      	cmp	r1, #37	; 0x25
    245a:	d103      	bne.n	2464 <cbvprintf_package+0x128>
				arg_idx--;
    245c:	f10b 3bff 	add.w	fp, fp, #4294967295
				parsing = false;
    2460:	2600      	movs	r6, #0
				continue;
    2462:	e006      	b.n	2472 <cbvprintf_package+0x136>
			switch (*fmt) {
    2464:	d901      	bls.n	246a <cbvprintf_package+0x12e>
				parsing = false;
    2466:	2600      	movs	r6, #0
    2468:	e003      	b.n	2472 <cbvprintf_package+0x136>
			switch (*fmt) {
    246a:	2920      	cmp	r1, #32
    246c:	d001      	beq.n	2472 <cbvprintf_package+0x136>
    246e:	2923      	cmp	r1, #35	; 0x23
    2470:	d1cc      	bne.n	240c <cbvprintf_package+0xd0>
				parsing = false;
    2472:	461d      	mov	r5, r3
			if (*++fmt == '\0') {
    2474:	1c6b      	adds	r3, r5, #1
    2476:	7869      	ldrb	r1, [r5, #1]
    2478:	2900      	cmp	r1, #0
    247a:	f000 811d 	beq.w	26b8 <cbvprintf_package+0x37c>
			if (!parsing) {
    247e:	2e00      	cmp	r6, #0
    2480:	d0ca      	beq.n	2418 <cbvprintf_package+0xdc>
			switch (*fmt) {
    2482:	297a      	cmp	r1, #122	; 0x7a
    2484:	d8be      	bhi.n	2404 <cbvprintf_package+0xc8>
    2486:	294c      	cmp	r1, #76	; 0x4c
    2488:	d3cf      	bcc.n	242a <cbvprintf_package+0xee>
    248a:	394c      	subs	r1, #76	; 0x4c
    248c:	292e      	cmp	r1, #46	; 0x2e
    248e:	d861      	bhi.n	2554 <cbvprintf_package+0x218>
    2490:	a001      	add	r0, pc, #4	; (adr r0, 2498 <cbvprintf_package+0x15c>)
    2492:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    2496:	bf00      	nop
    2498:	00002473 	.word	0x00002473
    249c:	00002555 	.word	0x00002555
    24a0:	00002555 	.word	0x00002555
    24a4:	00002555 	.word	0x00002555
    24a8:	00002555 	.word	0x00002555
    24ac:	00002555 	.word	0x00002555
    24b0:	00002555 	.word	0x00002555
    24b4:	00002555 	.word	0x00002555
    24b8:	00002555 	.word	0x00002555
    24bc:	00002555 	.word	0x00002555
    24c0:	00002555 	.word	0x00002555
    24c4:	00002555 	.word	0x00002555
    24c8:	00002569 	.word	0x00002569
    24cc:	00002555 	.word	0x00002555
    24d0:	00002555 	.word	0x00002555
    24d4:	00002555 	.word	0x00002555
    24d8:	00002555 	.word	0x00002555
    24dc:	00002555 	.word	0x00002555
    24e0:	00002555 	.word	0x00002555
    24e4:	00002555 	.word	0x00002555
    24e8:	00002555 	.word	0x00002555
    24ec:	000025d5 	.word	0x000025d5
    24f0:	00002555 	.word	0x00002555
    24f4:	00002569 	.word	0x00002569
    24f8:	00002569 	.word	0x00002569
    24fc:	000025d5 	.word	0x000025d5
    2500:	000025d5 	.word	0x000025d5
    2504:	000025d5 	.word	0x000025d5
    2508:	00002473 	.word	0x00002473
    250c:	00002569 	.word	0x00002569
    2510:	00002411 	.word	0x00002411
    2514:	00002555 	.word	0x00002555
    2518:	00002473 	.word	0x00002473
    251c:	00002555 	.word	0x00002555
    2520:	00002633 	.word	0x00002633
    2524:	00002569 	.word	0x00002569
    2528:	00002633 	.word	0x00002633
    252c:	00002555 	.word	0x00002555
    2530:	00002555 	.word	0x00002555
    2534:	0000263d 	.word	0x0000263d
    2538:	00002561 	.word	0x00002561
    253c:	00002569 	.word	0x00002569
    2540:	00002555 	.word	0x00002555
    2544:	00002555 	.word	0x00002555
    2548:	00002569 	.word	0x00002569
    254c:	00002555 	.word	0x00002555
    2550:	00002559 	.word	0x00002559
				parsing = false;
    2554:	2600      	movs	r6, #0
    2556:	e78c      	b.n	2472 <cbvprintf_package+0x136>
				align = VA_STACK_ALIGN(size_t);
    2558:	f04f 0804 	mov.w	r8, #4
				size = sizeof(size_t);
    255c:	46c1      	mov	r9, r8
				continue;
    255e:	e788      	b.n	2472 <cbvprintf_package+0x136>
				align = VA_STACK_ALIGN(ptrdiff_t);
    2560:	f04f 0804 	mov.w	r8, #4
				size = sizeof(ptrdiff_t);
    2564:	46c1      	mov	r9, r8
				continue;
    2566:	e784      	b.n	2472 <cbvprintf_package+0x136>
				if (fmt[-1] == 'l') {
    2568:	7829      	ldrb	r1, [r5, #0]
    256a:	296c      	cmp	r1, #108	; 0x6c
    256c:	d024      	beq.n	25b8 <cbvprintf_package+0x27c>
				parsing = false;
    256e:	2600      	movs	r6, #0
		buf = (void *) ROUND_UP(buf, align);
    2570:	4444      	add	r4, r8
    2572:	3c01      	subs	r4, #1
    2574:	f1c8 0100 	rsb	r1, r8, #0
    2578:	400c      	ands	r4, r1
    257a:	4620      	mov	r0, r4
		if (buf0 != NULL && BUF_OFFSET + size > len) {
    257c:	b127      	cbz	r7, 2588 <cbvprintf_package+0x24c>
    257e:	1be1      	subs	r1, r4, r7
    2580:	4449      	add	r1, r9
    2582:	458a      	cmp	sl, r1
    2584:	f0c0 8113 	bcc.w	27ae <cbvprintf_package+0x472>
		if (is_str_arg) {
    2588:	2a00      	cmp	r2, #0
    258a:	d15d      	bne.n	2648 <cbvprintf_package+0x30c>
		} else if (size == sizeof(int)) {
    258c:	f1b9 0f04 	cmp.w	r9, #4
    2590:	f000 808a 	beq.w	26a8 <cbvprintf_package+0x36c>

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
    2594:	f1b9 0f08 	cmp.w	r9, #8
    2598:	f040 8112 	bne.w	27c0 <cbvprintf_package+0x484>
			long long v = va_arg(ap, long long);
    259c:	991a      	ldr	r1, [sp, #104]	; 0x68
    259e:	3107      	adds	r1, #7
    25a0:	f021 0107 	bic.w	r1, r1, #7
    25a4:	f101 0008 	add.w	r0, r1, #8
    25a8:	901a      	str	r0, [sp, #104]	; 0x68
    25aa:	e9d1 0100 	ldrd	r0, r1, [r1]

			if (buf0 != NULL) {
    25ae:	b10f      	cbz	r7, 25b4 <cbvprintf_package+0x278>
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
    25b0:	e9c4 0100 	strd	r0, r1, [r4]
				}
			}
			buf += sizeof(long long);
    25b4:	3408      	adds	r4, #8
    25b6:	e75c      	b.n	2472 <cbvprintf_package+0x136>
					if (fmt[-2] == 'l') {
    25b8:	f813 1c02 	ldrb.w	r1, [r3, #-2]
    25bc:	296c      	cmp	r1, #108	; 0x6c
    25be:	d004      	beq.n	25ca <cbvprintf_package+0x28e>
				parsing = false;
    25c0:	2600      	movs	r6, #0
						align = VA_STACK_ALIGN(long);
    25c2:	f04f 0804 	mov.w	r8, #4
						size = sizeof(long);
    25c6:	46c1      	mov	r9, r8
    25c8:	e7d2      	b.n	2570 <cbvprintf_package+0x234>
				parsing = false;
    25ca:	2600      	movs	r6, #0
						align = VA_STACK_ALIGN(long long);
    25cc:	f04f 0808 	mov.w	r8, #8
						size = sizeof(long long);
    25d0:	46c1      	mov	r9, r8
    25d2:	e7cd      	b.n	2570 <cbvprintf_package+0x234>
				if (fmt[-1] == 'L') {
    25d4:	7829      	ldrb	r1, [r5, #0]
    25d6:	294c      	cmp	r1, #76	; 0x4c
    25d8:	d01b      	beq.n	2612 <cbvprintf_package+0x2d6>
					v.d = va_arg(ap, double);
    25da:	991a      	ldr	r1, [sp, #104]	; 0x68
    25dc:	3107      	adds	r1, #7
    25de:	f021 0107 	bic.w	r1, r1, #7
    25e2:	f101 0008 	add.w	r0, r1, #8
    25e6:	901a      	str	r0, [sp, #104]	; 0x68
    25e8:	e9d1 0100 	ldrd	r0, r1, [r1]
				buf = (void *) ROUND_UP(buf, align);
    25ec:	3407      	adds	r4, #7
    25ee:	f024 0407 	bic.w	r4, r4, #7
				if (buf0 != NULL) {
    25f2:	b147      	cbz	r7, 2606 <cbvprintf_package+0x2ca>
					if (BUF_OFFSET + size > len) {
    25f4:	1be6      	subs	r6, r4, r7
    25f6:	3608      	adds	r6, #8
    25f8:	4556      	cmp	r6, sl
    25fa:	d814      	bhi.n	2626 <cbvprintf_package+0x2ea>
					} else if (fmt[-1] == 'L') {
    25fc:	782d      	ldrb	r5, [r5, #0]
    25fe:	2d4c      	cmp	r5, #76	; 0x4c
    2600:	d014      	beq.n	262c <cbvprintf_package+0x2f0>
						*(double *)buf = v.d;
    2602:	e9c4 0100 	strd	r0, r1, [r4]
				buf += size;
    2606:	3408      	adds	r4, #8
				parsing = false;
    2608:	2600      	movs	r6, #0
				continue;
    260a:	f04f 0808 	mov.w	r8, #8
    260e:	46c1      	mov	r9, r8
    2610:	e72f      	b.n	2472 <cbvprintf_package+0x136>
					v.ld = va_arg(ap, long double);
    2612:	991a      	ldr	r1, [sp, #104]	; 0x68
    2614:	3107      	adds	r1, #7
    2616:	f021 0107 	bic.w	r1, r1, #7
    261a:	f101 0008 	add.w	r0, r1, #8
    261e:	901a      	str	r0, [sp, #104]	; 0x68
    2620:	e9d1 0100 	ldrd	r0, r1, [r1]
					size = sizeof(long double);
    2624:	e7e2      	b.n	25ec <cbvprintf_package+0x2b0>
						return -ENOSPC;
    2626:	f06f 001b 	mvn.w	r0, #27
    262a:	e0b7      	b.n	279c <cbvprintf_package+0x460>
						*(long double *)buf = v.ld;
    262c:	e9c4 0100 	strd	r0, r1, [r4]
    2630:	e7e9      	b.n	2606 <cbvprintf_package+0x2ca>
				parsing = false;
    2632:	2600      	movs	r6, #0
				align = VA_STACK_ALIGN(void *);
    2634:	f04f 0804 	mov.w	r8, #4
				size = sizeof(void *);
    2638:	46c1      	mov	r9, r8
    263a:	e799      	b.n	2570 <cbvprintf_package+0x234>
				is_str_arg = true;
    263c:	4632      	mov	r2, r6
				parsing = false;
    263e:	2600      	movs	r6, #0
				align = VA_STACK_ALIGN(void *);
    2640:	f04f 0804 	mov.w	r8, #4
				size = sizeof(void *);
    2644:	46c1      	mov	r9, r8
    2646:	e793      	b.n	2570 <cbvprintf_package+0x234>
			s = va_arg(ap, char *);
    2648:	4604      	mov	r4, r0
    264a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    264c:	1d11      	adds	r1, r2, #4
    264e:	911a      	str	r1, [sp, #104]	; 0x68
    2650:	6812      	ldr	r2, [r2, #0]
    2652:	9202      	str	r2, [sp, #8]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    2654:	9a07      	ldr	r2, [sp, #28]
			if (*++fmt == '\0') {
    2656:	461d      	mov	r5, r3
    2658:	e698      	b.n	238c <cbvprintf_package+0x50>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    265a:	4b5f      	ldr	r3, [pc, #380]	; (27d8 <cbvprintf_package+0x49c>)
    265c:	9a02      	ldr	r2, [sp, #8]
    265e:	429a      	cmp	r2, r3
    2660:	d304      	bcc.n	266c <cbvprintf_package+0x330>
    2662:	4b5e      	ldr	r3, [pc, #376]	; (27dc <cbvprintf_package+0x4a0>)
    2664:	429a      	cmp	r2, r3
    2666:	d30a      	bcc.n	267e <cbvprintf_package+0x342>
    2668:	2300      	movs	r3, #0
    266a:	e000      	b.n	266e <cbvprintf_package+0x332>
    266c:	2300      	movs	r3, #0
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    266e:	2b00      	cmp	r3, #0
    2670:	f47f ae94 	bne.w	239c <cbvprintf_package+0x60>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
    2674:	9b05      	ldr	r3, [sp, #20]
    2676:	f003 0202 	and.w	r2, r3, #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    267a:	2000      	movs	r0, #0
    267c:	e693      	b.n	23a6 <cbvprintf_package+0x6a>
    267e:	2301      	movs	r3, #1
    2680:	e7f5      	b.n	266e <cbvprintf_package+0x332>
						s_rw_cnt++;
    2682:	9b06      	ldr	r3, [sp, #24]
    2684:	3301      	adds	r3, #1
    2686:	9306      	str	r3, [sp, #24]
    2688:	e6b0      	b.n	23ec <cbvprintf_package+0xb0>
				} else if (is_ro) {
    268a:	b110      	cbz	r0, 2692 <cbvprintf_package+0x356>
					len += 1;
    268c:	f10a 0a01 	add.w	sl, sl, #1
    2690:	e6ac      	b.n	23ec <cbvprintf_package+0xb0>
				} else if (rws_pos_en) {
    2692:	9b00      	ldr	r3, [sp, #0]
    2694:	b113      	cbz	r3, 269c <cbvprintf_package+0x360>
					len += 2;
    2696:	f10a 0a02 	add.w	sl, sl, #2
    269a:	e6a7      	b.n	23ec <cbvprintf_package+0xb0>
					len += strlen(s) + 1 + 1;
    269c:	9802      	ldr	r0, [sp, #8]
    269e:	f7fe fb87 	bl	db0 <strlen>
    26a2:	1c83      	adds	r3, r0, #2
    26a4:	449a      	add	sl, r3
    26a6:	e6a1      	b.n	23ec <cbvprintf_package+0xb0>
			int v = va_arg(ap, int);
    26a8:	991a      	ldr	r1, [sp, #104]	; 0x68
    26aa:	1d08      	adds	r0, r1, #4
    26ac:	901a      	str	r0, [sp, #104]	; 0x68
    26ae:	6809      	ldr	r1, [r1, #0]
			if (buf0 != NULL) {
    26b0:	b107      	cbz	r7, 26b4 <cbvprintf_package+0x378>
				*(int *)buf = v;
    26b2:	6021      	str	r1, [r4, #0]
			buf += sizeof(int);
    26b4:	3404      	adds	r4, #4
    26b6:	e6dc      	b.n	2472 <cbvprintf_package+0x136>
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
    26b8:	1be3      	subs	r3, r4, r7
    26ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    26be:	f080 8082 	bcs.w	27c6 <cbvprintf_package+0x48a>

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
    26c2:	b197      	cbz	r7, 26ea <cbvprintf_package+0x3ae>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
	}

	/* Clear our buffer header. We made room for it initially. */
	*(char **)buf0 = NULL;
    26c4:	2200      	movs	r2, #0
    26c6:	603a      	str	r2, [r7, #0]

	/* Record end of argument list. */
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
    26c8:	089b      	lsrs	r3, r3, #2
    26ca:	703b      	strb	r3, [r7, #0]

	if (rws_pos_en) {
    26cc:	9b00      	ldr	r3, [sp, #0]
    26ce:	b183      	cbz	r3, 26f2 <cbvprintf_package+0x3b6>
		/* Strings are appended, update location counter. */
		pkg_hdr->desc.str_cnt = 0;
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    26d0:	9b06      	ldr	r3, [sp, #24]
    26d2:	70fb      	strb	r3, [r7, #3]
		/* Strings are appended, update append counter. */
		pkg_hdr->desc.str_cnt = s_rw_cnt;
		pkg_hdr->desc.rw_str_cnt = 0;
	}

	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
    26d4:	9b04      	ldr	r3, [sp, #16]
    26d6:	70bb      	strb	r3, [r7, #2]
#ifdef CONFIG_CBPRINTF_PACKAGE_HEADER_STORE_CREATION_FLAGS
	pkg_hdr->desc.pkg_flags = flags;
#endif

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
    26d8:	bb1b      	cbnz	r3, 2722 <cbvprintf_package+0x3e6>
			/* retrieve the string pointer */
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
			/* clear the in-buffer pointer (less entropy if compressed) */
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
    26da:	9d01      	ldr	r5, [sp, #4]
    26dc:	f8dd 900c 	ldr.w	r9, [sp, #12]
    26e0:	f8dd b010 	ldr.w	fp, [sp, #16]
    26e4:	f8dd 8008 	ldr.w	r8, [sp, #8]
    26e8:	e03b      	b.n	2762 <cbvprintf_package+0x426>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
    26ea:	4453      	add	r3, sl
    26ec:	f1a3 0008 	sub.w	r0, r3, #8
    26f0:	e054      	b.n	279c <cbvprintf_package+0x460>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
    26f2:	9b06      	ldr	r3, [sp, #24]
    26f4:	707b      	strb	r3, [r7, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
    26f6:	e7ed      	b.n	26d4 <cbvprintf_package+0x398>
		for (i = 0; i < s_idx; i++) {
    26f8:	3301      	adds	r3, #1
    26fa:	4298      	cmp	r0, r3
    26fc:	d9ed      	bls.n	26da <cbvprintf_package+0x39e>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    26fe:	f103 0240 	add.w	r2, r3, #64	; 0x40
    2702:	446a      	add	r2, sp
    2704:	f812 1c10 	ldrb.w	r1, [r2, #-16]
    2708:	f912 2c10 	ldrsb.w	r2, [r2, #-16]
    270c:	2a00      	cmp	r2, #0
    270e:	daf3      	bge.n	26f8 <cbvprintf_package+0x3bc>
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    2710:	f001 017f 	and.w	r1, r1, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    2714:	1be2      	subs	r2, r4, r7
    2716:	3201      	adds	r2, #1
    2718:	4592      	cmp	sl, r2
    271a:	d357      	bcc.n	27cc <cbvprintf_package+0x490>
			*buf++ = pos;
    271c:	f804 1b01 	strb.w	r1, [r4], #1
    2720:	e7ea      	b.n	26f8 <cbvprintf_package+0x3bc>
		for (i = 0; i < s_idx; i++) {
    2722:	9b01      	ldr	r3, [sp, #4]
    2724:	9803      	ldr	r0, [sp, #12]
    2726:	e7e8      	b.n	26fa <cbvprintf_package+0x3be>
		if (rws_pos_en) {
    2728:	9b00      	ldr	r3, [sp, #0]
    272a:	b33b      	cbz	r3, 277c <cbvprintf_package+0x440>
			*buf++ = str_ptr_arg[i];
    272c:	f105 0340 	add.w	r3, r5, #64	; 0x40
    2730:	446b      	add	r3, sp
    2732:	f813 3c20 	ldrb.w	r3, [r3, #-32]
    2736:	f804 3b01 	strb.w	r3, [r4], #1
			size = 0;
    273a:	9e01      	ldr	r6, [sp, #4]
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
    273c:	1be3      	subs	r3, r4, r7
    273e:	4433      	add	r3, r6
    2740:	3301      	adds	r3, #1
    2742:	459a      	cmp	sl, r3
    2744:	d345      	bcc.n	27d2 <cbvprintf_package+0x496>
			return -ENOSPC;
		}
		/* store the pointer position prefix */
		*buf++ = str_ptr_pos[i];
    2746:	f105 0340 	add.w	r3, r5, #64	; 0x40
    274a:	446b      	add	r3, sp
    274c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
    2750:	f804 3b01 	strb.w	r3, [r4], #1
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    2754:	4632      	mov	r2, r6
    2756:	4641      	mov	r1, r8
    2758:	4620      	mov	r0, r4
    275a:	f01d fb32 	bl	1fdc2 <memcpy>
		/* copy the string with its terminating '\0' */
		memcpy(buf, s, size);
		buf += size;
    275e:	4434      	add	r4, r6
	for (i = 0; i < s_idx; i++) {
    2760:	3501      	adds	r5, #1
    2762:	45a9      	cmp	r9, r5
    2764:	d919      	bls.n	279a <cbvprintf_package+0x45e>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    2766:	f1bb 0f00 	cmp.w	fp, #0
    276a:	d0dd      	beq.n	2728 <cbvprintf_package+0x3ec>
    276c:	f105 0340 	add.w	r3, r5, #64	; 0x40
    2770:	446b      	add	r3, sp
    2772:	f913 3c10 	ldrsb.w	r3, [r3, #-16]
    2776:	2b00      	cmp	r3, #0
    2778:	dad6      	bge.n	2728 <cbvprintf_package+0x3ec>
    277a:	e7f1      	b.n	2760 <cbvprintf_package+0x424>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    277c:	f105 0340 	add.w	r3, r5, #64	; 0x40
    2780:	446b      	add	r3, sp
    2782:	f813 3c10 	ldrb.w	r3, [r3, #-16]
    2786:	f857 8023 	ldr.w	r8, [r7, r3, lsl #2]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    278a:	2200      	movs	r2, #0
    278c:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
			size = strlen(s) + 1;
    2790:	4640      	mov	r0, r8
    2792:	f7fe fb0d 	bl	db0 <strlen>
    2796:	1c46      	adds	r6, r0, #1
    2798:	e7d0      	b.n	273c <cbvprintf_package+0x400>
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
    279a:	1be0      	subs	r0, r4, r7

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
    279c:	b011      	add	sp, #68	; 0x44
    279e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EFAULT;
    27a2:	f06f 000d 	mvn.w	r0, #13
    27a6:	e7f9      	b.n	279c <cbvprintf_package+0x460>
		return -ENOSPC;
    27a8:	f06f 001b 	mvn.w	r0, #27
    27ac:	e7f6      	b.n	279c <cbvprintf_package+0x460>
			return -ENOSPC;
    27ae:	f06f 001b 	mvn.w	r0, #27
    27b2:	e7f3      	b.n	279c <cbvprintf_package+0x460>
					return -EINVAL;
    27b4:	f06f 0015 	mvn.w	r0, #21
    27b8:	e7f0      	b.n	279c <cbvprintf_package+0x460>
					return -EINVAL;
    27ba:	f06f 0015 	mvn.w	r0, #21
    27be:	e7ed      	b.n	279c <cbvprintf_package+0x460>
			return -EINVAL;
    27c0:	f06f 0015 	mvn.w	r0, #21
    27c4:	e7ea      	b.n	279c <cbvprintf_package+0x460>
		return -EINVAL;
    27c6:	f06f 0015 	mvn.w	r0, #21
    27ca:	e7e7      	b.n	279c <cbvprintf_package+0x460>
				return -ENOSPC;
    27cc:	f06f 001b 	mvn.w	r0, #27
    27d0:	e7e4      	b.n	279c <cbvprintf_package+0x460>
			return -ENOSPC;
    27d2:	f06f 001b 	mvn.w	r0, #27
    27d6:	e7e1      	b.n	279c <cbvprintf_package+0x460>
    27d8:	00020704 	.word	0x00020704
    27dc:	00022a04 	.word	0x00022a04

000027e0 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
    27e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    27e4:	b097      	sub	sp, #92	; 0x5c
    27e6:	af00      	add	r7, sp, #0
    27e8:	4683      	mov	fp, r0
    27ea:	61ba      	str	r2, [r7, #24]
    27ec:	613b      	str	r3, [r7, #16]
	__ASSERT_NO_MSG(in_packaged != NULL);

	uint8_t *buf = in_packaged;
	uint32_t *buf32 = in_packaged;
	unsigned int args_size, ros_nbr, rws_nbr;
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
    27ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    27f2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    27f6:	623b      	str	r3, [r7, #32]
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
    27f8:	60f9      	str	r1, [r7, #12]
    27fa:	b151      	cbz	r1, 2812 <cbprintf_package_convert+0x32>

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
    27fc:	f89b 6002 	ldrb.w	r6, [fp, #2]
    2800:	46b1      	mov	r9, r6
	ro_cpy = ros_nbr &&
    2802:	b156      	cbz	r6, 281a <cbprintf_package_convert+0x3a>
    2804:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    2808:	f013 0f01 	tst.w	r3, #1
    280c:	d111      	bne.n	2832 <cbprintf_package_convert+0x52>
    280e:	2300      	movs	r3, #0
    2810:	e004      	b.n	281c <cbprintf_package_convert+0x3c>
	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
    2812:	f013 ff03 	bl	1661c <get_package_len>
    2816:	60f8      	str	r0, [r7, #12]
    2818:	e7f0      	b.n	27fc <cbprintf_package_convert+0x1c>
	ro_cpy = ros_nbr &&
    281a:	2300      	movs	r3, #0
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
    281c:	f89b 2003 	ldrb.w	r2, [fp, #3]
    2820:	627a      	str	r2, [r7, #36]	; 0x24
	rw_cpy = rws_nbr > 0 &&
    2822:	b142      	cbz	r2, 2836 <cbprintf_package_convert+0x56>
    2824:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    2828:	f012 0f02 	tst.w	r2, #2
    282c:	d122      	bne.n	2874 <cbprintf_package_convert+0x94>
    282e:	2200      	movs	r2, #0
    2830:	e002      	b.n	2838 <cbprintf_package_convert+0x58>
	ro_cpy = ros_nbr &&
    2832:	2301      	movs	r3, #1
    2834:	e7f2      	b.n	281c <cbprintf_package_convert+0x3c>
	rw_cpy = rws_nbr > 0 &&
    2836:	2200      	movs	r2, #0

	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
    2838:	b902      	cbnz	r2, 283c <cbprintf_package_convert+0x5c>
    283a:	b1eb      	cbz	r3, 2878 <cbprintf_package_convert+0x98>

	/* If we got here, it means that coping will be more complex and will be
	 * done with strings appending.
	 * Retrieve the size of the arg list.
	 */
	args_size = in_desc->len * sizeof(int);
    283c:	f89b 5000 	ldrb.w	r5, [fp]
    2840:	00aa      	lsls	r2, r5, #2
    2842:	60ba      	str	r2, [r7, #8]
	int out_len;

	/* Pointer to array with string locations. Array starts with read-only
	 * string locations.
	 */
	const char *fmt = *(const char **)(buf + sizeof(void *));
    2844:	f8db 2004 	ldr.w	r2, [fp, #4]
    2848:	617a      	str	r2, [r7, #20]
	uint8_t *str_pos = &buf[args_size];
    284a:	eb0b 0585 	add.w	r5, fp, r5, lsl #2
	size_t strl_cnt = 0;

	/* If null destination, just calculate output length. */
	if (cb == NULL) {
    284e:	69ba      	ldr	r2, [r7, #24]
    2850:	b1f2      	cbz	r2, 2890 <cbprintf_package_convert+0xb0>

	/* If read-only strings shall be appended to the output package copy
	 * their indexes to the local array, otherwise indicate that indexes
	 * shall remain in the output package.
	 */
	if (ro_cpy) {
    2852:	2b00      	cmp	r3, #0
    2854:	f040 8112 	bne.w	2a7c <cbprintf_package_convert+0x29c>
		scpy_cnt = ros_nbr;
		keep_cnt = 0;
		dst = cpy_str_pos;
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    2858:	f1b9 0f00 	cmp.w	r9, #0
    285c:	f000 811d 	beq.w	2a9a <cbprintf_package_convert+0x2ba>
    2860:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    2864:	f013 0f04 	tst.w	r3, #4
    2868:	f040 811b 	bne.w	2aa2 <cbprintf_package_convert+0x2c2>
		keep_cnt = ros_nbr;
		dst = keep_str_pos;
	} else {
		scpy_cnt = 0;
		keep_cnt = 0;
		dst = NULL;
    286c:	2000      	movs	r0, #0
		keep_cnt = 0;
    286e:	61f8      	str	r0, [r7, #28]
		scpy_cnt = 0;
    2870:	4606      	mov	r6, r0
    2872:	e107      	b.n	2a84 <cbprintf_package_convert+0x2a4>
	rw_cpy = rws_nbr > 0 &&
    2874:	2201      	movs	r2, #1
    2876:	e7df      	b.n	2838 <cbprintf_package_convert+0x58>
		if (cb) {
    2878:	69bb      	ldr	r3, [r7, #24]
    287a:	b11b      	cbz	r3, 2884 <cbprintf_package_convert+0xa4>
			cb(in_packaged, in_len, ctx);
    287c:	693a      	ldr	r2, [r7, #16]
    287e:	68f9      	ldr	r1, [r7, #12]
    2880:	4658      	mov	r0, fp
    2882:	4798      	blx	r3
		return in_len;
    2884:	68fc      	ldr	r4, [r7, #12]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
    2886:	4620      	mov	r0, r4
    2888:	375c      	adds	r7, #92	; 0x5c
    288a:	46bd      	mov	sp, r7
    288c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		out_len = (int)in_len;
    2890:	68fc      	ldr	r4, [r7, #12]
		if (ro_cpy) {
    2892:	bb2b      	cbnz	r3, 28e0 <cbprintf_package_convert+0x100>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    2894:	f1b9 0f00 	cmp.w	r9, #0
    2898:	d038      	beq.n	290c <cbprintf_package_convert+0x12c>
    289a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    289e:	f013 0304 	ands.w	r3, r3, #4
    28a2:	613b      	str	r3, [r7, #16]
    28a4:	d027      	beq.n	28f6 <cbprintf_package_convert+0x116>
				str_pos += ros_nbr;
    28a6:	444d      	add	r5, r9
	size_t strl_cnt = 0;
    28a8:	2300      	movs	r3, #0
    28aa:	613b      	str	r3, [r7, #16]
    28ac:	e023      	b.n	28f6 <cbprintf_package_convert+0x116>
				out_len += len;
    28ae:	4404      	add	r4, r0
				str_pos++;
    28b0:	3501      	adds	r5, #1
			for (int i = 0; i < ros_nbr; i++) {
    28b2:	3601      	adds	r6, #1
    28b4:	454e      	cmp	r6, r9
    28b6:	d21a      	bcs.n	28ee <cbprintf_package_convert+0x10e>
				const char *str = *(const char **)&buf32[*str_pos];
    28b8:	782a      	ldrb	r2, [r5, #0]
				int len = append_string(cb, NULL, str, 0);
    28ba:	2300      	movs	r3, #0
    28bc:	f85b 2022 	ldr.w	r2, [fp, r2, lsl #2]
    28c0:	4619      	mov	r1, r3
    28c2:	69b8      	ldr	r0, [r7, #24]
    28c4:	f013 febf 	bl	16646 <append_string>
				if (strl && strl_cnt < strl_len) {
    28c8:	f1ba 0f00 	cmp.w	sl, #0
    28cc:	d0ef      	beq.n	28ae <cbprintf_package_convert+0xce>
    28ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
    28d2:	4598      	cmp	r8, r3
    28d4:	d2eb      	bcs.n	28ae <cbprintf_package_convert+0xce>
					strl[strl_cnt++] = (uint16_t)len;
    28d6:	f82a 0018 	strh.w	r0, [sl, r8, lsl #1]
    28da:	f108 0801 	add.w	r8, r8, #1
    28de:	e7e6      	b.n	28ae <cbprintf_package_convert+0xce>
			for (int i = 0; i < ros_nbr; i++) {
    28e0:	2600      	movs	r6, #0
	size_t strl_cnt = 0;
    28e2:	46b0      	mov	r8, r6
    28e4:	f8c7 a01c 	str.w	sl, [r7, #28]
    28e8:	f8d7 a084 	ldr.w	sl, [r7, #132]	; 0x84
    28ec:	e7e2      	b.n	28b4 <cbprintf_package_convert+0xd4>
    28ee:	f8c7 8010 	str.w	r8, [r7, #16]
    28f2:	f8d7 a01c 	ldr.w	sl, [r7, #28]
		bool drop_ro_str_pos = !(flags &
    28f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    28fa:	f003 0305 	and.w	r3, r3, #5
    28fe:	60fb      	str	r3, [r7, #12]
		for (int i = 0; i < rws_nbr; i++) {
    2900:	f04f 0800 	mov.w	r8, #0
    2904:	46a1      	mov	r9, r4
    2906:	f8c7 b01c 	str.w	fp, [r7, #28]
    290a:	e0a1      	b.n	2a50 <cbprintf_package_convert+0x270>
	size_t strl_cnt = 0;
    290c:	f8c7 9010 	str.w	r9, [r7, #16]
    2910:	e7f1      	b.n	28f6 <cbprintf_package_convert+0x116>
    2912:	2500      	movs	r5, #0
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    2914:	6a3b      	ldr	r3, [r7, #32]
    2916:	b97b      	cbnz	r3, 2938 <cbprintf_package_convert+0x158>
			if (is_ro) {
    2918:	2d00      	cmp	r5, #0
    291a:	d07b      	beq.n	2a14 <cbprintf_package_convert+0x234>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    291c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    2920:	f013 0f01 	tst.w	r3, #1
    2924:	d17b      	bne.n	2a1e <cbprintf_package_convert+0x23e>
					out_len -= drop_ro_str_pos ? 2 : 1;
    2926:	68fb      	ldr	r3, [r7, #12]
    2928:	2b00      	cmp	r3, #0
    292a:	d171      	bne.n	2a10 <cbprintf_package_convert+0x230>
    292c:	2302      	movs	r3, #2
    292e:	eba9 0903 	sub.w	r9, r9, r3
    2932:	e08a      	b.n	2a4a <cbprintf_package_convert+0x26a>
    2934:	2501      	movs	r5, #1
    2936:	e7ed      	b.n	2914 <cbprintf_package_convert+0x134>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    2938:	4659      	mov	r1, fp
    293a:	6978      	ldr	r0, [r7, #20]
    293c:	f013 feca 	bl	166d4 <is_ptr>
    2940:	2800      	cmp	r0, #0
    2942:	d0e9      	beq.n	2918 <cbprintf_package_convert+0x138>
				LOG_WRN("(unsigned) char * used for %%p argument. "
    2944:	466c      	mov	r4, sp
    2946:	2300      	movs	r3, #0
    2948:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    294c:	2302      	movs	r3, #2
    294e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    2952:	b08a      	sub	sp, #40	; 0x28
    2954:	4669      	mov	r1, sp
    2956:	f111 0210 	adds.w	r2, r1, #16
    295a:	d039      	beq.n	29d0 <cbprintf_package_convert+0x1f0>
    295c:	2512      	movs	r5, #18
    295e:	b11a      	cbz	r2, 2968 <cbprintf_package_convert+0x188>
    2960:	2d04      	cmp	r5, #4
    2962:	dd01      	ble.n	2968 <cbprintf_package_convert+0x188>
    2964:	4bb3      	ldr	r3, [pc, #716]	; (2c34 <cbprintf_package_convert+0x454>)
    2966:	614b      	str	r3, [r1, #20]
    2968:	2300      	movs	r3, #0
    296a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    296e:	2302      	movs	r3, #2
    2970:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    2974:	bb7a      	cbnz	r2, 29d6 <cbprintf_package_convert+0x1f6>
    2976:	2d11      	cmp	r5, #17
    2978:	dd47      	ble.n	2a0a <cbprintf_package_convert+0x22a>
    297a:	2312      	movs	r3, #18
    297c:	b162      	cbz	r2, 2998 <cbprintf_package_convert+0x1b8>
    297e:	2004      	movs	r0, #4
    2980:	f887 002c 	strb.w	r0, [r7, #44]	; 0x2c
    2984:	2000      	movs	r0, #0
    2986:	f887 002d 	strb.w	r0, [r7, #45]	; 0x2d
    298a:	f887 002e 	strb.w	r0, [r7, #46]	; 0x2e
    298e:	2001      	movs	r0, #1
    2990:	f887 002f 	strb.w	r0, [r7, #47]	; 0x2f
    2994:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    2996:	6108      	str	r0, [r1, #16]
    2998:	f36f 0a00 	bfc	sl, #0, #1
    299c:	f36f 0a41 	bfc	sl, #1, #1
    29a0:	f36f 0a82 	bfc	sl, #2, #1
    29a4:	f36f 0ac5 	bfc	sl, #3, #3
    29a8:	2102      	movs	r1, #2
    29aa:	f361 1a88 	bfi	sl, r1, #6, #3
    29ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
    29b2:	f363 2a52 	bfi	sl, r3, #9, #10
    29b6:	f36f 4ade 	bfc	sl, #19, #12
    29ba:	f36f 7adf 	bfc	sl, #31, #1
    29be:	2300      	movs	r3, #0
    29c0:	4651      	mov	r1, sl
    29c2:	489d      	ldr	r0, [pc, #628]	; (2c38 <cbprintf_package_convert+0x458>)
    29c4:	f015 f832 	bl	17a2c <z_impl_z_log_msg_static_create>
    29c8:	46a5      	mov	sp, r4
				out_len -= 2;
    29ca:	f1a9 0902 	sub.w	r9, r9, #2
				continue;
    29ce:	e03c      	b.n	2a4a <cbprintf_package_convert+0x26a>
				LOG_WRN("(unsigned) char * used for %%p argument. "
    29d0:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    29d4:	e7c3      	b.n	295e <cbprintf_package_convert+0x17e>
    29d6:	462b      	mov	r3, r5
    29d8:	2d08      	cmp	r5, #8
    29da:	dd01      	ble.n	29e0 <cbprintf_package_convert+0x200>
    29dc:	6978      	ldr	r0, [r7, #20]
    29de:	6188      	str	r0, [r1, #24]
    29e0:	2b0c      	cmp	r3, #12
    29e2:	dd01      	ble.n	29e8 <cbprintf_package_convert+0x208>
    29e4:	f8c1 b01c 	str.w	fp, [r1, #28]
    29e8:	f101 0320 	add.w	r3, r1, #32
    29ec:	2000      	movs	r0, #0
    29ee:	e009      	b.n	2a04 <cbprintf_package_convert+0x224>
    29f0:	f100 0c30 	add.w	ip, r0, #48	; 0x30
    29f4:	f107 0e28 	add.w	lr, r7, #40	; 0x28
    29f8:	44f4      	add	ip, lr
    29fa:	f81c cc30 	ldrb.w	ip, [ip, #-48]
    29fe:	f803 cb01 	strb.w	ip, [r3], #1
    2a02:	3001      	adds	r0, #1
    2a04:	2801      	cmp	r0, #1
    2a06:	d9f3      	bls.n	29f0 <cbprintf_package_convert+0x210>
    2a08:	e7b5      	b.n	2976 <cbprintf_package_convert+0x196>
    2a0a:	f06f 031b 	mvn.w	r3, #27
    2a0e:	e7b5      	b.n	297c <cbprintf_package_convert+0x19c>
					out_len -= drop_ro_str_pos ? 2 : 1;
    2a10:	2301      	movs	r3, #1
    2a12:	e78c      	b.n	292e <cbprintf_package_convert+0x14e>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    2a14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    2a18:	f013 0f02 	tst.w	r3, #2
    2a1c:	d015      	beq.n	2a4a <cbprintf_package_convert+0x26a>
				len = append_string(cb, NULL, str, 0);
    2a1e:	2300      	movs	r3, #0
    2a20:	4622      	mov	r2, r4
    2a22:	4619      	mov	r1, r3
    2a24:	69b8      	ldr	r0, [r7, #24]
    2a26:	f013 fe0e 	bl	16646 <append_string>
				if (strl && strl_cnt < strl_len) {
    2a2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    2a2e:	b153      	cbz	r3, 2a46 <cbprintf_package_convert+0x266>
    2a30:	693b      	ldr	r3, [r7, #16]
    2a32:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
    2a36:	4293      	cmp	r3, r2
    2a38:	d205      	bcs.n	2a46 <cbprintf_package_convert+0x266>
					strl[strl_cnt++] = (uint16_t)len;
    2a3a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
    2a3e:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
    2a42:	3301      	adds	r3, #1
    2a44:	613b      	str	r3, [r7, #16]
				out_len += (len - 1);
    2a46:	3801      	subs	r0, #1
    2a48:	4481      	add	r9, r0
		for (int i = 0; i < rws_nbr; i++) {
    2a4a:	f108 0801 	add.w	r8, r8, #1
			uint8_t arg_pos = *str_pos++;
    2a4e:	4635      	mov	r5, r6
		for (int i = 0; i < rws_nbr; i++) {
    2a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2a52:	4598      	cmp	r8, r3
    2a54:	d210      	bcs.n	2a78 <cbprintf_package_convert+0x298>
			uint8_t arg_idx = *str_pos++;
    2a56:	462e      	mov	r6, r5
    2a58:	f816 bb02 	ldrb.w	fp, [r6], #2
			uint8_t arg_pos = *str_pos++;
    2a5c:	786b      	ldrb	r3, [r5, #1]
			const char *str = *(const char **)&buf32[arg_pos];
    2a5e:	69fa      	ldr	r2, [r7, #28]
    2a60:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    2a64:	4b75      	ldr	r3, [pc, #468]	; (2c3c <cbprintf_package_convert+0x45c>)
    2a66:	429c      	cmp	r4, r3
    2a68:	f4ff af53 	bcc.w	2912 <cbprintf_package_convert+0x132>
    2a6c:	4b74      	ldr	r3, [pc, #464]	; (2c40 <cbprintf_package_convert+0x460>)
    2a6e:	429c      	cmp	r4, r3
    2a70:	f4ff af60 	bcc.w	2934 <cbprintf_package_convert+0x154>
    2a74:	2500      	movs	r5, #0
    2a76:	e74d      	b.n	2914 <cbprintf_package_convert+0x134>
    2a78:	464c      	mov	r4, r9
    2a7a:	e704      	b.n	2886 <cbprintf_package_convert+0xa6>
		dst = cpy_str_pos;
    2a7c:	f107 0044 	add.w	r0, r7, #68	; 0x44
		keep_cnt = 0;
    2a80:	2300      	movs	r3, #0
    2a82:	61fb      	str	r3, [r7, #28]
	if (dst) {
    2a84:	b118      	cbz	r0, 2a8e <cbprintf_package_convert+0x2ae>
    2a86:	464a      	mov	r2, r9
    2a88:	4629      	mov	r1, r5
    2a8a:	f01d f99a 	bl	1fdc2 <memcpy>
	str_pos += ros_nbr;
    2a8e:	444d      	add	r5, r9
	for (int i = 0; i < rws_nbr; i++) {
    2a90:	f04f 0800 	mov.w	r8, #0
    2a94:	f8c7 9004 	str.w	r9, [r7, #4]
    2a98:	e01e      	b.n	2ad8 <cbprintf_package_convert+0x2f8>
		dst = NULL;
    2a9a:	2000      	movs	r0, #0
		keep_cnt = 0;
    2a9c:	61f8      	str	r0, [r7, #28]
		scpy_cnt = 0;
    2a9e:	4606      	mov	r6, r0
    2aa0:	e7f0      	b.n	2a84 <cbprintf_package_convert+0x2a4>
		keep_cnt = ros_nbr;
    2aa2:	61fe      	str	r6, [r7, #28]
		dst = keep_str_pos;
    2aa4:	f107 0034 	add.w	r0, r7, #52	; 0x34
		scpy_cnt = 0;
    2aa8:	2600      	movs	r6, #0
    2aaa:	e7eb      	b.n	2a84 <cbprintf_package_convert+0x2a4>
    2aac:	2500      	movs	r5, #0
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    2aae:	6a3b      	ldr	r3, [r7, #32]
    2ab0:	bb33      	cbnz	r3, 2b00 <cbprintf_package_convert+0x320>
		if (is_ro) {
    2ab2:	2d00      	cmp	r5, #0
    2ab4:	d03b      	beq.n	2b2e <cbprintf_package_convert+0x34e>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    2ab6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    2aba:	f013 0f01 	tst.w	r3, #1
    2abe:	d026      	beq.n	2b0e <cbprintf_package_convert+0x32e>
				cpy_str_pos[scpy_cnt++] = arg_pos;
    2ac0:	1c73      	adds	r3, r6, #1
    2ac2:	f106 0230 	add.w	r2, r6, #48	; 0x30
    2ac6:	f107 0128 	add.w	r1, r7, #40	; 0x28
    2aca:	1856      	adds	r6, r2, r1
    2acc:	f806 9c14 	strb.w	r9, [r6, #-20]
    2ad0:	b2de      	uxtb	r6, r3
	for (int i = 0; i < rws_nbr; i++) {
    2ad2:	f108 0801 	add.w	r8, r8, #1
		uint8_t arg_pos = *str_pos++;
    2ad6:	4625      	mov	r5, r4
	for (int i = 0; i < rws_nbr; i++) {
    2ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2ada:	4598      	cmp	r8, r3
    2adc:	d24a      	bcs.n	2b74 <cbprintf_package_convert+0x394>
		uint8_t arg_idx = *str_pos++;
    2ade:	462c      	mov	r4, r5
    2ae0:	f814 ab02 	ldrb.w	sl, [r4], #2
		uint8_t arg_pos = *str_pos++;
    2ae4:	f895 9001 	ldrb.w	r9, [r5, #1]
		const char *str = *(const char **)&buf32[arg_pos];
    2ae8:	f85b 3029 	ldr.w	r3, [fp, r9, lsl #2]
    2aec:	4a53      	ldr	r2, [pc, #332]	; (2c3c <cbprintf_package_convert+0x45c>)
    2aee:	4293      	cmp	r3, r2
    2af0:	d3dc      	bcc.n	2aac <cbprintf_package_convert+0x2cc>
    2af2:	4a53      	ldr	r2, [pc, #332]	; (2c40 <cbprintf_package_convert+0x460>)
    2af4:	4293      	cmp	r3, r2
    2af6:	d301      	bcc.n	2afc <cbprintf_package_convert+0x31c>
    2af8:	2500      	movs	r5, #0
    2afa:	e7d8      	b.n	2aae <cbprintf_package_convert+0x2ce>
    2afc:	2501      	movs	r5, #1
    2afe:	e7d6      	b.n	2aae <cbprintf_package_convert+0x2ce>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    2b00:	4651      	mov	r1, sl
    2b02:	6978      	ldr	r0, [r7, #20]
    2b04:	f013 fde6 	bl	166d4 <is_ptr>
    2b08:	2800      	cmp	r0, #0
    2b0a:	d0d2      	beq.n	2ab2 <cbprintf_package_convert+0x2d2>
    2b0c:	e7e1      	b.n	2ad2 <cbprintf_package_convert+0x2f2>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    2b0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    2b12:	f013 0f04 	tst.w	r3, #4
    2b16:	d0dc      	beq.n	2ad2 <cbprintf_package_convert+0x2f2>
				keep_str_pos[keep_cnt++] = arg_pos;
    2b18:	69fa      	ldr	r2, [r7, #28]
    2b1a:	1c53      	adds	r3, r2, #1
    2b1c:	3230      	adds	r2, #48	; 0x30
    2b1e:	f107 0128 	add.w	r1, r7, #40	; 0x28
    2b22:	440a      	add	r2, r1
    2b24:	f802 9c24 	strb.w	r9, [r2, #-36]
    2b28:	b2db      	uxtb	r3, r3
    2b2a:	61fb      	str	r3, [r7, #28]
    2b2c:	e7d1      	b.n	2ad2 <cbprintf_package_convert+0x2f2>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    2b2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    2b32:	f013 0f02 	tst.w	r3, #2
    2b36:	d009      	beq.n	2b4c <cbprintf_package_convert+0x36c>
				cpy_str_pos[scpy_cnt++] = arg_pos;
    2b38:	1c73      	adds	r3, r6, #1
    2b3a:	f106 0230 	add.w	r2, r6, #48	; 0x30
    2b3e:	f107 0128 	add.w	r1, r7, #40	; 0x28
    2b42:	1856      	adds	r6, r2, r1
    2b44:	f806 9c14 	strb.w	r9, [r6, #-20]
    2b48:	b2de      	uxtb	r6, r3
    2b4a:	e7c2      	b.n	2ad2 <cbprintf_package_convert+0x2f2>
				keep_str_pos[keep_cnt++] = arg_idx;
    2b4c:	69f8      	ldr	r0, [r7, #28]
    2b4e:	1c43      	adds	r3, r0, #1
    2b50:	f100 0130 	add.w	r1, r0, #48	; 0x30
    2b54:	f107 0228 	add.w	r2, r7, #40	; 0x28
    2b58:	188a      	adds	r2, r1, r2
    2b5a:	f802 ac24 	strb.w	sl, [r2, #-36]
				keep_str_pos[keep_cnt++] = arg_pos;
    2b5e:	4602      	mov	r2, r0
    2b60:	3202      	adds	r2, #2
    2b62:	b2d2      	uxtb	r2, r2
    2b64:	61fa      	str	r2, [r7, #28]
    2b66:	f107 0258 	add.w	r2, r7, #88	; 0x58
    2b6a:	fa52 f383 	uxtab	r3, r2, r3
    2b6e:	f803 9c24 	strb.w	r9, [r3, #-36]
    2b72:	e7ae      	b.n	2ad2 <cbprintf_package_convert+0x2f2>
	out_desc.len = in_desc->len;
    2b74:	f8d7 9004 	ldr.w	r9, [r7, #4]
    2b78:	f89b 3000 	ldrb.w	r3, [fp]
    2b7c:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    2b80:	f89b 3001 	ldrb.w	r3, [fp, #1]
    2b84:	4433      	add	r3, r6
    2b86:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    2b8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    2b8e:	f013 0f02 	tst.w	r3, #2
    2b92:	d10e      	bne.n	2bb2 <cbprintf_package_convert+0x3d2>
    2b94:	69fb      	ldr	r3, [r7, #28]
    2b96:	f3c3 0347 	ubfx	r3, r3, #1, #8
    2b9a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    2b9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    2ba2:	f013 0f01 	tst.w	r3, #1
    2ba6:	d106      	bne.n	2bb6 <cbprintf_package_convert+0x3d6>
    2ba8:	f013 0f04 	tst.w	r3, #4
    2bac:	d13f      	bne.n	2c2e <cbprintf_package_convert+0x44e>
    2bae:	2300      	movs	r3, #0
    2bb0:	e002      	b.n	2bb8 <cbprintf_package_convert+0x3d8>
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    2bb2:	2300      	movs	r3, #0
    2bb4:	e7f1      	b.n	2b9a <cbprintf_package_convert+0x3ba>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    2bb6:	2300      	movs	r3, #0
    2bb8:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	struct cbprintf_package_desc in_desc_backup = *in_desc;
    2bbc:	f8db 0000 	ldr.w	r0, [fp]
    2bc0:	6338      	str	r0, [r7, #48]	; 0x30
	*in_desc = out_desc;
    2bc2:	6d78      	ldr	r0, [r7, #84]	; 0x54
    2bc4:	f8cb 0000 	str.w	r0, [fp]
	rv = cb(in_packaged, args_size, ctx);
    2bc8:	f8d7 8010 	ldr.w	r8, [r7, #16]
    2bcc:	4642      	mov	r2, r8
    2bce:	68b9      	ldr	r1, [r7, #8]
    2bd0:	4658      	mov	r0, fp
    2bd2:	f8d7 a018 	ldr.w	sl, [r7, #24]
    2bd6:	47d0      	blx	sl
	if (rv < 0) {
    2bd8:	1e04      	subs	r4, r0, #0
    2bda:	f6ff ae54 	blt.w	2886 <cbprintf_package_convert+0xa6>
	*in_desc = in_desc_backup;
    2bde:	6b38      	ldr	r0, [r7, #48]	; 0x30
    2be0:	f8cb 0000 	str.w	r0, [fp]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    2be4:	f8c7 8010 	str.w	r8, [r7, #16]
    2be8:	4642      	mov	r2, r8
    2bea:	69f9      	ldr	r1, [r7, #28]
    2bec:	f107 0034 	add.w	r0, r7, #52	; 0x34
    2bf0:	47d0      	blx	sl
	if (rv < 0) {
    2bf2:	2800      	cmp	r0, #0
    2bf4:	db57      	blt.n	2ca6 <cbprintf_package_convert+0x4c6>
	out_len += rv;
    2bf6:	eb04 0800 	add.w	r8, r4, r0
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    2bfa:	68b9      	ldr	r1, [r7, #8]
    2bfc:	4449      	add	r1, r9
    2bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2c00:	eb01 0143 	add.w	r1, r1, r3, lsl #1
	rv = cb(str_pos, strs_len, ctx);
    2c04:	f8d7 9010 	ldr.w	r9, [r7, #16]
    2c08:	464a      	mov	r2, r9
    2c0a:	68fb      	ldr	r3, [r7, #12]
    2c0c:	1a59      	subs	r1, r3, r1
    2c0e:	4628      	mov	r0, r5
    2c10:	47d0      	blx	sl
	if (rv < 0) {
    2c12:	1e04      	subs	r4, r0, #0
    2c14:	f6ff ae37 	blt.w	2886 <cbprintf_package_convert+0xa6>
	out_len += rv;
    2c18:	eb08 0504 	add.w	r5, r8, r4
	for (int i = 0; i < scpy_cnt; i++) {
    2c1c:	f04f 0800 	mov.w	r8, #0
    2c20:	627e      	str	r6, [r7, #36]	; 0x24
    2c22:	f8c7 b020 	str.w	fp, [r7, #32]
    2c26:	4656      	mov	r6, sl
    2c28:	f8d7 b084 	ldr.w	fp, [r7, #132]	; 0x84
    2c2c:	e01f      	b.n	2c6e <cbprintf_package_convert+0x48e>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    2c2e:	69fb      	ldr	r3, [r7, #28]
    2c30:	e7c2      	b.n	2bb8 <cbprintf_package_convert+0x3d8>
    2c32:	bf00      	nop
    2c34:	00020e40 	.word	0x00020e40
    2c38:	00020a58 	.word	0x00020a58
    2c3c:	00020704 	.word	0x00020704
    2c40:	00022a04 	.word	0x00022a04
		uint16_t str_len = strl ? strl[i] : 0;
    2c44:	f04f 0a00 	mov.w	sl, #0
		rv = cb(&loc, 1, ctx);
    2c48:	464a      	mov	r2, r9
    2c4a:	2101      	movs	r1, #1
    2c4c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
    2c50:	47b0      	blx	r6
		if (rv < 0) {
    2c52:	2800      	cmp	r0, #0
    2c54:	db29      	blt.n	2caa <cbprintf_package_convert+0x4ca>
		out_len += rv;
    2c56:	4405      	add	r5, r0
		rv = append_string(cb, ctx, str, str_len);
    2c58:	4653      	mov	r3, sl
    2c5a:	4622      	mov	r2, r4
    2c5c:	4649      	mov	r1, r9
    2c5e:	4630      	mov	r0, r6
    2c60:	f013 fcf1 	bl	16646 <append_string>
		if (rv < 0) {
    2c64:	2800      	cmp	r0, #0
    2c66:	db22      	blt.n	2cae <cbprintf_package_convert+0x4ce>
		out_len += rv;
    2c68:	4405      	add	r5, r0
	for (int i = 0; i < scpy_cnt; i++) {
    2c6a:	f108 0801 	add.w	r8, r8, #1
    2c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2c70:	4598      	cmp	r8, r3
    2c72:	da11      	bge.n	2c98 <cbprintf_package_convert+0x4b8>
		uint8_t loc = cpy_str_pos[i];
    2c74:	f108 0330 	add.w	r3, r8, #48	; 0x30
    2c78:	f107 0228 	add.w	r2, r7, #40	; 0x28
    2c7c:	4413      	add	r3, r2
    2c7e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
    2c82:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		const char *str = *(const char **)&buf32[loc];
    2c86:	6a3a      	ldr	r2, [r7, #32]
    2c88:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
    2c8c:	f1bb 0f00 	cmp.w	fp, #0
    2c90:	d0d8      	beq.n	2c44 <cbprintf_package_convert+0x464>
    2c92:	f83b a018 	ldrh.w	sl, [fp, r8, lsl #1]
    2c96:	e7d7      	b.n	2c48 <cbprintf_package_convert+0x468>
	(void)cb(NULL, 0, ctx);
    2c98:	693a      	ldr	r2, [r7, #16]
    2c9a:	2100      	movs	r1, #0
    2c9c:	4608      	mov	r0, r1
    2c9e:	69bb      	ldr	r3, [r7, #24]
    2ca0:	4798      	blx	r3
	return out_len;
    2ca2:	462c      	mov	r4, r5
    2ca4:	e5ef      	b.n	2886 <cbprintf_package_convert+0xa6>
		return rv;
    2ca6:	4604      	mov	r4, r0
    2ca8:	e5ed      	b.n	2886 <cbprintf_package_convert+0xa6>
    2caa:	4604      	mov	r4, r0
    2cac:	e5eb      	b.n	2886 <cbprintf_package_convert+0xa6>
    2cae:	4604      	mov	r4, r0
    2cb0:	e5e9      	b.n	2886 <cbprintf_package_convert+0xa6>
    2cb2:	bf00      	nop

00002cb4 <_check_fd>:
	errno = ENFILE;
	return -1;
}

static int _check_fd(int fd)
{
    2cb4:	b508      	push	{r3, lr}
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
    2cb6:	2803      	cmp	r0, #3
    2cb8:	d80a      	bhi.n	2cd0 <_check_fd+0x1c>
		return -1;
	}

	fd = k_array_index_sanitize(fd, ARRAY_SIZE(fdtable));

	if (!atomic_get(&fdtable[fd].refcount)) {
    2cba:	0140      	lsls	r0, r0, #5
    2cbc:	3008      	adds	r0, #8
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2cbe:	f3bf 8f5b 	dmb	ish
    2cc2:	4b0a      	ldr	r3, [pc, #40]	; (2cec <_check_fd+0x38>)
    2cc4:	581b      	ldr	r3, [r3, r0]
    2cc6:	f3bf 8f5b 	dmb	ish
    2cca:	b143      	cbz	r3, 2cde <_check_fd+0x2a>
		errno = EBADF;
		return -1;
	}

	return 0;
    2ccc:	2000      	movs	r0, #0
}
    2cce:	bd08      	pop	{r3, pc}
		errno = EBADF;
    2cd0:	f016 f9fa 	bl	190c8 <__errno>
    2cd4:	2309      	movs	r3, #9
    2cd6:	6003      	str	r3, [r0, #0]
		return -1;
    2cd8:	f04f 30ff 	mov.w	r0, #4294967295
    2cdc:	e7f7      	b.n	2cce <_check_fd+0x1a>
		errno = EBADF;
    2cde:	f016 f9f3 	bl	190c8 <__errno>
    2ce2:	2309      	movs	r3, #9
    2ce4:	6003      	str	r3, [r0, #0]
		return -1;
    2ce6:	f04f 30ff 	mov.w	r0, #4294967295
    2cea:	e7f0      	b.n	2cce <_check_fd+0x1a>
    2cec:	20001f50 	.word	0x20001f50

00002cf0 <_find_fd_entry>:
{
    2cf0:	b508      	push	{r3, lr}
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
    2cf2:	2000      	movs	r0, #0
    2cf4:	2803      	cmp	r0, #3
    2cf6:	d80a      	bhi.n	2d0e <_find_fd_entry+0x1e>
		if (!atomic_get(&fdtable[fd].refcount)) {
    2cf8:	0143      	lsls	r3, r0, #5
    2cfa:	3308      	adds	r3, #8
    2cfc:	f3bf 8f5b 	dmb	ish
    2d00:	4a06      	ldr	r2, [pc, #24]	; (2d1c <_find_fd_entry+0x2c>)
    2d02:	58d3      	ldr	r3, [r2, r3]
    2d04:	f3bf 8f5b 	dmb	ish
    2d08:	b13b      	cbz	r3, 2d1a <_find_fd_entry+0x2a>
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
    2d0a:	3001      	adds	r0, #1
    2d0c:	e7f2      	b.n	2cf4 <_find_fd_entry+0x4>
	errno = ENFILE;
    2d0e:	f016 f9db 	bl	190c8 <__errno>
    2d12:	2317      	movs	r3, #23
    2d14:	6003      	str	r3, [r0, #0]
	return -1;
    2d16:	f04f 30ff 	mov.w	r0, #4294967295
}
    2d1a:	bd08      	pop	{r3, pc}
    2d1c:	20001f50 	.word	0x20001f50

00002d20 <z_fd_unref>:
{
    2d20:	b500      	push	{lr}
    2d22:	4603      	mov	r3, r0
		old_rc = atomic_get(&fdtable[fd].refcount);
    2d24:	015a      	lsls	r2, r3, #5
    2d26:	3208      	adds	r2, #8
    2d28:	4912      	ldr	r1, [pc, #72]	; (2d74 <z_fd_unref+0x54>)
    2d2a:	eb02 0c01 	add.w	ip, r2, r1
    2d2e:	f3bf 8f5b 	dmb	ish
    2d32:	588a      	ldr	r2, [r1, r2]
    2d34:	f3bf 8f5b 	dmb	ish
		if (!old_rc) {
    2d38:	b1ca      	cbz	r2, 2d6e <z_fd_unref+0x4e>
	} while (!atomic_cas(&fdtable[fd].refcount, old_rc, old_rc - 1));
    2d3a:	1e50      	subs	r0, r2, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    2d3c:	f3bf 8f5b 	dmb	ish
    2d40:	e85c 1f00 	ldrex	r1, [ip]
    2d44:	4291      	cmp	r1, r2
    2d46:	d104      	bne.n	2d52 <z_fd_unref+0x32>
    2d48:	e84c 0e00 	strex	lr, r0, [ip]
    2d4c:	f1be 0f00 	cmp.w	lr, #0
    2d50:	d1f6      	bne.n	2d40 <z_fd_unref+0x20>
    2d52:	f3bf 8f5b 	dmb	ish
    2d56:	d1e5      	bne.n	2d24 <z_fd_unref+0x4>
	if (old_rc != 1) {
    2d58:	2a01      	cmp	r2, #1
    2d5a:	d106      	bne.n	2d6a <z_fd_unref+0x4a>
	fdtable[fd].obj = NULL;
    2d5c:	4a05      	ldr	r2, [pc, #20]	; (2d74 <z_fd_unref+0x54>)
    2d5e:	0159      	lsls	r1, r3, #5
    2d60:	eb02 1343 	add.w	r3, r2, r3, lsl #5
    2d64:	2000      	movs	r0, #0
    2d66:	5050      	str	r0, [r2, r1]
	fdtable[fd].vtable = NULL;
    2d68:	6058      	str	r0, [r3, #4]
}
    2d6a:	f85d fb04 	ldr.w	pc, [sp], #4
			return 0;
    2d6e:	4610      	mov	r0, r2
    2d70:	e7fb      	b.n	2d6a <z_fd_unref+0x4a>
    2d72:	bf00      	nop
    2d74:	20001f50 	.word	0x20001f50

00002d78 <z_fd_ref>:
	return atomic_inc(&fdtable[fd].refcount) + 1;
    2d78:	0143      	lsls	r3, r0, #5
    2d7a:	3308      	adds	r3, #8
    2d7c:	4a06      	ldr	r2, [pc, #24]	; (2d98 <z_fd_ref+0x20>)
    2d7e:	4413      	add	r3, r2
}
    2d80:	f3bf 8f5b 	dmb	ish
    2d84:	e853 0f00 	ldrex	r0, [r3]
    2d88:	3001      	adds	r0, #1
    2d8a:	e843 0200 	strex	r2, r0, [r3]
    2d8e:	2a00      	cmp	r2, #0
    2d90:	d1f8      	bne.n	2d84 <z_fd_ref+0xc>
    2d92:	f3bf 8f5b 	dmb	ish
    2d96:	4770      	bx	lr
    2d98:	20001f50 	.word	0x20001f50

00002d9c <z_get_fd_obj_and_vtable>:
	return entry->obj;
}

void *z_get_fd_obj_and_vtable(int fd, const struct fd_op_vtable **vtable,
			      struct k_mutex **lock)
{
    2d9c:	b570      	push	{r4, r5, r6, lr}
    2d9e:	4604      	mov	r4, r0
    2da0:	460e      	mov	r6, r1
    2da2:	4615      	mov	r5, r2
	struct fd_entry *entry;

	if (_check_fd(fd) < 0) {
    2da4:	f7ff ff86 	bl	2cb4 <_check_fd>
    2da8:	2800      	cmp	r0, #0
    2daa:	db0f      	blt.n	2dcc <z_get_fd_obj_and_vtable+0x30>
		return NULL;
	}

	entry = &fdtable[fd];
	*vtable = entry->vtable;
    2dac:	4b08      	ldr	r3, [pc, #32]	; (2dd0 <z_get_fd_obj_and_vtable+0x34>)
    2dae:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    2db2:	685b      	ldr	r3, [r3, #4]
    2db4:	6033      	str	r3, [r6, #0]

	if (lock) {
    2db6:	b12d      	cbz	r5, 2dc4 <z_get_fd_obj_and_vtable+0x28>
		*lock = &entry->lock;
    2db8:	0163      	lsls	r3, r4, #5
    2dba:	3308      	adds	r3, #8
    2dbc:	4a04      	ldr	r2, [pc, #16]	; (2dd0 <z_get_fd_obj_and_vtable+0x34>)
    2dbe:	4413      	add	r3, r2
    2dc0:	3304      	adds	r3, #4
    2dc2:	602b      	str	r3, [r5, #0]
	}

	return entry->obj;
    2dc4:	0164      	lsls	r4, r4, #5
    2dc6:	4b02      	ldr	r3, [pc, #8]	; (2dd0 <z_get_fd_obj_and_vtable+0x34>)
    2dc8:	5918      	ldr	r0, [r3, r4]
}
    2dca:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
    2dcc:	2000      	movs	r0, #0
    2dce:	e7fc      	b.n	2dca <z_get_fd_obj_and_vtable+0x2e>
    2dd0:	20001f50 	.word	0x20001f50

00002dd4 <z_reserve_fd>:

int z_reserve_fd(void)
{
    2dd4:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
    2dd6:	f04f 32ff 	mov.w	r2, #4294967295
    2dda:	f04f 33ff 	mov.w	r3, #4294967295
    2dde:	480e      	ldr	r0, [pc, #56]	; (2e18 <z_reserve_fd+0x44>)
    2de0:	f00e f916 	bl	11010 <z_impl_k_mutex_lock>
	int fd;

	(void)k_mutex_lock(&fdtable_lock, K_FOREVER);

	fd = _find_fd_entry();
    2de4:	f7ff ff84 	bl	2cf0 <_find_fd_entry>
	if (fd >= 0) {
    2de8:	1e04      	subs	r4, r0, #0
    2dea:	da04      	bge.n	2df6 <z_reserve_fd+0x22>
	return z_impl_k_mutex_unlock(mutex);
    2dec:	480a      	ldr	r0, [pc, #40]	; (2e18 <z_reserve_fd+0x44>)
    2dee:	f00e f993 	bl	11118 <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
    2df2:	4620      	mov	r0, r4
    2df4:	bd10      	pop	{r4, pc}
		(void)z_fd_ref(fd);
    2df6:	4620      	mov	r0, r4
    2df8:	f7ff ffbe 	bl	2d78 <z_fd_ref>
		fdtable[fd].obj = NULL;
    2dfc:	4b07      	ldr	r3, [pc, #28]	; (2e1c <z_reserve_fd+0x48>)
    2dfe:	0160      	lsls	r0, r4, #5
    2e00:	eb03 1144 	add.w	r1, r3, r4, lsl #5
    2e04:	2200      	movs	r2, #0
    2e06:	501a      	str	r2, [r3, r0]
		fdtable[fd].vtable = NULL;
    2e08:	604a      	str	r2, [r1, #4]
		k_mutex_init(&fdtable[fd].lock);
    2e0a:	3008      	adds	r0, #8
    2e0c:	4418      	add	r0, r3
    2e0e:	3004      	adds	r0, #4
	return z_impl_k_mutex_init(mutex);
    2e10:	f01c f90d 	bl	1f02e <z_impl_k_mutex_init>
    2e14:	e7ea      	b.n	2dec <z_reserve_fd+0x18>
    2e16:	bf00      	nop
    2e18:	2000049c 	.word	0x2000049c
    2e1c:	20001f50 	.word	0x20001f50

00002e20 <z_finalize_fd>:

void z_finalize_fd(int fd, void *obj, const struct fd_op_vtable *vtable)
{
    2e20:	b508      	push	{r3, lr}
    2e22:	4603      	mov	r3, r0
    2e24:	4610      	mov	r0, r2
	 * This call is a no-op if obj is invalid or points to something
	 * not a kernel object.
	 */
	z_object_recycle(obj);
#endif
	fdtable[fd].obj = obj;
    2e26:	4a0b      	ldr	r2, [pc, #44]	; (2e54 <z_finalize_fd+0x34>)
    2e28:	ea4f 1e43 	mov.w	lr, r3, lsl #5
    2e2c:	eb02 1c43 	add.w	ip, r2, r3, lsl #5
    2e30:	f842 100e 	str.w	r1, [r2, lr]
	fdtable[fd].vtable = vtable;
    2e34:	f8cc 0004 	str.w	r0, [ip, #4]

	/* Let the object know about the lock just in case it needs it
	 * for something. For BSD sockets, the lock is used with condition
	 * variables to avoid keeping the lock for a long period of time.
	 */
	if (vtable && vtable->ioctl) {
    2e38:	b150      	cbz	r0, 2e50 <z_finalize_fd+0x30>
    2e3a:	68c2      	ldr	r2, [r0, #12]
    2e3c:	b142      	cbz	r2, 2e50 <z_finalize_fd+0x30>
		(void)z_fdtable_call_ioctl(vtable, obj, ZFD_IOCTL_SET_LOCK,
    2e3e:	4673      	mov	r3, lr
    2e40:	3308      	adds	r3, #8
    2e42:	4a04      	ldr	r2, [pc, #16]	; (2e54 <z_finalize_fd+0x34>)
    2e44:	4413      	add	r3, r2
    2e46:	3304      	adds	r3, #4
    2e48:	f240 1205 	movw	r2, #261	; 0x105
    2e4c:	f013 fc69 	bl	16722 <z_fdtable_call_ioctl>
					   &fdtable[fd].lock);
	}
}
    2e50:	bd08      	pop	{r3, pc}
    2e52:	bf00      	nop
    2e54:	20001f50 	.word	0x20001f50

00002e58 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
    2e58:	4b01      	ldr	r3, [pc, #4]	; (2e60 <__printk_hook_install+0x8>)
    2e5a:	6018      	str	r0, [r3, #0]
}
    2e5c:	4770      	bx	lr
    2e5e:	bf00      	nop
    2e60:	20000000 	.word	0x20000000

00002e64 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    2e64:	b510      	push	{r4, lr}
    2e66:	b086      	sub	sp, #24
    2e68:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    2e6a:	9003      	str	r0, [sp, #12]
    2e6c:	9104      	str	r1, [sp, #16]
    2e6e:	2100      	movs	r1, #0
    2e70:	9105      	str	r1, [sp, #20]
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    2e72:	9100      	str	r1, [sp, #0]
    2e74:	a903      	add	r1, sp, #12
    2e76:	4806      	ldr	r0, [pc, #24]	; (2e90 <vsnprintk+0x2c>)
    2e78:	f000 f990 	bl	319c <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
    2e7c:	9b05      	ldr	r3, [sp, #20]
    2e7e:	9a04      	ldr	r2, [sp, #16]
    2e80:	4293      	cmp	r3, r2
    2e82:	da01      	bge.n	2e88 <vsnprintk+0x24>
		str[ctx.count] = '\0';
    2e84:	2200      	movs	r2, #0
    2e86:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
    2e88:	9805      	ldr	r0, [sp, #20]
    2e8a:	b006      	add	sp, #24
    2e8c:	bd10      	pop	{r4, pc}
    2e8e:	bf00      	nop
    2e90:	0001674f 	.word	0x0001674f

00002e94 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    2e94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2e98:	b083      	sub	sp, #12
    2e9a:	4604      	mov	r4, r0
    2e9c:	4608      	mov	r0, r1
    2e9e:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    2ea0:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    2ea2:	f013 0f08 	tst.w	r3, #8
    2ea6:	d105      	bne.n	2eb4 <process_event+0x20>
    2ea8:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    2eac:	2300      	movs	r3, #0
    2eae:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
    2eb0:	9301      	str	r3, [sp, #4]
}
    2eb2:	e055      	b.n	2f60 <process_event+0xcc>
		if (evt == EVT_COMPLETE) {
    2eb4:	2901      	cmp	r1, #1
    2eb6:	d009      	beq.n	2ecc <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    2eb8:	f043 0320 	orr.w	r3, r3, #32
    2ebc:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    2ebe:	f385 8811 	msr	BASEPRI, r5
    2ec2:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    2ec6:	b003      	add	sp, #12
    2ec8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    2ecc:	f043 0310 	orr.w	r3, r3, #16
    2ed0:	8323      	strh	r3, [r4, #24]
    2ed2:	e7f4      	b.n	2ebe <process_event+0x2a>
			evt = process_recheck(mgr);
    2ed4:	4620      	mov	r0, r4
    2ed6:	f013 feab 	bl	16c30 <process_recheck>
    2eda:	e043      	b.n	2f64 <process_event+0xd0>
			res = mgr->last_res;
    2edc:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
    2ee0:	464a      	mov	r2, r9
    2ee2:	4669      	mov	r1, sp
    2ee4:	4620      	mov	r0, r4
    2ee6:	f013 febc 	bl	16c62 <process_complete>
		onoff_transition_fn transit = NULL;
    2eea:	f04f 0800 	mov.w	r8, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    2eee:	8b23      	ldrh	r3, [r4, #24]
    2ef0:	f003 0707 	and.w	r7, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    2ef4:	42b7      	cmp	r7, r6
    2ef6:	d069      	beq.n	2fcc <process_event+0x138>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    2ef8:	68a2      	ldr	r2, [r4, #8]
    2efa:	2a00      	cmp	r2, #0
    2efc:	d066      	beq.n	2fcc <process_event+0x138>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    2efe:	2201      	movs	r2, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    2f00:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    2f04:	8323      	strh	r3, [r4, #24]
    2f06:	f385 8811 	msr	BASEPRI, r5
    2f0a:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    2f0e:	2a00      	cmp	r2, #0
    2f10:	d164      	bne.n	2fdc <process_event+0x148>
    2f12:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
    2f14:	b12b      	cbz	r3, 2f22 <process_event+0x8e>
				notify_all(mgr, &clients, state, res);
    2f16:	464b      	mov	r3, r9
    2f18:	463a      	mov	r2, r7
    2f1a:	4669      	mov	r1, sp
    2f1c:	4620      	mov	r0, r4
    2f1e:	f013 ff19 	bl	16d54 <notify_all>
			if (transit != NULL) {
    2f22:	f1b8 0f00 	cmp.w	r8, #0
    2f26:	d002      	beq.n	2f2e <process_event+0x9a>
				transit(mgr, transition_complete);
    2f28:	4934      	ldr	r1, [pc, #208]	; (2ffc <process_event+0x168>)
    2f2a:	4620      	mov	r0, r4
    2f2c:	47c0      	blx	r8
	__asm__ volatile(
    2f2e:	f04f 0320 	mov.w	r3, #32
    2f32:	f3ef 8511 	mrs	r5, BASEPRI
    2f36:	f383 8812 	msr	BASEPRI_MAX, r3
    2f3a:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    2f3e:	8b23      	ldrh	r3, [r4, #24]
    2f40:	f023 0308 	bic.w	r3, r3, #8
    2f44:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    2f46:	8b23      	ldrh	r3, [r4, #24]
    2f48:	f013 0f10 	tst.w	r3, #16
    2f4c:	d04c      	beq.n	2fe8 <process_event+0x154>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    2f4e:	f023 0310 	bic.w	r3, r3, #16
    2f52:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    2f54:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    2f56:	8b26      	ldrh	r6, [r4, #24]
    2f58:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
    2f5c:	2800      	cmp	r0, #0
    2f5e:	d0ae      	beq.n	2ebe <process_event+0x2a>
		if (evt == EVT_RECHECK) {
    2f60:	2802      	cmp	r0, #2
    2f62:	d0b7      	beq.n	2ed4 <process_event+0x40>
		if (evt == EVT_NOP) {
    2f64:	2800      	cmp	r0, #0
    2f66:	d0aa      	beq.n	2ebe <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
    2f68:	3801      	subs	r0, #1
    2f6a:	2804      	cmp	r0, #4
    2f6c:	d82a      	bhi.n	2fc4 <process_event+0x130>
    2f6e:	a301      	add	r3, pc, #4	; (adr r3, 2f74 <process_event+0xe0>)
    2f70:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
    2f74:	00002edd 	.word	0x00002edd
    2f78:	00002fc5 	.word	0x00002fc5
    2f7c:	00002f89 	.word	0x00002f89
    2f80:	00002f9d 	.word	0x00002f9d
    2f84:	00002fb1 	.word	0x00002fb1
			transit = mgr->transitions->start;
    2f88:	6923      	ldr	r3, [r4, #16]
    2f8a:	f8d3 8000 	ldr.w	r8, [r3]
			set_state(mgr, ONOFF_STATE_TO_ON);
    2f8e:	2106      	movs	r1, #6
    2f90:	4620      	mov	r0, r4
    2f92:	f013 fe23 	bl	16bdc <set_state>
		res = 0;
    2f96:	f04f 0900 	mov.w	r9, #0
    2f9a:	e7a8      	b.n	2eee <process_event+0x5a>
			transit = mgr->transitions->stop;
    2f9c:	6923      	ldr	r3, [r4, #16]
    2f9e:	f8d3 8004 	ldr.w	r8, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
    2fa2:	2104      	movs	r1, #4
    2fa4:	4620      	mov	r0, r4
    2fa6:	f013 fe19 	bl	16bdc <set_state>
		res = 0;
    2faa:	f04f 0900 	mov.w	r9, #0
    2fae:	e79e      	b.n	2eee <process_event+0x5a>
			transit = mgr->transitions->reset;
    2fb0:	6923      	ldr	r3, [r4, #16]
    2fb2:	f8d3 8008 	ldr.w	r8, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
    2fb6:	2105      	movs	r1, #5
    2fb8:	4620      	mov	r0, r4
    2fba:	f013 fe0f 	bl	16bdc <set_state>
		res = 0;
    2fbe:	f04f 0900 	mov.w	r9, #0
    2fc2:	e794      	b.n	2eee <process_event+0x5a>
		if (evt == EVT_NOP) {
    2fc4:	f04f 0800 	mov.w	r8, #0
    2fc8:	46c1      	mov	r9, r8
    2fca:	e790      	b.n	2eee <process_event+0x5a>
    2fcc:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
    2fce:	b10a      	cbz	r2, 2fd4 <process_event+0x140>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    2fd0:	2200      	movs	r2, #0
    2fd2:	e795      	b.n	2f00 <process_event+0x6c>
		    || (transit != NULL)) {
    2fd4:	f1b8 0f00 	cmp.w	r8, #0
    2fd8:	d192      	bne.n	2f00 <process_event+0x6c>
    2fda:	e7b4      	b.n	2f46 <process_event+0xb2>
				notify_monitors(mgr, state, res);
    2fdc:	464a      	mov	r2, r9
    2fde:	4639      	mov	r1, r7
    2fe0:	4620      	mov	r0, r4
    2fe2:	f013 fe03 	bl	16bec <notify_monitors>
    2fe6:	e794      	b.n	2f12 <process_event+0x7e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    2fe8:	f013 0f20 	tst.w	r3, #32
    2fec:	d004      	beq.n	2ff8 <process_event+0x164>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    2fee:	f023 0320 	bic.w	r3, r3, #32
    2ff2:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
    2ff4:	2002      	movs	r0, #2
    2ff6:	e7ae      	b.n	2f56 <process_event+0xc2>
		evt = EVT_NOP;
    2ff8:	2000      	movs	r0, #0
    2ffa:	e7ac      	b.n	2f56 <process_event+0xc2>
    2ffc:	00016d83 	.word	0x00016d83

00003000 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    3000:	4684      	mov	ip, r0
	const char *sp = *str;
    3002:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    3004:	2000      	movs	r0, #0

	while (isdigit((int)(unsigned char)*sp)) {
    3006:	e006      	b.n	3016 <extract_decimal+0x16>
		val = 10U * val + *sp++ - '0';
    3008:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    300c:	3201      	adds	r2, #1
    300e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    3012:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    3016:	7813      	ldrb	r3, [r2, #0]
    3018:	4903      	ldr	r1, [pc, #12]	; (3028 <extract_decimal+0x28>)
    301a:	5cc9      	ldrb	r1, [r1, r3]
    301c:	f011 0f04 	tst.w	r1, #4
    3020:	d1f2      	bne.n	3008 <extract_decimal+0x8>
	}
	*str = sp;
    3022:	f8cc 2000 	str.w	r2, [ip]
	return val;
}
    3026:	4770      	bx	lr
    3028:	00022759 	.word	0x00022759

0000302c <extract_flags>:
 *
 * @return a pointer the first character that follows the flags.
 */
static inline const char *extract_flags(struct conversion *conv,
					const char *sp)
{
    302c:	4684      	mov	ip, r0
    302e:	4608      	mov	r0, r1
	bool loop = true;
    3030:	2201      	movs	r2, #1
    3032:	e026      	b.n	3082 <extract_flags+0x56>

	do {
		switch (*sp) {
		case '-':
			conv->flag_dash = true;
    3034:	f89c 3000 	ldrb.w	r3, [ip]
    3038:	f043 0304 	orr.w	r3, r3, #4
    303c:	f88c 3000 	strb.w	r3, [ip]
			conv->flag_zero = true;
			break;
		default:
			loop = false;
		}
		if (loop) {
    3040:	b1f2      	cbz	r2, 3080 <extract_flags+0x54>
			++sp;
    3042:	3001      	adds	r0, #1
    3044:	e01c      	b.n	3080 <extract_flags+0x54>
			conv->flag_plus = true;
    3046:	f89c 3000 	ldrb.w	r3, [ip]
    304a:	f043 0308 	orr.w	r3, r3, #8
    304e:	f88c 3000 	strb.w	r3, [ip]
			break;
    3052:	e7f5      	b.n	3040 <extract_flags+0x14>
			conv->flag_space = true;
    3054:	f89c 3000 	ldrb.w	r3, [ip]
    3058:	f043 0310 	orr.w	r3, r3, #16
    305c:	f88c 3000 	strb.w	r3, [ip]
			break;
    3060:	e7ee      	b.n	3040 <extract_flags+0x14>
			conv->flag_hash = true;
    3062:	f89c 3000 	ldrb.w	r3, [ip]
    3066:	f043 0320 	orr.w	r3, r3, #32
    306a:	f88c 3000 	strb.w	r3, [ip]
			break;
    306e:	e7e7      	b.n	3040 <extract_flags+0x14>
			conv->flag_zero = true;
    3070:	f89c 3000 	ldrb.w	r3, [ip]
    3074:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3078:	f88c 3000 	strb.w	r3, [ip]
			break;
    307c:	e7e0      	b.n	3040 <extract_flags+0x14>
		switch (*sp) {
    307e:	2200      	movs	r2, #0
		}
	} while (loop);
    3080:	b342      	cbz	r2, 30d4 <extract_flags+0xa8>
		switch (*sp) {
    3082:	7803      	ldrb	r3, [r0, #0]
    3084:	3b20      	subs	r3, #32
    3086:	2b10      	cmp	r3, #16
    3088:	d8f9      	bhi.n	307e <extract_flags+0x52>
    308a:	a101      	add	r1, pc, #4	; (adr r1, 3090 <extract_flags+0x64>)
    308c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    3090:	00003055 	.word	0x00003055
    3094:	0000307f 	.word	0x0000307f
    3098:	0000307f 	.word	0x0000307f
    309c:	00003063 	.word	0x00003063
    30a0:	0000307f 	.word	0x0000307f
    30a4:	0000307f 	.word	0x0000307f
    30a8:	0000307f 	.word	0x0000307f
    30ac:	0000307f 	.word	0x0000307f
    30b0:	0000307f 	.word	0x0000307f
    30b4:	0000307f 	.word	0x0000307f
    30b8:	0000307f 	.word	0x0000307f
    30bc:	00003047 	.word	0x00003047
    30c0:	0000307f 	.word	0x0000307f
    30c4:	00003035 	.word	0x00003035
    30c8:	0000307f 	.word	0x0000307f
    30cc:	0000307f 	.word	0x0000307f
    30d0:	00003071 	.word	0x00003071

	/* zero && dash => !zero */
	if (conv->flag_zero && conv->flag_dash) {
    30d4:	f89c 3000 	ldrb.w	r3, [ip]
    30d8:	f003 0344 	and.w	r3, r3, #68	; 0x44
    30dc:	2b44      	cmp	r3, #68	; 0x44
    30de:	d000      	beq.n	30e2 <extract_flags+0xb6>
	}

	/* space && plus => !plus, handled in emitter code */

	return sp;
}
    30e0:	4770      	bx	lr
		conv->flag_zero = false;
    30e2:	f89c 3000 	ldrb.w	r3, [ip]
    30e6:	f36f 1386 	bfc	r3, #6, #1
    30ea:	f88c 3000 	strb.w	r3, [ip]
    30ee:	e7f7      	b.n	30e0 <extract_flags+0xb4>

000030f0 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    30f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    30f4:	4605      	mov	r5, r0
    30f6:	460c      	mov	r4, r1
    30f8:	4693      	mov	fp, r2
    30fa:	4699      	mov	r9, r3
    30fc:	9f0a      	ldr	r7, [sp, #40]	; 0x28
	bool upcase = isupper((int)conv->specifier);
    30fe:	78d0      	ldrb	r0, [r2, #3]
    3100:	4b25      	ldr	r3, [pc, #148]	; (3198 <encode_uint+0xa8>)
    3102:	f813 a000 	ldrb.w	sl, [r3, r0]
    3106:	f00a 0a03 	and.w	sl, sl, #3
	const unsigned int radix = conversion_radix(conv->specifier);
    310a:	f014 f879 	bl	17200 <conversion_radix>
    310e:	4606      	mov	r6, r0
	char *bp = bps + (bpe - bps);
    3110:	e015      	b.n	313e <encode_uint+0x4e>

	do {
		unsigned int lsv = (unsigned int)(value % radix);

		*--bp = (lsv <= 9) ? ('0' + lsv)
    3112:	f1ba 0f01 	cmp.w	sl, #1
    3116:	d020      	beq.n	315a <encode_uint+0x6a>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    3118:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    311a:	3257      	adds	r2, #87	; 0x57
    311c:	b2d2      	uxtb	r2, r2
    311e:	f807 2d01 	strb.w	r2, [r7, #-1]!
		value /= radix;
    3122:	4632      	mov	r2, r6
    3124:	4643      	mov	r3, r8
    3126:	4628      	mov	r0, r5
    3128:	4621      	mov	r1, r4
    312a:	f7fd fc07 	bl	93c <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    312e:	42b5      	cmp	r5, r6
    3130:	f174 0400 	sbcs.w	r4, r4, #0
    3134:	d315      	bcc.n	3162 <encode_uint+0x72>
    3136:	454f      	cmp	r7, r9
    3138:	d913      	bls.n	3162 <encode_uint+0x72>
		value /= radix;
    313a:	4605      	mov	r5, r0
    313c:	460c      	mov	r4, r1
		unsigned int lsv = (unsigned int)(value % radix);
    313e:	f04f 0800 	mov.w	r8, #0
    3142:	4632      	mov	r2, r6
    3144:	4643      	mov	r3, r8
    3146:	4628      	mov	r0, r5
    3148:	4621      	mov	r1, r4
    314a:	f7fd fbf7 	bl	93c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    314e:	2a09      	cmp	r2, #9
    3150:	d8df      	bhi.n	3112 <encode_uint+0x22>
    3152:	b2d2      	uxtb	r2, r2
    3154:	3230      	adds	r2, #48	; 0x30
    3156:	b2d2      	uxtb	r2, r2
    3158:	e7e1      	b.n	311e <encode_uint+0x2e>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    315a:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    315c:	3237      	adds	r2, #55	; 0x37
    315e:	b2d2      	uxtb	r2, r2
    3160:	e7dd      	b.n	311e <encode_uint+0x2e>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    3162:	f89b 3000 	ldrb.w	r3, [fp]
    3166:	f013 0f20 	tst.w	r3, #32
    316a:	d003      	beq.n	3174 <encode_uint+0x84>
		if (radix == 8) {
    316c:	2e08      	cmp	r6, #8
    316e:	d004      	beq.n	317a <encode_uint+0x8a>
			conv->altform_0 = true;
		} else if (radix == 16) {
    3170:	2e10      	cmp	r6, #16
    3172:	d009      	beq.n	3188 <encode_uint+0x98>
			;
		}
	}

	return bp;
}
    3174:	4638      	mov	r0, r7
    3176:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    317a:	f89b 3002 	ldrb.w	r3, [fp, #2]
    317e:	f043 0308 	orr.w	r3, r3, #8
    3182:	f88b 3002 	strb.w	r3, [fp, #2]
    3186:	e7f5      	b.n	3174 <encode_uint+0x84>
			conv->altform_0c = true;
    3188:	f89b 3002 	ldrb.w	r3, [fp, #2]
    318c:	f043 0310 	orr.w	r3, r3, #16
    3190:	f88b 3002 	strb.w	r3, [fp, #2]
    3194:	e7ee      	b.n	3174 <encode_uint+0x84>
    3196:	bf00      	nop
    3198:	00022759 	.word	0x00022759

0000319c <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    319c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    31a0:	b091      	sub	sp, #68	; 0x44
    31a2:	4606      	mov	r6, r0
    31a4:	460d      	mov	r5, r1
    31a6:	4691      	mov	r9, r2
    31a8:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    31aa:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    31ac:	f899 0000 	ldrb.w	r0, [r9]
    31b0:	2800      	cmp	r0, #0
    31b2:	f000 82b9 	beq.w	3728 <z_cbvprintf_impl+0x58c>
		if (*fp != '%') {
    31b6:	2825      	cmp	r0, #37	; 0x25
    31b8:	d008      	beq.n	31cc <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
    31ba:	f109 0901 	add.w	r9, r9, #1
    31be:	4629      	mov	r1, r5
    31c0:	47b0      	blx	r6
    31c2:	2800      	cmp	r0, #0
    31c4:	f2c0 82b1 	blt.w	372a <z_cbvprintf_impl+0x58e>
    31c8:	3401      	adds	r4, #1
			continue;
    31ca:	e7ef      	b.n	31ac <z_cbvprintf_impl+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
    31cc:	2300      	movs	r3, #0
    31ce:	9304      	str	r3, [sp, #16]
    31d0:	9305      	str	r3, [sp, #20]
    31d2:	9306      	str	r3, [sp, #24]
    31d4:	9307      	str	r3, [sp, #28]
    31d6:	9308      	str	r3, [sp, #32]
    31d8:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
    31da:	4649      	mov	r1, r9
    31dc:	a806      	add	r0, sp, #24
    31de:	f013 ffed 	bl	171bc <extract_conversion>
    31e2:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
    31e4:	f89d 3019 	ldrb.w	r3, [sp, #25]
    31e8:	f013 0f01 	tst.w	r3, #1
    31ec:	f000 8097 	beq.w	331e <z_cbvprintf_impl+0x182>
			width = va_arg(ap, int);
    31f0:	9b03      	ldr	r3, [sp, #12]
    31f2:	1d1a      	adds	r2, r3, #4
    31f4:	9203      	str	r2, [sp, #12]
    31f6:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
    31f8:	2f00      	cmp	r7, #0
    31fa:	f2c0 8088 	blt.w	330e <z_cbvprintf_impl+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
    31fe:	f89d 3019 	ldrb.w	r3, [sp, #25]
    3202:	f013 0f04 	tst.w	r3, #4
    3206:	f000 809c 	beq.w	3342 <z_cbvprintf_impl+0x1a6>
			int arg = va_arg(ap, int);
    320a:	9b03      	ldr	r3, [sp, #12]
    320c:	1d1a      	adds	r2, r3, #4
    320e:	9203      	str	r2, [sp, #12]
    3210:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
    3214:	f1ba 0f00 	cmp.w	sl, #0
    3218:	f2c0 808a 	blt.w	3330 <z_cbvprintf_impl+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
    321c:	2300      	movs	r3, #0
    321e:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
    3220:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
    3222:	f89d 301a 	ldrb.w	r3, [sp, #26]
    3226:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
    322a:	f89d 1019 	ldrb.w	r1, [sp, #25]
    322e:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
    3232:	2b01      	cmp	r3, #1
    3234:	f000 808e 	beq.w	3354 <z_cbvprintf_impl+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (signed char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
    3238:	2b02      	cmp	r3, #2
    323a:	f000 80d3 	beq.w	33e4 <z_cbvprintf_impl+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
    323e:	2b04      	cmp	r3, #4
    3240:	f000 8124 	beq.w	348c <z_cbvprintf_impl+0x2f0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
    3244:	2b03      	cmp	r3, #3
    3246:	f000 813b 	beq.w	34c0 <z_cbvprintf_impl+0x324>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
    324a:	f89d 8018 	ldrb.w	r8, [sp, #24]
    324e:	f018 0b03 	ands.w	fp, r8, #3
    3252:	f040 813b 	bne.w	34cc <z_cbvprintf_impl+0x330>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
    3256:	f89d 301b 	ldrb.w	r3, [sp, #27]
    325a:	3b25      	subs	r3, #37	; 0x25
    325c:	2b53      	cmp	r3, #83	; 0x53
    325e:	f200 81ca 	bhi.w	35f6 <z_cbvprintf_impl+0x45a>
    3262:	e8df f013 	tbh	[pc, r3, lsl #1]
    3266:	0140      	.short	0x0140
    3268:	01c801c8 	.word	0x01c801c8
    326c:	01c801c8 	.word	0x01c801c8
    3270:	01c801c8 	.word	0x01c801c8
    3274:	01c801c8 	.word	0x01c801c8
    3278:	01c801c8 	.word	0x01c801c8
    327c:	01c801c8 	.word	0x01c801c8
    3280:	01c801c8 	.word	0x01c801c8
    3284:	01c801c8 	.word	0x01c801c8
    3288:	01c801c8 	.word	0x01c801c8
    328c:	01c801c8 	.word	0x01c801c8
    3290:	01c801c8 	.word	0x01c801c8
    3294:	01c801c8 	.word	0x01c801c8
    3298:	01c801c8 	.word	0x01c801c8
    329c:	01c801c8 	.word	0x01c801c8
    32a0:	01c801c8 	.word	0x01c801c8
    32a4:	01c801c8 	.word	0x01c801c8
    32a8:	01c801c8 	.word	0x01c801c8
    32ac:	01c801c8 	.word	0x01c801c8
    32b0:	01c801c8 	.word	0x01c801c8
    32b4:	01c801c8 	.word	0x01c801c8
    32b8:	01c801c8 	.word	0x01c801c8
    32bc:	01c801c8 	.word	0x01c801c8
    32c0:	01c801c8 	.word	0x01c801c8
    32c4:	01c801c8 	.word	0x01c801c8
    32c8:	01c801c8 	.word	0x01c801c8
    32cc:	01c80181 	.word	0x01c80181
    32d0:	01c801c8 	.word	0x01c801c8
    32d4:	01c801c8 	.word	0x01c801c8
    32d8:	01c801c8 	.word	0x01c801c8
    32dc:	01c801c8 	.word	0x01c801c8
    32e0:	015e01c8 	.word	0x015e01c8
    32e4:	01c80167 	.word	0x01c80167
    32e8:	01c801c8 	.word	0x01c801c8
    32ec:	016701c8 	.word	0x016701c8
    32f0:	01c801c8 	.word	0x01c801c8
    32f4:	01c801c8 	.word	0x01c801c8
    32f8:	018101bd 	.word	0x018101bd
    32fc:	01c801a1 	.word	0x01c801a1
    3300:	014d01c8 	.word	0x014d01c8
    3304:	018101c8 	.word	0x018101c8
    3308:	01c801c8 	.word	0x01c801c8
    330c:	0181      	.short	0x0181
				conv->flag_dash = true;
    330e:	f89d 3018 	ldrb.w	r3, [sp, #24]
    3312:	f043 0304 	orr.w	r3, r3, #4
    3316:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
    331a:	427f      	negs	r7, r7
    331c:	e76f      	b.n	31fe <z_cbvprintf_impl+0x62>
		} else if (conv->width_present) {
    331e:	f99d 3018 	ldrsb.w	r3, [sp, #24]
    3322:	2b00      	cmp	r3, #0
    3324:	db02      	blt.n	332c <z_cbvprintf_impl+0x190>
		int width = -1;
    3326:	f04f 37ff 	mov.w	r7, #4294967295
    332a:	e768      	b.n	31fe <z_cbvprintf_impl+0x62>
			width = conv->width_value;
    332c:	9f07      	ldr	r7, [sp, #28]
    332e:	e766      	b.n	31fe <z_cbvprintf_impl+0x62>
				conv->prec_present = false;
    3330:	f89d 3019 	ldrb.w	r3, [sp, #25]
    3334:	f36f 0341 	bfc	r3, #1, #1
    3338:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
    333c:	f04f 3aff 	mov.w	sl, #4294967295
    3340:	e76c      	b.n	321c <z_cbvprintf_impl+0x80>
		} else if (conv->prec_present) {
    3342:	f013 0f02 	tst.w	r3, #2
    3346:	d002      	beq.n	334e <z_cbvprintf_impl+0x1b2>
			precision = conv->prec_value;
    3348:	f8dd a020 	ldr.w	sl, [sp, #32]
    334c:	e766      	b.n	321c <z_cbvprintf_impl+0x80>
		int precision = -1;
    334e:	f04f 3aff 	mov.w	sl, #4294967295
    3352:	e763      	b.n	321c <z_cbvprintf_impl+0x80>
			switch (length_mod) {
    3354:	1ecb      	subs	r3, r1, #3
    3356:	2b04      	cmp	r3, #4
    3358:	d804      	bhi.n	3364 <z_cbvprintf_impl+0x1c8>
    335a:	e8df f003 	tbb	[pc, r3]
    335e:	1d0b      	.short	0x1d0b
    3360:	3529      	.short	0x3529
    3362:	35          	.byte	0x35
    3363:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    3364:	9b03      	ldr	r3, [sp, #12]
    3366:	1d1a      	adds	r2, r3, #4
    3368:	9203      	str	r2, [sp, #12]
    336a:	681b      	ldr	r3, [r3, #0]
    336c:	17da      	asrs	r2, r3, #31
    336e:	9304      	str	r3, [sp, #16]
    3370:	9205      	str	r2, [sp, #20]
				break;
    3372:	e006      	b.n	3382 <z_cbvprintf_impl+0x1e6>
					value->sint = va_arg(ap, long);
    3374:	9b03      	ldr	r3, [sp, #12]
    3376:	1d1a      	adds	r2, r3, #4
    3378:	9203      	str	r2, [sp, #12]
    337a:	681b      	ldr	r3, [r3, #0]
    337c:	17da      	asrs	r2, r3, #31
    337e:	9304      	str	r3, [sp, #16]
    3380:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
    3382:	2901      	cmp	r1, #1
    3384:	d028      	beq.n	33d8 <z_cbvprintf_impl+0x23c>
			} else if (length_mod == LENGTH_H) {
    3386:	2902      	cmp	r1, #2
    3388:	f47f af5f 	bne.w	324a <z_cbvprintf_impl+0xae>
				value->sint = (short)value->sint;
    338c:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
    3390:	17da      	asrs	r2, r3, #31
    3392:	9304      	str	r3, [sp, #16]
    3394:	9205      	str	r2, [sp, #20]
    3396:	e758      	b.n	324a <z_cbvprintf_impl+0xae>
					(sint_value_type)va_arg(ap, long long);
    3398:	9b03      	ldr	r3, [sp, #12]
    339a:	3307      	adds	r3, #7
    339c:	f023 0307 	bic.w	r3, r3, #7
    33a0:	f103 0208 	add.w	r2, r3, #8
    33a4:	9203      	str	r2, [sp, #12]
    33a6:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    33aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    33ae:	e7e8      	b.n	3382 <z_cbvprintf_impl+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
    33b0:	9b03      	ldr	r3, [sp, #12]
    33b2:	3307      	adds	r3, #7
    33b4:	f023 0307 	bic.w	r3, r3, #7
    33b8:	f103 0208 	add.w	r2, r3, #8
    33bc:	9203      	str	r2, [sp, #12]
    33be:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    33c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    33c6:	e7dc      	b.n	3382 <z_cbvprintf_impl+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    33c8:	9b03      	ldr	r3, [sp, #12]
    33ca:	1d1a      	adds	r2, r3, #4
    33cc:	9203      	str	r2, [sp, #12]
    33ce:	681b      	ldr	r3, [r3, #0]
    33d0:	17da      	asrs	r2, r3, #31
				value->sint =
    33d2:	9304      	str	r3, [sp, #16]
    33d4:	9205      	str	r2, [sp, #20]
				break;
    33d6:	e7d4      	b.n	3382 <z_cbvprintf_impl+0x1e6>
				value->sint = (signed char)value->sint;
    33d8:	f99d 3010 	ldrsb.w	r3, [sp, #16]
    33dc:	17da      	asrs	r2, r3, #31
    33de:	9304      	str	r3, [sp, #16]
    33e0:	9205      	str	r2, [sp, #20]
    33e2:	e732      	b.n	324a <z_cbvprintf_impl+0xae>
			switch (length_mod) {
    33e4:	1ecb      	subs	r3, r1, #3
    33e6:	2b04      	cmp	r3, #4
    33e8:	d804      	bhi.n	33f4 <z_cbvprintf_impl+0x258>
    33ea:	e8df f003 	tbb	[pc, r3]
    33ee:	1f0b      	.short	0x1f0b
    33f0:	4135      	.short	0x4135
    33f2:	41          	.byte	0x41
    33f3:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
    33f4:	9b03      	ldr	r3, [sp, #12]
    33f6:	1d1a      	adds	r2, r3, #4
    33f8:	9203      	str	r2, [sp, #12]
    33fa:	681b      	ldr	r3, [r3, #0]
    33fc:	9304      	str	r3, [sp, #16]
    33fe:	2300      	movs	r3, #0
    3400:	9305      	str	r3, [sp, #20]
				break;
    3402:	e01e      	b.n	3442 <z_cbvprintf_impl+0x2a6>
				    && (conv->specifier == 'c')) {
    3404:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
    3408:	2b63      	cmp	r3, #99	; 0x63
    340a:	d007      	beq.n	341c <z_cbvprintf_impl+0x280>
					value->uint = va_arg(ap, unsigned long);
    340c:	9b03      	ldr	r3, [sp, #12]
    340e:	1d1a      	adds	r2, r3, #4
    3410:	9203      	str	r2, [sp, #12]
    3412:	681b      	ldr	r3, [r3, #0]
    3414:	9304      	str	r3, [sp, #16]
    3416:	2300      	movs	r3, #0
    3418:	9305      	str	r3, [sp, #20]
    341a:	e012      	b.n	3442 <z_cbvprintf_impl+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
    341c:	9b03      	ldr	r3, [sp, #12]
    341e:	1d1a      	adds	r2, r3, #4
    3420:	9203      	str	r2, [sp, #12]
    3422:	681b      	ldr	r3, [r3, #0]
    3424:	9304      	str	r3, [sp, #16]
    3426:	2300      	movs	r3, #0
    3428:	9305      	str	r3, [sp, #20]
    342a:	e00a      	b.n	3442 <z_cbvprintf_impl+0x2a6>
					(uint_value_type)va_arg(ap,
    342c:	9b03      	ldr	r3, [sp, #12]
    342e:	3307      	adds	r3, #7
    3430:	f023 0307 	bic.w	r3, r3, #7
    3434:	f103 0208 	add.w	r2, r3, #8
    3438:	9203      	str	r2, [sp, #12]
    343a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    343e:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
    3442:	2901      	cmp	r1, #1
    3444:	d01c      	beq.n	3480 <z_cbvprintf_impl+0x2e4>
			} else if (length_mod == LENGTH_H) {
    3446:	2902      	cmp	r1, #2
    3448:	f47f aeff 	bne.w	324a <z_cbvprintf_impl+0xae>
				value->uint = (unsigned short)value->uint;
    344c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    3450:	9304      	str	r3, [sp, #16]
    3452:	2300      	movs	r3, #0
    3454:	9305      	str	r3, [sp, #20]
    3456:	e6f8      	b.n	324a <z_cbvprintf_impl+0xae>
					(uint_value_type)va_arg(ap,
    3458:	9b03      	ldr	r3, [sp, #12]
    345a:	3307      	adds	r3, #7
    345c:	f023 0307 	bic.w	r3, r3, #7
    3460:	f103 0208 	add.w	r2, r3, #8
    3464:	9203      	str	r2, [sp, #12]
    3466:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    346a:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    346e:	e7e8      	b.n	3442 <z_cbvprintf_impl+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
    3470:	9b03      	ldr	r3, [sp, #12]
    3472:	1d1a      	adds	r2, r3, #4
    3474:	9203      	str	r2, [sp, #12]
    3476:	681b      	ldr	r3, [r3, #0]
				value->uint =
    3478:	9304      	str	r3, [sp, #16]
    347a:	2300      	movs	r3, #0
    347c:	9305      	str	r3, [sp, #20]
				break;
    347e:	e7e0      	b.n	3442 <z_cbvprintf_impl+0x2a6>
				value->uint = (unsigned char)value->uint;
    3480:	f89d 3010 	ldrb.w	r3, [sp, #16]
    3484:	9304      	str	r3, [sp, #16]
    3486:	2300      	movs	r3, #0
    3488:	9305      	str	r3, [sp, #20]
    348a:	e6de      	b.n	324a <z_cbvprintf_impl+0xae>
			if (length_mod == LENGTH_UPPER_L) {
    348c:	2908      	cmp	r1, #8
    348e:	d00b      	beq.n	34a8 <z_cbvprintf_impl+0x30c>
				value->dbl = va_arg(ap, double);
    3490:	9b03      	ldr	r3, [sp, #12]
    3492:	3307      	adds	r3, #7
    3494:	f023 0307 	bic.w	r3, r3, #7
    3498:	f103 0208 	add.w	r2, r3, #8
    349c:	9203      	str	r2, [sp, #12]
    349e:	e9d3 2300 	ldrd	r2, r3, [r3]
    34a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
    34a6:	e6d0      	b.n	324a <z_cbvprintf_impl+0xae>
				value->ldbl = va_arg(ap, long double);
    34a8:	9b03      	ldr	r3, [sp, #12]
    34aa:	3307      	adds	r3, #7
    34ac:	f023 0307 	bic.w	r3, r3, #7
    34b0:	f103 0208 	add.w	r2, r3, #8
    34b4:	9203      	str	r2, [sp, #12]
    34b6:	e9d3 2300 	ldrd	r2, r3, [r3]
    34ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
    34be:	e6c4      	b.n	324a <z_cbvprintf_impl+0xae>
			value->ptr = va_arg(ap, void *);
    34c0:	9b03      	ldr	r3, [sp, #12]
    34c2:	1d1a      	adds	r2, r3, #4
    34c4:	9203      	str	r2, [sp, #12]
    34c6:	681b      	ldr	r3, [r3, #0]
    34c8:	9304      	str	r3, [sp, #16]
    34ca:	e6be      	b.n	324a <z_cbvprintf_impl+0xae>
			OUTS(sp, fp);
    34cc:	9f02      	ldr	r7, [sp, #8]
    34ce:	463b      	mov	r3, r7
    34d0:	464a      	mov	r2, r9
    34d2:	4629      	mov	r1, r5
    34d4:	4630      	mov	r0, r6
    34d6:	f013 fec7 	bl	17268 <outs>
    34da:	2800      	cmp	r0, #0
    34dc:	f2c0 8125 	blt.w	372a <z_cbvprintf_impl+0x58e>
    34e0:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
    34e2:	46b9      	mov	r9, r7
			continue;
    34e4:	e662      	b.n	31ac <z_cbvprintf_impl+0x10>
		case '%':
			OUTC('%');
    34e6:	4629      	mov	r1, r5
    34e8:	2025      	movs	r0, #37	; 0x25
    34ea:	47b0      	blx	r6
    34ec:	2800      	cmp	r0, #0
    34ee:	f2c0 811c 	blt.w	372a <z_cbvprintf_impl+0x58e>
    34f2:	3401      	adds	r4, #1
		char sign = 0;
    34f4:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    34f6:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    34fa:	f04f 0900 	mov.w	r9, #0
			break;
    34fe:	e07f      	b.n	3600 <z_cbvprintf_impl+0x464>
		case 's': {
			bps = (const char *)value->ptr;
    3500:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
    3504:	f1ba 0f00 	cmp.w	sl, #0
    3508:	db07      	blt.n	351a <z_cbvprintf_impl+0x37e>
				len = strnlen(bps, precision);
    350a:	4651      	mov	r1, sl
    350c:	4648      	mov	r0, r9
    350e:	f01c fe37 	bl	20180 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
    3512:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
    3516:	46d8      	mov	r8, fp
			precision = -1;

			break;
    3518:	e072      	b.n	3600 <z_cbvprintf_impl+0x464>
				len = strlen(bps);
    351a:	4648      	mov	r0, r9
    351c:	f7fd fc48 	bl	db0 <strlen>
    3520:	e7f7      	b.n	3512 <z_cbvprintf_impl+0x376>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    3522:	9b04      	ldr	r3, [sp, #16]
    3524:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
    3528:	46d8      	mov	r8, fp
			bpe = buf + 1;
    352a:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
    352e:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
    3532:	e065      	b.n	3600 <z_cbvprintf_impl+0x464>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
    3534:	f018 0f08 	tst.w	r8, #8
    3538:	d105      	bne.n	3546 <z_cbvprintf_impl+0x3aa>
				sign = '+';
			} else if (conv->flag_space) {
    353a:	f018 0810 	ands.w	r8, r8, #16
    353e:	d004      	beq.n	354a <z_cbvprintf_impl+0x3ae>
				sign = ' ';
    3540:	f04f 0820 	mov.w	r8, #32
    3544:	e001      	b.n	354a <z_cbvprintf_impl+0x3ae>
				sign = '+';
    3546:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
    354a:	9a04      	ldr	r2, [sp, #16]
    354c:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
    354e:	2b00      	cmp	r3, #0
    3550:	db02      	blt.n	3558 <z_cbvprintf_impl+0x3bc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
    3552:	9204      	str	r2, [sp, #16]
    3554:	9305      	str	r3, [sp, #20]
    3556:	e008      	b.n	356a <z_cbvprintf_impl+0x3ce>
				value->uint = (uint_value_type)-sint;
    3558:	4252      	negs	r2, r2
    355a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    355e:	9204      	str	r2, [sp, #16]
    3560:	9305      	str	r3, [sp, #20]
				sign = '-';
    3562:	f04f 082d 	mov.w	r8, #45	; 0x2d
    3566:	e000      	b.n	356a <z_cbvprintf_impl+0x3ce>
		switch (conv->specifier) {
    3568:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
    356a:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    356e:	9300      	str	r3, [sp, #0]
    3570:	ab0a      	add	r3, sp, #40	; 0x28
    3572:	aa06      	add	r2, sp, #24
    3574:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    3578:	f7ff fdba 	bl	30f0 <encode_uint>
    357c:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
    357e:	f1ba 0f00 	cmp.w	sl, #0
    3582:	db6c      	blt.n	365e <z_cbvprintf_impl+0x4c2>
				size_t len = bpe - bps;
    3584:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    3588:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
    358c:	f89d 2018 	ldrb.w	r2, [sp, #24]
    3590:	f36f 1286 	bfc	r2, #6, #1
    3594:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
    3598:	459a      	cmp	sl, r3
    359a:	d963      	bls.n	3664 <z_cbvprintf_impl+0x4c8>
					conv->pad0_value = precision - (int)len;
    359c:	ebaa 0303 	sub.w	r3, sl, r3
    35a0:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
    35a2:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    35a6:	e02b      	b.n	3600 <z_cbvprintf_impl+0x464>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
    35a8:	9804      	ldr	r0, [sp, #16]
    35aa:	b928      	cbnz	r0, 35b8 <z_cbvprintf_impl+0x41c>
		char sign = 0;
    35ac:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
    35ae:	f8df a180 	ldr.w	sl, [pc, #384]	; 3730 <z_cbvprintf_impl+0x594>
			bps = "(nil)";
    35b2:	f1aa 0905 	sub.w	r9, sl, #5
    35b6:	e023      	b.n	3600 <z_cbvprintf_impl+0x464>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    35b8:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    35bc:	9300      	str	r3, [sp, #0]
    35be:	ab0a      	add	r3, sp, #40	; 0x28
    35c0:	aa06      	add	r2, sp, #24
    35c2:	2100      	movs	r1, #0
    35c4:	f7ff fd94 	bl	30f0 <encode_uint>
    35c8:	4681      	mov	r9, r0
				conv->altform_0c = true;
    35ca:	f89d 301a 	ldrb.w	r3, [sp, #26]
    35ce:	f043 0310 	orr.w	r3, r3, #16
    35d2:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
    35d6:	2378      	movs	r3, #120	; 0x78
    35d8:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
    35dc:	46d8      	mov	r8, fp
				goto prec_int_pad0;
    35de:	e7ce      	b.n	357e <z_cbvprintf_impl+0x3e2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
    35e0:	4622      	mov	r2, r4
    35e2:	9904      	ldr	r1, [sp, #16]
    35e4:	a806      	add	r0, sp, #24
    35e6:	f013 fe20 	bl	1722a <store_count>
		char sign = 0;
    35ea:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    35ec:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    35f0:	f04f 0900 	mov.w	r9, #0
			}

			break;
    35f4:	e004      	b.n	3600 <z_cbvprintf_impl+0x464>
		switch (conv->specifier) {
    35f6:	46d8      	mov	r8, fp
    35f8:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    35fc:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
    3600:	f1b9 0f00 	cmp.w	r9, #0
    3604:	f000 808d 	beq.w	3722 <z_cbvprintf_impl+0x586>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    3608:	ebaa 0209 	sub.w	r2, sl, r9
		int pad_len = 0;

		if (sign != 0) {
    360c:	f1b8 0f00 	cmp.w	r8, #0
    3610:	d000      	beq.n	3614 <z_cbvprintf_impl+0x478>
			nj_len += 1U;
    3612:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
    3614:	f89d 101a 	ldrb.w	r1, [sp, #26]
    3618:	f011 0f10 	tst.w	r1, #16
    361c:	d025      	beq.n	366a <z_cbvprintf_impl+0x4ce>
			nj_len += 2U;
    361e:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
    3620:	9b07      	ldr	r3, [sp, #28]
    3622:	4413      	add	r3, r2
		if (conv->pad_fp) {
    3624:	f011 0f40 	tst.w	r1, #64	; 0x40
    3628:	d001      	beq.n	362e <z_cbvprintf_impl+0x492>
			nj_len += conv->pad0_pre_exp;
    362a:	9a08      	ldr	r2, [sp, #32]
    362c:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    362e:	2f00      	cmp	r7, #0
    3630:	dd31      	ble.n	3696 <z_cbvprintf_impl+0x4fa>
			width -= (int)nj_len;
    3632:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
    3634:	f89d 3018 	ldrb.w	r3, [sp, #24]
    3638:	f013 0f04 	tst.w	r3, #4
    363c:	d12b      	bne.n	3696 <z_cbvprintf_impl+0x4fa>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    363e:	f013 0f40 	tst.w	r3, #64	; 0x40
    3642:	d017      	beq.n	3674 <z_cbvprintf_impl+0x4d8>
					if (sign != 0) {
    3644:	f1b8 0f00 	cmp.w	r8, #0
    3648:	d017      	beq.n	367a <z_cbvprintf_impl+0x4de>
						OUTC(sign);
    364a:	4629      	mov	r1, r5
    364c:	4640      	mov	r0, r8
    364e:	47b0      	blx	r6
    3650:	2800      	cmp	r0, #0
    3652:	db6a      	blt.n	372a <z_cbvprintf_impl+0x58e>
    3654:	3401      	adds	r4, #1
						sign = 0;
    3656:	46d8      	mov	r8, fp
					}
					pad = '0';
    3658:	f04f 0b30 	mov.w	fp, #48	; 0x30
    365c:	e00f      	b.n	367e <z_cbvprintf_impl+0x4e2>
		const char *bpe = buf + sizeof(buf);
    365e:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    3662:	e7cd      	b.n	3600 <z_cbvprintf_impl+0x464>
    3664:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    3668:	e7ca      	b.n	3600 <z_cbvprintf_impl+0x464>
		} else if (conv->altform_0) {
    366a:	f011 0f08 	tst.w	r1, #8
    366e:	d0d7      	beq.n	3620 <z_cbvprintf_impl+0x484>
			nj_len += 1U;
    3670:	3201      	adds	r2, #1
    3672:	e7d5      	b.n	3620 <z_cbvprintf_impl+0x484>
				char pad = ' ';
    3674:	f04f 0b20 	mov.w	fp, #32
    3678:	e001      	b.n	367e <z_cbvprintf_impl+0x4e2>
					pad = '0';
    367a:	f04f 0b30 	mov.w	fp, #48	; 0x30
    367e:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
    3680:	1e5f      	subs	r7, r3, #1
    3682:	2b00      	cmp	r3, #0
    3684:	dd07      	ble.n	3696 <z_cbvprintf_impl+0x4fa>
					OUTC(pad);
    3686:	4629      	mov	r1, r5
    3688:	4658      	mov	r0, fp
    368a:	47b0      	blx	r6
    368c:	2800      	cmp	r0, #0
    368e:	db4c      	blt.n	372a <z_cbvprintf_impl+0x58e>
    3690:	3401      	adds	r4, #1
				while (width-- > 0) {
    3692:	463b      	mov	r3, r7
    3694:	e7f4      	b.n	3680 <z_cbvprintf_impl+0x4e4>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    3696:	f1b8 0f00 	cmp.w	r8, #0
    369a:	d005      	beq.n	36a8 <z_cbvprintf_impl+0x50c>
			OUTC(sign);
    369c:	4629      	mov	r1, r5
    369e:	4640      	mov	r0, r8
    36a0:	47b0      	blx	r6
    36a2:	2800      	cmp	r0, #0
    36a4:	db41      	blt.n	372a <z_cbvprintf_impl+0x58e>
    36a6:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
    36a8:	f89d 301a 	ldrb.w	r3, [sp, #26]
    36ac:	f3c3 1200 	ubfx	r2, r3, #4, #1
    36b0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    36b4:	431a      	orrs	r2, r3
    36b6:	d005      	beq.n	36c4 <z_cbvprintf_impl+0x528>
				OUTC('0');
    36b8:	4629      	mov	r1, r5
    36ba:	2030      	movs	r0, #48	; 0x30
    36bc:	47b0      	blx	r6
    36be:	2800      	cmp	r0, #0
    36c0:	db33      	blt.n	372a <z_cbvprintf_impl+0x58e>
    36c2:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
    36c4:	f89d 301a 	ldrb.w	r3, [sp, #26]
    36c8:	f013 0f10 	tst.w	r3, #16
    36cc:	d006      	beq.n	36dc <z_cbvprintf_impl+0x540>
				OUTC(conv->specifier);
    36ce:	4629      	mov	r1, r5
    36d0:	f89d 001b 	ldrb.w	r0, [sp, #27]
    36d4:	47b0      	blx	r6
    36d6:	2800      	cmp	r0, #0
    36d8:	db27      	blt.n	372a <z_cbvprintf_impl+0x58e>
    36da:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
    36dc:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
    36de:	f103 38ff 	add.w	r8, r3, #4294967295
    36e2:	2b00      	cmp	r3, #0
    36e4:	dd07      	ble.n	36f6 <z_cbvprintf_impl+0x55a>
				OUTC('0');
    36e6:	4629      	mov	r1, r5
    36e8:	2030      	movs	r0, #48	; 0x30
    36ea:	47b0      	blx	r6
    36ec:	2800      	cmp	r0, #0
    36ee:	db1c      	blt.n	372a <z_cbvprintf_impl+0x58e>
    36f0:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    36f2:	4643      	mov	r3, r8
    36f4:	e7f3      	b.n	36de <z_cbvprintf_impl+0x542>
			}

			OUTS(bps, bpe);
    36f6:	4653      	mov	r3, sl
    36f8:	464a      	mov	r2, r9
    36fa:	4629      	mov	r1, r5
    36fc:	4630      	mov	r0, r6
    36fe:	f013 fdb3 	bl	17268 <outs>
    3702:	2800      	cmp	r0, #0
    3704:	db11      	blt.n	372a <z_cbvprintf_impl+0x58e>
    3706:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
    3708:	2f00      	cmp	r7, #0
    370a:	dd07      	ble.n	371c <z_cbvprintf_impl+0x580>
			OUTC(' ');
    370c:	4629      	mov	r1, r5
    370e:	2020      	movs	r0, #32
    3710:	47b0      	blx	r6
    3712:	2800      	cmp	r0, #0
    3714:	db09      	blt.n	372a <z_cbvprintf_impl+0x58e>
    3716:	3401      	adds	r4, #1
			--width;
    3718:	3f01      	subs	r7, #1
    371a:	e7f5      	b.n	3708 <z_cbvprintf_impl+0x56c>
		fp = extract_conversion(conv, sp);
    371c:	f8dd 9008 	ldr.w	r9, [sp, #8]
    3720:	e544      	b.n	31ac <z_cbvprintf_impl+0x10>
    3722:	f8dd 9008 	ldr.w	r9, [sp, #8]
    3726:	e541      	b.n	31ac <z_cbvprintf_impl+0x10>
		}
	}

	return count;
    3728:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
    372a:	b011      	add	sp, #68	; 0x44
    372c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3730:	00020efd 	.word	0x00020efd

00003734 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    3734:	f00c b9ce 	b.w	fad4 <SystemInit>

00003738 <msg_process>:
		return true;
	}
}

static void msg_process(union log_msg_generic *msg)
{
    3738:	b538      	push	{r3, r4, r5, lr}
    373a:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    373c:	4c0b      	ldr	r4, [pc, #44]	; (376c <msg_process+0x34>)
    373e:	e000      	b.n	3742 <msg_process+0xa>
    3740:	3410      	adds	r4, #16
    3742:	4b0b      	ldr	r3, [pc, #44]	; (3770 <msg_process+0x38>)
    3744:	429c      	cmp	r4, r3
    3746:	d20f      	bcs.n	3768 <msg_process+0x30>
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    3748:	6863      	ldr	r3, [r4, #4]
    374a:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend) &&
    374c:	2b00      	cmp	r3, #0
    374e:	d0f7      	beq.n	3740 <msg_process+0x8>
		    msg_filter_check(backend, msg)) {
    3750:	4629      	mov	r1, r5
    3752:	4620      	mov	r0, r4
    3754:	f014 f8f2 	bl	1793c <msg_filter_check>
		if (log_backend_is_active(backend) &&
    3758:	2800      	cmp	r0, #0
    375a:	d0f1      	beq.n	3740 <msg_process+0x8>
	backend->api->process(backend, msg);
    375c:	6823      	ldr	r3, [r4, #0]
    375e:	681b      	ldr	r3, [r3, #0]
    3760:	4629      	mov	r1, r5
    3762:	4620      	mov	r0, r4
    3764:	4798      	blx	r3
}
    3766:	e7eb      	b.n	3740 <msg_process+0x8>
			log_backend_msg_process(backend, msg);
		}
	}
}
    3768:	bd38      	pop	{r3, r4, r5, pc}
    376a:	bf00      	nop
    376c:	00020ac8 	.word	0x00020ac8
    3770:	00020ae8 	.word	0x00020ae8

00003774 <log_backend_notify_all>:
	return mpsc_pbuf_get_max_utilization(&log_buffer, max);
}

static void log_backend_notify_all(enum log_backend_evt event,
				   union log_backend_evt_arg *arg)
{
    3774:	b570      	push	{r4, r5, r6, lr}
    3776:	4606      	mov	r6, r0
    3778:	460d      	mov	r5, r1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    377a:	4c08      	ldr	r4, [pc, #32]	; (379c <log_backend_notify_all+0x28>)
    377c:	e004      	b.n	3788 <log_backend_notify_all+0x14>
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
		backend->api->notify(backend, event, arg);
    377e:	462a      	mov	r2, r5
    3780:	4631      	mov	r1, r6
    3782:	4620      	mov	r0, r4
    3784:	4798      	blx	r3
    3786:	3410      	adds	r4, #16
    3788:	4b05      	ldr	r3, [pc, #20]	; (37a0 <log_backend_notify_all+0x2c>)
    378a:	429c      	cmp	r4, r3
    378c:	d204      	bcs.n	3798 <log_backend_notify_all+0x24>
	if (backend->api->notify) {
    378e:	6823      	ldr	r3, [r4, #0]
    3790:	699b      	ldr	r3, [r3, #24]
    3792:	2b00      	cmp	r3, #0
    3794:	d1f3      	bne.n	377e <log_backend_notify_all+0xa>
    3796:	e7f6      	b.n	3786 <log_backend_notify_all+0x12>
		log_backend_notify(backend, event, arg);
	}
}
    3798:	bd70      	pop	{r4, r5, r6, pc}
    379a:	bf00      	nop
    379c:	00020ac8 	.word	0x00020ac8
    37a0:	00020ae8 	.word	0x00020ae8

000037a4 <activate_foreach_backend>:
{
    37a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    37a8:	4607      	mov	r7, r0
	uint32_t mask_cpy = mask;
    37aa:	4605      	mov	r5, r0
	while (mask_cpy) {
    37ac:	e00a      	b.n	37c4 <activate_foreach_backend+0x20>
			mask &= ~BIT(i);
    37ae:	ea07 0708 	and.w	r7, r7, r8
					   backend->cb->ctx,
    37b2:	4b14      	ldr	r3, [pc, #80]	; (3804 <activate_foreach_backend+0x60>)
    37b4:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    37b8:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
    37ba:	2204      	movs	r2, #4
    37bc:	6819      	ldr	r1, [r3, #0]
    37be:	4620      	mov	r0, r4
    37c0:	f000 faa4 	bl	3d0c <log_backend_enable>
	while (mask_cpy) {
    37c4:	b1d5      	cbz	r5, 37fc <activate_foreach_backend+0x58>
		uint32_t i = __builtin_ctz(mask_cpy);
    37c6:	fa95 f6a5 	rbit	r6, r5
    37ca:	fab6 f686 	clz	r6, r6
	STRUCT_SECTION_GET(log_backend, idx, &backend);
    37ce:	4c0d      	ldr	r4, [pc, #52]	; (3804 <activate_foreach_backend+0x60>)
    37d0:	eb04 1406 	add.w	r4, r4, r6, lsl #4
		mask_cpy &= ~BIT(i);
    37d4:	2301      	movs	r3, #1
    37d6:	40b3      	lsls	r3, r6
    37d8:	ea6f 0803 	mvn.w	r8, r3
    37dc:	ea25 0503 	bic.w	r5, r5, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    37e0:	7b23      	ldrb	r3, [r4, #12]
    37e2:	2b00      	cmp	r3, #0
    37e4:	d0ee      	beq.n	37c4 <activate_foreach_backend+0x20>
	if (backend->api->is_ready != NULL) {
    37e6:	0133      	lsls	r3, r6, #4
    37e8:	4a06      	ldr	r2, [pc, #24]	; (3804 <activate_foreach_backend+0x60>)
    37ea:	58d3      	ldr	r3, [r2, r3]
    37ec:	691b      	ldr	r3, [r3, #16]
    37ee:	2b00      	cmp	r3, #0
    37f0:	d0dd      	beq.n	37ae <activate_foreach_backend+0xa>
		return backend->api->is_ready(backend);
    37f2:	4620      	mov	r0, r4
    37f4:	4798      	blx	r3
    37f6:	2800      	cmp	r0, #0
    37f8:	d1e4      	bne.n	37c4 <activate_foreach_backend+0x20>
    37fa:	e7d8      	b.n	37ae <activate_foreach_backend+0xa>
}
    37fc:	4638      	mov	r0, r7
    37fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3802:	bf00      	nop
    3804:	00020ac8 	.word	0x00020ac8

00003808 <z_log_init>:
{
    3808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    380c:	4680      	mov	r8, r0
    380e:	460f      	mov	r7, r1
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    3810:	4b20      	ldr	r3, [pc, #128]	; (3894 <z_log_init+0x8c>)
    3812:	f3bf 8f5b 	dmb	ish
    3816:	e853 5f00 	ldrex	r5, [r3]
    381a:	1c6a      	adds	r2, r5, #1
    381c:	e843 2100 	strex	r1, r2, [r3]
    3820:	2900      	cmp	r1, #0
    3822:	d1f8      	bne.n	3816 <z_log_init+0xe>
    3824:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    3828:	2d00      	cmp	r5, #0
    382a:	d12f      	bne.n	388c <z_log_init+0x84>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    382c:	4c1a      	ldr	r4, [pc, #104]	; (3898 <z_log_init+0x90>)
	int i = 0;
    382e:	2600      	movs	r6, #0
    3830:	e007      	b.n	3842 <z_log_init+0x3a>
						   backend->cb->ctx,
    3832:	6863      	ldr	r3, [r4, #4]
				log_backend_enable(backend,
    3834:	2204      	movs	r2, #4
    3836:	6819      	ldr	r1, [r3, #0]
    3838:	4620      	mov	r0, r4
    383a:	f000 fa67 	bl	3d0c <log_backend_enable>
			i++;
    383e:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    3840:	3410      	adds	r4, #16
    3842:	4b16      	ldr	r3, [pc, #88]	; (389c <z_log_init+0x94>)
    3844:	429c      	cmp	r4, r3
    3846:	d213      	bcs.n	3870 <z_log_init+0x68>
		if (backend->autostart) {
    3848:	7b23      	ldrb	r3, [r4, #12]
    384a:	2b00      	cmp	r3, #0
    384c:	d0f8      	beq.n	3840 <z_log_init+0x38>
	if (backend->api->init) {
    384e:	6823      	ldr	r3, [r4, #0]
    3850:	68db      	ldr	r3, [r3, #12]
    3852:	b10b      	cbz	r3, 3858 <z_log_init+0x50>
		backend->api->init(backend);
    3854:	4620      	mov	r0, r4
    3856:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
    3858:	6823      	ldr	r3, [r4, #0]
    385a:	691b      	ldr	r3, [r3, #16]
    385c:	2b00      	cmp	r3, #0
    385e:	d0e8      	beq.n	3832 <z_log_init+0x2a>
		return backend->api->is_ready(backend);
    3860:	4620      	mov	r0, r4
    3862:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    3864:	2800      	cmp	r0, #0
    3866:	d0e4      	beq.n	3832 <z_log_init+0x2a>
				mask |= BIT(i);
    3868:	2301      	movs	r3, #1
    386a:	40b3      	lsls	r3, r6
    386c:	431d      	orrs	r5, r3
    386e:	e7e6      	b.n	383e <z_log_init+0x36>
	if (blocking) {
    3870:	f1b8 0f00 	cmp.w	r8, #0
    3874:	d00b      	beq.n	388e <z_log_init+0x86>
		while (mask) {
    3876:	b155      	cbz	r5, 388e <z_log_init+0x86>
			mask = activate_foreach_backend(mask);
    3878:	4628      	mov	r0, r5
    387a:	f7ff ff93 	bl	37a4 <activate_foreach_backend>
    387e:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    3880:	2f00      	cmp	r7, #0
    3882:	d0f8      	beq.n	3876 <z_log_init+0x6e>
				k_msleep(10);
    3884:	200a      	movs	r0, #10
    3886:	f014 f85f 	bl	17948 <k_msleep>
    388a:	e7f4      	b.n	3876 <z_log_init+0x6e>
		return 0;
    388c:	2500      	movs	r5, #0
}
    388e:	4628      	mov	r0, r5
    3890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3894:	20001fe4 	.word	0x20001fe4
    3898:	00020ac8 	.word	0x00020ac8
    389c:	00020ae8 	.word	0x00020ae8

000038a0 <thread_set>:
{
    38a0:	b508      	push	{r3, lr}
	proc_tid = process_tid;
    38a2:	4b06      	ldr	r3, [pc, #24]	; (38bc <thread_set+0x1c>)
    38a4:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    38a6:	b118      	cbz	r0, 38b0 <thread_set+0x10>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    38a8:	4b05      	ldr	r3, [pc, #20]	; (38c0 <thread_set+0x20>)
    38aa:	681b      	ldr	r3, [r3, #0]
	    process_tid &&
    38ac:	2b09      	cmp	r3, #9
    38ae:	dc00      	bgt.n	38b2 <thread_set+0x12>
}
    38b0:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
    38b2:	4804      	ldr	r0, [pc, #16]	; (38c4 <thread_set+0x24>)
    38b4:	f00d fcac 	bl	11210 <z_impl_k_sem_give>
}
    38b8:	e7fa      	b.n	38b0 <thread_set+0x10>
    38ba:	bf00      	nop
    38bc:	20001fd8 	.word	0x20001fd8
    38c0:	20001fe0 	.word	0x20001fe0
    38c4:	2000056c 	.word	0x2000056c

000038c8 <log_process_thread_timer_expiry_fn>:

static void log_process_thread_timer_expiry_fn(struct k_timer *timer)
{
    38c8:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
    38ca:	4802      	ldr	r0, [pc, #8]	; (38d4 <log_process_thread_timer_expiry_fn+0xc>)
    38cc:	f00d fca0 	bl	11210 <z_impl_k_sem_give>
	k_sem_give(&log_process_thread_sem);
}
    38d0:	bd08      	pop	{r3, pc}
    38d2:	bf00      	nop
    38d4:	2000056c 	.word	0x2000056c

000038d8 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    38d8:	b530      	push	{r4, r5, lr}
    38da:	b089      	sub	sp, #36	; 0x24
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    38dc:	2200      	movs	r2, #0
    38de:	490f      	ldr	r1, [pc, #60]	; (391c <enable_logger+0x44>)
    38e0:	480f      	ldr	r0, [pc, #60]	; (3920 <enable_logger+0x48>)
    38e2:	f01c f872 	bl	1f9ca <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    38e6:	4d0f      	ldr	r5, [pc, #60]	; (3924 <enable_logger+0x4c>)
    38e8:	2200      	movs	r2, #0
    38ea:	2300      	movs	r3, #0
    38ec:	e9cd 2306 	strd	r2, r3, [sp, #24]
    38f0:	2400      	movs	r4, #0
    38f2:	9404      	str	r4, [sp, #16]
    38f4:	230e      	movs	r3, #14
    38f6:	9303      	str	r3, [sp, #12]
    38f8:	9402      	str	r4, [sp, #8]
    38fa:	9401      	str	r4, [sp, #4]
    38fc:	9400      	str	r4, [sp, #0]
    38fe:	4b0a      	ldr	r3, [pc, #40]	; (3928 <enable_logger+0x50>)
    3900:	f44f 7240 	mov.w	r2, #768	; 0x300
    3904:	4909      	ldr	r1, [pc, #36]	; (392c <enable_logger+0x54>)
    3906:	4628      	mov	r0, r5
    3908:	f01b fb53 	bl	1efb2 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    390c:	4908      	ldr	r1, [pc, #32]	; (3930 <enable_logger+0x58>)
    390e:	4628      	mov	r0, r5
    3910:	f01b fb3b 	bl	1ef8a <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
    3914:	4620      	mov	r0, r4
    3916:	b009      	add	sp, #36	; 0x24
    3918:	bd30      	pop	{r4, r5, pc}
    391a:	bf00      	nop
    391c:	000038c9 	.word	0x000038c9
    3920:	20000b40 	.word	0x20000b40
    3924:	200006b8 	.word	0x200006b8
    3928:	00003c6d 	.word	0x00003c6d
    392c:	200042b8 	.word	0x200042b8
    3930:	00020f00 	.word	0x00020f00

00003934 <log_format_func_t_get>:
}
    3934:	4b01      	ldr	r3, [pc, #4]	; (393c <log_format_func_t_get+0x8>)
    3936:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    393a:	4770      	bx	lr
    393c:	00020f1c 	.word	0x00020f1c

00003940 <log_set_timestamp_func>:
	if (timestamp_getter == NULL) {
    3940:	b148      	cbz	r0, 3956 <log_set_timestamp_func+0x16>
{
    3942:	b508      	push	{r3, lr}
	timestamp_func = timestamp_getter;
    3944:	4a05      	ldr	r2, [pc, #20]	; (395c <log_set_timestamp_func+0x1c>)
    3946:	6010      	str	r0, [r2, #0]
	timestamp_freq = freq;
    3948:	4b05      	ldr	r3, [pc, #20]	; (3960 <log_set_timestamp_func+0x20>)
    394a:	6019      	str	r1, [r3, #0]
		log_output_timestamp_freq_set(freq);
    394c:	4608      	mov	r0, r1
    394e:	f000 fc03 	bl	4158 <log_output_timestamp_freq_set>
	return 0;
    3952:	2000      	movs	r0, #0
}
    3954:	bd08      	pop	{r3, pc}
		return -EINVAL;
    3956:	f06f 0015 	mvn.w	r0, #21
}
    395a:	4770      	bx	lr
    395c:	20000004 	.word	0x20000004
    3960:	20001fd4 	.word	0x20001fd4

00003964 <z_log_notify_backend_enabled>:
{
    3964:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    3966:	4b05      	ldr	r3, [pc, #20]	; (397c <z_log_notify_backend_enabled+0x18>)
    3968:	781b      	ldrb	r3, [r3, #0]
    396a:	b11b      	cbz	r3, 3974 <z_log_notify_backend_enabled+0x10>
	backend_attached = true;
    396c:	4b03      	ldr	r3, [pc, #12]	; (397c <z_log_notify_backend_enabled+0x18>)
    396e:	2201      	movs	r2, #1
    3970:	701a      	strb	r2, [r3, #0]
}
    3972:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
    3974:	4802      	ldr	r0, [pc, #8]	; (3980 <z_log_notify_backend_enabled+0x1c>)
    3976:	f00d fc4b 	bl	11210 <z_impl_k_sem_give>
}
    397a:	e7f7      	b.n	396c <z_log_notify_backend_enabled+0x8>
    397c:	200042a4 	.word	0x200042a4
    3980:	2000056c 	.word	0x2000056c

00003984 <z_log_dropped>:
    3984:	4b0d      	ldr	r3, [pc, #52]	; (39bc <z_log_dropped+0x38>)
    3986:	f3bf 8f5b 	dmb	ish
    398a:	e853 1f00 	ldrex	r1, [r3]
    398e:	3101      	adds	r1, #1
    3990:	e843 1200 	strex	r2, r1, [r3]
    3994:	2a00      	cmp	r2, #0
    3996:	d1f8      	bne.n	398a <z_log_dropped+0x6>
    3998:	f3bf 8f5b 	dmb	ish
	if (buffered) {
    399c:	b900      	cbnz	r0, 39a0 <z_log_dropped+0x1c>
}
    399e:	4770      	bx	lr
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    39a0:	4b07      	ldr	r3, [pc, #28]	; (39c0 <z_log_dropped+0x3c>)
    39a2:	f3bf 8f5b 	dmb	ish
    39a6:	e853 1f00 	ldrex	r1, [r3]
    39aa:	3901      	subs	r1, #1
    39ac:	e843 1200 	strex	r2, r1, [r3]
    39b0:	2a00      	cmp	r2, #0
    39b2:	d1f8      	bne.n	39a6 <z_log_dropped+0x22>
    39b4:	f3bf 8f5b 	dmb	ish
    39b8:	e7f1      	b.n	399e <z_log_dropped+0x1a>
    39ba:	bf00      	nop
    39bc:	20001fdc 	.word	0x20001fdc
    39c0:	20001fe0 	.word	0x20001fe0

000039c4 <z_log_dropped_read_and_clear>:
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    39c4:	4b06      	ldr	r3, [pc, #24]	; (39e0 <z_log_dropped_read_and_clear+0x1c>)
}
    39c6:	2000      	movs	r0, #0
    39c8:	4601      	mov	r1, r0
    39ca:	f3bf 8f5b 	dmb	ish
    39ce:	e853 0f00 	ldrex	r0, [r3]
    39d2:	e843 1200 	strex	r2, r1, [r3]
    39d6:	2a00      	cmp	r2, #0
    39d8:	d1f9      	bne.n	39ce <z_log_dropped_read_and_clear+0xa>
    39da:	f3bf 8f5b 	dmb	ish
    39de:	4770      	bx	lr
    39e0:	20001fdc 	.word	0x20001fdc

000039e4 <dropped_notify>:
{
    39e4:	b538      	push	{r3, r4, r5, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    39e6:	f7ff ffed 	bl	39c4 <z_log_dropped_read_and_clear>
    39ea:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    39ec:	4c09      	ldr	r4, [pc, #36]	; (3a14 <dropped_notify+0x30>)
    39ee:	e000      	b.n	39f2 <dropped_notify+0xe>
    39f0:	3410      	adds	r4, #16
    39f2:	4b09      	ldr	r3, [pc, #36]	; (3a18 <dropped_notify+0x34>)
    39f4:	429c      	cmp	r4, r3
    39f6:	d20b      	bcs.n	3a10 <dropped_notify+0x2c>
	return backend->cb->active;
    39f8:	6863      	ldr	r3, [r4, #4]
    39fa:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    39fc:	2b00      	cmp	r3, #0
    39fe:	d0f7      	beq.n	39f0 <dropped_notify+0xc>
	if (backend->api->dropped != NULL) {
    3a00:	6823      	ldr	r3, [r4, #0]
    3a02:	685b      	ldr	r3, [r3, #4]
    3a04:	2b00      	cmp	r3, #0
    3a06:	d0f3      	beq.n	39f0 <dropped_notify+0xc>
		backend->api->dropped(backend, cnt);
    3a08:	4629      	mov	r1, r5
    3a0a:	4620      	mov	r0, r4
    3a0c:	4798      	blx	r3
    3a0e:	e7ef      	b.n	39f0 <dropped_notify+0xc>
}
    3a10:	bd38      	pop	{r3, r4, r5, pc}
    3a12:	bf00      	nop
    3a14:	00020ac8 	.word	0x00020ac8
    3a18:	00020ae8 	.word	0x00020ae8

00003a1c <z_log_dropped_pending>:
	return dropped_cnt > 0;
    3a1c:	4b03      	ldr	r3, [pc, #12]	; (3a2c <z_log_dropped_pending+0x10>)
    3a1e:	6818      	ldr	r0, [r3, #0]
}
    3a20:	2800      	cmp	r0, #0
    3a22:	bfd4      	ite	le
    3a24:	2000      	movle	r0, #0
    3a26:	2001      	movgt	r0, #1
    3a28:	4770      	bx	lr
    3a2a:	bf00      	nop
    3a2c:	20001fdc 	.word	0x20001fdc

00003a30 <z_log_msg_init>:
{
    3a30:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    3a32:	4c04      	ldr	r4, [pc, #16]	; (3a44 <z_log_msg_init+0x14>)
    3a34:	4904      	ldr	r1, [pc, #16]	; (3a48 <z_log_msg_init+0x18>)
    3a36:	4620      	mov	r0, r4
    3a38:	f013 fdda 	bl	175f0 <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
    3a3c:	4b03      	ldr	r3, [pc, #12]	; (3a4c <z_log_msg_init+0x1c>)
    3a3e:	601c      	str	r4, [r3, #0]
}
    3a40:	bd10      	pop	{r4, pc}
    3a42:	bf00      	nop
    3a44:	2000038c 	.word	0x2000038c
    3a48:	00020f08 	.word	0x00020f08
    3a4c:	20001fd0 	.word	0x20001fd0

00003a50 <log_core_init>:
{
    3a50:	b508      	push	{r3, lr}
	panic_mode = false;
    3a52:	2300      	movs	r3, #0
    3a54:	4a05      	ldr	r2, [pc, #20]	; (3a6c <log_core_init+0x1c>)
    3a56:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    3a58:	4a05      	ldr	r2, [pc, #20]	; (3a70 <log_core_init+0x20>)
    3a5a:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
    3a5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    3a60:	4804      	ldr	r0, [pc, #16]	; (3a74 <log_core_init+0x24>)
    3a62:	f7ff ff6d 	bl	3940 <log_set_timestamp_func>
		z_log_msg_init();
    3a66:	f7ff ffe3 	bl	3a30 <z_log_msg_init>
}
    3a6a:	bd08      	pop	{r3, pc}
    3a6c:	200042a5 	.word	0x200042a5
    3a70:	20001fdc 	.word	0x20001fdc
    3a74:	00017941 	.word	0x00017941

00003a78 <z_log_msg_alloc>:
{
    3a78:	b508      	push	{r3, lr}
    3a7a:	4601      	mov	r1, r0
	return msg_alloc(&log_buffer, wlen);
    3a7c:	4801      	ldr	r0, [pc, #4]	; (3a84 <z_log_msg_alloc+0xc>)
    3a7e:	f013 ff79 	bl	17974 <msg_alloc>
}
    3a82:	bd08      	pop	{r3, pc}
    3a84:	2000038c 	.word	0x2000038c

00003a88 <z_log_msg_local_claim>:
{
    3a88:	b508      	push	{r3, lr}
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
    3a8a:	4802      	ldr	r0, [pc, #8]	; (3a94 <z_log_msg_local_claim+0xc>)
    3a8c:	f013 fe88 	bl	177a0 <mpsc_pbuf_claim>
}
    3a90:	bd08      	pop	{r3, pc}
    3a92:	bf00      	nop
    3a94:	2000038c 	.word	0x2000038c

00003a98 <z_log_msg_free>:
{
    3a98:	b508      	push	{r3, lr}
    3a9a:	4601      	mov	r1, r0
	msg_free(curr_log_buffer, msg);
    3a9c:	4b02      	ldr	r3, [pc, #8]	; (3aa8 <z_log_msg_free+0x10>)
    3a9e:	6818      	ldr	r0, [r3, #0]
    3aa0:	f013 ff6e 	bl	17980 <msg_free>
}
    3aa4:	bd08      	pop	{r3, pc}
    3aa6:	bf00      	nop
    3aa8:	20001fd0 	.word	0x20001fd0

00003aac <z_log_msg_pending>:
{
    3aac:	b508      	push	{r3, lr}
		return msg_pending(&log_buffer);
    3aae:	4802      	ldr	r0, [pc, #8]	; (3ab8 <z_log_msg_pending+0xc>)
    3ab0:	f013 ff6a 	bl	17988 <msg_pending>
}
    3ab4:	bd08      	pop	{r3, pc}
    3ab6:	bf00      	nop
    3ab8:	2000038c 	.word	0x2000038c

00003abc <z_impl_log_process>:
{
    3abc:	b510      	push	{r4, lr}
    3abe:	b082      	sub	sp, #8
	k_timeout_t backoff = K_NO_WAIT;
    3ac0:	2200      	movs	r2, #0
    3ac2:	2300      	movs	r3, #0
    3ac4:	e9cd 2300 	strd	r2, r3, [sp]
	if (!backend_attached) {
    3ac8:	4b28      	ldr	r3, [pc, #160]	; (3b6c <z_impl_log_process+0xb0>)
    3aca:	7818      	ldrb	r0, [r3, #0]
    3acc:	b908      	cbnz	r0, 3ad2 <z_impl_log_process+0x16>
}
    3ace:	b002      	add	sp, #8
    3ad0:	bd10      	pop	{r4, pc}
	msg = z_log_msg_claim(&backoff);
    3ad2:	4668      	mov	r0, sp
    3ad4:	f013 ff70 	bl	179b8 <z_log_msg_claim>
	if (msg) {
    3ad8:	4604      	mov	r4, r0
    3ada:	b188      	cbz	r0, 3b00 <z_impl_log_process+0x44>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    3adc:	4b24      	ldr	r3, [pc, #144]	; (3b70 <z_impl_log_process+0xb4>)
    3ade:	f3bf 8f5b 	dmb	ish
    3ae2:	e853 1f00 	ldrex	r1, [r3]
    3ae6:	3901      	subs	r1, #1
    3ae8:	e843 1200 	strex	r2, r1, [r3]
    3aec:	2a00      	cmp	r2, #0
    3aee:	d1f8      	bne.n	3ae2 <z_impl_log_process+0x26>
    3af0:	f3bf 8f5b 	dmb	ish
		msg_process(msg);
    3af4:	4620      	mov	r0, r4
    3af6:	f7ff fe1f 	bl	3738 <msg_process>
		z_log_msg_free(msg);
    3afa:	4620      	mov	r0, r4
    3afc:	f7ff ffcc 	bl	3a98 <z_log_msg_free>
		bool dropped_pend = z_log_dropped_pending();
    3b00:	f7ff ff8c 	bl	3a1c <z_log_dropped_pending>
		if ((dropped_pend || unordered_pend) &&
    3b04:	b958      	cbnz	r0, 3b1e <z_impl_log_process+0x62>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
    3b06:	4a1b      	ldr	r2, [pc, #108]	; (3b74 <z_impl_log_process+0xb8>)
    3b08:	6813      	ldr	r3, [r2, #0]
    3b0a:	6851      	ldr	r1, [r2, #4]
    3b0c:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
    3b10:	f141 0100 	adc.w	r1, r1, #0
    3b14:	6013      	str	r3, [r2, #0]
    3b16:	6051      	str	r1, [r2, #4]
	return z_log_msg_pending();
    3b18:	f7ff ffc8 	bl	3aac <z_log_msg_pending>
    3b1c:	e7d7      	b.n	3ace <z_impl_log_process+0x12>
	return z_impl_k_uptime_ticks();
    3b1e:	f01b ff11 	bl	1f944 <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    3b22:	014a      	lsls	r2, r1, #5
    3b24:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
    3b28:	0143      	lsls	r3, r0, #5
    3b2a:	1a1b      	subs	r3, r3, r0
    3b2c:	eb62 0201 	sbc.w	r2, r2, r1
    3b30:	0092      	lsls	r2, r2, #2
    3b32:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
    3b36:	009b      	lsls	r3, r3, #2
    3b38:	181b      	adds	r3, r3, r0
    3b3a:	eb42 0201 	adc.w	r2, r2, r1
    3b3e:	00d2      	lsls	r2, r2, #3
    3b40:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
    3b44:	f3c3 3310 	ubfx	r3, r3, #12, #17
    3b48:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
    3b4c:	0bd2      	lsrs	r2, r2, #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    3b4e:	4809      	ldr	r0, [pc, #36]	; (3b74 <z_impl_log_process+0xb8>)
    3b50:	6801      	ldr	r1, [r0, #0]
    3b52:	6840      	ldr	r0, [r0, #4]
    3b54:	1a5b      	subs	r3, r3, r1
    3b56:	eb62 0200 	sbc.w	r2, r2, r0
		if ((dropped_pend || unordered_pend) &&
    3b5a:	f240 31e9 	movw	r1, #1001	; 0x3e9
    3b5e:	428b      	cmp	r3, r1
    3b60:	f172 0200 	sbcs.w	r2, r2, #0
    3b64:	d3cf      	bcc.n	3b06 <z_impl_log_process+0x4a>
				dropped_notify();
    3b66:	f7ff ff3d 	bl	39e4 <dropped_notify>
			if (unordered_pend) {
    3b6a:	e7cc      	b.n	3b06 <z_impl_log_process+0x4a>
    3b6c:	200042a4 	.word	0x200042a4
    3b70:	20001fe0 	.word	0x20001fe0
    3b74:	20000b38 	.word	0x20000b38

00003b78 <z_impl_log_panic>:
	if (panic_mode) {
    3b78:	4b0f      	ldr	r3, [pc, #60]	; (3bb8 <z_impl_log_panic+0x40>)
    3b7a:	781b      	ldrb	r3, [r3, #0]
    3b7c:	b103      	cbz	r3, 3b80 <z_impl_log_panic+0x8>
    3b7e:	4770      	bx	lr
{
    3b80:	b510      	push	{r4, lr}
	(void)z_log_init(true, false);
    3b82:	2100      	movs	r1, #0
    3b84:	2001      	movs	r0, #1
    3b86:	f7ff fe3f 	bl	3808 <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    3b8a:	4c0c      	ldr	r4, [pc, #48]	; (3bbc <z_impl_log_panic+0x44>)
    3b8c:	e000      	b.n	3b90 <z_impl_log_panic+0x18>
    3b8e:	3410      	adds	r4, #16
    3b90:	4b0b      	ldr	r3, [pc, #44]	; (3bc0 <z_impl_log_panic+0x48>)
    3b92:	429c      	cmp	r4, r3
    3b94:	d208      	bcs.n	3ba8 <z_impl_log_panic+0x30>
	return backend->cb->active;
    3b96:	6863      	ldr	r3, [r4, #4]
    3b98:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    3b9a:	2b00      	cmp	r3, #0
    3b9c:	d0f7      	beq.n	3b8e <z_impl_log_panic+0x16>
	backend->api->panic(backend);
    3b9e:	6823      	ldr	r3, [r4, #0]
    3ba0:	689b      	ldr	r3, [r3, #8]
    3ba2:	4620      	mov	r0, r4
    3ba4:	4798      	blx	r3
}
    3ba6:	e7f2      	b.n	3b8e <z_impl_log_panic+0x16>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
    3ba8:	f7ff ff88 	bl	3abc <z_impl_log_process>
		while (log_process() == true) {
    3bac:	2800      	cmp	r0, #0
    3bae:	d1fb      	bne.n	3ba8 <z_impl_log_panic+0x30>
	panic_mode = true;
    3bb0:	4b01      	ldr	r3, [pc, #4]	; (3bb8 <z_impl_log_panic+0x40>)
    3bb2:	2201      	movs	r2, #1
    3bb4:	701a      	strb	r2, [r3, #0]
}
    3bb6:	bd10      	pop	{r4, pc}
    3bb8:	200042a5 	.word	0x200042a5
    3bbc:	00020ac8 	.word	0x00020ac8
    3bc0:	00020ae8 	.word	0x00020ae8

00003bc4 <z_log_msg_post_finalize>:
{
    3bc4:	b510      	push	{r4, lr}
    3bc6:	b082      	sub	sp, #8
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    3bc8:	4b1b      	ldr	r3, [pc, #108]	; (3c38 <z_log_msg_post_finalize+0x74>)
    3bca:	f3bf 8f5b 	dmb	ish
    3bce:	e853 2f00 	ldrex	r2, [r3]
    3bd2:	1c51      	adds	r1, r2, #1
    3bd4:	e843 1000 	strex	r0, r1, [r3]
    3bd8:	2800      	cmp	r0, #0
    3bda:	d1f8      	bne.n	3bce <z_log_msg_post_finalize+0xa>
    3bdc:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
    3be0:	4b16      	ldr	r3, [pc, #88]	; (3c3c <z_log_msg_post_finalize+0x78>)
    3be2:	781b      	ldrb	r3, [r3, #0]
    3be4:	b963      	cbnz	r3, 3c00 <z_log_msg_post_finalize+0x3c>
	} else if (proc_tid != NULL) {
    3be6:	4b16      	ldr	r3, [pc, #88]	; (3c40 <z_log_msg_post_finalize+0x7c>)
    3be8:	681b      	ldr	r3, [r3, #0]
    3bea:	b1bb      	cbz	r3, 3c1c <z_log_msg_post_finalize+0x58>
		if (cnt == 0) {
    3bec:	b1c2      	cbz	r2, 3c20 <z_log_msg_post_finalize+0x5c>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    3bee:	2a0a      	cmp	r2, #10
    3bf0:	d114      	bne.n	3c1c <z_log_msg_post_finalize+0x58>
	z_impl_k_timer_stop(timer);
    3bf2:	4814      	ldr	r0, [pc, #80]	; (3c44 <z_log_msg_post_finalize+0x80>)
    3bf4:	f01b fef5 	bl	1f9e2 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    3bf8:	4813      	ldr	r0, [pc, #76]	; (3c48 <z_log_msg_post_finalize+0x84>)
    3bfa:	f00d fb09 	bl	11210 <z_impl_k_sem_give>
}
    3bfe:	e00d      	b.n	3c1c <z_log_msg_post_finalize+0x58>
    3c00:	f04f 0320 	mov.w	r3, #32
    3c04:	f3ef 8411 	mrs	r4, BASEPRI
    3c08:	f383 8812 	msr	BASEPRI_MAX, r3
    3c0c:	f3bf 8f6f 	isb	sy
    3c10:	f7ff ff54 	bl	3abc <z_impl_log_process>
	__asm__ volatile(
    3c14:	f384 8811 	msr	BASEPRI, r4
    3c18:	f3bf 8f6f 	isb	sy
    3c1c:	b002      	add	sp, #8
    3c1e:	bd10      	pop	{r4, pc}
	z_impl_k_timer_start(timer, duration, period);
    3c20:	2200      	movs	r2, #0
    3c22:	2300      	movs	r3, #0
    3c24:	e9cd 2300 	strd	r2, r3, [sp]
    3c28:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    3c2c:	2300      	movs	r3, #0
    3c2e:	4805      	ldr	r0, [pc, #20]	; (3c44 <z_log_msg_post_finalize+0x80>)
    3c30:	f00e fad0 	bl	121d4 <z_impl_k_timer_start>
    3c34:	e7f2      	b.n	3c1c <z_log_msg_post_finalize+0x58>
    3c36:	bf00      	nop
    3c38:	20001fe0 	.word	0x20001fe0
    3c3c:	200042a5 	.word	0x200042a5
    3c40:	20001fd8 	.word	0x20001fd8
    3c44:	20000b40 	.word	0x20000b40
    3c48:	2000056c 	.word	0x2000056c

00003c4c <z_log_msg_commit>:
{
    3c4c:	b510      	push	{r4, lr}
    3c4e:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    3c50:	4b04      	ldr	r3, [pc, #16]	; (3c64 <z_log_msg_commit+0x18>)
    3c52:	681b      	ldr	r3, [r3, #0]
    3c54:	4798      	blx	r3
    3c56:	60a0      	str	r0, [r4, #8]
	msg_commit(&log_buffer, msg);
    3c58:	4621      	mov	r1, r4
    3c5a:	4803      	ldr	r0, [pc, #12]	; (3c68 <z_log_msg_commit+0x1c>)
    3c5c:	f013 feb0 	bl	179c0 <msg_commit>
}
    3c60:	bd10      	pop	{r4, pc}
    3c62:	bf00      	nop
    3c64:	20000004 	.word	0x20000004
    3c68:	2000038c 	.word	0x2000038c

00003c6c <log_process_thread_func>:
{
    3c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t activate_mask = z_log_init(false, false);
    3c70:	2100      	movs	r1, #0
    3c72:	4608      	mov	r0, r1
    3c74:	f7ff fdc8 	bl	3808 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    3c78:	4680      	mov	r8, r0
    3c7a:	b140      	cbz	r0, 3c8e <log_process_thread_func+0x22>
    3c7c:	f240 6667 	movw	r6, #1639	; 0x667
    3c80:	2700      	movs	r7, #0
	return z_impl_z_current_get();
    3c82:	f00e f833 	bl	11cec <z_impl_z_current_get>
	thread_set(k_current_get());
    3c86:	f7ff fe0b 	bl	38a0 <thread_set>
	bool processed_any = false;
    3c8a:	2500      	movs	r5, #0
    3c8c:	e015      	b.n	3cba <log_process_thread_func+0x4e>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    3c8e:	f04f 36ff 	mov.w	r6, #4294967295
    3c92:	f04f 37ff 	mov.w	r7, #4294967295
    3c96:	e7f4      	b.n	3c82 <log_process_thread_func+0x16>
			activate_mask = activate_foreach_backend(activate_mask);
    3c98:	4640      	mov	r0, r8
    3c9a:	f7ff fd83 	bl	37a4 <activate_foreach_backend>
			if (!activate_mask) {
    3c9e:	4680      	mov	r8, r0
    3ca0:	b970      	cbnz	r0, 3cc0 <log_process_thread_func+0x54>
				timeout = K_FOREVER;
    3ca2:	f04f 36ff 	mov.w	r6, #4294967295
    3ca6:	f04f 37ff 	mov.w	r7, #4294967295
    3caa:	e009      	b.n	3cc0 <log_process_thread_func+0x54>
    3cac:	462c      	mov	r4, r5
	return z_impl_k_sem_take(sem, timeout);
    3cae:	4632      	mov	r2, r6
    3cb0:	463b      	mov	r3, r7
    3cb2:	4809      	ldr	r0, [pc, #36]	; (3cd8 <log_process_thread_func+0x6c>)
    3cb4:	f00d fad4 	bl	11260 <z_impl_k_sem_take>
{
    3cb8:	4625      	mov	r5, r4
		if (activate_mask) {
    3cba:	f1b8 0f00 	cmp.w	r8, #0
    3cbe:	d1eb      	bne.n	3c98 <log_process_thread_func+0x2c>
    3cc0:	f7ff fefc 	bl	3abc <z_impl_log_process>
		if (log_process() == false) {
    3cc4:	4604      	mov	r4, r0
    3cc6:	2800      	cmp	r0, #0
    3cc8:	d1f6      	bne.n	3cb8 <log_process_thread_func+0x4c>
			if (processed_any) {
    3cca:	2d00      	cmp	r5, #0
    3ccc:	d0ee      	beq.n	3cac <log_process_thread_func+0x40>
				log_backend_notify_all(LOG_BACKEND_EVT_PROCESS_THREAD_DONE, NULL);
    3cce:	2100      	movs	r1, #0
    3cd0:	4608      	mov	r0, r1
    3cd2:	f7ff fd4f 	bl	3774 <log_backend_notify_all>
    3cd6:	e7ea      	b.n	3cae <log_process_thread_func+0x42>
    3cd8:	2000056c 	.word	0x2000056c

00003cdc <log_src_cnt_get>:
	if (z_log_is_local_domain(domain_id)) {
		return log_const_source_id(__log_const_end);
	}

	return link_source_count(domain_id);
}
    3cdc:	4802      	ldr	r0, [pc, #8]	; (3ce8 <log_src_cnt_get+0xc>)
    3cde:	4b03      	ldr	r3, [pc, #12]	; (3cec <log_src_cnt_get+0x10>)
    3ce0:	1ac0      	subs	r0, r0, r3
    3ce2:	08c0      	lsrs	r0, r0, #3
    3ce4:	4770      	bx	lr
    3ce6:	bf00      	nop
    3ce8:	00020ac8 	.word	0x00020ac8
    3cec:	00020a50 	.word	0x00020a50

00003cf0 <log_source_name_get>:

	return (const char *)cached;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
    3cf0:	b510      	push	{r4, lr}
    3cf2:	460c      	mov	r4, r1
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
    3cf4:	f7ff fff2 	bl	3cdc <log_src_cnt_get>
    3cf8:	42a0      	cmp	r0, r4
    3cfa:	d903      	bls.n	3d04 <log_source_name_get+0x14>
			return __log_const_start[source_id].name;
    3cfc:	4b02      	ldr	r3, [pc, #8]	; (3d08 <log_source_name_get+0x18>)
    3cfe:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			return NULL;
		}
	}

	return link_source_name_get(domain_id, source_id);
}
    3d02:	bd10      	pop	{r4, pc}
			return NULL;
    3d04:	2000      	movs	r0, #0
    3d06:	e7fc      	b.n	3d02 <log_source_name_get+0x12>
    3d08:	00020a50 	.word	0x00020a50

00003d0c <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
    3d0c:	b508      	push	{r3, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    3d0e:	4b09      	ldr	r3, [pc, #36]	; (3d34 <log_backend_enable+0x28>)
    3d10:	1ac3      	subs	r3, r0, r3
    3d12:	111b      	asrs	r3, r3, #4
    3d14:	3301      	adds	r3, #1
	backend->cb->id = id;
    3d16:	f8d0 c004 	ldr.w	ip, [r0, #4]
    3d1a:	f88c 3004 	strb.w	r3, [ip, #4]

	log_backend_id_set(backend, id);
	backend->cb->level = level;
    3d1e:	6843      	ldr	r3, [r0, #4]
    3d20:	719a      	strb	r2, [r3, #6]
	backend->cb->ctx = ctx;
    3d22:	6843      	ldr	r3, [r0, #4]
    3d24:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    3d26:	6843      	ldr	r3, [r0, #4]
    3d28:	2201      	movs	r2, #1
    3d2a:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
    3d2c:	f7ff fe1a 	bl	3964 <z_log_notify_backend_enabled>
}
    3d30:	bd08      	pop	{r3, pc}
    3d32:	bf00      	nop
    3d34:	00020ac8 	.word	0x00020ac8

00003d38 <cbprintf_package_copy>:
{
    3d38:	b500      	push	{lr}
    3d3a:	b089      	sub	sp, #36	; 0x24
	struct z_cbprintf_buf_desc buf_desc = {
    3d3c:	9205      	str	r2, [sp, #20]
    3d3e:	9306      	str	r3, [sp, #24]
    3d40:	2300      	movs	r3, #0
    3d42:	9307      	str	r3, [sp, #28]
	return cbprintf_package_convert(in_packaged, in_len,
    3d44:	b162      	cbz	r2, 3d60 <cbprintf_package_copy+0x28>
    3d46:	4a07      	ldr	r2, [pc, #28]	; (3d64 <cbprintf_package_copy+0x2c>)
    3d48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3d4a:	9302      	str	r3, [sp, #8]
    3d4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3d4e:	9301      	str	r3, [sp, #4]
    3d50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3d52:	9300      	str	r3, [sp, #0]
    3d54:	ab05      	add	r3, sp, #20
    3d56:	f7fe fd43 	bl	27e0 <cbprintf_package_convert>
}
    3d5a:	b009      	add	sp, #36	; 0x24
    3d5c:	f85d fb04 	ldr.w	pc, [sp], #4
	return cbprintf_package_convert(in_packaged, in_len,
    3d60:	2200      	movs	r2, #0
    3d62:	e7f1      	b.n	3d48 <cbprintf_package_copy+0x10>
    3d64:	000179d1 	.word	0x000179d1

00003d68 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    3d68:	b40e      	push	{r1, r2, r3}
    3d6a:	b500      	push	{lr}
    3d6c:	b084      	sub	sp, #16
    3d6e:	4601      	mov	r1, r0
    3d70:	ab05      	add	r3, sp, #20
    3d72:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
    3d76:	9303      	str	r3, [sp, #12]
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    3d78:	2000      	movs	r0, #0
    3d7a:	9000      	str	r0, [sp, #0]
    3d7c:	4803      	ldr	r0, [pc, #12]	; (3d8c <print_formatted+0x24>)
    3d7e:	f7ff fa0d 	bl	319c <z_cbvprintf_impl>
	length = cbvprintf(out_func, (void *)output, fmt, args);
	va_end(args);

	return length;
}
    3d82:	b004      	add	sp, #16
    3d84:	f85d eb04 	ldr.w	lr, [sp], #4
    3d88:	b003      	add	sp, #12
    3d8a:	4770      	bx	lr
    3d8c:	00017bf1 	.word	0x00017bf1

00003d90 <timestamp_print>:
	output_date->day += seconds / SECONDS_IN_DAY;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, log_timestamp_t timestamp)
{
    3d90:	b530      	push	{r4, r5, lr}
    3d92:	b085      	sub	sp, #20
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) |
		IS_ENABLED(CONFIG_LOG_OUTPUT_FORMAT_LINUX_TIMESTAMP);


	if (!format) {
    3d94:	f011 0f44 	tst.w	r1, #68	; 0x44
    3d98:	d005      	beq.n	3da6 <timestamp_print+0x16>
#ifndef CONFIG_LOG_TIMESTAMP_64BIT
		length = print_formatted(output, "[%08lu] ", timestamp);
#else
		length = print_formatted(output, "[%016llu] ", timestamp);
#endif
	} else if (freq != 0U) {
    3d9a:	4b1a      	ldr	r3, [pc, #104]	; (3e04 <timestamp_print+0x74>)
    3d9c:	681c      	ldr	r4, [r3, #0]
    3d9e:	b934      	cbnz	r4, 3dae <timestamp_print+0x1e>
							"[%02u:%02u:%02u.%03u,%03u] ",
							hours, mins, seconds, ms, us);
			}
		}
	} else {
		length = 0;
    3da0:	2000      	movs	r0, #0
	}

	return length;
}
    3da2:	b005      	add	sp, #20
    3da4:	bd30      	pop	{r4, r5, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
    3da6:	4918      	ldr	r1, [pc, #96]	; (3e08 <timestamp_print+0x78>)
    3da8:	f7ff ffde 	bl	3d68 <print_formatted>
    3dac:	e7f9      	b.n	3da2 <timestamp_print+0x12>
		timestamp /= timestamp_div;
    3dae:	4b17      	ldr	r3, [pc, #92]	; (3e0c <timestamp_print+0x7c>)
    3db0:	6819      	ldr	r1, [r3, #0]
    3db2:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
    3db6:	fbb1 fcf4 	udiv	ip, r1, r4
		hours = seconds / 3600U;
    3dba:	4a15      	ldr	r2, [pc, #84]	; (3e10 <timestamp_print+0x80>)
    3dbc:	fba2 320c 	umull	r3, r2, r2, ip
    3dc0:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
    3dc2:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    3dc6:	fb0e ce12 	mls	lr, lr, r2, ip
		mins = seconds / 60U;
    3dca:	4b12      	ldr	r3, [pc, #72]	; (3e14 <timestamp_print+0x84>)
    3dcc:	fba3 530e 	umull	r5, r3, r3, lr
    3dd0:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
    3dd2:	fb04 111c 	mls	r1, r4, ip, r1
		ms = (remainder * 1000U) / freq;
    3dd6:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    3dda:	fb0c f101 	mul.w	r1, ip, r1
    3dde:	fbb1 f5f4 	udiv	r5, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    3de2:	fb04 1115 	mls	r1, r4, r5, r1
    3de6:	fb0c f101 	mul.w	r1, ip, r1
    3dea:	fbb1 f1f4 	udiv	r1, r1, r4
				length = print_formatted(output,
    3dee:	9102      	str	r1, [sp, #8]
    3df0:	9501      	str	r5, [sp, #4]
    3df2:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
    3df6:	ebae 0181 	sub.w	r1, lr, r1, lsl #2
    3dfa:	9100      	str	r1, [sp, #0]
    3dfc:	4906      	ldr	r1, [pc, #24]	; (3e18 <timestamp_print+0x88>)
    3dfe:	f7ff ffb3 	bl	3d68 <print_formatted>
    3e02:	e7ce      	b.n	3da2 <timestamp_print+0x12>
    3e04:	20001fec 	.word	0x20001fec
    3e08:	00020f38 	.word	0x00020f38
    3e0c:	20001fe8 	.word	0x20001fe8
    3e10:	91a2b3c5 	.word	0x91a2b3c5
    3e14:	88888889 	.word	0x88888889
    3e18:	00020f44 	.word	0x00020f44

00003e1c <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
    3e1c:	b161      	cbz	r1, 3e38 <color_print+0x1c>
{
    3e1e:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    3e20:	b12a      	cbz	r2, 3e2e <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
    3e22:	4a06      	ldr	r2, [pc, #24]	; (3e3c <color_print+0x20>)
    3e24:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    3e28:	b912      	cbnz	r2, 3e30 <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    3e2a:	4a05      	ldr	r2, [pc, #20]	; (3e40 <color_print+0x24>)
    3e2c:	e000      	b.n	3e30 <color_print+0x14>
    3e2e:	4a04      	ldr	r2, [pc, #16]	; (3e40 <color_print+0x24>)
		print_formatted(output, "%s", log_color);
    3e30:	4904      	ldr	r1, [pc, #16]	; (3e44 <color_print+0x28>)
    3e32:	f7ff ff99 	bl	3d68 <print_formatted>
	}
}
    3e36:	bd08      	pop	{r3, pc}
    3e38:	4770      	bx	lr
    3e3a:	bf00      	nop
    3e3c:	00020fe4 	.word	0x00020fe4
    3e40:	00020f60 	.word	0x00020f60
    3e44:	00020f68 	.word	0x00020f68

00003e48 <ids_print>:
		     bool level_on,
		     bool func_on,
		     const char *domain,
		     const char *source,
		     uint32_t level)
{
    3e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3e4c:	4605      	mov	r5, r0
    3e4e:	4690      	mov	r8, r2
    3e50:	461e      	mov	r6, r3
    3e52:	9f06      	ldr	r7, [sp, #24]
	int total = 0;

	if (level_on) {
    3e54:	b981      	cbnz	r1, 3e78 <ids_print+0x30>
	int total = 0;
    3e56:	2400      	movs	r4, #0
		total += print_formatted(output, "<%s> ", severity[level]);
	}

	if (domain) {
    3e58:	b12e      	cbz	r6, 3e66 <ids_print+0x1e>
		total += print_formatted(output, "%s/", domain);
    3e5a:	4632      	mov	r2, r6
    3e5c:	4910      	ldr	r1, [pc, #64]	; (3ea0 <ids_print+0x58>)
    3e5e:	4628      	mov	r0, r5
    3e60:	f7ff ff82 	bl	3d68 <print_formatted>
    3e64:	4404      	add	r4, r0
	}

	if (source) {
    3e66:	b1b7      	cbz	r7, 3e96 <ids_print+0x4e>
		total += print_formatted(output,
    3e68:	f1b8 0f00 	cmp.w	r8, #0
    3e6c:	d00d      	beq.n	3e8a <ids_print+0x42>
				(func_on &&
    3e6e:	9b07      	ldr	r3, [sp, #28]
    3e70:	2b04      	cmp	r3, #4
    3e72:	d013      	beq.n	3e9c <ids_print+0x54>
		total += print_formatted(output,
    3e74:	490b      	ldr	r1, [pc, #44]	; (3ea4 <ids_print+0x5c>)
    3e76:	e009      	b.n	3e8c <ids_print+0x44>
		total += print_formatted(output, "<%s> ", severity[level]);
    3e78:	4b0b      	ldr	r3, [pc, #44]	; (3ea8 <ids_print+0x60>)
    3e7a:	9a07      	ldr	r2, [sp, #28]
    3e7c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3e80:	490a      	ldr	r1, [pc, #40]	; (3eac <ids_print+0x64>)
    3e82:	f7ff ff71 	bl	3d68 <print_formatted>
    3e86:	4604      	mov	r4, r0
    3e88:	e7e6      	b.n	3e58 <ids_print+0x10>
		total += print_formatted(output,
    3e8a:	4906      	ldr	r1, [pc, #24]	; (3ea4 <ids_print+0x5c>)
    3e8c:	463a      	mov	r2, r7
    3e8e:	4628      	mov	r0, r5
    3e90:	f7ff ff6a 	bl	3d68 <print_formatted>
    3e94:	4404      	add	r4, r0
				"%s." : "%s: ",
				source);
	}

	return total;
}
    3e96:	4620      	mov	r0, r4
    3e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
    3e9c:	4904      	ldr	r1, [pc, #16]	; (3eb0 <ids_print+0x68>)
    3e9e:	e7f5      	b.n	3e8c <ids_print+0x44>
    3ea0:	00020f80 	.word	0x00020f80
    3ea4:	00020f70 	.word	0x00020f70
    3ea8:	00020ff8 	.word	0x00020ff8
    3eac:	00020f78 	.word	0x00020f78
    3eb0:	00020f6c 	.word	0x00020f6c

00003eb4 <prefix_print>:
			     bool func_on,
			     log_timestamp_t timestamp,
			     const char *domain,
			     const char *source,
			     uint8_t level)
{
    3eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3eb8:	b085      	sub	sp, #20
    3eba:	4605      	mov	r5, r0
    3ebc:	460c      	mov	r4, r1
    3ebe:	4616      	mov	r6, r2
    3ec0:	9303      	str	r3, [sp, #12]
    3ec2:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    3ec6:	f001 0b02 	and.w	fp, r1, #2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    3eca:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    3ece:	f3c1 09c0 	ubfx	r9, r1, #3, #1
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
    3ed2:	f013 fd7b 	bl	179cc <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    3ed6:	b1d8      	cbz	r0, 3f10 <prefix_print+0x5c>
    3ed8:	4602      	mov	r2, r0
		length += print_formatted(output, "%s ", tag);
    3eda:	4912      	ldr	r1, [pc, #72]	; (3f24 <prefix_print+0x70>)
    3edc:	4628      	mov	r0, r5
    3ede:	f7ff ff43 	bl	3d68 <print_formatted>
    3ee2:	4607      	mov	r7, r0
	}

	if (stamp) {
    3ee4:	f1bb 0f00 	cmp.w	fp, #0
    3ee8:	d114      	bne.n	3f14 <prefix_print+0x60>
			output, "%s - - - - ",
			output->control_block->hostname ?
			output->control_block->hostname :
			"zephyr");
	} else {
		color_prefix(output, colors_on, level);
    3eea:	4642      	mov	r2, r8
    3eec:	4651      	mov	r1, sl
    3eee:	4628      	mov	r0, r5
    3ef0:	f013 fe3e 	bl	17b70 <color_prefix>
	}

	length += ids_print(output, level_on, func_on, domain, source, level);
    3ef4:	f8cd 8004 	str.w	r8, [sp, #4]
    3ef8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3efa:	9300      	str	r3, [sp, #0]
    3efc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3efe:	4632      	mov	r2, r6
    3f00:	4649      	mov	r1, r9
    3f02:	4628      	mov	r0, r5
    3f04:	f7ff ffa0 	bl	3e48 <ids_print>

	return length;
}
    3f08:	4438      	add	r0, r7
    3f0a:	b005      	add	sp, #20
    3f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    3f10:	2700      	movs	r7, #0
    3f12:	e7e7      	b.n	3ee4 <prefix_print+0x30>
		length += timestamp_print(output, flags, timestamp);
    3f14:	9a03      	ldr	r2, [sp, #12]
    3f16:	4621      	mov	r1, r4
    3f18:	4628      	mov	r0, r5
    3f1a:	f7ff ff39 	bl	3d90 <timestamp_print>
    3f1e:	4407      	add	r7, r0
    3f20:	e7e3      	b.n	3eea <prefix_print+0x36>
    3f22:	bf00      	nop
    3f24:	00020f84 	.word	0x00020f84

00003f28 <newline_print>:
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    3f28:	f011 0f10 	tst.w	r1, #16
    3f2c:	d10b      	bne.n	3f46 <newline_print+0x1e>
{
    3f2e:	b508      	push	{r3, lr}
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    3f30:	f011 0f20 	tst.w	r1, #32
    3f34:	d003      	beq.n	3f3e <newline_print+0x16>
		print_formatted(ctx, "\n");
    3f36:	4904      	ldr	r1, [pc, #16]	; (3f48 <newline_print+0x20>)
    3f38:	f7ff ff16 	bl	3d68 <print_formatted>
}
    3f3c:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
    3f3e:	4903      	ldr	r1, [pc, #12]	; (3f4c <newline_print+0x24>)
    3f40:	f7ff ff12 	bl	3d68 <print_formatted>
    3f44:	e7fa      	b.n	3f3c <newline_print+0x14>
    3f46:	4770      	bx	lr
    3f48:	00022550 	.word	0x00022550
    3f4c:	00022634 	.word	0x00022634

00003f50 <hexdump_line_print>:
{
    3f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3f54:	4605      	mov	r5, r0
    3f56:	460f      	mov	r7, r1
    3f58:	4616      	mov	r6, r2
    3f5a:	4698      	mov	r8, r3
	newline_print(output, flags);
    3f5c:	9906      	ldr	r1, [sp, #24]
    3f5e:	f7ff ffe3 	bl	3f28 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    3f62:	2400      	movs	r4, #0
    3f64:	4544      	cmp	r4, r8
    3f66:	da05      	bge.n	3f74 <hexdump_line_print+0x24>
		print_formatted(output, " ");
    3f68:	4924      	ldr	r1, [pc, #144]	; (3ffc <hexdump_line_print+0xac>)
    3f6a:	4628      	mov	r0, r5
    3f6c:	f7ff fefc 	bl	3d68 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    3f70:	3401      	adds	r4, #1
    3f72:	e7f7      	b.n	3f64 <hexdump_line_print+0x14>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    3f74:	2400      	movs	r4, #0
    3f76:	e009      	b.n	3f8c <hexdump_line_print+0x3c>
			print_formatted(output, " ");
    3f78:	4920      	ldr	r1, [pc, #128]	; (3ffc <hexdump_line_print+0xac>)
    3f7a:	4628      	mov	r0, r5
    3f7c:	f7ff fef4 	bl	3d68 <print_formatted>
    3f80:	e00b      	b.n	3f9a <hexdump_line_print+0x4a>
			print_formatted(output, "   ");
    3f82:	491f      	ldr	r1, [pc, #124]	; (4000 <hexdump_line_print+0xb0>)
    3f84:	4628      	mov	r0, r5
    3f86:	f7ff feef 	bl	3d68 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    3f8a:	3401      	adds	r4, #1
    3f8c:	2c0f      	cmp	r4, #15
    3f8e:	dc0c      	bgt.n	3faa <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
    3f90:	2c00      	cmp	r4, #0
    3f92:	dd02      	ble.n	3f9a <hexdump_line_print+0x4a>
    3f94:	f014 0f07 	tst.w	r4, #7
    3f98:	d0ee      	beq.n	3f78 <hexdump_line_print+0x28>
		if (i < length) {
    3f9a:	42b4      	cmp	r4, r6
    3f9c:	d2f1      	bcs.n	3f82 <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
    3f9e:	5d3a      	ldrb	r2, [r7, r4]
    3fa0:	4918      	ldr	r1, [pc, #96]	; (4004 <hexdump_line_print+0xb4>)
    3fa2:	4628      	mov	r0, r5
    3fa4:	f7ff fee0 	bl	3d68 <print_formatted>
    3fa8:	e7ef      	b.n	3f8a <hexdump_line_print+0x3a>
	print_formatted(output, "|");
    3faa:	4917      	ldr	r1, [pc, #92]	; (4008 <hexdump_line_print+0xb8>)
    3fac:	4628      	mov	r0, r5
    3fae:	f7ff fedb 	bl	3d68 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    3fb2:	2400      	movs	r4, #0
    3fb4:	e009      	b.n	3fca <hexdump_line_print+0x7a>
			print_formatted(output, " ");
    3fb6:	4911      	ldr	r1, [pc, #68]	; (3ffc <hexdump_line_print+0xac>)
    3fb8:	4628      	mov	r0, r5
    3fba:	f7ff fed5 	bl	3d68 <print_formatted>
    3fbe:	e00b      	b.n	3fd8 <hexdump_line_print+0x88>
			print_formatted(output, "%c",
    3fc0:	4912      	ldr	r1, [pc, #72]	; (400c <hexdump_line_print+0xbc>)
    3fc2:	4628      	mov	r0, r5
    3fc4:	f7ff fed0 	bl	3d68 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    3fc8:	3401      	adds	r4, #1
    3fca:	2c0f      	cmp	r4, #15
    3fcc:	dc13      	bgt.n	3ff6 <hexdump_line_print+0xa6>
		if (i > 0 && !(i % 8)) {
    3fce:	2c00      	cmp	r4, #0
    3fd0:	dd02      	ble.n	3fd8 <hexdump_line_print+0x88>
    3fd2:	f014 0f07 	tst.w	r4, #7
    3fd6:	d0ee      	beq.n	3fb6 <hexdump_line_print+0x66>
		if (i < length) {
    3fd8:	42b4      	cmp	r4, r6
    3fda:	d207      	bcs.n	3fec <hexdump_line_print+0x9c>
			unsigned char c = (unsigned char)data[i];
    3fdc:	5d3a      	ldrb	r2, [r7, r4]
			      isprint((int)c) ? c : '.');
    3fde:	4b0c      	ldr	r3, [pc, #48]	; (4010 <hexdump_line_print+0xc0>)
    3fe0:	5c9b      	ldrb	r3, [r3, r2]
			print_formatted(output, "%c",
    3fe2:	f013 0f97 	tst.w	r3, #151	; 0x97
    3fe6:	d1eb      	bne.n	3fc0 <hexdump_line_print+0x70>
    3fe8:	222e      	movs	r2, #46	; 0x2e
    3fea:	e7e9      	b.n	3fc0 <hexdump_line_print+0x70>
			print_formatted(output, " ");
    3fec:	4903      	ldr	r1, [pc, #12]	; (3ffc <hexdump_line_print+0xac>)
    3fee:	4628      	mov	r0, r5
    3ff0:	f7ff feba 	bl	3d68 <print_formatted>
    3ff4:	e7e8      	b.n	3fc8 <hexdump_line_print+0x78>
}
    3ff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3ffa:	bf00      	nop
    3ffc:	00021e9c 	.word	0x00021e9c
    4000:	00020f90 	.word	0x00020f90
    4004:	00020f88 	.word	0x00020f88
    4008:	00020f94 	.word	0x00020f94
    400c:	00020f98 	.word	0x00020f98
    4010:	00022759 	.word	0x00022759

00004014 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    4014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4018:	b084      	sub	sp, #16
    401a:	4604      	mov	r4, r0
    401c:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
    4020:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    4022:	9e0d      	ldr	r6, [sp, #52]	; 0x34
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
    4024:	b995      	cbnz	r5, 404c <log_output_process+0x38>
		prefix_offset = 0;
		/* source set to 1 indicates raw string and contrary to printk
		 * case it should not append anything to the output (printk is
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    4026:	2b01      	cmp	r3, #1
    4028:	d01b      	beq.n	4062 <log_output_process+0x4e>
    402a:	4817      	ldr	r0, [pc, #92]	; (4088 <log_output_process+0x74>)
		prefix_offset = 0;
    402c:	f04f 0800 	mov.w	r8, #0
	}

	if (package) {
    4030:	b127      	cbz	r7, 403c <log_output_process+0x28>
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    4032:	463b      	mov	r3, r7
    4034:	4622      	mov	r2, r4
    4036:	4915      	ldr	r1, [pc, #84]	; (408c <log_output_process+0x78>)
    4038:	f012 fb1c 	bl	16674 <cbpprintf_external>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
    403c:	b9ae      	cbnz	r6, 406a <log_output_process+0x56>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    403e:	b9ed      	cbnz	r5, 407c <log_output_process+0x68>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    4040:	4620      	mov	r0, r4
    4042:	f013 fdc8 	bl	17bd6 <log_output_flush>
}
    4046:	b004      	add	sp, #16
    4048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		prefix_offset = prefix_print(output, flags, 0, timestamp, domain, source, level);
    404c:	9502      	str	r5, [sp, #8]
    404e:	9301      	str	r3, [sp, #4]
    4050:	9200      	str	r2, [sp, #0]
    4052:	460b      	mov	r3, r1
    4054:	2200      	movs	r2, #0
    4056:	990e      	ldr	r1, [sp, #56]	; 0x38
    4058:	f7ff ff2c 	bl	3eb4 <prefix_print>
    405c:	4680      	mov	r8, r0
		cb = out_func;
    405e:	480c      	ldr	r0, [pc, #48]	; (4090 <log_output_process+0x7c>)
    4060:	e7e6      	b.n	4030 <log_output_process+0x1c>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    4062:	480b      	ldr	r0, [pc, #44]	; (4090 <log_output_process+0x7c>)
		prefix_offset = 0;
    4064:	f04f 0800 	mov.w	r8, #0
    4068:	e7e2      	b.n	4030 <log_output_process+0x1c>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
    406a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    406c:	9300      	str	r3, [sp, #0]
    406e:	4643      	mov	r3, r8
    4070:	4632      	mov	r2, r6
    4072:	990c      	ldr	r1, [sp, #48]	; 0x30
    4074:	4620      	mov	r0, r4
    4076:	f013 fd93 	bl	17ba0 <log_msg_hexdump>
    407a:	e7e0      	b.n	403e <log_output_process+0x2a>
		postfix_print(output, flags, level);
    407c:	462a      	mov	r2, r5
    407e:	990e      	ldr	r1, [sp, #56]	; 0x38
    4080:	4620      	mov	r0, r4
    4082:	f013 fd81 	bl	17b88 <postfix_print>
    4086:	e7db      	b.n	4040 <log_output_process+0x2c>
    4088:	00017c29 	.word	0x00017c29
    408c:	00017b61 	.word	0x00017b61
    4090:	00017bf1 	.word	0x00017bf1

00004094 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    4094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4098:	b086      	sub	sp, #24
    409a:	4605      	mov	r5, r0
    409c:	460c      	mov	r4, r1
    409e:	4617      	mov	r7, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    40a0:	f8d1 8008 	ldr.w	r8, [r1, #8]
	return msg->hdr.desc.level;
    40a4:	880e      	ldrh	r6, [r1, #0]
    40a6:	f3c6 1682 	ubfx	r6, r6, #6, #3
	return msg->hdr.desc.domain;
    40aa:	7808      	ldrb	r0, [r1, #0]
    40ac:	f3c0 00c2 	ubfx	r0, r0, #3, #3
	return msg->hdr.source;
    40b0:	684b      	ldr	r3, [r1, #4]
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
    40b2:	b133      	cbz	r3, 40c2 <log_output_msg_process+0x2e>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    40b4:	4a11      	ldr	r2, [pc, #68]	; (40fc <log_output_msg_process+0x68>)
    40b6:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
    40b8:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    40bc:	2900      	cmp	r1, #0
    40be:	da18      	bge.n	40f2 <log_output_msg_process+0x5e>
    40c0:	2300      	movs	r3, #0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    40c2:	4622      	mov	r2, r4
    40c4:	f852 1b10 	ldr.w	r1, [r2], #16
    40c8:	f3c1 2149 	ubfx	r1, r1, #9, #10
	*len = msg->hdr.desc.data_len;
    40cc:	8860      	ldrh	r0, [r4, #2]
    40ce:	f3c0 00cb 	ubfx	r0, r0, #3, #12
	return msg->data + msg->hdr.desc.package_len;
    40d2:	1854      	adds	r4, r2, r1
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    40d4:	b901      	cbnz	r1, 40d8 <log_output_msg_process+0x44>
    40d6:	2200      	movs	r2, #0
    40d8:	9704      	str	r7, [sp, #16]
    40da:	9003      	str	r0, [sp, #12]
    40dc:	9402      	str	r4, [sp, #8]
    40de:	9201      	str	r2, [sp, #4]
    40e0:	9600      	str	r6, [sp, #0]
    40e2:	2200      	movs	r2, #0
    40e4:	4641      	mov	r1, r8
    40e6:	4628      	mov	r0, r5
    40e8:	f7ff ff94 	bl	4014 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    40ec:	b006      	add	sp, #24
    40ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    40f2:	f7ff fdfd 	bl	3cf0 <log_source_name_get>
    40f6:	4603      	mov	r3, r0
    40f8:	e7e3      	b.n	40c2 <log_output_msg_process+0x2e>
    40fa:	bf00      	nop
    40fc:	00020a50 	.word	0x00020a50

00004100 <log_output_dropped_process>:

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    4100:	b570      	push	{r4, r5, r6, lr}
    4102:	b082      	sub	sp, #8
    4104:	4604      	mov	r4, r0
	char buf[5];
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;
    4106:	6805      	ldr	r5, [r0, #0]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    4108:	f242 730f 	movw	r3, #9999	; 0x270f
    410c:	428b      	cmp	r3, r1
    410e:	bf28      	it	cs
    4110:	460b      	movcs	r3, r1
    4112:	4a0e      	ldr	r2, [pc, #56]	; (414c <log_output_dropped_process+0x4c>)
    4114:	2105      	movs	r1, #5
    4116:	4668      	mov	r0, sp
    4118:	f012 fb43 	bl	167a2 <snprintk>
    411c:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
		     output->control_block->ctx);
    411e:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    4120:	685b      	ldr	r3, [r3, #4]
    4122:	220b      	movs	r2, #11
    4124:	490a      	ldr	r1, [pc, #40]	; (4150 <log_output_dropped_process+0x50>)
    4126:	4628      	mov	r0, r5
    4128:	f013 fd0d 	bl	17b46 <buffer_write>
	buffer_write(outf, buf, len, output->control_block->ctx);
    412c:	6863      	ldr	r3, [r4, #4]
    412e:	685b      	ldr	r3, [r3, #4]
    4130:	4632      	mov	r2, r6
    4132:	4669      	mov	r1, sp
    4134:	4628      	mov	r0, r5
    4136:	f013 fd06 	bl	17b46 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
		     output->control_block->ctx);
    413a:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    413c:	685b      	ldr	r3, [r3, #4]
    413e:	221b      	movs	r2, #27
    4140:	4904      	ldr	r1, [pc, #16]	; (4154 <log_output_dropped_process+0x54>)
    4142:	4628      	mov	r0, r5
    4144:	f013 fcff 	bl	17b46 <buffer_write>
}
    4148:	b002      	add	sp, #8
    414a:	bd70      	pop	{r4, r5, r6, pc}
    414c:	00020cb4 	.word	0x00020cb4
    4150:	00020fb8 	.word	0x00020fb8
    4154:	00020f9c 	.word	0x00020f9c

00004158 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    4158:	4b07      	ldr	r3, [pc, #28]	; (4178 <log_output_timestamp_freq_set+0x20>)
    415a:	2201      	movs	r2, #1
    415c:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    415e:	e004      	b.n	416a <log_output_timestamp_freq_set+0x12>
		frequency /= 2U;
    4160:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    4162:	4a05      	ldr	r2, [pc, #20]	; (4178 <log_output_timestamp_freq_set+0x20>)
    4164:	6813      	ldr	r3, [r2, #0]
    4166:	005b      	lsls	r3, r3, #1
    4168:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    416a:	4b04      	ldr	r3, [pc, #16]	; (417c <log_output_timestamp_freq_set+0x24>)
    416c:	4298      	cmp	r0, r3
    416e:	d8f7      	bhi.n	4160 <log_output_timestamp_freq_set+0x8>
	}

	freq = frequency;
    4170:	4b03      	ldr	r3, [pc, #12]	; (4180 <log_output_timestamp_freq_set+0x28>)
    4172:	6018      	str	r0, [r3, #0]
}
    4174:	4770      	bx	lr
    4176:	bf00      	nop
    4178:	20001fe8 	.word	0x20001fe8
    417c:	000f4240 	.word	0x000f4240
    4180:	20001fec 	.word	0x20001fec

00004184 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    4184:	4b03      	ldr	r3, [pc, #12]	; (4194 <log_backend_rtt_init+0x10>)
    4186:	2201      	movs	r2, #1
    4188:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
    418a:	4b03      	ldr	r3, [pc, #12]	; (4198 <log_backend_rtt_init+0x14>)
    418c:	4a03      	ldr	r2, [pc, #12]	; (419c <log_backend_rtt_init+0x18>)
    418e:	601a      	str	r2, [r3, #0]
}
    4190:	4770      	bx	lr
    4192:	bf00      	nop
    4194:	200042a6 	.word	0x200042a6
    4198:	20002018 	.word	0x20002018
    419c:	2000201c 	.word	0x2000201c

000041a0 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    41a0:	4b01      	ldr	r3, [pc, #4]	; (41a8 <format_set+0x8>)
    41a2:	6019      	str	r1, [r3, #0]
	return 0;
}
    41a4:	2000      	movs	r0, #0
    41a6:	4770      	bx	lr
    41a8:	20002004 	.word	0x20002004

000041ac <on_failed_write>:
{
    41ac:	b508      	push	{r3, lr}
	if (retry_cnt == 0) {
    41ae:	b918      	cbnz	r0, 41b8 <on_failed_write+0xc>
		host_present = false;
    41b0:	4b07      	ldr	r3, [pc, #28]	; (41d0 <on_failed_write+0x24>)
    41b2:	2200      	movs	r2, #0
    41b4:	701a      	strb	r2, [r3, #0]
}
    41b6:	bd08      	pop	{r3, pc}
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    41b8:	4b06      	ldr	r3, [pc, #24]	; (41d4 <on_failed_write+0x28>)
    41ba:	781b      	ldrb	r3, [r3, #0]
	} else if (is_sync_mode()) {
    41bc:	b123      	cbz	r3, 41c8 <on_failed_write+0x1c>
	z_impl_k_busy_wait(usec_to_wait);
    41be:	f241 3088 	movw	r0, #5000	; 0x1388
    41c2:	f01b fbc3 	bl	1f94c <z_impl_k_busy_wait>
}
    41c6:	e7f6      	b.n	41b6 <on_failed_write+0xa>
		k_msleep(CONFIG_LOG_BACKEND_RTT_RETRY_DELAY_MS);
    41c8:	2005      	movs	r0, #5
    41ca:	f013 fd3c 	bl	17c46 <k_msleep>
}
    41ce:	e7f2      	b.n	41b6 <on_failed_write+0xa>
    41d0:	200042a6 	.word	0x200042a6
    41d4:	200042a7 	.word	0x200042a7

000041d8 <on_write>:
{
    41d8:	b538      	push	{r3, r4, r5, lr}
    41da:	4604      	mov	r4, r0
	host_present = true;
    41dc:	4b0a      	ldr	r3, [pc, #40]	; (4208 <on_write+0x30>)
    41de:	2201      	movs	r2, #1
    41e0:	701a      	strb	r2, [r3, #0]
	return panic_mode;
    41e2:	4b0a      	ldr	r3, [pc, #40]	; (420c <on_write+0x34>)
    41e4:	781b      	ldrb	r3, [r3, #0]
	if (is_panic_mode()) {
    41e6:	b92b      	cbnz	r3, 41f4 <on_write+0x1c>
}
    41e8:	bd38      	pop	{r3, r4, r5, pc}
			on_failed_write(retry_cnt--);
    41ea:	1e65      	subs	r5, r4, #1
    41ec:	4620      	mov	r0, r4
    41ee:	f7ff ffdd 	bl	41ac <on_failed_write>
    41f2:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    41f4:	2000      	movs	r0, #0
    41f6:	f00c fb0b 	bl	10810 <SEGGER_RTT_HasDataUp>
    41fa:	2800      	cmp	r0, #0
    41fc:	d0f4      	beq.n	41e8 <on_write+0x10>
    41fe:	4b02      	ldr	r3, [pc, #8]	; (4208 <on_write+0x30>)
    4200:	781b      	ldrb	r3, [r3, #0]
    4202:	2b00      	cmp	r3, #0
    4204:	d1f1      	bne.n	41ea <on_write+0x12>
    4206:	e7ef      	b.n	41e8 <on_write+0x10>
    4208:	200042a6 	.word	0x200042a6
    420c:	200042a7 	.word	0x200042a7

00004210 <data_out_block_mode>:
{
    4210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4212:	4606      	mov	r6, r0
    4214:	460d      	mov	r5, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    4216:	2704      	movs	r7, #4
    4218:	e00d      	b.n	4236 <data_out_block_mode+0x26>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    421a:	462a      	mov	r2, r5
    421c:	4631      	mov	r1, r6
    421e:	2000      	movs	r0, #0
    4220:	f00c fa92 	bl	10748 <SEGGER_RTT_WriteSkipNoLock>
    4224:	4604      	mov	r4, r0
    4226:	e014      	b.n	4252 <data_out_block_mode+0x42>
			on_write(retry_cnt);
    4228:	4638      	mov	r0, r7
    422a:	f7ff ffd5 	bl	41d8 <on_write>
	} while ((ret == 0) && host_present);
    422e:	b9dc      	cbnz	r4, 4268 <data_out_block_mode+0x58>
    4230:	4b11      	ldr	r3, [pc, #68]	; (4278 <data_out_block_mode+0x68>)
    4232:	781b      	ldrb	r3, [r3, #0]
    4234:	b1c3      	cbz	r3, 4268 <data_out_block_mode+0x58>
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    4236:	4b11      	ldr	r3, [pc, #68]	; (427c <data_out_block_mode+0x6c>)
    4238:	781b      	ldrb	r3, [r3, #0]
		if (!is_sync_mode()) {
    423a:	2b00      	cmp	r3, #0
    423c:	d1ed      	bne.n	421a <data_out_block_mode+0xa>
			RTT_LOCK();
    423e:	f00c faf7 	bl	10830 <zephyr_rtt_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    4242:	462a      	mov	r2, r5
    4244:	4631      	mov	r1, r6
    4246:	2000      	movs	r0, #0
    4248:	f00c fa7e 	bl	10748 <SEGGER_RTT_WriteSkipNoLock>
    424c:	4604      	mov	r4, r0
			RTT_UNLOCK();
    424e:	f00c fafb 	bl	10848 <zephyr_rtt_mutex_unlock>
		if (ret) {
    4252:	2c00      	cmp	r4, #0
    4254:	d1e8      	bne.n	4228 <data_out_block_mode+0x18>
		} else if (host_present) {
    4256:	4b08      	ldr	r3, [pc, #32]	; (4278 <data_out_block_mode+0x68>)
    4258:	781b      	ldrb	r3, [r3, #0]
    425a:	2b00      	cmp	r3, #0
    425c:	d0e7      	beq.n	422e <data_out_block_mode+0x1e>
			retry_cnt--;
    425e:	3f01      	subs	r7, #1
			on_failed_write(retry_cnt);
    4260:	4638      	mov	r0, r7
    4262:	f7ff ffa3 	bl	41ac <on_failed_write>
    4266:	e7e2      	b.n	422e <data_out_block_mode+0x1e>
	return ((ret == 0) && host_present) ? 0 : length;
    4268:	b914      	cbnz	r4, 4270 <data_out_block_mode+0x60>
    426a:	4b03      	ldr	r3, [pc, #12]	; (4278 <data_out_block_mode+0x68>)
    426c:	781b      	ldrb	r3, [r3, #0]
    426e:	b903      	cbnz	r3, 4272 <data_out_block_mode+0x62>
    4270:	462c      	mov	r4, r5
}
    4272:	4620      	mov	r0, r4
    4274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4276:	bf00      	nop
    4278:	200042a6 	.word	0x200042a6
    427c:	200042a7 	.word	0x200042a7

00004280 <panic>:
{
    4280:	b508      	push	{r3, lr}
	panic_mode = true;
    4282:	4b03      	ldr	r3, [pc, #12]	; (4290 <panic+0x10>)
    4284:	2201      	movs	r2, #1
    4286:	701a      	strb	r2, [r3, #0]
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    4288:	4802      	ldr	r0, [pc, #8]	; (4294 <panic+0x14>)
    428a:	f013 fca4 	bl	17bd6 <log_output_flush>
}
    428e:	bd08      	pop	{r3, pc}
    4290:	200042a7 	.word	0x200042a7
    4294:	00021038 	.word	0x00021038

00004298 <dropped>:
{
    4298:	b508      	push	{r3, lr}
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    429a:	4802      	ldr	r0, [pc, #8]	; (42a4 <dropped+0xc>)
    429c:	f7ff ff30 	bl	4100 <log_output_dropped_process>
}
    42a0:	bd08      	pop	{r3, pc}
    42a2:	bf00      	nop
    42a4:	00021038 	.word	0x00021038

000042a8 <process>:
{
    42a8:	b510      	push	{r4, lr}
    42aa:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    42ac:	4b04      	ldr	r3, [pc, #16]	; (42c0 <process+0x18>)
    42ae:	6818      	ldr	r0, [r3, #0]
    42b0:	f7ff fb40 	bl	3934 <log_format_func_t_get>
    42b4:	4603      	mov	r3, r0
	log_output_func(&log_output_rtt, &msg->log, flags);
    42b6:	220f      	movs	r2, #15
    42b8:	4621      	mov	r1, r4
    42ba:	4802      	ldr	r0, [pc, #8]	; (42c4 <process+0x1c>)
    42bc:	4798      	blx	r3
}
    42be:	bd10      	pop	{r4, pc}
    42c0:	20002004 	.word	0x20002004
    42c4:	00021038 	.word	0x00021038

000042c8 <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    42c8:	b570      	push	{r4, r5, r6, lr}
    42ca:	4606      	mov	r6, r0
    42cc:	460d      	mov	r5, r1
		dict_char_out_hex(data, length);
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
    42ce:	2400      	movs	r4, #0
    42d0:	e005      	b.n	42de <char_out+0x16>
			uart_poll_out(uart_dev, data[i]);
    42d2:	5d31      	ldrb	r1, [r6, r4]
			     unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
					unsigned char out_char)
{
	const struct uart_driver_api *api =
    42d4:	4804      	ldr	r0, [pc, #16]	; (42e8 <char_out+0x20>)
    42d6:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    42d8:	685b      	ldr	r3, [r3, #4]
    42da:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    42dc:	3401      	adds	r4, #1
    42de:	42ac      	cmp	r4, r5
    42e0:	d3f7      	bcc.n	42d2 <char_out+0xa>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
    42e2:	4628      	mov	r0, r5
    42e4:	bd70      	pop	{r4, r5, r6, pc}
    42e6:	bf00      	nop
    42e8:	0002082c 	.word	0x0002082c

000042ec <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    42ec:	4b01      	ldr	r3, [pc, #4]	; (42f4 <format_set+0x8>)
    42ee:	6019      	str	r1, [r3, #0]
	return 0;
}
    42f0:	2000      	movs	r0, #0
    42f2:	4770      	bx	lr
    42f4:	2000204c 	.word	0x2000204c

000042f8 <panic>:
		}
	}
}

static void panic(struct log_backend const *const backend)
{
    42f8:	b508      	push	{r3, lr}
	in_panic = true;
    42fa:	4b03      	ldr	r3, [pc, #12]	; (4308 <panic+0x10>)
    42fc:	2201      	movs	r2, #1
    42fe:	701a      	strb	r2, [r3, #0]
	log_output_flush(output);
    4300:	4802      	ldr	r0, [pc, #8]	; (430c <panic+0x14>)
    4302:	f013 fc68 	bl	17bd6 <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
    4306:	bd08      	pop	{r3, pc}
    4308:	200042a8 	.word	0x200042a8
    430c:	00021084 	.word	0x00021084

00004310 <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
    4310:	b508      	push	{r3, lr}
	log_output_dropped_process(output, cnt);
    4312:	4802      	ldr	r0, [pc, #8]	; (431c <dropped+0xc>)
    4314:	f7ff fef4 	bl	4100 <log_output_dropped_process>
	if (IS_ENABLED(CONFIG_LOG_BACKEND_UART_OUTPUT_DICTIONARY)) {
		log_dict_output_dropped_process(&log_output_uart, cnt);
	} else {
		log_backend_std_dropped(&log_output_uart, cnt);
	}
}
    4318:	bd08      	pop	{r3, pc}
    431a:	bf00      	nop
    431c:	00021084 	.word	0x00021084

00004320 <process>:
{
    4320:	b510      	push	{r4, lr}
    4322:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    4324:	4b04      	ldr	r3, [pc, #16]	; (4338 <process+0x18>)
    4326:	6818      	ldr	r0, [r3, #0]
    4328:	f7ff fb04 	bl	3934 <log_format_func_t_get>
    432c:	4603      	mov	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
    432e:	220f      	movs	r2, #15
    4330:	4621      	mov	r1, r4
    4332:	4802      	ldr	r0, [pc, #8]	; (433c <process+0x1c>)
    4334:	4798      	blx	r3
}
    4336:	bd10      	pop	{r4, pc}
    4338:	2000204c 	.word	0x2000204c
    433c:	00021084 	.word	0x00021084

00004340 <zsock_accepted_cb>:
			      int status, void *user_data) {
	struct net_context *parent = user_data;

	NET_DBG("parent=%p, ctx=%p, st=%d", parent, new_ctx, status);

	if (status == 0) {
    4340:	b103      	cbz	r3, 4344 <zsock_accepted_cb+0x4>
    4342:	4770      	bx	lr
			      int status, void *user_data) {
    4344:	b510      	push	{r4, lr}
    4346:	b082      	sub	sp, #8
    4348:	4604      	mov	r4, r0
		/* This just installs a callback, so cannot fail. */
		(void)net_context_recv(new_ctx, zsock_received_cb, K_NO_WAIT,
    434a:	9300      	str	r3, [sp, #0]
    434c:	2200      	movs	r2, #0
    434e:	2300      	movs	r3, #0
    4350:	490a      	ldr	r1, [pc, #40]	; (437c <zsock_accepted_cb+0x3c>)
    4352:	f016 fc79 	bl	1ac48 <net_context_recv>
				       NULL);
		k_fifo_init(&new_ctx->recv_q);
    4356:	f104 005c 	add.w	r0, r4, #92	; 0x5c
	z_impl_k_queue_init(queue);
    435a:	f01a ff01 	bl	1f160 <z_impl_k_queue_init>
		k_condvar_init(&new_ctx->cond.recv);
    435e:	f104 0074 	add.w	r0, r4, #116	; 0x74
	return z_impl_k_condvar_init(condvar);
    4362:	f01b fa39 	bl	1f7d8 <z_impl_k_condvar_init>

		k_fifo_put(&parent->accept_q, new_ctx);
    4366:	4621      	mov	r1, r4
    4368:	9804      	ldr	r0, [sp, #16]
    436a:	305c      	adds	r0, #92	; 0x5c
    436c:	f01a ff21 	bl	1f1b2 <k_queue_append>
		 * connection, but it must not dispose of the context behind
		 * the application back. Likewise, when application "closes"
		 * context, it's not disposed of immediately - there's yet
		 * closing handshake for stack to perform.
		 */
		net_context_ref(new_ctx);
    4370:	4620      	mov	r0, r4
    4372:	f016 f85b 	bl	1a42c <net_context_ref>
	}
}
    4376:	b002      	add	sp, #8
    4378:	bd10      	pop	{r4, pc}
    437a:	bf00      	nop
    437c:	00017ed1 	.word	0x00017ed1

00004380 <zsock_socket_internal>:
{
    4380:	b5f0      	push	{r4, r5, r6, r7, lr}
    4382:	b083      	sub	sp, #12
    4384:	4606      	mov	r6, r0
    4386:	460f      	mov	r7, r1
    4388:	4614      	mov	r4, r2
	int fd = z_reserve_fd();
    438a:	f7fe fd23 	bl	2dd4 <z_reserve_fd>
	if (fd < 0) {
    438e:	1e05      	subs	r5, r0, #0
    4390:	db37      	blt.n	4402 <zsock_socket_internal+0x82>
	if (proto == 0) {
    4392:	b914      	cbnz	r4, 439a <zsock_socket_internal+0x1a>
		if (family == AF_INET || family == AF_INET6) {
    4394:	1e73      	subs	r3, r6, #1
    4396:	2b01      	cmp	r3, #1
    4398:	d91d      	bls.n	43d6 <zsock_socket_internal+0x56>
	res = net_context_get(family, type, proto, &ctx);
    439a:	ab01      	add	r3, sp, #4
    439c:	b2a2      	uxth	r2, r4
    439e:	b2f9      	uxtb	r1, r7
    43a0:	b2b0      	uxth	r0, r6
    43a2:	f003 f867 	bl	7474 <net_context_get>
	if (res < 0) {
    43a6:	1e06      	subs	r6, r0, #0
    43a8:	db1d      	blt.n	43e6 <zsock_socket_internal+0x66>
	ctx->user_data = NULL;
    43aa:	2300      	movs	r3, #0
    43ac:	9a01      	ldr	r2, [sp, #4]
    43ae:	6013      	str	r3, [r2, #0]
	ctx->socket_data = NULL;
    43b0:	9801      	ldr	r0, [sp, #4]
    43b2:	6583      	str	r3, [r0, #88]	; 0x58
	k_fifo_init(&ctx->recv_q);
    43b4:	305c      	adds	r0, #92	; 0x5c
	z_impl_k_queue_init(queue);
    43b6:	f01a fed3 	bl	1f160 <z_impl_k_queue_init>
	k_condvar_init(&ctx->cond.recv);
    43ba:	9801      	ldr	r0, [sp, #4]
    43bc:	3074      	adds	r0, #116	; 0x74
	return z_impl_k_condvar_init(condvar);
    43be:	f01b fa0b 	bl	1f7d8 <z_impl_k_condvar_init>
	if (proto == IPPROTO_TCP) {
    43c2:	2c06      	cmp	r4, #6
    43c4:	d019      	beq.n	43fa <zsock_socket_internal+0x7a>
	z_finalize_fd(fd, ctx, (const struct fd_op_vtable *)&sock_fd_op_vtable);
    43c6:	4a10      	ldr	r2, [pc, #64]	; (4408 <zsock_socket_internal+0x88>)
    43c8:	9901      	ldr	r1, [sp, #4]
    43ca:	4628      	mov	r0, r5
    43cc:	f7fe fd28 	bl	2e20 <z_finalize_fd>
}
    43d0:	4628      	mov	r0, r5
    43d2:	b003      	add	sp, #12
    43d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (type == SOCK_DGRAM) {
    43d6:	2f02      	cmp	r7, #2
    43d8:	d003      	beq.n	43e2 <zsock_socket_internal+0x62>
			} else if (type == SOCK_STREAM) {
    43da:	2f01      	cmp	r7, #1
    43dc:	d1dd      	bne.n	439a <zsock_socket_internal+0x1a>
				proto = IPPROTO_TCP;
    43de:	2406      	movs	r4, #6
    43e0:	e7db      	b.n	439a <zsock_socket_internal+0x1a>
				proto = IPPROTO_UDP;
    43e2:	2411      	movs	r4, #17
    43e4:	e7d9      	b.n	439a <zsock_socket_internal+0x1a>
		z_free_fd(fd);
    43e6:	4628      	mov	r0, r5
    43e8:	f012 f9ab 	bl	16742 <z_free_fd>
		errno = -res;
    43ec:	f014 fe6c 	bl	190c8 <__errno>
    43f0:	4276      	negs	r6, r6
    43f2:	6006      	str	r6, [r0, #0]
		return -1;
    43f4:	f04f 35ff 	mov.w	r5, #4294967295
    43f8:	e7ea      	b.n	43d0 <zsock_socket_internal+0x50>
		net_context_ref(ctx);
    43fa:	9801      	ldr	r0, [sp, #4]
    43fc:	f016 f816 	bl	1a42c <net_context_ref>
    4400:	e7e1      	b.n	43c6 <zsock_socket_internal+0x46>
		return -1;
    4402:	f04f 35ff 	mov.w	r5, #4294967295
    4406:	e7e3      	b.n	43d0 <zsock_socket_internal+0x50>
    4408:	00021094 	.word	0x00021094

0000440c <z_impl_zsock_socket>:
{
    440c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    440e:	4605      	mov	r5, r0
    4410:	460e      	mov	r6, r1
    4412:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
    4414:	4c0e      	ldr	r4, [pc, #56]	; (4450 <z_impl_zsock_socket+0x44>)
    4416:	4b0f      	ldr	r3, [pc, #60]	; (4454 <z_impl_zsock_socket+0x48>)
    4418:	429c      	cmp	r4, r3
    441a:	d211      	bcs.n	4440 <z_impl_zsock_socket+0x34>
		if (sock_family->family != family &&
    441c:	6823      	ldr	r3, [r4, #0]
    441e:	42ab      	cmp	r3, r5
    4420:	d000      	beq.n	4424 <z_impl_zsock_socket+0x18>
    4422:	b95b      	cbnz	r3, 443c <z_impl_zsock_socket+0x30>
		if (!sock_family->is_supported(family, type, proto)) {
    4424:	68a3      	ldr	r3, [r4, #8]
    4426:	463a      	mov	r2, r7
    4428:	4631      	mov	r1, r6
    442a:	4628      	mov	r0, r5
    442c:	4798      	blx	r3
    442e:	b128      	cbz	r0, 443c <z_impl_zsock_socket+0x30>
		return sock_family->handler(family, type, proto);
    4430:	68e3      	ldr	r3, [r4, #12]
    4432:	463a      	mov	r2, r7
    4434:	4631      	mov	r1, r6
    4436:	4628      	mov	r0, r5
    4438:	4798      	blx	r3
}
    443a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
    443c:	3410      	adds	r4, #16
    443e:	e7ea      	b.n	4416 <z_impl_zsock_socket+0xa>
	errno = EAFNOSUPPORT;
    4440:	f014 fe42 	bl	190c8 <__errno>
    4444:	236a      	movs	r3, #106	; 0x6a
    4446:	6003      	str	r3, [r0, #0]
	return -1;
    4448:	f04f 30ff 	mov.w	r0, #4294967295
    444c:	e7f5      	b.n	443a <z_impl_zsock_socket+0x2e>
    444e:	bf00      	nop
    4450:	00020a30 	.word	0x00020a30
    4454:	00020a50 	.word	0x00020a50

00004458 <zsock_bind_ctx>:
	return 0;
}

int zsock_bind_ctx(struct net_context *ctx, const struct sockaddr *addr,
		   socklen_t addrlen)
{
    4458:	b530      	push	{r4, r5, lr}
    445a:	b083      	sub	sp, #12
    445c:	4604      	mov	r4, r0
	SET_ERRNO(net_context_bind(ctx, addr, addrlen));
    445e:	f016 f825 	bl	1a4ac <net_context_bind>
    4462:	1e05      	subs	r5, r0, #0
    4464:	db08      	blt.n	4478 <zsock_bind_ctx+0x20>
static inline
enum net_sock_type net_context_get_type(struct net_context *context)
{
	NET_ASSERT(context);

	return (enum net_sock_type)((context->flags & NET_CONTEXT_TYPE) >> 6);
    4466:	f8b4 3088 	ldrh.w	r3, [r4, #136]	; 0x88
    446a:	f3c3 1381 	ubfx	r3, r3, #6, #2
	/* For DGRAM socket, we expect to receive packets after call to
	 * bind(), but for STREAM socket, next expected operation is
	 * listen(), which doesn't work if recv callback is set.
	 */
	if (net_context_get_type(ctx) == SOCK_DGRAM) {
    446e:	2b02      	cmp	r3, #2
    4470:	d009      	beq.n	4486 <zsock_bind_ctx+0x2e>
		SET_ERRNO(net_context_recv(ctx, zsock_received_cb, K_NO_WAIT,
					   ctx->user_data));
	}

	return 0;
    4472:	2000      	movs	r0, #0
}
    4474:	b003      	add	sp, #12
    4476:	bd30      	pop	{r4, r5, pc}
	SET_ERRNO(net_context_bind(ctx, addr, addrlen));
    4478:	f014 fe26 	bl	190c8 <__errno>
    447c:	426d      	negs	r5, r5
    447e:	6005      	str	r5, [r0, #0]
    4480:	f04f 30ff 	mov.w	r0, #4294967295
    4484:	e7f6      	b.n	4474 <zsock_bind_ctx+0x1c>
		SET_ERRNO(net_context_recv(ctx, zsock_received_cb, K_NO_WAIT,
    4486:	6823      	ldr	r3, [r4, #0]
    4488:	9300      	str	r3, [sp, #0]
    448a:	2200      	movs	r2, #0
    448c:	2300      	movs	r3, #0
    448e:	4907      	ldr	r1, [pc, #28]	; (44ac <zsock_bind_ctx+0x54>)
    4490:	4620      	mov	r0, r4
    4492:	f016 fbd9 	bl	1ac48 <net_context_recv>
    4496:	1e04      	subs	r4, r0, #0
    4498:	db01      	blt.n	449e <zsock_bind_ctx+0x46>
	return 0;
    449a:	2000      	movs	r0, #0
    449c:	e7ea      	b.n	4474 <zsock_bind_ctx+0x1c>
		SET_ERRNO(net_context_recv(ctx, zsock_received_cb, K_NO_WAIT,
    449e:	f014 fe13 	bl	190c8 <__errno>
    44a2:	4264      	negs	r4, r4
    44a4:	6004      	str	r4, [r0, #0]
    44a6:	f04f 30ff 	mov.w	r0, #4294967295
    44aa:	e7e3      	b.n	4474 <zsock_bind_ctx+0x1c>
    44ac:	00017ed1 	.word	0x00017ed1

000044b0 <zsock_connect_ctx>:
#include <syscalls/zsock_bind_mrsh.c>
#endif /* CONFIG_USERSPACE */

int zsock_connect_ctx(struct net_context *ctx, const struct sockaddr *addr,
		      socklen_t addrlen)
{
    44b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    44b2:	b085      	sub	sp, #20
    44b4:	4604      	mov	r4, r0
		SET_ERRNO(net_context_recv(ctx, zsock_received_cb,
					   K_NO_WAIT, ctx->user_data));
		return 0;
	}
#endif
	SET_ERRNO(net_context_connect(ctx, addr, addrlen, NULL,
    44b6:	2300      	movs	r3, #0
    44b8:	9302      	str	r3, [sp, #8]
    44ba:	f44f 36c0 	mov.w	r6, #98304	; 0x18000
    44be:	2700      	movs	r7, #0
    44c0:	e9cd 6700 	strd	r6, r7, [sp]
    44c4:	f016 fa45 	bl	1a952 <net_context_connect>
    44c8:	1e05      	subs	r5, r0, #0
    44ca:	db0c      	blt.n	44e6 <zsock_connect_ctx+0x36>
			      K_MSEC(CONFIG_NET_SOCKETS_CONNECT_TIMEOUT),
			      NULL));
	SET_ERRNO(net_context_recv(ctx, zsock_received_cb, K_NO_WAIT,
    44cc:	6823      	ldr	r3, [r4, #0]
    44ce:	9300      	str	r3, [sp, #0]
    44d0:	2200      	movs	r2, #0
    44d2:	2300      	movs	r3, #0
    44d4:	490b      	ldr	r1, [pc, #44]	; (4504 <zsock_connect_ctx+0x54>)
    44d6:	4620      	mov	r0, r4
    44d8:	f016 fbb6 	bl	1ac48 <net_context_recv>
    44dc:	1e04      	subs	r4, r0, #0
    44de:	db09      	blt.n	44f4 <zsock_connect_ctx+0x44>
				   ctx->user_data));

	return 0;
    44e0:	2000      	movs	r0, #0
}
    44e2:	b005      	add	sp, #20
    44e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SET_ERRNO(net_context_connect(ctx, addr, addrlen, NULL,
    44e6:	f014 fdef 	bl	190c8 <__errno>
    44ea:	426d      	negs	r5, r5
    44ec:	6005      	str	r5, [r0, #0]
    44ee:	f04f 30ff 	mov.w	r0, #4294967295
    44f2:	e7f6      	b.n	44e2 <zsock_connect_ctx+0x32>
	SET_ERRNO(net_context_recv(ctx, zsock_received_cb, K_NO_WAIT,
    44f4:	f014 fde8 	bl	190c8 <__errno>
    44f8:	4264      	negs	r4, r4
    44fa:	6004      	str	r4, [r0, #0]
    44fc:	f04f 30ff 	mov.w	r0, #4294967295
    4500:	e7ef      	b.n	44e2 <zsock_connect_ctx+0x32>
    4502:	bf00      	nop
    4504:	00017ed1 	.word	0x00017ed1

00004508 <zsock_listen_ctx>:
}
#include <syscalls/zsock_connect_mrsh.c>
#endif /* CONFIG_USERSPACE */

int zsock_listen_ctx(struct net_context *ctx, int backlog)
{
    4508:	b530      	push	{r4, r5, lr}
    450a:	b083      	sub	sp, #12
    450c:	4604      	mov	r4, r0
	SET_ERRNO(net_context_listen(ctx, backlog));
    450e:	f016 f87e 	bl	1a60e <net_context_listen>
    4512:	1e05      	subs	r5, r0, #0
    4514:	db0b      	blt.n	452e <zsock_listen_ctx+0x26>
	SET_ERRNO(net_context_accept(ctx, zsock_accepted_cb, K_NO_WAIT, ctx));
    4516:	9400      	str	r4, [sp, #0]
    4518:	2200      	movs	r2, #0
    451a:	2300      	movs	r3, #0
    451c:	490b      	ldr	r1, [pc, #44]	; (454c <zsock_listen_ctx+0x44>)
    451e:	4620      	mov	r0, r4
    4520:	f016 fab8 	bl	1aa94 <net_context_accept>
    4524:	1e04      	subs	r4, r0, #0
    4526:	db09      	blt.n	453c <zsock_listen_ctx+0x34>

	return 0;
    4528:	2000      	movs	r0, #0
}
    452a:	b003      	add	sp, #12
    452c:	bd30      	pop	{r4, r5, pc}
	SET_ERRNO(net_context_listen(ctx, backlog));
    452e:	f014 fdcb 	bl	190c8 <__errno>
    4532:	426d      	negs	r5, r5
    4534:	6005      	str	r5, [r0, #0]
    4536:	f04f 30ff 	mov.w	r0, #4294967295
    453a:	e7f6      	b.n	452a <zsock_listen_ctx+0x22>
	SET_ERRNO(net_context_accept(ctx, zsock_accepted_cb, K_NO_WAIT, ctx));
    453c:	f014 fdc4 	bl	190c8 <__errno>
    4540:	4264      	negs	r4, r4
    4542:	6004      	str	r4, [r0, #0]
    4544:	f04f 30ff 	mov.w	r0, #4294967295
    4548:	e7ef      	b.n	452a <zsock_listen_ctx+0x22>
    454a:	bf00      	nop
    454c:	00004341 	.word	0x00004341

00004550 <zsock_accept_ctx>:
#include <syscalls/zsock_listen_mrsh.c>
#endif /* CONFIG_USERSPACE */

int zsock_accept_ctx(struct net_context *parent, struct sockaddr *addr,
		     socklen_t *addrlen)
{
    4550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4554:	4604      	mov	r4, r0
    4556:	460f      	mov	r7, r1
    4558:	4616      	mov	r6, r2
	k_timeout_t timeout = K_FOREVER;
	struct net_context *ctx;
	struct net_pkt *last_pkt;
	int fd;

	fd = z_reserve_fd();
    455a:	f7fe fc3b 	bl	2dd4 <z_reserve_fd>
	if (fd < 0) {
    455e:	1e05      	subs	r5, r0, #0
    4560:	f2c0 8087 	blt.w	4672 <zsock_accept_ctx+0x122>
    4564:	f04f 38ff 	mov.w	r8, #4294967295
    4568:	46c1      	mov	r9, r8
	(ctx)->socket_data = UINT_TO_POINTER(val);
}

static inline uintptr_t sock_get_flag(struct net_context *ctx, uintptr_t mask)
{
	return POINTER_TO_UINT(ctx->socket_data) & mask;
    456a:	6da3      	ldr	r3, [r4, #88]	; 0x58
		return -1;
	}

	if (sock_is_nonblock(parent)) {
    456c:	f013 0f02 	tst.w	r3, #2
    4570:	d002      	beq.n	4578 <zsock_accept_ctx+0x28>
		timeout = K_NO_WAIT;
    4572:	f04f 0800 	mov.w	r8, #0
    4576:	46c1      	mov	r9, r8
	}

	ctx = k_fifo_get(&parent->accept_q, timeout);
    4578:	f104 005c 	add.w	r0, r4, #92	; 0x5c
	return z_impl_k_queue_get(queue, timeout);
    457c:	4642      	mov	r2, r8
    457e:	464b      	mov	r3, r9
    4580:	f00c fe08 	bl	11194 <z_impl_k_queue_get>
	if (ctx == NULL) {
    4584:	4604      	mov	r4, r0
    4586:	b358      	cbz	r0, 45e0 <zsock_accept_ctx+0x90>

		return -1;
	}

	/* Check if the connection is already disconnected */
	last_pkt = k_fifo_peek_tail(&ctx->recv_q);
    4588:	305c      	adds	r0, #92	; 0x5c
	return z_impl_k_queue_peek_tail(queue);
    458a:	f01a fe2f 	bl	1f1ec <z_impl_k_queue_peek_tail>
	if (last_pkt) {
    458e:	b120      	cbz	r0, 459a <zsock_accept_ctx+0x4a>
}

#if defined(CONFIG_NET_SOCKETS)
static inline uint8_t net_pkt_eof(struct net_pkt *pkt)
{
	return pkt->sent_or_eof;
    4590:	f890 3037 	ldrb.w	r3, [r0, #55]	; 0x37
		if (net_pkt_eof(last_pkt)) {
    4594:	f013 0f02 	tst.w	r3, #2
    4598:	d134      	bne.n	4604 <zsock_accept_ctx+0xb4>
	return context->flags & NET_CONTEXT_CLOSING_SOCK;
    459a:	f8b4 3088 	ldrh.w	r3, [r4, #136]	; 0x88
			errno = ECONNABORTED;
			return -1;
		}
	}

	if (net_context_is_closing(ctx)) {
    459e:	f413 6f80 	tst.w	r3, #1024	; 0x400
    45a2:	d143      	bne.n	462c <zsock_accept_ctx+0xdc>
		context->flags &= ~NET_CONTEXT_ACCEPTING_SOCK;
    45a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    45a8:	f8a4 3088 	strh.w	r3, [r4, #136]	; 0x88
	}

	net_context_set_accepting(ctx, false);


	if (addr != NULL && addrlen != NULL) {
    45ac:	b187      	cbz	r7, 45d0 <zsock_accept_ctx+0x80>
    45ae:	b17e      	cbz	r6, 45d0 <zsock_accept_ctx+0x80>
		int len = MIN(*addrlen, sizeof(ctx->remote));
    45b0:	6832      	ldr	r2, [r6, #0]
    45b2:	2a08      	cmp	r2, #8
    45b4:	bf28      	it	cs
    45b6:	2208      	movcs	r2, #8
    45b8:	f104 0124 	add.w	r1, r4, #36	; 0x24
    45bc:	4638      	mov	r0, r7
    45be:	f01b fc00 	bl	1fdc2 <memcpy>

		memcpy(addr, &ctx->remote, len);
		/* addrlen is a value-result argument, set to actual
		 * size of source address
		 */
		if (ctx->remote.sa_family == AF_INET) {
    45c2:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    45c4:	2b01      	cmp	r3, #1
    45c6:	d041      	beq.n	464c <zsock_accept_ctx+0xfc>
			*addrlen = sizeof(struct sockaddr_in);
		} else if (ctx->remote.sa_family == AF_INET6) {
    45c8:	2b02      	cmp	r3, #2
    45ca:	d142      	bne.n	4652 <zsock_accept_ctx+0x102>
			*addrlen = sizeof(struct sockaddr_in6);
    45cc:	2318      	movs	r3, #24
    45ce:	6033      	str	r3, [r6, #0]
		}
	}

	NET_DBG("accept: ctx=%p, fd=%d", ctx, fd);

	z_finalize_fd(fd, ctx, (const struct fd_op_vtable *)&sock_fd_op_vtable);
    45d0:	4a29      	ldr	r2, [pc, #164]	; (4678 <zsock_accept_ctx+0x128>)
    45d2:	4621      	mov	r1, r4
    45d4:	4628      	mov	r0, r5
    45d6:	f7fe fc23 	bl	2e20 <z_finalize_fd>

	return fd;
}
    45da:	4628      	mov	r0, r5
    45dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		z_free_fd(fd);
    45e0:	4628      	mov	r0, r5
    45e2:	f012 f8ae 	bl	16742 <z_free_fd>
		if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    45e6:	ea59 0808 	orrs.w	r8, r9, r8
    45ea:	d106      	bne.n	45fa <zsock_accept_ctx+0xaa>
			errno = EAGAIN;
    45ec:	f014 fd6c 	bl	190c8 <__errno>
    45f0:	230b      	movs	r3, #11
    45f2:	6003      	str	r3, [r0, #0]
		return -1;
    45f4:	f04f 35ff 	mov.w	r5, #4294967295
    45f8:	e7ef      	b.n	45da <zsock_accept_ctx+0x8a>
			errno = EINVAL;
    45fa:	f014 fd65 	bl	190c8 <__errno>
    45fe:	2316      	movs	r3, #22
    4600:	6003      	str	r3, [r0, #0]
    4602:	e7f7      	b.n	45f4 <zsock_accept_ctx+0xa4>
	uintptr_t val = POINTER_TO_UINT(ctx->socket_data);
    4604:	6da3      	ldr	r3, [r4, #88]	; 0x58
	val = (val & ~mask) | flag;
    4606:	f043 0301 	orr.w	r3, r3, #1
	(ctx)->socket_data = UINT_TO_POINTER(val);
    460a:	65a3      	str	r3, [r4, #88]	; 0x58
			z_free_fd(fd);
    460c:	4628      	mov	r0, r5
    460e:	f012 f898 	bl	16742 <z_free_fd>
			zsock_flush_queue(ctx);
    4612:	4620      	mov	r0, r4
    4614:	f013 fc3f 	bl	17e96 <zsock_flush_queue>
			net_context_unref(ctx);
    4618:	4620      	mov	r0, r4
    461a:	f015 ff14 	bl	1a446 <net_context_unref>
			errno = ECONNABORTED;
    461e:	f014 fd53 	bl	190c8 <__errno>
    4622:	2371      	movs	r3, #113	; 0x71
    4624:	6003      	str	r3, [r0, #0]
			return -1;
    4626:	f04f 35ff 	mov.w	r5, #4294967295
    462a:	e7d6      	b.n	45da <zsock_accept_ctx+0x8a>
		errno = ECONNABORTED;
    462c:	f014 fd4c 	bl	190c8 <__errno>
    4630:	2371      	movs	r3, #113	; 0x71
    4632:	6003      	str	r3, [r0, #0]
		z_free_fd(fd);
    4634:	4628      	mov	r0, r5
    4636:	f012 f884 	bl	16742 <z_free_fd>
		zsock_flush_queue(ctx);
    463a:	4620      	mov	r0, r4
    463c:	f013 fc2b 	bl	17e96 <zsock_flush_queue>
		net_context_unref(ctx);
    4640:	4620      	mov	r0, r4
    4642:	f015 ff00 	bl	1a446 <net_context_unref>
		return -1;
    4646:	f04f 35ff 	mov.w	r5, #4294967295
    464a:	e7c6      	b.n	45da <zsock_accept_ctx+0x8a>
			*addrlen = sizeof(struct sockaddr_in);
    464c:	2308      	movs	r3, #8
    464e:	6033      	str	r3, [r6, #0]
    4650:	e7be      	b.n	45d0 <zsock_accept_ctx+0x80>
			z_free_fd(fd);
    4652:	4628      	mov	r0, r5
    4654:	f012 f875 	bl	16742 <z_free_fd>
			errno = ENOTSUP;
    4658:	f014 fd36 	bl	190c8 <__errno>
    465c:	2386      	movs	r3, #134	; 0x86
    465e:	6003      	str	r3, [r0, #0]
			zsock_flush_queue(ctx);
    4660:	4620      	mov	r0, r4
    4662:	f013 fc18 	bl	17e96 <zsock_flush_queue>
			net_context_unref(ctx);
    4666:	4620      	mov	r0, r4
    4668:	f015 feed 	bl	1a446 <net_context_unref>
			return -1;
    466c:	f04f 35ff 	mov.w	r5, #4294967295
    4670:	e7b3      	b.n	45da <zsock_accept_ctx+0x8a>
		return -1;
    4672:	f04f 35ff 	mov.w	r5, #4294967295
    4676:	e7b0      	b.n	45da <zsock_accept_ctx+0x8a>
    4678:	00021094 	.word	0x00021094

0000467c <zsock_sendto_ctx>:
}

ssize_t zsock_sendto_ctx(struct net_context *ctx, const void *buf, size_t len,
			 int flags,
			 const struct sockaddr *dest_addr, socklen_t addrlen)
{
    467c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4680:	b08b      	sub	sp, #44	; 0x2c
    4682:	4604      	mov	r4, r0
    4684:	460f      	mov	r7, r1
    4686:	4690      	mov	r8, r2
    4688:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
    468c:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
	k_timeout_t timeout = K_FOREVER;
    4690:	f04f 30ff 	mov.w	r0, #4294967295
    4694:	f04f 31ff 	mov.w	r1, #4294967295
    4698:	e9cd 0108 	strd	r0, r1, [sp, #32]
	uint32_t retry_timeout = WAIT_BUFS_INITIAL_MS;
    469c:	220a      	movs	r2, #10
    469e:	9207      	str	r2, [sp, #28]
	uint64_t buf_timeout = 0;
	int status;

	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
    46a0:	f013 0f40 	tst.w	r3, #64	; 0x40
    46a4:	d103      	bne.n	46ae <zsock_sendto_ctx+0x32>
	return POINTER_TO_UINT(ctx->socket_data) & mask;
    46a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
    46a8:	f013 0f02 	tst.w	r3, #2
    46ac:	d034      	beq.n	4718 <zsock_sendto_ctx+0x9c>
		timeout = K_NO_WAIT;
    46ae:	2500      	movs	r5, #0
    46b0:	462e      	mov	r6, r5
    46b2:	9508      	str	r5, [sp, #32]
    46b4:	9509      	str	r5, [sp, #36]	; 0x24
	}

	/* Register the callback before sending in order to receive the response
	 * from the peer.
	 */
	status = net_context_recv(ctx, zsock_received_cb,
    46b6:	6823      	ldr	r3, [r4, #0]
    46b8:	9300      	str	r3, [sp, #0]
    46ba:	2200      	movs	r2, #0
    46bc:	2300      	movs	r3, #0
    46be:	4928      	ldr	r1, [pc, #160]	; (4760 <zsock_sendto_ctx+0xe4>)
    46c0:	4620      	mov	r0, r4
    46c2:	f016 fac1 	bl	1ac48 <net_context_recv>
				  K_NO_WAIT, ctx->user_data);
	if (status < 0) {
    46c6:	f1b0 0b00 	subs.w	fp, r0, #0
    46ca:	db33      	blt.n	4734 <zsock_sendto_ctx+0xb8>
		errno = -status;
		return -1;
	}

	while (1) {
		if (dest_addr) {
    46cc:	f1b9 0f00 	cmp.w	r9, #0
    46d0:	d038      	beq.n	4744 <zsock_sendto_ctx+0xc8>
			status = net_context_sendto(ctx, buf, len, dest_addr,
    46d2:	6823      	ldr	r3, [r4, #0]
    46d4:	9304      	str	r3, [sp, #16]
    46d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    46da:	e9cd 2302 	strd	r2, r3, [sp, #8]
    46de:	2300      	movs	r3, #0
    46e0:	9301      	str	r3, [sp, #4]
    46e2:	f8cd a000 	str.w	sl, [sp]
    46e6:	464b      	mov	r3, r9
    46e8:	4642      	mov	r2, r8
    46ea:	4639      	mov	r1, r7
    46ec:	4620      	mov	r0, r4
    46ee:	f016 fa81 	bl	1abf4 <net_context_sendto>
		} else {
			status = net_context_send(ctx, buf, len, NULL, timeout,
						  ctx->user_data);
		}

		if (status < 0) {
    46f2:	2800      	cmp	r0, #0
    46f4:	da0d      	bge.n	4712 <zsock_sendto_ctx+0x96>
			status = send_check_and_wait(ctx, status, buf_timeout,
    46f6:	ab07      	add	r3, sp, #28
    46f8:	9302      	str	r3, [sp, #8]
    46fa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    46fe:	e9cd 2300 	strd	r2, r3, [sp]
    4702:	462a      	mov	r2, r5
    4704:	4633      	mov	r3, r6
    4706:	4601      	mov	r1, r0
    4708:	4620      	mov	r0, r4
    470a:	f013 fc39 	bl	17f80 <send_check_and_wait>
						     timeout, &retry_timeout);
			if (status < 0) {
    470e:	2800      	cmp	r0, #0
    4710:	dadc      	bge.n	46cc <zsock_sendto_ctx+0x50>

		break;
	}

	return status;
}
    4712:	b00b      	add	sp, #44	; 0x2c
    4714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		net_context_get_option(ctx, NET_OPT_SNDTIMEO, &timeout, NULL);
    4718:	2300      	movs	r3, #0
    471a:	aa08      	add	r2, sp, #32
    471c:	2105      	movs	r1, #5
    471e:	4620      	mov	r0, r4
    4720:	f003 f882 	bl	7828 <net_context_get_option>
		buf_timeout = sys_clock_timeout_end_calc(MAX_WAIT_BUFS);
    4724:	f44f 20a0 	mov.w	r0, #327680	; 0x50000
    4728:	2100      	movs	r1, #0
    472a:	f01b f915 	bl	1f958 <sys_clock_timeout_end_calc>
    472e:	4605      	mov	r5, r0
    4730:	460e      	mov	r6, r1
    4732:	e7c0      	b.n	46b6 <zsock_sendto_ctx+0x3a>
		errno = -status;
    4734:	f014 fcc8 	bl	190c8 <__errno>
    4738:	f1cb 0300 	rsb	r3, fp, #0
    473c:	6003      	str	r3, [r0, #0]
		return -1;
    473e:	f04f 30ff 	mov.w	r0, #4294967295
    4742:	e7e6      	b.n	4712 <zsock_sendto_ctx+0x96>
			status = net_context_send(ctx, buf, len, NULL, timeout,
    4744:	6823      	ldr	r3, [r4, #0]
    4746:	9302      	str	r3, [sp, #8]
    4748:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    474c:	e9cd 2300 	strd	r2, r3, [sp]
    4750:	2300      	movs	r3, #0
    4752:	4642      	mov	r2, r8
    4754:	4639      	mov	r1, r7
    4756:	4620      	mov	r0, r4
    4758:	f016 f9ea 	bl	1ab30 <net_context_send>
    475c:	e7c9      	b.n	46f2 <zsock_sendto_ctx+0x76>
    475e:	bf00      	nop
    4760:	00017ed1 	.word	0x00017ed1

00004764 <znet_mgmt_socket>:
		mgmt_sockets[CONFIG_NET_SOCKETS_NET_MGMT_MAX_LISTENERS];

static const struct socket_op_vtable net_mgmt_sock_fd_op_vtable;

int znet_mgmt_socket(int family, int type, int proto)
{
    4764:	b570      	push	{r4, r5, r6, lr}
    4766:	4615      	mov	r5, r2
	struct net_mgmt_socket *mgmt = NULL;
	int fd, i;

	for (i = 0; i < ARRAY_SIZE(mgmt_sockets); i++) {
    4768:	2300      	movs	r3, #0
	struct net_mgmt_socket *mgmt = NULL;
    476a:	461c      	mov	r4, r3
	for (i = 0; i < ARRAY_SIZE(mgmt_sockets); i++) {
    476c:	e000      	b.n	4770 <znet_mgmt_socket+0xc>
    476e:	3301      	adds	r3, #1
    4770:	2b02      	cmp	r3, #2
    4772:	d80d      	bhi.n	4790 <znet_mgmt_socket+0x2c>
		if (mgmt_sockets[i].is_in_use) {
    4774:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    4778:	491b      	ldr	r1, [pc, #108]	; (47e8 <znet_mgmt_socket+0x84>)
    477a:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    477e:	f891 2024 	ldrb.w	r2, [r1, #36]	; 0x24
    4782:	f012 0f01 	tst.w	r2, #1
    4786:	d1f2      	bne.n	476e <znet_mgmt_socket+0xa>
			continue;
		}

		mgmt = &mgmt_sockets[i];
    4788:	4c17      	ldr	r4, [pc, #92]	; (47e8 <znet_mgmt_socket+0x84>)
    478a:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
    478e:	e7ee      	b.n	476e <znet_mgmt_socket+0xa>
	}

	if (mgmt == NULL) {
    4790:	b1e4      	cbz	r4, 47cc <znet_mgmt_socket+0x68>
		errno = ENOENT;
		return -1;
	}

	fd = z_reserve_fd();
    4792:	f7fe fb1f 	bl	2dd4 <z_reserve_fd>
	if (fd < 0) {
    4796:	1e06      	subs	r6, r0, #0
    4798:	db1f      	blt.n	47da <znet_mgmt_socket+0x76>
		errno = ENOSPC;
		return -1;
	}

	mgmt->is_in_use = true;
    479a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    479e:	f043 0301 	orr.w	r3, r3, #1
    47a2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	mgmt->proto = proto;
    47a6:	6225      	str	r5, [r4, #32]
	mgmt->alloc_timeout = MSG_ALLOC_TIMEOUT;
    47a8:	f640 42cd 	movw	r2, #3277	; 0xccd
    47ac:	2300      	movs	r3, #0
    47ae:	e9c4 2304 	strd	r2, r3, [r4, #16]
	mgmt->wait_timeout = K_FOREVER;
    47b2:	f04f 32ff 	mov.w	r2, #4294967295
    47b6:	f04f 33ff 	mov.w	r3, #4294967295
    47ba:	e9c4 2306 	strd	r2, r3, [r4, #24]

	z_finalize_fd(fd, mgmt,
    47be:	4a0b      	ldr	r2, [pc, #44]	; (47ec <znet_mgmt_socket+0x88>)
    47c0:	4621      	mov	r1, r4
    47c2:	4630      	mov	r0, r6
    47c4:	f7fe fb2c 	bl	2e20 <z_finalize_fd>
		     (const struct fd_op_vtable *)&net_mgmt_sock_fd_op_vtable);

	return fd;
}
    47c8:	4630      	mov	r0, r6
    47ca:	bd70      	pop	{r4, r5, r6, pc}
		errno = ENOENT;
    47cc:	f014 fc7c 	bl	190c8 <__errno>
    47d0:	2302      	movs	r3, #2
    47d2:	6003      	str	r3, [r0, #0]
		return -1;
    47d4:	f04f 36ff 	mov.w	r6, #4294967295
    47d8:	e7f6      	b.n	47c8 <znet_mgmt_socket+0x64>
		errno = ENOSPC;
    47da:	f014 fc75 	bl	190c8 <__errno>
    47de:	231c      	movs	r3, #28
    47e0:	6003      	str	r3, [r0, #0]
		return -1;
    47e2:	f04f 36ff 	mov.w	r6, #4294967295
    47e6:	e7ef      	b.n	47c8 <znet_mgmt_socket+0x64>
    47e8:	20000b78 	.word	0x20000b78
    47ec:	000210d4 	.word	0x000210d4

000047f0 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    47f0:	b570      	push	{r4, r5, r6, lr}
    47f2:	4605      	mov	r5, r0
	__asm__ volatile(
    47f4:	f04f 0320 	mov.w	r3, #32
    47f8:	f3ef 8611 	mrs	r6, BASEPRI
    47fc:	f383 8812 	msr	BASEPRI_MAX, r3
    4800:	f3bf 8f6f 	isb	sy
    4804:	4b0e      	ldr	r3, [pc, #56]	; (4840 <pm_state_notify+0x50>)
    4806:	681c      	ldr	r4, [r3, #0]
    4808:	e00d      	b.n	4826 <pm_state_notify+0x36>
	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
		if (entering_state) {
			callback = notifier->state_entry;
		} else {
			callback = notifier->state_exit;
    480a:	68a2      	ldr	r2, [r4, #8]
		}

		if (callback) {
    480c:	b13a      	cbz	r2, 481e <pm_state_notify+0x2e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    480e:	4b0d      	ldr	r3, [pc, #52]	; (4844 <pm_state_notify+0x54>)
    4810:	7d1b      	ldrb	r3, [r3, #20]
    4812:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4816:	490c      	ldr	r1, [pc, #48]	; (4848 <pm_state_notify+0x58>)
    4818:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    481c:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    481e:	4623      	mov	r3, r4
	return node->next;
    4820:	6824      	ldr	r4, [r4, #0]
    4822:	b104      	cbz	r4, 4826 <pm_state_notify+0x36>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    4824:	b123      	cbz	r3, 4830 <pm_state_notify+0x40>
    4826:	b12c      	cbz	r4, 4834 <pm_state_notify+0x44>
		if (entering_state) {
    4828:	2d00      	cmp	r5, #0
    482a:	d0ee      	beq.n	480a <pm_state_notify+0x1a>
			callback = notifier->state_entry;
    482c:	6862      	ldr	r2, [r4, #4]
    482e:	e7ed      	b.n	480c <pm_state_notify+0x1c>
    4830:	461c      	mov	r4, r3
    4832:	e7f8      	b.n	4826 <pm_state_notify+0x36>
	__asm__ volatile(
    4834:	f386 8811 	msr	BASEPRI, r6
    4838:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    483c:	bd70      	pop	{r4, r5, r6, pc}
    483e:	bf00      	nop
    4840:	20002068 	.word	0x20002068
    4844:	2000378c 	.word	0x2000378c
    4848:	2000205c 	.word	0x2000205c

0000484c <pm_exit_pos_ops>:
{
    484c:	b508      	push	{r3, lr}
	if (pm_state_exit_post_ops != NULL) {
    484e:	4b06      	ldr	r3, [pc, #24]	; (4868 <pm_exit_pos_ops+0x1c>)
    4850:	b123      	cbz	r3, 485c <pm_exit_pos_ops+0x10>
		pm_state_exit_post_ops(info->state, info->substate_id);
    4852:	7841      	ldrb	r1, [r0, #1]
    4854:	7800      	ldrb	r0, [r0, #0]
    4856:	f014 fc4a 	bl	190ee <pm_state_exit_post_ops>
}
    485a:	bd08      	pop	{r3, pc}
    485c:	2300      	movs	r3, #0
    485e:	f383 8811 	msr	BASEPRI, r3
    4862:	f3bf 8f6f 	isb	sy
    4866:	e7f8      	b.n	485a <pm_exit_pos_ops+0xe>
    4868:	000190ef 	.word	0x000190ef

0000486c <pm_system_resume>:

void pm_system_resume(void)
{
    486c:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    486e:	4b0e      	ldr	r3, [pc, #56]	; (48a8 <pm_system_resume+0x3c>)
    4870:	7d1c      	ldrb	r4, [r3, #20]
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    4872:	4621      	mov	r1, r4
    4874:	480d      	ldr	r0, [pc, #52]	; (48ac <pm_system_resume+0x40>)
    4876:	f014 fb31 	bl	18edc <atomic_test_and_clear_bit>
    487a:	b900      	cbnz	r0, 487e <pm_system_resume+0x12>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
			0, 0};
	}
}
    487c:	bd70      	pop	{r4, r5, r6, pc}
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
    487e:	0065      	lsls	r5, r4, #1
    4880:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    4884:	4e0a      	ldr	r6, [pc, #40]	; (48b0 <pm_system_resume+0x44>)
    4886:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    488a:	f7ff ffdf 	bl	484c <pm_exit_pos_ops>
		pm_state_notify(false);
    488e:	2000      	movs	r0, #0
    4890:	f7ff ffae 	bl	47f0 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    4894:	192b      	adds	r3, r5, r4
    4896:	0099      	lsls	r1, r3, #2
    4898:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    489c:	2200      	movs	r2, #0
    489e:	5072      	str	r2, [r6, r1]
    48a0:	605a      	str	r2, [r3, #4]
    48a2:	609a      	str	r2, [r3, #8]
}
    48a4:	e7ea      	b.n	487c <pm_system_resume+0x10>
    48a6:	bf00      	nop
    48a8:	2000378c 	.word	0x2000378c
    48ac:	20002070 	.word	0x20002070
    48b0:	2000205c 	.word	0x2000205c

000048b4 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    48b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    48b6:	4605      	mov	r5, r0
	uint8_t id = CURRENT_CPU;
    48b8:	4b38      	ldr	r3, [pc, #224]	; (499c <pm_system_suspend+0xe8>)
    48ba:	7d1c      	ldrb	r4, [r3, #20]
	__asm__ volatile(
    48bc:	f04f 0320 	mov.w	r3, #32
    48c0:	f3ef 8611 	mrs	r6, BASEPRI
    48c4:	f383 8812 	msr	BASEPRI_MAX, r3
    48c8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    48cc:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    48d0:	4b33      	ldr	r3, [pc, #204]	; (49a0 <pm_system_suspend+0xec>)
    48d2:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
    48d6:	2b00      	cmp	r3, #0
    48d8:	d039      	beq.n	494e <pm_system_suspend+0x9a>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    48da:	4b32      	ldr	r3, [pc, #200]	; (49a4 <pm_system_suspend+0xf0>)
    48dc:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
    48e0:	4f2f      	ldr	r7, [pc, #188]	; (49a0 <pm_system_suspend+0xec>)
    48e2:	ea4f 0e82 	mov.w	lr, r2, lsl #2
    48e6:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    48ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    48ee:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    48f2:	2300      	movs	r3, #0
    48f4:	f807 300e 	strb.w	r3, [r7, lr]
	__asm__ volatile(
    48f8:	f386 8811 	msr	BASEPRI, r6
    48fc:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    4900:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    4904:	4a27      	ldr	r2, [pc, #156]	; (49a4 <pm_system_suspend+0xf0>)
    4906:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    490a:	2b00      	cmp	r3, #0
    490c:	d044      	beq.n	4998 <pm_system_suspend+0xe4>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    490e:	f1b5 3fff 	cmp.w	r5, #4294967295
    4912:	d12b      	bne.n	496c <pm_system_suspend+0xb8>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    4914:	f00c fed0 	bl	116b8 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    4918:	2001      	movs	r0, #1
    491a:	f7ff ff69 	bl	47f0 <pm_state_notify>
	atomic_set_bit(z_post_ops_required, id);
    491e:	4621      	mov	r1, r4
    4920:	4821      	ldr	r0, [pc, #132]	; (49a8 <pm_system_suspend+0xf4>)
    4922:	f014 faf7 	bl	18f14 <atomic_set_bit>
	if (pm_state_set != NULL) {
    4926:	4b21      	ldr	r3, [pc, #132]	; (49ac <pm_system_suspend+0xf8>)
    4928:	b15b      	cbz	r3, 4942 <pm_system_suspend+0x8e>
		pm_state_set(info->state, info->substate_id);
    492a:	4a1e      	ldr	r2, [pc, #120]	; (49a4 <pm_system_suspend+0xf0>)
    492c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    4930:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4934:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    4938:	7859      	ldrb	r1, [r3, #1]
    493a:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
    493e:	f014 fbce 	bl	190de <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    4942:	f7ff ff93 	bl	486c <pm_system_resume>
	k_sched_unlock();
    4946:	f00d f8b9 	bl	11abc <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    494a:	2001      	movs	r0, #1
}
    494c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		info = pm_policy_next_state(id, ticks);
    494e:	4601      	mov	r1, r0
    4950:	4620      	mov	r0, r4
    4952:	f000 f831 	bl	49b8 <pm_policy_next_state>
		if (info != NULL) {
    4956:	2800      	cmp	r0, #0
    4958:	d0ce      	beq.n	48f8 <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
    495a:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    495e:	4b11      	ldr	r3, [pc, #68]	; (49a4 <pm_system_suspend+0xf0>)
    4960:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    4964:	c807      	ldmia	r0, {r0, r1, r2}
    4966:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    496a:	e7c5      	b.n	48f8 <pm_system_suspend+0x44>
		     k_us_to_ticks_ceil32(
    496c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    4970:	4b0c      	ldr	r3, [pc, #48]	; (49a4 <pm_system_suspend+0xf0>)
    4972:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4976:	6898      	ldr	r0, [r3, #8]
			return (uint32_t)((t * to_hz + off) / from_hz);
    4978:	0c41      	lsrs	r1, r0, #17
    497a:	03c0      	lsls	r0, r0, #15
    497c:	4b0c      	ldr	r3, [pc, #48]	; (49b0 <pm_system_suspend+0xfc>)
    497e:	18c0      	adds	r0, r0, r3
    4980:	4a0c      	ldr	r2, [pc, #48]	; (49b4 <pm_system_suspend+0x100>)
    4982:	f04f 0300 	mov.w	r3, #0
    4986:	f141 0100 	adc.w	r1, r1, #0
    498a:	f7fb ffd7 	bl	93c <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    498e:	2101      	movs	r1, #1
    4990:	1a28      	subs	r0, r5, r0
    4992:	f01a ffa8 	bl	1f8e6 <z_set_timeout_expiry>
    4996:	e7bd      	b.n	4914 <pm_system_suspend+0x60>
		return false;
    4998:	2000      	movs	r0, #0
    499a:	e7d7      	b.n	494c <pm_system_suspend+0x98>
    499c:	2000378c 	.word	0x2000378c
    49a0:	20002050 	.word	0x20002050
    49a4:	2000205c 	.word	0x2000205c
    49a8:	20002070 	.word	0x20002070
    49ac:	000190df 	.word	0x000190df
    49b0:	000f423f 	.word	0x000f423f
    49b4:	000f4240 	.word	0x000f4240

000049b8 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    49b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    49bc:	b082      	sub	sp, #8
    49be:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    49c0:	a901      	add	r1, sp, #4
    49c2:	f000 f845 	bl	4a50 <pm_state_cpu_get_all>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    49c6:	1e44      	subs	r4, r0, #1
    49c8:	b224      	sxth	r4, r4
    49ca:	e007      	b.n	49dc <pm_policy_next_state+0x24>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
		    (exit_latency >= max_latency_ticks)) {
			continue;
		}

		if ((ticks == K_TICKS_FOREVER) ||
    49cc:	f1b6 3fff 	cmp.w	r6, #4294967295
    49d0:	d033      	beq.n	4a3a <pm_policy_next_state+0x82>
		    (ticks >= (min_residency + exit_latency))) {
    49d2:	4480      	add	r8, r0
		if ((ticks == K_TICKS_FOREVER) ||
    49d4:	45b0      	cmp	r8, r6
    49d6:	d930      	bls.n	4a3a <pm_policy_next_state+0x82>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    49d8:	3c01      	subs	r4, #1
    49da:	b224      	sxth	r4, r4
    49dc:	2c00      	cmp	r4, #0
    49de:	db2b      	blt.n	4a38 <pm_policy_next_state+0x80>
		const struct pm_state_info *state = &cpu_states[i];
    49e0:	9b01      	ldr	r3, [sp, #4]
    49e2:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    49e6:	eb03 0582 	add.w	r5, r3, r2, lsl #2
		if (pm_policy_state_lock_is_active(state->state, state->substate_id)) {
    49ea:	7869      	ldrb	r1, [r5, #1]
    49ec:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    49f0:	f014 faa3 	bl	18f3a <pm_policy_state_lock_is_active>
    49f4:	2800      	cmp	r0, #0
    49f6:	d1ef      	bne.n	49d8 <pm_policy_next_state+0x20>
		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
    49f8:	6868      	ldr	r0, [r5, #4]
    49fa:	0c41      	lsrs	r1, r0, #17
    49fc:	03c0      	lsls	r0, r0, #15
    49fe:	4f11      	ldr	r7, [pc, #68]	; (4a44 <pm_policy_next_state+0x8c>)
    4a00:	19c0      	adds	r0, r0, r7
    4a02:	4a11      	ldr	r2, [pc, #68]	; (4a48 <pm_policy_next_state+0x90>)
    4a04:	f04f 0300 	mov.w	r3, #0
    4a08:	f141 0100 	adc.w	r1, r1, #0
    4a0c:	f7fb ff96 	bl	93c <__aeabi_uldivmod>
    4a10:	4680      	mov	r8, r0
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);
    4a12:	68ab      	ldr	r3, [r5, #8]
    4a14:	0c59      	lsrs	r1, r3, #17
    4a16:	03db      	lsls	r3, r3, #15
    4a18:	19d8      	adds	r0, r3, r7
    4a1a:	4a0b      	ldr	r2, [pc, #44]	; (4a48 <pm_policy_next_state+0x90>)
    4a1c:	f04f 0300 	mov.w	r3, #0
    4a20:	f141 0100 	adc.w	r1, r1, #0
    4a24:	f7fb ff8a 	bl	93c <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    4a28:	4b08      	ldr	r3, [pc, #32]	; (4a4c <pm_policy_next_state+0x94>)
    4a2a:	681b      	ldr	r3, [r3, #0]
    4a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
    4a30:	d0cc      	beq.n	49cc <pm_policy_next_state+0x14>
    4a32:	4283      	cmp	r3, r0
    4a34:	d8ca      	bhi.n	49cc <pm_policy_next_state+0x14>
    4a36:	e7cf      	b.n	49d8 <pm_policy_next_state+0x20>
			return state;
		}
	}

	return NULL;
    4a38:	2500      	movs	r5, #0
}
    4a3a:	4628      	mov	r0, r5
    4a3c:	b002      	add	sp, #8
    4a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4a42:	bf00      	nop
    4a44:	000f423f 	.word	0x000f423f
    4a48:	000f4240 	.word	0x000f4240
    4a4c:	20000008 	.word	0x20000008

00004a50 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    4a50:	b908      	cbnz	r0, 4a56 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    4a52:	4b02      	ldr	r3, [pc, #8]	; (4a5c <pm_state_cpu_get_all+0xc>)
    4a54:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    4a56:	2000      	movs	r0, #0
    4a58:	4770      	bx	lr
    4a5a:	bf00      	nop
    4a5c:	00021118 	.word	0x00021118

00004a60 <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
    4a60:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
    4a62:	4802      	ldr	r0, [pc, #8]	; (4a6c <nrf_cc3xx_platform_abort_init+0xc>)
    4a64:	f00f f946 	bl	13cf4 <nrf_cc3xx_platform_set_abort>
}
    4a68:	bd08      	pop	{r3, pc}
    4a6a:	bf00      	nop
    4a6c:	00021118 	.word	0x00021118

00004a70 <mutex_flags_unknown>:
                    NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_HW_MUTEX :
                    NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID
};

static bool mutex_flags_unknown(uint32_t flags){
    switch(flags){
    4a70:	f5b0 0f68 	cmp.w	r0, #15204352	; 0xe80000
    4a74:	d017      	beq.n	4aa6 <mutex_flags_unknown+0x36>
    4a76:	d80c      	bhi.n	4a92 <mutex_flags_unknown+0x22>
    4a78:	f640 63ba 	movw	r3, #3770	; 0xeba
    4a7c:	4298      	cmp	r0, r3
    4a7e:	d014      	beq.n	4aaa <mutex_flags_unknown+0x3a>
    4a80:	f5b0 3f68 	cmp.w	r0, #237568	; 0x3a000
    4a84:	d013      	beq.n	4aae <mutex_flags_unknown+0x3e>
    4a86:	283a      	cmp	r0, #58	; 0x3a
    4a88:	d001      	beq.n	4a8e <mutex_flags_unknown+0x1e>
        case NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID:
        case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_HW_MUTEX:
        case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
            return false;
        default:
            return true;
    4a8a:	2001      	movs	r0, #1
    4a8c:	4770      	bx	lr
    switch(flags){
    4a8e:	2000      	movs	r0, #0
    4a90:	4770      	bx	lr
    4a92:	4b09      	ldr	r3, [pc, #36]	; (4ab8 <mutex_flags_unknown+0x48>)
    4a94:	4298      	cmp	r0, r3
    4a96:	d00c      	beq.n	4ab2 <mutex_flags_unknown+0x42>
    4a98:	4b08      	ldr	r3, [pc, #32]	; (4abc <mutex_flags_unknown+0x4c>)
    4a9a:	4298      	cmp	r0, r3
    4a9c:	d001      	beq.n	4aa2 <mutex_flags_unknown+0x32>
            return true;
    4a9e:	2001      	movs	r0, #1
    }
}
    4aa0:	4770      	bx	lr
    switch(flags){
    4aa2:	2000      	movs	r0, #0
    4aa4:	4770      	bx	lr
    4aa6:	2000      	movs	r0, #0
    4aa8:	4770      	bx	lr
    4aaa:	2000      	movs	r0, #0
    4aac:	4770      	bx	lr
    4aae:	2000      	movs	r0, #0
    4ab0:	4770      	bx	lr
    4ab2:	2000      	movs	r0, #0
    4ab4:	4770      	bx	lr
    4ab6:	bf00      	nop
    4ab8:	3a00003a 	.word	0x3a00003a
    4abc:	a95c5f2c 	.word	0xa95c5f2c

00004ac0 <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    4ac0:	b1e8      	cbz	r0, 4afe <mutex_unlock_platform+0x3e>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    4ac2:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    4ac4:	6842      	ldr	r2, [r0, #4]
    4ac6:	f5b2 3f68 	cmp.w	r2, #237568	; 0x3a000
    4aca:	d007      	beq.n	4adc <mutex_unlock_platform+0x1c>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    4acc:	490f      	ldr	r1, [pc, #60]	; (4b0c <mutex_unlock_platform+0x4c>)
    4ace:	428a      	cmp	r2, r1
    4ad0:	d01a      	beq.n	4b08 <mutex_unlock_platform+0x48>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    4ad2:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    4ad4:	f00c fb20 	bl	11118 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    4ad8:	2000      	movs	r0, #0
    }
}
    4ada:	bd08      	pop	{r3, pc}
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
    4adc:	6803      	ldr	r3, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    4ade:	2200      	movs	r2, #0
    4ae0:	f3bf 8f5b 	dmb	ish
    4ae4:	e853 1f00 	ldrex	r1, [r3]
    4ae8:	2901      	cmp	r1, #1
    4aea:	d103      	bne.n	4af4 <mutex_unlock_platform+0x34>
    4aec:	e843 2000 	strex	r0, r2, [r3]
    4af0:	2800      	cmp	r0, #0
    4af2:	d1f7      	bne.n	4ae4 <mutex_unlock_platform+0x24>
    4af4:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    4af8:	d104      	bne.n	4b04 <mutex_unlock_platform+0x44>
    4afa:	4610      	mov	r0, r2
    4afc:	e7ed      	b.n	4ada <mutex_unlock_platform+0x1a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    4afe:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    4b02:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
    4b04:	4802      	ldr	r0, [pc, #8]	; (4b10 <mutex_unlock_platform+0x50>)
    4b06:	e7e8      	b.n	4ada <mutex_unlock_platform+0x1a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    4b08:	4802      	ldr	r0, [pc, #8]	; (4b14 <mutex_unlock_platform+0x54>)
    4b0a:	e7e6      	b.n	4ada <mutex_unlock_platform+0x1a>
    4b0c:	a95c5f2c 	.word	0xa95c5f2c
    4b10:	ffff8fe9 	.word	0xffff8fe9
    4b14:	ffff8fea 	.word	0xffff8fea

00004b18 <mutex_lock_platform>:
    if(mutex == NULL) {
    4b18:	b330      	cbz	r0, 4b68 <mutex_lock_platform+0x50>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    4b1a:	b508      	push	{r3, lr}
    switch (mutex->flags) {
    4b1c:	6842      	ldr	r2, [r0, #4]
    4b1e:	f5b2 3f68 	cmp.w	r2, #237568	; 0x3a000
    4b22:	d00c      	beq.n	4b3e <mutex_lock_platform+0x26>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    4b24:	4912      	ldr	r1, [pc, #72]	; (4b70 <mutex_lock_platform+0x58>)
    4b26:	428a      	cmp	r2, r1
    4b28:	d01c      	beq.n	4b64 <mutex_lock_platform+0x4c>
        p_mutex = (struct k_mutex *)mutex->mutex;
    4b2a:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    4b2c:	f04f 32ff 	mov.w	r2, #4294967295
    4b30:	f04f 33ff 	mov.w	r3, #4294967295
    4b34:	f00c fa6c 	bl	11010 <z_impl_k_mutex_lock>
        if (ret == 0) {
    4b38:	b188      	cbz	r0, 4b5e <mutex_lock_platform+0x46>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    4b3a:	480e      	ldr	r0, [pc, #56]	; (4b74 <mutex_lock_platform+0x5c>)
    4b3c:	e00f      	b.n	4b5e <mutex_lock_platform+0x46>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
    4b3e:	6803      	ldr	r3, [r0, #0]
    4b40:	2201      	movs	r2, #1
    4b42:	f3bf 8f5b 	dmb	ish
    4b46:	e853 1f00 	ldrex	r1, [r3]
    4b4a:	2900      	cmp	r1, #0
    4b4c:	d103      	bne.n	4b56 <mutex_lock_platform+0x3e>
    4b4e:	e843 2000 	strex	r0, r2, [r3]
    4b52:	2800      	cmp	r0, #0
    4b54:	d1f7      	bne.n	4b46 <mutex_lock_platform+0x2e>
    4b56:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    4b5a:	d101      	bne.n	4b60 <mutex_lock_platform+0x48>
    4b5c:	2000      	movs	r0, #0
}
    4b5e:	bd08      	pop	{r3, pc}
                       NRF_CC3XX_PLATFORM_SUCCESS :
    4b60:	4804      	ldr	r0, [pc, #16]	; (4b74 <mutex_lock_platform+0x5c>)
    4b62:	e7fc      	b.n	4b5e <mutex_lock_platform+0x46>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    4b64:	4804      	ldr	r0, [pc, #16]	; (4b78 <mutex_lock_platform+0x60>)
    4b66:	e7fa      	b.n	4b5e <mutex_lock_platform+0x46>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    4b68:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    4b6c:	4770      	bx	lr
    4b6e:	bf00      	nop
    4b70:	a95c5f2c 	.word	0xa95c5f2c
    4b74:	ffff8fe9 	.word	0xffff8fe9
    4b78:	ffff8fea 	.word	0xffff8fea

00004b7c <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    4b7c:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    4b7e:	4604      	mov	r4, r0
    4b80:	b1b0      	cbz	r0, 4bb0 <mutex_free_platform+0x34>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    4b82:	6863      	ldr	r3, [r4, #4]
    4b84:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    4b88:	d011      	beq.n	4bae <mutex_free_platform+0x32>
    4b8a:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    4b8e:	d00e      	beq.n	4bae <mutex_free_platform+0x32>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    4b90:	4a0d      	ldr	r2, [pc, #52]	; (4bc8 <mutex_free_platform+0x4c>)
    4b92:	4293      	cmp	r3, r2
    4b94:	d00b      	beq.n	4bae <mutex_free_platform+0x32>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    4b96:	f413 6f68 	tst.w	r3, #3712	; 0xe80
    4b9a:	d10e      	bne.n	4bba <mutex_free_platform+0x3e>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    4b9c:	6823      	ldr	r3, [r4, #0]
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    4b9e:	2200      	movs	r2, #0
    4ba0:	601a      	str	r2, [r3, #0]
    4ba2:	605a      	str	r2, [r3, #4]
    4ba4:	609a      	str	r2, [r3, #8]
    4ba6:	60da      	str	r2, [r3, #12]
    4ba8:	611a      	str	r2, [r3, #16]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    4baa:	4b07      	ldr	r3, [pc, #28]	; (4bc8 <mutex_free_platform+0x4c>)
    4bac:	6063      	str	r3, [r4, #4]
}
    4bae:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    4bb0:	4b06      	ldr	r3, [pc, #24]	; (4bcc <mutex_free_platform+0x50>)
    4bb2:	685b      	ldr	r3, [r3, #4]
    4bb4:	4806      	ldr	r0, [pc, #24]	; (4bd0 <mutex_free_platform+0x54>)
    4bb6:	4798      	blx	r3
    4bb8:	e7e3      	b.n	4b82 <mutex_free_platform+0x6>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    4bba:	4621      	mov	r1, r4
    4bbc:	4805      	ldr	r0, [pc, #20]	; (4bd4 <mutex_free_platform+0x58>)
    4bbe:	f01a f9a7 	bl	1ef10 <k_mem_slab_free>
        mutex->mutex = NULL;
    4bc2:	2300      	movs	r3, #0
    4bc4:	6023      	str	r3, [r4, #0]
    4bc6:	e7f0      	b.n	4baa <mutex_free_platform+0x2e>
    4bc8:	a95c5f2c 	.word	0xa95c5f2c
    4bcc:	20000308 	.word	0x20000308
    4bd0:	00021120 	.word	0x00021120
    4bd4:	20002574 	.word	0x20002574

00004bd8 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    4bd8:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    4bda:	4604      	mov	r4, r0
    4bdc:	b368      	cbz	r0, 4c3a <mutex_init_platform+0x62>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    4bde:	6860      	ldr	r0, [r4, #4]
    4be0:	f5b0 3f68 	cmp.w	r0, #237568	; 0x3a000
    4be4:	d028      	beq.n	4c38 <mutex_init_platform+0x60>
    4be6:	f5b0 0f68 	cmp.w	r0, #15204352	; 0xe80000
    4bea:	d025      	beq.n	4c38 <mutex_init_platform+0x60>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    4bec:	4b17      	ldr	r3, [pc, #92]	; (4c4c <mutex_init_platform+0x74>)
    4bee:	4298      	cmp	r0, r3
    4bf0:	d028      	beq.n	4c44 <mutex_init_platform+0x6c>
        mutex_flags_unknown(mutex->flags)) {
    4bf2:	f7ff ff3d 	bl	4a70 <mutex_flags_unknown>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    4bf6:	b1c0      	cbz	r0, 4c2a <mutex_init_platform+0x52>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    4bf8:	f04f 32ff 	mov.w	r2, #4294967295
    4bfc:	f04f 33ff 	mov.w	r3, #4294967295
    4c00:	4621      	mov	r1, r4
    4c02:	4813      	ldr	r0, [pc, #76]	; (4c50 <mutex_init_platform+0x78>)
    4c04:	f00c f92a 	bl	10e5c <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    4c08:	b908      	cbnz	r0, 4c0e <mutex_init_platform+0x36>
    4c0a:	6823      	ldr	r3, [r4, #0]
    4c0c:	b91b      	cbnz	r3, 4c16 <mutex_init_platform+0x3e>
            platform_abort_apis.abort_fn(
    4c0e:	4b11      	ldr	r3, [pc, #68]	; (4c54 <mutex_init_platform+0x7c>)
    4c10:	685b      	ldr	r3, [r3, #4]
    4c12:	4811      	ldr	r0, [pc, #68]	; (4c58 <mutex_init_platform+0x80>)
    4c14:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    4c16:	6823      	ldr	r3, [r4, #0]
    4c18:	2200      	movs	r2, #0
    4c1a:	601a      	str	r2, [r3, #0]
    4c1c:	605a      	str	r2, [r3, #4]
    4c1e:	609a      	str	r2, [r3, #8]
    4c20:	60da      	str	r2, [r3, #12]
    4c22:	611a      	str	r2, [r3, #16]
        mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    4c24:	f44f 6368 	mov.w	r3, #3712	; 0xe80
    4c28:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    4c2a:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    4c2c:	f01a f9ff 	bl	1f02e <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    4c30:	6863      	ldr	r3, [r4, #4]
    4c32:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
    4c36:	6063      	str	r3, [r4, #4]
}
    4c38:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    4c3a:	4b06      	ldr	r3, [pc, #24]	; (4c54 <mutex_init_platform+0x7c>)
    4c3c:	685b      	ldr	r3, [r3, #4]
    4c3e:	4807      	ldr	r0, [pc, #28]	; (4c5c <mutex_init_platform+0x84>)
    4c40:	4798      	blx	r3
    4c42:	e7cc      	b.n	4bde <mutex_init_platform+0x6>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    4c44:	6823      	ldr	r3, [r4, #0]
    4c46:	2b00      	cmp	r3, #0
    4c48:	d1d3      	bne.n	4bf2 <mutex_init_platform+0x1a>
    4c4a:	e7d5      	b.n	4bf8 <mutex_init_platform+0x20>
    4c4c:	a95c5f2c 	.word	0xa95c5f2c
    4c50:	20002574 	.word	0x20002574
    4c54:	20000308 	.word	0x20000308
    4c58:	00021148 	.word	0x00021148
    4c5c:	00021120 	.word	0x00021120

00004c60 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    4c60:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    4c62:	2340      	movs	r3, #64	; 0x40
    4c64:	2214      	movs	r2, #20
    4c66:	4904      	ldr	r1, [pc, #16]	; (4c78 <nrf_cc3xx_platform_mutex_init+0x18>)
    4c68:	4804      	ldr	r0, [pc, #16]	; (4c7c <nrf_cc3xx_platform_mutex_init+0x1c>)
    4c6a:	f01a f943 	bl	1eef4 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    4c6e:	4904      	ldr	r1, [pc, #16]	; (4c80 <nrf_cc3xx_platform_mutex_init+0x20>)
    4c70:	4804      	ldr	r0, [pc, #16]	; (4c84 <nrf_cc3xx_platform_mutex_init+0x24>)
    4c72:	f00f f905 	bl	13e80 <nrf_cc3xx_platform_set_mutexes>
}
    4c76:	bd08      	pop	{r3, pc}
    4c78:	20002074 	.word	0x20002074
    4c7c:	20002574 	.word	0x20002574
    4c80:	00021178 	.word	0x00021178
    4c84:	0002118c 	.word	0x0002118c

00004c88 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    4c88:	4901      	ldr	r1, [pc, #4]	; (4c90 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    4c8a:	2210      	movs	r2, #16
	str	r2, [r1]
    4c8c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    4c8e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    4c90:	e000ed10 	.word	0xe000ed10

00004c94 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    4c94:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    4c96:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    4c98:	f380 8811 	msr	BASEPRI, r0
	isb
    4c9c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    4ca0:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    4ca4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    4ca6:	b662      	cpsie	i
	isb
    4ca8:	f3bf 8f6f 	isb	sy

	bx	lr
    4cac:	4770      	bx	lr
    4cae:	bf00      	nop

00004cb0 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    4cb0:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    4cb2:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    4cb4:	f381 8811 	msr	BASEPRI, r1

	wfe
    4cb8:	bf20      	wfe

	msr	BASEPRI, r0
    4cba:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    4cbe:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    4cc0:	4770      	bx	lr
    4cc2:	bf00      	nop

00004cc4 <esf_dump>:
#include <kernel_arch_data.h>
#include <zephyr/logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
    4cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4cc8:	b082      	sub	sp, #8
    4cca:	af00      	add	r7, sp, #0
    4ccc:	4604      	mov	r4, r0
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    4cce:	f8d0 e000 	ldr.w	lr, [r0]
    4cd2:	f8d0 c004 	ldr.w	ip, [r0, #4]
    4cd6:	6886      	ldr	r6, [r0, #8]
    4cd8:	466d      	mov	r5, sp
    4cda:	b08a      	sub	sp, #40	; 0x28
    4cdc:	466b      	mov	r3, sp
    4cde:	f113 0210 	adds.w	r2, r3, #16
    4ce2:	f000 80f3 	beq.w	4ecc <esf_dump+0x208>
    4ce6:	2114      	movs	r1, #20
    4ce8:	b18a      	cbz	r2, 4d0e <esf_dump+0x4a>
    4cea:	4608      	mov	r0, r1
    4cec:	2904      	cmp	r1, #4
    4cee:	dd03      	ble.n	4cf8 <esf_dump+0x34>
    4cf0:	f8df 8208 	ldr.w	r8, [pc, #520]	; 4efc <esf_dump+0x238>
    4cf4:	f8c3 8014 	str.w	r8, [r3, #20]
    4cf8:	2808      	cmp	r0, #8
    4cfa:	dd01      	ble.n	4d00 <esf_dump+0x3c>
    4cfc:	f8c3 e018 	str.w	lr, [r3, #24]
    4d00:	280c      	cmp	r0, #12
    4d02:	dd01      	ble.n	4d08 <esf_dump+0x44>
    4d04:	f8c3 c01c 	str.w	ip, [r3, #28]
    4d08:	2810      	cmp	r0, #16
    4d0a:	dd00      	ble.n	4d0e <esf_dump+0x4a>
    4d0c:	621e      	str	r6, [r3, #32]
    4d0e:	2913      	cmp	r1, #19
    4d10:	f340 80df 	ble.w	4ed2 <esf_dump+0x20e>
    4d14:	f04f 0c14 	mov.w	ip, #20
    4d18:	b13a      	cbz	r2, 4d2a <esf_dump+0x66>
    4d1a:	2105      	movs	r1, #5
    4d1c:	7139      	strb	r1, [r7, #4]
    4d1e:	2100      	movs	r1, #0
    4d20:	7179      	strb	r1, [r7, #5]
    4d22:	71b9      	strb	r1, [r7, #6]
    4d24:	71f9      	strb	r1, [r7, #7]
    4d26:	6878      	ldr	r0, [r7, #4]
    4d28:	6118      	str	r0, [r3, #16]
    4d2a:	2100      	movs	r1, #0
    4d2c:	f36f 0100 	bfc	r1, #0, #1
    4d30:	f36f 0141 	bfc	r1, #1, #1
    4d34:	f36f 0182 	bfc	r1, #2, #1
    4d38:	f36f 01c5 	bfc	r1, #3, #3
    4d3c:	2301      	movs	r3, #1
    4d3e:	f363 1188 	bfi	r1, r3, #6, #3
    4d42:	f40c 7c7d 	and.w	ip, ip, #1012	; 0x3f4
    4d46:	f36c 2152 	bfi	r1, ip, #9, #10
    4d4a:	f36f 41de 	bfc	r1, #19, #12
    4d4e:	f36f 71df 	bfc	r1, #31, #1
    4d52:	2300      	movs	r3, #0
    4d54:	486a      	ldr	r0, [pc, #424]	; (4f00 <esf_dump+0x23c>)
    4d56:	f012 fe69 	bl	17a2c <z_impl_z_log_msg_static_create>
    4d5a:	46ad      	mov	sp, r5
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    4d5c:	f8d4 e00c 	ldr.w	lr, [r4, #12]
    4d60:	f8d4 c010 	ldr.w	ip, [r4, #16]
    4d64:	6966      	ldr	r6, [r4, #20]
    4d66:	466d      	mov	r5, sp
    4d68:	b08a      	sub	sp, #40	; 0x28
    4d6a:	466b      	mov	r3, sp
    4d6c:	f113 0210 	adds.w	r2, r3, #16
    4d70:	f000 80b2 	beq.w	4ed8 <esf_dump+0x214>
    4d74:	2114      	movs	r1, #20
    4d76:	b18a      	cbz	r2, 4d9c <esf_dump+0xd8>
    4d78:	4608      	mov	r0, r1
    4d7a:	2904      	cmp	r1, #4
    4d7c:	dd03      	ble.n	4d86 <esf_dump+0xc2>
    4d7e:	f8df 8184 	ldr.w	r8, [pc, #388]	; 4f04 <esf_dump+0x240>
    4d82:	f8c3 8014 	str.w	r8, [r3, #20]
    4d86:	2808      	cmp	r0, #8
    4d88:	dd01      	ble.n	4d8e <esf_dump+0xca>
    4d8a:	f8c3 e018 	str.w	lr, [r3, #24]
    4d8e:	280c      	cmp	r0, #12
    4d90:	dd01      	ble.n	4d96 <esf_dump+0xd2>
    4d92:	f8c3 c01c 	str.w	ip, [r3, #28]
    4d96:	2810      	cmp	r0, #16
    4d98:	dd00      	ble.n	4d9c <esf_dump+0xd8>
    4d9a:	621e      	str	r6, [r3, #32]
    4d9c:	2913      	cmp	r1, #19
    4d9e:	f340 809e 	ble.w	4ede <esf_dump+0x21a>
    4da2:	f04f 0c14 	mov.w	ip, #20
    4da6:	b13a      	cbz	r2, 4db8 <esf_dump+0xf4>
    4da8:	2105      	movs	r1, #5
    4daa:	7139      	strb	r1, [r7, #4]
    4dac:	2100      	movs	r1, #0
    4dae:	7179      	strb	r1, [r7, #5]
    4db0:	71b9      	strb	r1, [r7, #6]
    4db2:	71f9      	strb	r1, [r7, #7]
    4db4:	6878      	ldr	r0, [r7, #4]
    4db6:	6118      	str	r0, [r3, #16]
    4db8:	2100      	movs	r1, #0
    4dba:	f36f 0100 	bfc	r1, #0, #1
    4dbe:	f36f 0141 	bfc	r1, #1, #1
    4dc2:	f36f 0182 	bfc	r1, #2, #1
    4dc6:	f36f 01c5 	bfc	r1, #3, #3
    4dca:	2301      	movs	r3, #1
    4dcc:	f363 1188 	bfi	r1, r3, #6, #3
    4dd0:	f40c 7c7d 	and.w	ip, ip, #1012	; 0x3f4
    4dd4:	f36c 2152 	bfi	r1, ip, #9, #10
    4dd8:	f36f 41de 	bfc	r1, #19, #12
    4ddc:	f36f 71df 	bfc	r1, #31, #1
    4de0:	2300      	movs	r3, #0
    4de2:	4847      	ldr	r0, [pc, #284]	; (4f00 <esf_dump+0x23c>)
    4de4:	f012 fe22 	bl	17a2c <z_impl_z_log_msg_static_create>
    4de8:	46ad      	mov	sp, r5
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    4dea:	69e6      	ldr	r6, [r4, #28]
    4dec:	466d      	mov	r5, sp
    4dee:	b088      	sub	sp, #32
    4df0:	466b      	mov	r3, sp
    4df2:	f113 0210 	adds.w	r2, r3, #16
    4df6:	d075      	beq.n	4ee4 <esf_dump+0x220>
    4df8:	210c      	movs	r1, #12
    4dfa:	b14a      	cbz	r2, 4e10 <esf_dump+0x14c>
    4dfc:	4608      	mov	r0, r1
    4dfe:	2904      	cmp	r1, #4
    4e00:	dd03      	ble.n	4e0a <esf_dump+0x146>
    4e02:	f8df c104 	ldr.w	ip, [pc, #260]	; 4f08 <esf_dump+0x244>
    4e06:	f8c3 c014 	str.w	ip, [r3, #20]
    4e0a:	2808      	cmp	r0, #8
    4e0c:	dd00      	ble.n	4e10 <esf_dump+0x14c>
    4e0e:	619e      	str	r6, [r3, #24]
    4e10:	290b      	cmp	r1, #11
    4e12:	dd6a      	ble.n	4eea <esf_dump+0x226>
    4e14:	f04f 0c0c 	mov.w	ip, #12
    4e18:	b13a      	cbz	r2, 4e2a <esf_dump+0x166>
    4e1a:	2103      	movs	r1, #3
    4e1c:	7139      	strb	r1, [r7, #4]
    4e1e:	2100      	movs	r1, #0
    4e20:	7179      	strb	r1, [r7, #5]
    4e22:	71b9      	strb	r1, [r7, #6]
    4e24:	71f9      	strb	r1, [r7, #7]
    4e26:	6878      	ldr	r0, [r7, #4]
    4e28:	6118      	str	r0, [r3, #16]
    4e2a:	2100      	movs	r1, #0
    4e2c:	f36f 0100 	bfc	r1, #0, #1
    4e30:	f36f 0141 	bfc	r1, #1, #1
    4e34:	f36f 0182 	bfc	r1, #2, #1
    4e38:	f36f 01c5 	bfc	r1, #3, #3
    4e3c:	2301      	movs	r3, #1
    4e3e:	f363 1188 	bfi	r1, r3, #6, #3
    4e42:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
    4e46:	f36c 2152 	bfi	r1, ip, #9, #10
    4e4a:	f36f 41de 	bfc	r1, #19, #12
    4e4e:	f36f 71df 	bfc	r1, #31, #1
    4e52:	2300      	movs	r3, #0
    4e54:	482a      	ldr	r0, [pc, #168]	; (4f00 <esf_dump+0x23c>)
    4e56:	f012 fde9 	bl	17a2c <z_impl_z_log_msg_static_create>
    4e5a:	46ad      	mov	sp, r5
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    4e5c:	69a4      	ldr	r4, [r4, #24]
    4e5e:	b088      	sub	sp, #32
    4e60:	466b      	mov	r3, sp
    4e62:	f113 0210 	adds.w	r2, r3, #16
    4e66:	d043      	beq.n	4ef0 <esf_dump+0x22c>
    4e68:	210c      	movs	r1, #12
    4e6a:	b13a      	cbz	r2, 4e7c <esf_dump+0x1b8>
    4e6c:	4608      	mov	r0, r1
    4e6e:	2904      	cmp	r1, #4
    4e70:	dd01      	ble.n	4e76 <esf_dump+0x1b2>
    4e72:	4d26      	ldr	r5, [pc, #152]	; (4f0c <esf_dump+0x248>)
    4e74:	615d      	str	r5, [r3, #20]
    4e76:	2808      	cmp	r0, #8
    4e78:	dd00      	ble.n	4e7c <esf_dump+0x1b8>
    4e7a:	619c      	str	r4, [r3, #24]
    4e7c:	290b      	cmp	r1, #11
    4e7e:	dd3a      	ble.n	4ef6 <esf_dump+0x232>
    4e80:	240c      	movs	r4, #12
    4e82:	b13a      	cbz	r2, 4e94 <esf_dump+0x1d0>
    4e84:	2103      	movs	r1, #3
    4e86:	7139      	strb	r1, [r7, #4]
    4e88:	2100      	movs	r1, #0
    4e8a:	7179      	strb	r1, [r7, #5]
    4e8c:	71b9      	strb	r1, [r7, #6]
    4e8e:	71f9      	strb	r1, [r7, #7]
    4e90:	6878      	ldr	r0, [r7, #4]
    4e92:	6118      	str	r0, [r3, #16]
    4e94:	2100      	movs	r1, #0
    4e96:	f36f 0100 	bfc	r1, #0, #1
    4e9a:	f36f 0141 	bfc	r1, #1, #1
    4e9e:	f36f 0182 	bfc	r1, #2, #1
    4ea2:	f36f 01c5 	bfc	r1, #3, #3
    4ea6:	2301      	movs	r3, #1
    4ea8:	f363 1188 	bfi	r1, r3, #6, #3
    4eac:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
    4eb0:	f364 2152 	bfi	r1, r4, #9, #10
    4eb4:	f36f 41de 	bfc	r1, #19, #12
    4eb8:	f36f 71df 	bfc	r1, #31, #1
    4ebc:	2300      	movs	r3, #0
    4ebe:	4810      	ldr	r0, [pc, #64]	; (4f00 <esf_dump+0x23c>)
    4ec0:	f012 fdb4 	bl	17a2c <z_impl_z_log_msg_static_create>
		esf->basic.pc);
}
    4ec4:	3708      	adds	r7, #8
    4ec6:	46bd      	mov	sp, r7
    4ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    4ecc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    4ed0:	e70a      	b.n	4ce8 <esf_dump+0x24>
    4ed2:	f06f 0c1b 	mvn.w	ip, #27
    4ed6:	e71f      	b.n	4d18 <esf_dump+0x54>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    4ed8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    4edc:	e74b      	b.n	4d76 <esf_dump+0xb2>
    4ede:	f06f 0c1b 	mvn.w	ip, #27
    4ee2:	e760      	b.n	4da6 <esf_dump+0xe2>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    4ee4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    4ee8:	e787      	b.n	4dfa <esf_dump+0x136>
    4eea:	f06f 0c1b 	mvn.w	ip, #27
    4eee:	e793      	b.n	4e18 <esf_dump+0x154>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    4ef0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    4ef4:	e7b9      	b.n	4e6a <esf_dump+0x1a6>
    4ef6:	f06f 041b 	mvn.w	r4, #27
    4efa:	e7c2      	b.n	4e82 <esf_dump+0x1be>
    4efc:	0002119c 	.word	0x0002119c
    4f00:	00020aa0 	.word	0x00020aa0
    4f04:	000211cc 	.word	0x000211cc
    4f08:	000211fc 	.word	0x000211fc
    4f0c:	0002120c 	.word	0x0002120c

00004f10 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    4f10:	2800      	cmp	r0, #0
    4f12:	db07      	blt.n	4f24 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4f14:	f000 021f 	and.w	r2, r0, #31
    4f18:	0940      	lsrs	r0, r0, #5
    4f1a:	2301      	movs	r3, #1
    4f1c:	4093      	lsls	r3, r2
    4f1e:	4a02      	ldr	r2, [pc, #8]	; (4f28 <__NVIC_EnableIRQ+0x18>)
    4f20:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
    4f24:	4770      	bx	lr
    4f26:	bf00      	nop
    4f28:	e000e100 	.word	0xe000e100

00004f2c <__NVIC_DisableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    4f2c:	2800      	cmp	r0, #0
    4f2e:	db0c      	blt.n	4f4a <__NVIC_DisableIRQ+0x1e>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4f30:	f000 021f 	and.w	r2, r0, #31
    4f34:	0940      	lsrs	r0, r0, #5
    4f36:	2301      	movs	r3, #1
    4f38:	4093      	lsls	r3, r2
    4f3a:	3020      	adds	r0, #32
    4f3c:	4a03      	ldr	r2, [pc, #12]	; (4f4c <__NVIC_DisableIRQ+0x20>)
    4f3e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    4f42:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4f46:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    4f4a:	4770      	bx	lr
    4f4c:	e000e100 	.word	0xe000e100

00004f50 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    4f50:	2800      	cmp	r0, #0
    4f52:	db08      	blt.n	4f66 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4f54:	0149      	lsls	r1, r1, #5
    4f56:	b2c9      	uxtb	r1, r1
    4f58:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
    4f5c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
    4f60:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
    4f64:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4f66:	f000 000f 	and.w	r0, r0, #15
    4f6a:	0149      	lsls	r1, r1, #5
    4f6c:	b2c9      	uxtb	r1, r1
    4f6e:	4b01      	ldr	r3, [pc, #4]	; (4f74 <__NVIC_SetPriority+0x24>)
    4f70:	5419      	strb	r1, [r3, r0]
  }
}
    4f72:	4770      	bx	lr
    4f74:	e000ed14 	.word	0xe000ed14

00004f78 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    4f78:	0942      	lsrs	r2, r0, #5
    4f7a:	4b05      	ldr	r3, [pc, #20]	; (4f90 <arch_irq_is_enabled+0x18>)
    4f7c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    4f80:	f000 001f 	and.w	r0, r0, #31
    4f84:	2301      	movs	r3, #1
    4f86:	fa03 f000 	lsl.w	r0, r3, r0
}
    4f8a:	4010      	ands	r0, r2
    4f8c:	4770      	bx	lr
    4f8e:	bf00      	nop
    4f90:	e000e100 	.word	0xe000e100

00004f94 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    4f94:	bf30      	wfi
    b z_SysNmiOnReset
    4f96:	f7ff bffd 	b.w	4f94 <z_SysNmiOnReset>
    4f9a:	bf00      	nop

00004f9c <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    4f9c:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    4f9e:	4b0b      	ldr	r3, [pc, #44]	; (4fcc <z_arm_prep_c+0x30>)
    4fa0:	4a0b      	ldr	r2, [pc, #44]	; (4fd0 <z_arm_prep_c+0x34>)
    4fa2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    4fa6:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    4fa8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4fac:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    4fb0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    4fb4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    4fb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    4fbc:	f00b fe84 	bl	10cc8 <z_bss_zero>
	z_data_copy();
    4fc0:	f00c ff2c 	bl	11e1c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    4fc4:	f000 ff7e 	bl	5ec4 <z_arm_interrupt_init>
	z_cstart();
    4fc8:	f00b feda 	bl	10d80 <z_cstart>
    4fcc:	e000ed00 	.word	0xe000ed00
    4fd0:	00000000 	.word	0x00000000

00004fd4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    4fd4:	4a09      	ldr	r2, [pc, #36]	; (4ffc <arch_swap+0x28>)
    4fd6:	6893      	ldr	r3, [r2, #8]
    4fd8:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
    4fda:	4909      	ldr	r1, [pc, #36]	; (5000 <arch_swap+0x2c>)
    4fdc:	6809      	ldr	r1, [r1, #0]
    4fde:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4fe0:	4908      	ldr	r1, [pc, #32]	; (5004 <arch_swap+0x30>)
    4fe2:	684b      	ldr	r3, [r1, #4]
    4fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    4fe8:	604b      	str	r3, [r1, #4]
    4fea:	2300      	movs	r3, #0
    4fec:	f383 8811 	msr	BASEPRI, r3
    4ff0:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    4ff4:	6893      	ldr	r3, [r2, #8]
}
    4ff6:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    4ff8:	4770      	bx	lr
    4ffa:	bf00      	nop
    4ffc:	2000378c 	.word	0x2000378c
    5000:	00022420 	.word	0x00022420
    5004:	e000ed00 	.word	0xe000ed00

00005008 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    5008:	490f      	ldr	r1, [pc, #60]	; (5048 <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
    500a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    500c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    5010:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    5012:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    5016:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    501a:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    501c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    5020:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    5024:	4f09      	ldr	r7, [pc, #36]	; (504c <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    5026:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    502a:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    502c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    502e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    5030:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    5032:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    5034:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    5036:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    503a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    503e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    5042:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    5046:	4770      	bx	lr
    ldr r1, =_kernel
    5048:	2000378c 	.word	0x2000378c
    ldr v4, =_SCS_ICSR
    504c:	e000ed04 	.word	0xe000ed04

00005050 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    5050:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    5054:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    5056:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    505a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    505e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    5060:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    5064:	2902      	cmp	r1, #2
    beq _oops
    5066:	d0ff      	beq.n	5068 <_oops>

00005068 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    5068:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    506a:	f013 ff75 	bl	18f58 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    506e:	bd01      	pop	{r0, pc}

00005070 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    5070:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    5072:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    5076:	490d      	ldr	r1, [pc, #52]	; (50ac <arch_new_thread+0x3c>)
    5078:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    507c:	f021 0101 	bic.w	r1, r1, #1
    5080:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    5084:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    5088:	9b01      	ldr	r3, [sp, #4]
    508a:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    508e:	9b02      	ldr	r3, [sp, #8]
    5090:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    5094:	9b03      	ldr	r3, [sp, #12]
    5096:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    509a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    509e:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe = (struct __basic_sf *)
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
    50a2:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    50a4:	2300      	movs	r3, #0
    50a6:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    50a8:	bc10      	pop	{r4}
    50aa:	4770      	bx	lr
    50ac:	000167bf 	.word	0x000167bf

000050b0 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    50b0:	4b07      	ldr	r3, [pc, #28]	; (50d0 <arch_switch_to_main_thread+0x20>)
    50b2:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    50b4:	4610      	mov	r0, r2
    50b6:	f381 8809 	msr	PSP, r1
    50ba:	2100      	movs	r1, #0
    50bc:	b663      	cpsie	if
    50be:	f381 8811 	msr	BASEPRI, r1
    50c2:	f3bf 8f6f 	isb	sy
    50c6:	2200      	movs	r2, #0
    50c8:	2300      	movs	r3, #0
    50ca:	f011 fb78 	bl	167be <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    50ce:	bf00      	nop
    50d0:	2000378c 	.word	0x2000378c

000050d4 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    50d4:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    50d6:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    50d8:	4a0b      	ldr	r2, [pc, #44]	; (5108 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    50da:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    50dc:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    50de:	bf1e      	ittt	ne
	movne	r1, #0
    50e0:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    50e2:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    50e4:	f019 ff87 	blne	1eff6 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    50e8:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    50ea:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    50ee:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    50f2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    50f6:	4905      	ldr	r1, [pc, #20]	; (510c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    50f8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    50fa:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    50fc:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    50fe:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    5102:	4903      	ldr	r1, [pc, #12]	; (5110 <_isr_wrapper+0x3c>)
	bx r1
    5104:	4708      	bx	r1
    5106:	0000      	.short	0x0000
	ldr r2, =_kernel
    5108:	2000378c 	.word	0x2000378c
	ldr r1, =_sw_isr_table
    510c:	00020874 	.word	0x00020874
	ldr r1, =z_arm_int_exit
    5110:	00005115 	.word	0x00005115

00005114 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    5114:	4b04      	ldr	r3, [pc, #16]	; (5128 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    5116:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    5118:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    511a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    511c:	d003      	beq.n	5126 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    511e:	4903      	ldr	r1, [pc, #12]	; (512c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    5120:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    5124:	600a      	str	r2, [r1, #0]

00005126 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    5126:	4770      	bx	lr
	ldr r3, =_kernel
    5128:	2000378c 	.word	0x2000378c
	ldr r1, =_SCS_ICSR
    512c:	e000ed04 	.word	0xe000ed04

00005130 <z_arm_is_synchronous_svc>:
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

static inline bool z_arm_is_synchronous_svc(z_arch_esf_t *esf)
{
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    5130:	6981      	ldr	r1, [r0, #24]
	/* Note: ARMv6-M does not support CCR.BFHFNMIGN so this access
	 * could generate a fault if the pc was invalid.
	 */
	uint16_t fault_insn = *(ret_addr - 1);
#else
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    5132:	4b0d      	ldr	r3, [pc, #52]	; (5168 <z_arm_is_synchronous_svc+0x38>)
    5134:	695a      	ldr	r2, [r3, #20]
    5136:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    513a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    513c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5140:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();

	uint16_t fault_insn = *(ret_addr - 1);
    5144:	f831 1c02 	ldrh.w	r1, [r1, #-2]

	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    5148:	695a      	ldr	r2, [r3, #20]
    514a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    514e:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    5150:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5154:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
#endif /* ARMV6_M_ARMV8_M_BASELINE && !ARMV8_M_BASELINE */

	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    5158:	f64d 7302 	movw	r3, #57090	; 0xdf02
    515c:	4299      	cmp	r1, r3
    515e:	d001      	beq.n	5164 <z_arm_is_synchronous_svc+0x34>
		((fault_insn & 0x00ff) == _SVC_CALL_RUNTIME_EXCEPT)) {
		return true;
	}
#undef _SVC_OPCODE
	return false;
    5160:	2000      	movs	r0, #0
    5162:	4770      	bx	lr
		return true;
    5164:	2001      	movs	r0, #1
}
    5166:	4770      	bx	lr
    5168:	e000ed00 	.word	0xe000ed00

0000516c <get_esf>:
 *
 * @return ESF pointer on success, otherwise return NULL
 */
static inline z_arch_esf_t *get_esf(uint32_t msp, uint32_t psp, uint32_t exc_return,
	bool *nested_exc)
{
    516c:	b510      	push	{r4, lr}
    516e:	b088      	sub	sp, #32
	bool alternative_state_exc = false;
	z_arch_esf_t *ptr_esf = NULL;

	*nested_exc = false;
    5170:	2400      	movs	r4, #0
    5172:	701c      	strb	r4, [r3, #0]

	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    5174:	f002 447f 	and.w	r4, r2, #4278190080	; 0xff000000
    5178:	f1b4 4f7f 	cmp.w	r4, #4278190080	; 0xff000000
    517c:	d134      	bne.n	51e8 <get_esf+0x7c>
	}
#else
	/* The processor has a single execution state.
	 * We verify that the Thread mode is using PSP.
	 */
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    517e:	f002 040c 	and.w	r4, r2, #12
    5182:	2c08      	cmp	r4, #8
    5184:	d005      	beq.n	5192 <get_esf+0x26>
		return NULL;
	}
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	if (!alternative_state_exc) {
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    5186:	f012 0f08 	tst.w	r2, #8
    518a:	d02a      	beq.n	51e2 <get_esf+0x76>
			/* Returning to thread mode */
			ptr_esf =  (z_arch_esf_t *)psp;
    518c:	4608      	mov	r0, r1
			*nested_exc = true;
		}
	}

	return ptr_esf;
}
    518e:	b008      	add	sp, #32
    5190:	bd10      	pop	{r4, pc}
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    5192:	4b16      	ldr	r3, [pc, #88]	; (51ec <get_esf+0x80>)
    5194:	9307      	str	r3, [sp, #28]
    5196:	2302      	movs	r3, #2
    5198:	f88d 3004 	strb.w	r3, [sp, #4]
    519c:	2400      	movs	r4, #0
    519e:	f88d 4005 	strb.w	r4, [sp, #5]
    51a2:	f88d 4006 	strb.w	r4, [sp, #6]
    51a6:	f88d 4007 	strb.w	r4, [sp, #7]
    51aa:	9b01      	ldr	r3, [sp, #4]
    51ac:	9306      	str	r3, [sp, #24]
    51ae:	4621      	mov	r1, r4
    51b0:	f364 0100 	bfi	r1, r4, #0, #1
    51b4:	f364 0141 	bfi	r1, r4, #1, #1
    51b8:	f364 0182 	bfi	r1, r4, #2, #1
    51bc:	f364 01c5 	bfi	r1, r4, #3, #3
    51c0:	2301      	movs	r3, #1
    51c2:	f363 1188 	bfi	r1, r3, #6, #3
    51c6:	2308      	movs	r3, #8
    51c8:	f363 2152 	bfi	r1, r3, #9, #10
    51cc:	f364 41de 	bfi	r1, r4, #19, #12
    51d0:	f364 71df 	bfi	r1, r4, #31, #1
    51d4:	4623      	mov	r3, r4
    51d6:	aa06      	add	r2, sp, #24
    51d8:	4805      	ldr	r0, [pc, #20]	; (51f0 <get_esf+0x84>)
    51da:	f012 fc27 	bl	17a2c <z_impl_z_log_msg_static_create>
		return NULL;
    51de:	4620      	mov	r0, r4
    51e0:	e7d5      	b.n	518e <get_esf+0x22>
			*nested_exc = true;
    51e2:	2201      	movs	r2, #1
    51e4:	701a      	strb	r2, [r3, #0]
    51e6:	e7d2      	b.n	518e <get_esf+0x22>
		return NULL;
    51e8:	2000      	movs	r0, #0
    51ea:	e7d0      	b.n	518e <get_esf+0x22>
    51ec:	0002123c 	.word	0x0002123c
    51f0:	00020aa0 	.word	0x00020aa0

000051f4 <mem_manage_fault>:
{
    51f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    51f8:	b0a6      	sub	sp, #152	; 0x98
    51fa:	af00      	add	r7, sp, #0
    51fc:	4605      	mov	r5, r0
    51fe:	460e      	mov	r6, r1
    5200:	4614      	mov	r4, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    5202:	4baf      	ldr	r3, [pc, #700]	; (54c0 <mem_manage_fault+0x2cc>)
    5204:	61fb      	str	r3, [r7, #28]
    5206:	2302      	movs	r3, #2
    5208:	713b      	strb	r3, [r7, #4]
    520a:	2300      	movs	r3, #0
    520c:	717b      	strb	r3, [r7, #5]
    520e:	71bb      	strb	r3, [r7, #6]
    5210:	71fb      	strb	r3, [r7, #7]
    5212:	687a      	ldr	r2, [r7, #4]
    5214:	61ba      	str	r2, [r7, #24]
    5216:	4619      	mov	r1, r3
    5218:	f363 0100 	bfi	r1, r3, #0, #1
    521c:	f363 0141 	bfi	r1, r3, #1, #1
    5220:	f363 0182 	bfi	r1, r3, #2, #1
    5224:	f363 01c5 	bfi	r1, r3, #3, #3
    5228:	2201      	movs	r2, #1
    522a:	f362 1188 	bfi	r1, r2, #6, #3
    522e:	2208      	movs	r2, #8
    5230:	f362 2152 	bfi	r1, r2, #9, #10
    5234:	f363 41de 	bfi	r1, r3, #19, #12
    5238:	f363 71df 	bfi	r1, r3, #31, #1
    523c:	f107 0218 	add.w	r2, r7, #24
    5240:	48a0      	ldr	r0, [pc, #640]	; (54c4 <mem_manage_fault+0x2d0>)
    5242:	f012 fbf3 	bl	17a2c <z_impl_z_log_msg_static_create>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    5246:	4ba0      	ldr	r3, [pc, #640]	; (54c8 <mem_manage_fault+0x2d4>)
    5248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    524a:	f013 0f10 	tst.w	r3, #16
    524e:	d135      	bne.n	52bc <mem_manage_fault+0xc8>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    5250:	4b9d      	ldr	r3, [pc, #628]	; (54c8 <mem_manage_fault+0x2d4>)
    5252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5254:	f013 0f08 	tst.w	r3, #8
    5258:	d153      	bne.n	5302 <mem_manage_fault+0x10e>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    525a:	4b9b      	ldr	r3, [pc, #620]	; (54c8 <mem_manage_fault+0x2d4>)
    525c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    525e:	f013 0f02 	tst.w	r3, #2
    5262:	d171      	bne.n	5348 <mem_manage_fault+0x154>
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    5264:	4b98      	ldr	r3, [pc, #608]	; (54c8 <mem_manage_fault+0x2d4>)
    5266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5268:	f013 0f01 	tst.w	r3, #1
    526c:	f040 80e0 	bne.w	5430 <mem_manage_fault+0x23c>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    5270:	4b95      	ldr	r3, [pc, #596]	; (54c8 <mem_manage_fault+0x2d4>)
    5272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5274:	f013 0f20 	tst.w	r3, #32
    5278:	f040 80fd 	bne.w	5476 <mem_manage_fault+0x282>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    527c:	4b92      	ldr	r3, [pc, #584]	; (54c8 <mem_manage_fault+0x2d4>)
    527e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5280:	f013 0f10 	tst.w	r3, #16
    5284:	d101      	bne.n	528a <mem_manage_fault+0x96>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    5286:	4b90      	ldr	r3, [pc, #576]	; (54c8 <mem_manage_fault+0x2d4>)
    5288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    528a:	4b8f      	ldr	r3, [pc, #572]	; (54c8 <mem_manage_fault+0x2d4>)
    528c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    528e:	f013 0f20 	tst.w	r3, #32
    5292:	d004      	beq.n	529e <mem_manage_fault+0xaa>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    5294:	4a8c      	ldr	r2, [pc, #560]	; (54c8 <mem_manage_fault+0x2d4>)
    5296:	6a53      	ldr	r3, [r2, #36]	; 0x24
    5298:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    529c:	6253      	str	r3, [r2, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    529e:	4a8a      	ldr	r2, [pc, #552]	; (54c8 <mem_manage_fault+0x2d4>)
    52a0:	6a93      	ldr	r3, [r2, #40]	; 0x28
    52a2:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    52a6:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    52a8:	2101      	movs	r1, #1
    52aa:	4628      	mov	r0, r5
    52ac:	f013 fe76 	bl	18f9c <memory_fault_recoverable>
    52b0:	7020      	strb	r0, [r4, #0]
}
    52b2:	2000      	movs	r0, #0
    52b4:	3798      	adds	r7, #152	; 0x98
    52b6:	46bd      	mov	sp, r7
    52b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Stacking error (context area might be"
    52bc:	4b83      	ldr	r3, [pc, #524]	; (54cc <mem_manage_fault+0x2d8>)
    52be:	637b      	str	r3, [r7, #52]	; 0x34
    52c0:	2302      	movs	r3, #2
    52c2:	713b      	strb	r3, [r7, #4]
    52c4:	2300      	movs	r3, #0
    52c6:	717b      	strb	r3, [r7, #5]
    52c8:	71bb      	strb	r3, [r7, #6]
    52ca:	71fb      	strb	r3, [r7, #7]
    52cc:	687a      	ldr	r2, [r7, #4]
    52ce:	633a      	str	r2, [r7, #48]	; 0x30
    52d0:	4619      	mov	r1, r3
    52d2:	f363 0100 	bfi	r1, r3, #0, #1
    52d6:	f363 0141 	bfi	r1, r3, #1, #1
    52da:	f363 0182 	bfi	r1, r3, #2, #1
    52de:	f363 01c5 	bfi	r1, r3, #3, #3
    52e2:	2201      	movs	r2, #1
    52e4:	f362 1188 	bfi	r1, r2, #6, #3
    52e8:	2208      	movs	r2, #8
    52ea:	f362 2152 	bfi	r1, r2, #9, #10
    52ee:	f363 41de 	bfi	r1, r3, #19, #12
    52f2:	f363 71df 	bfi	r1, r3, #31, #1
    52f6:	f107 0230 	add.w	r2, r7, #48	; 0x30
    52fa:	4872      	ldr	r0, [pc, #456]	; (54c4 <mem_manage_fault+0x2d0>)
    52fc:	f012 fb96 	bl	17a2c <z_impl_z_log_msg_static_create>
    5300:	e7a6      	b.n	5250 <mem_manage_fault+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    5302:	4b73      	ldr	r3, [pc, #460]	; (54d0 <mem_manage_fault+0x2dc>)
    5304:	64fb      	str	r3, [r7, #76]	; 0x4c
    5306:	2302      	movs	r3, #2
    5308:	713b      	strb	r3, [r7, #4]
    530a:	2300      	movs	r3, #0
    530c:	717b      	strb	r3, [r7, #5]
    530e:	71bb      	strb	r3, [r7, #6]
    5310:	71fb      	strb	r3, [r7, #7]
    5312:	687a      	ldr	r2, [r7, #4]
    5314:	64ba      	str	r2, [r7, #72]	; 0x48
    5316:	4619      	mov	r1, r3
    5318:	f363 0100 	bfi	r1, r3, #0, #1
    531c:	f363 0141 	bfi	r1, r3, #1, #1
    5320:	f363 0182 	bfi	r1, r3, #2, #1
    5324:	f363 01c5 	bfi	r1, r3, #3, #3
    5328:	2201      	movs	r2, #1
    532a:	f362 1188 	bfi	r1, r2, #6, #3
    532e:	2208      	movs	r2, #8
    5330:	f362 2152 	bfi	r1, r2, #9, #10
    5334:	f363 41de 	bfi	r1, r3, #19, #12
    5338:	f363 71df 	bfi	r1, r3, #31, #1
    533c:	f107 0248 	add.w	r2, r7, #72	; 0x48
    5340:	4860      	ldr	r0, [pc, #384]	; (54c4 <mem_manage_fault+0x2d0>)
    5342:	f012 fb73 	bl	17a2c <z_impl_z_log_msg_static_create>
    5346:	e788      	b.n	525a <mem_manage_fault+0x66>
		PR_FAULT_INFO("  Data Access Violation");
    5348:	4b62      	ldr	r3, [pc, #392]	; (54d4 <mem_manage_fault+0x2e0>)
    534a:	667b      	str	r3, [r7, #100]	; 0x64
    534c:	2302      	movs	r3, #2
    534e:	713b      	strb	r3, [r7, #4]
    5350:	2300      	movs	r3, #0
    5352:	717b      	strb	r3, [r7, #5]
    5354:	71bb      	strb	r3, [r7, #6]
    5356:	71fb      	strb	r3, [r7, #7]
    5358:	687a      	ldr	r2, [r7, #4]
    535a:	663a      	str	r2, [r7, #96]	; 0x60
    535c:	4619      	mov	r1, r3
    535e:	f363 0100 	bfi	r1, r3, #0, #1
    5362:	f363 0141 	bfi	r1, r3, #1, #1
    5366:	f363 0182 	bfi	r1, r3, #2, #1
    536a:	f363 01c5 	bfi	r1, r3, #3, #3
    536e:	2201      	movs	r2, #1
    5370:	f362 1188 	bfi	r1, r2, #6, #3
    5374:	2208      	movs	r2, #8
    5376:	f362 2152 	bfi	r1, r2, #9, #10
    537a:	f363 41de 	bfi	r1, r3, #19, #12
    537e:	f363 71df 	bfi	r1, r3, #31, #1
    5382:	f107 0260 	add.w	r2, r7, #96	; 0x60
    5386:	484f      	ldr	r0, [pc, #316]	; (54c4 <mem_manage_fault+0x2d0>)
    5388:	f012 fb50 	bl	17a2c <z_impl_z_log_msg_static_create>
		uint32_t temp = SCB->MMFAR;
    538c:	4b4e      	ldr	r3, [pc, #312]	; (54c8 <mem_manage_fault+0x2d4>)
    538e:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    5390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5392:	f013 0f80 	tst.w	r3, #128	; 0x80
    5396:	f43f af65 	beq.w	5264 <mem_manage_fault+0x70>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    539a:	46e8      	mov	r8, sp
    539c:	b088      	sub	sp, #32
    539e:	466b      	mov	r3, sp
    53a0:	f113 0210 	adds.w	r2, r3, #16
    53a4:	d011      	beq.n	53ca <mem_manage_fault+0x1d6>
    53a6:	210c      	movs	r1, #12
    53a8:	b152      	cbz	r2, 53c0 <mem_manage_fault+0x1cc>
    53aa:	468c      	mov	ip, r1
    53ac:	2904      	cmp	r1, #4
    53ae:	dd03      	ble.n	53b8 <mem_manage_fault+0x1c4>
    53b0:	f8df e124 	ldr.w	lr, [pc, #292]	; 54d8 <mem_manage_fault+0x2e4>
    53b4:	f8c3 e014 	str.w	lr, [r3, #20]
    53b8:	f1bc 0f08 	cmp.w	ip, #8
    53bc:	dd08      	ble.n	53d0 <mem_manage_fault+0x1dc>
    53be:	6198      	str	r0, [r3, #24]
    53c0:	290b      	cmp	r1, #11
    53c2:	dd32      	ble.n	542a <mem_manage_fault+0x236>
    53c4:	f04f 0c0c 	mov.w	ip, #12
    53c8:	e004      	b.n	53d4 <mem_manage_fault+0x1e0>
    53ca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    53ce:	e7eb      	b.n	53a8 <mem_manage_fault+0x1b4>
    53d0:	f06f 0c1b 	mvn.w	ip, #27
    53d4:	b13a      	cbz	r2, 53e6 <mem_manage_fault+0x1f2>
    53d6:	2103      	movs	r1, #3
    53d8:	7139      	strb	r1, [r7, #4]
    53da:	2100      	movs	r1, #0
    53dc:	7179      	strb	r1, [r7, #5]
    53de:	71b9      	strb	r1, [r7, #6]
    53e0:	71f9      	strb	r1, [r7, #7]
    53e2:	6878      	ldr	r0, [r7, #4]
    53e4:	6118      	str	r0, [r3, #16]
    53e6:	2100      	movs	r1, #0
    53e8:	f36f 0100 	bfc	r1, #0, #1
    53ec:	f36f 0141 	bfc	r1, #1, #1
    53f0:	f36f 0182 	bfc	r1, #2, #1
    53f4:	f36f 01c5 	bfc	r1, #3, #3
    53f8:	2301      	movs	r3, #1
    53fa:	f363 1188 	bfi	r1, r3, #6, #3
    53fe:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
    5402:	f363 2152 	bfi	r1, r3, #9, #10
    5406:	f36f 41de 	bfc	r1, #19, #12
    540a:	f36f 71df 	bfc	r1, #31, #1
    540e:	2300      	movs	r3, #0
    5410:	482c      	ldr	r0, [pc, #176]	; (54c4 <mem_manage_fault+0x2d0>)
    5412:	f012 fb0b 	bl	17a2c <z_impl_z_log_msg_static_create>
    5416:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    5418:	2e00      	cmp	r6, #0
    541a:	f43f af23 	beq.w	5264 <mem_manage_fault+0x70>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    541e:	4a2a      	ldr	r2, [pc, #168]	; (54c8 <mem_manage_fault+0x2d4>)
    5420:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5422:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    5426:	6293      	str	r3, [r2, #40]	; 0x28
    5428:	e71c      	b.n	5264 <mem_manage_fault+0x70>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    542a:	f06f 0c1b 	mvn.w	ip, #27
    542e:	e7d1      	b.n	53d4 <mem_manage_fault+0x1e0>
		PR_FAULT_INFO("  Instruction Access Violation");
    5430:	4b2a      	ldr	r3, [pc, #168]	; (54dc <mem_manage_fault+0x2e8>)
    5432:	67fb      	str	r3, [r7, #124]	; 0x7c
    5434:	2302      	movs	r3, #2
    5436:	713b      	strb	r3, [r7, #4]
    5438:	2300      	movs	r3, #0
    543a:	717b      	strb	r3, [r7, #5]
    543c:	71bb      	strb	r3, [r7, #6]
    543e:	71fb      	strb	r3, [r7, #7]
    5440:	687a      	ldr	r2, [r7, #4]
    5442:	67ba      	str	r2, [r7, #120]	; 0x78
    5444:	4619      	mov	r1, r3
    5446:	f363 0100 	bfi	r1, r3, #0, #1
    544a:	f363 0141 	bfi	r1, r3, #1, #1
    544e:	f363 0182 	bfi	r1, r3, #2, #1
    5452:	f363 01c5 	bfi	r1, r3, #3, #3
    5456:	2201      	movs	r2, #1
    5458:	f362 1188 	bfi	r1, r2, #6, #3
    545c:	2208      	movs	r2, #8
    545e:	f362 2152 	bfi	r1, r2, #9, #10
    5462:	f363 41de 	bfi	r1, r3, #19, #12
    5466:	f363 71df 	bfi	r1, r3, #31, #1
    546a:	f107 0278 	add.w	r2, r7, #120	; 0x78
    546e:	4815      	ldr	r0, [pc, #84]	; (54c4 <mem_manage_fault+0x2d0>)
    5470:	f012 fadc 	bl	17a2c <z_impl_z_log_msg_static_create>
    5474:	e6fc      	b.n	5270 <mem_manage_fault+0x7c>
		PR_FAULT_INFO(
    5476:	4b1a      	ldr	r3, [pc, #104]	; (54e0 <mem_manage_fault+0x2ec>)
    5478:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    547c:	2302      	movs	r3, #2
    547e:	713b      	strb	r3, [r7, #4]
    5480:	2300      	movs	r3, #0
    5482:	717b      	strb	r3, [r7, #5]
    5484:	71bb      	strb	r3, [r7, #6]
    5486:	71fb      	strb	r3, [r7, #7]
    5488:	687a      	ldr	r2, [r7, #4]
    548a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
    548e:	4619      	mov	r1, r3
    5490:	f363 0100 	bfi	r1, r3, #0, #1
    5494:	f363 0141 	bfi	r1, r3, #1, #1
    5498:	f363 0182 	bfi	r1, r3, #2, #1
    549c:	f363 01c5 	bfi	r1, r3, #3, #3
    54a0:	2201      	movs	r2, #1
    54a2:	f362 1188 	bfi	r1, r2, #6, #3
    54a6:	2208      	movs	r2, #8
    54a8:	f362 2152 	bfi	r1, r2, #9, #10
    54ac:	f363 41de 	bfi	r1, r3, #19, #12
    54b0:	f363 71df 	bfi	r1, r3, #31, #1
    54b4:	f107 0290 	add.w	r2, r7, #144	; 0x90
    54b8:	4802      	ldr	r0, [pc, #8]	; (54c4 <mem_manage_fault+0x2d0>)
    54ba:	f012 fab7 	bl	17a2c <z_impl_z_log_msg_static_create>
    54be:	e6dd      	b.n	527c <mem_manage_fault+0x88>
    54c0:	00021268 	.word	0x00021268
    54c4:	00020aa0 	.word	0x00020aa0
    54c8:	e000ed00 	.word	0xe000ed00
    54cc:	00021280 	.word	0x00021280
    54d0:	000212b4 	.word	0x000212b4
    54d4:	000212c8 	.word	0x000212c8
    54d8:	000212e0 	.word	0x000212e0
    54dc:	000212f8 	.word	0x000212f8
    54e0:	00021318 	.word	0x00021318

000054e4 <bus_fault>:
{
    54e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    54e8:	b0ac      	sub	sp, #176	; 0xb0
    54ea:	af00      	add	r7, sp, #0
    54ec:	4605      	mov	r5, r0
    54ee:	460e      	mov	r6, r1
    54f0:	4614      	mov	r4, r2
	PR_FAULT_INFO("***** BUS FAULT *****");
    54f2:	4bbc      	ldr	r3, [pc, #752]	; (57e4 <bus_fault+0x300>)
    54f4:	61fb      	str	r3, [r7, #28]
    54f6:	2302      	movs	r3, #2
    54f8:	713b      	strb	r3, [r7, #4]
    54fa:	2300      	movs	r3, #0
    54fc:	717b      	strb	r3, [r7, #5]
    54fe:	71bb      	strb	r3, [r7, #6]
    5500:	71fb      	strb	r3, [r7, #7]
    5502:	687a      	ldr	r2, [r7, #4]
    5504:	61ba      	str	r2, [r7, #24]
    5506:	4619      	mov	r1, r3
    5508:	f363 0100 	bfi	r1, r3, #0, #1
    550c:	f363 0141 	bfi	r1, r3, #1, #1
    5510:	f363 0182 	bfi	r1, r3, #2, #1
    5514:	f363 01c5 	bfi	r1, r3, #3, #3
    5518:	2201      	movs	r2, #1
    551a:	f362 1188 	bfi	r1, r2, #6, #3
    551e:	2208      	movs	r2, #8
    5520:	f362 2152 	bfi	r1, r2, #9, #10
    5524:	f363 41de 	bfi	r1, r3, #19, #12
    5528:	f363 71df 	bfi	r1, r3, #31, #1
    552c:	f107 0218 	add.w	r2, r7, #24
    5530:	48ad      	ldr	r0, [pc, #692]	; (57e8 <bus_fault+0x304>)
    5532:	f012 fa7b 	bl	17a2c <z_impl_z_log_msg_static_create>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    5536:	4bad      	ldr	r3, [pc, #692]	; (57ec <bus_fault+0x308>)
    5538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    553a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    553e:	d12a      	bne.n	5596 <bus_fault+0xb2>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    5540:	4baa      	ldr	r3, [pc, #680]	; (57ec <bus_fault+0x308>)
    5542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5544:	f413 6f00 	tst.w	r3, #2048	; 0x800
    5548:	d148      	bne.n	55dc <bus_fault+0xf8>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    554a:	4ba8      	ldr	r3, [pc, #672]	; (57ec <bus_fault+0x308>)
    554c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    554e:	f413 7f00 	tst.w	r3, #512	; 0x200
    5552:	d166      	bne.n	5622 <bus_fault+0x13e>
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    5554:	4ba5      	ldr	r3, [pc, #660]	; (57ec <bus_fault+0x308>)
    5556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5558:	f413 6f80 	tst.w	r3, #1024	; 0x400
    555c:	f040 80d5 	bne.w	570a <bus_fault+0x226>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    5560:	4ba2      	ldr	r3, [pc, #648]	; (57ec <bus_fault+0x308>)
    5562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5564:	f413 7f80 	tst.w	r3, #256	; 0x100
    5568:	f040 80f2 	bne.w	5750 <bus_fault+0x26c>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    556c:	4b9f      	ldr	r3, [pc, #636]	; (57ec <bus_fault+0x308>)
    556e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5570:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    5574:	f040 8111 	bne.w	579a <bus_fault+0x2b6>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    5578:	4a9c      	ldr	r2, [pc, #624]	; (57ec <bus_fault+0x308>)
    557a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    557c:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    5580:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    5582:	2101      	movs	r1, #1
    5584:	4628      	mov	r0, r5
    5586:	f013 fd09 	bl	18f9c <memory_fault_recoverable>
    558a:	7020      	strb	r0, [r4, #0]
}
    558c:	2000      	movs	r0, #0
    558e:	37b0      	adds	r7, #176	; 0xb0
    5590:	46bd      	mov	sp, r7
    5592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Stacking error");
    5596:	4b96      	ldr	r3, [pc, #600]	; (57f0 <bus_fault+0x30c>)
    5598:	637b      	str	r3, [r7, #52]	; 0x34
    559a:	2302      	movs	r3, #2
    559c:	713b      	strb	r3, [r7, #4]
    559e:	2300      	movs	r3, #0
    55a0:	717b      	strb	r3, [r7, #5]
    55a2:	71bb      	strb	r3, [r7, #6]
    55a4:	71fb      	strb	r3, [r7, #7]
    55a6:	687a      	ldr	r2, [r7, #4]
    55a8:	633a      	str	r2, [r7, #48]	; 0x30
    55aa:	4619      	mov	r1, r3
    55ac:	f363 0100 	bfi	r1, r3, #0, #1
    55b0:	f363 0141 	bfi	r1, r3, #1, #1
    55b4:	f363 0182 	bfi	r1, r3, #2, #1
    55b8:	f363 01c5 	bfi	r1, r3, #3, #3
    55bc:	2201      	movs	r2, #1
    55be:	f362 1188 	bfi	r1, r2, #6, #3
    55c2:	2208      	movs	r2, #8
    55c4:	f362 2152 	bfi	r1, r2, #9, #10
    55c8:	f363 41de 	bfi	r1, r3, #19, #12
    55cc:	f363 71df 	bfi	r1, r3, #31, #1
    55d0:	f107 0230 	add.w	r2, r7, #48	; 0x30
    55d4:	4884      	ldr	r0, [pc, #528]	; (57e8 <bus_fault+0x304>)
    55d6:	f012 fa29 	bl	17a2c <z_impl_z_log_msg_static_create>
    55da:	e7b1      	b.n	5540 <bus_fault+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    55dc:	4b85      	ldr	r3, [pc, #532]	; (57f4 <bus_fault+0x310>)
    55de:	64fb      	str	r3, [r7, #76]	; 0x4c
    55e0:	2302      	movs	r3, #2
    55e2:	713b      	strb	r3, [r7, #4]
    55e4:	2300      	movs	r3, #0
    55e6:	717b      	strb	r3, [r7, #5]
    55e8:	71bb      	strb	r3, [r7, #6]
    55ea:	71fb      	strb	r3, [r7, #7]
    55ec:	687a      	ldr	r2, [r7, #4]
    55ee:	64ba      	str	r2, [r7, #72]	; 0x48
    55f0:	4619      	mov	r1, r3
    55f2:	f363 0100 	bfi	r1, r3, #0, #1
    55f6:	f363 0141 	bfi	r1, r3, #1, #1
    55fa:	f363 0182 	bfi	r1, r3, #2, #1
    55fe:	f363 01c5 	bfi	r1, r3, #3, #3
    5602:	2201      	movs	r2, #1
    5604:	f362 1188 	bfi	r1, r2, #6, #3
    5608:	2208      	movs	r2, #8
    560a:	f362 2152 	bfi	r1, r2, #9, #10
    560e:	f363 41de 	bfi	r1, r3, #19, #12
    5612:	f363 71df 	bfi	r1, r3, #31, #1
    5616:	f107 0248 	add.w	r2, r7, #72	; 0x48
    561a:	4873      	ldr	r0, [pc, #460]	; (57e8 <bus_fault+0x304>)
    561c:	f012 fa06 	bl	17a2c <z_impl_z_log_msg_static_create>
    5620:	e793      	b.n	554a <bus_fault+0x66>
		PR_FAULT_INFO("  Precise data bus error");
    5622:	4b75      	ldr	r3, [pc, #468]	; (57f8 <bus_fault+0x314>)
    5624:	667b      	str	r3, [r7, #100]	; 0x64
    5626:	2302      	movs	r3, #2
    5628:	713b      	strb	r3, [r7, #4]
    562a:	2300      	movs	r3, #0
    562c:	717b      	strb	r3, [r7, #5]
    562e:	71bb      	strb	r3, [r7, #6]
    5630:	71fb      	strb	r3, [r7, #7]
    5632:	687a      	ldr	r2, [r7, #4]
    5634:	663a      	str	r2, [r7, #96]	; 0x60
    5636:	4619      	mov	r1, r3
    5638:	f363 0100 	bfi	r1, r3, #0, #1
    563c:	f363 0141 	bfi	r1, r3, #1, #1
    5640:	f363 0182 	bfi	r1, r3, #2, #1
    5644:	f363 01c5 	bfi	r1, r3, #3, #3
    5648:	2201      	movs	r2, #1
    564a:	f362 1188 	bfi	r1, r2, #6, #3
    564e:	2208      	movs	r2, #8
    5650:	f362 2152 	bfi	r1, r2, #9, #10
    5654:	f363 41de 	bfi	r1, r3, #19, #12
    5658:	f363 71df 	bfi	r1, r3, #31, #1
    565c:	f107 0260 	add.w	r2, r7, #96	; 0x60
    5660:	4861      	ldr	r0, [pc, #388]	; (57e8 <bus_fault+0x304>)
    5662:	f012 f9e3 	bl	17a2c <z_impl_z_log_msg_static_create>
		STORE_xFAR(bfar, SCB->BFAR);
    5666:	4b61      	ldr	r3, [pc, #388]	; (57ec <bus_fault+0x308>)
    5668:	6b98      	ldr	r0, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    566a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    566c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    5670:	f43f af70 	beq.w	5554 <bus_fault+0x70>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    5674:	46e8      	mov	r8, sp
    5676:	b088      	sub	sp, #32
    5678:	466b      	mov	r3, sp
    567a:	f113 0210 	adds.w	r2, r3, #16
    567e:	d011      	beq.n	56a4 <bus_fault+0x1c0>
    5680:	210c      	movs	r1, #12
    5682:	b152      	cbz	r2, 569a <bus_fault+0x1b6>
    5684:	468c      	mov	ip, r1
    5686:	2904      	cmp	r1, #4
    5688:	dd03      	ble.n	5692 <bus_fault+0x1ae>
    568a:	f8df e170 	ldr.w	lr, [pc, #368]	; 57fc <bus_fault+0x318>
    568e:	f8c3 e014 	str.w	lr, [r3, #20]
    5692:	f1bc 0f08 	cmp.w	ip, #8
    5696:	dd08      	ble.n	56aa <bus_fault+0x1c6>
    5698:	6198      	str	r0, [r3, #24]
    569a:	290b      	cmp	r1, #11
    569c:	dd32      	ble.n	5704 <bus_fault+0x220>
    569e:	f04f 0c0c 	mov.w	ip, #12
    56a2:	e004      	b.n	56ae <bus_fault+0x1ca>
    56a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    56a8:	e7eb      	b.n	5682 <bus_fault+0x19e>
    56aa:	f06f 0c1b 	mvn.w	ip, #27
    56ae:	b13a      	cbz	r2, 56c0 <bus_fault+0x1dc>
    56b0:	2103      	movs	r1, #3
    56b2:	7139      	strb	r1, [r7, #4]
    56b4:	2100      	movs	r1, #0
    56b6:	7179      	strb	r1, [r7, #5]
    56b8:	71b9      	strb	r1, [r7, #6]
    56ba:	71f9      	strb	r1, [r7, #7]
    56bc:	6878      	ldr	r0, [r7, #4]
    56be:	6118      	str	r0, [r3, #16]
    56c0:	2100      	movs	r1, #0
    56c2:	f36f 0100 	bfc	r1, #0, #1
    56c6:	f36f 0141 	bfc	r1, #1, #1
    56ca:	f36f 0182 	bfc	r1, #2, #1
    56ce:	f36f 01c5 	bfc	r1, #3, #3
    56d2:	2301      	movs	r3, #1
    56d4:	f363 1188 	bfi	r1, r3, #6, #3
    56d8:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
    56dc:	f363 2152 	bfi	r1, r3, #9, #10
    56e0:	f36f 41de 	bfc	r1, #19, #12
    56e4:	f36f 71df 	bfc	r1, #31, #1
    56e8:	2300      	movs	r3, #0
    56ea:	483f      	ldr	r0, [pc, #252]	; (57e8 <bus_fault+0x304>)
    56ec:	f012 f99e 	bl	17a2c <z_impl_z_log_msg_static_create>
    56f0:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    56f2:	2e00      	cmp	r6, #0
    56f4:	f43f af2e 	beq.w	5554 <bus_fault+0x70>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    56f8:	4a3c      	ldr	r2, [pc, #240]	; (57ec <bus_fault+0x308>)
    56fa:	6a93      	ldr	r3, [r2, #40]	; 0x28
    56fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    5700:	6293      	str	r3, [r2, #40]	; 0x28
    5702:	e727      	b.n	5554 <bus_fault+0x70>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    5704:	f06f 0c1b 	mvn.w	ip, #27
    5708:	e7d1      	b.n	56ae <bus_fault+0x1ca>
		PR_FAULT_INFO("  Imprecise data bus error");
    570a:	4b3d      	ldr	r3, [pc, #244]	; (5800 <bus_fault+0x31c>)
    570c:	67fb      	str	r3, [r7, #124]	; 0x7c
    570e:	2302      	movs	r3, #2
    5710:	713b      	strb	r3, [r7, #4]
    5712:	2300      	movs	r3, #0
    5714:	717b      	strb	r3, [r7, #5]
    5716:	71bb      	strb	r3, [r7, #6]
    5718:	71fb      	strb	r3, [r7, #7]
    571a:	687a      	ldr	r2, [r7, #4]
    571c:	67ba      	str	r2, [r7, #120]	; 0x78
    571e:	4619      	mov	r1, r3
    5720:	f363 0100 	bfi	r1, r3, #0, #1
    5724:	f363 0141 	bfi	r1, r3, #1, #1
    5728:	f363 0182 	bfi	r1, r3, #2, #1
    572c:	f363 01c5 	bfi	r1, r3, #3, #3
    5730:	2201      	movs	r2, #1
    5732:	f362 1188 	bfi	r1, r2, #6, #3
    5736:	2208      	movs	r2, #8
    5738:	f362 2152 	bfi	r1, r2, #9, #10
    573c:	f363 41de 	bfi	r1, r3, #19, #12
    5740:	f363 71df 	bfi	r1, r3, #31, #1
    5744:	f107 0278 	add.w	r2, r7, #120	; 0x78
    5748:	4827      	ldr	r0, [pc, #156]	; (57e8 <bus_fault+0x304>)
    574a:	f012 f96f 	bl	17a2c <z_impl_z_log_msg_static_create>
    574e:	e707      	b.n	5560 <bus_fault+0x7c>
		PR_FAULT_INFO("  Instruction bus error");
    5750:	4b2c      	ldr	r3, [pc, #176]	; (5804 <bus_fault+0x320>)
    5752:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    5756:	2302      	movs	r3, #2
    5758:	713b      	strb	r3, [r7, #4]
    575a:	2300      	movs	r3, #0
    575c:	717b      	strb	r3, [r7, #5]
    575e:	71bb      	strb	r3, [r7, #6]
    5760:	71fb      	strb	r3, [r7, #7]
    5762:	687a      	ldr	r2, [r7, #4]
    5764:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
    5768:	4619      	mov	r1, r3
    576a:	f363 0100 	bfi	r1, r3, #0, #1
    576e:	f363 0141 	bfi	r1, r3, #1, #1
    5772:	f363 0182 	bfi	r1, r3, #2, #1
    5776:	f363 01c5 	bfi	r1, r3, #3, #3
    577a:	2201      	movs	r2, #1
    577c:	f362 1188 	bfi	r1, r2, #6, #3
    5780:	2208      	movs	r2, #8
    5782:	f362 2152 	bfi	r1, r2, #9, #10
    5786:	f363 41de 	bfi	r1, r3, #19, #12
    578a:	f363 71df 	bfi	r1, r3, #31, #1
    578e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
    5792:	4815      	ldr	r0, [pc, #84]	; (57e8 <bus_fault+0x304>)
    5794:	f012 f94a 	bl	17a2c <z_impl_z_log_msg_static_create>
    5798:	e6ee      	b.n	5578 <bus_fault+0x94>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    579a:	4b1b      	ldr	r3, [pc, #108]	; (5808 <bus_fault+0x324>)
    579c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    57a0:	2302      	movs	r3, #2
    57a2:	713b      	strb	r3, [r7, #4]
    57a4:	2300      	movs	r3, #0
    57a6:	717b      	strb	r3, [r7, #5]
    57a8:	71bb      	strb	r3, [r7, #6]
    57aa:	71fb      	strb	r3, [r7, #7]
    57ac:	687a      	ldr	r2, [r7, #4]
    57ae:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
    57b2:	4619      	mov	r1, r3
    57b4:	f363 0100 	bfi	r1, r3, #0, #1
    57b8:	f363 0141 	bfi	r1, r3, #1, #1
    57bc:	f363 0182 	bfi	r1, r3, #2, #1
    57c0:	f363 01c5 	bfi	r1, r3, #3, #3
    57c4:	2201      	movs	r2, #1
    57c6:	f362 1188 	bfi	r1, r2, #6, #3
    57ca:	2208      	movs	r2, #8
    57cc:	f362 2152 	bfi	r1, r2, #9, #10
    57d0:	f363 41de 	bfi	r1, r3, #19, #12
    57d4:	f363 71df 	bfi	r1, r3, #31, #1
    57d8:	f107 0290 	add.w	r2, r7, #144	; 0x90
    57dc:	4802      	ldr	r0, [pc, #8]	; (57e8 <bus_fault+0x304>)
    57de:	f012 f925 	bl	17a2c <z_impl_z_log_msg_static_create>
    57e2:	e6c9      	b.n	5578 <bus_fault+0x94>
    57e4:	00021348 	.word	0x00021348
    57e8:	00020aa0 	.word	0x00020aa0
    57ec:	e000ed00 	.word	0xe000ed00
    57f0:	00021360 	.word	0x00021360
    57f4:	000212b4 	.word	0x000212b4
    57f8:	00021374 	.word	0x00021374
    57fc:	00021390 	.word	0x00021390
    5800:	000213a8 	.word	0x000213a8
    5804:	000213c4 	.word	0x000213c4
    5808:	00021318 	.word	0x00021318

0000580c <usage_fault>:
{
    580c:	b500      	push	{lr}
    580e:	b0ad      	sub	sp, #180	; 0xb4
	PR_FAULT_INFO("***** USAGE FAULT *****");
    5810:	4b9a      	ldr	r3, [pc, #616]	; (5a7c <usage_fault+0x270>)
    5812:	9307      	str	r3, [sp, #28]
    5814:	2302      	movs	r3, #2
    5816:	f88d 3004 	strb.w	r3, [sp, #4]
    581a:	2300      	movs	r3, #0
    581c:	f88d 3005 	strb.w	r3, [sp, #5]
    5820:	f88d 3006 	strb.w	r3, [sp, #6]
    5824:	f88d 3007 	strb.w	r3, [sp, #7]
    5828:	9a01      	ldr	r2, [sp, #4]
    582a:	9206      	str	r2, [sp, #24]
    582c:	4619      	mov	r1, r3
    582e:	f363 0100 	bfi	r1, r3, #0, #1
    5832:	f363 0141 	bfi	r1, r3, #1, #1
    5836:	f363 0182 	bfi	r1, r3, #2, #1
    583a:	f363 01c5 	bfi	r1, r3, #3, #3
    583e:	2201      	movs	r2, #1
    5840:	f362 1188 	bfi	r1, r2, #6, #3
    5844:	2208      	movs	r2, #8
    5846:	f362 2152 	bfi	r1, r2, #9, #10
    584a:	f363 41de 	bfi	r1, r3, #19, #12
    584e:	f363 71df 	bfi	r1, r3, #31, #1
    5852:	aa06      	add	r2, sp, #24
    5854:	488a      	ldr	r0, [pc, #552]	; (5a80 <usage_fault+0x274>)
    5856:	f012 f8e9 	bl	17a2c <z_impl_z_log_msg_static_create>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    585a:	4b8a      	ldr	r3, [pc, #552]	; (5a84 <usage_fault+0x278>)
    585c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    585e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    5862:	d126      	bne.n	58b2 <usage_fault+0xa6>
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    5864:	4b87      	ldr	r3, [pc, #540]	; (5a84 <usage_fault+0x278>)
    5866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5868:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
    586c:	d147      	bne.n	58fe <usage_fault+0xf2>
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    586e:	4b85      	ldr	r3, [pc, #532]	; (5a84 <usage_fault+0x278>)
    5870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5872:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    5876:	d168      	bne.n	594a <usage_fault+0x13e>
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    5878:	4b82      	ldr	r3, [pc, #520]	; (5a84 <usage_fault+0x278>)
    587a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    587c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    5880:	f040 8089 	bne.w	5996 <usage_fault+0x18a>
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    5884:	4b7f      	ldr	r3, [pc, #508]	; (5a84 <usage_fault+0x278>)
    5886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5888:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    588c:	f040 80a9 	bne.w	59e2 <usage_fault+0x1d6>
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    5890:	4b7c      	ldr	r3, [pc, #496]	; (5a84 <usage_fault+0x278>)
    5892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5894:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    5898:	f040 80c9 	bne.w	5a2e <usage_fault+0x222>
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    589c:	4a79      	ldr	r2, [pc, #484]	; (5a84 <usage_fault+0x278>)
    589e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    58a0:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    58a4:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    58a8:	6293      	str	r3, [r2, #40]	; 0x28
}
    58aa:	2000      	movs	r0, #0
    58ac:	b02d      	add	sp, #180	; 0xb4
    58ae:	f85d fb04 	ldr.w	pc, [sp], #4
		PR_FAULT_INFO("  Division by zero");
    58b2:	4b75      	ldr	r3, [pc, #468]	; (5a88 <usage_fault+0x27c>)
    58b4:	930d      	str	r3, [sp, #52]	; 0x34
    58b6:	2302      	movs	r3, #2
    58b8:	f88d 3004 	strb.w	r3, [sp, #4]
    58bc:	2300      	movs	r3, #0
    58be:	f88d 3005 	strb.w	r3, [sp, #5]
    58c2:	f88d 3006 	strb.w	r3, [sp, #6]
    58c6:	f88d 3007 	strb.w	r3, [sp, #7]
    58ca:	9a01      	ldr	r2, [sp, #4]
    58cc:	920c      	str	r2, [sp, #48]	; 0x30
    58ce:	4619      	mov	r1, r3
    58d0:	f363 0100 	bfi	r1, r3, #0, #1
    58d4:	f363 0141 	bfi	r1, r3, #1, #1
    58d8:	f363 0182 	bfi	r1, r3, #2, #1
    58dc:	f363 01c5 	bfi	r1, r3, #3, #3
    58e0:	2201      	movs	r2, #1
    58e2:	f362 1188 	bfi	r1, r2, #6, #3
    58e6:	2208      	movs	r2, #8
    58e8:	f362 2152 	bfi	r1, r2, #9, #10
    58ec:	f363 41de 	bfi	r1, r3, #19, #12
    58f0:	f363 71df 	bfi	r1, r3, #31, #1
    58f4:	aa0c      	add	r2, sp, #48	; 0x30
    58f6:	4862      	ldr	r0, [pc, #392]	; (5a80 <usage_fault+0x274>)
    58f8:	f012 f898 	bl	17a2c <z_impl_z_log_msg_static_create>
    58fc:	e7b2      	b.n	5864 <usage_fault+0x58>
		PR_FAULT_INFO("  Unaligned memory access");
    58fe:	4b63      	ldr	r3, [pc, #396]	; (5a8c <usage_fault+0x280>)
    5900:	9313      	str	r3, [sp, #76]	; 0x4c
    5902:	2302      	movs	r3, #2
    5904:	f88d 3004 	strb.w	r3, [sp, #4]
    5908:	2300      	movs	r3, #0
    590a:	f88d 3005 	strb.w	r3, [sp, #5]
    590e:	f88d 3006 	strb.w	r3, [sp, #6]
    5912:	f88d 3007 	strb.w	r3, [sp, #7]
    5916:	9a01      	ldr	r2, [sp, #4]
    5918:	9212      	str	r2, [sp, #72]	; 0x48
    591a:	4619      	mov	r1, r3
    591c:	f363 0100 	bfi	r1, r3, #0, #1
    5920:	f363 0141 	bfi	r1, r3, #1, #1
    5924:	f363 0182 	bfi	r1, r3, #2, #1
    5928:	f363 01c5 	bfi	r1, r3, #3, #3
    592c:	2201      	movs	r2, #1
    592e:	f362 1188 	bfi	r1, r2, #6, #3
    5932:	2208      	movs	r2, #8
    5934:	f362 2152 	bfi	r1, r2, #9, #10
    5938:	f363 41de 	bfi	r1, r3, #19, #12
    593c:	f363 71df 	bfi	r1, r3, #31, #1
    5940:	aa12      	add	r2, sp, #72	; 0x48
    5942:	484f      	ldr	r0, [pc, #316]	; (5a80 <usage_fault+0x274>)
    5944:	f012 f872 	bl	17a2c <z_impl_z_log_msg_static_create>
    5948:	e791      	b.n	586e <usage_fault+0x62>
		PR_FAULT_INFO("  No coprocessor instructions");
    594a:	4b51      	ldr	r3, [pc, #324]	; (5a90 <usage_fault+0x284>)
    594c:	9319      	str	r3, [sp, #100]	; 0x64
    594e:	2302      	movs	r3, #2
    5950:	f88d 3004 	strb.w	r3, [sp, #4]
    5954:	2300      	movs	r3, #0
    5956:	f88d 3005 	strb.w	r3, [sp, #5]
    595a:	f88d 3006 	strb.w	r3, [sp, #6]
    595e:	f88d 3007 	strb.w	r3, [sp, #7]
    5962:	9a01      	ldr	r2, [sp, #4]
    5964:	9218      	str	r2, [sp, #96]	; 0x60
    5966:	4619      	mov	r1, r3
    5968:	f363 0100 	bfi	r1, r3, #0, #1
    596c:	f363 0141 	bfi	r1, r3, #1, #1
    5970:	f363 0182 	bfi	r1, r3, #2, #1
    5974:	f363 01c5 	bfi	r1, r3, #3, #3
    5978:	2201      	movs	r2, #1
    597a:	f362 1188 	bfi	r1, r2, #6, #3
    597e:	2208      	movs	r2, #8
    5980:	f362 2152 	bfi	r1, r2, #9, #10
    5984:	f363 41de 	bfi	r1, r3, #19, #12
    5988:	f363 71df 	bfi	r1, r3, #31, #1
    598c:	aa18      	add	r2, sp, #96	; 0x60
    598e:	483c      	ldr	r0, [pc, #240]	; (5a80 <usage_fault+0x274>)
    5990:	f012 f84c 	bl	17a2c <z_impl_z_log_msg_static_create>
    5994:	e770      	b.n	5878 <usage_fault+0x6c>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    5996:	4b3f      	ldr	r3, [pc, #252]	; (5a94 <usage_fault+0x288>)
    5998:	931f      	str	r3, [sp, #124]	; 0x7c
    599a:	2302      	movs	r3, #2
    599c:	f88d 3004 	strb.w	r3, [sp, #4]
    59a0:	2300      	movs	r3, #0
    59a2:	f88d 3005 	strb.w	r3, [sp, #5]
    59a6:	f88d 3006 	strb.w	r3, [sp, #6]
    59aa:	f88d 3007 	strb.w	r3, [sp, #7]
    59ae:	9a01      	ldr	r2, [sp, #4]
    59b0:	921e      	str	r2, [sp, #120]	; 0x78
    59b2:	4619      	mov	r1, r3
    59b4:	f363 0100 	bfi	r1, r3, #0, #1
    59b8:	f363 0141 	bfi	r1, r3, #1, #1
    59bc:	f363 0182 	bfi	r1, r3, #2, #1
    59c0:	f363 01c5 	bfi	r1, r3, #3, #3
    59c4:	2201      	movs	r2, #1
    59c6:	f362 1188 	bfi	r1, r2, #6, #3
    59ca:	2208      	movs	r2, #8
    59cc:	f362 2152 	bfi	r1, r2, #9, #10
    59d0:	f363 41de 	bfi	r1, r3, #19, #12
    59d4:	f363 71df 	bfi	r1, r3, #31, #1
    59d8:	aa1e      	add	r2, sp, #120	; 0x78
    59da:	4829      	ldr	r0, [pc, #164]	; (5a80 <usage_fault+0x274>)
    59dc:	f012 f826 	bl	17a2c <z_impl_z_log_msg_static_create>
    59e0:	e750      	b.n	5884 <usage_fault+0x78>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    59e2:	4b2d      	ldr	r3, [pc, #180]	; (5a98 <usage_fault+0x28c>)
    59e4:	9325      	str	r3, [sp, #148]	; 0x94
    59e6:	2302      	movs	r3, #2
    59e8:	f88d 3004 	strb.w	r3, [sp, #4]
    59ec:	2300      	movs	r3, #0
    59ee:	f88d 3005 	strb.w	r3, [sp, #5]
    59f2:	f88d 3006 	strb.w	r3, [sp, #6]
    59f6:	f88d 3007 	strb.w	r3, [sp, #7]
    59fa:	9a01      	ldr	r2, [sp, #4]
    59fc:	9224      	str	r2, [sp, #144]	; 0x90
    59fe:	4619      	mov	r1, r3
    5a00:	f363 0100 	bfi	r1, r3, #0, #1
    5a04:	f363 0141 	bfi	r1, r3, #1, #1
    5a08:	f363 0182 	bfi	r1, r3, #2, #1
    5a0c:	f363 01c5 	bfi	r1, r3, #3, #3
    5a10:	2201      	movs	r2, #1
    5a12:	f362 1188 	bfi	r1, r2, #6, #3
    5a16:	2208      	movs	r2, #8
    5a18:	f362 2152 	bfi	r1, r2, #9, #10
    5a1c:	f363 41de 	bfi	r1, r3, #19, #12
    5a20:	f363 71df 	bfi	r1, r3, #31, #1
    5a24:	aa24      	add	r2, sp, #144	; 0x90
    5a26:	4816      	ldr	r0, [pc, #88]	; (5a80 <usage_fault+0x274>)
    5a28:	f012 f800 	bl	17a2c <z_impl_z_log_msg_static_create>
    5a2c:	e730      	b.n	5890 <usage_fault+0x84>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    5a2e:	4b1b      	ldr	r3, [pc, #108]	; (5a9c <usage_fault+0x290>)
    5a30:	932b      	str	r3, [sp, #172]	; 0xac
    5a32:	2302      	movs	r3, #2
    5a34:	f88d 3004 	strb.w	r3, [sp, #4]
    5a38:	2300      	movs	r3, #0
    5a3a:	f88d 3005 	strb.w	r3, [sp, #5]
    5a3e:	f88d 3006 	strb.w	r3, [sp, #6]
    5a42:	f88d 3007 	strb.w	r3, [sp, #7]
    5a46:	9a01      	ldr	r2, [sp, #4]
    5a48:	922a      	str	r2, [sp, #168]	; 0xa8
    5a4a:	4619      	mov	r1, r3
    5a4c:	f363 0100 	bfi	r1, r3, #0, #1
    5a50:	f363 0141 	bfi	r1, r3, #1, #1
    5a54:	f363 0182 	bfi	r1, r3, #2, #1
    5a58:	f363 01c5 	bfi	r1, r3, #3, #3
    5a5c:	2201      	movs	r2, #1
    5a5e:	f362 1188 	bfi	r1, r2, #6, #3
    5a62:	2208      	movs	r2, #8
    5a64:	f362 2152 	bfi	r1, r2, #9, #10
    5a68:	f363 41de 	bfi	r1, r3, #19, #12
    5a6c:	f363 71df 	bfi	r1, r3, #31, #1
    5a70:	aa2a      	add	r2, sp, #168	; 0xa8
    5a72:	4803      	ldr	r0, [pc, #12]	; (5a80 <usage_fault+0x274>)
    5a74:	f011 ffda 	bl	17a2c <z_impl_z_log_msg_static_create>
    5a78:	e710      	b.n	589c <usage_fault+0x90>
    5a7a:	bf00      	nop
    5a7c:	000213dc 	.word	0x000213dc
    5a80:	00020aa0 	.word	0x00020aa0
    5a84:	e000ed00 	.word	0xe000ed00
    5a88:	000213f4 	.word	0x000213f4
    5a8c:	00021408 	.word	0x00021408
    5a90:	00021424 	.word	0x00021424
    5a94:	00021444 	.word	0x00021444
    5a98:	0002146c 	.word	0x0002146c
    5a9c:	00021488 	.word	0x00021488

00005aa0 <hard_fault>:
{
    5aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
    5aa2:	b09b      	sub	sp, #108	; 0x6c
    5aa4:	af00      	add	r7, sp, #0
    5aa6:	4606      	mov	r6, r0
    5aa8:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** HARD FAULT *****");
    5aaa:	4b85      	ldr	r3, [pc, #532]	; (5cc0 <hard_fault+0x220>)
    5aac:	61fb      	str	r3, [r7, #28]
    5aae:	2302      	movs	r3, #2
    5ab0:	713b      	strb	r3, [r7, #4]
    5ab2:	2400      	movs	r4, #0
    5ab4:	717c      	strb	r4, [r7, #5]
    5ab6:	71bc      	strb	r4, [r7, #6]
    5ab8:	71fc      	strb	r4, [r7, #7]
    5aba:	687b      	ldr	r3, [r7, #4]
    5abc:	61bb      	str	r3, [r7, #24]
    5abe:	4621      	mov	r1, r4
    5ac0:	f364 0100 	bfi	r1, r4, #0, #1
    5ac4:	f364 0141 	bfi	r1, r4, #1, #1
    5ac8:	f364 0182 	bfi	r1, r4, #2, #1
    5acc:	f364 01c5 	bfi	r1, r4, #3, #3
    5ad0:	2301      	movs	r3, #1
    5ad2:	f363 1188 	bfi	r1, r3, #6, #3
    5ad6:	2308      	movs	r3, #8
    5ad8:	f363 2152 	bfi	r1, r3, #9, #10
    5adc:	f364 41de 	bfi	r1, r4, #19, #12
    5ae0:	f364 71df 	bfi	r1, r4, #31, #1
    5ae4:	4623      	mov	r3, r4
    5ae6:	f107 0218 	add.w	r2, r7, #24
    5aea:	4876      	ldr	r0, [pc, #472]	; (5cc4 <hard_fault+0x224>)
    5aec:	f011 ff9e 	bl	17a2c <z_impl_z_log_msg_static_create>
	*recoverable = false;
    5af0:	702c      	strb	r4, [r5, #0]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    5af2:	4b75      	ldr	r3, [pc, #468]	; (5cc8 <hard_fault+0x228>)
    5af4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    5af6:	f014 0402 	ands.w	r4, r4, #2
    5afa:	d10c      	bne.n	5b16 <hard_fault+0x76>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    5afc:	4b72      	ldr	r3, [pc, #456]	; (5cc8 <hard_fault+0x228>)
    5afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5b00:	2b00      	cmp	r3, #0
    5b02:	db2c      	blt.n	5b5e <hard_fault+0xbe>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    5b04:	4b70      	ldr	r3, [pc, #448]	; (5cc8 <hard_fault+0x228>)
    5b06:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    5b08:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
    5b0c:	d14a      	bne.n	5ba4 <hard_fault+0x104>
}
    5b0e:	4620      	mov	r0, r4
    5b10:	376c      	adds	r7, #108	; 0x6c
    5b12:	46bd      	mov	sp, r7
    5b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_EXC("  Bus fault on vector table read");
    5b16:	4b6d      	ldr	r3, [pc, #436]	; (5ccc <hard_fault+0x22c>)
    5b18:	667b      	str	r3, [r7, #100]	; 0x64
    5b1a:	2302      	movs	r3, #2
    5b1c:	713b      	strb	r3, [r7, #4]
    5b1e:	2400      	movs	r4, #0
    5b20:	717c      	strb	r4, [r7, #5]
    5b22:	71bc      	strb	r4, [r7, #6]
    5b24:	71fc      	strb	r4, [r7, #7]
    5b26:	687b      	ldr	r3, [r7, #4]
    5b28:	663b      	str	r3, [r7, #96]	; 0x60
    5b2a:	4621      	mov	r1, r4
    5b2c:	f364 0100 	bfi	r1, r4, #0, #1
    5b30:	f364 0141 	bfi	r1, r4, #1, #1
    5b34:	f364 0182 	bfi	r1, r4, #2, #1
    5b38:	f364 01c5 	bfi	r1, r4, #3, #3
    5b3c:	2301      	movs	r3, #1
    5b3e:	f363 1188 	bfi	r1, r3, #6, #3
    5b42:	2308      	movs	r3, #8
    5b44:	f363 2152 	bfi	r1, r3, #9, #10
    5b48:	f364 41de 	bfi	r1, r4, #19, #12
    5b4c:	f364 71df 	bfi	r1, r4, #31, #1
    5b50:	4623      	mov	r3, r4
    5b52:	f107 0260 	add.w	r2, r7, #96	; 0x60
    5b56:	485b      	ldr	r0, [pc, #364]	; (5cc4 <hard_fault+0x224>)
    5b58:	f011 ff68 	bl	17a2c <z_impl_z_log_msg_static_create>
    5b5c:	e7d7      	b.n	5b0e <hard_fault+0x6e>
		PR_EXC("  Debug event");
    5b5e:	4b5c      	ldr	r3, [pc, #368]	; (5cd0 <hard_fault+0x230>)
    5b60:	64fb      	str	r3, [r7, #76]	; 0x4c
    5b62:	2302      	movs	r3, #2
    5b64:	713b      	strb	r3, [r7, #4]
    5b66:	2300      	movs	r3, #0
    5b68:	717b      	strb	r3, [r7, #5]
    5b6a:	71bb      	strb	r3, [r7, #6]
    5b6c:	71fb      	strb	r3, [r7, #7]
    5b6e:	687a      	ldr	r2, [r7, #4]
    5b70:	64ba      	str	r2, [r7, #72]	; 0x48
    5b72:	4619      	mov	r1, r3
    5b74:	f363 0100 	bfi	r1, r3, #0, #1
    5b78:	f363 0141 	bfi	r1, r3, #1, #1
    5b7c:	f363 0182 	bfi	r1, r3, #2, #1
    5b80:	f363 01c5 	bfi	r1, r3, #3, #3
    5b84:	2201      	movs	r2, #1
    5b86:	f362 1188 	bfi	r1, r2, #6, #3
    5b8a:	2208      	movs	r2, #8
    5b8c:	f362 2152 	bfi	r1, r2, #9, #10
    5b90:	f363 41de 	bfi	r1, r3, #19, #12
    5b94:	f363 71df 	bfi	r1, r3, #31, #1
    5b98:	f107 0248 	add.w	r2, r7, #72	; 0x48
    5b9c:	4849      	ldr	r0, [pc, #292]	; (5cc4 <hard_fault+0x224>)
    5b9e:	f011 ff45 	bl	17a2c <z_impl_z_log_msg_static_create>
    5ba2:	e7b4      	b.n	5b0e <hard_fault+0x6e>
		PR_EXC("  Fault escalation (see below)");
    5ba4:	4b4b      	ldr	r3, [pc, #300]	; (5cd4 <hard_fault+0x234>)
    5ba6:	637b      	str	r3, [r7, #52]	; 0x34
    5ba8:	2302      	movs	r3, #2
    5baa:	713b      	strb	r3, [r7, #4]
    5bac:	2300      	movs	r3, #0
    5bae:	717b      	strb	r3, [r7, #5]
    5bb0:	71bb      	strb	r3, [r7, #6]
    5bb2:	71fb      	strb	r3, [r7, #7]
    5bb4:	687a      	ldr	r2, [r7, #4]
    5bb6:	633a      	str	r2, [r7, #48]	; 0x30
    5bb8:	4619      	mov	r1, r3
    5bba:	f363 0100 	bfi	r1, r3, #0, #1
    5bbe:	f363 0141 	bfi	r1, r3, #1, #1
    5bc2:	f363 0182 	bfi	r1, r3, #2, #1
    5bc6:	f363 01c5 	bfi	r1, r3, #3, #3
    5bca:	2201      	movs	r2, #1
    5bcc:	f362 1188 	bfi	r1, r2, #6, #3
    5bd0:	2208      	movs	r2, #8
    5bd2:	f362 2152 	bfi	r1, r2, #9, #10
    5bd6:	f363 41de 	bfi	r1, r3, #19, #12
    5bda:	f363 71df 	bfi	r1, r3, #31, #1
    5bde:	f107 0230 	add.w	r2, r7, #48	; 0x30
    5be2:	4838      	ldr	r0, [pc, #224]	; (5cc4 <hard_fault+0x224>)
    5be4:	f011 ff22 	bl	17a2c <z_impl_z_log_msg_static_create>
		if (z_arm_is_synchronous_svc(esf)) {
    5be8:	4630      	mov	r0, r6
    5bea:	f7ff faa1 	bl	5130 <z_arm_is_synchronous_svc>
    5bee:	2800      	cmp	r0, #0
    5bf0:	d042      	beq.n	5c78 <hard_fault+0x1d8>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    5bf2:	6834      	ldr	r4, [r6, #0]
    5bf4:	466d      	mov	r5, sp
    5bf6:	b088      	sub	sp, #32
    5bf8:	466b      	mov	r3, sp
    5bfa:	f113 0210 	adds.w	r2, r3, #16
    5bfe:	d00f      	beq.n	5c20 <hard_fault+0x180>
    5c00:	210c      	movs	r1, #12
    5c02:	b14a      	cbz	r2, 5c18 <hard_fault+0x178>
    5c04:	4608      	mov	r0, r1
    5c06:	2904      	cmp	r1, #4
    5c08:	dd03      	ble.n	5c12 <hard_fault+0x172>
    5c0a:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 5cd8 <hard_fault+0x238>
    5c0e:	f8c3 c014 	str.w	ip, [r3, #20]
    5c12:	2808      	cmp	r0, #8
    5c14:	dd07      	ble.n	5c26 <hard_fault+0x186>
    5c16:	619c      	str	r4, [r3, #24]
    5c18:	290b      	cmp	r1, #11
    5c1a:	dd2a      	ble.n	5c72 <hard_fault+0x1d2>
    5c1c:	240c      	movs	r4, #12
    5c1e:	e004      	b.n	5c2a <hard_fault+0x18a>
    5c20:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    5c24:	e7ed      	b.n	5c02 <hard_fault+0x162>
    5c26:	f06f 041b 	mvn.w	r4, #27
    5c2a:	b13a      	cbz	r2, 5c3c <hard_fault+0x19c>
    5c2c:	2103      	movs	r1, #3
    5c2e:	7139      	strb	r1, [r7, #4]
    5c30:	2100      	movs	r1, #0
    5c32:	7179      	strb	r1, [r7, #5]
    5c34:	71b9      	strb	r1, [r7, #6]
    5c36:	71f9      	strb	r1, [r7, #7]
    5c38:	6878      	ldr	r0, [r7, #4]
    5c3a:	6118      	str	r0, [r3, #16]
    5c3c:	2100      	movs	r1, #0
    5c3e:	f36f 0100 	bfc	r1, #0, #1
    5c42:	f36f 0141 	bfc	r1, #1, #1
    5c46:	f36f 0182 	bfc	r1, #2, #1
    5c4a:	f36f 01c5 	bfc	r1, #3, #3
    5c4e:	2301      	movs	r3, #1
    5c50:	f363 1188 	bfi	r1, r3, #6, #3
    5c54:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
    5c58:	f363 2152 	bfi	r1, r3, #9, #10
    5c5c:	f36f 41de 	bfc	r1, #19, #12
    5c60:	f36f 71df 	bfc	r1, #31, #1
    5c64:	2300      	movs	r3, #0
    5c66:	4817      	ldr	r0, [pc, #92]	; (5cc4 <hard_fault+0x224>)
    5c68:	f011 fee0 	bl	17a2c <z_impl_z_log_msg_static_create>
    5c6c:	46ad      	mov	sp, r5
			reason = esf->basic.r0;
    5c6e:	6834      	ldr	r4, [r6, #0]
    5c70:	e74d      	b.n	5b0e <hard_fault+0x6e>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    5c72:	f06f 041b 	mvn.w	r4, #27
    5c76:	e7d8      	b.n	5c2a <hard_fault+0x18a>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    5c78:	4b13      	ldr	r3, [pc, #76]	; (5cc8 <hard_fault+0x228>)
    5c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5c7c:	f013 0fff 	tst.w	r3, #255	; 0xff
    5c80:	d10f      	bne.n	5ca2 <hard_fault+0x202>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    5c82:	4b11      	ldr	r3, [pc, #68]	; (5cc8 <hard_fault+0x228>)
    5c84:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    5c86:	f414 447f 	ands.w	r4, r4, #65280	; 0xff00
    5c8a:	d111      	bne.n	5cb0 <hard_fault+0x210>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    5c8c:	4b0e      	ldr	r3, [pc, #56]	; (5cc8 <hard_fault+0x228>)
    5c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    5c94:	f4ff af3b 	bcc.w	5b0e <hard_fault+0x6e>
			reason = usage_fault(esf);
    5c98:	4630      	mov	r0, r6
    5c9a:	f7ff fdb7 	bl	580c <usage_fault>
    5c9e:	4604      	mov	r4, r0
	return reason;
    5ca0:	e735      	b.n	5b0e <hard_fault+0x6e>
			reason = mem_manage_fault(esf, 1, recoverable);
    5ca2:	462a      	mov	r2, r5
    5ca4:	2101      	movs	r1, #1
    5ca6:	4630      	mov	r0, r6
    5ca8:	f7ff faa4 	bl	51f4 <mem_manage_fault>
    5cac:	4604      	mov	r4, r0
    5cae:	e72e      	b.n	5b0e <hard_fault+0x6e>
			reason = bus_fault(esf, 1, recoverable);
    5cb0:	462a      	mov	r2, r5
    5cb2:	2101      	movs	r1, #1
    5cb4:	4630      	mov	r0, r6
    5cb6:	f7ff fc15 	bl	54e4 <bus_fault>
    5cba:	4604      	mov	r4, r0
    5cbc:	e727      	b.n	5b0e <hard_fault+0x6e>
    5cbe:	bf00      	nop
    5cc0:	000214b4 	.word	0x000214b4
    5cc4:	00020aa0 	.word	0x00020aa0
    5cc8:	e000ed00 	.word	0xe000ed00
    5ccc:	000214cc 	.word	0x000214cc
    5cd0:	000214f0 	.word	0x000214f0
    5cd4:	00021500 	.word	0x00021500
    5cd8:	00021520 	.word	0x00021520

00005cdc <debug_monitor>:
{
    5cdc:	b500      	push	{lr}
    5cde:	b089      	sub	sp, #36	; 0x24
	*recoverable = false;
    5ce0:	2300      	movs	r3, #0
    5ce2:	700b      	strb	r3, [r1, #0]
	PR_FAULT_INFO(
    5ce4:	4a13      	ldr	r2, [pc, #76]	; (5d34 <debug_monitor+0x58>)
    5ce6:	9207      	str	r2, [sp, #28]
    5ce8:	2202      	movs	r2, #2
    5cea:	f88d 2004 	strb.w	r2, [sp, #4]
    5cee:	f88d 3005 	strb.w	r3, [sp, #5]
    5cf2:	f88d 3006 	strb.w	r3, [sp, #6]
    5cf6:	f88d 3007 	strb.w	r3, [sp, #7]
    5cfa:	9a01      	ldr	r2, [sp, #4]
    5cfc:	9206      	str	r2, [sp, #24]
    5cfe:	4619      	mov	r1, r3
    5d00:	f363 0100 	bfi	r1, r3, #0, #1
    5d04:	f363 0141 	bfi	r1, r3, #1, #1
    5d08:	f363 0182 	bfi	r1, r3, #2, #1
    5d0c:	f363 01c5 	bfi	r1, r3, #3, #3
    5d10:	2201      	movs	r2, #1
    5d12:	f362 1188 	bfi	r1, r2, #6, #3
    5d16:	2208      	movs	r2, #8
    5d18:	f362 2152 	bfi	r1, r2, #9, #10
    5d1c:	f363 41de 	bfi	r1, r3, #19, #12
    5d20:	f363 71df 	bfi	r1, r3, #31, #1
    5d24:	aa06      	add	r2, sp, #24
    5d26:	4804      	ldr	r0, [pc, #16]	; (5d38 <debug_monitor+0x5c>)
    5d28:	f011 fe80 	bl	17a2c <z_impl_z_log_msg_static_create>
}
    5d2c:	b009      	add	sp, #36	; 0x24
    5d2e:	f85d fb04 	ldr.w	pc, [sp], #4
    5d32:	bf00      	nop
    5d34:	0002153c 	.word	0x0002153c
    5d38:	00020aa0 	.word	0x00020aa0

00005d3c <reserved_exception>:
{
    5d3c:	b590      	push	{r4, r7, lr}
    5d3e:	b083      	sub	sp, #12
    5d40:	af00      	add	r7, sp, #0
	PR_FAULT_INFO("***** %s %d) *****",
    5d42:	290f      	cmp	r1, #15
    5d44:	dc23      	bgt.n	5d8e <reserved_exception+0x52>
    5d46:	4c30      	ldr	r4, [pc, #192]	; (5e08 <reserved_exception+0xcc>)
    5d48:	3910      	subs	r1, #16
    5d4a:	2300      	movs	r3, #0
    5d4c:	713b      	strb	r3, [r7, #4]
    5d4e:	2302      	movs	r3, #2
    5d50:	717b      	strb	r3, [r7, #5]
    5d52:	b08a      	sub	sp, #40	; 0x28
    5d54:	46ec      	mov	ip, sp
    5d56:	f11c 0210 	adds.w	r2, ip, #16
    5d5a:	d01a      	beq.n	5d92 <reserved_exception+0x56>
    5d5c:	2012      	movs	r0, #18
    5d5e:	b122      	cbz	r2, 5d6a <reserved_exception+0x2e>
    5d60:	2804      	cmp	r0, #4
    5d62:	dd02      	ble.n	5d6a <reserved_exception+0x2e>
    5d64:	4b29      	ldr	r3, [pc, #164]	; (5e0c <reserved_exception+0xd0>)
    5d66:	f8cc 3014 	str.w	r3, [ip, #20]
    5d6a:	2300      	movs	r3, #0
    5d6c:	703b      	strb	r3, [r7, #0]
    5d6e:	2302      	movs	r3, #2
    5d70:	707b      	strb	r3, [r7, #1]
    5d72:	b1e2      	cbz	r2, 5dae <reserved_exception+0x72>
    5d74:	4603      	mov	r3, r0
    5d76:	2808      	cmp	r0, #8
    5d78:	dd01      	ble.n	5d7e <reserved_exception+0x42>
    5d7a:	f8cc 4018 	str.w	r4, [ip, #24]
    5d7e:	2b0c      	cmp	r3, #12
    5d80:	dd01      	ble.n	5d86 <reserved_exception+0x4a>
    5d82:	f8cc 101c 	str.w	r1, [ip, #28]
    5d86:	f10c 0320 	add.w	r3, ip, #32
    5d8a:	2100      	movs	r1, #0
    5d8c:	e00d      	b.n	5daa <reserved_exception+0x6e>
    5d8e:	4c20      	ldr	r4, [pc, #128]	; (5e10 <reserved_exception+0xd4>)
    5d90:	e7da      	b.n	5d48 <reserved_exception+0xc>
    5d92:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    5d96:	e7e2      	b.n	5d5e <reserved_exception+0x22>
    5d98:	f101 0408 	add.w	r4, r1, #8
    5d9c:	eb04 0e07 	add.w	lr, r4, r7
    5da0:	f81e ec08 	ldrb.w	lr, [lr, #-8]
    5da4:	f803 eb01 	strb.w	lr, [r3], #1
    5da8:	3101      	adds	r1, #1
    5daa:	2901      	cmp	r1, #1
    5dac:	d9f4      	bls.n	5d98 <reserved_exception+0x5c>
    5dae:	2811      	cmp	r0, #17
    5db0:	dd26      	ble.n	5e00 <reserved_exception+0xc4>
    5db2:	2312      	movs	r3, #18
    5db4:	b14a      	cbz	r2, 5dca <reserved_exception+0x8e>
    5db6:	2104      	movs	r1, #4
    5db8:	7139      	strb	r1, [r7, #4]
    5dba:	2100      	movs	r1, #0
    5dbc:	7179      	strb	r1, [r7, #5]
    5dbe:	71b9      	strb	r1, [r7, #6]
    5dc0:	2101      	movs	r1, #1
    5dc2:	71f9      	strb	r1, [r7, #7]
    5dc4:	6878      	ldr	r0, [r7, #4]
    5dc6:	f8cc 0010 	str.w	r0, [ip, #16]
    5dca:	2100      	movs	r1, #0
    5dcc:	f36f 0100 	bfc	r1, #0, #1
    5dd0:	f36f 0141 	bfc	r1, #1, #1
    5dd4:	f36f 0182 	bfc	r1, #2, #1
    5dd8:	f36f 01c5 	bfc	r1, #3, #3
    5ddc:	2001      	movs	r0, #1
    5dde:	f360 1188 	bfi	r1, r0, #6, #3
    5de2:	f3c3 0309 	ubfx	r3, r3, #0, #10
    5de6:	f363 2152 	bfi	r1, r3, #9, #10
    5dea:	f36f 41de 	bfc	r1, #19, #12
    5dee:	f36f 71df 	bfc	r1, #31, #1
    5df2:	2300      	movs	r3, #0
    5df4:	4807      	ldr	r0, [pc, #28]	; (5e14 <reserved_exception+0xd8>)
    5df6:	f011 fe19 	bl	17a2c <z_impl_z_log_msg_static_create>
}
    5dfa:	370c      	adds	r7, #12
    5dfc:	46bd      	mov	sp, r7
    5dfe:	bd90      	pop	{r4, r7, pc}
	PR_FAULT_INFO("***** %s %d) *****",
    5e00:	f06f 031b 	mvn.w	r3, #27
    5e04:	e7d6      	b.n	5db4 <reserved_exception+0x78>
    5e06:	bf00      	nop
    5e08:	00021560 	.word	0x00021560
    5e0c:	00021594 	.word	0x00021594
    5e10:	00021578 	.word	0x00021578
    5e14:	00020aa0 	.word	0x00020aa0

00005e18 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    5e18:	b530      	push	{r4, r5, lr}
    5e1a:	b08b      	sub	sp, #44	; 0x2c
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    5e1c:	4b1f      	ldr	r3, [pc, #124]	; (5e9c <z_arm_fault+0x84>)
    5e1e:	685d      	ldr	r5, [r3, #4]
    5e20:	f3c5 0508 	ubfx	r5, r5, #0, #9
    5e24:	2300      	movs	r3, #0
    5e26:	f383 8811 	msr	BASEPRI, r3
    5e2a:	f3bf 8f6f 	isb	sy
	arch_irq_unlock(0);

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
    5e2e:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    5e32:	f7ff f99b 	bl	516c <get_esf>
    5e36:	4604      	mov	r4, r0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    5e38:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    5e3c:	4629      	mov	r1, r5
    5e3e:	f013 f8af 	bl	18fa0 <fault_handle>
	if (recoverable) {
    5e42:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    5e46:	b10b      	cbz	r3, 5e4c <z_arm_fault+0x34>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    5e48:	b00b      	add	sp, #44	; 0x2c
    5e4a:	bd30      	pop	{r4, r5, pc}
    5e4c:	4605      	mov	r5, r0
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    5e4e:	f10d 0c04 	add.w	ip, sp, #4
    5e52:	6820      	ldr	r0, [r4, #0]
    5e54:	6861      	ldr	r1, [r4, #4]
    5e56:	68a2      	ldr	r2, [r4, #8]
    5e58:	68e3      	ldr	r3, [r4, #12]
    5e5a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    5e5e:	6920      	ldr	r0, [r4, #16]
    5e60:	6961      	ldr	r1, [r4, #20]
    5e62:	69a2      	ldr	r2, [r4, #24]
    5e64:	69e3      	ldr	r3, [r4, #28]
    5e66:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
	if (nested_exc) {
    5e6a:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    5e6e:	b14b      	cbz	r3, 5e84 <z_arm_fault+0x6c>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    5e70:	9b08      	ldr	r3, [sp, #32]
    5e72:	f3c3 0208 	ubfx	r2, r3, #0, #9
    5e76:	b95a      	cbnz	r2, 5e90 <z_arm_fault+0x78>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    5e78:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    5e7c:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    5e80:	9308      	str	r3, [sp, #32]
    5e82:	e005      	b.n	5e90 <z_arm_fault+0x78>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    5e84:	9b08      	ldr	r3, [sp, #32]
    5e86:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    5e8a:	f023 0301 	bic.w	r3, r3, #1
    5e8e:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    5e90:	a901      	add	r1, sp, #4
    5e92:	4628      	mov	r0, r5
    5e94:	f013 f854 	bl	18f40 <z_arm_fatal_error>
    5e98:	e7d6      	b.n	5e48 <z_arm_fault+0x30>
    5e9a:	bf00      	nop
    5e9c:	e000ed00 	.word	0xe000ed00

00005ea0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    5ea0:	4a02      	ldr	r2, [pc, #8]	; (5eac <z_arm_fault_init+0xc>)
    5ea2:	6953      	ldr	r3, [r2, #20]
    5ea4:	f043 0310 	orr.w	r3, r3, #16
    5ea8:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    5eaa:	4770      	bx	lr
    5eac:	e000ed00 	.word	0xe000ed00

00005eb0 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    5eb0:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    5eb4:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    5eb8:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    5eba:	4672      	mov	r2, lr
	bl z_arm_fault
    5ebc:	f7ff ffac 	bl	5e18 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    5ec0:	bd01      	pop	{r0, pc}
    5ec2:	bf00      	nop

00005ec4 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    5ec4:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    5ec6:	e006      	b.n	5ed6 <z_arm_interrupt_init+0x12>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5ec8:	f003 030f 	and.w	r3, r3, #15
    5ecc:	4909      	ldr	r1, [pc, #36]	; (5ef4 <z_arm_interrupt_init+0x30>)
    5ece:	4419      	add	r1, r3
    5ed0:	2320      	movs	r3, #32
    5ed2:	760b      	strb	r3, [r1, #24]
    5ed4:	3201      	adds	r2, #1
    5ed6:	2a2f      	cmp	r2, #47	; 0x2f
    5ed8:	dc0a      	bgt.n	5ef0 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    5eda:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    5edc:	2b00      	cmp	r3, #0
    5ede:	dbf3      	blt.n	5ec8 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5ee0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    5ee4:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    5ee8:	2120      	movs	r1, #32
    5eea:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    5eee:	e7f1      	b.n	5ed4 <z_arm_interrupt_init+0x10>
	}
}
    5ef0:	4770      	bx	lr
    5ef2:	bf00      	nop
    5ef4:	e000ecfc 	.word	0xe000ecfc

00005ef8 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    5ef8:	2000      	movs	r0, #0
    msr CONTROL, r0
    5efa:	f380 8814 	msr	CONTROL, r0
    isb
    5efe:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    5f02:	f7fd fc17 	bl	3734 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    5f06:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    5f08:	490d      	ldr	r1, [pc, #52]	; (5f40 <__start+0x48>)
    str r0, [r1]
    5f0a:	6008      	str	r0, [r1, #0]
    dsb
    5f0c:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    5f10:	480c      	ldr	r0, [pc, #48]	; (5f44 <__start+0x4c>)
    msr msp, r0
    5f12:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    5f16:	f000 f82d 	bl	5f74 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    5f1a:	2020      	movs	r0, #32
    msr BASEPRI, r0
    5f1c:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    5f20:	4809      	ldr	r0, [pc, #36]	; (5f48 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    5f22:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    5f26:	1840      	adds	r0, r0, r1
    msr PSP, r0
    5f28:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    5f2c:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    5f30:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    5f32:	4308      	orrs	r0, r1
    msr CONTROL, r0
    5f34:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    5f38:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    5f3c:	f7ff f82e 	bl	4f9c <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    5f40:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    5f44:	200088d8 	.word	0x200088d8
    ldr r0, =z_interrupt_stacks
    5f48:	20005f98 	.word	0x20005f98

00005f4c <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    5f4c:	4b08      	ldr	r3, [pc, #32]	; (5f70 <z_arm_clear_arm_mpu_config+0x24>)
    5f4e:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
    5f52:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    5f56:	2300      	movs	r3, #0
    5f58:	e006      	b.n	5f68 <z_arm_clear_arm_mpu_config+0x1c>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    5f5a:	4a05      	ldr	r2, [pc, #20]	; (5f70 <z_arm_clear_arm_mpu_config+0x24>)
    5f5c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    5f60:	2100      	movs	r1, #0
    5f62:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    5f66:	3301      	adds	r3, #1
    5f68:	4283      	cmp	r3, r0
    5f6a:	dbf6      	blt.n	5f5a <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
    5f6c:	4770      	bx	lr
    5f6e:	bf00      	nop
    5f70:	e000ed00 	.word	0xe000ed00

00005f74 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    5f74:	b510      	push	{r4, lr}
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    5f76:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    5f78:	2400      	movs	r4, #0
    5f7a:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    5f7e:	f7ff ffe5 	bl	5f4c <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    5f82:	4623      	mov	r3, r4
    5f84:	e008      	b.n	5f98 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    5f86:	f103 0120 	add.w	r1, r3, #32
    5f8a:	4a0e      	ldr	r2, [pc, #56]	; (5fc4 <z_arm_init_arch_hw_at_boot+0x50>)
    5f8c:	f04f 30ff 	mov.w	r0, #4294967295
    5f90:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    5f94:	3301      	adds	r3, #1
    5f96:	b2db      	uxtb	r3, r3
    5f98:	2b07      	cmp	r3, #7
    5f9a:	d9f4      	bls.n	5f86 <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    5f9c:	2300      	movs	r3, #0
    5f9e:	e008      	b.n	5fb2 <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    5fa0:	f103 0160 	add.w	r1, r3, #96	; 0x60
    5fa4:	4a07      	ldr	r2, [pc, #28]	; (5fc4 <z_arm_init_arch_hw_at_boot+0x50>)
    5fa6:	f04f 30ff 	mov.w	r0, #4294967295
    5faa:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    5fae:	3301      	adds	r3, #1
    5fb0:	b2db      	uxtb	r3, r3
    5fb2:	2b07      	cmp	r3, #7
    5fb4:	d9f4      	bls.n	5fa0 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    5fb6:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    5fb8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5fbc:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    5fc0:	bd10      	pop	{r4, pc}
    5fc2:	bf00      	nop
    5fc4:	e000e100 	.word	0xe000e100

00005fc8 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    5fc8:	b508      	push	{r3, lr}
	if (_current == thread) {
    5fca:	4b0a      	ldr	r3, [pc, #40]	; (5ff4 <z_impl_k_thread_abort+0x2c>)
    5fcc:	689b      	ldr	r3, [r3, #8]
    5fce:	4283      	cmp	r3, r0
    5fd0:	d002      	beq.n	5fd8 <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
    5fd2:	f00b fe91 	bl	11cf8 <z_thread_abort>
}
    5fd6:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    5fd8:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    5fdc:	2b00      	cmp	r3, #0
    5fde:	d0f8      	beq.n	5fd2 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    5fe0:	4b05      	ldr	r3, [pc, #20]	; (5ff8 <z_impl_k_thread_abort+0x30>)
    5fe2:	685a      	ldr	r2, [r3, #4]
    5fe4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    5fe8:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    5fea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    5fec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    5ff0:	625a      	str	r2, [r3, #36]	; 0x24
    5ff2:	e7ee      	b.n	5fd2 <z_impl_k_thread_abort+0xa>
    5ff4:	2000378c 	.word	0x2000378c
    5ff8:	e000ed00 	.word	0xe000ed00

00005ffc <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    5ffc:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    5ffe:	4b03      	ldr	r3, [pc, #12]	; (600c <z_arm_configure_static_mpu_regions+0x10>)
    6000:	4a03      	ldr	r2, [pc, #12]	; (6010 <z_arm_configure_static_mpu_regions+0x14>)
    6002:	2101      	movs	r1, #1
    6004:	4803      	ldr	r0, [pc, #12]	; (6014 <z_arm_configure_static_mpu_regions+0x18>)
    6006:	f013 f820 	bl	1904a <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    600a:	bd08      	pop	{r3, pc}
    600c:	20040000 	.word	0x20040000
    6010:	20000000 	.word	0x20000000
    6014:	000215a8 	.word	0x000215a8

00006018 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    6018:	4a08      	ldr	r2, [pc, #32]	; (603c <region_init+0x24>)
    601a:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    601e:	680b      	ldr	r3, [r1, #0]
    6020:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    6024:	4303      	orrs	r3, r0
    6026:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    602a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    602e:	688b      	ldr	r3, [r1, #8]
    6030:	f043 0301 	orr.w	r3, r3, #1
    6034:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
    6038:	4770      	bx	lr
    603a:	bf00      	nop
    603c:	e000ed00 	.word	0xe000ed00

00006040 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
    6040:	b5f0      	push	{r4, r5, r6, r7, lr}
    6042:	b083      	sub	sp, #12
    6044:	af00      	add	r7, sp, #0
    6046:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    6048:	2807      	cmp	r0, #7
    604a:	d805      	bhi.n	6058 <region_allocate_and_init+0x18>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    604c:	f7ff ffe4 	bl	6018 <region_init>

	return index;
    6050:	4620      	mov	r0, r4
}
    6052:	370c      	adds	r7, #12
    6054:	46bd      	mov	sp, r7
    6056:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    6058:	466d      	mov	r5, sp
    605a:	b088      	sub	sp, #32
    605c:	466b      	mov	r3, sp
    605e:	f113 0210 	adds.w	r2, r3, #16
    6062:	d031      	beq.n	60c8 <region_allocate_and_init+0x88>
    6064:	210c      	movs	r1, #12
    6066:	b13a      	cbz	r2, 6078 <region_allocate_and_init+0x38>
    6068:	4608      	mov	r0, r1
    606a:	2904      	cmp	r1, #4
    606c:	dd01      	ble.n	6072 <region_allocate_and_init+0x32>
    606e:	4e19      	ldr	r6, [pc, #100]	; (60d4 <region_allocate_and_init+0x94>)
    6070:	615e      	str	r6, [r3, #20]
    6072:	2808      	cmp	r0, #8
    6074:	dd00      	ble.n	6078 <region_allocate_and_init+0x38>
    6076:	619c      	str	r4, [r3, #24]
    6078:	290b      	cmp	r1, #11
    607a:	dd28      	ble.n	60ce <region_allocate_and_init+0x8e>
    607c:	240c      	movs	r4, #12
    607e:	b13a      	cbz	r2, 6090 <region_allocate_and_init+0x50>
    6080:	2103      	movs	r1, #3
    6082:	7139      	strb	r1, [r7, #4]
    6084:	2100      	movs	r1, #0
    6086:	7179      	strb	r1, [r7, #5]
    6088:	71b9      	strb	r1, [r7, #6]
    608a:	71f9      	strb	r1, [r7, #7]
    608c:	6878      	ldr	r0, [r7, #4]
    608e:	6118      	str	r0, [r3, #16]
    6090:	2100      	movs	r1, #0
    6092:	f36f 0100 	bfc	r1, #0, #1
    6096:	f36f 0141 	bfc	r1, #1, #1
    609a:	f36f 0182 	bfc	r1, #2, #1
    609e:	f36f 01c5 	bfc	r1, #3, #3
    60a2:	2301      	movs	r3, #1
    60a4:	f363 1188 	bfi	r1, r3, #6, #3
    60a8:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
    60ac:	f364 2152 	bfi	r1, r4, #9, #10
    60b0:	f36f 41de 	bfc	r1, #19, #12
    60b4:	f36f 71df 	bfc	r1, #31, #1
    60b8:	2300      	movs	r3, #0
    60ba:	4807      	ldr	r0, [pc, #28]	; (60d8 <region_allocate_and_init+0x98>)
    60bc:	f011 fcb6 	bl	17a2c <z_impl_z_log_msg_static_create>
    60c0:	46ad      	mov	sp, r5
		return -EINVAL;
    60c2:	f06f 0015 	mvn.w	r0, #21
    60c6:	e7c4      	b.n	6052 <region_allocate_and_init+0x12>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    60c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    60cc:	e7cb      	b.n	6066 <region_allocate_and_init+0x26>
    60ce:	f06f 041b 	mvn.w	r4, #27
    60d2:	e7d4      	b.n	607e <region_allocate_and_init+0x3e>
    60d4:	000215b8 	.word	0x000215b8
    60d8:	00020a90 	.word	0x00020a90

000060dc <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    60dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    60e0:	b082      	sub	sp, #8
    60e2:	af00      	add	r7, sp, #0
    60e4:	4681      	mov	r9, r0
    60e6:	4688      	mov	r8, r1
    60e8:	469a      	mov	sl, r3
	int i;
	int reg_index = start_reg_index;
    60ea:	4616      	mov	r6, r2

	for (i = 0; i < regions_num; i++) {
    60ec:	2500      	movs	r5, #0
    60ee:	e00f      	b.n	6110 <mpu_configure_regions+0x34>
		}
		/* Non-empty region. */

		if (do_sanity_check &&
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    60f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    60f4:	e024      	b.n	6140 <mpu_configure_regions+0x64>
    60f6:	f06f 041b 	mvn.w	r4, #27
    60fa:	e02d      	b.n	6158 <mpu_configure_regions+0x7c>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    60fc:	4621      	mov	r1, r4
    60fe:	b2f0      	uxtb	r0, r6
    6100:	f012 ff84 	bl	1900c <mpu_configure_region>
    6104:	4606      	mov	r6, r0

		if (reg_index == -EINVAL) {
    6106:	f110 0f16 	cmn.w	r0, #22
    610a:	d049      	beq.n	61a0 <mpu_configure_regions+0xc4>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
    610c:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
    610e:	3501      	adds	r5, #1
    6110:	4545      	cmp	r5, r8
    6112:	da45      	bge.n	61a0 <mpu_configure_regions+0xc4>
		if (regions[i].size == 0U) {
    6114:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    6118:	eb09 0484 	add.w	r4, r9, r4, lsl #2
    611c:	6862      	ldr	r2, [r4, #4]
    611e:	2a00      	cmp	r2, #0
    6120:	d0f5      	beq.n	610e <mpu_configure_regions+0x32>
		if (do_sanity_check &&
    6122:	f1ba 0f00 	cmp.w	sl, #0
    6126:	d0e9      	beq.n	60fc <mpu_configure_regions+0x20>
				(!mpu_partition_is_valid(&regions[i]))) {
    6128:	4620      	mov	r0, r4
    612a:	f012 ff5e 	bl	18fea <mpu_partition_is_valid>
		if (do_sanity_check &&
    612e:	2800      	cmp	r0, #0
    6130:	d1e4      	bne.n	60fc <mpu_configure_regions+0x20>
			LOG_ERR("Partition %u: sanity check failed.", i);
    6132:	466e      	mov	r6, sp
    6134:	b088      	sub	sp, #32
    6136:	466b      	mov	r3, sp
    6138:	f113 0210 	adds.w	r2, r3, #16
    613c:	d0d8      	beq.n	60f0 <mpu_configure_regions+0x14>
    613e:	210c      	movs	r1, #12
    6140:	b13a      	cbz	r2, 6152 <mpu_configure_regions+0x76>
    6142:	4608      	mov	r0, r1
    6144:	2904      	cmp	r1, #4
    6146:	dd01      	ble.n	614c <mpu_configure_regions+0x70>
    6148:	4c18      	ldr	r4, [pc, #96]	; (61ac <mpu_configure_regions+0xd0>)
    614a:	615c      	str	r4, [r3, #20]
    614c:	2808      	cmp	r0, #8
    614e:	dd00      	ble.n	6152 <mpu_configure_regions+0x76>
    6150:	619d      	str	r5, [r3, #24]
    6152:	290b      	cmp	r1, #11
    6154:	ddcf      	ble.n	60f6 <mpu_configure_regions+0x1a>
    6156:	240c      	movs	r4, #12
    6158:	b13a      	cbz	r2, 616a <mpu_configure_regions+0x8e>
    615a:	2103      	movs	r1, #3
    615c:	7139      	strb	r1, [r7, #4]
    615e:	2100      	movs	r1, #0
    6160:	7179      	strb	r1, [r7, #5]
    6162:	71b9      	strb	r1, [r7, #6]
    6164:	71f9      	strb	r1, [r7, #7]
    6166:	6878      	ldr	r0, [r7, #4]
    6168:	6118      	str	r0, [r3, #16]
    616a:	2100      	movs	r1, #0
    616c:	f36f 0100 	bfc	r1, #0, #1
    6170:	f36f 0141 	bfc	r1, #1, #1
    6174:	f36f 0182 	bfc	r1, #2, #1
    6178:	f36f 01c5 	bfc	r1, #3, #3
    617c:	2301      	movs	r3, #1
    617e:	f363 1188 	bfi	r1, r3, #6, #3
    6182:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
    6186:	f363 2152 	bfi	r1, r3, #9, #10
    618a:	f36f 41de 	bfc	r1, #19, #12
    618e:	f36f 71df 	bfc	r1, #31, #1
    6192:	2300      	movs	r3, #0
    6194:	4806      	ldr	r0, [pc, #24]	; (61b0 <mpu_configure_regions+0xd4>)
    6196:	f011 fc49 	bl	17a2c <z_impl_z_log_msg_static_create>
    619a:	46b5      	mov	sp, r6
			return -EINVAL;
    619c:	f06f 0615 	mvn.w	r6, #21
	}

	return reg_index;
}
    61a0:	4630      	mov	r0, r6
    61a2:	3708      	adds	r7, #8
    61a4:	46bd      	mov	sp, r7
    61a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    61aa:	bf00      	nop
    61ac:	000215e0 	.word	0x000215e0
    61b0:	00020a90 	.word	0x00020a90

000061b4 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    61b4:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    61b6:	4c03      	ldr	r4, [pc, #12]	; (61c4 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    61b8:	2301      	movs	r3, #1
    61ba:	7822      	ldrb	r2, [r4, #0]
    61bc:	f7ff ff8e 	bl	60dc <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    61c0:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    61c2:	bd10      	pop	{r4, pc}
    61c4:	200042a9 	.word	0x200042a9

000061c8 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    61c8:	4b04      	ldr	r3, [pc, #16]	; (61dc <arm_core_mpu_enable+0x14>)
    61ca:	2205      	movs	r2, #5
    61cc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    61d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    61d4:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    61d8:	4770      	bx	lr
    61da:	bf00      	nop
    61dc:	e000ed00 	.word	0xe000ed00

000061e0 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    61e0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    61e4:	4b02      	ldr	r3, [pc, #8]	; (61f0 <arm_core_mpu_disable+0x10>)
    61e6:	2200      	movs	r2, #0
    61e8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    61ec:	4770      	bx	lr
    61ee:	bf00      	nop
    61f0:	e000ed00 	.word	0xe000ed00

000061f4 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    61f4:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    61f6:	4b0e      	ldr	r3, [pc, #56]	; (6230 <z_arm_mpu_init+0x3c>)
    61f8:	681d      	ldr	r5, [r3, #0]
    61fa:	2d08      	cmp	r5, #8
    61fc:	d815      	bhi.n	622a <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    61fe:	f7ff ffef 	bl	61e0 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    6202:	2400      	movs	r4, #0
    6204:	e009      	b.n	621a <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    6206:	4b0a      	ldr	r3, [pc, #40]	; (6230 <z_arm_mpu_init+0x3c>)
    6208:	6859      	ldr	r1, [r3, #4]
    620a:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    620e:	0093      	lsls	r3, r2, #2
    6210:	4419      	add	r1, r3
    6212:	4620      	mov	r0, r4
    6214:	f7ff ff00 	bl	6018 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    6218:	3401      	adds	r4, #1
    621a:	42a5      	cmp	r5, r4
    621c:	d8f3      	bhi.n	6206 <z_arm_mpu_init+0x12>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    621e:	4b05      	ldr	r3, [pc, #20]	; (6234 <z_arm_mpu_init+0x40>)
    6220:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    6222:	f7ff ffd1 	bl	61c8 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    6226:	2000      	movs	r0, #0
}
    6228:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    622a:	f04f 30ff 	mov.w	r0, #4294967295
    622e:	e7fb      	b.n	6228 <z_arm_mpu_init+0x34>
    6230:	0002162c 	.word	0x0002162c
    6234:	200042a9 	.word	0x200042a9

00006238 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    6238:	4b01      	ldr	r3, [pc, #4]	; (6240 <__stdout_hook_install+0x8>)
    623a:	6018      	str	r0, [r3, #0]
}
    623c:	4770      	bx	lr
    623e:	bf00      	nop
    6240:	20000030 	.word	0x20000030

00006244 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
    6244:	b570      	push	{r4, r5, r6, lr}
    6246:	4606      	mov	r6, r0
    6248:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
    624a:	2400      	movs	r4, #0
    624c:	e000      	b.n	6250 <z_impl_zephyr_read_stdin+0xc>
    624e:	3401      	adds	r4, #1
    6250:	42ac      	cmp	r4, r5
    6252:	da08      	bge.n	6266 <z_impl_zephyr_read_stdin+0x22>
		*(buf + i) = _stdin_hook();
    6254:	4b05      	ldr	r3, [pc, #20]	; (626c <z_impl_zephyr_read_stdin+0x28>)
    6256:	681b      	ldr	r3, [r3, #0]
    6258:	4798      	blx	r3
    625a:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    625c:	280a      	cmp	r0, #10
    625e:	d001      	beq.n	6264 <z_impl_zephyr_read_stdin+0x20>
    6260:	280d      	cmp	r0, #13
    6262:	d1f4      	bne.n	624e <z_impl_zephyr_read_stdin+0xa>
			i++;
    6264:	3401      	adds	r4, #1
			break;
		}
	}
	return i;
}
    6266:	4620      	mov	r0, r4
    6268:	bd70      	pop	{r4, r5, r6, pc}
    626a:	bf00      	nop
    626c:	2000002c 	.word	0x2000002c

00006270 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
    6270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6272:	4605      	mov	r5, r0
    6274:	460f      	mov	r7, r1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
    6276:	2400      	movs	r4, #0
    6278:	e004      	b.n	6284 <z_impl_zephyr_write_stdout+0x14>
		if (*(buf + i) == '\n') {
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
    627a:	4b09      	ldr	r3, [pc, #36]	; (62a0 <z_impl_zephyr_write_stdout+0x30>)
    627c:	681b      	ldr	r3, [r3, #0]
    627e:	7830      	ldrb	r0, [r6, #0]
    6280:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
    6282:	3401      	adds	r4, #1
    6284:	42bc      	cmp	r4, r7
    6286:	da08      	bge.n	629a <z_impl_zephyr_write_stdout+0x2a>
		if (*(buf + i) == '\n') {
    6288:	192e      	adds	r6, r5, r4
    628a:	5d2b      	ldrb	r3, [r5, r4]
    628c:	2b0a      	cmp	r3, #10
    628e:	d1f4      	bne.n	627a <z_impl_zephyr_write_stdout+0xa>
			_stdout_hook('\r');
    6290:	4b03      	ldr	r3, [pc, #12]	; (62a0 <z_impl_zephyr_write_stdout+0x30>)
    6292:	681b      	ldr	r3, [r3, #0]
    6294:	200d      	movs	r0, #13
    6296:	4798      	blx	r3
    6298:	e7ef      	b.n	627a <z_impl_zephyr_write_stdout+0xa>
	}
	return nbytes;
}
    629a:	4638      	mov	r0, r7
    629c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    629e:	bf00      	nop
    62a0:	20000030 	.word	0x20000030

000062a4 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
    62a4:	b508      	push	{r3, lr}
	_write(1, "exit\n", 5);
    62a6:	2205      	movs	r2, #5
    62a8:	4902      	ldr	r1, [pc, #8]	; (62b4 <_exit+0x10>)
    62aa:	2001      	movs	r0, #1
    62ac:	f012 fede 	bl	1906c <_write>
	while (1) {
    62b0:	e7fe      	b.n	62b0 <_exit+0xc>
    62b2:	bf00      	nop
    62b4:	00021604 	.word	0x00021604

000062b8 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
    62b8:	4602      	mov	r2, r0
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
    62ba:	4b08      	ldr	r3, [pc, #32]	; (62dc <_sbrk+0x24>)
    62bc:	6819      	ldr	r1, [r3, #0]
    62be:	4b08      	ldr	r3, [pc, #32]	; (62e0 <_sbrk+0x28>)
    62c0:	18c8      	adds	r0, r1, r3

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    62c2:	440a      	add	r2, r1
    62c4:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
    62c8:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    62cc:	429a      	cmp	r2, r3
    62ce:	d202      	bcs.n	62d6 <_sbrk+0x1e>
		heap_sz += count;
    62d0:	4b02      	ldr	r3, [pc, #8]	; (62dc <_sbrk+0x24>)
    62d2:	601a      	str	r2, [r3, #0]
		ret = ptr;
    62d4:	4770      	bx	lr

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
    62d6:	f04f 30ff 	mov.w	r0, #4294967295
	}

	return ret;
}
    62da:	4770      	bx	lr
    62dc:	20002590 	.word	0x20002590
    62e0:	20010b50 	.word	0x20010b50

000062e4 <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
    62e4:	b508      	push	{r3, lr}
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
    62e6:	221d      	movs	r2, #29
    62e8:	4904      	ldr	r1, [pc, #16]	; (62fc <__chk_fail+0x18>)
    62ea:	2002      	movs	r0, #2
    62ec:	f012 febe 	bl	1906c <_write>
	k_oops();
    62f0:	4040      	eors	r0, r0
    62f2:	f380 8811 	msr	BASEPRI, r0
    62f6:	f04f 0003 	mov.w	r0, #3
    62fa:	df02      	svc	2
	CODE_UNREACHABLE;
    62fc:	0002160c 	.word	0x0002160c

00006300 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    6300:	f04f 0320 	mov.w	r3, #32
    6304:	f3ef 8211 	mrs	r2, BASEPRI
    6308:	f383 8812 	msr	BASEPRI_MAX, r3
    630c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    6310:	2301      	movs	r3, #1
    6312:	4906      	ldr	r1, [pc, #24]	; (632c <nordicsemi_nrf52_init+0x2c>)
    6314:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    6318:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    631c:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    6320:	f382 8811 	msr	BASEPRI, r2
    6324:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    6328:	2000      	movs	r0, #0
    632a:	4770      	bx	lr
    632c:	4001e000 	.word	0x4001e000

00006330 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    6330:	b130      	cbz	r0, 6340 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
    6332:	b508      	push	{r3, lr}
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    6334:	4b03      	ldr	r3, [pc, #12]	; (6344 <arch_busy_wait+0x14>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    6336:	0180      	lsls	r0, r0, #6
    6338:	f043 0301 	orr.w	r3, r3, #1
    633c:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    633e:	bd08      	pop	{r3, pc}
    6340:	4770      	bx	lr
    6342:	bf00      	nop
    6344:	00020b00 	.word	0x00020b00

00006348 <fs_init>:
	LOG_DBG("fs unregister %d: %d", type, rc);
	return rc;
}

static int fs_init(const struct device *dev)
{
    6348:	b508      	push	{r3, lr}
    634a:	4804      	ldr	r0, [pc, #16]	; (635c <fs_init+0x14>)
    634c:	f018 fe6f 	bl	1f02e <z_impl_k_mutex_init>
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    6350:	4b03      	ldr	r3, [pc, #12]	; (6360 <fs_init+0x18>)
    6352:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    6354:	605b      	str	r3, [r3, #4]
	k_mutex_init(&mutex);
	sys_dlist_init(&fs_mnt_list);
	return 0;
}
    6356:	2000      	movs	r0, #0
    6358:	bd08      	pop	{r3, pc}
    635a:	bf00      	nop
    635c:	20002594 	.word	0x20002594
    6360:	200025a8 	.word	0x200025a8

00006364 <fs_close>:
{
    6364:	b5f0      	push	{r4, r5, r6, r7, lr}
    6366:	b083      	sub	sp, #12
    6368:	af00      	add	r7, sp, #0
	if (zfp->mp == NULL) {
    636a:	6843      	ldr	r3, [r0, #4]
    636c:	2b00      	cmp	r3, #0
    636e:	d049      	beq.n	6404 <fs_close+0xa0>
    6370:	4604      	mov	r4, r0
	CHECKIF(zfp->mp->fs->close == NULL) {
    6372:	69db      	ldr	r3, [r3, #28]
    6374:	69db      	ldr	r3, [r3, #28]
    6376:	2b00      	cmp	r3, #0
    6378:	d046      	beq.n	6408 <fs_close+0xa4>
	rc = zfp->mp->fs->close(zfp);
    637a:	4798      	blx	r3
	if (rc < 0) {
    637c:	1e05      	subs	r5, r0, #0
    637e:	db05      	blt.n	638c <fs_close+0x28>
	zfp->mp = NULL;
    6380:	2300      	movs	r3, #0
    6382:	6063      	str	r3, [r4, #4]
}
    6384:	4628      	mov	r0, r5
    6386:	370c      	adds	r7, #12
    6388:	46bd      	mov	sp, r7
    638a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("file close error (%d)", rc);
    638c:	466e      	mov	r6, sp
    638e:	b088      	sub	sp, #32
    6390:	466b      	mov	r3, sp
    6392:	f113 0210 	adds.w	r2, r3, #16
    6396:	d02f      	beq.n	63f8 <fs_close+0x94>
    6398:	210c      	movs	r1, #12
    639a:	b13a      	cbz	r2, 63ac <fs_close+0x48>
    639c:	4608      	mov	r0, r1
    639e:	2904      	cmp	r1, #4
    63a0:	dd01      	ble.n	63a6 <fs_close+0x42>
    63a2:	4c1b      	ldr	r4, [pc, #108]	; (6410 <fs_close+0xac>)
    63a4:	615c      	str	r4, [r3, #20]
    63a6:	2808      	cmp	r0, #8
    63a8:	dd00      	ble.n	63ac <fs_close+0x48>
    63aa:	619d      	str	r5, [r3, #24]
    63ac:	290b      	cmp	r1, #11
    63ae:	dd26      	ble.n	63fe <fs_close+0x9a>
    63b0:	240c      	movs	r4, #12
    63b2:	b13a      	cbz	r2, 63c4 <fs_close+0x60>
    63b4:	2103      	movs	r1, #3
    63b6:	7139      	strb	r1, [r7, #4]
    63b8:	2100      	movs	r1, #0
    63ba:	7179      	strb	r1, [r7, #5]
    63bc:	71b9      	strb	r1, [r7, #6]
    63be:	71f9      	strb	r1, [r7, #7]
    63c0:	6878      	ldr	r0, [r7, #4]
    63c2:	6118      	str	r0, [r3, #16]
    63c4:	2100      	movs	r1, #0
    63c6:	f36f 0100 	bfc	r1, #0, #1
    63ca:	f36f 0141 	bfc	r1, #1, #1
    63ce:	f36f 0182 	bfc	r1, #2, #1
    63d2:	f36f 01c5 	bfc	r1, #3, #3
    63d6:	2301      	movs	r3, #1
    63d8:	f363 1188 	bfi	r1, r3, #6, #3
    63dc:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
    63e0:	f364 2152 	bfi	r1, r4, #9, #10
    63e4:	f36f 41de 	bfc	r1, #19, #12
    63e8:	f36f 71df 	bfc	r1, #31, #1
    63ec:	2300      	movs	r3, #0
    63ee:	4809      	ldr	r0, [pc, #36]	; (6414 <fs_close+0xb0>)
    63f0:	f011 fb1c 	bl	17a2c <z_impl_z_log_msg_static_create>
    63f4:	46b5      	mov	sp, r6
		return rc;
    63f6:	e7c5      	b.n	6384 <fs_close+0x20>
		LOG_ERR("file close error (%d)", rc);
    63f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    63fc:	e7cd      	b.n	639a <fs_close+0x36>
    63fe:	f06f 041b 	mvn.w	r4, #27
    6402:	e7d6      	b.n	63b2 <fs_close+0x4e>
		return 0;
    6404:	2500      	movs	r5, #0
    6406:	e7bd      	b.n	6384 <fs_close+0x20>
		return -ENOTSUP;
    6408:	f06f 0585 	mvn.w	r5, #133	; 0x85
    640c:	e7ba      	b.n	6384 <fs_close+0x20>
    640e:	bf00      	nop
    6410:	00021660 	.word	0x00021660
    6414:	00020a70 	.word	0x00020a70

00006418 <fs_read>:
{
    6418:	b5f0      	push	{r4, r5, r6, r7, lr}
    641a:	b083      	sub	sp, #12
    641c:	af00      	add	r7, sp, #0
	if (zfp->mp == NULL) {
    641e:	6843      	ldr	r3, [r0, #4]
    6420:	2b00      	cmp	r3, #0
    6422:	d047      	beq.n	64b4 <fs_read+0x9c>
	CHECKIF(zfp->mp->fs->read == NULL) {
    6424:	69db      	ldr	r3, [r3, #28]
    6426:	685b      	ldr	r3, [r3, #4]
    6428:	2b00      	cmp	r3, #0
    642a:	d046      	beq.n	64ba <fs_read+0xa2>
	rc = zfp->mp->fs->read(zfp, ptr, size);
    642c:	4798      	blx	r3
	if (rc < 0) {
    642e:	1e04      	subs	r4, r0, #0
    6430:	db03      	blt.n	643a <fs_read+0x22>
}
    6432:	4620      	mov	r0, r4
    6434:	370c      	adds	r7, #12
    6436:	46bd      	mov	sp, r7
    6438:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("file read error (%d)", rc);
    643a:	466d      	mov	r5, sp
    643c:	b088      	sub	sp, #32
    643e:	466b      	mov	r3, sp
    6440:	f113 0210 	adds.w	r2, r3, #16
    6444:	d030      	beq.n	64a8 <fs_read+0x90>
    6446:	210c      	movs	r1, #12
    6448:	b13a      	cbz	r2, 645a <fs_read+0x42>
    644a:	4608      	mov	r0, r1
    644c:	2904      	cmp	r1, #4
    644e:	dd01      	ble.n	6454 <fs_read+0x3c>
    6450:	4e1b      	ldr	r6, [pc, #108]	; (64c0 <fs_read+0xa8>)
    6452:	615e      	str	r6, [r3, #20]
    6454:	2808      	cmp	r0, #8
    6456:	dd00      	ble.n	645a <fs_read+0x42>
    6458:	619c      	str	r4, [r3, #24]
    645a:	290b      	cmp	r1, #11
    645c:	dd27      	ble.n	64ae <fs_read+0x96>
    645e:	f04f 0c0c 	mov.w	ip, #12
    6462:	b13a      	cbz	r2, 6474 <fs_read+0x5c>
    6464:	2103      	movs	r1, #3
    6466:	7139      	strb	r1, [r7, #4]
    6468:	2100      	movs	r1, #0
    646a:	7179      	strb	r1, [r7, #5]
    646c:	71b9      	strb	r1, [r7, #6]
    646e:	71f9      	strb	r1, [r7, #7]
    6470:	6878      	ldr	r0, [r7, #4]
    6472:	6118      	str	r0, [r3, #16]
    6474:	2100      	movs	r1, #0
    6476:	f36f 0100 	bfc	r1, #0, #1
    647a:	f36f 0141 	bfc	r1, #1, #1
    647e:	f36f 0182 	bfc	r1, #2, #1
    6482:	f36f 01c5 	bfc	r1, #3, #3
    6486:	2301      	movs	r3, #1
    6488:	f363 1188 	bfi	r1, r3, #6, #3
    648c:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
    6490:	f36c 2152 	bfi	r1, ip, #9, #10
    6494:	f36f 41de 	bfc	r1, #19, #12
    6498:	f36f 71df 	bfc	r1, #31, #1
    649c:	2300      	movs	r3, #0
    649e:	4809      	ldr	r0, [pc, #36]	; (64c4 <fs_read+0xac>)
    64a0:	f011 fac4 	bl	17a2c <z_impl_z_log_msg_static_create>
    64a4:	46ad      	mov	sp, r5
    64a6:	e7c4      	b.n	6432 <fs_read+0x1a>
    64a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    64ac:	e7cc      	b.n	6448 <fs_read+0x30>
    64ae:	f06f 0c1b 	mvn.w	ip, #27
    64b2:	e7d6      	b.n	6462 <fs_read+0x4a>
		return -EBADF;
    64b4:	f06f 0408 	mvn.w	r4, #8
    64b8:	e7bb      	b.n	6432 <fs_read+0x1a>
		return -ENOTSUP;
    64ba:	f06f 0485 	mvn.w	r4, #133	; 0x85
    64be:	e7b8      	b.n	6432 <fs_read+0x1a>
    64c0:	00021678 	.word	0x00021678
    64c4:	00020a70 	.word	0x00020a70

000064c8 <fs_seek>:
{
    64c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    64ca:	b083      	sub	sp, #12
    64cc:	af00      	add	r7, sp, #0
	if (zfp->mp == NULL) {
    64ce:	6843      	ldr	r3, [r0, #4]
    64d0:	2b00      	cmp	r3, #0
    64d2:	d047      	beq.n	6564 <fs_seek+0x9c>
	CHECKIF(zfp->mp->fs->lseek == NULL) {
    64d4:	69db      	ldr	r3, [r3, #28]
    64d6:	68db      	ldr	r3, [r3, #12]
    64d8:	2b00      	cmp	r3, #0
    64da:	d046      	beq.n	656a <fs_seek+0xa2>
	rc = zfp->mp->fs->lseek(zfp, offset, whence);
    64dc:	4798      	blx	r3
	if (rc < 0) {
    64de:	1e04      	subs	r4, r0, #0
    64e0:	db03      	blt.n	64ea <fs_seek+0x22>
}
    64e2:	4620      	mov	r0, r4
    64e4:	370c      	adds	r7, #12
    64e6:	46bd      	mov	sp, r7
    64e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("file seek error (%d)", rc);
    64ea:	466d      	mov	r5, sp
    64ec:	b088      	sub	sp, #32
    64ee:	466b      	mov	r3, sp
    64f0:	f113 0210 	adds.w	r2, r3, #16
    64f4:	d030      	beq.n	6558 <fs_seek+0x90>
    64f6:	210c      	movs	r1, #12
    64f8:	b13a      	cbz	r2, 650a <fs_seek+0x42>
    64fa:	4608      	mov	r0, r1
    64fc:	2904      	cmp	r1, #4
    64fe:	dd01      	ble.n	6504 <fs_seek+0x3c>
    6500:	4e1b      	ldr	r6, [pc, #108]	; (6570 <fs_seek+0xa8>)
    6502:	615e      	str	r6, [r3, #20]
    6504:	2808      	cmp	r0, #8
    6506:	dd00      	ble.n	650a <fs_seek+0x42>
    6508:	619c      	str	r4, [r3, #24]
    650a:	290b      	cmp	r1, #11
    650c:	dd27      	ble.n	655e <fs_seek+0x96>
    650e:	f04f 0c0c 	mov.w	ip, #12
    6512:	b13a      	cbz	r2, 6524 <fs_seek+0x5c>
    6514:	2103      	movs	r1, #3
    6516:	7139      	strb	r1, [r7, #4]
    6518:	2100      	movs	r1, #0
    651a:	7179      	strb	r1, [r7, #5]
    651c:	71b9      	strb	r1, [r7, #6]
    651e:	71f9      	strb	r1, [r7, #7]
    6520:	6878      	ldr	r0, [r7, #4]
    6522:	6118      	str	r0, [r3, #16]
    6524:	2100      	movs	r1, #0
    6526:	f36f 0100 	bfc	r1, #0, #1
    652a:	f36f 0141 	bfc	r1, #1, #1
    652e:	f36f 0182 	bfc	r1, #2, #1
    6532:	f36f 01c5 	bfc	r1, #3, #3
    6536:	2301      	movs	r3, #1
    6538:	f363 1188 	bfi	r1, r3, #6, #3
    653c:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
    6540:	f36c 2152 	bfi	r1, ip, #9, #10
    6544:	f36f 41de 	bfc	r1, #19, #12
    6548:	f36f 71df 	bfc	r1, #31, #1
    654c:	2300      	movs	r3, #0
    654e:	4809      	ldr	r0, [pc, #36]	; (6574 <fs_seek+0xac>)
    6550:	f011 fa6c 	bl	17a2c <z_impl_z_log_msg_static_create>
    6554:	46ad      	mov	sp, r5
    6556:	e7c4      	b.n	64e2 <fs_seek+0x1a>
    6558:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    655c:	e7cc      	b.n	64f8 <fs_seek+0x30>
    655e:	f06f 0c1b 	mvn.w	ip, #27
    6562:	e7d6      	b.n	6512 <fs_seek+0x4a>
		return -EBADF;
    6564:	f06f 0408 	mvn.w	r4, #8
    6568:	e7bb      	b.n	64e2 <fs_seek+0x1a>
		return -ENOTSUP;
    656a:	f06f 0485 	mvn.w	r4, #133	; 0x85
    656e:	e7b8      	b.n	64e2 <fs_seek+0x1a>
    6570:	00021690 	.word	0x00021690
    6574:	00020a70 	.word	0x00020a70

00006578 <pool_id>:
	return &_net_buf_pool_list[id];
}

static int pool_id(struct net_buf_pool *pool)
{
	return pool - _net_buf_pool_list;
    6578:	4b03      	ldr	r3, [pc, #12]	; (6588 <pool_id+0x10>)
    657a:	1ac0      	subs	r0, r0, r3
    657c:	1080      	asrs	r0, r0, #2
}
    657e:	4b03      	ldr	r3, [pc, #12]	; (658c <pool_id+0x14>)
    6580:	fb03 f000 	mul.w	r0, r3, r0
    6584:	4770      	bx	lr
    6586:	bf00      	nop
    6588:	200005b4 	.word	0x200005b4
    658c:	ba2e8ba3 	.word	0xba2e8ba3

00006590 <net_buf_pool_get>:
}
    6590:	222c      	movs	r2, #44	; 0x2c
    6592:	4b02      	ldr	r3, [pc, #8]	; (659c <net_buf_pool_get+0xc>)
    6594:	fb02 3000 	mla	r0, r2, r0, r3
    6598:	4770      	bx	lr
    659a:	bf00      	nop
    659c:	200005b4 	.word	0x200005b4

000065a0 <net_ipv4_is_ll_addr>:
 *
 * @return True if it is, false otherwise.
 */
static inline bool net_ipv4_is_ll_addr(const struct in_addr *addr)
{
	return (ntohl(UNALIGNED_GET(&addr->s_addr)) & 0xA9FE0000) == 0xA9FE0000;
    65a0:	6802      	ldr	r2, [r0, #0]
    65a2:	0a13      	lsrs	r3, r2, #8
    65a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    65a8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    65ac:	0211      	lsls	r1, r2, #8
    65ae:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    65b2:	430b      	orrs	r3, r1
    65b4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    65b8:	4a02      	ldr	r2, [pc, #8]	; (65c4 <net_ipv4_is_ll_addr+0x24>)
    65ba:	439a      	bics	r2, r3
}
    65bc:	bf0c      	ite	eq
    65be:	2001      	moveq	r0, #1
    65c0:	2000      	movne	r0, #0
    65c2:	4770      	bx	lr
    65c4:	a9fe0000 	.word	0xa9fe0000

000065c8 <is_proper_ipv4_address>:
{
	return get_ipaddr_diff((const uint8_t *)src, (const uint8_t *)dst, 4);
}

static inline bool is_proper_ipv4_address(struct net_if_addr *addr)
{
    65c8:	b508      	push	{r3, lr}
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
    65ca:	6942      	ldr	r2, [r0, #20]
    65cc:	4b09      	ldr	r3, [pc, #36]	; (65f4 <is_proper_ipv4_address+0x2c>)
    65ce:	4013      	ands	r3, r2
    65d0:	4a09      	ldr	r2, [pc, #36]	; (65f8 <is_proper_ipv4_address+0x30>)
    65d2:	4293      	cmp	r3, r2
    65d4:	d001      	beq.n	65da <is_proper_ipv4_address+0x12>
	    addr->address.family == AF_INET &&
	    !net_ipv4_is_ll_addr(&addr->address.in_addr)) {
		return true;
	}

	return false;
    65d6:	2000      	movs	r0, #0
}
    65d8:	bd08      	pop	{r3, pc}
	    addr->address.family == AF_INET &&
    65da:	8803      	ldrh	r3, [r0, #0]
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
    65dc:	2b01      	cmp	r3, #1
    65de:	d001      	beq.n	65e4 <is_proper_ipv4_address+0x1c>
	return false;
    65e0:	2000      	movs	r0, #0
    65e2:	e7f9      	b.n	65d8 <is_proper_ipv4_address+0x10>
	    !net_ipv4_is_ll_addr(&addr->address.in_addr)) {
    65e4:	3004      	adds	r0, #4
    65e6:	f7ff ffdb 	bl	65a0 <net_ipv4_is_ll_addr>
	    addr->address.family == AF_INET &&
    65ea:	b108      	cbz	r0, 65f0 <is_proper_ipv4_address+0x28>
	return false;
    65ec:	2000      	movs	r0, #0
    65ee:	e7f3      	b.n	65d8 <is_proper_ipv4_address+0x10>
		return true;
    65f0:	2001      	movs	r0, #1
    65f2:	e7f1      	b.n	65d8 <is_proper_ipv4_address+0x10>
    65f4:	0002ff00 	.word	0x0002ff00
    65f8:	00020100 	.word	0x00020100

000065fc <iface_ipv4_init>:

	k_mutex_unlock(&lock);
}

static void iface_ipv4_init(int if_count)
{
    65fc:	2300      	movs	r3, #0
			 if_count);
		NET_WARN("Consider increasing CONFIG_NET_IF_MAX_IPV4_COUNT "
			 "value.");
	}

	for (i = 0; i < ARRAY_SIZE(ipv4_addresses); i++) {
    65fe:	b103      	cbz	r3, 6602 <iface_ipv4_init+0x6>
		ipv4_addresses[i].ipv4.ttl = CONFIG_NET_INITIAL_TTL;
	}
}
    6600:	4770      	bx	lr
		ipv4_addresses[i].ipv4.ttl = CONFIG_NET_INITIAL_TTL;
    6602:	4a04      	ldr	r2, [pc, #16]	; (6614 <iface_ipv4_init+0x18>)
    6604:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    6608:	2140      	movs	r1, #64	; 0x40
    660a:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
	for (i = 0; i < ARRAY_SIZE(ipv4_addresses); i++) {
    660e:	3301      	adds	r3, #1
    6610:	e7f5      	b.n	65fe <iface_ipv4_init+0x2>
    6612:	bf00      	nop
    6614:	200025b8 	.word	0x200025b8

00006618 <if_ipv4_get_addr>:
{
    6618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    661c:	4604      	mov	r4, r0
    661e:	460f      	mov	r7, r1
    6620:	4616      	mov	r6, r2
	return z_impl_k_mutex_lock(mutex, timeout);
    6622:	f04f 32ff 	mov.w	r2, #4294967295
    6626:	f04f 33ff 	mov.w	r3, #4294967295
    662a:	481e      	ldr	r0, [pc, #120]	; (66a4 <if_ipv4_get_addr+0x8c>)
    662c:	f00a fcf0 	bl	11010 <z_impl_k_mutex_lock>
	if (!iface) {
    6630:	b10c      	cbz	r4, 6636 <if_ipv4_get_addr+0x1e>
	ipv4 = iface->config.ip.ipv4;
    6632:	6864      	ldr	r4, [r4, #4]
	if (!ipv4) {
    6634:	b92c      	cbnz	r4, 6642 <if_ipv4_get_addr+0x2a>
	return z_impl_k_mutex_unlock(mutex);
    6636:	481b      	ldr	r0, [pc, #108]	; (66a4 <if_ipv4_get_addr+0x8c>)
    6638:	f00a fd6e 	bl	11118 <z_impl_k_mutex_unlock>
}
    663c:	4620      	mov	r0, r4
    663e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0; i < NET_IF_MAX_IPV4_ADDR; i++) {
    6642:	2500      	movs	r5, #0
    6644:	2d00      	cmp	r5, #0
    6646:	dd01      	ble.n	664c <if_ipv4_get_addr+0x34>
	struct in_addr *addr = NULL;
    6648:	2400      	movs	r4, #0
out:
    664a:	e7f4      	b.n	6636 <if_ipv4_get_addr+0x1e>
		if (!ipv4->unicast[i].is_used ||
    664c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    6650:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    6654:	7d9b      	ldrb	r3, [r3, #22]
    6656:	f013 0f02 	tst.w	r3, #2
    665a:	d020      	beq.n	669e <if_ipv4_get_addr+0x86>
    665c:	f1b7 3fff 	cmp.w	r7, #4294967295
    6660:	d007      	beq.n	6672 <if_ipv4_get_addr+0x5a>
		     ipv4->unicast[i].addr_state != addr_state) ||
    6662:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    6666:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    666a:	f993 3015 	ldrsb.w	r3, [r3, #21]
		    (addr_state != NET_ADDR_ANY_STATE &&
    666e:	42bb      	cmp	r3, r7
    6670:	d115      	bne.n	669e <if_ipv4_get_addr+0x86>
		    ipv4->unicast[i].address.family != AF_INET) {
    6672:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    6676:	f834 3033 	ldrh.w	r3, [r4, r3, lsl #3]
		     ipv4->unicast[i].addr_state != addr_state) ||
    667a:	2b01      	cmp	r3, #1
    667c:	d10f      	bne.n	669e <if_ipv4_get_addr+0x86>
		if (net_ipv4_is_ll_addr(&ipv4->unicast[i].address.in_addr)) {
    667e:	eb05 0845 	add.w	r8, r5, r5, lsl #1
    6682:	eb04 08c8 	add.w	r8, r4, r8, lsl #3
    6686:	f108 0804 	add.w	r8, r8, #4
    668a:	4640      	mov	r0, r8
    668c:	f7ff ff88 	bl	65a0 <net_ipv4_is_ll_addr>
    6690:	b110      	cbz	r0, 6698 <if_ipv4_get_addr+0x80>
			if (!ll) {
    6692:	b126      	cbz	r6, 669e <if_ipv4_get_addr+0x86>
		addr = &ipv4->unicast[i].address.in_addr;
    6694:	4644      	mov	r4, r8
    6696:	e7ce      	b.n	6636 <if_ipv4_get_addr+0x1e>
			if (ll) {
    6698:	b90e      	cbnz	r6, 669e <if_ipv4_get_addr+0x86>
		addr = &ipv4->unicast[i].address.in_addr;
    669a:	4644      	mov	r4, r8
    669c:	e7cb      	b.n	6636 <if_ipv4_get_addr+0x1e>
	for (i = 0; i < NET_IF_MAX_IPV4_ADDR; i++) {
    669e:	3501      	adds	r5, #1
    66a0:	e7d0      	b.n	6644 <if_ipv4_get_addr+0x2c>
    66a2:	bf00      	nop
    66a4:	200004b0 	.word	0x200004b0

000066a8 <iface_router_notify_deletion>:
{
    66a8:	b508      	push	{r3, lr}
		   router->address.family == AF_INET) {
    66aa:	8883      	ldrh	r3, [r0, #4]
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
    66ac:	2b01      	cmp	r3, #1
    66ae:	d000      	beq.n	66b2 <iface_router_notify_deletion+0xa>
}
    66b0:	bd08      	pop	{r3, pc}
		net_mgmt_event_notify_with_info(NET_EVENT_IPV4_ROUTER_DEL,
    66b2:	2310      	movs	r3, #16
    66b4:	f100 0208 	add.w	r2, r0, #8
    66b8:	6981      	ldr	r1, [r0, #24]
    66ba:	4802      	ldr	r0, [pc, #8]	; (66c4 <iface_router_notify_deletion+0x1c>)
    66bc:	f001 fbc4 	bl	7e48 <net_mgmt_event_notify_with_info>
}
    66c0:	e7f6      	b.n	66b0 <iface_router_notify_deletion+0x8>
    66c2:	bf00      	nop
    66c4:	e0040006 	.word	0xe0040006

000066c8 <iface_router_update_timer>:
{
    66c8:	b510      	push	{r4, lr}
    66ca:	4604      	mov	r4, r0
	return z_impl_k_mutex_lock(mutex, timeout);
    66cc:	f04f 32ff 	mov.w	r2, #4294967295
    66d0:	f04f 33ff 	mov.w	r3, #4294967295
    66d4:	4825      	ldr	r0, [pc, #148]	; (676c <iface_router_update_timer+0xa4>)
    66d6:	f00a fc9b 	bl	11010 <z_impl_k_mutex_lock>
	return list->head;
    66da:	4b25      	ldr	r3, [pc, #148]	; (6770 <iface_router_update_timer+0xa8>)
    66dc:	6819      	ldr	r1, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
    66de:	b139      	cbz	r1, 66f0 <iface_router_update_timer+0x28>
	return node->next;
    66e0:	680a      	ldr	r2, [r1, #0]
    66e2:	b102      	cbz	r2, 66e6 <iface_router_update_timer+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    66e4:	b111      	cbz	r1, 66ec <iface_router_update_timer+0x24>
    66e6:	f04f 3cff 	mov.w	ip, #4294967295
    66ea:	e006      	b.n	66fa <iface_router_update_timer+0x32>
    66ec:	460a      	mov	r2, r1
    66ee:	e7fa      	b.n	66e6 <iface_router_update_timer+0x1e>
    66f0:	460a      	mov	r2, r1
    66f2:	e7f8      	b.n	66e6 <iface_router_update_timer+0x1e>
    66f4:	4613      	mov	r3, r2
    66f6:	4611      	mov	r1, r2
    66f8:	461a      	mov	r2, r3
    66fa:	b1b1      	cbz	r1, 672a <iface_router_update_timer+0x62>
	uint32_t ends = router->life_start;
    66fc:	69cb      	ldr	r3, [r1, #28]
	ends += MSEC_PER_SEC * router->lifetime;
    66fe:	8c09      	ldrh	r1, [r1, #32]
    6700:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    6704:	fb00 3301 	mla	r3, r0, r1, r3
	return (int32_t)(ends - now);
    6708:	1b1b      	subs	r3, r3, r4
		if (ends <= 0) {
    670a:	2b00      	cmp	r3, #0
    670c:	dd0b      	ble.n	6726 <iface_router_update_timer+0x5e>
		new_delay = MIN((uint32_t)ends, new_delay);
    670e:	459c      	cmp	ip, r3
    6710:	bf28      	it	cs
    6712:	469c      	movcs	ip, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
    6714:	2a00      	cmp	r2, #0
    6716:	d0ed      	beq.n	66f4 <iface_router_update_timer+0x2c>
	return node->next;
    6718:	6813      	ldr	r3, [r2, #0]
    671a:	2b00      	cmp	r3, #0
    671c:	d0eb      	beq.n	66f6 <iface_router_update_timer+0x2e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    671e:	2a00      	cmp	r2, #0
    6720:	d1e9      	bne.n	66f6 <iface_router_update_timer+0x2e>
    6722:	4613      	mov	r3, r2
    6724:	e7e7      	b.n	66f6 <iface_router_update_timer+0x2e>
			new_delay = 0;
    6726:	f04f 0c00 	mov.w	ip, #0
	if (new_delay == UINT32_MAX) {
    672a:	f1bc 3fff 	cmp.w	ip, #4294967295
    672e:	d018      	beq.n	6762 <iface_router_update_timer+0x9a>
			return ((t * to_hz + off) / from_hz);
    6730:	ea4f 415c 	mov.w	r1, ip, lsr #17
    6734:	ea4f 3ccc 	mov.w	ip, ip, lsl #15
    6738:	f240 33e7 	movw	r3, #999	; 0x3e7
    673c:	eb1c 0003 	adds.w	r0, ip, r3
    6740:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    6744:	f04f 0300 	mov.w	r3, #0
    6748:	f141 0100 	adc.w	r1, r1, #0
    674c:	f7fa f8f6 	bl	93c <__aeabi_uldivmod>
    6750:	4602      	mov	r2, r0
    6752:	460b      	mov	r3, r1
		k_work_reschedule(&router_timer, K_MSEC(new_delay));
    6754:	4807      	ldr	r0, [pc, #28]	; (6774 <iface_router_update_timer+0xac>)
    6756:	f00a ff15 	bl	11584 <k_work_reschedule>
	return z_impl_k_mutex_unlock(mutex);
    675a:	4804      	ldr	r0, [pc, #16]	; (676c <iface_router_update_timer+0xa4>)
    675c:	f00a fcdc 	bl	11118 <z_impl_k_mutex_unlock>
}
    6760:	bd10      	pop	{r4, pc}
		k_work_cancel_delayable(&router_timer);
    6762:	4804      	ldr	r0, [pc, #16]	; (6774 <iface_router_update_timer+0xac>)
    6764:	f018 fe99 	bl	1f49a <k_work_cancel_delayable>
    6768:	e7f7      	b.n	675a <iface_router_update_timer+0x92>
    676a:	bf00      	nop
    676c:	200004b0 	.word	0x200004b0
    6770:	200025f8 	.word	0x200025f8
    6774:	20000bf0 	.word	0x20000bf0

00006778 <iface_router_expired>:
{
    6778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t current_time = k_uptime_get_32();
    677a:	f013 f8b8 	bl	198ee <k_uptime_get_32>
    677e:	4606      	mov	r6, r0
	return z_impl_k_mutex_lock(mutex, timeout);
    6780:	f04f 32ff 	mov.w	r2, #4294967295
    6784:	f04f 33ff 	mov.w	r3, #4294967295
    6788:	481e      	ldr	r0, [pc, #120]	; (6804 <iface_router_expired+0x8c>)
    678a:	f00a fc41 	bl	11010 <z_impl_k_mutex_lock>
	return list->head;
    678e:	4b1e      	ldr	r3, [pc, #120]	; (6808 <iface_router_expired+0x90>)
    6790:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
    6792:	b1b4      	cbz	r4, 67c2 <iface_router_expired+0x4a>
	return node->next;
    6794:	6825      	ldr	r5, [r4, #0]
    6796:	b105      	cbz	r5, 679a <iface_router_expired+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
    6798:	b10c      	cbz	r4, 679e <iface_router_expired+0x26>
    679a:	2700      	movs	r7, #0
    679c:	e016      	b.n	67cc <iface_router_expired+0x54>
    679e:	4625      	mov	r5, r4
    67a0:	e7fb      	b.n	679a <iface_router_expired+0x22>
		iface_router_notify_deletion(router, "has expired");
    67a2:	491a      	ldr	r1, [pc, #104]	; (680c <iface_router_expired+0x94>)
    67a4:	4620      	mov	r0, r4
    67a6:	f7ff ff7f 	bl	66a8 <iface_router_notify_deletion>
		sys_slist_remove(&active_router_timers,
    67aa:	4622      	mov	r2, r4
    67ac:	4639      	mov	r1, r7
    67ae:	4816      	ldr	r0, [pc, #88]	; (6808 <iface_router_expired+0x90>)
    67b0:	f012 ff75 	bl	1969e <sys_slist_remove>
		router->is_used = false;
    67b4:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    67b8:	f36f 0300 	bfc	r3, #0, #1
    67bc:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    67c0:	e00f      	b.n	67e2 <iface_router_expired+0x6a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
    67c2:	4625      	mov	r5, r4
    67c4:	e7e9      	b.n	679a <iface_router_expired+0x22>
    67c6:	462b      	mov	r3, r5
    67c8:	462c      	mov	r4, r5
    67ca:	461d      	mov	r5, r3
    67cc:	b194      	cbz	r4, 67f4 <iface_router_expired+0x7c>
	uint32_t ends = router->life_start;
    67ce:	69e3      	ldr	r3, [r4, #28]
	ends += MSEC_PER_SEC * router->lifetime;
    67d0:	8c22      	ldrh	r2, [r4, #32]
    67d2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    67d6:	fb01 3302 	mla	r3, r1, r2, r3
	return (int32_t)(ends - now);
    67da:	1b9b      	subs	r3, r3, r6
		if (ends > 0) {
    67dc:	2b00      	cmp	r3, #0
    67de:	dde0      	ble.n	67a2 <iface_router_expired+0x2a>
			prev_node = &router->node;
    67e0:	4627      	mov	r7, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
    67e2:	2d00      	cmp	r5, #0
    67e4:	d0ef      	beq.n	67c6 <iface_router_expired+0x4e>
	return node->next;
    67e6:	682b      	ldr	r3, [r5, #0]
    67e8:	2b00      	cmp	r3, #0
    67ea:	d0ed      	beq.n	67c8 <iface_router_expired+0x50>
Z_GENLIST_PEEK_NEXT(slist, snode)
    67ec:	2d00      	cmp	r5, #0
    67ee:	d1eb      	bne.n	67c8 <iface_router_expired+0x50>
    67f0:	462b      	mov	r3, r5
    67f2:	e7e9      	b.n	67c8 <iface_router_expired+0x50>
	iface_router_update_timer(current_time);
    67f4:	4630      	mov	r0, r6
    67f6:	f7ff ff67 	bl	66c8 <iface_router_update_timer>
	return z_impl_k_mutex_unlock(mutex);
    67fa:	4802      	ldr	r0, [pc, #8]	; (6804 <iface_router_expired+0x8c>)
    67fc:	f00a fc8c 	bl	11118 <z_impl_k_mutex_unlock>
}
    6800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6802:	bf00      	nop
    6804:	200004b0 	.word	0x200004b0
    6808:	200025f8 	.word	0x200025f8
    680c:	000216c0 	.word	0x000216c0

00006810 <notify_iface_up>:
	       (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD) &&
		net_if_is_socket_offloaded(iface));
}

static void notify_iface_up(struct net_if *iface)
{
    6810:	b510      	push	{r4, lr}
    6812:	4604      	mov	r4, r0
static inline void net_if_flag_set(struct net_if *iface,
				   enum net_if_flag value)
{
	NET_ASSERT(iface);

	atomic_set_bit(iface->if_dev->flags, value);
    6814:	6800      	ldr	r0, [r0, #0]
    6816:	2108      	movs	r1, #8
    6818:	300c      	adds	r0, #12
    681a:	f013 f882 	bl	19922 <atomic_set_bit>
				     const void *info, size_t length);

static inline void net_mgmt_event_notify(uint32_t mgmt_event,
					 struct net_if *iface)
{
	net_mgmt_event_notify_with_info(mgmt_event, iface, NULL, 0);
    681e:	2300      	movs	r3, #0
    6820:	461a      	mov	r2, r3
    6822:	4621      	mov	r1, r4
    6824:	4805      	ldr	r0, [pc, #20]	; (683c <notify_iface_up+0x2c>)
    6826:	f001 fb0f 	bl	7e48 <net_mgmt_event_notify_with_info>
 * @return True if IP offloading is active, false otherwise.
 */
static inline bool net_if_is_ip_offloaded(struct net_if *iface)
{
#if defined(CONFIG_NET_OFFLOAD)
	return (iface->if_dev->offload != NULL);
    682a:	6823      	ldr	r3, [r4, #0]
    682c:	699b      	ldr	r3, [r3, #24]
	net_virtual_enable(iface);

	/* If the interface is only having point-to-point traffic then we do
	 * not need to run DAD etc for it.
	 */
	if (!is_iface_offloaded(iface) &&
    682e:	b103      	cbz	r3, 6832 <notify_iface_up+0x22>
	    !(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
		iface_ipv6_start(iface);
		net_ipv4_autoconf_start(iface);
	}
}
    6830:	bd10      	pop	{r4, pc}
	    !(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
    6832:	4620      	mov	r0, r4
    6834:	f012 ff4e 	bl	196d4 <l2_flags_get>
}
    6838:	e7fa      	b.n	6830 <notify_iface_up+0x20>
    683a:	bf00      	nop
    683c:	d0010002 	.word	0xd0010002

00006840 <notify_iface_down>:

static void notify_iface_down(struct net_if *iface)
{
    6840:	b510      	push	{r4, lr}
    6842:	4604      	mov	r4, r0
	atomic_clear_bit(iface->if_dev->flags, value);
    6844:	6800      	ldr	r0, [r0, #0]
    6846:	2108      	movs	r1, #8
    6848:	300c      	adds	r0, #12
    684a:	f013 f8ab 	bl	199a4 <atomic_clear_bit>
    684e:	2300      	movs	r3, #0
    6850:	461a      	mov	r2, r3
    6852:	4621      	mov	r1, r4
    6854:	4805      	ldr	r0, [pc, #20]	; (686c <notify_iface_down+0x2c>)
    6856:	f001 faf7 	bl	7e48 <net_mgmt_event_notify_with_info>
	return (iface->if_dev->offload != NULL);
    685a:	6823      	ldr	r3, [r4, #0]
    685c:	699b      	ldr	r3, [r3, #24]
	net_if_flag_clear(iface, NET_IF_RUNNING);
	net_mgmt_event_notify(NET_EVENT_IF_DOWN, iface);
	net_virtual_disable(iface);

	if (!is_iface_offloaded(iface) &&
    685e:	b103      	cbz	r3, 6862 <notify_iface_down+0x22>
	    !(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
		net_ipv4_autoconf_reset(iface);
	}
}
    6860:	bd10      	pop	{r4, pc}
	    !(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
    6862:	4620      	mov	r0, r4
    6864:	f012 ff36 	bl	196d4 <l2_flags_get>
}
    6868:	e7fa      	b.n	6860 <notify_iface_down+0x20>
    686a:	bf00      	nop
    686c:	d0010001 	.word	0xd0010001

00006870 <iface_router_init>:
{
    6870:	b508      	push	{r3, lr}
	k_work_init_delayable(&router_timer, iface_router_expired);
    6872:	4904      	ldr	r1, [pc, #16]	; (6884 <iface_router_init+0x14>)
    6874:	4804      	ldr	r0, [pc, #16]	; (6888 <iface_router_init+0x18>)
    6876:	f018 fdbd 	bl	1f3f4 <k_work_init_delayable>
	list->head = NULL;
    687a:	4b04      	ldr	r3, [pc, #16]	; (688c <iface_router_init+0x1c>)
    687c:	2200      	movs	r2, #0
    687e:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
    6880:	605a      	str	r2, [r3, #4]
}
    6882:	bd08      	pop	{r3, pc}
    6884:	00006779 	.word	0x00006779
    6888:	20000bf0 	.word	0x20000bf0
    688c:	200025f8 	.word	0x200025f8

00006890 <z_impl_net_if_get_by_index>:
	if (index <= 0) {
    6890:	2800      	cmp	r0, #0
    6892:	dd07      	ble.n	68a4 <z_impl_net_if_get_by_index+0x14>
	if (&_net_if_list_start[index - 1] >= _net_if_list_end) {
    6894:	3801      	subs	r0, #1
    6896:	4b05      	ldr	r3, [pc, #20]	; (68ac <z_impl_net_if_get_by_index+0x1c>)
    6898:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    689c:	4b04      	ldr	r3, [pc, #16]	; (68b0 <z_impl_net_if_get_by_index+0x20>)
    689e:	4298      	cmp	r0, r3
    68a0:	d202      	bcs.n	68a8 <z_impl_net_if_get_by_index+0x18>
}
    68a2:	4770      	bx	lr
		return NULL;
    68a4:	2000      	movs	r0, #0
    68a6:	4770      	bx	lr
		return NULL;
    68a8:	2000      	movs	r0, #0
    68aa:	e7fa      	b.n	68a2 <z_impl_net_if_get_by_index+0x12>
    68ac:	20000690 	.word	0x20000690
    68b0:	20000698 	.word	0x20000698

000068b4 <net_if_set_link_addr_locked>:
{
    68b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    68b8:	4604      	mov	r4, r0
    68ba:	460d      	mov	r5, r1
    68bc:	4616      	mov	r6, r2
    68be:	461f      	mov	r7, r3
	return z_impl_k_mutex_lock(mutex, timeout);
    68c0:	f8df 8028 	ldr.w	r8, [pc, #40]	; 68ec <net_if_set_link_addr_locked+0x38>
    68c4:	f04f 32ff 	mov.w	r2, #4294967295
    68c8:	f04f 33ff 	mov.w	r3, #4294967295
    68cc:	4640      	mov	r0, r8
    68ce:	f00a fb9f 	bl	11010 <z_impl_k_mutex_lock>
	ret = net_if_set_link_addr_unlocked(iface, addr, len, type);
    68d2:	463b      	mov	r3, r7
    68d4:	4632      	mov	r2, r6
    68d6:	4629      	mov	r1, r5
    68d8:	4620      	mov	r0, r4
    68da:	f012 ffd3 	bl	19884 <net_if_set_link_addr_unlocked>
    68de:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    68e0:	4640      	mov	r0, r8
    68e2:	f00a fc19 	bl	11118 <z_impl_k_mutex_unlock>
}
    68e6:	4620      	mov	r0, r4
    68e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    68ec:	200004b0 	.word	0x200004b0

000068f0 <net_if_lookup_by_dev>:
{
    68f0:	4602      	mov	r2, r0
	STRUCT_SECTION_FOREACH(net_if, iface) {
    68f2:	4806      	ldr	r0, [pc, #24]	; (690c <net_if_lookup_by_dev+0x1c>)
    68f4:	e000      	b.n	68f8 <net_if_lookup_by_dev+0x8>
    68f6:	3008      	adds	r0, #8
    68f8:	4b05      	ldr	r3, [pc, #20]	; (6910 <net_if_lookup_by_dev+0x20>)
    68fa:	4298      	cmp	r0, r3
    68fc:	d204      	bcs.n	6908 <net_if_lookup_by_dev+0x18>
	return iface->if_dev->dev;
    68fe:	6803      	ldr	r3, [r0, #0]
    6900:	681b      	ldr	r3, [r3, #0]
		if (net_if_get_device(iface) == dev) {
    6902:	429a      	cmp	r2, r3
    6904:	d1f7      	bne.n	68f6 <net_if_lookup_by_dev+0x6>
    6906:	e000      	b.n	690a <net_if_lookup_by_dev+0x1a>
	return NULL;
    6908:	2000      	movs	r0, #0
}
    690a:	4770      	bx	lr
    690c:	20000690 	.word	0x20000690
    6910:	20000698 	.word	0x20000698

00006914 <net_if_get_default>:
	if (&_net_if_list_start[0] == &_net_if_list_end[0]) {
    6914:	4a05      	ldr	r2, [pc, #20]	; (692c <net_if_get_default+0x18>)
    6916:	4b06      	ldr	r3, [pc, #24]	; (6930 <net_if_get_default+0x1c>)
    6918:	429a      	cmp	r2, r3
    691a:	d005      	beq.n	6928 <net_if_get_default+0x14>
	if (default_iface != NULL) {
    691c:	4b05      	ldr	r3, [pc, #20]	; (6934 <net_if_get_default+0x20>)
    691e:	6818      	ldr	r0, [r3, #0]
    6920:	b100      	cbz	r0, 6924 <net_if_get_default+0x10>
}
    6922:	4770      	bx	lr
	return iface ? iface : _net_if_list_start;
    6924:	4610      	mov	r0, r2
    6926:	4770      	bx	lr
		return NULL;
    6928:	2000      	movs	r0, #0
    692a:	e7fa      	b.n	6922 <net_if_get_default+0xe>
    692c:	20000690 	.word	0x20000690
    6930:	20000698 	.word	0x20000698
    6934:	20002600 	.word	0x20002600

00006938 <net_if_config_ipv4_get>:
{
    6938:	b570      	push	{r4, r5, r6, lr}
    693a:	4604      	mov	r4, r0
    693c:	460e      	mov	r6, r1
	return z_impl_k_mutex_lock(mutex, timeout);
    693e:	f04f 32ff 	mov.w	r2, #4294967295
    6942:	f04f 33ff 	mov.w	r3, #4294967295
    6946:	4816      	ldr	r0, [pc, #88]	; (69a0 <net_if_config_ipv4_get+0x68>)
    6948:	f00a fb62 	bl	11010 <z_impl_k_mutex_lock>
	if (iface == NULL) {
    694c:	b17c      	cbz	r4, 696e <net_if_config_ipv4_get+0x36>
	return atomic_test_bit(iface->if_dev->flags, value);
    694e:	6820      	ldr	r0, [r4, #0]
    6950:	2106      	movs	r1, #6
    6952:	300c      	adds	r0, #12
    6954:	f012 ff89 	bl	1986a <atomic_test_bit>
	if (!net_if_flag_is_set(iface, NET_IF_IPV4)) {
    6958:	b148      	cbz	r0, 696e <net_if_config_ipv4_get+0x36>
	if (iface->config.ip.ipv4) {
    695a:	6863      	ldr	r3, [r4, #4]
    695c:	b1d3      	cbz	r3, 6994 <net_if_config_ipv4_get+0x5c>
		if (ipv4) {
    695e:	b106      	cbz	r6, 6962 <net_if_config_ipv4_get+0x2a>
			*ipv4 = iface->config.ip.ipv4;
    6960:	6033      	str	r3, [r6, #0]
	int ret = 0;
    6962:	2500      	movs	r5, #0
	return z_impl_k_mutex_unlock(mutex);
    6964:	480e      	ldr	r0, [pc, #56]	; (69a0 <net_if_config_ipv4_get+0x68>)
    6966:	f00a fbd7 	bl	11118 <z_impl_k_mutex_unlock>
}
    696a:	4628      	mov	r0, r5
    696c:	bd70      	pop	{r4, r5, r6, pc}
		ret = -ENOTSUP;
    696e:	f06f 0585 	mvn.w	r5, #133	; 0x85
		goto out;
    6972:	e7f7      	b.n	6964 <net_if_config_ipv4_get+0x2c>
		if (ipv4_addresses[i].iface) {
    6974:	4b0b      	ldr	r3, [pc, #44]	; (69a4 <net_if_config_ipv4_get+0x6c>)
    6976:	eb03 1385 	add.w	r3, r3, r5, lsl #6
    697a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    697c:	b10b      	cbz	r3, 6982 <net_if_config_ipv4_get+0x4a>
	for (i = 0; i < ARRAY_SIZE(ipv4_addresses); i++) {
    697e:	3501      	adds	r5, #1
    6980:	e009      	b.n	6996 <net_if_config_ipv4_get+0x5e>
		iface->config.ip.ipv4 = &ipv4_addresses[i].ipv4;
    6982:	4b08      	ldr	r3, [pc, #32]	; (69a4 <net_if_config_ipv4_get+0x6c>)
    6984:	eb03 1385 	add.w	r3, r3, r5, lsl #6
    6988:	6063      	str	r3, [r4, #4]
		ipv4_addresses[i].iface = iface;
    698a:	63dc      	str	r4, [r3, #60]	; 0x3c
		if (ipv4) {
    698c:	2e00      	cmp	r6, #0
    698e:	d0e9      	beq.n	6964 <net_if_config_ipv4_get+0x2c>
			*ipv4 = &ipv4_addresses[i].ipv4;
    6990:	6033      	str	r3, [r6, #0]
		goto out;
    6992:	e7e7      	b.n	6964 <net_if_config_ipv4_get+0x2c>
	for (i = 0; i < ARRAY_SIZE(ipv4_addresses); i++) {
    6994:	2500      	movs	r5, #0
    6996:	2d00      	cmp	r5, #0
    6998:	d0ec      	beq.n	6974 <net_if_config_ipv4_get+0x3c>
	ret = -ESRCH;
    699a:	f06f 0502 	mvn.w	r5, #2
    699e:	e7e1      	b.n	6964 <net_if_config_ipv4_get+0x2c>
    69a0:	200004b0 	.word	0x200004b0
    69a4:	200025b8 	.word	0x200025b8

000069a8 <net_if_ipv4_get_ttl>:
{
    69a8:	b510      	push	{r4, lr}
    69aa:	4604      	mov	r4, r0
	return z_impl_k_mutex_lock(mutex, timeout);
    69ac:	f04f 32ff 	mov.w	r2, #4294967295
    69b0:	f04f 33ff 	mov.w	r3, #4294967295
    69b4:	4806      	ldr	r0, [pc, #24]	; (69d0 <net_if_ipv4_get_ttl+0x28>)
    69b6:	f00a fb2b 	bl	11010 <z_impl_k_mutex_lock>
	if (!iface->config.ip.ipv4) {
    69ba:	6863      	ldr	r3, [r4, #4]
    69bc:	b133      	cbz	r3, 69cc <net_if_ipv4_get_ttl+0x24>
	ret = iface->config.ip.ipv4->ttl;
    69be:	f893 4038 	ldrb.w	r4, [r3, #56]	; 0x38
	return z_impl_k_mutex_unlock(mutex);
    69c2:	4803      	ldr	r0, [pc, #12]	; (69d0 <net_if_ipv4_get_ttl+0x28>)
    69c4:	f00a fba8 	bl	11118 <z_impl_k_mutex_unlock>
}
    69c8:	4620      	mov	r0, r4
    69ca:	bd10      	pop	{r4, pc}
	int ret = 0;
    69cc:	2400      	movs	r4, #0
    69ce:	e7f8      	b.n	69c2 <net_if_ipv4_get_ttl+0x1a>
    69d0:	200004b0 	.word	0x200004b0

000069d4 <net_if_ipv4_addr_mask_cmp>:
{
    69d4:	b538      	push	{r3, r4, r5, lr}
    69d6:	4604      	mov	r4, r0
    69d8:	460d      	mov	r5, r1
	return z_impl_k_mutex_lock(mutex, timeout);
    69da:	f04f 32ff 	mov.w	r2, #4294967295
    69de:	f04f 33ff 	mov.w	r3, #4294967295
    69e2:	4817      	ldr	r0, [pc, #92]	; (6a40 <net_if_ipv4_addr_mask_cmp+0x6c>)
    69e4:	f00a fb14 	bl	11010 <z_impl_k_mutex_lock>
	ipv4 = iface->config.ip.ipv4;
    69e8:	6863      	ldr	r3, [r4, #4]
	if (!ipv4) {
    69ea:	b92b      	cbnz	r3, 69f8 <net_if_ipv4_addr_mask_cmp+0x24>
	bool ret = false;
    69ec:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
    69ee:	4814      	ldr	r0, [pc, #80]	; (6a40 <net_if_ipv4_addr_mask_cmp+0x6c>)
    69f0:	f00a fb92 	bl	11118 <z_impl_k_mutex_unlock>
}
    69f4:	4620      	mov	r0, r4
    69f6:	bd38      	pop	{r3, r4, r5, pc}
	subnet = UNALIGNED_GET(&addr->s_addr) & ipv4->netmask.s_addr;
    69f8:	682a      	ldr	r2, [r5, #0]
    69fa:	6b5d      	ldr	r5, [r3, #52]	; 0x34
    69fc:	ea05 0002 	and.w	r0, r5, r2
	for (i = 0; i < NET_IF_MAX_IPV4_ADDR; i++) {
    6a00:	2200      	movs	r2, #0
    6a02:	2a00      	cmp	r2, #0
    6a04:	dd01      	ble.n	6a0a <net_if_ipv4_addr_mask_cmp+0x36>
	bool ret = false;
    6a06:	2400      	movs	r4, #0
out:
    6a08:	e7f1      	b.n	69ee <net_if_ipv4_addr_mask_cmp+0x1a>
		if (!ipv4->unicast[i].is_used ||
    6a0a:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    6a0e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    6a12:	7d89      	ldrb	r1, [r1, #22]
    6a14:	f3c1 0440 	ubfx	r4, r1, #1, #1
    6a18:	f011 0f02 	tst.w	r1, #2
    6a1c:	d00d      	beq.n	6a3a <net_if_ipv4_addr_mask_cmp+0x66>
		    ipv4->unicast[i].address.family != AF_INET) {
    6a1e:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    6a22:	f833 1031 	ldrh.w	r1, [r3, r1, lsl #3]
		if (!ipv4->unicast[i].is_used ||
    6a26:	2901      	cmp	r1, #1
    6a28:	d107      	bne.n	6a3a <net_if_ipv4_addr_mask_cmp+0x66>
		if ((ipv4->unicast[i].address.in_addr.s_addr &
    6a2a:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    6a2e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    6a32:	6849      	ldr	r1, [r1, #4]
    6a34:	4029      	ands	r1, r5
    6a36:	4281      	cmp	r1, r0
    6a38:	d0d9      	beq.n	69ee <net_if_ipv4_addr_mask_cmp+0x1a>
	for (i = 0; i < NET_IF_MAX_IPV4_ADDR; i++) {
    6a3a:	3201      	adds	r2, #1
    6a3c:	e7e1      	b.n	6a02 <net_if_ipv4_addr_mask_cmp+0x2e>
    6a3e:	bf00      	nop
    6a40:	200004b0 	.word	0x200004b0

00006a44 <net_if_ipv4_is_addr_bcast>:
{
    6a44:	b570      	push	{r4, r5, r6, lr}
    6a46:	4604      	mov	r4, r0
    6a48:	460d      	mov	r5, r1
	return z_impl_k_mutex_lock(mutex, timeout);
    6a4a:	f04f 32ff 	mov.w	r2, #4294967295
    6a4e:	f04f 33ff 	mov.w	r3, #4294967295
    6a52:	480d      	ldr	r0, [pc, #52]	; (6a88 <net_if_ipv4_is_addr_bcast+0x44>)
    6a54:	f00a fadc 	bl	11010 <z_impl_k_mutex_lock>
	if (iface) {
    6a58:	b964      	cbnz	r4, 6a74 <net_if_ipv4_is_addr_bcast+0x30>
	STRUCT_SECTION_FOREACH(net_if, iface) {
    6a5a:	4c0c      	ldr	r4, [pc, #48]	; (6a8c <net_if_ipv4_is_addr_bcast+0x48>)
	bool ret = false;
    6a5c:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(net_if, iface) {
    6a5e:	4b0c      	ldr	r3, [pc, #48]	; (6a90 <net_if_ipv4_is_addr_bcast+0x4c>)
    6a60:	429c      	cmp	r4, r3
    6a62:	d20c      	bcs.n	6a7e <net_if_ipv4_is_addr_bcast+0x3a>
		ret = ipv4_is_broadcast_address(iface, addr);
    6a64:	4629      	mov	r1, r5
    6a66:	4620      	mov	r0, r4
    6a68:	f012 fff7 	bl	19a5a <ipv4_is_broadcast_address>
		if (ret) {
    6a6c:	4606      	mov	r6, r0
    6a6e:	b930      	cbnz	r0, 6a7e <net_if_ipv4_is_addr_bcast+0x3a>
	STRUCT_SECTION_FOREACH(net_if, iface) {
    6a70:	3408      	adds	r4, #8
    6a72:	e7f4      	b.n	6a5e <net_if_ipv4_is_addr_bcast+0x1a>
		ret = ipv4_is_broadcast_address(iface, addr);
    6a74:	4629      	mov	r1, r5
    6a76:	4620      	mov	r0, r4
    6a78:	f012 ffef 	bl	19a5a <ipv4_is_broadcast_address>
    6a7c:	4606      	mov	r6, r0
	return z_impl_k_mutex_unlock(mutex);
    6a7e:	4802      	ldr	r0, [pc, #8]	; (6a88 <net_if_ipv4_is_addr_bcast+0x44>)
    6a80:	f00a fb4a 	bl	11118 <z_impl_k_mutex_unlock>
}
    6a84:	4630      	mov	r0, r6
    6a86:	bd70      	pop	{r4, r5, r6, pc}
    6a88:	200004b0 	.word	0x200004b0
    6a8c:	20000690 	.word	0x20000690
    6a90:	20000698 	.word	0x20000698

00006a94 <net_if_ipv4_select_src_iface>:
{
    6a94:	b538      	push	{r3, r4, r5, lr}
    6a96:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
    6a98:	f04f 32ff 	mov.w	r2, #4294967295
    6a9c:	f04f 33ff 	mov.w	r3, #4294967295
    6aa0:	480b      	ldr	r0, [pc, #44]	; (6ad0 <net_if_ipv4_select_src_iface+0x3c>)
    6aa2:	f00a fab5 	bl	11010 <z_impl_k_mutex_lock>
	STRUCT_SECTION_FOREACH(net_if, iface) {
    6aa6:	4c0b      	ldr	r4, [pc, #44]	; (6ad4 <net_if_ipv4_select_src_iface+0x40>)
    6aa8:	e000      	b.n	6aac <net_if_ipv4_select_src_iface+0x18>
    6aaa:	3408      	adds	r4, #8
    6aac:	4b0a      	ldr	r3, [pc, #40]	; (6ad8 <net_if_ipv4_select_src_iface+0x44>)
    6aae:	429c      	cmp	r4, r3
    6ab0:	d206      	bcs.n	6ac0 <net_if_ipv4_select_src_iface+0x2c>
		ret = net_if_ipv4_addr_mask_cmp(iface, dst);
    6ab2:	4629      	mov	r1, r5
    6ab4:	4620      	mov	r0, r4
    6ab6:	f7ff ff8d 	bl	69d4 <net_if_ipv4_addr_mask_cmp>
		if (ret) {
    6aba:	2800      	cmp	r0, #0
    6abc:	d0f5      	beq.n	6aaa <net_if_ipv4_select_src_iface+0x16>
    6abe:	e002      	b.n	6ac6 <net_if_ipv4_select_src_iface+0x32>
		selected = net_if_get_default();
    6ac0:	f7ff ff28 	bl	6914 <net_if_get_default>
    6ac4:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    6ac6:	4802      	ldr	r0, [pc, #8]	; (6ad0 <net_if_ipv4_select_src_iface+0x3c>)
    6ac8:	f00a fb26 	bl	11118 <z_impl_k_mutex_unlock>
}
    6acc:	4620      	mov	r0, r4
    6ace:	bd38      	pop	{r3, r4, r5, pc}
    6ad0:	200004b0 	.word	0x200004b0
    6ad4:	20000690 	.word	0x20000690
    6ad8:	20000698 	.word	0x20000698

00006adc <net_if_ipv4_select_src_addr>:
{
    6adc:	b5f0      	push	{r4, r5, r6, r7, lr}
    6ade:	b083      	sub	sp, #12
    6ae0:	4607      	mov	r7, r0
    6ae2:	460e      	mov	r6, r1
	uint8_t best_match = 0U;
    6ae4:	2300      	movs	r3, #0
    6ae6:	f88d 3007 	strb.w	r3, [sp, #7]
	return z_impl_k_mutex_lock(mutex, timeout);
    6aea:	f04f 32ff 	mov.w	r2, #4294967295
    6aee:	f04f 33ff 	mov.w	r3, #4294967295
    6af2:	4825      	ldr	r0, [pc, #148]	; (6b88 <net_if_ipv4_select_src_addr+0xac>)
    6af4:	f00a fa8c 	bl	11010 <z_impl_k_mutex_lock>
	if (!net_ipv4_is_ll_addr(dst)) {
    6af8:	4630      	mov	r0, r6
    6afa:	f7ff fd51 	bl	65a0 <net_ipv4_is_ll_addr>
    6afe:	bb08      	cbnz	r0, 6b44 <net_if_ipv4_select_src_addr+0x68>
		if (dst_iface) {
    6b00:	b1ef      	cbz	r7, 6b3e <net_if_ipv4_select_src_addr+0x62>
			src = net_if_ipv4_get_best_match(dst_iface, dst,
    6b02:	f10d 0207 	add.w	r2, sp, #7
    6b06:	4631      	mov	r1, r6
    6b08:	4638      	mov	r0, r7
    6b0a:	f012 fe1d 	bl	19748 <net_if_ipv4_get_best_match>
    6b0e:	4604      	mov	r4, r0
	if (!src) {
    6b10:	b374      	cbz	r4, 6b70 <net_if_ipv4_select_src_addr+0x94>
	return z_impl_k_mutex_unlock(mutex);
    6b12:	481d      	ldr	r0, [pc, #116]	; (6b88 <net_if_ipv4_select_src_addr+0xac>)
    6b14:	f00a fb00 	bl	11118 <z_impl_k_mutex_unlock>
}
    6b18:	4620      	mov	r0, r4
    6b1a:	b003      	add	sp, #12
    6b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			STRUCT_SECTION_FOREACH(net_if, iface) {
    6b1e:	3508      	adds	r5, #8
    6b20:	461c      	mov	r4, r3
    6b22:	4b1a      	ldr	r3, [pc, #104]	; (6b8c <net_if_ipv4_select_src_addr+0xb0>)
    6b24:	429d      	cmp	r5, r3
    6b26:	d2f3      	bcs.n	6b10 <net_if_ipv4_select_src_addr+0x34>
				addr = net_if_ipv4_get_best_match(iface, dst,
    6b28:	f10d 0207 	add.w	r2, sp, #7
    6b2c:	4631      	mov	r1, r6
    6b2e:	4628      	mov	r0, r5
    6b30:	f012 fe0a 	bl	19748 <net_if_ipv4_get_best_match>
				if (addr) {
    6b34:	4603      	mov	r3, r0
    6b36:	2800      	cmp	r0, #0
    6b38:	d1f1      	bne.n	6b1e <net_if_ipv4_select_src_addr+0x42>
    6b3a:	4623      	mov	r3, r4
    6b3c:	e7ef      	b.n	6b1e <net_if_ipv4_select_src_addr+0x42>
	const struct in_addr *src = NULL;
    6b3e:	463c      	mov	r4, r7
			STRUCT_SECTION_FOREACH(net_if, iface) {
    6b40:	4d13      	ldr	r5, [pc, #76]	; (6b90 <net_if_ipv4_select_src_addr+0xb4>)
    6b42:	e7ee      	b.n	6b22 <net_if_ipv4_select_src_addr+0x46>
		if (dst_iface) {
    6b44:	b12f      	cbz	r7, 6b52 <net_if_ipv4_select_src_addr+0x76>
			src = net_if_ipv4_get_ll(dst_iface, NET_ADDR_PREFERRED);
    6b46:	2101      	movs	r1, #1
    6b48:	4638      	mov	r0, r7
    6b4a:	f012 ff98 	bl	19a7e <net_if_ipv4_get_ll>
    6b4e:	4604      	mov	r4, r0
    6b50:	e7de      	b.n	6b10 <net_if_ipv4_select_src_addr+0x34>
			STRUCT_SECTION_FOREACH(net_if, iface) {
    6b52:	4d0f      	ldr	r5, [pc, #60]	; (6b90 <net_if_ipv4_select_src_addr+0xb4>)
    6b54:	4b0d      	ldr	r3, [pc, #52]	; (6b8c <net_if_ipv4_select_src_addr+0xb0>)
    6b56:	429d      	cmp	r5, r3
    6b58:	d208      	bcs.n	6b6c <net_if_ipv4_select_src_addr+0x90>
				addr = net_if_ipv4_get_ll(iface,
    6b5a:	2101      	movs	r1, #1
    6b5c:	4628      	mov	r0, r5
    6b5e:	f012 ff8e 	bl	19a7e <net_if_ipv4_get_ll>
				if (addr) {
    6b62:	4604      	mov	r4, r0
    6b64:	2800      	cmp	r0, #0
    6b66:	d1d3      	bne.n	6b10 <net_if_ipv4_select_src_addr+0x34>
			STRUCT_SECTION_FOREACH(net_if, iface) {
    6b68:	3508      	adds	r5, #8
    6b6a:	e7f3      	b.n	6b54 <net_if_ipv4_select_src_addr+0x78>
	const struct in_addr *src = NULL;
    6b6c:	463c      	mov	r4, r7
    6b6e:	e7cf      	b.n	6b10 <net_if_ipv4_select_src_addr+0x34>
		src = net_if_ipv4_get_global_addr(dst_iface,
    6b70:	2101      	movs	r1, #1
    6b72:	4638      	mov	r0, r7
    6b74:	f012 ff88 	bl	19a88 <net_if_ipv4_get_global_addr>
		if (!src) {
    6b78:	4604      	mov	r4, r0
    6b7a:	2800      	cmp	r0, #0
    6b7c:	d1c9      	bne.n	6b12 <net_if_ipv4_select_src_addr+0x36>
			src = net_ipv4_unspecified_address();
    6b7e:	f000 fc1b 	bl	73b8 <net_ipv4_unspecified_address>
    6b82:	4604      	mov	r4, r0
		goto out;
    6b84:	e7c5      	b.n	6b12 <net_if_ipv4_select_src_addr+0x36>
    6b86:	bf00      	nop
    6b88:	200004b0 	.word	0x200004b0
    6b8c:	20000698 	.word	0x20000698
    6b90:	20000690 	.word	0x20000690

00006b94 <net_if_ipv4_addr_lookup>:
{
    6b94:	b570      	push	{r4, r5, r6, lr}
    6b96:	4605      	mov	r5, r0
    6b98:	460e      	mov	r6, r1
	return z_impl_k_mutex_lock(mutex, timeout);
    6b9a:	f04f 32ff 	mov.w	r2, #4294967295
    6b9e:	f04f 33ff 	mov.w	r3, #4294967295
    6ba2:	4819      	ldr	r0, [pc, #100]	; (6c08 <net_if_ipv4_addr_lookup+0x74>)
    6ba4:	f00a fa34 	bl	11010 <z_impl_k_mutex_lock>
	STRUCT_SECTION_FOREACH(net_if, iface) {
    6ba8:	4b18      	ldr	r3, [pc, #96]	; (6c0c <net_if_ipv4_addr_lookup+0x78>)
    6baa:	e007      	b.n	6bbc <net_if_ipv4_addr_lookup+0x28>
				if (ret) {
    6bac:	b106      	cbz	r6, 6bb0 <net_if_ipv4_addr_lookup+0x1c>
					*ret = iface;
    6bae:	6033      	str	r3, [r6, #0]
				ifaddr = &ipv4->unicast[i];
    6bb0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    6bb4:	eb04 04c2 	add.w	r4, r4, r2, lsl #3
				goto out;
    6bb8:	e020      	b.n	6bfc <net_if_ipv4_addr_lookup+0x68>
	STRUCT_SECTION_FOREACH(net_if, iface) {
    6bba:	3308      	adds	r3, #8
    6bbc:	4a14      	ldr	r2, [pc, #80]	; (6c10 <net_if_ipv4_addr_lookup+0x7c>)
    6bbe:	4293      	cmp	r3, r2
    6bc0:	d21b      	bcs.n	6bfa <net_if_ipv4_addr_lookup+0x66>
		struct net_if_ipv4 *ipv4 = iface->config.ip.ipv4;
    6bc2:	685c      	ldr	r4, [r3, #4]
		if (!ipv4) {
    6bc4:	2c00      	cmp	r4, #0
    6bc6:	d0f8      	beq.n	6bba <net_if_ipv4_addr_lookup+0x26>
		for (i = 0; i < NET_IF_MAX_IPV4_ADDR; i++) {
    6bc8:	2200      	movs	r2, #0
    6bca:	2a00      	cmp	r2, #0
    6bcc:	dcf5      	bgt.n	6bba <net_if_ipv4_addr_lookup+0x26>
			if (!ipv4->unicast[i].is_used ||
    6bce:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
    6bd2:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
    6bd6:	f89c 1016 	ldrb.w	r1, [ip, #22]
    6bda:	f011 0f02 	tst.w	r1, #2
    6bde:	d00a      	beq.n	6bf6 <net_if_ipv4_addr_lookup+0x62>
			    ipv4->unicast[i].address.family != AF_INET) {
    6be0:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    6be4:	f834 1031 	ldrh.w	r1, [r4, r1, lsl #3]
			if (!ipv4->unicast[i].is_used ||
    6be8:	2901      	cmp	r1, #1
    6bea:	d104      	bne.n	6bf6 <net_if_ipv4_addr_lookup+0x62>
			if (UNALIGNED_GET(&addr->s4_addr32[0]) ==
    6bec:	6828      	ldr	r0, [r5, #0]
			    ipv4->unicast[i].address.in_addr.s_addr) {
    6bee:	f8dc 1004 	ldr.w	r1, [ip, #4]
			if (UNALIGNED_GET(&addr->s4_addr32[0]) ==
    6bf2:	4281      	cmp	r1, r0
    6bf4:	d0da      	beq.n	6bac <net_if_ipv4_addr_lookup+0x18>
		for (i = 0; i < NET_IF_MAX_IPV4_ADDR; i++) {
    6bf6:	3201      	adds	r2, #1
    6bf8:	e7e7      	b.n	6bca <net_if_ipv4_addr_lookup+0x36>
	struct net_if_addr *ifaddr = NULL;
    6bfa:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
    6bfc:	4802      	ldr	r0, [pc, #8]	; (6c08 <net_if_ipv4_addr_lookup+0x74>)
    6bfe:	f00a fa8b 	bl	11118 <z_impl_k_mutex_unlock>
}
    6c02:	4620      	mov	r0, r4
    6c04:	bd70      	pop	{r4, r5, r6, pc}
    6c06:	bf00      	nop
    6c08:	200004b0 	.word	0x200004b0
    6c0c:	20000690 	.word	0x20000690
    6c10:	20000698 	.word	0x20000698

00006c14 <net_if_ipv4_set_netmask>:
{
    6c14:	b538      	push	{r3, r4, r5, lr}
    6c16:	4604      	mov	r4, r0
    6c18:	460d      	mov	r5, r1
	return z_impl_k_mutex_lock(mutex, timeout);
    6c1a:	f04f 32ff 	mov.w	r2, #4294967295
    6c1e:	f04f 33ff 	mov.w	r3, #4294967295
    6c22:	4808      	ldr	r0, [pc, #32]	; (6c44 <net_if_ipv4_set_netmask+0x30>)
    6c24:	f00a f9f4 	bl	11010 <z_impl_k_mutex_lock>
	if (net_if_config_ipv4_get(iface, NULL) < 0) {
    6c28:	2100      	movs	r1, #0
    6c2a:	4620      	mov	r0, r4
    6c2c:	f7ff fe84 	bl	6938 <net_if_config_ipv4_get>
    6c30:	2800      	cmp	r0, #0
    6c32:	db03      	blt.n	6c3c <net_if_ipv4_set_netmask+0x28>
	if (!iface->config.ip.ipv4) {
    6c34:	6863      	ldr	r3, [r4, #4]
    6c36:	b10b      	cbz	r3, 6c3c <net_if_ipv4_set_netmask+0x28>
	net_ipaddr_copy(&iface->config.ip.ipv4->netmask, netmask);
    6c38:	682a      	ldr	r2, [r5, #0]
    6c3a:	635a      	str	r2, [r3, #52]	; 0x34
	return z_impl_k_mutex_unlock(mutex);
    6c3c:	4801      	ldr	r0, [pc, #4]	; (6c44 <net_if_ipv4_set_netmask+0x30>)
    6c3e:	f00a fa6b 	bl	11118 <z_impl_k_mutex_unlock>
}
    6c42:	bd38      	pop	{r3, r4, r5, pc}
    6c44:	200004b0 	.word	0x200004b0

00006c48 <net_if_ipv4_set_gw>:
{
    6c48:	b538      	push	{r3, r4, r5, lr}
    6c4a:	4604      	mov	r4, r0
    6c4c:	460d      	mov	r5, r1
	return z_impl_k_mutex_lock(mutex, timeout);
    6c4e:	f04f 32ff 	mov.w	r2, #4294967295
    6c52:	f04f 33ff 	mov.w	r3, #4294967295
    6c56:	4808      	ldr	r0, [pc, #32]	; (6c78 <net_if_ipv4_set_gw+0x30>)
    6c58:	f00a f9da 	bl	11010 <z_impl_k_mutex_lock>
	if (net_if_config_ipv4_get(iface, NULL) < 0) {
    6c5c:	2100      	movs	r1, #0
    6c5e:	4620      	mov	r0, r4
    6c60:	f7ff fe6a 	bl	6938 <net_if_config_ipv4_get>
    6c64:	2800      	cmp	r0, #0
    6c66:	db03      	blt.n	6c70 <net_if_ipv4_set_gw+0x28>
	if (!iface->config.ip.ipv4) {
    6c68:	6863      	ldr	r3, [r4, #4]
    6c6a:	b10b      	cbz	r3, 6c70 <net_if_ipv4_set_gw+0x28>
	net_ipaddr_copy(&iface->config.ip.ipv4->gw, gw);
    6c6c:	682a      	ldr	r2, [r5, #0]
    6c6e:	631a      	str	r2, [r3, #48]	; 0x30
	return z_impl_k_mutex_unlock(mutex);
    6c70:	4801      	ldr	r0, [pc, #4]	; (6c78 <net_if_ipv4_set_gw+0x30>)
    6c72:	f00a fa51 	bl	11118 <z_impl_k_mutex_unlock>
}
    6c76:	bd38      	pop	{r3, r4, r5, pc}
    6c78:	200004b0 	.word	0x200004b0

00006c7c <net_if_ipv4_addr_add>:
{
    6c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6c80:	b082      	sub	sp, #8
    6c82:	4604      	mov	r4, r0
    6c84:	460d      	mov	r5, r1
    6c86:	4617      	mov	r7, r2
    6c88:	4698      	mov	r8, r3
	return z_impl_k_mutex_lock(mutex, timeout);
    6c8a:	f04f 32ff 	mov.w	r2, #4294967295
    6c8e:	f04f 33ff 	mov.w	r3, #4294967295
    6c92:	4829      	ldr	r0, [pc, #164]	; (6d38 <net_if_ipv4_addr_add+0xbc>)
    6c94:	f00a f9bc 	bl	11010 <z_impl_k_mutex_lock>
	if (net_if_config_ipv4_get(iface, &ipv4) < 0) {
    6c98:	a901      	add	r1, sp, #4
    6c9a:	4620      	mov	r0, r4
    6c9c:	f7ff fe4c 	bl	6938 <net_if_config_ipv4_get>
    6ca0:	2800      	cmp	r0, #0
    6ca2:	db47      	blt.n	6d34 <net_if_ipv4_addr_add+0xb8>
	ifaddr = ipv4_addr_find(iface, addr);
    6ca4:	4629      	mov	r1, r5
    6ca6:	4620      	mov	r0, r4
    6ca8:	f012 fd75 	bl	19796 <ipv4_addr_find>
	if (ifaddr) {
    6cac:	4606      	mov	r6, r0
    6cae:	b130      	cbz	r0, 6cbe <net_if_ipv4_addr_add+0x42>
	return z_impl_k_mutex_unlock(mutex);
    6cb0:	4821      	ldr	r0, [pc, #132]	; (6d38 <net_if_ipv4_addr_add+0xbc>)
    6cb2:	f00a fa31 	bl	11118 <z_impl_k_mutex_unlock>
}
    6cb6:	4630      	mov	r0, r6
    6cb8:	b002      	add	sp, #8
    6cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0; i < NET_IF_MAX_IPV4_ADDR; i++) {
    6cbe:	2200      	movs	r2, #0
    6cc0:	2a00      	cmp	r2, #0
    6cc2:	dd1a      	ble.n	6cfa <net_if_ipv4_addr_add+0x7e>
	if (ifaddr) {
    6cc4:	2e00      	cmp	r6, #0
    6cc6:	d0f3      	beq.n	6cb0 <net_if_ipv4_addr_add+0x34>
		ifaddr->is_used = true;
    6cc8:	7db3      	ldrb	r3, [r6, #22]
    6cca:	f043 0302 	orr.w	r3, r3, #2
    6cce:	75b3      	strb	r3, [r6, #22]
		ifaddr->address.family = AF_INET;
    6cd0:	2301      	movs	r3, #1
    6cd2:	8033      	strh	r3, [r6, #0]
						addr->s4_addr32[0];
    6cd4:	682b      	ldr	r3, [r5, #0]
		ifaddr->address.in_addr.s4_addr32[0] =
    6cd6:	6073      	str	r3, [r6, #4]
		ifaddr->addr_type = addr_type;
    6cd8:	7537      	strb	r7, [r6, #20]
		if (vlifetime) {
    6cda:	f1b8 0f00 	cmp.w	r8, #0
    6cde:	d024      	beq.n	6d2a <net_if_ipv4_addr_add+0xae>
			ifaddr->is_infinite = false;
    6ce0:	7db3      	ldrb	r3, [r6, #22]
    6ce2:	f36f 0300 	bfc	r3, #0, #1
    6ce6:	75b3      	strb	r3, [r6, #22]
		ifaddr->addr_state = NET_ADDR_PREFERRED;
    6ce8:	2301      	movs	r3, #1
    6cea:	7573      	strb	r3, [r6, #21]
		net_mgmt_event_notify_with_info(NET_EVENT_IPV4_ADDR_ADD, iface,
    6cec:	2304      	movs	r3, #4
    6cee:	18f2      	adds	r2, r6, r3
    6cf0:	4621      	mov	r1, r4
    6cf2:	4812      	ldr	r0, [pc, #72]	; (6d3c <net_if_ipv4_addr_add+0xc0>)
    6cf4:	f001 f8a8 	bl	7e48 <net_mgmt_event_notify_with_info>
		goto out;
    6cf8:	e7da      	b.n	6cb0 <net_if_ipv4_addr_add+0x34>
		struct net_if_addr *cur = &ipv4->unicast[i];
    6cfa:	9b01      	ldr	r3, [sp, #4]
    6cfc:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    6d00:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
		if (addr_type == NET_ADDR_DHCP
    6d04:	2f02      	cmp	r7, #2
    6d06:	d009      	beq.n	6d1c <net_if_ipv4_addr_add+0xa0>
		if (!ipv4->unicast[i].is_used) {
    6d08:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    6d0c:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    6d10:	7d9b      	ldrb	r3, [r3, #22]
    6d12:	f013 0f02 	tst.w	r3, #2
    6d16:	d006      	beq.n	6d26 <net_if_ipv4_addr_add+0xaa>
	for (i = 0; i < NET_IF_MAX_IPV4_ADDR; i++) {
    6d18:	3201      	adds	r2, #1
    6d1a:	e7d1      	b.n	6cc0 <net_if_ipv4_addr_add+0x44>
		    && cur->addr_type == NET_ADDR_OVERRIDABLE) {
    6d1c:	7d08      	ldrb	r0, [r1, #20]
    6d1e:	2804      	cmp	r0, #4
    6d20:	d1f2      	bne.n	6d08 <net_if_ipv4_addr_add+0x8c>
			ifaddr = cur;
    6d22:	460e      	mov	r6, r1
    6d24:	e7ce      	b.n	6cc4 <net_if_ipv4_addr_add+0x48>
			ifaddr = cur;
    6d26:	460e      	mov	r6, r1
    6d28:	e7cc      	b.n	6cc4 <net_if_ipv4_addr_add+0x48>
			ifaddr->is_infinite = true;
    6d2a:	7db3      	ldrb	r3, [r6, #22]
    6d2c:	f043 0301 	orr.w	r3, r3, #1
    6d30:	75b3      	strb	r3, [r6, #22]
    6d32:	e7d9      	b.n	6ce8 <net_if_ipv4_addr_add+0x6c>
	struct net_if_addr *ifaddr = NULL;
    6d34:	2600      	movs	r6, #0
    6d36:	e7bb      	b.n	6cb0 <net_if_ipv4_addr_add+0x34>
    6d38:	200004b0 	.word	0x200004b0
    6d3c:	e0040001 	.word	0xe0040001

00006d40 <net_if_ipv4_addr_rm>:
{
    6d40:	b570      	push	{r4, r5, r6, lr}
    6d42:	4604      	mov	r4, r0
    6d44:	460e      	mov	r6, r1
	return z_impl_k_mutex_lock(mutex, timeout);
    6d46:	f04f 32ff 	mov.w	r2, #4294967295
    6d4a:	f04f 33ff 	mov.w	r3, #4294967295
    6d4e:	481a      	ldr	r0, [pc, #104]	; (6db8 <net_if_ipv4_addr_rm+0x78>)
    6d50:	f00a f95e 	bl	11010 <z_impl_k_mutex_lock>
	ipv4 = iface->config.ip.ipv4;
    6d54:	6863      	ldr	r3, [r4, #4]
	if (!ipv4) {
    6d56:	b92b      	cbnz	r3, 6d64 <net_if_ipv4_addr_rm+0x24>
	bool ret = false;
    6d58:	2500      	movs	r5, #0
	return z_impl_k_mutex_unlock(mutex);
    6d5a:	4817      	ldr	r0, [pc, #92]	; (6db8 <net_if_ipv4_addr_rm+0x78>)
    6d5c:	f00a f9dc 	bl	11118 <z_impl_k_mutex_unlock>
}
    6d60:	4628      	mov	r0, r5
    6d62:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < NET_IF_MAX_IPV4_ADDR; i++) {
    6d64:	2000      	movs	r0, #0
    6d66:	2800      	cmp	r0, #0
    6d68:	dd01      	ble.n	6d6e <net_if_ipv4_addr_rm+0x2e>
	bool ret = false;
    6d6a:	2500      	movs	r5, #0
out:
    6d6c:	e7f5      	b.n	6d5a <net_if_ipv4_addr_rm+0x1a>
		if (!ipv4->unicast[i].is_used) {
    6d6e:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    6d72:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    6d76:	7d92      	ldrb	r2, [r2, #22]
    6d78:	f3c2 0540 	ubfx	r5, r2, #1, #1
    6d7c:	f012 0f02 	tst.w	r2, #2
    6d80:	d009      	beq.n	6d96 <net_if_ipv4_addr_rm+0x56>
		if (!net_ipv4_addr_cmp(&ipv4->unicast[i].address.in_addr,
    6d82:	eb00 0140 	add.w	r1, r0, r0, lsl #1
    6d86:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    6d8a:	1d0a      	adds	r2, r1, #4
 *  @return True if the addresses are the same, false otherwise.
 */
static inline bool net_ipv4_addr_cmp(const struct in_addr *addr1,
				     const struct in_addr *addr2)
{
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
    6d8c:	6849      	ldr	r1, [r1, #4]
    6d8e:	f8d6 c000 	ldr.w	ip, [r6]
    6d92:	458c      	cmp	ip, r1
    6d94:	d001      	beq.n	6d9a <net_if_ipv4_addr_rm+0x5a>
	for (i = 0; i < NET_IF_MAX_IPV4_ADDR; i++) {
    6d96:	3001      	adds	r0, #1
    6d98:	e7e5      	b.n	6d66 <net_if_ipv4_addr_rm+0x26>
		ipv4->unicast[i].is_used = false;
    6d9a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    6d9e:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    6da2:	7d99      	ldrb	r1, [r3, #22]
    6da4:	f36f 0141 	bfc	r1, #1, #1
    6da8:	7599      	strb	r1, [r3, #22]
		net_mgmt_event_notify_with_info(
    6daa:	2304      	movs	r3, #4
    6dac:	4621      	mov	r1, r4
    6dae:	4803      	ldr	r0, [pc, #12]	; (6dbc <net_if_ipv4_addr_rm+0x7c>)
    6db0:	f001 f84a 	bl	7e48 <net_mgmt_event_notify_with_info>
		goto out;
    6db4:	e7d1      	b.n	6d5a <net_if_ipv4_addr_rm+0x1a>
    6db6:	bf00      	nop
    6db8:	200004b0 	.word	0x200004b0
    6dbc:	e0040002 	.word	0xe0040002

00006dc0 <net_if_ipv4_maddr_lookup>:
{
    6dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6dc2:	4606      	mov	r6, r0
    6dc4:	460d      	mov	r5, r1
	return z_impl_k_mutex_lock(mutex, timeout);
    6dc6:	f04f 32ff 	mov.w	r2, #4294967295
    6dca:	f04f 33ff 	mov.w	r3, #4294967295
    6dce:	4810      	ldr	r0, [pc, #64]	; (6e10 <net_if_ipv4_maddr_lookup+0x50>)
    6dd0:	f00a f91e 	bl	11010 <z_impl_k_mutex_lock>
	STRUCT_SECTION_FOREACH(net_if, iface) {
    6dd4:	4c0f      	ldr	r4, [pc, #60]	; (6e14 <net_if_ipv4_maddr_lookup+0x54>)
	struct net_if_mcast_addr *addr = NULL;
    6dd6:	2700      	movs	r7, #0
	STRUCT_SECTION_FOREACH(net_if, iface) {
    6dd8:	e007      	b.n	6dea <net_if_ipv4_maddr_lookup+0x2a>
		addr = ipv4_maddr_find(iface, true, maddr);
    6dda:	4632      	mov	r2, r6
    6ddc:	2101      	movs	r1, #1
    6dde:	4620      	mov	r0, r4
    6de0:	f012 fcf7 	bl	197d2 <ipv4_maddr_find>
		if (addr) {
    6de4:	4607      	mov	r7, r0
    6de6:	b958      	cbnz	r0, 6e00 <net_if_ipv4_maddr_lookup+0x40>
	STRUCT_SECTION_FOREACH(net_if, iface) {
    6de8:	3408      	adds	r4, #8
    6dea:	4b0b      	ldr	r3, [pc, #44]	; (6e18 <net_if_ipv4_maddr_lookup+0x58>)
    6dec:	429c      	cmp	r4, r3
    6dee:	d209      	bcs.n	6e04 <net_if_ipv4_maddr_lookup+0x44>
		if (ret && *ret && iface != *ret) {
    6df0:	2d00      	cmp	r5, #0
    6df2:	d0f2      	beq.n	6dda <net_if_ipv4_maddr_lookup+0x1a>
    6df4:	682b      	ldr	r3, [r5, #0]
    6df6:	2b00      	cmp	r3, #0
    6df8:	d0ef      	beq.n	6dda <net_if_ipv4_maddr_lookup+0x1a>
    6dfa:	42a3      	cmp	r3, r4
    6dfc:	d1f4      	bne.n	6de8 <net_if_ipv4_maddr_lookup+0x28>
    6dfe:	e7ec      	b.n	6dda <net_if_ipv4_maddr_lookup+0x1a>
			if (ret) {
    6e00:	b105      	cbz	r5, 6e04 <net_if_ipv4_maddr_lookup+0x44>
				*ret = iface;
    6e02:	602c      	str	r4, [r5, #0]
	return z_impl_k_mutex_unlock(mutex);
    6e04:	4802      	ldr	r0, [pc, #8]	; (6e10 <net_if_ipv4_maddr_lookup+0x50>)
    6e06:	f00a f987 	bl	11118 <z_impl_k_mutex_unlock>
}
    6e0a:	4638      	mov	r0, r7
    6e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6e0e:	bf00      	nop
    6e10:	200004b0 	.word	0x200004b0
    6e14:	20000690 	.word	0x20000690
    6e18:	20000698 	.word	0x20000698

00006e1c <net_if_call_link_cb>:
{
    6e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6e20:	4606      	mov	r6, r0
    6e22:	460f      	mov	r7, r1
    6e24:	4690      	mov	r8, r2
	return z_impl_k_mutex_lock(mutex, timeout);
    6e26:	f04f 32ff 	mov.w	r2, #4294967295
    6e2a:	f04f 33ff 	mov.w	r3, #4294967295
    6e2e:	4812      	ldr	r0, [pc, #72]	; (6e78 <net_if_call_link_cb+0x5c>)
    6e30:	f00a f8ee 	bl	11010 <z_impl_k_mutex_lock>
	return list->head;
    6e34:	4b11      	ldr	r3, [pc, #68]	; (6e7c <net_if_call_link_cb+0x60>)
    6e36:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
    6e38:	b123      	cbz	r3, 6e44 <net_if_call_link_cb+0x28>
	return node->next;
    6e3a:	681c      	ldr	r4, [r3, #0]
    6e3c:	b13c      	cbz	r4, 6e4e <net_if_call_link_cb+0x32>
Z_GENLIST_PEEK_NEXT(slist, snode)
    6e3e:	b933      	cbnz	r3, 6e4e <net_if_call_link_cb+0x32>
    6e40:	461c      	mov	r4, r3
    6e42:	e004      	b.n	6e4e <net_if_call_link_cb+0x32>
    6e44:	461c      	mov	r4, r3
    6e46:	e002      	b.n	6e4e <net_if_call_link_cb+0x32>
    6e48:	4625      	mov	r5, r4
    6e4a:	4623      	mov	r3, r4
    6e4c:	462c      	mov	r4, r5
    6e4e:	b16b      	cbz	r3, 6e6c <net_if_call_link_cb+0x50>
		link->cb(iface, lladdr, status);
    6e50:	685b      	ldr	r3, [r3, #4]
    6e52:	4642      	mov	r2, r8
    6e54:	4639      	mov	r1, r7
    6e56:	4630      	mov	r0, r6
    6e58:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
    6e5a:	2c00      	cmp	r4, #0
    6e5c:	d0f4      	beq.n	6e48 <net_if_call_link_cb+0x2c>
	return node->next;
    6e5e:	6825      	ldr	r5, [r4, #0]
    6e60:	2d00      	cmp	r5, #0
    6e62:	d0f2      	beq.n	6e4a <net_if_call_link_cb+0x2e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    6e64:	2c00      	cmp	r4, #0
    6e66:	d1f0      	bne.n	6e4a <net_if_call_link_cb+0x2e>
    6e68:	4625      	mov	r5, r4
    6e6a:	e7ee      	b.n	6e4a <net_if_call_link_cb+0x2e>
	return z_impl_k_mutex_unlock(mutex);
    6e6c:	4802      	ldr	r0, [pc, #8]	; (6e78 <net_if_call_link_cb+0x5c>)
    6e6e:	f00a f953 	bl	11118 <z_impl_k_mutex_unlock>
}
    6e72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6e76:	bf00      	nop
    6e78:	200004b0 	.word	0x200004b0
    6e7c:	200025b0 	.word	0x200025b0

00006e80 <net_if_tx>:
{
    6e80:	b5f0      	push	{r4, r5, r6, r7, lr}
    6e82:	b085      	sub	sp, #20
	struct net_linkaddr ll_dst = {
    6e84:	2300      	movs	r3, #0
    6e86:	9302      	str	r3, [sp, #8]
    6e88:	9303      	str	r3, [sp, #12]
	if (!pkt) {
    6e8a:	2900      	cmp	r1, #0
    6e8c:	d049      	beq.n	6f22 <net_if_tx+0xa2>
    6e8e:	4604      	mov	r4, r0
    6e90:	460d      	mov	r5, r1
	return list->head;
    6e92:	4b26      	ldr	r3, [pc, #152]	; (6f2c <net_if_tx+0xac>)
    6e94:	681b      	ldr	r3, [r3, #0]
	if (!sys_slist_is_empty(&link_callbacks)) {
    6e96:	b18b      	cbz	r3, 6ebc <net_if_tx+0x3c>
		if (net_linkaddr_set(&ll_dst_storage,
    6e98:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
    6e9c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    6e9e:	4668      	mov	r0, sp
    6ea0:	f012 fccf 	bl	19842 <net_linkaddr_set>
    6ea4:	b950      	cbnz	r0, 6ebc <net_if_tx+0x3c>
			ll_dst.addr = ll_dst_storage.addr;
    6ea6:	f10d 0302 	add.w	r3, sp, #2
    6eaa:	9302      	str	r3, [sp, #8]
			ll_dst.len = ll_dst_storage.len;
    6eac:	f89d 3001 	ldrb.w	r3, [sp, #1]
    6eb0:	f88d 300c 	strb.w	r3, [sp, #12]
			ll_dst.type = net_pkt_lladdr_dst(pkt)->type;
    6eb4:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    6eb8:	f88d 300d 	strb.w	r3, [sp, #13]
	return pkt->context;
    6ebc:	696f      	ldr	r7, [r5, #20]
	if (iface == NULL) {
    6ebe:	b1cc      	cbz	r4, 6ef4 <net_if_tx+0x74>
	return atomic_test_bit(iface->if_dev->flags, value);
    6ec0:	6820      	ldr	r0, [r4, #0]
    6ec2:	2109      	movs	r1, #9
    6ec4:	300c      	adds	r0, #12
    6ec6:	f012 fcd0 	bl	1986a <atomic_test_bit>
	if (net_if_flag_is_set(iface, NET_IF_LOWER_UP)) {
    6eca:	b1b0      	cbz	r0, 6efa <net_if_tx+0x7a>
	return pkt->family;
    6ecc:	f895 3037 	ldrb.w	r3, [r5, #55]	; 0x37
		if (IS_ENABLED(CONFIG_NET_TCP) &&
    6ed0:	095b      	lsrs	r3, r3, #5
    6ed2:	d005      	beq.n	6ee0 <net_if_tx+0x60>
	pkt->pkt_queued = send;
    6ed4:	f895 3037 	ldrb.w	r3, [r5, #55]	; 0x37
    6ed8:	f36f 0382 	bfc	r3, #2, #1
    6edc:	f885 3037 	strb.w	r3, [r5, #55]	; 0x37
	if (!iface || !iface->if_dev) {
    6ee0:	6823      	ldr	r3, [r4, #0]
    6ee2:	b103      	cbz	r3, 6ee6 <net_if_tx+0x66>
	return iface->if_dev->l2;
    6ee4:	685b      	ldr	r3, [r3, #4]
		status = net_if_l2(iface)->send(iface, pkt);
    6ee6:	685b      	ldr	r3, [r3, #4]
    6ee8:	4629      	mov	r1, r5
    6eea:	4620      	mov	r0, r4
    6eec:	4798      	blx	r3
	if (status < 0) {
    6eee:	1e06      	subs	r6, r0, #0
    6ef0:	da08      	bge.n	6f04 <net_if_tx+0x84>
    6ef2:	e004      	b.n	6efe <net_if_tx+0x7e>
		status = -ENETDOWN;
    6ef4:	f06f 0672 	mvn.w	r6, #114	; 0x72
    6ef8:	e001      	b.n	6efe <net_if_tx+0x7e>
    6efa:	f06f 0672 	mvn.w	r6, #114	; 0x72
		net_pkt_unref(pkt);
    6efe:	4628      	mov	r0, r5
    6f00:	f014 f8d6 	bl	1b0b0 <net_pkt_unref>
	if (context) {
    6f04:	b11f      	cbz	r7, 6f0e <net_if_tx+0x8e>
		net_context_send_cb(context, status);
    6f06:	4631      	mov	r1, r6
    6f08:	4638      	mov	r0, r7
    6f0a:	f012 fbdb 	bl	196c4 <net_context_send_cb>
	if (ll_dst.addr) {
    6f0e:	9b02      	ldr	r3, [sp, #8]
    6f10:	b14b      	cbz	r3, 6f26 <net_if_tx+0xa6>
		net_if_call_link_cb(iface, &ll_dst, status);
    6f12:	4632      	mov	r2, r6
    6f14:	a902      	add	r1, sp, #8
    6f16:	4620      	mov	r0, r4
    6f18:	f7ff ff80 	bl	6e1c <net_if_call_link_cb>
	return true;
    6f1c:	2001      	movs	r0, #1
}
    6f1e:	b005      	add	sp, #20
    6f20:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false;
    6f22:	2000      	movs	r0, #0
    6f24:	e7fb      	b.n	6f1e <net_if_tx+0x9e>
	return true;
    6f26:	2001      	movs	r0, #1
    6f28:	e7f9      	b.n	6f1e <net_if_tx+0x9e>
    6f2a:	bf00      	nop
    6f2c:	200025b0 	.word	0x200025b0

00006f30 <net_if_send_data>:
{
    6f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6f34:	4605      	mov	r5, r0
    6f36:	460c      	mov	r4, r1
	return pkt->context;
    6f38:	694e      	ldr	r6, [r1, #20]
	return &pkt->lladdr_src;
}

static inline struct net_linkaddr *net_pkt_lladdr_dst(struct net_pkt *pkt)
{
	return &pkt->lladdr_dst;
    6f3a:	f101 082c 	add.w	r8, r1, #44	; 0x2c
	return z_impl_k_mutex_lock(mutex, timeout);
    6f3e:	f04f 32ff 	mov.w	r2, #4294967295
    6f42:	f04f 33ff 	mov.w	r3, #4294967295
    6f46:	4824      	ldr	r0, [pc, #144]	; (6fd8 <net_if_send_data+0xa8>)
    6f48:	f00a f862 	bl	11010 <z_impl_k_mutex_lock>
	if (iface == NULL) {
    6f4c:	b12d      	cbz	r5, 6f5a <net_if_send_data+0x2a>
	return atomic_test_bit(iface->if_dev->flags, value);
    6f4e:	6828      	ldr	r0, [r5, #0]
    6f50:	2109      	movs	r1, #9
    6f52:	300c      	adds	r0, #12
    6f54:	f012 fc89 	bl	1986a <atomic_test_bit>
	if (!net_if_flag_is_set(iface, NET_IF_LOWER_UP) ||
    6f58:	b9a0      	cbnz	r0, 6f84 <net_if_send_data+0x54>
		status = -ENETDOWN;
    6f5a:	f06f 0772 	mvn.w	r7, #114	; 0x72
		if (context) {
    6f5e:	b11e      	cbz	r6, 6f68 <net_if_send_data+0x38>
			net_context_send_cb(context, status);
    6f60:	4639      	mov	r1, r7
    6f62:	4630      	mov	r0, r6
    6f64:	f012 fbae 	bl	196c4 <net_context_send_cb>
		if (dst->addr) {
    6f68:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    6f6a:	b393      	cbz	r3, 6fd2 <net_if_send_data+0xa2>
			net_if_call_link_cb(iface, dst, status);
    6f6c:	463a      	mov	r2, r7
    6f6e:	4641      	mov	r1, r8
    6f70:	4628      	mov	r0, r5
    6f72:	f7ff ff53 	bl	6e1c <net_if_call_link_cb>
    6f76:	2402      	movs	r4, #2
	return z_impl_k_mutex_unlock(mutex);
    6f78:	4817      	ldr	r0, [pc, #92]	; (6fd8 <net_if_send_data+0xa8>)
    6f7a:	f00a f8cd 	bl	11118 <z_impl_k_mutex_unlock>
}
    6f7e:	4620      	mov	r0, r4
    6f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6f84:	6828      	ldr	r0, [r5, #0]
    6f86:	2104      	movs	r1, #4
    6f88:	300c      	adds	r0, #12
    6f8a:	f012 fc6e 	bl	1986a <atomic_test_bit>
	if (!net_if_flag_is_set(iface, NET_IF_LOWER_UP) ||
    6f8e:	2800      	cmp	r0, #0
    6f90:	d1e3      	bne.n	6f5a <net_if_send_data+0x2a>
	if (!iface || !iface->if_dev) {
    6f92:	6828      	ldr	r0, [r5, #0]
    6f94:	b1b8      	cbz	r0, 6fc6 <net_if_send_data+0x96>
	return iface->if_dev->l2;
    6f96:	6843      	ldr	r3, [r0, #4]
	if (IS_ENABLED(CONFIG_NET_OFFLOAD) && !net_if_l2(iface)) {
    6f98:	b1c3      	cbz	r3, 6fcc <net_if_send_data+0x9c>
	return atomic_test_bit(iface->if_dev->flags, value);
    6f9a:	2101      	movs	r1, #1
    6f9c:	300c      	adds	r0, #12
    6f9e:	f012 fc64 	bl	1986a <atomic_test_bit>
	if (!net_if_flag_is_set(iface, NET_IF_POINTOPOINT) &&
    6fa2:	b908      	cbnz	r0, 6fa8 <net_if_send_data+0x78>
	    !net_pkt_lladdr_src(pkt)->addr) {
    6fa4:	6a63      	ldr	r3, [r4, #36]	; 0x24
	if (!net_if_flag_is_set(iface, NET_IF_POINTOPOINT) &&
    6fa6:	b12b      	cbz	r3, 6fb4 <net_if_send_data+0x84>
		net_if_queue_tx(iface, pkt);
    6fa8:	4621      	mov	r1, r4
    6faa:	4628      	mov	r0, r5
    6fac:	f012 fd7b 	bl	19aa6 <net_if_queue_tx>
    6fb0:	2400      	movs	r4, #0
    6fb2:	e7e1      	b.n	6f78 <net_if_send_data+0x48>
	return net_if_get_link_addr(pkt->iface);
    6fb4:	69a3      	ldr	r3, [r4, #24]
 *
 * @return a pointer to the network link address
 */
static inline struct net_linkaddr *net_if_get_link_addr(struct net_if *iface)
{
	return &iface->if_dev->link_addr;
    6fb6:	681a      	ldr	r2, [r3, #0]
		net_pkt_lladdr_src(pkt)->addr = net_pkt_lladdr_if(pkt)->addr;
    6fb8:	6912      	ldr	r2, [r2, #16]
    6fba:	6262      	str	r2, [r4, #36]	; 0x24
    6fbc:	681b      	ldr	r3, [r3, #0]
		net_pkt_lladdr_src(pkt)->len = net_pkt_lladdr_if(pkt)->len;
    6fbe:	7d1b      	ldrb	r3, [r3, #20]
    6fc0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (verdict == NET_DROP) {
    6fc4:	e7f0      	b.n	6fa8 <net_if_send_data+0x78>
	int status = -EIO;
    6fc6:	f06f 0704 	mvn.w	r7, #4
    6fca:	e7c8      	b.n	6f5e <net_if_send_data+0x2e>
    6fcc:	f06f 0704 	mvn.w	r7, #4
    6fd0:	e7c5      	b.n	6f5e <net_if_send_data+0x2e>
    6fd2:	2402      	movs	r4, #2
    6fd4:	e7d0      	b.n	6f78 <net_if_send_data+0x48>
    6fd6:	bf00      	nop
    6fd8:	200004b0 	.word	0x200004b0

00006fdc <net_if_get_by_iface>:
	if (!(iface >= _net_if_list_start && iface < _net_if_list_end)) {
    6fdc:	4b08      	ldr	r3, [pc, #32]	; (7000 <net_if_get_by_iface+0x24>)
    6fde:	4298      	cmp	r0, r3
    6fe0:	d307      	bcc.n	6ff2 <net_if_get_by_iface+0x16>
    6fe2:	4b08      	ldr	r3, [pc, #32]	; (7004 <net_if_get_by_iface+0x28>)
    6fe4:	4298      	cmp	r0, r3
    6fe6:	d207      	bcs.n	6ff8 <net_if_get_by_iface+0x1c>
	return (iface - _net_if_list_start) + 1;
    6fe8:	4b05      	ldr	r3, [pc, #20]	; (7000 <net_if_get_by_iface+0x24>)
    6fea:	1ac0      	subs	r0, r0, r3
    6fec:	10c0      	asrs	r0, r0, #3
    6fee:	3001      	adds	r0, #1
    6ff0:	4770      	bx	lr
		return -1;
    6ff2:	f04f 30ff 	mov.w	r0, #4294967295
    6ff6:	4770      	bx	lr
    6ff8:	f04f 30ff 	mov.w	r0, #4294967295
}
    6ffc:	4770      	bx	lr
    6ffe:	bf00      	nop
    7000:	20000690 	.word	0x20000690
    7004:	20000698 	.word	0x20000698

00007008 <net_if_up>:
		}
	}
}

int net_if_up(struct net_if *iface)
{
    7008:	b538      	push	{r3, r4, r5, lr}
    700a:	4604      	mov	r4, r0
	return z_impl_k_mutex_lock(mutex, timeout);
    700c:	f04f 32ff 	mov.w	r2, #4294967295
    7010:	f04f 33ff 	mov.w	r3, #4294967295
    7014:	481e      	ldr	r0, [pc, #120]	; (7090 <net_if_up+0x88>)
    7016:	f009 fffb 	bl	11010 <z_impl_k_mutex_lock>
	if (iface == NULL) {
    701a:	b12c      	cbz	r4, 7028 <net_if_up+0x20>
	return atomic_test_bit(iface->if_dev->flags, value);
    701c:	6820      	ldr	r0, [r4, #0]
    701e:	2100      	movs	r1, #0
    7020:	300c      	adds	r0, #12
    7022:	f012 fc22 	bl	1986a <atomic_test_bit>

	NET_DBG("iface %p", iface);

	k_mutex_lock(&lock, K_FOREVER);

	if (net_if_flag_is_set(iface, NET_IF_UP)) {
    7026:	bb78      	cbnz	r0, 7088 <net_if_up+0x80>
	return (iface->if_dev->offload != NULL);
    7028:	6823      	ldr	r3, [r4, #0]
    702a:	699a      	ldr	r2, [r3, #24]
		status = -EALREADY;
		goto out;
	}

	if (is_iface_offloaded(iface)) {
    702c:	b19a      	cbz	r2, 7056 <net_if_up+0x4e>
	int status = 0;
    702e:	2500      	movs	r5, #0
	atomic_set_bit(iface->if_dev->flags, value);
    7030:	6820      	ldr	r0, [r4, #0]
    7032:	2100      	movs	r1, #0
    7034:	300c      	adds	r0, #12
    7036:	f012 fc74 	bl	19922 <atomic_set_bit>
    703a:	2300      	movs	r3, #0
    703c:	461a      	mov	r2, r3
    703e:	4621      	mov	r1, r4
    7040:	4814      	ldr	r0, [pc, #80]	; (7094 <net_if_up+0x8c>)
    7042:	f000 ff01 	bl	7e48 <net_mgmt_event_notify_with_info>
	}

done:
	net_if_flag_set(iface, NET_IF_UP);
	net_mgmt_event_notify(NET_EVENT_IF_ADMIN_UP, iface);
	update_operational_state(iface);
    7046:	4620      	mov	r0, r4
    7048:	f012 fcc0 	bl	199cc <update_operational_state>
	return z_impl_k_mutex_unlock(mutex);
    704c:	4810      	ldr	r0, [pc, #64]	; (7090 <net_if_up+0x88>)
    704e:	f00a f863 	bl	11118 <z_impl_k_mutex_unlock>

out:
	k_mutex_unlock(&lock);

	return status;
}
    7052:	4628      	mov	r0, r5
    7054:	bd38      	pop	{r3, r4, r5, pc}
	if (!iface || !iface->if_dev) {
    7056:	b18b      	cbz	r3, 707c <net_if_up+0x74>
	return iface->if_dev->l2;
    7058:	685b      	ldr	r3, [r3, #4]
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
    705a:	b18b      	cbz	r3, 7080 <net_if_up+0x78>
	if (!iface || !iface->if_dev) {
    705c:	b154      	cbz	r4, 7074 <net_if_up+0x6c>
	return iface->if_dev->l2;
    705e:	461a      	mov	r2, r3
    7060:	6892      	ldr	r2, [r2, #8]
    7062:	b17a      	cbz	r2, 7084 <net_if_up+0x7c>
	if (!iface || !iface->if_dev) {
    7064:	b144      	cbz	r4, 7078 <net_if_up+0x70>
	status = net_if_l2(iface)->enable(iface, true);
    7066:	689b      	ldr	r3, [r3, #8]
    7068:	2101      	movs	r1, #1
    706a:	4620      	mov	r0, r4
    706c:	4798      	blx	r3
	if (status < 0) {
    706e:	1e05      	subs	r5, r0, #0
    7070:	dade      	bge.n	7030 <net_if_up+0x28>
    7072:	e7eb      	b.n	704c <net_if_up+0x44>
		return NULL;
    7074:	4622      	mov	r2, r4
    7076:	e7f3      	b.n	7060 <net_if_up+0x58>
    7078:	4623      	mov	r3, r4
    707a:	e7f4      	b.n	7066 <net_if_up+0x5e>
	int status = 0;
    707c:	2500      	movs	r5, #0
    707e:	e7d7      	b.n	7030 <net_if_up+0x28>
    7080:	2500      	movs	r5, #0
    7082:	e7d5      	b.n	7030 <net_if_up+0x28>
    7084:	2500      	movs	r5, #0
    7086:	e7d3      	b.n	7030 <net_if_up+0x28>
		status = -EALREADY;
    7088:	f06f 0577 	mvn.w	r5, #119	; 0x77
    708c:	e7de      	b.n	704c <net_if_up+0x44>
    708e:	bf00      	nop
    7090:	200004b0 	.word	0x200004b0
    7094:	d0010004 	.word	0xd0010004

00007098 <net_if_carrier_on>:

	return status;
}

void net_if_carrier_on(struct net_if *iface)
{
    7098:	b510      	push	{r4, lr}
    709a:	4604      	mov	r4, r0
	return z_impl_k_mutex_lock(mutex, timeout);
    709c:	f04f 32ff 	mov.w	r2, #4294967295
    70a0:	f04f 33ff 	mov.w	r3, #4294967295
    70a4:	4808      	ldr	r0, [pc, #32]	; (70c8 <net_if_carrier_on+0x30>)
    70a6:	f009 ffb3 	bl	11010 <z_impl_k_mutex_lock>
	return atomic_test_and_set_bit(iface->if_dev->flags, value);
    70aa:	6820      	ldr	r0, [r4, #0]
    70ac:	2109      	movs	r1, #9
    70ae:	300c      	adds	r0, #12
    70b0:	f012 fc4a 	bl	19948 <atomic_test_and_set_bit>
	NET_ASSERT(iface);

	k_mutex_lock(&lock, K_FOREVER);

	if (!net_if_flag_test_and_set(iface, NET_IF_LOWER_UP)) {
    70b4:	b118      	cbz	r0, 70be <net_if_carrier_on+0x26>
	return z_impl_k_mutex_unlock(mutex);
    70b6:	4804      	ldr	r0, [pc, #16]	; (70c8 <net_if_carrier_on+0x30>)
    70b8:	f00a f82e 	bl	11118 <z_impl_k_mutex_unlock>
		update_operational_state(iface);
	}

	k_mutex_unlock(&lock);
}
    70bc:	bd10      	pop	{r4, pc}
		update_operational_state(iface);
    70be:	4620      	mov	r0, r4
    70c0:	f012 fc84 	bl	199cc <update_operational_state>
    70c4:	e7f7      	b.n	70b6 <net_if_carrier_on+0x1e>
    70c6:	bf00      	nop
    70c8:	200004b0 	.word	0x200004b0

000070cc <net_if_carrier_off>:

void net_if_carrier_off(struct net_if *iface)
{
    70cc:	b510      	push	{r4, lr}
    70ce:	4604      	mov	r4, r0
	return z_impl_k_mutex_lock(mutex, timeout);
    70d0:	f04f 32ff 	mov.w	r2, #4294967295
    70d4:	f04f 33ff 	mov.w	r3, #4294967295
    70d8:	4808      	ldr	r0, [pc, #32]	; (70fc <net_if_carrier_off+0x30>)
    70da:	f009 ff99 	bl	11010 <z_impl_k_mutex_lock>
	return atomic_test_and_clear_bit(iface->if_dev->flags, value);
    70de:	6820      	ldr	r0, [r4, #0]
    70e0:	2109      	movs	r1, #9
    70e2:	300c      	adds	r0, #12
    70e4:	f012 fc9d 	bl	19a22 <atomic_test_and_clear_bit>
	NET_ASSERT(iface);

	k_mutex_lock(&lock, K_FOREVER);

	if (net_if_flag_test_and_clear(iface, NET_IF_LOWER_UP)) {
    70e8:	b918      	cbnz	r0, 70f2 <net_if_carrier_off+0x26>
	return z_impl_k_mutex_unlock(mutex);
    70ea:	4804      	ldr	r0, [pc, #16]	; (70fc <net_if_carrier_off+0x30>)
    70ec:	f00a f814 	bl	11118 <z_impl_k_mutex_unlock>
		update_operational_state(iface);
	}

	k_mutex_unlock(&lock);
}
    70f0:	bd10      	pop	{r4, pc}
		update_operational_state(iface);
    70f2:	4620      	mov	r0, r4
    70f4:	f012 fc6a 	bl	199cc <update_operational_state>
    70f8:	e7f7      	b.n	70ea <net_if_carrier_off+0x1e>
    70fa:	bf00      	nop
    70fc:	200004b0 	.word	0x200004b0

00007100 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
    7100:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
    7102:	f04f 32ff 	mov.w	r2, #4294967295
    7106:	f04f 33ff 	mov.w	r3, #4294967295
    710a:	480d      	ldr	r0, [pc, #52]	; (7140 <net_if_init+0x40>)
    710c:	f009 ff80 	bl	11010 <z_impl_k_mutex_lock>

	NET_DBG("");

	k_mutex_lock(&lock, K_FOREVER);

	net_tc_tx_init();
    7110:	f014 fb36 	bl	1b780 <net_tc_tx_init>

	STRUCT_SECTION_FOREACH(net_if, iface) {
    7114:	4c0b      	ldr	r4, [pc, #44]	; (7144 <net_if_init+0x44>)
	int if_count = 0;
    7116:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(net_if, iface) {
    7118:	e004      	b.n	7124 <net_if_init+0x24>
		init_iface(iface);
    711a:	4620      	mov	r0, r4
    711c:	f012 fc2d 	bl	1997a <init_iface>
		if_count++;
    7120:	3501      	adds	r5, #1
	STRUCT_SECTION_FOREACH(net_if, iface) {
    7122:	3408      	adds	r4, #8
    7124:	4b08      	ldr	r3, [pc, #32]	; (7148 <net_if_init+0x48>)
    7126:	429c      	cmp	r4, r3
    7128:	d3f7      	bcc.n	711a <net_if_init+0x1a>
	}

	if (if_count == 0) {
    712a:	b91d      	cbnz	r5, 7134 <net_if_init+0x34>
	return z_impl_k_mutex_unlock(mutex);
    712c:	4804      	ldr	r0, [pc, #16]	; (7140 <net_if_init+0x40>)
    712e:	f009 fff3 	bl	11118 <z_impl_k_mutex_unlock>
	}
#endif

out:
	k_mutex_unlock(&lock);
}
    7132:	bd38      	pop	{r3, r4, r5, pc}
	iface_ipv4_init(if_count);
    7134:	4628      	mov	r0, r5
    7136:	f7ff fa61 	bl	65fc <iface_ipv4_init>
	iface_router_init();
    713a:	f7ff fb99 	bl	6870 <iface_router_init>
    713e:	e7f5      	b.n	712c <net_if_init+0x2c>
    7140:	200004b0 	.word	0x200004b0
    7144:	20000690 	.word	0x20000690
    7148:	20000698 	.word	0x20000698

0000714c <net_if_post_init>:

void net_if_post_init(void)
{
    714c:	b510      	push	{r4, lr}
	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	STRUCT_SECTION_FOREACH(net_if, iface) {
    714e:	4c0a      	ldr	r4, [pc, #40]	; (7178 <net_if_post_init+0x2c>)
    7150:	e003      	b.n	715a <net_if_post_init+0xe>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
    7152:	4620      	mov	r0, r4
    7154:	f7ff ff58 	bl	7008 <net_if_up>
	STRUCT_SECTION_FOREACH(net_if, iface) {
    7158:	3408      	adds	r4, #8
    715a:	4b08      	ldr	r3, [pc, #32]	; (717c <net_if_post_init+0x30>)
    715c:	429c      	cmp	r4, r3
    715e:	d209      	bcs.n	7174 <net_if_post_init+0x28>
	if (iface == NULL) {
    7160:	2c00      	cmp	r4, #0
    7162:	d0f6      	beq.n	7152 <net_if_post_init+0x6>
	return atomic_test_bit(iface->if_dev->flags, value);
    7164:	6820      	ldr	r0, [r4, #0]
    7166:	2103      	movs	r1, #3
    7168:	300c      	adds	r0, #12
    716a:	f012 fb7e 	bl	1986a <atomic_test_bit>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
    716e:	2800      	cmp	r0, #0
    7170:	d1f2      	bne.n	7158 <net_if_post_init+0xc>
    7172:	e7ee      	b.n	7152 <net_if_post_init+0x6>
		}
	}
}
    7174:	bd10      	pop	{r4, pc}
    7176:	bf00      	nop
    7178:	20000690 	.word	0x20000690
    717c:	20000698 	.word	0x20000698

00007180 <net_value_to_udec>:
	*(ptr - 1) = '\0';
	return buf;
}

static int net_value_to_udec(char *buf, uint32_t value, int precision)
{
    7180:	b510      	push	{r4, lr}
    7182:	4686      	mov	lr, r0
	int i;
	int temp;
	char *start = buf;

	divisor = 1000000000U;
	if (precision < 0) {
    7184:	1e14      	subs	r4, r2, #0
    7186:	db04      	blt.n	7192 <net_value_to_udec+0x12>
	for (i = 9; i >= 0; i--, divisor /= 10U) {
		temp = value / divisor;
		value = value % divisor;
		if ((precision > i) || (temp != 0)) {
			precision = i;
			*buf++ = (char) (temp + '0');
    7188:	4670      	mov	r0, lr
    718a:	f04f 0c09 	mov.w	ip, #9
    718e:	4b0f      	ldr	r3, [pc, #60]	; (71cc <net_value_to_udec+0x4c>)
    7190:	e00b      	b.n	71aa <net_value_to_udec+0x2a>
		precision = 1;
    7192:	2401      	movs	r4, #1
    7194:	e7f8      	b.n	7188 <net_value_to_udec+0x8>
			*buf++ = (char) (temp + '0');
    7196:	3230      	adds	r2, #48	; 0x30
    7198:	f800 2b01 	strb.w	r2, [r0], #1
			precision = i;
    719c:	4664      	mov	r4, ip
	for (i = 9; i >= 0; i--, divisor /= 10U) {
    719e:	f10c 3cff 	add.w	ip, ip, #4294967295
    71a2:	4a0b      	ldr	r2, [pc, #44]	; (71d0 <net_value_to_udec+0x50>)
    71a4:	fba2 2303 	umull	r2, r3, r2, r3
    71a8:	08db      	lsrs	r3, r3, #3
    71aa:	f1bc 0f00 	cmp.w	ip, #0
    71ae:	db08      	blt.n	71c2 <net_value_to_udec+0x42>
		temp = value / divisor;
    71b0:	fbb1 f2f3 	udiv	r2, r1, r3
		value = value % divisor;
    71b4:	fb03 1112 	mls	r1, r3, r2, r1
		if ((precision > i) || (temp != 0)) {
    71b8:	4564      	cmp	r4, ip
    71ba:	dcec      	bgt.n	7196 <net_value_to_udec+0x16>
    71bc:	2a00      	cmp	r2, #0
    71be:	d0ee      	beq.n	719e <net_value_to_udec+0x1e>
    71c0:	e7e9      	b.n	7196 <net_value_to_udec+0x16>
		}
	}
	*buf = 0;
    71c2:	2300      	movs	r3, #0
    71c4:	7003      	strb	r3, [r0, #0]

	return buf - start;
}
    71c6:	eba0 000e 	sub.w	r0, r0, lr
    71ca:	bd10      	pop	{r4, pc}
    71cc:	3b9aca00 	.word	0x3b9aca00
    71d0:	cccccccd 	.word	0xcccccccd

000071d4 <z_impl_net_addr_pton>:
#include <syscalls/net_addr_ntop_mrsh.c>
#endif /* CONFIG_USERSPACE */

int z_impl_net_addr_pton(sa_family_t family, const char *src,
			 void *dst)
{
    71d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    71d8:	b082      	sub	sp, #8
    71da:	460c      	mov	r4, r1
    71dc:	4615      	mov	r5, r2
	if (family == AF_INET) {
    71de:	2801      	cmp	r0, #1
    71e0:	d010      	beq.n	7204 <z_impl_net_addr_pton+0x30>
			addr->s4_addr[i] = strtol(src, &endptr, 10);

			src = ++endptr;
		}

	} else if (family == AF_INET6) {
    71e2:	2802      	cmp	r0, #2
    71e4:	f040 80ca 	bne.w	737c <z_impl_net_addr_pton+0x1a8>
		/* If the string contains a '.', it means it's of the form
		 * X:X:X:X:X:X:x.x.x.x, and contains only 6 16-bit pieces
		 */
		int expected_groups = strchr(src, '.') ? 6 : 8;
    71e8:	212e      	movs	r1, #46	; 0x2e
    71ea:	4620      	mov	r0, r4
    71ec:	f018 ff60 	bl	200b0 <strchr>
    71f0:	b360      	cbz	r0, 724c <z_impl_net_addr_pton+0x78>
    71f2:	2606      	movs	r6, #6
		struct in6_addr *addr = (struct in6_addr *)dst;
		int i, len;

		if (*src == ':') {
    71f4:	7823      	ldrb	r3, [r4, #0]
    71f6:	2b3a      	cmp	r3, #58	; 0x3a
    71f8:	d02a      	beq.n	7250 <z_impl_net_addr_pton+0x7c>
			/* Ignore a leading colon, makes parsing neater */
			src++;
		}

		len = strlen(src);
    71fa:	4620      	mov	r0, r4
    71fc:	f7f9 fdd8 	bl	db0 <strlen>
		for (i = 0; i < len; i++) {
    7200:	2200      	movs	r2, #0
    7202:	e02d      	b.n	7260 <z_impl_net_addr_pton+0x8c>
		len = strlen(src);
    7204:	4608      	mov	r0, r1
    7206:	f7f9 fdd3 	bl	db0 <strlen>
		for (i = 0; i < len; i++) {
    720a:	2300      	movs	r3, #0
    720c:	e000      	b.n	7210 <z_impl_net_addr_pton+0x3c>
    720e:	3301      	adds	r3, #1
    7210:	4283      	cmp	r3, r0
    7212:	d20a      	bcs.n	722a <z_impl_net_addr_pton+0x56>
			if (!(src[i] >= '0' && src[i] <= '9') &&
    7214:	5ce1      	ldrb	r1, [r4, r3]
    7216:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
    721a:	b2d2      	uxtb	r2, r2
    721c:	2a09      	cmp	r2, #9
    721e:	d9f6      	bls.n	720e <z_impl_net_addr_pton+0x3a>
    7220:	292e      	cmp	r1, #46	; 0x2e
    7222:	d0f4      	beq.n	720e <z_impl_net_addr_pton+0x3a>
				return -EINVAL;
    7224:	f06f 0015 	mvn.w	r0, #21
    7228:	e031      	b.n	728e <z_impl_net_addr_pton+0xba>
    722a:	2600      	movs	r6, #0
    722c:	602e      	str	r6, [r5, #0]
    722e:	e009      	b.n	7244 <z_impl_net_addr_pton+0x70>
			addr->s4_addr[i] = strtol(src, &endptr, 10);
    7230:	220a      	movs	r2, #10
    7232:	a901      	add	r1, sp, #4
    7234:	4620      	mov	r0, r4
    7236:	f00b fd89 	bl	12d4c <strtol>
    723a:	55a8      	strb	r0, [r5, r6]
			src = ++endptr;
    723c:	9c01      	ldr	r4, [sp, #4]
    723e:	3401      	adds	r4, #1
    7240:	9401      	str	r4, [sp, #4]
		for (i = 0; i < sizeof(struct in_addr); i++) {
    7242:	3601      	adds	r6, #1
    7244:	2e03      	cmp	r6, #3
    7246:	d9f3      	bls.n	7230 <z_impl_net_addr_pton+0x5c>
		}
	} else {
		return -EINVAL;
	}

	return 0;
    7248:	2000      	movs	r0, #0
    724a:	e020      	b.n	728e <z_impl_net_addr_pton+0xba>
		int expected_groups = strchr(src, '.') ? 6 : 8;
    724c:	2608      	movs	r6, #8
    724e:	e7d1      	b.n	71f4 <z_impl_net_addr_pton+0x20>
			src++;
    7250:	3401      	adds	r4, #1
    7252:	e7d2      	b.n	71fa <z_impl_net_addr_pton+0x26>
    7254:	3b61      	subs	r3, #97	; 0x61
    7256:	b2db      	uxtb	r3, r3
    7258:	2b05      	cmp	r3, #5
    725a:	f200 8095 	bhi.w	7388 <z_impl_net_addr_pton+0x1b4>
		for (i = 0; i < len; i++) {
    725e:	3201      	adds	r2, #1
    7260:	4282      	cmp	r2, r0
    7262:	da17      	bge.n	7294 <z_impl_net_addr_pton+0xc0>
			if (!(src[i] >= '0' && src[i] <= '9') &&
    7264:	5ca3      	ldrb	r3, [r4, r2]
    7266:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    726a:	b2c9      	uxtb	r1, r1
    726c:	2909      	cmp	r1, #9
    726e:	d9f6      	bls.n	725e <z_impl_net_addr_pton+0x8a>
    7270:	2b46      	cmp	r3, #70	; 0x46
    7272:	d8ef      	bhi.n	7254 <z_impl_net_addr_pton+0x80>
    7274:	2b2e      	cmp	r3, #46	; 0x2e
    7276:	f0c0 8084 	bcc.w	7382 <z_impl_net_addr_pton+0x1ae>
    727a:	3b2e      	subs	r3, #46	; 0x2e
    727c:	b2db      	uxtb	r3, r3
    727e:	494d      	ldr	r1, [pc, #308]	; (73b4 <z_impl_net_addr_pton+0x1e0>)
    7280:	fa21 f303 	lsr.w	r3, r1, r3
    7284:	f013 0f01 	tst.w	r3, #1
    7288:	d1e9      	bne.n	725e <z_impl_net_addr_pton+0x8a>
    728a:	f06f 0015 	mvn.w	r0, #21
}
    728e:	b002      	add	sp, #8
    7290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for (i = 0; i < expected_groups; i++) {
    7294:	2700      	movs	r7, #0
    7296:	e003      	b.n	72a0 <z_impl_net_addr_pton+0xcc>
					if (i < expected_groups - 1) {
    7298:	1e73      	subs	r3, r6, #1
    729a:	42bb      	cmp	r3, r7
    729c:	dc7d      	bgt.n	739a <z_impl_net_addr_pton+0x1c6>
		for (i = 0; i < expected_groups; i++) {
    729e:	3701      	adds	r7, #1
    72a0:	42b7      	cmp	r7, r6
    72a2:	da39      	bge.n	7318 <z_impl_net_addr_pton+0x144>
			if (!src || *src == '\0') {
    72a4:	2c00      	cmp	r4, #0
    72a6:	d072      	beq.n	738e <z_impl_net_addr_pton+0x1ba>
    72a8:	7823      	ldrb	r3, [r4, #0]
    72aa:	2b00      	cmp	r3, #0
    72ac:	d072      	beq.n	7394 <z_impl_net_addr_pton+0x1c0>
			if (*src != ':') {
    72ae:	2b3a      	cmp	r3, #58	; 0x3a
    72b0:	d018      	beq.n	72e4 <z_impl_net_addr_pton+0x110>
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
    72b2:	2210      	movs	r2, #16
    72b4:	2100      	movs	r1, #0
    72b6:	4620      	mov	r0, r4
    72b8:	f00b fd48 	bl	12d4c <strtol>
    72bc:	f3c0 2807 	ubfx	r8, r0, #8, #8
    72c0:	2210      	movs	r2, #16
    72c2:	2100      	movs	r1, #0
    72c4:	4620      	mov	r0, r4
    72c6:	f00b fd41 	bl	12d4c <strtol>
    72ca:	ea48 2800 	orr.w	r8, r8, r0, lsl #8
    72ce:	f825 8017 	strh.w	r8, [r5, r7, lsl #1]
				src = strchr(src, ':');
    72d2:	213a      	movs	r1, #58	; 0x3a
    72d4:	4620      	mov	r0, r4
    72d6:	f018 feeb 	bl	200b0 <strchr>
				if (src) {
    72da:	4604      	mov	r4, r0
    72dc:	2800      	cmp	r0, #0
    72de:	d0db      	beq.n	7298 <z_impl_net_addr_pton+0xc4>
					src++;
    72e0:	3401      	adds	r4, #1
    72e2:	e7dc      	b.n	729e <z_impl_net_addr_pton+0xca>
			for (; i < expected_groups; i++) {
    72e4:	42b7      	cmp	r7, r6
    72e6:	da07      	bge.n	72f8 <z_impl_net_addr_pton+0x124>
				UNALIGNED_PUT(0, &addr->s6_addr16[i]);
    72e8:	eb05 0247 	add.w	r2, r5, r7, lsl #1
    72ec:	2300      	movs	r3, #0
    72ee:	f805 3017 	strb.w	r3, [r5, r7, lsl #1]
    72f2:	7053      	strb	r3, [r2, #1]
			for (; i < expected_groups; i++) {
    72f4:	3701      	adds	r7, #1
    72f6:	e7f5      	b.n	72e4 <z_impl_net_addr_pton+0x110>
			tmp = strrchr(src, ':');
    72f8:	213a      	movs	r1, #58	; 0x3a
    72fa:	4620      	mov	r0, r4
    72fc:	f018 ff4c 	bl	20198 <strrchr>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
    7300:	4284      	cmp	r4, r0
    7302:	d003      	beq.n	730c <z_impl_net_addr_pton+0x138>
			if (expected_groups == 6) {
    7304:	2e06      	cmp	r6, #6
    7306:	d00b      	beq.n	7320 <z_impl_net_addr_pton+0x14c>
			i = expected_groups - 1;
    7308:	1e77      	subs	r7, r6, #1
    730a:	e011      	b.n	7330 <z_impl_net_addr_pton+0x15c>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
    730c:	2e06      	cmp	r6, #6
    730e:	d002      	beq.n	7316 <z_impl_net_addr_pton+0x142>
    7310:	7863      	ldrb	r3, [r4, #1]
    7312:	2b00      	cmp	r3, #0
    7314:	d1f6      	bne.n	7304 <z_impl_net_addr_pton+0x130>
				src++;
    7316:	3401      	adds	r4, #1
		if (expected_groups == 6) {
    7318:	2e06      	cmp	r6, #6
    731a:	d015      	beq.n	7348 <z_impl_net_addr_pton+0x174>
	return 0;
    731c:	2000      	movs	r0, #0
    731e:	e7b6      	b.n	728e <z_impl_net_addr_pton+0xba>
				tmp--;
    7320:	3801      	subs	r0, #1
    7322:	e7f1      	b.n	7308 <z_impl_net_addr_pton+0x134>
				if (i < 0) {
    7324:	2f00      	cmp	r7, #0
    7326:	db3b      	blt.n	73a0 <z_impl_net_addr_pton+0x1cc>
			} while (tmp-- != src);
    7328:	1e43      	subs	r3, r0, #1
    732a:	4284      	cmp	r4, r0
    732c:	d005      	beq.n	733a <z_impl_net_addr_pton+0x166>
    732e:	4618      	mov	r0, r3
				if (*tmp == ':') {
    7330:	7803      	ldrb	r3, [r0, #0]
    7332:	2b3a      	cmp	r3, #58	; 0x3a
    7334:	d1f6      	bne.n	7324 <z_impl_net_addr_pton+0x150>
					i--;
    7336:	3f01      	subs	r7, #1
    7338:	e7f4      	b.n	7324 <z_impl_net_addr_pton+0x150>
			src++;
    733a:	3401      	adds	r4, #1
    733c:	e7af      	b.n	729e <z_impl_net_addr_pton+0xca>
					if (i < 3) {
    733e:	2e02      	cmp	r6, #2
    7340:	dc18      	bgt.n	7374 <z_impl_net_addr_pton+0x1a0>
						return -EINVAL;
    7342:	f06f 0015 	mvn.w	r0, #21
    7346:	e7a2      	b.n	728e <z_impl_net_addr_pton+0xba>
			for (i = 0; i < 4; i++) {
    7348:	2600      	movs	r6, #0
    734a:	2e03      	cmp	r6, #3
    734c:	dc14      	bgt.n	7378 <z_impl_net_addr_pton+0x1a4>
				if (!src || !*src) {
    734e:	b354      	cbz	r4, 73a6 <z_impl_net_addr_pton+0x1d2>
    7350:	7823      	ldrb	r3, [r4, #0]
    7352:	b35b      	cbz	r3, 73ac <z_impl_net_addr_pton+0x1d8>
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
    7354:	220a      	movs	r2, #10
    7356:	2100      	movs	r1, #0
    7358:	4620      	mov	r0, r4
    735a:	f00b fcf7 	bl	12d4c <strtol>
    735e:	f106 030c 	add.w	r3, r6, #12
    7362:	54e8      	strb	r0, [r5, r3]
				src = strchr(src, '.');
    7364:	212e      	movs	r1, #46	; 0x2e
    7366:	4620      	mov	r0, r4
    7368:	f018 fea2 	bl	200b0 <strchr>
				if (src) {
    736c:	4604      	mov	r4, r0
    736e:	2800      	cmp	r0, #0
    7370:	d0e5      	beq.n	733e <z_impl_net_addr_pton+0x16a>
					src++;
    7372:	3401      	adds	r4, #1
			for (i = 0; i < 4; i++) {
    7374:	3601      	adds	r6, #1
    7376:	e7e8      	b.n	734a <z_impl_net_addr_pton+0x176>
	return 0;
    7378:	2000      	movs	r0, #0
    737a:	e788      	b.n	728e <z_impl_net_addr_pton+0xba>
		return -EINVAL;
    737c:	f06f 0015 	mvn.w	r0, #21
    7380:	e785      	b.n	728e <z_impl_net_addr_pton+0xba>
			if (!(src[i] >= '0' && src[i] <= '9') &&
    7382:	f06f 0015 	mvn.w	r0, #21
    7386:	e782      	b.n	728e <z_impl_net_addr_pton+0xba>
    7388:	f06f 0015 	mvn.w	r0, #21
    738c:	e77f      	b.n	728e <z_impl_net_addr_pton+0xba>
				return -EINVAL;
    738e:	f06f 0015 	mvn.w	r0, #21
    7392:	e77c      	b.n	728e <z_impl_net_addr_pton+0xba>
    7394:	f06f 0015 	mvn.w	r0, #21
    7398:	e779      	b.n	728e <z_impl_net_addr_pton+0xba>
						return -EINVAL;
    739a:	f06f 0015 	mvn.w	r0, #21
    739e:	e776      	b.n	728e <z_impl_net_addr_pton+0xba>
					return -EINVAL;
    73a0:	f06f 0015 	mvn.w	r0, #21
    73a4:	e773      	b.n	728e <z_impl_net_addr_pton+0xba>
					return -EINVAL;
    73a6:	f06f 0015 	mvn.w	r0, #21
    73aa:	e770      	b.n	728e <z_impl_net_addr_pton+0xba>
    73ac:	f06f 0015 	mvn.w	r0, #21
    73b0:	e76d      	b.n	728e <z_impl_net_addr_pton+0xba>
    73b2:	bf00      	nop
    73b4:	01f81001 	.word	0x01f81001

000073b8 <net_ipv4_unspecified_address>:
const struct in_addr *net_ipv4_unspecified_address(void)
{
	static const struct in_addr addr;

	return &addr;
}
    73b8:	4800      	ldr	r0, [pc, #0]	; (73bc <net_ipv4_unspecified_address+0x4>)
    73ba:	4770      	bx	lr
    73bc:	000216d0 	.word	0x000216d0

000073c0 <net_ipv4_broadcast_address>:
const struct in_addr *net_ipv4_broadcast_address(void)
{
	static const struct in_addr addr = { { { 255, 255, 255, 255 } } };

	return &addr;
}
    73c0:	4800      	ldr	r0, [pc, #0]	; (73c4 <net_ipv4_broadcast_address+0x4>)
    73c2:	4770      	bx	lr
    73c4:	000216cc 	.word	0x000216cc

000073c8 <check_used_port>:
			   const struct sockaddr *local_addr)

{
	int i;

	for (i = 0; i < NET_MAX_CONTEXT; i++) {
    73c8:	2300      	movs	r3, #0
    73ca:	2b05      	cmp	r3, #5
    73cc:	dc31      	bgt.n	7432 <check_used_port+0x6a>
{
    73ce:	b430      	push	{r4, r5}
    73d0:	e002      	b.n	73d8 <check_used_port+0x10>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
    73d2:	3301      	adds	r3, #1
    73d4:	2b05      	cmp	r3, #5
    73d6:	dc29      	bgt.n	742c <check_used_port+0x64>
	return context->flags & NET_CONTEXT_IN_USE;
    73d8:	4c17      	ldr	r4, [pc, #92]	; (7438 <check_used_port+0x70>)
    73da:	f04f 0c8c 	mov.w	ip, #140	; 0x8c
    73de:	fb0c 4c03 	mla	ip, ip, r3, r4
    73e2:	f8bc 4088 	ldrh.w	r4, [ip, #136]	; 0x88
		if (!net_context_is_used(&contexts[i])) {
    73e6:	f014 0f01 	tst.w	r4, #1
    73ea:	d0f2      	beq.n	73d2 <check_used_port+0xa>
 *
 * @return Network context IP protocol.
 */
static inline uint16_t net_context_get_proto(struct net_context *context)
{
	return context->proto;
    73ec:	4c12      	ldr	r4, [pc, #72]	; (7438 <check_used_port+0x70>)
    73ee:	f04f 0c8c 	mov.w	ip, #140	; 0x8c
    73f2:	fb0c 4403 	mla	r4, ip, r3, r4
    73f6:	f8b4 4086 	ldrh.w	r4, [r4, #134]	; 0x86
			continue;
		}

		if (!(net_context_get_proto(&contexts[i]) == proto &&
    73fa:	42a0      	cmp	r0, r4
    73fc:	d1e9      	bne.n	73d2 <check_used_port+0xa>
		      net_sin((struct sockaddr *)&
    73fe:	4664      	mov	r4, ip
    7400:	fb03 f404 	mul.w	r4, r3, r4
    7404:	3418      	adds	r4, #24
    7406:	4d0c      	ldr	r5, [pc, #48]	; (7438 <check_used_port+0x70>)
    7408:	442c      	add	r4, r5
    740a:	1d25      	adds	r5, r4, #4
			      contexts[i].local)->sin_port == local_port)) {
    740c:	88e4      	ldrh	r4, [r4, #6]
		if (!(net_context_get_proto(&contexts[i]) == proto &&
    740e:	428c      	cmp	r4, r1
    7410:	d1df      	bne.n	73d2 <check_used_port+0xa>
				    &((struct sockaddr_in6 *)
				      local_addr)->sin6_addr)) {
				return -EEXIST;
			}
		} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
			   local_addr->sa_family == AF_INET) {
    7412:	8814      	ldrh	r4, [r2, #0]
		} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
    7414:	2c01      	cmp	r4, #1
    7416:	d1dc      	bne.n	73d2 <check_used_port+0xa>
			if (net_sin_ptr(&contexts[i].local)->sin_addr == NULL) {
    7418:	686c      	ldr	r4, [r5, #4]
    741a:	2c00      	cmp	r4, #0
    741c:	d0d9      	beq.n	73d2 <check_used_port+0xa>
    741e:	6824      	ldr	r4, [r4, #0]
    7420:	6855      	ldr	r5, [r2, #4]
				continue;
			}

			if (net_ipv4_addr_cmp(
    7422:	42a5      	cmp	r5, r4
    7424:	d1d5      	bne.n	73d2 <check_used_port+0xa>
				    net_sin_ptr(&contexts[i].local)->
							      sin_addr,
				    &((struct sockaddr_in *)
				      local_addr)->sin_addr)) {
				return -EEXIST;
    7426:	f06f 0010 	mvn.w	r0, #16
    742a:	e000      	b.n	742e <check_used_port+0x66>
			}
		}
	}

	return 0;
    742c:	2000      	movs	r0, #0
}
    742e:	bc30      	pop	{r4, r5}
    7430:	4770      	bx	lr
	return 0;
    7432:	2000      	movs	r0, #0
}
    7434:	4770      	bx	lr
    7436:	bf00      	nop
    7438:	2000261c 	.word	0x2000261c

0000743c <find_context>:

static inline struct net_context *find_context(void *conn_handler)
{
	int i;

	for (i = 0; i < NET_MAX_CONTEXT; i++) {
    743c:	2300      	movs	r3, #0
    743e:	e000      	b.n	7442 <find_context+0x6>
    7440:	3301      	adds	r3, #1
    7442:	2b05      	cmp	r3, #5
    7444:	dc12      	bgt.n	746c <find_context+0x30>
	return context->flags & NET_CONTEXT_IN_USE;
    7446:	4a0a      	ldr	r2, [pc, #40]	; (7470 <find_context+0x34>)
    7448:	218c      	movs	r1, #140	; 0x8c
    744a:	fb01 2203 	mla	r2, r1, r3, r2
    744e:	f8b2 2088 	ldrh.w	r2, [r2, #136]	; 0x88
		if (!net_context_is_used(&contexts[i])) {
    7452:	f012 0f01 	tst.w	r2, #1
    7456:	d0f3      	beq.n	7440 <find_context+0x4>
			continue;
		}

		if (contexts[i].conn_handler == conn_handler) {
    7458:	4a05      	ldr	r2, [pc, #20]	; (7470 <find_context+0x34>)
    745a:	fb01 2203 	mla	r2, r1, r3, r2
    745e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    7460:	4282      	cmp	r2, r0
    7462:	d1ed      	bne.n	7440 <find_context+0x4>
			return &contexts[i];
    7464:	4802      	ldr	r0, [pc, #8]	; (7470 <find_context+0x34>)
    7466:	fb01 0003 	mla	r0, r1, r3, r0
    746a:	4770      	bx	lr
		}
	}

	return NULL;
    746c:	2000      	movs	r0, #0
}
    746e:	4770      	bx	lr
    7470:	2000261c 	.word	0x2000261c

00007474 <net_context_get>:
{
    7474:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7478:	4606      	mov	r6, r0
    747a:	460f      	mov	r7, r1
    747c:	4690      	mov	r8, r2
    747e:	4699      	mov	r9, r3
		ret = net_context_check(family, type, proto, context);
    7480:	f012 fe9b 	bl	1a1ba <net_context_check>
		if (ret < 0) {
    7484:	1e04      	subs	r4, r0, #0
    7486:	f2c0 80c4 	blt.w	7612 <net_context_get+0x19e>
	return z_impl_k_sem_take(sem, timeout);
    748a:	f04f 32ff 	mov.w	r2, #4294967295
    748e:	f04f 33ff 	mov.w	r3, #4294967295
    7492:	4861      	ldr	r0, [pc, #388]	; (7618 <net_context_get+0x1a4>)
    7494:	f009 fee4 	bl	11260 <z_impl_k_sem_take>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
    7498:	2500      	movs	r5, #0
    749a:	2d05      	cmp	r5, #5
    749c:	f300 80a9 	bgt.w	75f2 <net_context_get+0x17e>
    74a0:	4b5e      	ldr	r3, [pc, #376]	; (761c <net_context_get+0x1a8>)
    74a2:	228c      	movs	r2, #140	; 0x8c
    74a4:	fb02 3305 	mla	r3, r2, r5, r3
    74a8:	f8b3 b088 	ldrh.w	fp, [r3, #136]	; 0x88
		if (net_context_is_used(&contexts[i])) {
    74ac:	f01b 0b01 	ands.w	fp, fp, #1
    74b0:	f040 8085 	bne.w	75be <net_context_get+0x14a>
		memset(&contexts[i], 0, sizeof(contexts[i]));
    74b4:	228c      	movs	r2, #140	; 0x8c
    74b6:	4b59      	ldr	r3, [pc, #356]	; (761c <net_context_get+0x1a8>)
    74b8:	fb02 3a05 	mla	sl, r2, r5, r3
    74bc:	2100      	movs	r1, #0
    74be:	4650      	mov	r0, sl
    74c0:	f018 fcba 	bl	1fe38 <memset>
		if (!net_if_is_ip_offloaded(net_if_get_default())
    74c4:	f7ff fa26 	bl	6914 <net_if_get_default>
	return (iface->if_dev->offload != NULL);
    74c8:	6803      	ldr	r3, [r0, #0]
    74ca:	699b      	ldr	r3, [r3, #24]
    74cc:	2b00      	cmp	r3, #0
    74ce:	d078      	beq.n	75c2 <net_context_get+0x14e>
		contexts[i].iface = -1;
    74d0:	4b52      	ldr	r3, [pc, #328]	; (761c <net_context_get+0x1a8>)
    74d2:	228c      	movs	r2, #140	; 0x8c
    74d4:	fb02 3305 	mla	r3, r2, r5, r3
    74d8:	22ff      	movs	r2, #255	; 0xff
    74da:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
		contexts[i].flags = 0U;
    74de:	2200      	movs	r2, #0
    74e0:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
		atomic_set(&contexts[i].refcount, 1);
    74e4:	3304      	adds	r3, #4
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    74e6:	2201      	movs	r2, #1
    74e8:	f3bf 8f5b 	dmb	ish
    74ec:	e853 1f00 	ldrex	r1, [r3]
    74f0:	e843 2000 	strex	r0, r2, [r3]
    74f4:	2800      	cmp	r0, #0
    74f6:	d1f9      	bne.n	74ec <net_context_get+0x78>
    74f8:	f3bf 8f5b 	dmb	ish
	if (family == AF_UNSPEC || family == AF_INET || family == AF_INET6 ||
    74fc:	2e04      	cmp	r6, #4
    74fe:	d86c      	bhi.n	75da <net_context_get+0x166>
		flag = family << 3;
    7500:	b2f3      	uxtb	r3, r6
    7502:	00db      	lsls	r3, r3, #3
    7504:	b2db      	uxtb	r3, r3
	context->flags |= flag;
    7506:	4a45      	ldr	r2, [pc, #276]	; (761c <net_context_get+0x1a8>)
    7508:	218c      	movs	r1, #140	; 0x8c
    750a:	fb01 2205 	mla	r2, r1, r5, r2
    750e:	f8b2 1088 	ldrh.w	r1, [r2, #136]	; 0x88
    7512:	430b      	orrs	r3, r1
    7514:	f8a2 3088 	strh.w	r3, [r2, #136]	; 0x88
	if (type == SOCK_DGRAM || type == SOCK_STREAM || type == SOCK_RAW) {
    7518:	1e7a      	subs	r2, r7, #1
    751a:	b2d2      	uxtb	r2, r2
    751c:	2a02      	cmp	r2, #2
    751e:	d801      	bhi.n	7524 <net_context_get+0xb0>
		flag = type << 6;
    7520:	ea4f 1b87 	mov.w	fp, r7, lsl #6
	context->flags |= flag;
    7524:	493d      	ldr	r1, [pc, #244]	; (761c <net_context_get+0x1a8>)
    7526:	248c      	movs	r4, #140	; 0x8c
    7528:	fb05 f404 	mul.w	r4, r5, r4
    752c:	190a      	adds	r2, r1, r4
    752e:	ea4b 0b03 	orr.w	fp, fp, r3
    7532:	f8a2 b088 	strh.w	fp, [r2, #136]	; 0x88
 * protocol value)
 */
static inline void net_context_set_proto(struct net_context *context,
					 uint16_t proto)
{
	context->proto = proto;
    7536:	f8a2 8086 	strh.w	r8, [r2, #134]	; 0x86
			(void)memset(&contexts[i].remote, 0, sizeof(struct sockaddr));
    753a:	f104 0220 	add.w	r2, r4, #32
    753e:	440a      	add	r2, r1
    7540:	2300      	movs	r3, #0
    7542:	6053      	str	r3, [r2, #4]
    7544:	6093      	str	r3, [r2, #8]
			(void)memset(&contexts[i].local, 0, sizeof(struct sockaddr_ptr));
    7546:	3418      	adds	r4, #24
    7548:	440c      	add	r4, r1
    754a:	f104 0b04 	add.w	fp, r4, #4
    754e:	6063      	str	r3, [r4, #4]
    7550:	60a3      	str	r3, [r4, #8]
			if (IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET) {
    7552:	2e01      	cmp	r6, #1
    7554:	d043      	beq.n	75de <net_context_get+0x16a>
			k_sem_init(&contexts[i].recv_data_wait, 1, K_SEM_MAX_LIMIT);
    7556:	238c      	movs	r3, #140	; 0x8c
    7558:	fb03 f505 	mul.w	r5, r3, r5
    755c:	f105 0040 	add.w	r0, r5, #64	; 0x40
    7560:	4c2e      	ldr	r4, [pc, #184]	; (761c <net_context_get+0x1a8>)
    7562:	4420      	add	r0, r4
	return z_impl_k_sem_init(sem, initial_count, limit);
    7564:	f04f 32ff 	mov.w	r2, #4294967295
    7568:	2101      	movs	r1, #1
    756a:	f017 fe45 	bl	1f1f8 <z_impl_k_sem_init>
		k_mutex_init(&contexts[i].lock);
    756e:	f105 0008 	add.w	r0, r5, #8
    7572:	4420      	add	r0, r4
	return z_impl_k_mutex_init(mutex);
    7574:	f017 fd5b 	bl	1f02e <z_impl_k_mutex_init>
		contexts[i].flags |= NET_CONTEXT_IN_USE;
    7578:	1963      	adds	r3, r4, r5
    757a:	f8b3 2088 	ldrh.w	r2, [r3, #136]	; 0x88
    757e:	f042 0201 	orr.w	r2, r2, #1
    7582:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
		*context = &contexts[i];
    7586:	f8c9 a000 	str.w	sl, [r9]
		ret = 0;
    758a:	2400      	movs	r4, #0
	z_impl_k_sem_give(sem);
    758c:	4822      	ldr	r0, [pc, #136]	; (7618 <net_context_get+0x1a4>)
    758e:	f009 fe3f 	bl	11210 <z_impl_k_sem_give>
	if (ret < 0) {
    7592:	2c00      	cmp	r4, #0
    7594:	db3d      	blt.n	7612 <net_context_get+0x19e>
	if (IS_ENABLED(CONFIG_NET_OFFLOAD) && net_if_is_ip_offloaded(net_if_get_default())) {
    7596:	f7ff f9bd 	bl	6914 <net_if_get_default>
    759a:	6803      	ldr	r3, [r0, #0]
    759c:	699b      	ldr	r3, [r3, #24]
    759e:	b3bb      	cbz	r3, 7610 <net_context_get+0x19c>
		ret = net_offload_get(net_if_get_default(), family, type, proto, context);
    75a0:	f7ff f9b8 	bl	6914 <net_if_get_default>
	return iface->if_dev->offload;
    75a4:	6803      	ldr	r3, [r0, #0]
    75a6:	699b      	ldr	r3, [r3, #24]
{
	NET_ASSERT(iface);
	NET_ASSERT(net_if_offload(iface));
	NET_ASSERT(net_if_offload(iface)->get);

	return net_if_offload(iface)->get(family, type, ip_proto, context);
    75a8:	681c      	ldr	r4, [r3, #0]
    75aa:	464b      	mov	r3, r9
    75ac:	fa5f f288 	uxtb.w	r2, r8
    75b0:	4639      	mov	r1, r7
    75b2:	4630      	mov	r0, r6
    75b4:	47a0      	blx	r4
		if (ret < 0) {
    75b6:	1e04      	subs	r4, r0, #0
    75b8:	db1e      	blt.n	75f8 <net_context_get+0x184>
	return 0;
    75ba:	2400      	movs	r4, #0
    75bc:	e029      	b.n	7612 <net_context_get+0x19e>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
    75be:	3501      	adds	r5, #1
    75c0:	e76b      	b.n	749a <net_context_get+0x26>
			&& proto == IPPROTO_TCP) {
    75c2:	f1b8 0f06 	cmp.w	r8, #6
    75c6:	d183      	bne.n	74d0 <net_context_get+0x5c>
			if (net_tcp_get(&contexts[i]) < 0) {
    75c8:	4650      	mov	r0, sl
    75ca:	f001 fab3 	bl	8b34 <net_tcp_get>
    75ce:	2800      	cmp	r0, #0
    75d0:	f6bf af7e 	bge.w	74d0 <net_context_get+0x5c>
	ret = -ENOENT;
    75d4:	f06f 0401 	mvn.w	r4, #1
    75d8:	e7d8      	b.n	758c <net_context_get+0x118>
	uint8_t flag = 0U;
    75da:	2300      	movs	r3, #0
    75dc:	e793      	b.n	7506 <net_context_get+0x92>
					find_available_port(&contexts[i], (struct sockaddr *)addr);
    75de:	4659      	mov	r1, fp
    75e0:	4650      	mov	r0, sl
    75e2:	f012 fe62 	bl	1a2aa <find_available_port>
				addr->sin_port =
    75e6:	80e0      	strh	r0, [r4, #6]
				if (!addr->sin_port) {
    75e8:	2800      	cmp	r0, #0
    75ea:	d1b4      	bne.n	7556 <net_context_get+0xe2>
					ret = -EADDRINUSE;
    75ec:	f06f 046f 	mvn.w	r4, #111	; 0x6f
    75f0:	e7cc      	b.n	758c <net_context_get+0x118>
	ret = -ENOENT;
    75f2:	f06f 0401 	mvn.w	r4, #1
    75f6:	e7c9      	b.n	758c <net_context_get+0x118>
			(*context)->flags &= ~NET_CONTEXT_IN_USE;
    75f8:	f8d9 2000 	ldr.w	r2, [r9]
    75fc:	f8b2 3088 	ldrh.w	r3, [r2, #136]	; 0x88
    7600:	f023 0301 	bic.w	r3, r3, #1
    7604:	f8a2 3088 	strh.w	r3, [r2, #136]	; 0x88
			*context = NULL;
    7608:	2300      	movs	r3, #0
    760a:	f8c9 3000 	str.w	r3, [r9]
			return ret;
    760e:	e000      	b.n	7612 <net_context_get+0x19e>
	return 0;
    7610:	2400      	movs	r4, #0
}
    7612:	4620      	mov	r0, r4
    7614:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7618:	20002604 	.word	0x20002604
    761c:	2000261c 	.word	0x2000261c

00007620 <net_context_put>:
{
    7620:	b570      	push	{r4, r5, r6, lr}
	if (!PART_OF_ARRAY(contexts, context)) {
    7622:	2800      	cmp	r0, #0
    7624:	d037      	beq.n	7696 <net_context_put+0x76>
    7626:	4604      	mov	r4, r0
    7628:	4b1f      	ldr	r3, [pc, #124]	; (76a8 <net_context_put+0x88>)
    762a:	4298      	cmp	r0, r3
    762c:	d336      	bcc.n	769c <net_context_put+0x7c>
    762e:	f503 7352 	add.w	r3, r3, #840	; 0x348
    7632:	4298      	cmp	r0, r3
    7634:	d235      	bcs.n	76a2 <net_context_put+0x82>
	k_mutex_lock(&context->lock, K_FOREVER);
    7636:	f100 0608 	add.w	r6, r0, #8
	return z_impl_k_mutex_lock(mutex, timeout);
    763a:	f04f 32ff 	mov.w	r2, #4294967295
    763e:	f04f 33ff 	mov.w	r3, #4294967295
    7642:	4630      	mov	r0, r6
    7644:	f009 fce4 	bl	11010 <z_impl_k_mutex_lock>
static inline
struct net_if *net_context_get_iface(struct net_context *context)
{
	NET_ASSERT(context);

	return net_if_get_by_index(context->iface);
    7648:	f994 008a 	ldrsb.w	r0, [r4, #138]	; 0x8a
		union { uintptr_t x; int val; } parm0 = { .val = index };
		return (struct net_if *) arch_syscall_invoke1(parm0.x, K_SYSCALL_NET_IF_GET_BY_INDEX);
	}
#endif
	compiler_barrier();
	return z_impl_net_if_get_by_index(index);
    764c:	f7ff f920 	bl	6890 <z_impl_net_if_get_by_index>
	return (iface->if_dev->offload != NULL);
    7650:	6803      	ldr	r3, [r0, #0]
    7652:	699b      	ldr	r3, [r3, #24]
	if (IS_ENABLED(CONFIG_NET_OFFLOAD) &&
    7654:	b1a3      	cbz	r3, 7680 <net_context_put+0x60>
		context->flags &= ~NET_CONTEXT_IN_USE;
    7656:	f8b4 3088 	ldrh.w	r3, [r4, #136]	; 0x88
    765a:	f023 0301 	bic.w	r3, r3, #1
    765e:	f8a4 3088 	strh.w	r3, [r4, #136]	; 0x88
    7662:	f994 008a 	ldrsb.w	r0, [r4, #138]	; 0x8a
    7666:	f7ff f913 	bl	6890 <z_impl_net_if_get_by_index>
	return iface->if_dev->offload;
    766a:	6803      	ldr	r3, [r0, #0]
    766c:	699b      	ldr	r3, [r3, #24]
{
	NET_ASSERT(iface);
	NET_ASSERT(net_if_offload(iface));
	NET_ASSERT(net_if_offload(iface)->put);

	return net_if_offload(iface)->put(context);
    766e:	6a1b      	ldr	r3, [r3, #32]
    7670:	4620      	mov	r0, r4
    7672:	4798      	blx	r3
    7674:	4605      	mov	r5, r0
	return z_impl_k_mutex_unlock(mutex);
    7676:	4630      	mov	r0, r6
    7678:	f009 fd4e 	bl	11118 <z_impl_k_mutex_unlock>
}
    767c:	4628      	mov	r0, r5
    767e:	bd70      	pop	{r4, r5, r6, pc}
	context->connect_cb = NULL;
    7680:	2500      	movs	r5, #0
    7682:	63a5      	str	r5, [r4, #56]	; 0x38
	context->recv_cb = NULL;
    7684:	6325      	str	r5, [r4, #48]	; 0x30
	context->send_cb = NULL;
    7686:	6365      	str	r5, [r4, #52]	; 0x34
	net_tcp_put(context);
    7688:	4620      	mov	r0, r4
    768a:	f001 fb9b 	bl	8dc4 <net_tcp_put>
	net_context_unref(context);
    768e:	4620      	mov	r0, r4
    7690:	f012 fed9 	bl	1a446 <net_context_unref>
    7694:	e7ef      	b.n	7676 <net_context_put+0x56>
		return -EINVAL;
    7696:	f06f 0515 	mvn.w	r5, #21
    769a:	e7ef      	b.n	767c <net_context_put+0x5c>
    769c:	f06f 0515 	mvn.w	r5, #21
    76a0:	e7ec      	b.n	767c <net_context_put+0x5c>
    76a2:	f06f 0515 	mvn.w	r5, #21
    76a6:	e7e9      	b.n	767c <net_context_put+0x5c>
    76a8:	2000261c 	.word	0x2000261c

000076ac <recv_udp>:
#if defined(CONFIG_NET_UDP)
static int recv_udp(struct net_context *context,
		    net_context_recv_cb_t cb,
		    k_timeout_t timeout,
		    void *user_data)
{
    76ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    76ae:	b089      	sub	sp, #36	; 0x24
    76b0:	4604      	mov	r4, r0
    76b2:	460d      	mov	r5, r1
	struct sockaddr local_addr = {
    76b4:	2300      	movs	r3, #0
    76b6:	9306      	str	r3, [sp, #24]
    76b8:	9307      	str	r3, [sp, #28]
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
    76ba:	f8b0 3088 	ldrh.w	r3, [r0, #136]	; 0x88
    76be:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    76c2:	f8ad 3018 	strh.w	r3, [sp, #24]
	uint16_t lport = 0U;
	int ret;

	ARG_UNUSED(timeout);

	if (context->conn_handler) {
    76c6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    76c8:	b118      	cbz	r0, 76d2 <recv_udp+0x26>
		net_conn_unregister(context->conn_handler);
    76ca:	f000 fc9f 	bl	800c <net_conn_unregister>
		context->conn_handler = NULL;
    76ce:	2300      	movs	r3, #0
    76d0:	62e3      	str	r3, [r4, #44]	; 0x2c
	}

	ret = bind_default(context);
    76d2:	4620      	mov	r0, r4
    76d4:	f012 ff7a 	bl	1a5cc <bind_default>
	if (ret) {
    76d8:	2800      	cmp	r0, #0
    76da:	d135      	bne.n	7748 <recv_udp+0x9c>
    76dc:	f8b4 3088 	ldrh.w	r3, [r4, #136]	; 0x88
    76e0:	f3c3 03c2 	ubfx	r3, r3, #3, #3
		}

		net_sin6(&local_addr)->sin6_port =
			net_sin6((struct sockaddr *)&context->local)->sin6_port;
		lport = net_sin6((struct sockaddr *)&context->local)->sin6_port;
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
    76e4:	2b01      	cmp	r3, #1
    76e6:	d00e      	beq.n	7706 <recv_udp+0x5a>
	uint16_t lport = 0U;
    76e8:	2600      	movs	r6, #0
	struct sockaddr *laddr = NULL;
    76ea:	4633      	mov	r3, r6
		}

		lport = net_sin((struct sockaddr *)&context->local)->sin_port;
	}

	context->recv_cb = cb;
    76ec:	6325      	str	r5, [r4, #48]	; 0x30
	return context->proto;
    76ee:	f8b4 0086 	ldrh.w	r0, [r4, #134]	; 0x86
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
    76f2:	f8b4 2088 	ldrh.w	r2, [r4, #136]	; 0x88

	ret = net_conn_register(net_context_get_proto(context),
    76f6:	f3c2 01c2 	ubfx	r1, r2, #3, #3
    76fa:	f412 7f80 	tst.w	r2, #256	; 0x100
    76fe:	d009      	beq.n	7714 <recv_udp+0x68>
    7700:	f104 0224 	add.w	r2, r4, #36	; 0x24
    7704:	e007      	b.n	7716 <recv_udp+0x6a>
		if (net_sin_ptr(&context->local)->sin_addr) {
    7706:	6a23      	ldr	r3, [r4, #32]
    7708:	b113      	cbz	r3, 7710 <recv_udp+0x64>
			net_ipaddr_copy(&net_sin(&local_addr)->sin_addr,
    770a:	681b      	ldr	r3, [r3, #0]
    770c:	9307      	str	r3, [sp, #28]
			laddr = &local_addr;
    770e:	ab06      	add	r3, sp, #24
		lport = net_sin((struct sockaddr *)&context->local)->sin_port;
    7710:	8be6      	ldrh	r6, [r4, #30]
    7712:	e7eb      	b.n	76ec <recv_udp+0x40>
	ret = net_conn_register(net_context_get_proto(context),
    7714:	2200      	movs	r2, #0
				net_context_get_family(context),
				context->flags & NET_CONTEXT_REMOTE_ADDR_SET ?
							&context->remote : NULL,
				laddr,
				ntohs(net_sin(&context->remote)->sin_port),
    7716:	8ce7      	ldrh	r7, [r4, #38]	; 0x26
    7718:	ea4f 2c07 	mov.w	ip, r7, lsl #8
    771c:	fa0f fc8c 	sxth.w	ip, ip
				ntohs(lport),
    7720:	ea4f 2e06 	mov.w	lr, r6, lsl #8
	ret = net_conn_register(net_context_get_proto(context),
    7724:	f104 052c 	add.w	r5, r4, #44	; 0x2c
    7728:	9505      	str	r5, [sp, #20]
    772a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    772c:	9504      	str	r5, [sp, #16]
    772e:	4d07      	ldr	r5, [pc, #28]	; (774c <recv_udp+0xa0>)
    7730:	9503      	str	r5, [sp, #12]
    7732:	9402      	str	r4, [sp, #8]
    7734:	ea4e 2416 	orr.w	r4, lr, r6, lsr #8
    7738:	b2a4      	uxth	r4, r4
    773a:	9401      	str	r4, [sp, #4]
    773c:	ea4c 2417 	orr.w	r4, ip, r7, lsr #8
    7740:	b2a4      	uxth	r4, r4
    7742:	9400      	str	r4, [sp, #0]
    7744:	f014 f933 	bl	1b9ae <net_conn_register>
				net_context_packet_received,
				user_data,
				&context->conn_handler);

	return ret;
}
    7748:	b009      	add	sp, #36	; 0x24
    774a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    774c:	0001a2df 	.word	0x0001a2df

00007750 <net_context_set_option>:
}

int net_context_set_option(struct net_context *context,
			   enum net_context_option option,
			   const void *value, size_t len)
{
    7750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int ret = 0;

	NET_ASSERT(context);

	if (!PART_OF_ARRAY(contexts, context)) {
    7754:	2800      	cmp	r0, #0
    7756:	d05c      	beq.n	7812 <net_context_set_option+0xc2>
    7758:	4688      	mov	r8, r1
    775a:	4617      	mov	r7, r2
    775c:	461e      	mov	r6, r3
    775e:	4604      	mov	r4, r0
    7760:	4b30      	ldr	r3, [pc, #192]	; (7824 <net_context_set_option+0xd4>)
    7762:	4298      	cmp	r0, r3
    7764:	d358      	bcc.n	7818 <net_context_set_option+0xc8>
    7766:	f503 7352 	add.w	r3, r3, #840	; 0x348
    776a:	4298      	cmp	r0, r3
    776c:	d257      	bcs.n	781e <net_context_set_option+0xce>
		return -EINVAL;
	}

	k_mutex_lock(&context->lock, K_FOREVER);
    776e:	f100 0508 	add.w	r5, r0, #8
	return z_impl_k_mutex_lock(mutex, timeout);
    7772:	f04f 32ff 	mov.w	r2, #4294967295
    7776:	f04f 33ff 	mov.w	r3, #4294967295
    777a:	4628      	mov	r0, r5
    777c:	f009 fc48 	bl	11010 <z_impl_k_mutex_lock>

	switch (option) {
    7780:	f108 31ff 	add.w	r1, r8, #4294967295
    7784:	2907      	cmp	r1, #7
    7786:	d842      	bhi.n	780e <net_context_set_option+0xbe>
    7788:	e8df f001 	tbb	[pc, r1]
    778c:	1e171004 	.word	0x1e171004
    7790:	3a332c25 	.word	0x3a332c25
	case NET_OPT_PRIORITY:
		ret = set_context_priority(context, value, len);
    7794:	4632      	mov	r2, r6
    7796:	4639      	mov	r1, r7
    7798:	4620      	mov	r0, r4
    779a:	f012 fd62 	bl	1a262 <set_context_priority>
    779e:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    77a0:	4628      	mov	r0, r5
    77a2:	f009 fcb9 	bl	11118 <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&context->lock);

	return ret;
}
    77a6:	4620      	mov	r0, r4
    77a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ret = set_context_txtime(context, value, len);
    77ac:	4632      	mov	r2, r6
    77ae:	4639      	mov	r1, r7
    77b0:	4620      	mov	r0, r4
    77b2:	f012 fd59 	bl	1a268 <set_context_txtime>
    77b6:	4604      	mov	r4, r0
		break;
    77b8:	e7f2      	b.n	77a0 <net_context_set_option+0x50>
		ret = set_context_proxy(context, value, len);
    77ba:	4632      	mov	r2, r6
    77bc:	4639      	mov	r1, r7
    77be:	4620      	mov	r0, r4
    77c0:	f012 fd55 	bl	1a26e <set_context_proxy>
    77c4:	4604      	mov	r4, r0
		break;
    77c6:	e7eb      	b.n	77a0 <net_context_set_option+0x50>
		ret = set_context_rcvtimeo(context, value, len);
    77c8:	4632      	mov	r2, r6
    77ca:	4639      	mov	r1, r7
    77cc:	4620      	mov	r0, r4
    77ce:	f012 fd51 	bl	1a274 <set_context_rcvtimeo>
    77d2:	4604      	mov	r4, r0
		break;
    77d4:	e7e4      	b.n	77a0 <net_context_set_option+0x50>
		ret = set_context_sndtimeo(context, value, len);
    77d6:	4632      	mov	r2, r6
    77d8:	4639      	mov	r1, r7
    77da:	4620      	mov	r0, r4
    77dc:	f012 fd4d 	bl	1a27a <set_context_sndtimeo>
    77e0:	4604      	mov	r4, r0
		break;
    77e2:	e7dd      	b.n	77a0 <net_context_set_option+0x50>
		ret = set_context_rcvbuf(context, value, len);
    77e4:	4632      	mov	r2, r6
    77e6:	4639      	mov	r1, r7
    77e8:	4620      	mov	r0, r4
    77ea:	f012 fd49 	bl	1a280 <set_context_rcvbuf>
    77ee:	4604      	mov	r4, r0
		break;
    77f0:	e7d6      	b.n	77a0 <net_context_set_option+0x50>
		ret = set_context_sndbuf(context, value, len);
    77f2:	4632      	mov	r2, r6
    77f4:	4639      	mov	r1, r7
    77f6:	4620      	mov	r0, r4
    77f8:	f012 fd45 	bl	1a286 <set_context_sndbuf>
    77fc:	4604      	mov	r4, r0
		break;
    77fe:	e7cf      	b.n	77a0 <net_context_set_option+0x50>
		ret = set_context_dscp_ecn(context, value, len);
    7800:	4632      	mov	r2, r6
    7802:	4639      	mov	r1, r7
    7804:	4620      	mov	r0, r4
    7806:	f012 fd41 	bl	1a28c <set_context_dscp_ecn>
    780a:	4604      	mov	r4, r0
		break;
    780c:	e7c8      	b.n	77a0 <net_context_set_option+0x50>
	switch (option) {
    780e:	2400      	movs	r4, #0
    7810:	e7c6      	b.n	77a0 <net_context_set_option+0x50>
		return -EINVAL;
    7812:	f06f 0415 	mvn.w	r4, #21
    7816:	e7c6      	b.n	77a6 <net_context_set_option+0x56>
    7818:	f06f 0415 	mvn.w	r4, #21
    781c:	e7c3      	b.n	77a6 <net_context_set_option+0x56>
    781e:	f06f 0415 	mvn.w	r4, #21
    7822:	e7c0      	b.n	77a6 <net_context_set_option+0x56>
    7824:	2000261c 	.word	0x2000261c

00007828 <net_context_get_option>:

int net_context_get_option(struct net_context *context,
			    enum net_context_option option,
			    void *value, size_t *len)
{
    7828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int ret = 0;

	NET_ASSERT(context);

	if (!PART_OF_ARRAY(contexts, context)) {
    782c:	2800      	cmp	r0, #0
    782e:	d05c      	beq.n	78ea <net_context_get_option+0xc2>
    7830:	4688      	mov	r8, r1
    7832:	4617      	mov	r7, r2
    7834:	461e      	mov	r6, r3
    7836:	4604      	mov	r4, r0
    7838:	4b30      	ldr	r3, [pc, #192]	; (78fc <net_context_get_option+0xd4>)
    783a:	4298      	cmp	r0, r3
    783c:	d358      	bcc.n	78f0 <net_context_get_option+0xc8>
    783e:	f503 7352 	add.w	r3, r3, #840	; 0x348
    7842:	4298      	cmp	r0, r3
    7844:	d257      	bcs.n	78f6 <net_context_get_option+0xce>
		return -EINVAL;
	}

	k_mutex_lock(&context->lock, K_FOREVER);
    7846:	f100 0508 	add.w	r5, r0, #8
	return z_impl_k_mutex_lock(mutex, timeout);
    784a:	f04f 32ff 	mov.w	r2, #4294967295
    784e:	f04f 33ff 	mov.w	r3, #4294967295
    7852:	4628      	mov	r0, r5
    7854:	f009 fbdc 	bl	11010 <z_impl_k_mutex_lock>

	switch (option) {
    7858:	f108 31ff 	add.w	r1, r8, #4294967295
    785c:	2907      	cmp	r1, #7
    785e:	d842      	bhi.n	78e6 <net_context_get_option+0xbe>
    7860:	e8df f001 	tbb	[pc, r1]
    7864:	1e171004 	.word	0x1e171004
    7868:	3a332c25 	.word	0x3a332c25
	case NET_OPT_PRIORITY:
		ret = get_context_priority(context, value, len);
    786c:	4632      	mov	r2, r6
    786e:	4639      	mov	r1, r7
    7870:	4620      	mov	r0, r4
    7872:	f012 fcd8 	bl	1a226 <get_context_priority>
    7876:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    7878:	4628      	mov	r0, r5
    787a:	f009 fc4d 	bl	11118 <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&context->lock);

	return ret;
}
    787e:	4620      	mov	r0, r4
    7880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ret = get_context_txtime(context, value, len);
    7884:	4632      	mov	r2, r6
    7886:	4639      	mov	r1, r7
    7888:	4620      	mov	r0, r4
    788a:	f012 fcd2 	bl	1a232 <get_context_txtime>
    788e:	4604      	mov	r4, r0
		break;
    7890:	e7f2      	b.n	7878 <net_context_get_option+0x50>
		ret = get_context_proxy(context, value, len);
    7892:	4632      	mov	r2, r6
    7894:	4639      	mov	r1, r7
    7896:	4620      	mov	r0, r4
    7898:	f012 fcc8 	bl	1a22c <get_context_proxy>
    789c:	4604      	mov	r4, r0
		break;
    789e:	e7eb      	b.n	7878 <net_context_get_option+0x50>
		ret = get_context_rcvtimeo(context, value, len);
    78a0:	4632      	mov	r2, r6
    78a2:	4639      	mov	r1, r7
    78a4:	4620      	mov	r0, r4
    78a6:	f012 fcc7 	bl	1a238 <get_context_rcvtimeo>
    78aa:	4604      	mov	r4, r0
		break;
    78ac:	e7e4      	b.n	7878 <net_context_get_option+0x50>
		ret = get_context_sndtimeo(context, value, len);
    78ae:	4632      	mov	r2, r6
    78b0:	4639      	mov	r1, r7
    78b2:	4620      	mov	r0, r4
    78b4:	f012 fcc3 	bl	1a23e <get_context_sndtimeo>
    78b8:	4604      	mov	r4, r0
		break;
    78ba:	e7dd      	b.n	7878 <net_context_get_option+0x50>
		ret = get_context_rcvbuf(context, value, len);
    78bc:	4632      	mov	r2, r6
    78be:	4639      	mov	r1, r7
    78c0:	4620      	mov	r0, r4
    78c2:	f012 fcbf 	bl	1a244 <get_context_rcvbuf>
    78c6:	4604      	mov	r4, r0
		break;
    78c8:	e7d6      	b.n	7878 <net_context_get_option+0x50>
		ret = get_context_sndbuf(context, value, len);
    78ca:	4632      	mov	r2, r6
    78cc:	4639      	mov	r1, r7
    78ce:	4620      	mov	r0, r4
    78d0:	f012 fcbb 	bl	1a24a <get_context_sndbuf>
    78d4:	4604      	mov	r4, r0
		break;
    78d6:	e7cf      	b.n	7878 <net_context_get_option+0x50>
		ret = get_context_dscp_ecn(context, value, len);
    78d8:	4632      	mov	r2, r6
    78da:	4639      	mov	r1, r7
    78dc:	4620      	mov	r0, r4
    78de:	f012 fcb7 	bl	1a250 <get_context_dscp_ecn>
    78e2:	4604      	mov	r4, r0
		break;
    78e4:	e7c8      	b.n	7878 <net_context_get_option+0x50>
	switch (option) {
    78e6:	2400      	movs	r4, #0
    78e8:	e7c6      	b.n	7878 <net_context_get_option+0x50>
		return -EINVAL;
    78ea:	f06f 0415 	mvn.w	r4, #21
    78ee:	e7c6      	b.n	787e <net_context_get_option+0x56>
    78f0:	f06f 0415 	mvn.w	r4, #21
    78f4:	e7c3      	b.n	787e <net_context_get_option+0x56>
    78f6:	f06f 0415 	mvn.w	r4, #21
    78fa:	e7c0      	b.n	787e <net_context_get_option+0x56>
    78fc:	2000261c 	.word	0x2000261c

00007900 <net_context_init>:

	return NULL;
}

void net_context_init(void)
{
    7900:	b508      	push	{r3, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
    7902:	f04f 32ff 	mov.w	r2, #4294967295
    7906:	2101      	movs	r1, #1
    7908:	4801      	ldr	r0, [pc, #4]	; (7910 <net_context_init+0x10>)
    790a:	f017 fc75 	bl	1f1f8 <z_impl_k_sem_init>
	k_sem_init(&contexts_lock, 1, K_SEM_MAX_LIMIT);
}
    790e:	bd08      	pop	{r3, pc}
    7910:	20002604 	.word	0x20002604

00007914 <net_pkt_get_reserve_rx_data>:
}

#else /* NET_LOG_LEVEL >= LOG_LEVEL_DBG */

struct net_buf *net_pkt_get_reserve_rx_data(k_timeout_t timeout)
{
    7914:	b508      	push	{r3, lr}
    7916:	4602      	mov	r2, r0
    7918:	460b      	mov	r3, r1
	return net_pkt_get_reserve_data(&rx_bufs, timeout);
    791a:	4802      	ldr	r0, [pc, #8]	; (7924 <net_pkt_get_reserve_rx_data+0x10>)
    791c:	f013 fb8e 	bl	1b03c <net_pkt_get_reserve_data>
}
    7920:	bd08      	pop	{r3, pc}
    7922:	bf00      	nop
    7924:	20000638 	.word	0x20000638

00007928 <net_pkt_get_reserve_tx_data>:

struct net_buf *net_pkt_get_reserve_tx_data(k_timeout_t timeout)
{
    7928:	b508      	push	{r3, lr}
    792a:	4602      	mov	r2, r0
    792c:	460b      	mov	r3, r1
	return net_pkt_get_reserve_data(&tx_bufs, timeout);
    792e:	4802      	ldr	r0, [pc, #8]	; (7938 <net_pkt_get_reserve_tx_data+0x10>)
    7930:	f013 fb84 	bl	1b03c <net_pkt_get_reserve_data>
}
    7934:	bd08      	pop	{r3, pc}
    7936:	bf00      	nop
    7938:	20000664 	.word	0x20000664

0000793c <net_pkt_get_frag>:
{
    793c:	b508      	push	{r3, lr}
    793e:	4619      	mov	r1, r3
	if (pkt->slab == &rx_pkts) {
    7940:	6840      	ldr	r0, [r0, #4]
    7942:	4b05      	ldr	r3, [pc, #20]	; (7958 <net_pkt_get_frag+0x1c>)
    7944:	4298      	cmp	r0, r3
    7946:	d003      	beq.n	7950 <net_pkt_get_frag+0x14>
	return net_pkt_get_reserve_tx_data(timeout);
    7948:	4610      	mov	r0, r2
    794a:	f7ff ffed 	bl	7928 <net_pkt_get_reserve_tx_data>
}
    794e:	bd08      	pop	{r3, pc}
		return net_pkt_get_reserve_rx_data(timeout);
    7950:	4610      	mov	r0, r2
    7952:	f7ff ffdf 	bl	7914 <net_pkt_get_reserve_rx_data>
    7956:	e7fa      	b.n	794e <net_pkt_get_frag+0x12>
    7958:	200003d0 	.word	0x200003d0

0000795c <pkt_alloc>:
static struct net_pkt *pkt_alloc(struct k_mem_slab *slab, k_timeout_t timeout,
				 const char *caller, int line)
#else
static struct net_pkt *pkt_alloc(struct k_mem_slab *slab, k_timeout_t timeout)
#endif
{
    795c:	b570      	push	{r4, r5, r6, lr}
    795e:	b082      	sub	sp, #8
    7960:	4604      	mov	r4, r0
    7962:	4616      	mov	r6, r2
    7964:	461d      	mov	r5, r3
	struct net_pkt *pkt;
	uint32_t create_time;
	int ret;

	if (k_is_in_isr()) {
    7966:	f017 fb0a 	bl	1ef7e <k_is_in_isr>
    796a:	b108      	cbz	r0, 7970 <pkt_alloc+0x14>
		timeout = K_NO_WAIT;
    796c:	2600      	movs	r6, #0
    796e:	4635      	mov	r5, r6
		create_time = k_cycle_get_32();
	} else {
		ARG_UNUSED(create_time);
	}

	ret = k_mem_slab_alloc(slab, (void **)&pkt, timeout);
    7970:	4632      	mov	r2, r6
    7972:	462b      	mov	r3, r5
    7974:	a901      	add	r1, sp, #4
    7976:	4620      	mov	r0, r4
    7978:	f009 fa70 	bl	10e5c <k_mem_slab_alloc>
	if (ret) {
    797c:	b9e0      	cbnz	r0, 79b8 <pkt_alloc+0x5c>
		return NULL;
	}

	memset(pkt, 0, sizeof(struct net_pkt));
    797e:	9d01      	ldr	r5, [sp, #4]
    7980:	2240      	movs	r2, #64	; 0x40
    7982:	2100      	movs	r1, #0
    7984:	4628      	mov	r0, r5
    7986:	f018 fa57 	bl	1fe38 <memset>

	pkt->atomic_ref = ATOMIC_INIT(1);
    798a:	2301      	movs	r3, #1
    798c:	622b      	str	r3, [r5, #32]
	pkt->slab = slab;
    798e:	606c      	str	r4, [r5, #4]
#define RX_DEFAULT_PRIORITY CONFIG_NET_RX_DEFAULT_PRIORITY
#else
#define RX_DEFAULT_PRIORITY 0
#endif

	if (&tx_pkts == slab) {
    7990:	4b0a      	ldr	r3, [pc, #40]	; (79bc <pkt_alloc+0x60>)
    7992:	429c      	cmp	r4, r3
    7994:	d008      	beq.n	79a8 <pkt_alloc+0x4c>
		net_pkt_set_priority(pkt, TX_DEFAULT_PRIORITY);
	} else if (&rx_pkts == slab) {
    7996:	4b0a      	ldr	r3, [pc, #40]	; (79c0 <pkt_alloc+0x64>)
    7998:	429c      	cmp	r4, r3
    799a:	d009      	beq.n	79b0 <pkt_alloc+0x54>

#if NET_LOG_LEVEL >= LOG_LEVEL_DBG
	net_pkt_alloc_add(pkt, true, caller, line);
#endif

	net_pkt_cursor_init(pkt);
    799c:	4628      	mov	r0, r5
    799e:	f013 fc1f 	bl	1b1e0 <net_pkt_cursor_init>

	return pkt;
    79a2:	9801      	ldr	r0, [sp, #4]
}
    79a4:	b002      	add	sp, #8
    79a6:	bd70      	pop	{r4, r5, r6, pc}
	pkt->priority = priority;
    79a8:	2301      	movs	r3, #1
    79aa:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
    79ae:	e7f5      	b.n	799c <pkt_alloc+0x40>
	pkt->priority = priority;
    79b0:	2300      	movs	r3, #0
    79b2:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
    79b6:	e7f1      	b.n	799c <pkt_alloc+0x40>
		return NULL;
    79b8:	2000      	movs	r0, #0
    79ba:	e7f3      	b.n	79a4 <pkt_alloc+0x48>
    79bc:	20000408 	.word	0x20000408
    79c0:	200003d0 	.word	0x200003d0

000079c4 <net_pkt_alloc>:
struct net_pkt *net_pkt_alloc_debug(k_timeout_t timeout,
				    const char *caller, int line)
#else
struct net_pkt *net_pkt_alloc(k_timeout_t timeout)
#endif
{
    79c4:	b508      	push	{r3, lr}
    79c6:	4602      	mov	r2, r0
    79c8:	460b      	mov	r3, r1
#if NET_LOG_LEVEL >= LOG_LEVEL_DBG
	return pkt_alloc(&tx_pkts, timeout, caller, line);
#else
	return pkt_alloc(&tx_pkts, timeout);
    79ca:	4802      	ldr	r0, [pc, #8]	; (79d4 <net_pkt_alloc+0x10>)
    79cc:	f7ff ffc6 	bl	795c <pkt_alloc>
#endif
}
    79d0:	bd08      	pop	{r3, pc}
    79d2:	bf00      	nop
    79d4:	20000408 	.word	0x20000408

000079d8 <net_pkt_rx_alloc>:
struct net_pkt *net_pkt_rx_alloc_debug(k_timeout_t timeout,
				       const char *caller, int line)
#else
struct net_pkt *net_pkt_rx_alloc(k_timeout_t timeout)
#endif
{
    79d8:	b508      	push	{r3, lr}
    79da:	4602      	mov	r2, r0
    79dc:	460b      	mov	r3, r1
#if NET_LOG_LEVEL >= LOG_LEVEL_DBG
	return pkt_alloc(&rx_pkts, timeout, caller, line);
#else
	return pkt_alloc(&rx_pkts, timeout);
    79de:	4802      	ldr	r0, [pc, #8]	; (79e8 <net_pkt_rx_alloc+0x10>)
    79e0:	f7ff ffbc 	bl	795c <pkt_alloc>
#endif
}
    79e4:	bd08      	pop	{r3, pc}
    79e6:	bf00      	nop
    79e8:	200003d0 	.word	0x200003d0

000079ec <net_pkt_alloc_buffer>:
{
    79ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    79f0:	4604      	mov	r4, r0
    79f2:	460f      	mov	r7, r1
    79f4:	4616      	mov	r6, r2
    79f6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    79f8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
	uint64_t end = sys_clock_timeout_end_calc(timeout);
    79fc:	4628      	mov	r0, r5
    79fe:	4641      	mov	r1, r8
    7a00:	f017 ffaa 	bl	1f958 <sys_clock_timeout_end_calc>
    7a04:	4681      	mov	r9, r0
    7a06:	468a      	mov	sl, r1
	if (!size && proto == 0 && net_pkt_family(pkt) == AF_UNSPEC) {
    7a08:	b927      	cbnz	r7, 7a14 <net_pkt_alloc_buffer+0x28>
    7a0a:	b91e      	cbnz	r6, 7a14 <net_pkt_alloc_buffer+0x28>
	return pkt->family;
    7a0c:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
    7a10:	095b      	lsrs	r3, r3, #5
    7a12:	d048      	beq.n	7aa6 <net_pkt_alloc_buffer+0xba>
	if (k_is_in_isr()) {
    7a14:	f017 fab3 	bl	1ef7e <k_is_in_isr>
    7a18:	b108      	cbz	r0, 7a1e <net_pkt_alloc_buffer+0x32>
		timeout = K_NO_WAIT;
    7a1a:	2500      	movs	r5, #0
    7a1c:	46a8      	mov	r8, r5
	alloc_len = net_pkt_available_buffer(pkt);
    7a1e:	4620      	mov	r0, r4
    7a20:	f013 fb71 	bl	1b106 <net_pkt_available_buffer>
	if (!alloc_len) {
    7a24:	4683      	mov	fp, r0
    7a26:	bb48      	cbnz	r0, 7a7c <net_pkt_alloc_buffer+0x90>
    7a28:	f894 1037 	ldrb.w	r1, [r4, #55]	; 0x37
		hdr_len = pkt_estimate_headers_length(pkt,
    7a2c:	4632      	mov	r2, r6
    7a2e:	0949      	lsrs	r1, r1, #5
    7a30:	4620      	mov	r0, r4
    7a32:	f013 f9a6 	bl	1ad82 <pkt_estimate_headers_length>
	alloc_len = pkt_buffer_length(pkt, size + hdr_len, proto, alloc_len);
    7a36:	465b      	mov	r3, fp
    7a38:	4632      	mov	r2, r6
    7a3a:	1839      	adds	r1, r7, r0
    7a3c:	4620      	mov	r0, r4
    7a3e:	f013 f987 	bl	1ad50 <pkt_buffer_length>
    7a42:	4606      	mov	r6, r0
		pool = pkt->slab == &tx_pkts ? &tx_bufs : &rx_bufs;
    7a44:	6862      	ldr	r2, [r4, #4]
    7a46:	4b1a      	ldr	r3, [pc, #104]	; (7ab0 <net_pkt_alloc_buffer+0xc4>)
    7a48:	429a      	cmp	r2, r3
    7a4a:	d019      	beq.n	7a80 <net_pkt_alloc_buffer+0x94>
    7a4c:	4f19      	ldr	r7, [pc, #100]	; (7ab4 <net_pkt_alloc_buffer+0xc8>)
	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    7a4e:	ea55 0308 	orrs.w	r3, r5, r8
    7a52:	d005      	beq.n	7a60 <net_pkt_alloc_buffer+0x74>
    7a54:	f1b8 3fff 	cmp.w	r8, #4294967295
    7a58:	bf08      	it	eq
    7a5a:	f1b5 3fff 	cmpeq.w	r5, #4294967295
    7a5e:	d111      	bne.n	7a84 <net_pkt_alloc_buffer+0x98>
	buf = pkt_alloc_buffer(pool, alloc_len, timeout);
    7a60:	462a      	mov	r2, r5
    7a62:	4643      	mov	r3, r8
    7a64:	4631      	mov	r1, r6
    7a66:	4638      	mov	r0, r7
    7a68:	f013 fa2f 	bl	1aeca <pkt_alloc_buffer>
	if (!buf) {
    7a6c:	4601      	mov	r1, r0
    7a6e:	b1e0      	cbz	r0, 7aaa <net_pkt_alloc_buffer+0xbe>
	net_pkt_append_buffer(pkt, buf);
    7a70:	4620      	mov	r0, r4
    7a72:	f013 fbd0 	bl	1b216 <net_pkt_append_buffer>
	return 0;
    7a76:	2000      	movs	r0, #0
}
    7a78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	size_t hdr_len = 0;
    7a7c:	2000      	movs	r0, #0
    7a7e:	e7da      	b.n	7a36 <net_pkt_alloc_buffer+0x4a>
		pool = pkt->slab == &tx_pkts ? &tx_bufs : &rx_bufs;
    7a80:	4f0d      	ldr	r7, [pc, #52]	; (7ab8 <net_pkt_alloc_buffer+0xcc>)
    7a82:	e7e4      	b.n	7a4e <net_pkt_alloc_buffer+0x62>
		int64_t remaining = end - sys_clock_tick_get();
    7a84:	f00a fb18 	bl	120b8 <sys_clock_tick_get>
    7a88:	ebb9 0900 	subs.w	r9, r9, r0
    7a8c:	eb6a 0a01 	sbc.w	sl, sl, r1
		if (remaining <= 0) {
    7a90:	f1b9 0f01 	cmp.w	r9, #1
    7a94:	f17a 0300 	sbcs.w	r3, sl, #0
    7a98:	db02      	blt.n	7aa0 <net_pkt_alloc_buffer+0xb4>
			timeout = Z_TIMEOUT_TICKS(remaining);
    7a9a:	464d      	mov	r5, r9
    7a9c:	46d0      	mov	r8, sl
    7a9e:	e7df      	b.n	7a60 <net_pkt_alloc_buffer+0x74>
			timeout = K_NO_WAIT;
    7aa0:	2500      	movs	r5, #0
    7aa2:	46a8      	mov	r8, r5
    7aa4:	e7dc      	b.n	7a60 <net_pkt_alloc_buffer+0x74>
		return 0;
    7aa6:	2000      	movs	r0, #0
    7aa8:	e7e6      	b.n	7a78 <net_pkt_alloc_buffer+0x8c>
		return -ENOMEM;
    7aaa:	f06f 000b 	mvn.w	r0, #11
    7aae:	e7e3      	b.n	7a78 <net_pkt_alloc_buffer+0x8c>
    7ab0:	20000408 	.word	0x20000408
    7ab4:	20000638 	.word	0x20000638
    7ab8:	20000664 	.word	0x20000664

00007abc <net_pkt_alloc_with_buffer>:
					  size_t size,
					  sa_family_t family,
					  enum net_ip_protocol proto,
					  k_timeout_t timeout)
#endif
{
    7abc:	e92d 4800 	stmdb	sp!, {fp, lr}
    7ac0:	b084      	sub	sp, #16
#if NET_LOG_LEVEL >= LOG_LEVEL_DBG
	return pkt_alloc_with_buffer(&tx_pkts, iface, size, family,
				     proto, timeout, caller, line);
#else
	return pkt_alloc_with_buffer(&tx_pkts, iface, size, family,
    7ac2:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
    7ac6:	e9cd bc02 	strd	fp, ip, [sp, #8]
    7aca:	9300      	str	r3, [sp, #0]
    7acc:	4613      	mov	r3, r2
    7ace:	460a      	mov	r2, r1
    7ad0:	4601      	mov	r1, r0
    7ad2:	4803      	ldr	r0, [pc, #12]	; (7ae0 <net_pkt_alloc_with_buffer+0x24>)
    7ad4:	f013 fbaf 	bl	1b236 <pkt_alloc_with_buffer>
				     proto, timeout);
#endif
}
    7ad8:	b004      	add	sp, #16
    7ada:	e8bd 8800 	ldmia.w	sp!, {fp, pc}
    7ade:	bf00      	nop
    7ae0:	20000408 	.word	0x20000408

00007ae4 <net_pkt_rx_alloc_with_buffer>:
					     size_t size,
					     sa_family_t family,
					     enum net_ip_protocol proto,
					     k_timeout_t timeout)
#endif
{
    7ae4:	e92d 4800 	stmdb	sp!, {fp, lr}
    7ae8:	b084      	sub	sp, #16
#if NET_LOG_LEVEL >= LOG_LEVEL_DBG
	return pkt_alloc_with_buffer(&rx_pkts, iface, size, family,
					proto, timeout, caller, line);
#else
	return pkt_alloc_with_buffer(&rx_pkts, iface, size, family,
    7aea:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
    7aee:	e9cd bc02 	strd	fp, ip, [sp, #8]
    7af2:	9300      	str	r3, [sp, #0]
    7af4:	4613      	mov	r3, r2
    7af6:	460a      	mov	r2, r1
    7af8:	4601      	mov	r1, r0
    7afa:	4803      	ldr	r0, [pc, #12]	; (7b08 <net_pkt_rx_alloc_with_buffer+0x24>)
    7afc:	f013 fb9b 	bl	1b236 <pkt_alloc_with_buffer>
					proto, timeout);
#endif
}
    7b00:	b004      	add	sp, #16
    7b02:	e8bd 8800 	ldmia.w	sp!, {fp, pc}
    7b06:	bf00      	nop
    7b08:	200003d0 	.word	0x200003d0

00007b0c <net_tc_rx_init>:
	}
#endif
}

void net_tc_rx_init(void)
{
    7b0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7b10:	b089      	sub	sp, #36	; 0x24

#if defined(CONFIG_NET_STATISTICS)
	net_if_foreach(net_tc_rx_stats_priority_setup, NULL);
#endif

	for (i = 0; i < NET_TC_RX_COUNT; i++) {
    7b12:	2500      	movs	r5, #0
    7b14:	2d00      	cmp	r5, #0
    7b16:	dd02      	ble.n	7b1e <net_tc_rx_init+0x12>
		}

		k_thread_start(tid);
	}
#endif
}
    7b18:	b009      	add	sp, #36	; 0x24
    7b1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		thread_priority = rx_tc2thread(i);
    7b1e:	b2e8      	uxtb	r0, r5
    7b20:	f013 fe1b 	bl	1b75a <rx_tc2thread>
		priority = IS_ENABLED(CONFIG_NET_TC_THREAD_COOPERATIVE) ?
    7b24:	f1a0 0710 	sub.w	r7, r0, #16
		k_fifo_init(&rx_classes[i].fifo);
    7b28:	00ac      	lsls	r4, r5, #2
    7b2a:	eb05 0685 	add.w	r6, r5, r5, lsl #2
    7b2e:	f8df 8048 	ldr.w	r8, [pc, #72]	; 7b78 <net_tc_rx_init+0x6c>
    7b32:	eb08 1646 	add.w	r6, r8, r6, lsl #5
	z_impl_k_queue_init(queue);
    7b36:	4630      	mov	r0, r6
    7b38:	f017 fb12 	bl	1f160 <z_impl_k_queue_init>
		tid = k_thread_create(&rx_classes[i].handler, rx_stack[i],
    7b3c:	1960      	adds	r0, r4, r5
    7b3e:	0140      	lsls	r0, r0, #5
    7b40:	3018      	adds	r0, #24
    7b42:	4440      	add	r0, r8
    7b44:	f44f 62bc 	mov.w	r2, #1504	; 0x5e0
    7b48:	490c      	ldr	r1, [pc, #48]	; (7b7c <net_tc_rx_init+0x70>)
    7b4a:	fb02 1105 	mla	r1, r2, r5, r1
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    7b4e:	f04f 38ff 	mov.w	r8, #4294967295
    7b52:	f04f 39ff 	mov.w	r9, #4294967295
    7b56:	e9cd 8906 	strd	r8, r9, [sp, #24]
    7b5a:	2300      	movs	r3, #0
    7b5c:	9304      	str	r3, [sp, #16]
    7b5e:	9703      	str	r7, [sp, #12]
    7b60:	9302      	str	r3, [sp, #8]
    7b62:	9301      	str	r3, [sp, #4]
    7b64:	9600      	str	r6, [sp, #0]
    7b66:	4b06      	ldr	r3, [pc, #24]	; (7b80 <net_tc_rx_init+0x74>)
    7b68:	f017 fa23 	bl	1efb2 <z_impl_k_thread_create>
		if (!tid) {
    7b6c:	b108      	cbz	r0, 7b72 <net_tc_rx_init+0x66>
	z_impl_k_thread_start(thread);
    7b6e:	f017 fa11 	bl	1ef94 <z_impl_k_thread_start>
	for (i = 0; i < NET_TC_RX_COUNT; i++) {
    7b72:	3501      	adds	r5, #1
    7b74:	e7ce      	b.n	7b14 <net_tc_rx_init+0x8>
    7b76:	bf00      	nop
    7b78:	20000c20 	.word	0x20000c20
    7b7c:	200045b8 	.word	0x200045b8
    7b80:	0001b75f 	.word	0x0001b75f

00007b84 <mgmt_pop_event>:

static inline struct mgmt_event_entry *mgmt_pop_event(void)
{
	int16_t o_idx;

	if (out_event < 0 || !events[out_event].event) {
    7b84:	4b14      	ldr	r3, [pc, #80]	; (7bd8 <mgmt_pop_event+0x54>)
    7b86:	f9b3 3000 	ldrsh.w	r3, [r3]
    7b8a:	2b00      	cmp	r3, #0
    7b8c:	db20      	blt.n	7bd0 <mgmt_pop_event+0x4c>
    7b8e:	222c      	movs	r2, #44	; 0x2c
    7b90:	fb03 f202 	mul.w	r2, r3, r2
    7b94:	4911      	ldr	r1, [pc, #68]	; (7bdc <mgmt_pop_event+0x58>)
    7b96:	588a      	ldr	r2, [r1, r2]
    7b98:	b1e2      	cbz	r2, 7bd4 <mgmt_pop_event+0x50>
		return NULL;
	}

	o_idx = out_event;
	out_event++;
    7b9a:	1c5a      	adds	r2, r3, #1
    7b9c:	b212      	sxth	r2, r2
    7b9e:	490e      	ldr	r1, [pc, #56]	; (7bd8 <mgmt_pop_event+0x54>)
    7ba0:	800a      	strh	r2, [r1, #0]

	if (o_idx == in_event) {
    7ba2:	490f      	ldr	r1, [pc, #60]	; (7be0 <mgmt_pop_event+0x5c>)
    7ba4:	f9b1 1000 	ldrsh.w	r1, [r1]
    7ba8:	428b      	cmp	r3, r1
    7baa:	d006      	beq.n	7bba <mgmt_pop_event+0x36>
		in_event = -1;
		out_event = -1;
	} else if (out_event == CONFIG_NET_MGMT_EVENT_QUEUE_SIZE) {
    7bac:	2a02      	cmp	r2, #2
    7bae:	d00b      	beq.n	7bc8 <mgmt_pop_event+0x44>
		out_event = 0;
	}

	return &events[o_idx];
    7bb0:	222c      	movs	r2, #44	; 0x2c
    7bb2:	480a      	ldr	r0, [pc, #40]	; (7bdc <mgmt_pop_event+0x58>)
    7bb4:	fb02 0003 	mla	r0, r2, r3, r0
    7bb8:	4770      	bx	lr
		in_event = -1;
    7bba:	f64f 72ff 	movw	r2, #65535	; 0xffff
    7bbe:	4908      	ldr	r1, [pc, #32]	; (7be0 <mgmt_pop_event+0x5c>)
    7bc0:	800a      	strh	r2, [r1, #0]
		out_event = -1;
    7bc2:	4905      	ldr	r1, [pc, #20]	; (7bd8 <mgmt_pop_event+0x54>)
    7bc4:	800a      	strh	r2, [r1, #0]
    7bc6:	e7f3      	b.n	7bb0 <mgmt_pop_event+0x2c>
		out_event = 0;
    7bc8:	4a03      	ldr	r2, [pc, #12]	; (7bd8 <mgmt_pop_event+0x54>)
    7bca:	2100      	movs	r1, #0
    7bcc:	8011      	strh	r1, [r2, #0]
    7bce:	e7ef      	b.n	7bb0 <mgmt_pop_event+0x2c>
		return NULL;
    7bd0:	2000      	movs	r0, #0
    7bd2:	4770      	bx	lr
    7bd4:	2000      	movs	r0, #0
}
    7bd6:	4770      	bx	lr
    7bd8:	200042a0 	.word	0x200042a0
    7bdc:	20002970 	.word	0x20002970
    7be0:	200042a2 	.word	0x200042a2

00007be4 <mgmt_is_event_handled>:
}

static inline bool mgmt_is_event_handled(uint32_t mgmt_event)
{
	return (((NET_MGMT_GET_LAYER(mgmt_event) &
		  NET_MGMT_GET_LAYER(global_event_mask)) ==
    7be4:	4b0d      	ldr	r3, [pc, #52]	; (7c1c <mgmt_is_event_handled+0x38>)
    7be6:	681a      	ldr	r2, [r3, #0]
    7be8:	ea6f 7312 	mvn.w	r3, r2, lsr #28
    7bec:	ea03 7310 	and.w	r3, r3, r0, lsr #28
		 NET_MGMT_GET_LAYER(mgmt_event)) &&
		((NET_MGMT_GET_LAYER_CODE(mgmt_event) &
		  NET_MGMT_GET_LAYER_CODE(global_event_mask)) ==
		 NET_MGMT_GET_LAYER_CODE(mgmt_event)) &&
    7bf0:	f013 0f03 	tst.w	r3, #3
    7bf4:	d10c      	bne.n	7c10 <mgmt_is_event_handled+0x2c>
		  NET_MGMT_GET_LAYER_CODE(global_event_mask)) ==
    7bf6:	ea6f 4312 	mvn.w	r3, r2, lsr #16
    7bfa:	ea03 4310 	and.w	r3, r3, r0, lsr #16
    7bfe:	f3c3 030a 	ubfx	r3, r3, #0, #11
		 NET_MGMT_GET_LAYER(mgmt_event)) &&
    7c02:	b93b      	cbnz	r3, 7c14 <mgmt_is_event_handled+0x30>
		((NET_MGMT_GET_COMMAND(mgmt_event) &
		  NET_MGMT_GET_COMMAND(global_event_mask)) ==
    7c04:	ea20 0002 	bic.w	r0, r0, r2
    7c08:	b280      	uxth	r0, r0
		 NET_MGMT_GET_LAYER_CODE(mgmt_event)) &&
    7c0a:	b128      	cbz	r0, 7c18 <mgmt_is_event_handled+0x34>
    7c0c:	2000      	movs	r0, #0
    7c0e:	4770      	bx	lr
    7c10:	2000      	movs	r0, #0
    7c12:	4770      	bx	lr
    7c14:	2000      	movs	r0, #0
    7c16:	4770      	bx	lr
    7c18:	2001      	movs	r0, #1
		 NET_MGMT_GET_COMMAND(mgmt_event)));
}
    7c1a:	4770      	bx	lr
    7c1c:	2000296c 	.word	0x2000296c

00007c20 <mgmt_push_event>:
{
    7c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7c24:	4680      	mov	r8, r0
    7c26:	460f      	mov	r7, r1
    7c28:	4616      	mov	r6, r2
    7c2a:	461d      	mov	r5, r3
	return z_impl_k_mutex_lock(mutex, timeout);
    7c2c:	f04f 32ff 	mov.w	r2, #4294967295
    7c30:	f04f 33ff 	mov.w	r3, #4294967295
    7c34:	4829      	ldr	r0, [pc, #164]	; (7cdc <mgmt_push_event+0xbc>)
    7c36:	f009 f9eb 	bl	11010 <z_impl_k_mutex_lock>
	i_idx = in_event + 1;
    7c3a:	4b29      	ldr	r3, [pc, #164]	; (7ce0 <mgmt_push_event+0xc0>)
    7c3c:	881c      	ldrh	r4, [r3, #0]
    7c3e:	3401      	adds	r4, #1
    7c40:	b224      	sxth	r4, r4
	if (i_idx == CONFIG_NET_MGMT_EVENT_QUEUE_SIZE) {
    7c42:	2c02      	cmp	r4, #2
    7c44:	d014      	beq.n	7c70 <mgmt_push_event+0x50>
	if (info && length) {
    7c46:	b1ce      	cbz	r6, 7c7c <mgmt_push_event+0x5c>
    7c48:	b1c5      	cbz	r5, 7c7c <mgmt_push_event+0x5c>
		if (length <= NET_EVENT_INFO_MAX_SIZE) {
    7c4a:	2d20      	cmp	r5, #32
    7c4c:	d812      	bhi.n	7c74 <mgmt_push_event+0x54>
			memcpy(events[i_idx].info, info, length);
    7c4e:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    7c52:	fb0a fa04 	mul.w	sl, sl, r4
    7c56:	f10a 0008 	add.w	r0, sl, #8
    7c5a:	f8df 9088 	ldr.w	r9, [pc, #136]	; 7ce4 <mgmt_push_event+0xc4>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    7c5e:	462a      	mov	r2, r5
    7c60:	4631      	mov	r1, r6
    7c62:	4448      	add	r0, r9
    7c64:	f018 f8ad 	bl	1fdc2 <memcpy>
			events[i_idx].info_length = length;
    7c68:	44d1      	add	r9, sl
    7c6a:	f8c9 5028 	str.w	r5, [r9, #40]	; 0x28
		if (length <= NET_EVENT_INFO_MAX_SIZE) {
    7c6e:	e00b      	b.n	7c88 <mgmt_push_event+0x68>
		i_idx = 0;
    7c70:	2400      	movs	r4, #0
    7c72:	e7e8      	b.n	7c46 <mgmt_push_event+0x26>
	return z_impl_k_mutex_unlock(mutex);
    7c74:	4819      	ldr	r0, [pc, #100]	; (7cdc <mgmt_push_event+0xbc>)
    7c76:	f009 fa4f 	bl	11118 <z_impl_k_mutex_unlock>
			return;
    7c7a:	e019      	b.n	7cb0 <mgmt_push_event+0x90>
		events[i_idx].info_length = 0;
    7c7c:	4b19      	ldr	r3, [pc, #100]	; (7ce4 <mgmt_push_event+0xc4>)
    7c7e:	222c      	movs	r2, #44	; 0x2c
    7c80:	fb02 3304 	mla	r3, r2, r4, r3
    7c84:	2200      	movs	r2, #0
    7c86:	629a      	str	r2, [r3, #40]	; 0x28
	events[i_idx].event = mgmt_event;
    7c88:	4a16      	ldr	r2, [pc, #88]	; (7ce4 <mgmt_push_event+0xc4>)
    7c8a:	232c      	movs	r3, #44	; 0x2c
    7c8c:	fb04 f303 	mul.w	r3, r4, r3
    7c90:	18d1      	adds	r1, r2, r3
    7c92:	f842 8003 	str.w	r8, [r2, r3]
	events[i_idx].iface = iface;
    7c96:	604f      	str	r7, [r1, #4]
	if (i_idx == out_event) {
    7c98:	4b13      	ldr	r3, [pc, #76]	; (7ce8 <mgmt_push_event+0xc8>)
    7c9a:	f9b3 3000 	ldrsh.w	r3, [r3]
    7c9e:	429c      	cmp	r4, r3
    7ca0:	d008      	beq.n	7cb4 <mgmt_push_event+0x94>
	} else if (out_event < 0) {
    7ca2:	2b00      	cmp	r3, #0
    7ca4:	db17      	blt.n	7cd6 <mgmt_push_event+0xb6>
	in_event = i_idx;
    7ca6:	4b0e      	ldr	r3, [pc, #56]	; (7ce0 <mgmt_push_event+0xc0>)
    7ca8:	801c      	strh	r4, [r3, #0]
    7caa:	480c      	ldr	r0, [pc, #48]	; (7cdc <mgmt_push_event+0xbc>)
    7cac:	f009 fa34 	bl	11118 <z_impl_k_mutex_unlock>
}
    7cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint16_t o_idx = out_event + 1;
    7cb4:	b29b      	uxth	r3, r3
    7cb6:	3301      	adds	r3, #1
    7cb8:	b29b      	uxth	r3, r3
		if (o_idx == CONFIG_NET_MGMT_EVENT_QUEUE_SIZE) {
    7cba:	2b02      	cmp	r3, #2
    7cbc:	d009      	beq.n	7cd2 <mgmt_push_event+0xb2>
		if (events[o_idx].event) {
    7cbe:	222c      	movs	r2, #44	; 0x2c
    7cc0:	fb03 f202 	mul.w	r2, r3, r2
    7cc4:	4907      	ldr	r1, [pc, #28]	; (7ce4 <mgmt_push_event+0xc4>)
    7cc6:	588a      	ldr	r2, [r1, r2]
    7cc8:	2a00      	cmp	r2, #0
    7cca:	d0ec      	beq.n	7ca6 <mgmt_push_event+0x86>
			out_event = o_idx;
    7ccc:	4a06      	ldr	r2, [pc, #24]	; (7ce8 <mgmt_push_event+0xc8>)
    7cce:	8013      	strh	r3, [r2, #0]
    7cd0:	e7e9      	b.n	7ca6 <mgmt_push_event+0x86>
			o_idx = 0U;
    7cd2:	2300      	movs	r3, #0
    7cd4:	e7f3      	b.n	7cbe <mgmt_push_event+0x9e>
		out_event = i_idx;
    7cd6:	4b04      	ldr	r3, [pc, #16]	; (7ce8 <mgmt_push_event+0xc8>)
    7cd8:	801c      	strh	r4, [r3, #0]
    7cda:	e7e4      	b.n	7ca6 <mgmt_push_event+0x86>
    7cdc:	200004c4 	.word	0x200004c4
    7ce0:	200042a2 	.word	0x200042a2
    7ce4:	20002970 	.word	0x20002970
    7ce8:	200042a0 	.word	0x200042a0

00007cec <mgmt_run_callbacks>:

static inline void mgmt_run_callbacks(struct mgmt_event_entry *mgmt_event)
{
    7cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7cee:	4606      	mov	r6, r0
    7cf0:	4b2c      	ldr	r3, [pc, #176]	; (7da4 <mgmt_run_callbacks+0xb8>)
    7cf2:	681c      	ldr	r4, [r3, #0]
	NET_DBG("Event layer %u code %u cmd %u",
		NET_MGMT_GET_LAYER(mgmt_event->event),
		NET_MGMT_GET_LAYER_CODE(mgmt_event->event),
		NET_MGMT_GET_COMMAND(mgmt_event->event));

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
    7cf4:	b134      	cbz	r4, 7d04 <mgmt_run_callbacks+0x18>
	return node->next;
    7cf6:	6825      	ldr	r5, [r4, #0]
    7cf8:	b105      	cbz	r5, 7cfc <mgmt_run_callbacks+0x10>
Z_GENLIST_PEEK_NEXT(slist, snode)
    7cfa:	b10c      	cbz	r4, 7d00 <mgmt_run_callbacks+0x14>
    7cfc:	2700      	movs	r7, #0
    7cfe:	e015      	b.n	7d2c <mgmt_run_callbacks+0x40>
    7d00:	4625      	mov	r5, r4
    7d02:	e7fb      	b.n	7cfc <mgmt_run_callbacks+0x10>
    7d04:	4625      	mov	r5, r4
    7d06:	e7f9      	b.n	7cfc <mgmt_run_callbacks+0x10>
#ifdef CONFIG_NET_MGMT_EVENT_INFO
		if (mgmt_event->info_length) {
			cb->info = (void *)mgmt_event->info;
			cb->info_length = mgmt_event->info_length;
		} else {
			cb->info = NULL;
    7d08:	2300      	movs	r3, #0
    7d0a:	60a3      	str	r3, [r4, #8]
			cb->info_length = 0;
    7d0c:	60e3      	str	r3, [r4, #12]
    7d0e:	e02e      	b.n	7d6e <mgmt_run_callbacks+0x82>
			k_sem_give(cb->sync_call);
		} else {
			NET_DBG("Running callback %p : %p",
				cb, cb->handler);

			cb->handler(cb, mgmt_event->event, mgmt_event->iface);
    7d10:	6863      	ldr	r3, [r4, #4]
    7d12:	6872      	ldr	r2, [r6, #4]
    7d14:	6831      	ldr	r1, [r6, #0]
    7d16:	4620      	mov	r0, r4
    7d18:	4798      	blx	r3
			prev = &cb->node;
    7d1a:	4627      	mov	r7, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
    7d1c:	2d00      	cmp	r5, #0
    7d1e:	d03e      	beq.n	7d9e <mgmt_run_callbacks+0xb2>
	return node->next;
    7d20:	682b      	ldr	r3, [r5, #0]
    7d22:	b10b      	cbz	r3, 7d28 <mgmt_run_callbacks+0x3c>
Z_GENLIST_PEEK_NEXT(slist, snode)
    7d24:	2d00      	cmp	r5, #0
    7d26:	d038      	beq.n	7d9a <mgmt_run_callbacks+0xae>
    7d28:	462c      	mov	r4, r5
    7d2a:	461d      	mov	r5, r3
    7d2c:	2c00      	cmp	r4, #0
    7d2e:	d038      	beq.n	7da2 <mgmt_run_callbacks+0xb6>
		if (!(NET_MGMT_GET_LAYER(mgmt_event->event) ==
    7d30:	6832      	ldr	r2, [r6, #0]
		      NET_MGMT_GET_LAYER(cb->event_mask)) ||
    7d32:	6921      	ldr	r1, [r4, #16]
    7d34:	0f0b      	lsrs	r3, r1, #28
		if (!(NET_MGMT_GET_LAYER(mgmt_event->event) ==
    7d36:	ea83 7312 	eor.w	r3, r3, r2, lsr #28
    7d3a:	f013 0f03 	tst.w	r3, #3
    7d3e:	d1ed      	bne.n	7d1c <mgmt_run_callbacks+0x30>
		      NET_MGMT_GET_LAYER_CODE(cb->event_mask)) ||
    7d40:	0c0b      	lsrs	r3, r1, #16
		    !(NET_MGMT_GET_LAYER_CODE(mgmt_event->event) ==
    7d42:	ea83 4312 	eor.w	r3, r3, r2, lsr #16
    7d46:	f3c3 030a 	ubfx	r3, r3, #0, #11
		      NET_MGMT_GET_LAYER(cb->event_mask)) ||
    7d4a:	2b00      	cmp	r3, #0
    7d4c:	d1e6      	bne.n	7d1c <mgmt_run_callbacks+0x30>
		    (NET_MGMT_GET_COMMAND(mgmt_event->event) &&
    7d4e:	b293      	uxth	r3, r2
		      NET_MGMT_GET_LAYER_CODE(cb->event_mask)) ||
    7d50:	b12b      	cbz	r3, 7d5e <mgmt_run_callbacks+0x72>
		     NET_MGMT_GET_COMMAND(cb->event_mask) &&
    7d52:	b28b      	uxth	r3, r1
		    (NET_MGMT_GET_COMMAND(mgmt_event->event) &&
    7d54:	b11b      	cbz	r3, 7d5e <mgmt_run_callbacks+0x72>
		     !(NET_MGMT_GET_COMMAND(mgmt_event->event) &
    7d56:	400a      	ands	r2, r1
    7d58:	b292      	uxth	r2, r2
		     NET_MGMT_GET_COMMAND(cb->event_mask) &&
    7d5a:	2a00      	cmp	r2, #0
    7d5c:	d0de      	beq.n	7d1c <mgmt_run_callbacks+0x30>
		if (mgmt_event->info_length) {
    7d5e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    7d60:	2b00      	cmp	r3, #0
    7d62:	d0d1      	beq.n	7d08 <mgmt_run_callbacks+0x1c>
			cb->info = (void *)mgmt_event->info;
    7d64:	f106 0308 	add.w	r3, r6, #8
    7d68:	60a3      	str	r3, [r4, #8]
			cb->info_length = mgmt_event->info_length;
    7d6a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    7d6c:	60e3      	str	r3, [r4, #12]
		if (NET_MGMT_EVENT_SYNCHRONOUS(cb->event_mask)) {
    7d6e:	f011 6f00 	tst.w	r1, #134217728	; 0x8000000
    7d72:	d0cd      	beq.n	7d10 <mgmt_run_callbacks+0x24>
			struct mgmt_event_wait *sync_data =
    7d74:	6862      	ldr	r2, [r4, #4]
			if (sync_data->iface &&
    7d76:	6993      	ldr	r3, [r2, #24]
    7d78:	b113      	cbz	r3, 7d80 <mgmt_run_callbacks+0x94>
			    sync_data->iface != mgmt_event->iface) {
    7d7a:	6871      	ldr	r1, [r6, #4]
			if (sync_data->iface &&
    7d7c:	428b      	cmp	r3, r1
    7d7e:	d1cd      	bne.n	7d1c <mgmt_run_callbacks+0x30>
			cb->raised_event = mgmt_event->event;
    7d80:	6833      	ldr	r3, [r6, #0]
    7d82:	6123      	str	r3, [r4, #16]
			sync_data->iface = mgmt_event->iface;
    7d84:	6873      	ldr	r3, [r6, #4]
    7d86:	6193      	str	r3, [r2, #24]
			sys_slist_remove(&event_callbacks, prev, &cb->node);
    7d88:	4622      	mov	r2, r4
    7d8a:	4639      	mov	r1, r7
    7d8c:	4805      	ldr	r0, [pc, #20]	; (7da4 <mgmt_run_callbacks+0xb8>)
    7d8e:	f013 fcf8 	bl	1b782 <sys_slist_remove>
			k_sem_give(cb->sync_call);
    7d92:	6860      	ldr	r0, [r4, #4]
	z_impl_k_sem_give(sem);
    7d94:	f009 fa3c 	bl	11210 <z_impl_k_sem_give>
}
    7d98:	e7c0      	b.n	7d1c <mgmt_run_callbacks+0x30>
    7d9a:	462b      	mov	r3, r5
    7d9c:	e7c4      	b.n	7d28 <mgmt_run_callbacks+0x3c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
    7d9e:	462b      	mov	r3, r5
    7da0:	e7c2      	b.n	7d28 <mgmt_run_callbacks+0x3c>
	}

#ifdef CONFIG_NET_DEBUG_MGMT_EVENT_STACK
	log_stack_usage(&mgmt_thread_data);
#endif
}
    7da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7da4:	20002964 	.word	0x20002964

00007da8 <mgmt_thread>:

static void mgmt_thread(void)
{
    7da8:	b538      	push	{r3, r4, r5, lr}
    7daa:	e00a      	b.n	7dc2 <mgmt_thread+0x1a>
    7dac:	4604      	mov	r4, r0
			(void)k_mutex_unlock(&net_mgmt_lock);

			continue;
		}

		mgmt_run_callbacks(mgmt_event);
    7dae:	f7ff ff9d 	bl	7cec <mgmt_run_callbacks>
	mgmt_event->event = 0U;
    7db2:	2300      	movs	r3, #0
    7db4:	6023      	str	r3, [r4, #0]
	mgmt_event->iface = NULL;
    7db6:	6063      	str	r3, [r4, #4]
	return z_impl_k_mutex_unlock(mutex);
    7db8:	4810      	ldr	r0, [pc, #64]	; (7dfc <mgmt_thread+0x54>)
    7dba:	f009 f9ad 	bl	11118 <z_impl_k_mutex_unlock>
	z_impl_k_yield();
    7dbe:	f009 fed9 	bl	11b74 <z_impl_k_yield>
		k_sem_take(&network_event, K_FOREVER);
    7dc2:	f04f 34ff 	mov.w	r4, #4294967295
    7dc6:	f04f 35ff 	mov.w	r5, #4294967295
	return z_impl_k_sem_take(sem, timeout);
    7dca:	4622      	mov	r2, r4
    7dcc:	462b      	mov	r3, r5
    7dce:	480c      	ldr	r0, [pc, #48]	; (7e00 <mgmt_thread+0x58>)
    7dd0:	f009 fa46 	bl	11260 <z_impl_k_sem_take>
	return z_impl_k_mutex_lock(mutex, timeout);
    7dd4:	4622      	mov	r2, r4
    7dd6:	462b      	mov	r3, r5
    7dd8:	4808      	ldr	r0, [pc, #32]	; (7dfc <mgmt_thread+0x54>)
    7dda:	f009 f919 	bl	11010 <z_impl_k_mutex_lock>
		mgmt_event = mgmt_pop_event();
    7dde:	f7ff fed1 	bl	7b84 <mgmt_pop_event>
		if (!mgmt_event) {
    7de2:	2800      	cmp	r0, #0
    7de4:	d1e2      	bne.n	7dac <mgmt_thread+0x4>
	return z_impl_k_sem_init(sem, initial_count, limit);
    7de6:	f04f 32ff 	mov.w	r2, #4294967295
    7dea:	2100      	movs	r1, #0
    7dec:	4804      	ldr	r0, [pc, #16]	; (7e00 <mgmt_thread+0x58>)
    7dee:	f017 fa03 	bl	1f1f8 <z_impl_k_sem_init>
	return z_impl_k_mutex_unlock(mutex);
    7df2:	4802      	ldr	r0, [pc, #8]	; (7dfc <mgmt_thread+0x54>)
    7df4:	f009 f990 	bl	11118 <z_impl_k_mutex_unlock>
			continue;
    7df8:	e7e3      	b.n	7dc2 <mgmt_thread+0x1a>
    7dfa:	bf00      	nop
    7dfc:	200004c4 	.word	0x200004c4
    7e00:	2000059c 	.word	0x2000059c

00007e04 <net_mgmt_add_event_callback>:

	return ret;
}

void net_mgmt_add_event_callback(struct net_mgmt_event_callback *cb)
{
    7e04:	b510      	push	{r4, lr}
    7e06:	4604      	mov	r4, r0
	return z_impl_k_mutex_lock(mutex, timeout);
    7e08:	f04f 32ff 	mov.w	r2, #4294967295
    7e0c:	f04f 33ff 	mov.w	r3, #4294967295
    7e10:	480a      	ldr	r0, [pc, #40]	; (7e3c <net_mgmt_add_event_callback+0x38>)
    7e12:	f009 f8fd 	bl	11010 <z_impl_k_mutex_lock>
	return list->head;
    7e16:	4b0a      	ldr	r3, [pc, #40]	; (7e40 <net_mgmt_add_event_callback+0x3c>)
    7e18:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
    7e1a:	6022      	str	r2, [r4, #0]
	list->head = node;
    7e1c:	601c      	str	r4, [r3, #0]
	return list->tail;
    7e1e:	685b      	ldr	r3, [r3, #4]
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node);

Z_GENLIST_PREPEND(slist, snode)
    7e20:	b143      	cbz	r3, 7e34 <net_mgmt_add_event_callback+0x30>

	(void)k_mutex_lock(&net_mgmt_lock, K_FOREVER);

	sys_slist_prepend(&event_callbacks, &cb->node);

	mgmt_add_event_mask(cb->event_mask);
    7e22:	6921      	ldr	r1, [r4, #16]
	global_event_mask |= event_mask;
    7e24:	4a07      	ldr	r2, [pc, #28]	; (7e44 <net_mgmt_add_event_callback+0x40>)
    7e26:	6813      	ldr	r3, [r2, #0]
    7e28:	430b      	orrs	r3, r1
    7e2a:	6013      	str	r3, [r2, #0]
	return z_impl_k_mutex_unlock(mutex);
    7e2c:	4803      	ldr	r0, [pc, #12]	; (7e3c <net_mgmt_add_event_callback+0x38>)
    7e2e:	f009 f973 	bl	11118 <z_impl_k_mutex_unlock>

	(void)k_mutex_unlock(&net_mgmt_lock);
}
    7e32:	bd10      	pop	{r4, pc}
	list->tail = node;
    7e34:	4b02      	ldr	r3, [pc, #8]	; (7e40 <net_mgmt_add_event_callback+0x3c>)
    7e36:	605c      	str	r4, [r3, #4]
}
    7e38:	e7f3      	b.n	7e22 <net_mgmt_add_event_callback+0x1e>
    7e3a:	bf00      	nop
    7e3c:	200004c4 	.word	0x200004c4
    7e40:	20002964 	.word	0x20002964
    7e44:	2000296c 	.word	0x2000296c

00007e48 <net_mgmt_event_notify_with_info>:
	(void)k_mutex_unlock(&net_mgmt_lock);
}

void net_mgmt_event_notify_with_info(uint32_t mgmt_event, struct net_if *iface,
				     const void *info, size_t length)
{
    7e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7e4a:	4604      	mov	r4, r0
    7e4c:	460d      	mov	r5, r1
    7e4e:	4616      	mov	r6, r2
    7e50:	461f      	mov	r7, r3
	if (mgmt_is_event_handled(mgmt_event)) {
    7e52:	f7ff fec7 	bl	7be4 <mgmt_is_event_handled>
    7e56:	b900      	cbnz	r0, 7e5a <net_mgmt_event_notify_with_info+0x12>
			NET_MGMT_GET_COMMAND(mgmt_event));

		mgmt_push_event(mgmt_event, iface, info, length);
		k_sem_give(&network_event);
	}
}
    7e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		mgmt_push_event(mgmt_event, iface, info, length);
    7e5a:	463b      	mov	r3, r7
    7e5c:	4632      	mov	r2, r6
    7e5e:	4629      	mov	r1, r5
    7e60:	4620      	mov	r0, r4
    7e62:	f7ff fedd 	bl	7c20 <mgmt_push_event>
	z_impl_k_sem_give(sem);
    7e66:	4802      	ldr	r0, [pc, #8]	; (7e70 <net_mgmt_event_notify_with_info+0x28>)
    7e68:	f009 f9d2 	bl	11210 <z_impl_k_sem_give>
}
    7e6c:	e7f4      	b.n	7e58 <net_mgmt_event_notify_with_info+0x10>
    7e6e:	bf00      	nop
    7e70:	2000059c 	.word	0x2000059c

00007e74 <net_mgmt_event_init>:
				    raised_event, NULL, info, info_length,
				    timeout);
}

void net_mgmt_event_init(void)
{
    7e74:	b510      	push	{r4, lr}
    7e76:	b088      	sub	sp, #32
	in_event = -1;
    7e78:	f64f 73ff 	movw	r3, #65535	; 0xffff
    7e7c:	4a11      	ldr	r2, [pc, #68]	; (7ec4 <net_mgmt_event_init+0x50>)
    7e7e:	8013      	strh	r3, [r2, #0]
	out_event = -1;
    7e80:	4a11      	ldr	r2, [pc, #68]	; (7ec8 <net_mgmt_event_init+0x54>)
    7e82:	8013      	strh	r3, [r2, #0]

	(void)memset(events, 0, CONFIG_NET_MGMT_EVENT_QUEUE_SIZE *
    7e84:	2258      	movs	r2, #88	; 0x58
    7e86:	2100      	movs	r1, #0
    7e88:	4810      	ldr	r0, [pc, #64]	; (7ecc <net_mgmt_event_init+0x58>)
    7e8a:	f017 ffd5 	bl	1fe38 <memset>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    7e8e:	4c10      	ldr	r4, [pc, #64]	; (7ed0 <net_mgmt_event_init+0x5c>)
    7e90:	2200      	movs	r2, #0
    7e92:	2300      	movs	r3, #0
    7e94:	e9cd 2306 	strd	r2, r3, [sp, #24]
    7e98:	2300      	movs	r3, #0
    7e9a:	9304      	str	r3, [sp, #16]
    7e9c:	f04f 32ff 	mov.w	r2, #4294967295
    7ea0:	9203      	str	r2, [sp, #12]
    7ea2:	9302      	str	r3, [sp, #8]
    7ea4:	9301      	str	r3, [sp, #4]
    7ea6:	9300      	str	r3, [sp, #0]
    7ea8:	4b0a      	ldr	r3, [pc, #40]	; (7ed4 <net_mgmt_event_init+0x60>)
    7eaa:	f44f 7240 	mov.w	r2, #768	; 0x300
    7eae:	490a      	ldr	r1, [pc, #40]	; (7ed8 <net_mgmt_event_init+0x64>)
    7eb0:	4620      	mov	r0, r4
    7eb2:	f017 f87e 	bl	1efb2 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    7eb6:	4909      	ldr	r1, [pc, #36]	; (7edc <net_mgmt_event_init+0x68>)
    7eb8:	4620      	mov	r0, r4
    7eba:	f017 f866 	bl	1ef8a <z_impl_k_thread_name_set>
	k_thread_name_set(&mgmt_thread_data, "net_mgmt");

	NET_DBG("Net MGMT initialized: queue of %u entries, stack size of %u",
		CONFIG_NET_MGMT_EVENT_QUEUE_SIZE,
		CONFIG_NET_MGMT_EVENT_STACK_SIZE);
}
    7ebe:	b008      	add	sp, #32
    7ec0:	bd10      	pop	{r4, pc}
    7ec2:	bf00      	nop
    7ec4:	200042a2 	.word	0x200042a2
    7ec8:	200042a0 	.word	0x200042a0
    7ecc:	20002970 	.word	0x20002970
    7ed0:	20000cc0 	.word	0x20000cc0
    7ed4:	00007da9 	.word	0x00007da9
    7ed8:	20004b98 	.word	0x20004b98
    7edc:	000216f4 	.word	0x000216f4

00007ee0 <conn_get_unused>:
	return list->head;
    7ee0:	4b06      	ldr	r3, [pc, #24]	; (7efc <conn_get_unused+0x1c>)
    7ee2:	6818      	ldr	r0, [r3, #0]
static struct net_conn *conn_get_unused(void)
{
	sys_snode_t *node;

	node = sys_slist_peek_head(&conn_unused);
	if (!node) {
    7ee4:	b130      	cbz	r0, 7ef4 <conn_get_unused+0x14>
	return node->next;
    7ee6:	6802      	ldr	r2, [r0, #0]
	list->head = node;
    7ee8:	601a      	str	r2, [r3, #0]
	return list->tail;
    7eea:	685b      	ldr	r3, [r3, #4]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    7eec:	4298      	cmp	r0, r3
    7eee:	d002      	beq.n	7ef6 <conn_get_unused+0x16>
	parent->next = child;
    7ef0:	2300      	movs	r3, #0
    7ef2:	6003      	str	r3, [r0, #0]
	}

	sys_slist_remove(&conn_unused, NULL, node);

	return CONTAINER_OF(node, struct net_conn, node);
}
    7ef4:	4770      	bx	lr
	list->tail = node;
    7ef6:	4b01      	ldr	r3, [pc, #4]	; (7efc <conn_get_unused+0x1c>)
    7ef8:	605a      	str	r2, [r3, #4]
}
    7efa:	e7f9      	b.n	7ef0 <conn_get_unused+0x10>
    7efc:	200029d0 	.word	0x200029d0

00007f00 <conn_set_used>:

static void conn_set_used(struct net_conn *conn)
{
	conn->flags |= NET_CONN_IN_USE;
    7f00:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    7f04:	f043 0301 	orr.w	r3, r3, #1
    7f08:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
	return list->head;
    7f0c:	4b04      	ldr	r3, [pc, #16]	; (7f20 <conn_set_used+0x20>)
    7f0e:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
    7f10:	6002      	str	r2, [r0, #0]
	list->head = node;
    7f12:	6018      	str	r0, [r3, #0]
	return list->tail;
    7f14:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    7f16:	b103      	cbz	r3, 7f1a <conn_set_used+0x1a>

	sys_slist_prepend(&conn_used, &conn->node);
}
    7f18:	4770      	bx	lr
	list->tail = node;
    7f1a:	4b01      	ldr	r3, [pc, #4]	; (7f20 <conn_set_used+0x20>)
    7f1c:	6058      	str	r0, [r3, #4]
    7f1e:	e7fb      	b.n	7f18 <conn_set_used+0x18>
    7f20:	200029c8 	.word	0x200029c8

00007f24 <conn_find_handler>:
static struct net_conn *conn_find_handler(uint16_t proto, uint8_t family,
					  const struct sockaddr *remote_addr,
					  const struct sockaddr *local_addr,
					  uint16_t remote_port,
					  uint16_t local_port)
{
    7f24:	b5f0      	push	{r4, r5, r6, r7, lr}
    7f26:	4684      	mov	ip, r0
    7f28:	f8bd e014 	ldrh.w	lr, [sp, #20]
    7f2c:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	return list->head;
    7f30:	482c      	ldr	r0, [pc, #176]	; (7fe4 <conn_find_handler+0xc0>)
    7f32:	6800      	ldr	r0, [r0, #0]
	struct net_conn *conn;
	struct net_conn *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn_used, conn, tmp, node) {
    7f34:	2800      	cmp	r0, #0
    7f36:	d051      	beq.n	7fdc <conn_find_handler+0xb8>
	return node->next;
    7f38:	6804      	ldr	r4, [r0, #0]
    7f3a:	b1f4      	cbz	r4, 7f7a <conn_find_handler+0x56>
Z_GENLIST_PEEK_NEXT(slist, snode)
    7f3c:	b9e8      	cbnz	r0, 7f7a <conn_find_handler+0x56>
    7f3e:	4604      	mov	r4, r0
    7f40:	e01b      	b.n	7f7a <conn_find_handler+0x56>
					continue;
				}
			} else {
				continue;
			}
		} else if (conn->flags & NET_CONN_REMOTE_ADDR_SET) {
    7f42:	f890 5023 	ldrb.w	r5, [r0, #35]	; 0x23
    7f46:	f015 0f02 	tst.w	r5, #2
    7f4a:	d10f      	bne.n	7f6c <conn_find_handler+0x48>
			continue;
		}

		if (local_addr) {
    7f4c:	b37b      	cbz	r3, 7fae <conn_find_handler+0x8a>
			if (!(conn->flags & NET_CONN_LOCAL_ADDR_SET)) {
    7f4e:	f890 5023 	ldrb.w	r5, [r0, #35]	; 0x23
    7f52:	f015 0f04 	tst.w	r5, #4
    7f56:	d009      	beq.n	7f6c <conn_find_handler+0x48>
					    &net_sin6(&conn->local_addr)->
								sin6_addr)) {
					continue;
				}
			} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
				   local_addr->sa_family == AF_INET &&
    7f58:	881d      	ldrh	r5, [r3, #0]
			} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
    7f5a:	2d01      	cmp	r5, #1
    7f5c:	d106      	bne.n	7f6c <conn_find_handler+0x48>
				   local_addr->sa_family ==
				   conn->local_addr.sa_family) {
    7f5e:	8987      	ldrh	r7, [r0, #12]
				   local_addr->sa_family == AF_INET &&
    7f60:	42bd      	cmp	r5, r7
    7f62:	d103      	bne.n	7f6c <conn_find_handler+0x48>
    7f64:	685d      	ldr	r5, [r3, #4]
    7f66:	6907      	ldr	r7, [r0, #16]
				if (!net_ipv4_addr_cmp(
    7f68:	42af      	cmp	r7, r5
    7f6a:	d025      	beq.n	7fb8 <conn_find_handler+0x94>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn_used, conn, tmp, node) {
    7f6c:	2c00      	cmp	r4, #0
    7f6e:	d037      	beq.n	7fe0 <conn_find_handler+0xbc>
	return node->next;
    7f70:	6825      	ldr	r5, [r4, #0]
    7f72:	b105      	cbz	r5, 7f76 <conn_find_handler+0x52>
Z_GENLIST_PEEK_NEXT(slist, snode)
    7f74:	b384      	cbz	r4, 7fd8 <conn_find_handler+0xb4>
    7f76:	4620      	mov	r0, r4
    7f78:	462c      	mov	r4, r5
    7f7a:	b360      	cbz	r0, 7fd6 <conn_find_handler+0xb2>
		if (conn->proto != proto) {
    7f7c:	8c05      	ldrh	r5, [r0, #32]
    7f7e:	4565      	cmp	r5, ip
    7f80:	d1f4      	bne.n	7f6c <conn_find_handler+0x48>
		if (conn->family != family) {
    7f82:	f890 5022 	ldrb.w	r5, [r0, #34]	; 0x22
    7f86:	428d      	cmp	r5, r1
    7f88:	d1f0      	bne.n	7f6c <conn_find_handler+0x48>
		if (remote_addr) {
    7f8a:	2a00      	cmp	r2, #0
    7f8c:	d0d9      	beq.n	7f42 <conn_find_handler+0x1e>
			if (!(conn->flags & NET_CONN_REMOTE_ADDR_SET)) {
    7f8e:	f890 5023 	ldrb.w	r5, [r0, #35]	; 0x23
    7f92:	f015 0f02 	tst.w	r5, #2
    7f96:	d0e9      	beq.n	7f6c <conn_find_handler+0x48>
				   remote_addr->sa_family == AF_INET &&
    7f98:	8815      	ldrh	r5, [r2, #0]
			} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
    7f9a:	2d01      	cmp	r5, #1
    7f9c:	d1e6      	bne.n	7f6c <conn_find_handler+0x48>
				   conn->remote_addr.sa_family) {
    7f9e:	8887      	ldrh	r7, [r0, #4]
				   remote_addr->sa_family == AF_INET &&
    7fa0:	42bd      	cmp	r5, r7
    7fa2:	d1e3      	bne.n	7f6c <conn_find_handler+0x48>
    7fa4:	6855      	ldr	r5, [r2, #4]
    7fa6:	6887      	ldr	r7, [r0, #8]
				if (!net_ipv4_addr_cmp(
    7fa8:	42af      	cmp	r7, r5
    7faa:	d0cf      	beq.n	7f4c <conn_find_handler+0x28>
    7fac:	e7de      	b.n	7f6c <conn_find_handler+0x48>
					continue;
				}
			} else {
				continue;
			}
		} else if (conn->flags & NET_CONN_LOCAL_ADDR_SET) {
    7fae:	f890 5023 	ldrb.w	r5, [r0, #35]	; 0x23
    7fb2:	f015 0f04 	tst.w	r5, #4
    7fb6:	d1d9      	bne.n	7f6c <conn_find_handler+0x48>
			continue;
		}

		if (net_sin(&conn->remote_addr)->sin_port !=
    7fb8:	88c7      	ldrh	r7, [r0, #6]
		    htons(remote_port)) {
    7fba:	ea4f 250e 	mov.w	r5, lr, lsl #8
		if (net_sin(&conn->remote_addr)->sin_port !=
    7fbe:	ea45 251e 	orr.w	r5, r5, lr, lsr #8
    7fc2:	b2ad      	uxth	r5, r5
    7fc4:	42af      	cmp	r7, r5
    7fc6:	d1d1      	bne.n	7f6c <conn_find_handler+0x48>
			continue;
		}

		if (net_sin(&conn->local_addr)->sin_port !=
    7fc8:	89c7      	ldrh	r7, [r0, #14]
		    htons(local_port)) {
    7fca:	0235      	lsls	r5, r6, #8
		if (net_sin(&conn->local_addr)->sin_port !=
    7fcc:	ea45 2516 	orr.w	r5, r5, r6, lsr #8
    7fd0:	b2ad      	uxth	r5, r5
    7fd2:	42af      	cmp	r7, r5
    7fd4:	d1ca      	bne.n	7f6c <conn_find_handler+0x48>

		return conn;
	}

	return NULL;
}
    7fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7fd8:	4625      	mov	r5, r4
    7fda:	e7cc      	b.n	7f76 <conn_find_handler+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn_used, conn, tmp, node) {
    7fdc:	4604      	mov	r4, r0
    7fde:	e7cc      	b.n	7f7a <conn_find_handler+0x56>
    7fe0:	4625      	mov	r5, r4
    7fe2:	e7c8      	b.n	7f76 <conn_find_handler+0x52>
    7fe4:	200029c8 	.word	0x200029c8

00007fe8 <conn_set_unused>:
{
    7fe8:	b510      	push	{r4, lr}
    7fea:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
    7fec:	2224      	movs	r2, #36	; 0x24
    7fee:	2100      	movs	r1, #0
    7ff0:	f017 ff22 	bl	1fe38 <memset>
	return list->head;
    7ff4:	4b04      	ldr	r3, [pc, #16]	; (8008 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8>)
    7ff6:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
    7ff8:	6022      	str	r2, [r4, #0]
	list->head = node;
    7ffa:	601c      	str	r4, [r3, #0]
	return list->tail;
    7ffc:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    7ffe:	b103      	cbz	r3, 8002 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2>
}
    8000:	bd10      	pop	{r4, pc}
	list->tail = node;
    8002:	4b01      	ldr	r3, [pc, #4]	; (8008 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8>)
    8004:	605c      	str	r4, [r3, #4]
    8006:	e7fb      	b.n	8000 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE>
    8008:	200029d0 	.word	0x200029d0

0000800c <net_conn_unregister>:

int net_conn_unregister(struct net_conn_handle *handle)
{
	struct net_conn *conn = (struct net_conn *)handle;

	if (conn < &conns[0] || conn > &conns[CONFIG_NET_MAX_CONN]) {
    800c:	4b0f      	ldr	r3, [pc, #60]	; (804c <net_conn_unregister+0x40>)
    800e:	4298      	cmp	r0, r3
    8010:	d312      	bcc.n	8038 <net_conn_unregister+0x2c>
{
    8012:	b510      	push	{r4, lr}
    8014:	4604      	mov	r4, r0
	if (conn < &conns[0] || conn > &conns[CONFIG_NET_MAX_CONN]) {
    8016:	3390      	adds	r3, #144	; 0x90
    8018:	4298      	cmp	r0, r3
    801a:	d810      	bhi.n	803e <net_conn_unregister+0x32>
		return -EINVAL;
	}

	if (!(conn->flags & NET_CONN_IN_USE)) {
    801c:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    8020:	f013 0f01 	tst.w	r3, #1
    8024:	d00e      	beq.n	8044 <net_conn_unregister+0x38>
		return -ENOENT;
	}

	NET_DBG("Connection handler %p removed", conn);

	sys_slist_find_and_remove(&conn_used, &conn->node);
    8026:	4601      	mov	r1, r0
    8028:	4809      	ldr	r0, [pc, #36]	; (8050 <net_conn_unregister+0x44>)
    802a:	f013 fc37 	bl	1b89c <sys_slist_find_and_remove>

	conn_set_unused(conn);
    802e:	4620      	mov	r0, r4
    8030:	f7ff ffda 	bl	7fe8 <conn_set_unused>

	return 0;
    8034:	2000      	movs	r0, #0
}
    8036:	bd10      	pop	{r4, pc}
		return -EINVAL;
    8038:	f06f 0015 	mvn.w	r0, #21
}
    803c:	4770      	bx	lr
		return -EINVAL;
    803e:	f06f 0015 	mvn.w	r0, #21
    8042:	e7f8      	b.n	8036 <net_conn_unregister+0x2a>
		return -ENOENT;
    8044:	f06f 0001 	mvn.w	r0, #1
    8048:	e7f5      	b.n	8036 <net_conn_unregister+0x2a>
    804a:	bf00      	nop
    804c:	200029d8 	.word	0x200029d8
    8050:	200029c8 	.word	0x200029c8

00008054 <net_conn_input>:

enum net_verdict net_conn_input(struct net_pkt *pkt,
				union net_ip_header *ip_hdr,
				uint8_t proto,
				union net_proto_header *proto_hdr)
{
    8054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8058:	b089      	sub	sp, #36	; 0x24
    805a:	9304      	str	r3, [sp, #16]
	return pkt->iface;
    805c:	6984      	ldr	r4, [r0, #24]
	return pkt->family;
    805e:	f890 6037 	ldrb.w	r6, [r0, #55]	; 0x37
    8062:	0976      	lsrs	r6, r6, #5
	struct net_if *pkt_iface = net_pkt_iface(pkt);
	uint8_t pkt_family = net_pkt_family(pkt);
	uint16_t src_port = 0U, dst_port = 0U;

	if (IS_ENABLED(CONFIG_NET_IP) && (pkt_family == AF_INET || pkt_family == AF_INET6)) {
    8064:	1e73      	subs	r3, r6, #1
    8066:	b2db      	uxtb	r3, r3
    8068:	2b01      	cmp	r3, #1
    806a:	f200 80ea 	bhi.w	8242 <net_conn_input+0x1ee>
    806e:	4607      	mov	r7, r0
    8070:	4688      	mov	r8, r1
    8072:	4615      	mov	r5, r2
		if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
    8074:	2a11      	cmp	r2, #17
    8076:	d01f      	beq.n	80b8 <net_conn_input+0x64>
			src_port = proto_hdr->udp->src_port;
			dst_port = proto_hdr->udp->dst_port;
		} else if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
    8078:	2a06      	cmp	r2, #6
    807a:	d024      	beq.n	80c6 <net_conn_input+0x72>
	uint16_t src_port = 0U, dst_port = 0U;
    807c:	2300      	movs	r3, #0
    807e:	9303      	str	r3, [sp, #12]
    8080:	469a      	mov	sl, r3
				return NET_DROP;
			}
			src_port = proto_hdr->tcp->src_port;
			dst_port = proto_hdr->tcp->dst_port;
		}
		if (!conn_are_endpoints_valid(pkt, pkt_family, ip_hdr, src_port, dst_port)) {
    8082:	9b03      	ldr	r3, [sp, #12]
    8084:	9300      	str	r3, [sp, #0]
    8086:	4653      	mov	r3, sl
    8088:	4642      	mov	r2, r8
    808a:	4631      	mov	r1, r6
    808c:	4638      	mov	r0, r7
    808e:	f013 fc71 	bl	1b974 <conn_are_endpoints_valid>
    8092:	2800      	cmp	r0, #0
    8094:	f000 80db 	beq.w	824e <net_conn_input+0x1fa>

	if (IS_ENABLED(CONFIG_NET_IP)) {
		/* If we receive a packet with multicast destination address, we might
		 * need to deliver the packet to multiple recipients.
		 */
		if (IS_ENABLED(CONFIG_NET_IPV4) && pkt_family == AF_INET) {
    8098:	2e01      	cmp	r6, #1
    809a:	d01e      	beq.n	80da <net_conn_input+0x86>
	bool is_bcast_pkt = false;
    809c:	f04f 0b00 	mov.w	fp, #0
	bool is_mcast_pkt = false;
    80a0:	f8cd b014 	str.w	fp, [sp, #20]
	return list->head;
    80a4:	4b6c      	ldr	r3, [pc, #432]	; (8258 <net_conn_input+0x204>)
    80a6:	681c      	ldr	r4, [r3, #0]
    80a8:	f04f 0900 	mov.w	r9, #0
    80ac:	f8cd 901c 	str.w	r9, [sp, #28]
    80b0:	f04f 33ff 	mov.w	r3, #4294967295
    80b4:	9306      	str	r3, [sp, #24]
    80b6:	e033      	b.n	8120 <net_conn_input+0xcc>
			src_port = proto_hdr->udp->src_port;
    80b8:	9b04      	ldr	r3, [sp, #16]
    80ba:	681b      	ldr	r3, [r3, #0]
    80bc:	f8b3 a000 	ldrh.w	sl, [r3]
			dst_port = proto_hdr->udp->dst_port;
    80c0:	885b      	ldrh	r3, [r3, #2]
    80c2:	9303      	str	r3, [sp, #12]
    80c4:	e7dd      	b.n	8082 <net_conn_input+0x2e>
			if (proto_hdr->tcp == NULL) {
    80c6:	9b04      	ldr	r3, [sp, #16]
    80c8:	681b      	ldr	r3, [r3, #0]
    80ca:	2b00      	cmp	r3, #0
    80cc:	f000 80bd 	beq.w	824a <net_conn_input+0x1f6>
			src_port = proto_hdr->tcp->src_port;
    80d0:	f8b3 a000 	ldrh.w	sl, [r3]
			dst_port = proto_hdr->tcp->dst_port;
    80d4:	885b      	ldrh	r3, [r3, #2]
    80d6:	9303      	str	r3, [sp, #12]
    80d8:	e7d3      	b.n	8082 <net_conn_input+0x2e>
			if (net_ipv4_is_addr_mcast((struct in_addr *)ip_hdr->ipv4->dst)) {
    80da:	f8d8 3000 	ldr.w	r3, [r8]
    80de:	f103 0910 	add.w	r9, r3, #16
    80e2:	4648      	mov	r0, r9
    80e4:	f013 fbea 	bl	1b8bc <net_ipv4_is_addr_mcast>
    80e8:	9005      	str	r0, [sp, #20]
    80ea:	b110      	cbz	r0, 80f2 <net_conn_input+0x9e>
	bool is_bcast_pkt = false;
    80ec:	f04f 0b00 	mov.w	fp, #0
    80f0:	e7d8      	b.n	80a4 <net_conn_input+0x50>
				is_mcast_pkt = true;
			} else if (net_if_ipv4_is_addr_bcast(pkt_iface,
    80f2:	4649      	mov	r1, r9
    80f4:	4620      	mov	r0, r4
    80f6:	f7fe fca5 	bl	6a44 <net_if_ipv4_is_addr_bcast>
    80fa:	4683      	mov	fp, r0
    80fc:	2800      	cmp	r0, #0
    80fe:	d1d1      	bne.n	80a4 <net_conn_input+0x50>
	bool is_mcast_pkt = false;
    8100:	9005      	str	r0, [sp, #20]
    8102:	e7cf      	b.n	80a4 <net_conn_input+0x50>
	return pkt->iface;
    8104:	69ba      	ldr	r2, [r7, #24]
    8106:	9202      	str	r2, [sp, #8]
	return net_if_get_by_index(context->iface);
    8108:	f993 008a 	ldrsb.w	r0, [r3, #138]	; 0x8a
    810c:	f7fe fbc0 	bl	6890 <z_impl_net_if_get_by_index>
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&conn_used, conn, node) {
		/* Is the candidate connection matching the packet's interface? */
		if (conn->context != NULL &&
		    net_context_is_bound_to_iface(conn->context) &&
    8110:	9a02      	ldr	r2, [sp, #8]
    8112:	4282      	cmp	r2, r0
    8114:	d00d      	beq.n	8132 <net_conn_input+0xde>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn_used, conn, node) {
    8116:	4623      	mov	r3, r4
	return node->next;
    8118:	6824      	ldr	r4, [r4, #0]
    811a:	b10c      	cbz	r4, 8120 <net_conn_input+0xcc>
Z_GENLIST_PEEK_NEXT(slist, snode)
    811c:	2b00      	cmp	r3, #0
    811e:	d066      	beq.n	81ee <net_conn_input+0x19a>
    8120:	2c00      	cmp	r4, #0
    8122:	d066      	beq.n	81f2 <net_conn_input+0x19e>
		if (conn->context != NULL &&
    8124:	69a3      	ldr	r3, [r4, #24]
    8126:	b123      	cbz	r3, 8132 <net_conn_input+0xde>
	return context->flags & NET_CONTEXT_BOUND_TO_IFACE;
    8128:	f8b3 2088 	ldrh.w	r2, [r3, #136]	; 0x88
    812c:	f412 6f00 	tst.w	r2, #2048	; 0x800
    8130:	d1e8      	bne.n	8104 <net_conn_input+0xb0>
		    net_pkt_iface(pkt) != net_context_get_iface(conn->context)) {
			continue; /* wrong interface */
		}

		/* Is the candidate connection matching the packet's protocol family? */
		if (conn->family != AF_UNSPEC &&
    8132:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    8136:	b10b      	cbz	r3, 813c <net_conn_input+0xe8>
    8138:	42b3      	cmp	r3, r6
    813a:	d1ec      	bne.n	8116 <net_conn_input+0xc2>
			}
			continue; /* wrong protocol family */
		}

		/* Is the candidate connection matching the packet's protocol wihin the family? */
		if (conn->proto != proto) {
    813c:	8c22      	ldrh	r2, [r4, #32]
    813e:	42aa      	cmp	r2, r5
    8140:	d1e9      	bne.n	8116 <net_conn_input+0xc2>
					raw_pkt_delivered = true;
				}

				continue; /* packet was consumed */
			}
		} else if ((IS_ENABLED(CONFIG_NET_UDP) || IS_ENABLED(CONFIG_NET_TCP)) &&
    8142:	2b02      	cmp	r3, #2
    8144:	d8e7      	bhi.n	8116 <net_conn_input+0xc2>
			   (conn_family == AF_INET || conn_family == AF_INET6 ||
			    conn_family == AF_UNSPEC)) {
			/* Is the candidate connection matching the packet's TCP/UDP
			 * address and port?
			 */
			if (net_sin(&conn->remote_addr)->sin_port &&
    8146:	88e3      	ldrh	r3, [r4, #6]
    8148:	b10b      	cbz	r3, 814e <net_conn_input+0xfa>
    814a:	4553      	cmp	r3, sl
    814c:	d1e3      	bne.n	8116 <net_conn_input+0xc2>
			    net_sin(&conn->remote_addr)->sin_port != src_port) {
				continue; /* wrong remote port */
			}

			if (net_sin(&conn->local_addr)->sin_port &&
    814e:	89e3      	ldrh	r3, [r4, #14]
    8150:	b113      	cbz	r3, 8158 <net_conn_input+0x104>
    8152:	9a03      	ldr	r2, [sp, #12]
    8154:	4293      	cmp	r3, r2
    8156:	d1de      	bne.n	8116 <net_conn_input+0xc2>
			    net_sin(&conn->local_addr)->sin_port != dst_port) {
				continue; /* wrong local port */
			}

			if ((conn->flags & NET_CONN_REMOTE_ADDR_SET) &&
    8158:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    815c:	9302      	str	r3, [sp, #8]
    815e:	f013 0f02 	tst.w	r3, #2
    8162:	d007      	beq.n	8174 <net_conn_input+0x120>
			    !conn_addr_cmp(pkt, ip_hdr, &conn->remote_addr, true)) {
    8164:	2301      	movs	r3, #1
    8166:	1d22      	adds	r2, r4, #4
    8168:	4641      	mov	r1, r8
    816a:	4638      	mov	r0, r7
    816c:	f013 fbba 	bl	1b8e4 <conn_addr_cmp>
			if ((conn->flags & NET_CONN_REMOTE_ADDR_SET) &&
    8170:	2800      	cmp	r0, #0
    8172:	d0d0      	beq.n	8116 <net_conn_input+0xc2>
				continue; /* wrong remote address */
			}

			if ((conn->flags & NET_CONN_LOCAL_ADDR_SET) &&
    8174:	9b02      	ldr	r3, [sp, #8]
    8176:	f013 0f04 	tst.w	r3, #4
    817a:	d008      	beq.n	818e <net_conn_input+0x13a>
			    !conn_addr_cmp(pkt, ip_hdr, &conn->local_addr, false)) {
    817c:	2300      	movs	r3, #0
    817e:	f104 020c 	add.w	r2, r4, #12
    8182:	4641      	mov	r1, r8
    8184:	4638      	mov	r0, r7
    8186:	f013 fbad 	bl	1b8e4 <conn_addr_cmp>
			if ((conn->flags & NET_CONN_LOCAL_ADDR_SET) &&
    818a:	2800      	cmp	r0, #0
    818c:	d0c3      	beq.n	8116 <net_conn_input+0xc2>

			/* If we have an existing best_match, and that one
			 * specifies a remote port, then we've matched to a
			 * LISTENING connection that we should not override.
			 */
			if (best_match != NULL && best_match->flags & NET_CONN_REMOTE_PORT_SPEC) {
    818e:	f1b9 0f00 	cmp.w	r9, #0
    8192:	d004      	beq.n	819e <net_conn_input+0x14a>
    8194:	f899 3023 	ldrb.w	r3, [r9, #35]	; 0x23
    8198:	f013 0f08 	tst.w	r3, #8
    819c:	d1bb      	bne.n	8116 <net_conn_input+0xc2>
				continue; /* do not override listening connection */
			}

			if (best_rank < NET_CONN_RANK(conn->flags)) {
    819e:	9b02      	ldr	r3, [sp, #8]
    81a0:	f003 0378 	and.w	r3, r3, #120	; 0x78
    81a4:	9a06      	ldr	r2, [sp, #24]
    81a6:	429a      	cmp	r2, r3
    81a8:	dab5      	bge.n	8116 <net_conn_input+0xc2>
				struct net_pkt *mcast_pkt;

				if (!is_mcast_pkt) {
    81aa:	9a05      	ldr	r2, [sp, #20]
    81ac:	b91a      	cbnz	r2, 81b6 <net_conn_input+0x162>
					best_rank = NET_CONN_RANK(conn->flags);
    81ae:	b21b      	sxth	r3, r3
    81b0:	9306      	str	r3, [sp, #24]
					best_match = conn;
    81b2:	46a1      	mov	r9, r4
    81b4:	e7af      	b.n	8116 <net_conn_input+0xc2>
				 */

				NET_DBG("[%p] mcast match found cb %p ud %p", conn, conn->cb,
					conn->user_data);

				mcast_pkt = net_pkt_clone(pkt, CLONE_TIMEOUT);
    81b6:	f640 42cd 	movw	r2, #3277	; 0xccd
    81ba:	2300      	movs	r3, #0
    81bc:	4638      	mov	r0, r7
    81be:	f013 fa5a 	bl	1b676 <net_pkt_clone>
				if (!mcast_pkt) {
    81c2:	9002      	str	r0, [sp, #8]
    81c4:	b168      	cbz	r0, 81e2 <net_conn_input+0x18e>
					goto drop;
				}

				if (conn->cb(conn, mcast_pkt, ip_hdr, proto_hdr, conn->user_data) ==
    81c6:	6963      	ldr	r3, [r4, #20]
    81c8:	469c      	mov	ip, r3
    81ca:	69e3      	ldr	r3, [r4, #28]
    81cc:	9300      	str	r3, [sp, #0]
    81ce:	9b04      	ldr	r3, [sp, #16]
    81d0:	4642      	mov	r2, r8
    81d2:	9902      	ldr	r1, [sp, #8]
    81d4:	4620      	mov	r0, r4
    81d6:	47e0      	blx	ip
    81d8:	2802      	cmp	r0, #2
    81da:	d004      	beq.n	81e6 <net_conn_input+0x192>
					net_pkt_unref(mcast_pkt);
				} else {
					net_stats_update_per_proto_recv(pkt_iface, proto);
				}

				mcast_pkt_delivered = true;
    81dc:	9b05      	ldr	r3, [sp, #20]
    81de:	9307      	str	r3, [sp, #28]
    81e0:	e799      	b.n	8116 <net_conn_input+0xc2>
	}

drop:
	net_stats_update_per_proto_drop(pkt_iface, proto);

	return NET_DROP;
    81e2:	2002      	movs	r0, #2
    81e4:	e02e      	b.n	8244 <net_conn_input+0x1f0>
					net_pkt_unref(mcast_pkt);
    81e6:	9802      	ldr	r0, [sp, #8]
    81e8:	f012 ff62 	bl	1b0b0 <net_pkt_unref>
    81ec:	e7f6      	b.n	81dc <net_conn_input+0x188>
    81ee:	461c      	mov	r4, r3
    81f0:	e796      	b.n	8120 <net_conn_input+0xcc>
	if (IS_ENABLED(CONFIG_NET_IP) && is_mcast_pkt && mcast_pkt_delivered) {
    81f2:	9b05      	ldr	r3, [sp, #20]
    81f4:	b10b      	cbz	r3, 81fa <net_conn_input+0x1a6>
    81f6:	9b07      	ldr	r3, [sp, #28]
    81f8:	b983      	cbnz	r3, 821c <net_conn_input+0x1c8>
	if (best_match) {
    81fa:	f1b9 0f00 	cmp.w	r9, #0
    81fe:	d012      	beq.n	8226 <net_conn_input+0x1d2>
		if (best_match->cb(best_match, pkt, ip_hdr, proto_hdr, best_match->user_data)
    8200:	f8d9 4014 	ldr.w	r4, [r9, #20]
    8204:	f8d9 301c 	ldr.w	r3, [r9, #28]
    8208:	9300      	str	r3, [sp, #0]
    820a:	9b04      	ldr	r3, [sp, #16]
    820c:	4642      	mov	r2, r8
    820e:	4639      	mov	r1, r7
    8210:	4648      	mov	r0, r9
    8212:	47a0      	blx	r4
    8214:	2802      	cmp	r0, #2
    8216:	d015      	beq.n	8244 <net_conn_input+0x1f0>
		return NET_OK;
    8218:	2000      	movs	r0, #0
    821a:	e013      	b.n	8244 <net_conn_input+0x1f0>
		net_pkt_unref(pkt);
    821c:	4638      	mov	r0, r7
    821e:	f012 ff47 	bl	1b0b0 <net_pkt_unref>
		return NET_OK;
    8222:	2000      	movs	r0, #0
    8224:	e00e      	b.n	8244 <net_conn_input+0x1f0>
	if (IS_ENABLED(CONFIG_NET_IP) && (pkt_family == AF_INET || pkt_family == AF_INET6) &&
    8226:	9b05      	ldr	r3, [sp, #20]
    8228:	b99b      	cbnz	r3, 8252 <net_conn_input+0x1fe>
	    !(is_mcast_pkt || is_bcast_pkt)) {
    822a:	f1bb 0f00 	cmp.w	fp, #0
    822e:	d001      	beq.n	8234 <net_conn_input+0x1e0>
	return NET_DROP;
    8230:	2002      	movs	r0, #2
    8232:	e007      	b.n	8244 <net_conn_input+0x1f0>
		net_icmpv4_send_error(pkt, NET_ICMPV4_DST_UNREACH,
    8234:	2203      	movs	r2, #3
    8236:	4611      	mov	r1, r2
    8238:	4638      	mov	r0, r7
    823a:	f013 fd0b 	bl	1bc54 <net_icmpv4_send_error>
	return NET_DROP;
    823e:	2002      	movs	r0, #2
    8240:	e000      	b.n	8244 <net_conn_input+0x1f0>
		return NET_DROP;
    8242:	2002      	movs	r0, #2
}
    8244:	b009      	add	sp, #36	; 0x24
    8246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				return NET_DROP;
    824a:	2002      	movs	r0, #2
    824c:	e7fa      	b.n	8244 <net_conn_input+0x1f0>
			return NET_DROP;
    824e:	2002      	movs	r0, #2
    8250:	e7f8      	b.n	8244 <net_conn_input+0x1f0>
	return NET_DROP;
    8252:	2002      	movs	r0, #2
    8254:	e7f6      	b.n	8244 <net_conn_input+0x1f0>
    8256:	bf00      	nop
    8258:	200029c8 	.word	0x200029c8

0000825c <net_conn_init>:
	list->head = NULL;
    825c:	4a10      	ldr	r2, [pc, #64]	; (82a0 <net_conn_init+0x44>)
    825e:	2300      	movs	r3, #0
    8260:	6013      	str	r3, [r2, #0]
	list->tail = NULL;
    8262:	6053      	str	r3, [r2, #4]
	list->head = NULL;
    8264:	4a0f      	ldr	r2, [pc, #60]	; (82a4 <net_conn_init+0x48>)
    8266:	6013      	str	r3, [r2, #0]
	list->tail = NULL;
    8268:	6053      	str	r3, [r2, #4]
	int i;

	sys_slist_init(&conn_unused);
	sys_slist_init(&conn_used);

	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
    826a:	2b03      	cmp	r3, #3
    826c:	dc17      	bgt.n	829e <net_conn_init+0x42>
{
    826e:	b410      	push	{r4}
    8270:	e002      	b.n	8278 <net_conn_init+0x1c>
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
    8272:	3301      	adds	r3, #1
    8274:	2b03      	cmp	r3, #3
    8276:	dc10      	bgt.n	829a <net_conn_init+0x3e>
		sys_slist_prepend(&conn_unused, &conns[i].node);
    8278:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
    827c:	0091      	lsls	r1, r2, #2
    827e:	480a      	ldr	r0, [pc, #40]	; (82a8 <net_conn_init+0x4c>)
    8280:	180c      	adds	r4, r1, r0
	return list->head;
    8282:	4a07      	ldr	r2, [pc, #28]	; (82a0 <net_conn_init+0x44>)
	parent->next = child;
    8284:	f8d2 c000 	ldr.w	ip, [r2]
    8288:	f840 c001 	str.w	ip, [r0, r1]
	list->head = node;
    828c:	6014      	str	r4, [r2, #0]
	return list->tail;
    828e:	6852      	ldr	r2, [r2, #4]
Z_GENLIST_PREPEND(slist, snode)
    8290:	2a00      	cmp	r2, #0
    8292:	d1ee      	bne.n	8272 <net_conn_init+0x16>
	list->tail = node;
    8294:	4a02      	ldr	r2, [pc, #8]	; (82a0 <net_conn_init+0x44>)
    8296:	6054      	str	r4, [r2, #4]
}
    8298:	e7eb      	b.n	8272 <net_conn_init+0x16>
	}
}
    829a:	bc10      	pop	{r4}
    829c:	4770      	bx	lr
    829e:	4770      	bx	lr
    82a0:	200029d0 	.word	0x200029d0
    82a4:	200029c8 	.word	0x200029c8
    82a8:	200029d8 	.word	0x200029d8

000082ac <net_icmpv4_register_handler>:
	return list->head;
    82ac:	4b04      	ldr	r3, [pc, #16]	; (82c0 <net_icmpv4_register_handler+0x14>)
    82ae:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
    82b0:	6002      	str	r2, [r0, #0]
	list->head = node;
    82b2:	6018      	str	r0, [r3, #0]
	return list->tail;
    82b4:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    82b6:	b103      	cbz	r3, 82ba <net_icmpv4_register_handler+0xe>
}

void net_icmpv4_register_handler(struct net_icmpv4_handler *handler)
{
	sys_slist_prepend(&handlers, &handler->node);
}
    82b8:	4770      	bx	lr
	list->tail = node;
    82ba:	4b01      	ldr	r3, [pc, #4]	; (82c0 <net_icmpv4_register_handler+0x14>)
    82bc:	6058      	str	r0, [r3, #4]
    82be:	e7fb      	b.n	82b8 <net_icmpv4_register_handler+0xc>
    82c0:	20002a68 	.word	0x20002a68

000082c4 <net_icmpv4_input>:
	sys_slist_find_and_remove(&handlers, &handler->node);
}

enum net_verdict net_icmpv4_input(struct net_pkt *pkt,
				  struct net_ipv4_hdr *ip_hdr)
{
    82c4:	b570      	push	{r4, r5, r6, lr}
    82c6:	b082      	sub	sp, #8
    82c8:	4605      	mov	r5, r0
    82ca:	460e      	mov	r6, r1
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
    82cc:	2300      	movs	r3, #0
    82ce:	9300      	str	r3, [sp, #0]
    82d0:	2304      	movs	r3, #4
    82d2:	9301      	str	r3, [sp, #4]
					      struct net_icmp_hdr);
	struct net_icmp_hdr *icmp_hdr;
	struct net_icmpv4_handler *cb;

	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmp_access);
    82d4:	4669      	mov	r1, sp
    82d6:	f013 fa15 	bl	1b704 <net_pkt_get_data>
	if (!icmp_hdr) {
    82da:	2800      	cmp	r0, #0
    82dc:	d035      	beq.n	834a <net_icmpv4_input+0x86>
    82de:	4604      	mov	r4, r0
		NET_DBG("DROP: NULL ICMPv4 header");
		return NET_DROP;
	}

	if (net_if_need_calc_rx_checksum(net_pkt_iface(pkt))) {
    82e0:	69a8      	ldr	r0, [r5, #24]
    82e2:	f011 fbf0 	bl	19ac6 <net_if_need_calc_rx_checksum>
    82e6:	b120      	cbz	r0, 82f2 <net_icmpv4_input+0x2e>
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
}

static inline uint16_t net_calc_chksum_icmpv4(struct net_pkt *pkt)
{
	return net_calc_chksum(pkt, IPPROTO_ICMP);
    82e8:	2101      	movs	r1, #1
    82ea:	4628      	mov	r0, r5
    82ec:	f011 fe30 	bl	19f50 <net_calc_chksum>
		if (net_calc_chksum_icmpv4(pkt) != 0U) {
    82f0:	bb68      	cbnz	r0, 834e <net_icmpv4_input+0x8a>
			NET_DBG("DROP: Invalid checksum");
			goto drop;
		}
	}

	if (net_ipv4_is_addr_bcast(net_pkt_iface(pkt),
    82f2:	f106 0110 	add.w	r1, r6, #16
    82f6:	69a8      	ldr	r0, [r5, #24]
    82f8:	f013 fbfe 	bl	1baf8 <net_ipv4_is_addr_bcast>
    82fc:	bb48      	cbnz	r0, 8352 <net_icmpv4_input+0x8e>
 * Packet needs to be set to overwrite mode.
 */
static inline int net_pkt_acknowledge_data(struct net_pkt *pkt,
					   struct net_pkt_data_access *access)
{
	return net_pkt_skip(pkt, access->size);
    82fe:	9901      	ldr	r1, [sp, #4]
    8300:	4628      	mov	r0, r5
    8302:	f012 ffdf 	bl	1b2c4 <net_pkt_skip>
	return list->head;
    8306:	4b14      	ldr	r3, [pc, #80]	; (8358 <net_icmpv4_input+0x94>)
    8308:	681b      	ldr	r3, [r3, #0]
    830a:	e00b      	b.n	8324 <net_icmpv4_input+0x60>

	net_stats_update_icmp_recv(net_pkt_iface(pkt));

	SYS_SLIST_FOR_EACH_CONTAINER(&handlers, cb, node) {
		if (cb->type == icmp_hdr->type &&
		    (cb->code == icmp_hdr->code || cb->code == 0U)) {
    830c:	7a5a      	ldrb	r2, [r3, #9]
    830e:	7861      	ldrb	r1, [r4, #1]
		if (cb->type == icmp_hdr->type &&
    8310:	428a      	cmp	r2, r1
    8312:	d000      	beq.n	8316 <net_icmpv4_input+0x52>
		    (cb->code == icmp_hdr->code || cb->code == 0U)) {
    8314:	b97a      	cbnz	r2, 8336 <net_icmpv4_input+0x72>
			return cb->handler(pkt, ip_hdr, icmp_hdr);
    8316:	685b      	ldr	r3, [r3, #4]
    8318:	4622      	mov	r2, r4
    831a:	4631      	mov	r1, r6
    831c:	4628      	mov	r0, r5
    831e:	4798      	blx	r3
    8320:	e011      	b.n	8346 <net_icmpv4_input+0x82>
Z_GENLIST_PEEK_NEXT(slist, snode)
    8322:	4613      	mov	r3, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&handlers, cb, node) {
    8324:	b173      	cbz	r3, 8344 <net_icmpv4_input+0x80>
		if (cb->type == icmp_hdr->type &&
    8326:	f893 c008 	ldrb.w	ip, [r3, #8]
    832a:	7822      	ldrb	r2, [r4, #0]
    832c:	4594      	cmp	ip, r2
    832e:	d0ed      	beq.n	830c <net_icmpv4_input+0x48>
	SYS_SLIST_FOR_EACH_CONTAINER(&handlers, cb, node) {
    8330:	461a      	mov	r2, r3
    8332:	2b00      	cmp	r3, #0
    8334:	d0f5      	beq.n	8322 <net_icmpv4_input+0x5e>
	return node->next;
    8336:	681a      	ldr	r2, [r3, #0]
    8338:	2a00      	cmp	r2, #0
    833a:	d0f2      	beq.n	8322 <net_icmpv4_input+0x5e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    833c:	2b00      	cmp	r3, #0
    833e:	d1f0      	bne.n	8322 <net_icmpv4_input+0x5e>
    8340:	461a      	mov	r2, r3
    8342:	e7ee      	b.n	8322 <net_icmpv4_input+0x5e>
	}

drop:
	net_stats_update_icmp_drop(net_pkt_iface(pkt));

	return NET_DROP;
    8344:	2002      	movs	r0, #2
}
    8346:	b002      	add	sp, #8
    8348:	bd70      	pop	{r4, r5, r6, pc}
		return NET_DROP;
    834a:	2002      	movs	r0, #2
    834c:	e7fb      	b.n	8346 <net_icmpv4_input+0x82>
	return NET_DROP;
    834e:	2002      	movs	r0, #2
    8350:	e7f9      	b.n	8346 <net_icmpv4_input+0x82>
    8352:	2002      	movs	r0, #2
    8354:	e7f7      	b.n	8346 <net_icmpv4_input+0x82>
    8356:	bf00      	nop
    8358:	20002a68 	.word	0x20002a68

0000835c <net_icmpv4_init>:
	.code = 0,
	.handler = icmpv4_handle_echo_request,
};

void net_icmpv4_init(void)
{
    835c:	b508      	push	{r3, lr}
	net_icmpv4_register_handler(&echo_request_handler);
    835e:	4802      	ldr	r0, [pc, #8]	; (8368 <net_icmpv4_init+0xc>)
    8360:	f7ff ffa4 	bl	82ac <net_icmpv4_register_handler>
}
    8364:	bd08      	pop	{r3, pc}
    8366:	bf00      	nop
    8368:	20000034 	.word	0x20000034

0000836c <tcp_send_timer_cancel>:
		tcp_conn_unref(conn, -ETIMEDOUT);
	}
}

static void tcp_send_timer_cancel(struct tcp *conn)
{
    836c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->in_retransmission == false) {
    836e:	f890 3237 	ldrb.w	r3, [r0, #567]	; 0x237
    8372:	f013 0f01 	tst.w	r3, #1
    8376:	d100      	bne.n	837a <tcp_send_timer_cancel+0xe>
	} else {
		conn->send_retries = tcp_retries;
		k_work_reschedule_for_queue(&tcp_work_q, &conn->send_timer,
					    K_MSEC(TCP_RTO_MS));
	}
}
    8378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    837a:	4604      	mov	r4, r0
	k_work_cancel_delayable(&conn->send_timer);
    837c:	f100 0790 	add.w	r7, r0, #144	; 0x90
    8380:	4638      	mov	r0, r7
    8382:	f017 f88a 	bl	1f49a <k_work_cancel_delayable>
		struct net_pkt *pkt = tcp_slist(conn, &conn->send_queue, get,
    8386:	f104 0624 	add.w	r6, r4, #36	; 0x24
	return z_impl_k_mutex_lock(mutex, timeout);
    838a:	f04f 32ff 	mov.w	r2, #4294967295
    838e:	f04f 33ff 	mov.w	r3, #4294967295
    8392:	4630      	mov	r0, r6
    8394:	f008 fe3c 	bl	11010 <z_impl_k_mutex_lock>
	return list->head;
    8398:	69a5      	ldr	r5, [r4, #24]
Z_GENLIST_GET(slist, snode)
    839a:	b12d      	cbz	r5, 83a8 <tcp_send_timer_cancel+0x3c>
	return node->next;
    839c:	682b      	ldr	r3, [r5, #0]
	list->head = node;
    839e:	61a3      	str	r3, [r4, #24]
	return list->tail;
    83a0:	69e2      	ldr	r2, [r4, #28]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    83a2:	4295      	cmp	r5, r2
    83a4:	d01e      	beq.n	83e4 <tcp_send_timer_cancel+0x78>
    83a6:	3d1c      	subs	r5, #28
	return z_impl_k_mutex_unlock(mutex);
    83a8:	4630      	mov	r0, r6
    83aa:	f008 feb5 	bl	11118 <z_impl_k_mutex_unlock>
		if (pkt) {
    83ae:	b115      	cbz	r5, 83b6 <tcp_send_timer_cancel+0x4a>
			tcp_pkt_unref(pkt);
    83b0:	4628      	mov	r0, r5
    83b2:	f012 fe7d 	bl	1b0b0 <net_pkt_unref>
	return list->head;
    83b6:	69a3      	ldr	r3, [r4, #24]
	if (sys_slist_is_empty(&conn->send_queue)) {
    83b8:	b1b3      	cbz	r3, 83e8 <tcp_send_timer_cancel+0x7c>
		conn->send_retries = tcp_retries;
    83ba:	2309      	movs	r3, #9
    83bc:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
					    K_MSEC(TCP_RTO_MS));
    83c0:	f8b4 0232 	ldrh.w	r0, [r4, #562]	; 0x232
    83c4:	03c0      	lsls	r0, r0, #15
    83c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    83ca:	2300      	movs	r3, #0
    83cc:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    83d0:	2100      	movs	r1, #0
    83d2:	f7f8 fab3 	bl	93c <__aeabi_uldivmod>
    83d6:	4602      	mov	r2, r0
    83d8:	460b      	mov	r3, r1
		k_work_reschedule_for_queue(&tcp_work_q, &conn->send_timer,
    83da:	4639      	mov	r1, r7
    83dc:	4806      	ldr	r0, [pc, #24]	; (83f8 <tcp_send_timer_cancel+0x8c>)
    83de:	f017 f83f 	bl	1f460 <k_work_reschedule_for_queue>
    83e2:	e7c9      	b.n	8378 <tcp_send_timer_cancel+0xc>
	list->tail = node;
    83e4:	61e3      	str	r3, [r4, #28]
		struct net_pkt *pkt = tcp_slist(conn, &conn->send_queue, get,
    83e6:	e7de      	b.n	83a6 <tcp_send_timer_cancel+0x3a>
		conn->in_retransmission = false;
    83e8:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
    83ec:	f36f 0300 	bfc	r3, #0, #1
    83f0:	f884 3237 	strb.w	r3, [r4, #567]	; 0x237
    83f4:	e7c0      	b.n	8378 <tcp_send_timer_cancel+0xc>
    83f6:	bf00      	nop
    83f8:	20000d40 	.word	0x20000d40

000083fc <tcp_send>:
{
    83fc:	b510      	push	{r4, lr}
    83fe:	4604      	mov	r4, r0
	tcp_pkt_ref(pkt);
    8400:	f012 fe2f 	bl	1b062 <net_pkt_ref>
	if (tcp_send_cb) {
    8404:	4b0b      	ldr	r3, [pc, #44]	; (8434 <tcp_send+0x38>)
    8406:	681b      	ldr	r3, [r3, #0]
    8408:	b15b      	cbz	r3, 8422 <tcp_send+0x26>
		if (tcp_send_cb(pkt) < 0) {
    840a:	4620      	mov	r0, r4
    840c:	4798      	blx	r3
    840e:	2800      	cmp	r0, #0
    8410:	db03      	blt.n	841a <tcp_send+0x1e>
	tcp_pkt_unref(pkt);
    8412:	4620      	mov	r0, r4
    8414:	f012 fe4c 	bl	1b0b0 <net_pkt_unref>
}
    8418:	bd10      	pop	{r4, pc}
			tcp_pkt_unref(pkt);
    841a:	4620      	mov	r0, r4
    841c:	f012 fe48 	bl	1b0b0 <net_pkt_unref>
		goto out;
    8420:	e7f7      	b.n	8412 <tcp_send+0x16>
		if (net_send_data(pkt) < 0) {
    8422:	4620      	mov	r0, r4
    8424:	f011 f909 	bl	1963a <net_send_data>
    8428:	2800      	cmp	r0, #0
    842a:	daf2      	bge.n	8412 <tcp_send+0x16>
			tcp_pkt_unref(pkt);
    842c:	4620      	mov	r0, r4
    842e:	f012 fe3f 	bl	1b0b0 <net_pkt_unref>
    8432:	e7ee      	b.n	8412 <tcp_send+0x16>
    8434:	20002a84 	.word	0x20002a84

00008438 <tcp_send_process_no_lock>:
{
    8438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    843a:	4604      	mov	r4, r0
	pkt = tcp_slist(conn, &conn->send_queue, peek_head,
    843c:	f100 0624 	add.w	r6, r0, #36	; 0x24
	return z_impl_k_mutex_lock(mutex, timeout);
    8440:	f04f 32ff 	mov.w	r2, #4294967295
    8444:	f04f 33ff 	mov.w	r3, #4294967295
    8448:	4630      	mov	r0, r6
    844a:	f008 fde1 	bl	11010 <z_impl_k_mutex_lock>
	return list->head;
    844e:	69a5      	ldr	r5, [r4, #24]
    8450:	b105      	cbz	r5, 8454 <tcp_send_process_no_lock+0x1c>
    8452:	3d1c      	subs	r5, #28
	return z_impl_k_mutex_unlock(mutex);
    8454:	4630      	mov	r0, r6
    8456:	f008 fe5f 	bl	11118 <z_impl_k_mutex_unlock>
	if (!pkt) {
    845a:	2d00      	cmp	r5, #0
    845c:	f000 8088 	beq.w	8570 <tcp_send_process_no_lock+0x138>
	if (conn->in_retransmission) {
    8460:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
    8464:	f013 0f01 	tst.w	r3, #1
    8468:	d027      	beq.n	84ba <tcp_send_process_no_lock+0x82>
		if (conn->send_retries > 0) {
    846a:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
    846e:	b913      	cbnz	r3, 8476 <tcp_send_process_no_lock+0x3e>
			unref = true;
    8470:	2501      	movs	r5, #1
}
    8472:	4628      	mov	r0, r5
    8474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			struct net_pkt *clone = tcp_pkt_clone(pkt);
    8476:	f640 42cd 	movw	r2, #3277	; 0xccd
    847a:	2300      	movs	r3, #0
    847c:	4628      	mov	r0, r5
    847e:	f013 f8fa 	bl	1b676 <net_pkt_clone>
			if (clone) {
    8482:	b130      	cbz	r0, 8492 <tcp_send_process_no_lock+0x5a>
				tcp_send(clone);
    8484:	f7ff ffba 	bl	83fc <tcp_send>
				conn->send_retries--;
    8488:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
    848c:	3b01      	subs	r3, #1
    848e:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
	bool local = false;
    8492:	2500      	movs	r5, #0
	if (conn->in_retransmission) {
    8494:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
    8498:	f013 0f01 	tst.w	r3, #1
    849c:	d154      	bne.n	8548 <tcp_send_process_no_lock+0x110>
	} else if (local && !sys_slist_is_empty(&conn->send_queue)) {
    849e:	2d00      	cmp	r5, #0
    84a0:	d0e7      	beq.n	8472 <tcp_send_process_no_lock+0x3a>
    84a2:	69a3      	ldr	r3, [r4, #24]
    84a4:	2b00      	cmp	r3, #0
    84a6:	d065      	beq.n	8574 <tcp_send_process_no_lock+0x13c>
		k_work_reschedule_for_queue(&tcp_work_q, &conn->send_timer,
    84a8:	2200      	movs	r2, #0
    84aa:	2300      	movs	r3, #0
    84ac:	f104 0190 	add.w	r1, r4, #144	; 0x90
    84b0:	4831      	ldr	r0, [pc, #196]	; (8578 <tcp_send_process_no_lock+0x140>)
    84b2:	f016 ffd5 	bl	1f460 <k_work_reschedule_for_queue>
	bool unref = false;
    84b6:	2500      	movs	r5, #0
    84b8:	e7db      	b.n	8472 <tcp_send_process_no_lock+0x3a>
		uint8_t fl = th_get(pkt)->th_flags;
    84ba:	4628      	mov	r0, r5
    84bc:	f014 f802 	bl	1c4c4 <th_get>
    84c0:	7b43      	ldrb	r3, [r0, #13]
		bool forget = ACK == fl || PSH == fl || (ACK | PSH) == fl ||
    84c2:	2b10      	cmp	r3, #16
    84c4:	d006      	beq.n	84d4 <tcp_send_process_no_lock+0x9c>
    84c6:	2b08      	cmp	r3, #8
    84c8:	d004      	beq.n	84d4 <tcp_send_process_no_lock+0x9c>
    84ca:	2b18      	cmp	r3, #24
    84cc:	d002      	beq.n	84d4 <tcp_send_process_no_lock+0x9c>
    84ce:	f013 0f04 	tst.w	r3, #4
    84d2:	d02c      	beq.n	852e <tcp_send_process_no_lock+0xf6>
	return z_impl_k_mutex_lock(mutex, timeout);
    84d4:	f04f 32ff 	mov.w	r2, #4294967295
    84d8:	f04f 33ff 	mov.w	r3, #4294967295
    84dc:	4630      	mov	r0, r6
    84de:	f008 fd97 	bl	11010 <z_impl_k_mutex_lock>
    84e2:	69a7      	ldr	r7, [r4, #24]
Z_GENLIST_GET(slist, snode)
    84e4:	b12f      	cbz	r7, 84f2 <tcp_send_process_no_lock+0xba>
	return node->next;
    84e6:	683b      	ldr	r3, [r7, #0]
	list->head = node;
    84e8:	61a3      	str	r3, [r4, #24]
	return list->tail;
    84ea:	69e2      	ldr	r2, [r4, #28]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    84ec:	42ba      	cmp	r2, r7
    84ee:	d027      	beq.n	8540 <tcp_send_process_no_lock+0x108>
		pkt = forget ? tcp_slist(conn, &conn->send_queue, get,
    84f0:	3f1c      	subs	r7, #28
	return z_impl_k_mutex_unlock(mutex);
    84f2:	4630      	mov	r0, r6
    84f4:	f008 fe10 	bl	11118 <z_impl_k_mutex_unlock>
    84f8:	2601      	movs	r6, #1
		if (!pkt) {
    84fa:	b31f      	cbz	r7, 8544 <tcp_send_process_no_lock+0x10c>
		if (is_destination_local(pkt)) {
    84fc:	4638      	mov	r0, r7
    84fe:	f013 ff5d 	bl	1c3bc <is_destination_local>
    8502:	4605      	mov	r5, r0
		tcp_send(pkt);
    8504:	4638      	mov	r0, r7
    8506:	f7ff ff79 	bl	83fc <tcp_send>
		if (forget == false &&
    850a:	2e00      	cmp	r6, #0
    850c:	d1c2      	bne.n	8494 <tcp_send_process_no_lock+0x5c>
}

static inline k_ticks_t k_work_delayable_remaining_get(
	const struct k_work_delayable *dwork)
{
	return z_timeout_remaining(&dwork->timeout);
    850e:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    8512:	f017 f9b8 	bl	1f886 <z_timeout_remaining>
    8516:	4308      	orrs	r0, r1
    8518:	d1bc      	bne.n	8494 <tcp_send_process_no_lock+0x5c>
			conn->send_retries = tcp_retries;
    851a:	2309      	movs	r3, #9
    851c:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
			conn->in_retransmission = true;
    8520:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
    8524:	f043 0301 	orr.w	r3, r3, #1
    8528:	f884 3237 	strb.w	r3, [r4, #567]	; 0x237
    852c:	e7b2      	b.n	8494 <tcp_send_process_no_lock+0x5c>
			tcp_pkt_clone(pkt);
    852e:	f640 42cd 	movw	r2, #3277	; 0xccd
    8532:	2300      	movs	r3, #0
    8534:	4628      	mov	r0, r5
    8536:	f013 f89e 	bl	1b676 <net_pkt_clone>
    853a:	4607      	mov	r7, r0
		bool forget = ACK == fl || PSH == fl || (ACK | PSH) == fl ||
    853c:	2600      	movs	r6, #0
    853e:	e7dc      	b.n	84fa <tcp_send_process_no_lock+0xc2>
	list->tail = node;
    8540:	61e3      	str	r3, [r4, #28]
		pkt = forget ? tcp_slist(conn, &conn->send_queue, get,
    8542:	e7d5      	b.n	84f0 <tcp_send_process_no_lock+0xb8>
	bool unref = false;
    8544:	2500      	movs	r5, #0
    8546:	e794      	b.n	8472 <tcp_send_process_no_lock+0x3a>
					    K_MSEC(TCP_RTO_MS));
    8548:	f8b4 0232 	ldrh.w	r0, [r4, #562]	; 0x232
    854c:	03c0      	lsls	r0, r0, #15
    854e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8552:	2300      	movs	r3, #0
    8554:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    8558:	2100      	movs	r1, #0
    855a:	f7f8 f9ef 	bl	93c <__aeabi_uldivmod>
    855e:	4602      	mov	r2, r0
    8560:	460b      	mov	r3, r1
		k_work_reschedule_for_queue(&tcp_work_q, &conn->send_timer,
    8562:	f104 0190 	add.w	r1, r4, #144	; 0x90
    8566:	4804      	ldr	r0, [pc, #16]	; (8578 <tcp_send_process_no_lock+0x140>)
    8568:	f016 ff7a 	bl	1f460 <k_work_reschedule_for_queue>
	bool unref = false;
    856c:	2500      	movs	r5, #0
    856e:	e780      	b.n	8472 <tcp_send_process_no_lock+0x3a>
    8570:	2500      	movs	r5, #0
    8572:	e77e      	b.n	8472 <tcp_send_process_no_lock+0x3a>
    8574:	2500      	movs	r5, #0
    8576:	e77c      	b.n	8472 <tcp_send_process_no_lock+0x3a>
    8578:	20000d40 	.word	0x20000d40

0000857c <tcp_conn_search>:
	return tcp_endpoint_cmp(&conn->src, pkt, TCP_EP_DST) &&
		tcp_endpoint_cmp(&conn->dst, pkt, TCP_EP_SRC);
}

static struct tcp *tcp_conn_search(struct net_pkt *pkt)
{
    857c:	b570      	push	{r4, r5, r6, lr}
    857e:	4606      	mov	r6, r0
	return list->head;
    8580:	4b11      	ldr	r3, [pc, #68]	; (85c8 <tcp_conn_search+0x4c>)
    8582:	681d      	ldr	r5, [r3, #0]
	bool found = false;
	struct tcp *conn;
	struct tcp *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&tcp_conns, conn, tmp, next) {
    8584:	b135      	cbz	r5, 8594 <tcp_conn_search+0x18>
	return node->next;
    8586:	682c      	ldr	r4, [r5, #0]
    8588:	b104      	cbz	r4, 858c <tcp_conn_search+0x10>
Z_GENLIST_PEEK_NEXT(slist, snode)
    858a:	b10d      	cbz	r5, 8590 <tcp_conn_search+0x14>
    858c:	2200      	movs	r2, #0
    858e:	e006      	b.n	859e <tcp_conn_search+0x22>
    8590:	462c      	mov	r4, r5
    8592:	e7fb      	b.n	858c <tcp_conn_search+0x10>
    8594:	462c      	mov	r4, r5
    8596:	e7f9      	b.n	858c <tcp_conn_search+0x10>
    8598:	4623      	mov	r3, r4
    859a:	4625      	mov	r5, r4
    859c:	461c      	mov	r4, r3
    859e:	b175      	cbz	r5, 85be <tcp_conn_search+0x42>
		found = tcp_conn_cmp(conn, pkt);
    85a0:	4631      	mov	r1, r6
    85a2:	4628      	mov	r0, r5
    85a4:	f014 f848 	bl	1c638 <tcp_conn_cmp>
		if (found) {
    85a8:	4602      	mov	r2, r0
    85aa:	b940      	cbnz	r0, 85be <tcp_conn_search+0x42>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&tcp_conns, conn, tmp, next) {
    85ac:	2c00      	cmp	r4, #0
    85ae:	d0f3      	beq.n	8598 <tcp_conn_search+0x1c>
	return node->next;
    85b0:	6823      	ldr	r3, [r4, #0]
    85b2:	2b00      	cmp	r3, #0
    85b4:	d0f1      	beq.n	859a <tcp_conn_search+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    85b6:	2c00      	cmp	r4, #0
    85b8:	d1ef      	bne.n	859a <tcp_conn_search+0x1e>
    85ba:	4623      	mov	r3, r4
    85bc:	e7ed      	b.n	859a <tcp_conn_search+0x1e>
			break;
		}
	}

	return found ? conn : NULL;
    85be:	b10a      	cbz	r2, 85c4 <tcp_conn_search+0x48>
}
    85c0:	4628      	mov	r0, r5
    85c2:	bd70      	pop	{r4, r5, r6, pc}
	return found ? conn : NULL;
    85c4:	2500      	movs	r5, #0
    85c6:	e7fb      	b.n	85c0 <tcp_conn_search+0x44>
    85c8:	20002a88 	.word	0x20002a88

000085cc <seq_scale>:

	return verdict;
}

static uint32_t seq_scale(uint32_t seq)
{
    85cc:	b510      	push	{r4, lr}
    85ce:	4604      	mov	r4, r0
	return z_impl_k_uptime_ticks();
    85d0:	f017 f9b8 	bl	1f944 <z_impl_k_uptime_ticks>
			return (uint32_t)((t * to_hz + off) / from_hz);
    85d4:	4b04      	ldr	r3, [pc, #16]	; (85e8 <seq_scale+0x1c>)
    85d6:	fba0 3203 	umull	r3, r2, r0, r3
    85da:	0bdb      	lsrs	r3, r3, #15
    85dc:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
	return seq + (k_ticks_to_ns_floor32(k_uptime_ticks()) >> 6);
}
    85e0:	eb04 1093 	add.w	r0, r4, r3, lsr #6
    85e4:	bd10      	pop	{r4, pc}
    85e6:	bf00      	nop
    85e8:	3b9aca00 	.word	0x3b9aca00

000085ec <tcpv4_init_isn>:

static uint32_t tcpv4_init_isn(struct in_addr *saddr,
			       struct in_addr *daddr,
			       uint16_t sport,
			       uint16_t dport)
{
    85ec:	b510      	push	{r4, lr}
    85ee:	b08c      	sub	sp, #48	; 0x30
		uint8_t key[sizeof(unique_key)];
		struct in_addr saddr;
		struct in_addr daddr;
		uint16_t sport;
		uint16_t dport;
	} buf = {
    85f0:	2400      	movs	r4, #0
    85f2:	9405      	str	r4, [sp, #20]
    85f4:	9406      	str	r4, [sp, #24]
    85f6:	9407      	str	r4, [sp, #28]
    85f8:	9408      	str	r4, [sp, #32]
    85fa:	9409      	str	r4, [sp, #36]	; 0x24
    85fc:	940a      	str	r4, [sp, #40]	; 0x28
    85fe:	940b      	str	r4, [sp, #44]	; 0x2c
    8600:	6800      	ldr	r0, [r0, #0]
    8602:	9009      	str	r0, [sp, #36]	; 0x24
    8604:	6809      	ldr	r1, [r1, #0]
    8606:	910a      	str	r1, [sp, #40]	; 0x28
    8608:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
    860c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
	};

	uint8_t hash[16];
	static bool once;

	if (!once) {
    8610:	4b0c      	ldr	r3, [pc, #48]	; (8644 <tcpv4_init_isn+0x58>)
    8612:	781b      	ldrb	r3, [r3, #0]
    8614:	b173      	cbz	r3, 8634 <tcpv4_init_isn+0x48>
		sys_rand_get(unique_key, sizeof(unique_key));
		once = true;
	}

	memcpy(buf.key, unique_key, sizeof(unique_key));
    8616:	4b0c      	ldr	r3, [pc, #48]	; (8648 <tcpv4_init_isn+0x5c>)
    8618:	ac05      	add	r4, sp, #20
    861a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    861c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

#if IS_ENABLED(CONFIG_NET_TCP_ISN_RFC6528)
	mbedtls_md5((const unsigned char *)&buf, sizeof(buf), hash);
    8620:	aa01      	add	r2, sp, #4
    8622:	211c      	movs	r1, #28
    8624:	4620      	mov	r0, r4
    8626:	f016 f9e0 	bl	1e9ea <mbedtls_md5>
#endif

	return seq_scale(UNALIGNED_GET((uint32_t *)&hash[0]));
    862a:	9801      	ldr	r0, [sp, #4]
    862c:	f7ff ffce 	bl	85cc <seq_scale>
}
    8630:	b00c      	add	sp, #48	; 0x30
    8632:	bd10      	pop	{r4, pc}
		(void) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_SYS_RAND_GET);
		return;
	}
#endif
	compiler_barrier();
	z_impl_sys_rand_get(dst, len);
    8634:	2110      	movs	r1, #16
    8636:	4804      	ldr	r0, [pc, #16]	; (8648 <tcpv4_init_isn+0x5c>)
    8638:	f014 fdd8 	bl	1d1ec <z_impl_sys_rand_get>
		once = true;
    863c:	4b01      	ldr	r3, [pc, #4]	; (8644 <tcpv4_init_isn+0x58>)
    863e:	2201      	movs	r2, #1
    8640:	701a      	strb	r2, [r3, #0]
    8642:	e7e8      	b.n	8616 <tcpv4_init_isn+0x2a>
    8644:	200042aa 	.word	0x200042aa
    8648:	20002a70 	.word	0x20002a70

0000864c <tcp_conn_new>:

/* Create a new tcp connection, as a part of it, create and register
 * net_context
 */
static struct tcp *tcp_conn_new(struct net_pkt *pkt)
{
    864c:	b5f0      	push	{r4, r5, r6, r7, lr}
    864e:	b08b      	sub	sp, #44	; 0x2c
    8650:	4605      	mov	r5, r0
	struct tcp *conn = NULL;
	struct net_context *context = NULL;
    8652:	2300      	movs	r3, #0
    8654:	9309      	str	r3, [sp, #36]	; 0x24
	return pkt->family;
    8656:	f890 6037 	ldrb.w	r6, [r0, #55]	; 0x37
    865a:	0976      	lsrs	r6, r6, #5
	sa_family_t af = net_pkt_family(pkt);
	struct sockaddr local_addr = { 0 };
    865c:	9307      	str	r3, [sp, #28]
    865e:	9308      	str	r3, [sp, #32]
	int ret;

	ret = net_context_get(af, SOCK_STREAM, IPPROTO_TCP, &context);
    8660:	ab09      	add	r3, sp, #36	; 0x24
    8662:	2206      	movs	r2, #6
    8664:	2101      	movs	r1, #1
    8666:	4630      	mov	r0, r6
    8668:	f7fe ff04 	bl	7474 <net_context_get>
	if (ret < 0) {
    866c:	2800      	cmp	r0, #0
    866e:	f2c0 8081 	blt.w	8774 <tcp_conn_new+0x128>
		NET_ERR("net_context_get(): %d", ret);
		goto err;
	}

	conn = context->tcp;
    8672:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8674:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
	conn->iface = pkt->iface;
    8676:	69ab      	ldr	r3, [r5, #24]
    8678:	6123      	str	r3, [r4, #16]
	tcp_derive_rto(conn);
    867a:	4620      	mov	r0, r4
    867c:	f013 ff95 	bl	1c5aa <tcp_derive_rto>

	net_context_set_family(conn->context, net_pkt_family(pkt));
    8680:	6862      	ldr	r2, [r4, #4]
    8682:	f895 1037 	ldrb.w	r1, [r5, #55]	; 0x37
    8686:	094b      	lsrs	r3, r1, #5
	if (family == AF_UNSPEC || family == AF_INET || family == AF_INET6 ||
    8688:	299f      	cmp	r1, #159	; 0x9f
    868a:	d801      	bhi.n	8690 <tcp_conn_new+0x44>
		flag = family << 3;
    868c:	00db      	lsls	r3, r3, #3
    868e:	e000      	b.n	8692 <tcp_conn_new+0x46>
	uint8_t flag = 0U;
    8690:	2300      	movs	r3, #0
	context->flags |= flag;
    8692:	f8b2 1088 	ldrh.w	r1, [r2, #136]	; 0x88
    8696:	430b      	orrs	r3, r1
    8698:	f8a2 3088 	strh.w	r3, [r2, #136]	; 0x88

	if (tcp_endpoint_set(&conn->dst, pkt, TCP_EP_SRC) < 0) {
    869c:	f504 77fc 	add.w	r7, r4, #504	; 0x1f8
    86a0:	2201      	movs	r2, #1
    86a2:	4629      	mov	r1, r5
    86a4:	4638      	mov	r0, r7
    86a6:	f013 ff34 	bl	1c512 <tcp_endpoint_set>
    86aa:	2800      	cmp	r0, #0
    86ac:	db48      	blt.n	8740 <tcp_conn_new+0xf4>
		net_context_unref(context);
		conn = NULL;
		goto err;
	}

	if (tcp_endpoint_set(&conn->src, pkt, TCP_EP_DST) < 0) {
    86ae:	2200      	movs	r2, #0
    86b0:	4629      	mov	r1, r5
    86b2:	f504 70f0 	add.w	r0, r4, #480	; 0x1e0
    86b6:	f013 ff2c 	bl	1c512 <tcp_endpoint_set>
    86ba:	2800      	cmp	r0, #0
    86bc:	db45      	blt.n	874a <tcp_conn_new+0xfe>
		net_sprint_addr(conn->src.sa.sa_family,
				(const void *)&conn->src.sin.sin_addr),
		net_sprint_addr(conn->dst.sa.sa_family,
				(const void *)&conn->dst.sin.sin_addr));

	memcpy(&context->remote, &conn->dst, sizeof(context->remote));
    86be:	9a09      	ldr	r2, [sp, #36]	; 0x24
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    86c0:	6839      	ldr	r1, [r7, #0]
    86c2:	687b      	ldr	r3, [r7, #4]
    86c4:	6251      	str	r1, [r2, #36]	; 0x24
    86c6:	6293      	str	r3, [r2, #40]	; 0x28
	context->flags |= NET_CONTEXT_REMOTE_ADDR_SET;
    86c8:	f8b2 3088 	ldrh.w	r3, [r2, #136]	; 0x88
    86cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    86d0:	f8a2 3088 	strh.w	r3, [r2, #136]	; 0x88

	net_sin_ptr(&context->local)->sin_family = af;
    86d4:	8396      	strh	r6, [r2, #28]
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
    86d6:	f3c3 03c2 	ubfx	r3, r3, #3, #3

	local_addr.sa_family = net_context_get_family(context);
    86da:	f8ad 301c 	strh.w	r3, [sp, #28]
	    net_context_get_family(context) == AF_INET6) {
		if (net_sin6_ptr(&context->local)->sin6_addr) {
			net_ipaddr_copy(&net_sin6(&local_addr)->sin6_addr,
				     net_sin6_ptr(&context->local)->sin6_addr);
		}
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
    86de:	2b01      	cmp	r3, #1
    86e0:	d038      	beq.n	8754 <tcp_conn_new+0x108>
			net_ipaddr_copy(&net_sin(&local_addr)->sin_addr,
				      net_sin_ptr(&context->local)->sin_addr);
		}
	}

	ret = net_context_bind(context, &local_addr, sizeof(local_addr));
    86e2:	2208      	movs	r2, #8
    86e4:	a907      	add	r1, sp, #28
    86e6:	9809      	ldr	r0, [sp, #36]	; 0x24
    86e8:	f011 fee0 	bl	1a4ac <net_context_bind>
	if (ret < 0) {
    86ec:	2800      	cmp	r0, #0
    86ee:	db37      	blt.n	8760 <tcp_conn_new+0x114>
		goto err;
	}

	if (!(IS_ENABLED(CONFIG_NET_TEST_PROTOCOL) ||
	      IS_ENABLED(CONFIG_NET_TEST))) {
		conn->seq = tcp_init_isn(&local_addr, &context->remote);
    86f0:	9909      	ldr	r1, [sp, #36]	; 0x24
    86f2:	3124      	adds	r1, #36	; 0x24
    86f4:	a807      	add	r0, sp, #28
    86f6:	f013 ffb5 	bl	1c664 <tcp_init_isn>
    86fa:	f8c4 0224 	str.w	r0, [r4, #548]	; 0x224
				(const void *)&net_sin(&local_addr)->sin_addr),
		net_sprint_addr(context->remote.sa_family,
				(const void *)&net_sin(&context->remote)->sin_addr));

	ret = net_conn_register(IPPROTO_TCP, af,
				&context->remote, &local_addr,
    86fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
				ntohs(conn->dst.sin.sin_port),/* local port */
    8700:	f8b4 01fa 	ldrh.w	r0, [r4, #506]	; 0x1fa
    8704:	0203      	lsls	r3, r0, #8
				ntohs(conn->src.sin.sin_port),/* remote port */
    8706:	f8b4 51e2 	ldrh.w	r5, [r4, #482]	; 0x1e2
    870a:	0229      	lsls	r1, r5, #8
	ret = net_conn_register(IPPROTO_TCP, af,
    870c:	f102 072c 	add.w	r7, r2, #44	; 0x2c
    8710:	9705      	str	r7, [sp, #20]
    8712:	9204      	str	r2, [sp, #16]
    8714:	4f18      	ldr	r7, [pc, #96]	; (8778 <tcp_conn_new+0x12c>)
    8716:	9703      	str	r7, [sp, #12]
    8718:	9202      	str	r2, [sp, #8]
    871a:	ea41 2115 	orr.w	r1, r1, r5, lsr #8
    871e:	b289      	uxth	r1, r1
    8720:	9101      	str	r1, [sp, #4]
    8722:	ea43 2310 	orr.w	r3, r3, r0, lsr #8
    8726:	b29b      	uxth	r3, r3
    8728:	9300      	str	r3, [sp, #0]
    872a:	ab07      	add	r3, sp, #28
    872c:	3224      	adds	r2, #36	; 0x24
    872e:	4631      	mov	r1, r6
    8730:	2006      	movs	r0, #6
    8732:	f013 f93c 	bl	1b9ae <net_conn_register>
				context, tcp_recv, context,
				&context->conn_handler);
	if (ret < 0) {
    8736:	2800      	cmp	r0, #0
    8738:	db17      	blt.n	876a <tcp_conn_new+0x11e>
	if (!conn) {
		net_stats_update_tcp_seg_conndrop(net_pkt_iface(pkt));
	}

	return conn;
}
    873a:	4620      	mov	r0, r4
    873c:	b00b      	add	sp, #44	; 0x2c
    873e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_context_unref(context);
    8740:	9809      	ldr	r0, [sp, #36]	; 0x24
    8742:	f011 fe80 	bl	1a446 <net_context_unref>
		conn = NULL;
    8746:	2400      	movs	r4, #0
		goto err;
    8748:	e7f7      	b.n	873a <tcp_conn_new+0xee>
		net_context_unref(context);
    874a:	9809      	ldr	r0, [sp, #36]	; 0x24
    874c:	f011 fe7b 	bl	1a446 <net_context_unref>
		conn = NULL;
    8750:	2400      	movs	r4, #0
		goto err;
    8752:	e7f2      	b.n	873a <tcp_conn_new+0xee>
		if (net_sin_ptr(&context->local)->sin_addr) {
    8754:	6a13      	ldr	r3, [r2, #32]
    8756:	2b00      	cmp	r3, #0
    8758:	d0c3      	beq.n	86e2 <tcp_conn_new+0x96>
			net_ipaddr_copy(&net_sin(&local_addr)->sin_addr,
    875a:	681b      	ldr	r3, [r3, #0]
    875c:	9308      	str	r3, [sp, #32]
    875e:	e7c0      	b.n	86e2 <tcp_conn_new+0x96>
		net_context_unref(context);
    8760:	9809      	ldr	r0, [sp, #36]	; 0x24
    8762:	f011 fe70 	bl	1a446 <net_context_unref>
		conn = NULL;
    8766:	2400      	movs	r4, #0
		goto err;
    8768:	e7e7      	b.n	873a <tcp_conn_new+0xee>
		net_context_unref(context);
    876a:	9809      	ldr	r0, [sp, #36]	; 0x24
    876c:	f011 fe6b 	bl	1a446 <net_context_unref>
		conn = NULL;
    8770:	2400      	movs	r4, #0
		goto err;
    8772:	e7e2      	b.n	873a <tcp_conn_new+0xee>
	struct tcp *conn = NULL;
    8774:	2400      	movs	r4, #0
	return conn;
    8776:	e7e0      	b.n	873a <tcp_conn_new+0xee>
    8778:	0001cdbf 	.word	0x0001cdbf

0000877c <tcp_queue_recv_data>:
	return result;
}

static void tcp_queue_recv_data(struct tcp *conn, struct net_pkt *pkt,
				size_t len, uint32_t seq)
{
    877c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8780:	4606      	mov	r6, r0
    8782:	460f      	mov	r7, r1
    8784:	4691      	mov	r9, r2
    8786:	4698      	mov	r8, r3
	bool inserted = false;
	struct net_buf *tmp;

	NET_DBG("conn: %p len %zd seq %u ack %u", conn, len, seq, conn->ack);

	tmp = pkt->buffer;
    8788:	688c      	ldr	r4, [r1, #8]

	tcp_set_seq(tmp, seq);
    878a:	4619      	mov	r1, r3
    878c:	4620      	mov	r0, r4
    878e:	f013 fcd1 	bl	1c134 <tcp_set_seq>
	seq += tmp->len;
    8792:	89a5      	ldrh	r5, [r4, #12]
    8794:	4445      	add	r5, r8
	tmp = tmp->frags;
    8796:	6824      	ldr	r4, [r4, #0]

	while (tmp) {
    8798:	e006      	b.n	87a8 <tcp_queue_recv_data+0x2c>
		tcp_set_seq(tmp, seq);
    879a:	4629      	mov	r1, r5
    879c:	4620      	mov	r0, r4
    879e:	f013 fcc9 	bl	1c134 <tcp_set_seq>
		seq += tmp->len;
    87a2:	89a3      	ldrh	r3, [r4, #12]
    87a4:	441d      	add	r5, r3
		tmp = tmp->frags;
    87a6:	6824      	ldr	r4, [r4, #0]
	while (tmp) {
    87a8:	2c00      	cmp	r4, #0
    87aa:	d1f6      	bne.n	879a <tcp_queue_recv_data+0x1e>

	if (IS_ENABLED(CONFIG_NET_TCP_LOG_LEVEL_DBG)) {
		NET_DBG("Queuing data: conn %p", conn);
	}

	if (!net_pkt_is_empty(conn->queue_recv_data)) {
    87ac:	68f0      	ldr	r0, [r6, #12]
	return !pkt->buffer || !net_pkt_data(pkt) || pkt->buffer->len == 0;
    87ae:	f8d0 a008 	ldr.w	sl, [r0, #8]
    87b2:	f1ba 0f00 	cmp.w	sl, #0
    87b6:	d007      	beq.n	87c8 <tcp_queue_recv_data+0x4c>
	return pkt->frags->data;
    87b8:	f8da 3008 	ldr.w	r3, [sl, #8]
	return !pkt->buffer || !net_pkt_data(pkt) || pkt->buffer->len == 0;
    87bc:	b173      	cbz	r3, 87dc <tcp_queue_recv_data+0x60>
    87be:	f8ba 300c 	ldrh.w	r3, [sl, #12]
    87c2:	b16b      	cbz	r3, 87e0 <tcp_queue_recv_data+0x64>
    87c4:	2300      	movs	r3, #0
    87c6:	e000      	b.n	87ca <tcp_queue_recv_data+0x4e>
    87c8:	2301      	movs	r3, #1
    87ca:	2b00      	cmp	r3, #0
    87cc:	d152      	bne.n	8874 <tcp_queue_recv_data+0xf8>
		uint32_t pending_seq;
		uint32_t start_offset;
		uint32_t end_offset;
		size_t pending_len;

		pending_seq = tcp_get_seq(conn->queue_recv_data->buffer);
    87ce:	4650      	mov	r0, sl
    87d0:	f013 fcae 	bl	1c130 <tcp_get_seq>
		end_offset = seq - pending_seq;
    87d4:	1a29      	subs	r1, r5, r0
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
	size_t bytes = 0;

	while (buf) {
    87d6:	4654      	mov	r4, sl
	size_t bytes = 0;
    87d8:	2300      	movs	r3, #0
	while (buf) {
    87da:	e006      	b.n	87ea <tcp_queue_recv_data+0x6e>
    87dc:	2301      	movs	r3, #1
    87de:	e7f4      	b.n	87ca <tcp_queue_recv_data+0x4e>
    87e0:	2301      	movs	r3, #1
    87e2:	e7f2      	b.n	87ca <tcp_queue_recv_data+0x4e>
		bytes += buf->len;
    87e4:	89a2      	ldrh	r2, [r4, #12]
    87e6:	4413      	add	r3, r2
		buf = buf->frags;
    87e8:	6824      	ldr	r4, [r4, #0]
	while (buf) {
    87ea:	2c00      	cmp	r4, #0
    87ec:	d1fa      	bne.n	87e4 <tcp_queue_recv_data+0x68>
		pending_len = net_pkt_get_len(conn->queue_recv_data);
		if (end_offset < pending_len) {
    87ee:	428b      	cmp	r3, r1
    87f0:	d91b      	bls.n	882a <tcp_queue_recv_data+0xae>
			if (end_offset < len) {
    87f2:	4589      	cmp	r9, r1
    87f4:	d948      	bls.n	8888 <tcp_queue_recv_data+0x10c>
				if (end_offset) {
    87f6:	b9a1      	cbnz	r1, 8822 <tcp_queue_recv_data+0xa6>
					net_pkt_remove_tail(pkt, end_offset);
				}

				/* Put new data before the pending data */
				net_buf_frag_add(pkt->buffer,
						 conn->queue_recv_data->buffer);
    87f8:	68f3      	ldr	r3, [r6, #12]
				net_buf_frag_add(pkt->buffer,
    87fa:	6899      	ldr	r1, [r3, #8]
    87fc:	68b8      	ldr	r0, [r7, #8]
    87fe:	f010 fd9f 	bl	19340 <net_buf_frag_add>
				NET_DBG("Adding at before queue, end_offset %i, pending_len %zu",
					end_offset, pending_len);
				conn->queue_recv_data->buffer = pkt->buffer;
    8802:	68f3      	ldr	r3, [r6, #12]
    8804:	68ba      	ldr	r2, [r7, #8]
    8806:	609a      	str	r2, [r3, #8]
			}
		}

		if (inserted) {
			NET_DBG("All pending data: conn %p", conn);
			if (check_seq_list(conn->queue_recv_data->buffer) == false) {
    8808:	68f3      	ldr	r3, [r6, #12]
    880a:	689c      	ldr	r4, [r3, #8]
    880c:	4620      	mov	r0, r4
    880e:	f013 fcf5 	bl	1c1fc <check_seq_list>
    8812:	bb90      	cbnz	r0, 887a <tcp_queue_recv_data+0xfe>
				NET_ERR("Incorrect order in out of order sequence for conn %p",
					conn);
				/* error in sequence list, drop it */
				net_buf_unref(conn->queue_recv_data->buffer);
    8814:	4620      	mov	r0, r4
    8816:	f010 fd5b 	bl	192d0 <net_buf_unref>
				conn->queue_recv_data->buffer = NULL;
    881a:	68f3      	ldr	r3, [r6, #12]
    881c:	2200      	movs	r2, #0
    881e:	609a      	str	r2, [r3, #8]
    8820:	e02b      	b.n	887a <tcp_queue_recv_data+0xfe>
					net_pkt_remove_tail(pkt, end_offset);
    8822:	4638      	mov	r0, r7
    8824:	f012 fcb9 	bl	1b19a <net_pkt_remove_tail>
    8828:	e7e6      	b.n	87f8 <tcp_queue_recv_data+0x7c>
			last = net_buf_frag_last(conn->queue_recv_data->buffer);
    882a:	4650      	mov	r0, sl
    882c:	f010 fd77 	bl	1931e <net_buf_frag_last>
    8830:	4604      	mov	r4, r0
			pending_seq = tcp_get_seq(last);
    8832:	f013 fc7d 	bl	1c130 <tcp_get_seq>
			start_offset = pending_seq - seq_start;
    8836:	eba0 0308 	sub.w	r3, r0, r8
			end_offset = (pending_seq + last->len) - seq_start;
    883a:	89a1      	ldrh	r1, [r4, #12]
    883c:	4401      	add	r1, r0
    883e:	eba1 0108 	sub.w	r1, r1, r8
			if ((start_offset < len) && (end_offset <= len)) {
    8842:	454b      	cmp	r3, r9
    8844:	d201      	bcs.n	884a <tcp_queue_recv_data+0xce>
    8846:	4549      	cmp	r1, r9
    8848:	d908      	bls.n	885c <tcp_queue_recv_data+0xe0>
				if (end_offset < len) {
    884a:	4549      	cmp	r1, r9
    884c:	d21c      	bcs.n	8888 <tcp_queue_recv_data+0x10c>
					if (end_offset) {
    884e:	b969      	cbnz	r1, 886c <tcp_queue_recv_data+0xf0>
					net_buf_frag_add(conn->queue_recv_data->buffer,
    8850:	68f3      	ldr	r3, [r6, #12]
    8852:	68b9      	ldr	r1, [r7, #8]
    8854:	6898      	ldr	r0, [r3, #8]
    8856:	f010 fd73 	bl	19340 <net_buf_frag_add>
		if (inserted) {
    885a:	e7d5      	b.n	8808 <tcp_queue_recv_data+0x8c>
				net_buf_unref(conn->queue_recv_data->buffer);
    885c:	68f3      	ldr	r3, [r6, #12]
    885e:	6898      	ldr	r0, [r3, #8]
    8860:	f010 fd36 	bl	192d0 <net_buf_unref>
				conn->queue_recv_data->buffer = pkt->buffer;
    8864:	68f3      	ldr	r3, [r6, #12]
    8866:	68ba      	ldr	r2, [r7, #8]
    8868:	609a      	str	r2, [r3, #8]
		if (inserted) {
    886a:	e7cd      	b.n	8808 <tcp_queue_recv_data+0x8c>
						net_pkt_remove_tail(conn->queue_recv_data,
    886c:	68f0      	ldr	r0, [r6, #12]
    886e:	f012 fc94 	bl	1b19a <net_pkt_remove_tail>
    8872:	e7ed      	b.n	8850 <tcp_queue_recv_data+0xd4>
			}
		} else {
			NET_DBG("Cannot add new data to queue");
		}
	} else {
		net_pkt_append_buffer(conn->queue_recv_data, pkt->buffer);
    8874:	68b9      	ldr	r1, [r7, #8]
    8876:	f012 fcce 	bl	1b216 <net_pkt_append_buffer>
		inserted = true;
	}

	if (inserted) {
		/* We need to keep the received data but free the pkt */
		pkt->buffer = NULL;
    887a:	2300      	movs	r3, #0
    887c:	60bb      	str	r3, [r7, #8]

		if (!k_work_delayable_is_pending(&conn->recv_queue_timer)) {
    887e:	36c0      	adds	r6, #192	; 0xc0
	return k_work_delayable_busy_get(dwork) != 0;
    8880:	4630      	mov	r0, r6
    8882:	f016 fdc3 	bl	1f40c <k_work_delayable_busy_get>
    8886:	b108      	cbz	r0, 888c <tcp_queue_recv_data+0x110>
			k_work_reschedule_for_queue(
				&tcp_work_q, &conn->recv_queue_timer,
				K_MSEC(CONFIG_NET_TCP_RECV_QUEUE_TIMEOUT));
		}
	}
}
    8888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			k_work_reschedule_for_queue(
    888c:	f640 42cd 	movw	r2, #3277	; 0xccd
    8890:	2300      	movs	r3, #0
    8892:	4631      	mov	r1, r6
    8894:	4801      	ldr	r0, [pc, #4]	; (889c <tcp_queue_recv_data+0x120>)
    8896:	f016 fde3 	bl	1f460 <k_work_reschedule_for_queue>
}
    889a:	e7f5      	b.n	8888 <tcp_queue_recv_data+0x10c>
    889c:	20000d40 	.word	0x20000d40

000088a0 <tcp_conn_unref>:
{
    88a0:	b570      	push	{r4, r5, r6, lr}
    88a2:	b084      	sub	sp, #16
    88a4:	9003      	str	r0, [sp, #12]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    88a6:	f3bf 8f5b 	dmb	ish
    88aa:	f8d0 521c 	ldr.w	r5, [r0, #540]	; 0x21c
    88ae:	f3bf 8f5b 	dmb	ish
	if (conn->in_connect) {
    88b2:	9803      	ldr	r0, [sp, #12]
    88b4:	f890 3237 	ldrb.w	r3, [r0, #567]	; 0x237
    88b8:	f013 0f02 	tst.w	r3, #2
    88bc:	d112      	bne.n	88e4 <tcp_conn_unref+0x44>
    88be:	460e      	mov	r6, r1
	ref_count = atomic_dec(&conn->ref_count) - 1;
    88c0:	f500 7007 	add.w	r0, r0, #540	; 0x21c
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    88c4:	f3bf 8f5b 	dmb	ish
    88c8:	e850 3f00 	ldrex	r3, [r0]
    88cc:	3b01      	subs	r3, #1
    88ce:	e840 3200 	strex	r2, r3, [r0]
    88d2:	2a00      	cmp	r2, #0
    88d4:	d1f8      	bne.n	88c8 <tcp_conn_unref+0x28>
    88d6:	f3bf 8f5b 	dmb	ish
    88da:	461d      	mov	r5, r3
	if (ref_count != 0) {
    88dc:	b12b      	cbz	r3, 88ea <tcp_conn_unref+0x4a>
}
    88de:	4628      	mov	r0, r5
    88e0:	b004      	add	sp, #16
    88e2:	bd70      	pop	{r4, r5, r6, pc}
		tcp_send_queue_flush(conn);
    88e4:	f013 fca7 	bl	1c236 <tcp_send_queue_flush>
		goto out;
    88e8:	e7f9      	b.n	88de <tcp_conn_unref+0x3e>
	return z_impl_k_mutex_lock(mutex, timeout);
    88ea:	f04f 32ff 	mov.w	r2, #4294967295
    88ee:	f04f 33ff 	mov.w	r3, #4294967295
    88f2:	4836      	ldr	r0, [pc, #216]	; (89cc <tcp_conn_unref+0x12c>)
    88f4:	f008 fb8c 	bl	11010 <z_impl_k_mutex_lock>
	while ((pkt = k_fifo_get(&conn->recv_data, K_NO_WAIT)) != NULL) {
    88f8:	9803      	ldr	r0, [sp, #12]
    88fa:	3068      	adds	r0, #104	; 0x68
	return z_impl_k_queue_get(queue, timeout);
    88fc:	2200      	movs	r2, #0
    88fe:	2300      	movs	r3, #0
    8900:	f008 fc48 	bl	11194 <z_impl_k_queue_get>
    8904:	4604      	mov	r4, r0
    8906:	b178      	cbz	r0, 8928 <tcp_conn_unref+0x88>
			    (struct net_conn *)conn->context->conn_handler,
    8908:	9b03      	ldr	r3, [sp, #12]
    890a:	685a      	ldr	r2, [r3, #4]
    890c:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
		if (net_context_packet_received(
    890e:	695b      	ldr	r3, [r3, #20]
    8910:	9300      	str	r3, [sp, #0]
    8912:	2300      	movs	r3, #0
    8914:	461a      	mov	r2, r3
    8916:	4621      	mov	r1, r4
    8918:	f011 fce1 	bl	1a2de <net_context_packet_received>
    891c:	2802      	cmp	r0, #2
    891e:	d1eb      	bne.n	88f8 <tcp_conn_unref+0x58>
			tcp_pkt_unref(pkt);
    8920:	4620      	mov	r0, r4
    8922:	f012 fbc5 	bl	1b0b0 <net_pkt_unref>
    8926:	e7e7      	b.n	88f8 <tcp_conn_unref+0x58>
	if (conn->context->conn_handler) {
    8928:	9b03      	ldr	r3, [sp, #12]
    892a:	685b      	ldr	r3, [r3, #4]
    892c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    892e:	b128      	cbz	r0, 893c <tcp_conn_unref+0x9c>
		net_conn_unregister(conn->context->conn_handler);
    8930:	f7ff fb6c 	bl	800c <net_conn_unregister>
		conn->context->conn_handler = NULL;
    8934:	9b03      	ldr	r3, [sp, #12]
    8936:	685b      	ldr	r3, [r3, #4]
    8938:	2200      	movs	r2, #0
    893a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (conn->context->recv_cb) {
    893c:	9b03      	ldr	r3, [sp, #12]
    893e:	6858      	ldr	r0, [r3, #4]
    8940:	6b04      	ldr	r4, [r0, #48]	; 0x30
    8942:	b134      	cbz	r4, 8952 <tcp_conn_unref+0xb2>
		conn->context->recv_cb(conn->context, NULL, NULL, NULL,
    8944:	695b      	ldr	r3, [r3, #20]
    8946:	9301      	str	r3, [sp, #4]
    8948:	9600      	str	r6, [sp, #0]
    894a:	2300      	movs	r3, #0
    894c:	461a      	mov	r2, r3
    894e:	4619      	mov	r1, r3
    8950:	47a0      	blx	r4
	conn->context->tcp = NULL;
    8952:	9b03      	ldr	r3, [sp, #12]
    8954:	685a      	ldr	r2, [r3, #4]
    8956:	2400      	movs	r4, #0
    8958:	63d4      	str	r4, [r2, #60]	; 0x3c
	net_context_unref(conn->context);
    895a:	6858      	ldr	r0, [r3, #4]
    895c:	f011 fd73 	bl	1a446 <net_context_unref>
	tcp_send_queue_flush(conn);
    8960:	9803      	ldr	r0, [sp, #12]
    8962:	f013 fc68 	bl	1c236 <tcp_send_queue_flush>
	k_work_cancel_delayable(&conn->send_data_timer);
    8966:	9803      	ldr	r0, [sp, #12]
    8968:	30f0      	adds	r0, #240	; 0xf0
    896a:	f016 fd96 	bl	1f49a <k_work_cancel_delayable>
	tcp_pkt_unref(conn->send_data);
    896e:	9b03      	ldr	r3, [sp, #12]
    8970:	6898      	ldr	r0, [r3, #8]
    8972:	f012 fb9d 	bl	1b0b0 <net_pkt_unref>
		tcp_pkt_unref(conn->queue_recv_data);
    8976:	9b03      	ldr	r3, [sp, #12]
    8978:	68d8      	ldr	r0, [r3, #12]
    897a:	f012 fb99 	bl	1b0b0 <net_pkt_unref>
	(void)k_work_cancel_delayable(&conn->timewait_timer);
    897e:	9803      	ldr	r0, [sp, #12]
    8980:	f500 7090 	add.w	r0, r0, #288	; 0x120
    8984:	f016 fd89 	bl	1f49a <k_work_cancel_delayable>
	(void)k_work_cancel_delayable(&conn->fin_timer);
    8988:	9803      	ldr	r0, [sp, #12]
    898a:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
    898e:	f016 fd84 	bl	1f49a <k_work_cancel_delayable>
	(void)k_work_cancel_delayable(&conn->persist_timer);
    8992:	9803      	ldr	r0, [sp, #12]
    8994:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    8998:	f016 fd7f 	bl	1f49a <k_work_cancel_delayable>
	(void)k_work_cancel_delayable(&conn->ack_timer);
    899c:	9803      	ldr	r0, [sp, #12]
    899e:	f500 70c0 	add.w	r0, r0, #384	; 0x180
    89a2:	f016 fd7a 	bl	1f49a <k_work_cancel_delayable>
	sys_slist_find_and_remove(&tcp_conns, &conn->next);
    89a6:	9903      	ldr	r1, [sp, #12]
    89a8:	4809      	ldr	r0, [pc, #36]	; (89d0 <tcp_conn_unref+0x130>)
    89aa:	f013 fbb1 	bl	1c110 <sys_slist_find_and_remove>
__ssp_bos_icheck3(memset, void *, int)
    89ae:	f44f 720e 	mov.w	r2, #568	; 0x238
    89b2:	4621      	mov	r1, r4
    89b4:	9803      	ldr	r0, [sp, #12]
    89b6:	f017 fa3f 	bl	1fe38 <memset>
	k_mem_slab_free(&tcp_conns_slab, (void **)&conn);
    89ba:	a903      	add	r1, sp, #12
    89bc:	4805      	ldr	r0, [pc, #20]	; (89d4 <tcp_conn_unref+0x134>)
    89be:	f016 faa7 	bl	1ef10 <k_mem_slab_free>
	return z_impl_k_mutex_unlock(mutex);
    89c2:	4802      	ldr	r0, [pc, #8]	; (89cc <tcp_conn_unref+0x12c>)
    89c4:	f008 fba8 	bl	11118 <z_impl_k_mutex_unlock>
    89c8:	e789      	b.n	88de <tcp_conn_unref+0x3e>
    89ca:	bf00      	nop
    89cc:	20000528 	.word	0x20000528
    89d0:	20002a88 	.word	0x20002a88
    89d4:	200003ec 	.word	0x200003ec

000089d8 <tcp_conn_alloc>:
{
    89d8:	b510      	push	{r4, lr}
    89da:	b082      	sub	sp, #8
	struct tcp *conn = NULL;
    89dc:	2300      	movs	r3, #0
    89de:	9301      	str	r3, [sp, #4]
	ret = k_mem_slab_alloc(&tcp_conns_slab, (void **)&conn, K_NO_WAIT);
    89e0:	2200      	movs	r2, #0
    89e2:	2300      	movs	r3, #0
    89e4:	a901      	add	r1, sp, #4
    89e6:	484a      	ldr	r0, [pc, #296]	; (8b10 <tcp_conn_alloc+0x138>)
    89e8:	f008 fa38 	bl	10e5c <k_mem_slab_alloc>
	if (ret) {
    89ec:	2800      	cmp	r0, #0
    89ee:	d17a      	bne.n	8ae6 <tcp_conn_alloc+0x10e>
    89f0:	f44f 720e 	mov.w	r2, #568	; 0x238
    89f4:	2100      	movs	r1, #0
    89f6:	9801      	ldr	r0, [sp, #4]
    89f8:	f017 fa1e 	bl	1fe38 <memset>
		conn->queue_recv_data = tcp_rx_pkt_alloc(conn, 0);
    89fc:	f640 40cd 	movw	r0, #3277	; 0xccd
    8a00:	2100      	movs	r1, #0
    8a02:	f7fe ffe9 	bl	79d8 <net_pkt_rx_alloc>
    8a06:	9b01      	ldr	r3, [sp, #4]
    8a08:	60d8      	str	r0, [r3, #12]
		if (conn->queue_recv_data == NULL) {
    8a0a:	2800      	cmp	r0, #0
    8a0c:	d072      	beq.n	8af4 <tcp_conn_alloc+0x11c>
	conn->send_data = tcp_pkt_alloc(conn, 0);
    8a0e:	f640 40cd 	movw	r0, #3277	; 0xccd
    8a12:	2100      	movs	r1, #0
    8a14:	f7fe ffd6 	bl	79c4 <net_pkt_alloc>
    8a18:	9b01      	ldr	r3, [sp, #4]
    8a1a:	6098      	str	r0, [r3, #8]
	if (conn->send_data == NULL) {
    8a1c:	2800      	cmp	r0, #0
    8a1e:	d069      	beq.n	8af4 <tcp_conn_alloc+0x11c>
	k_mutex_init(&conn->lock);
    8a20:	f103 0024 	add.w	r0, r3, #36	; 0x24
	return z_impl_k_mutex_init(mutex);
    8a24:	f016 fb03 	bl	1f02e <z_impl_k_mutex_init>
	k_fifo_init(&conn->recv_data);
    8a28:	9801      	ldr	r0, [sp, #4]
    8a2a:	3068      	adds	r0, #104	; 0x68
	z_impl_k_queue_init(queue);
    8a2c:	f016 fb98 	bl	1f160 <z_impl_k_queue_init>
	k_sem_init(&conn->connect_sem, 0, K_SEM_MAX_LIMIT);
    8a30:	9801      	ldr	r0, [sp, #4]
    8a32:	3038      	adds	r0, #56	; 0x38
	return z_impl_k_sem_init(sem, initial_count, limit);
    8a34:	f04f 32ff 	mov.w	r2, #4294967295
    8a38:	2100      	movs	r1, #0
    8a3a:	f016 fbdd 	bl	1f1f8 <z_impl_k_sem_init>
	k_sem_init(&conn->tx_sem, 1, 1);
    8a3e:	9801      	ldr	r0, [sp, #4]
    8a40:	3050      	adds	r0, #80	; 0x50
    8a42:	2201      	movs	r2, #1
    8a44:	4611      	mov	r1, r2
    8a46:	f016 fbd7 	bl	1f1f8 <z_impl_k_sem_init>
	conn->in_connect = false;
    8a4a:	9801      	ldr	r0, [sp, #4]
    8a4c:	f890 3237 	ldrb.w	r3, [r0, #567]	; 0x237
    8a50:	f36f 0341 	bfc	r3, #1, #1
    8a54:	f880 3237 	strb.w	r3, [r0, #567]	; 0x237
	conn->state = TCP_LISTEN;
    8a58:	2301      	movs	r3, #1
    8a5a:	f880 3220 	strb.w	r3, [r0, #544]	; 0x220
	conn->recv_win_max = tcp_window;
    8a5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
    8a62:	f8a0 322c 	strh.w	r3, [r0, #556]	; 0x22c
	conn->tcp_nodelay = false;
    8a66:	f890 2237 	ldrb.w	r2, [r0, #567]	; 0x237
    8a6a:	f36f 02c3 	bfc	r2, #3, #1
    8a6e:	f880 2237 	strb.w	r2, [r0, #567]	; 0x237
	conn->dup_ack_cnt = 0;
    8a72:	2400      	movs	r4, #0
    8a74:	f880 4235 	strb.w	r4, [r0, #565]	; 0x235
	conn->recv_win = conn->recv_win_max;
    8a78:	f8a0 322e 	strh.w	r3, [r0, #558]	; 0x22e
	conn->seq = 0U;
    8a7c:	f8c0 4224 	str.w	r4, [r0, #548]	; 0x224
	list->head = NULL;
    8a80:	6184      	str	r4, [r0, #24]
	list->tail = NULL;
    8a82:	61c4      	str	r4, [r0, #28]
	k_work_init_delayable(&conn->send_timer, tcp_send_process);
    8a84:	4923      	ldr	r1, [pc, #140]	; (8b14 <tcp_conn_alloc+0x13c>)
    8a86:	3090      	adds	r0, #144	; 0x90
    8a88:	f016 fcb4 	bl	1f3f4 <k_work_init_delayable>
	k_work_init_delayable(&conn->timewait_timer, tcp_timewait_timeout);
    8a8c:	4922      	ldr	r1, [pc, #136]	; (8b18 <tcp_conn_alloc+0x140>)
    8a8e:	9801      	ldr	r0, [sp, #4]
    8a90:	f500 7090 	add.w	r0, r0, #288	; 0x120
    8a94:	f016 fcae 	bl	1f3f4 <k_work_init_delayable>
	k_work_init_delayable(&conn->fin_timer, tcp_fin_timeout);
    8a98:	4920      	ldr	r1, [pc, #128]	; (8b1c <tcp_conn_alloc+0x144>)
    8a9a:	9801      	ldr	r0, [sp, #4]
    8a9c:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
    8aa0:	f016 fca8 	bl	1f3f4 <k_work_init_delayable>
	k_work_init_delayable(&conn->send_data_timer, tcp_resend_data);
    8aa4:	491e      	ldr	r1, [pc, #120]	; (8b20 <tcp_conn_alloc+0x148>)
    8aa6:	9801      	ldr	r0, [sp, #4]
    8aa8:	30f0      	adds	r0, #240	; 0xf0
    8aaa:	f016 fca3 	bl	1f3f4 <k_work_init_delayable>
	k_work_init_delayable(&conn->recv_queue_timer, tcp_cleanup_recv_queue);
    8aae:	491d      	ldr	r1, [pc, #116]	; (8b24 <tcp_conn_alloc+0x14c>)
    8ab0:	9801      	ldr	r0, [sp, #4]
    8ab2:	30c0      	adds	r0, #192	; 0xc0
    8ab4:	f016 fc9e 	bl	1f3f4 <k_work_init_delayable>
	k_work_init_delayable(&conn->persist_timer, tcp_send_zwp);
    8ab8:	491b      	ldr	r1, [pc, #108]	; (8b28 <tcp_conn_alloc+0x150>)
    8aba:	9801      	ldr	r0, [sp, #4]
    8abc:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    8ac0:	f016 fc98 	bl	1f3f4 <k_work_init_delayable>
	k_work_init_delayable(&conn->ack_timer, tcp_send_ack);
    8ac4:	4919      	ldr	r1, [pc, #100]	; (8b2c <tcp_conn_alloc+0x154>)
    8ac6:	9801      	ldr	r0, [sp, #4]
    8ac8:	f500 70c0 	add.w	r0, r0, #384	; 0x180
    8acc:	f016 fc92 	bl	1f3f4 <k_work_init_delayable>
	tcp_conn_ref(conn);
    8ad0:	9801      	ldr	r0, [sp, #4]
    8ad2:	f013 ff2c 	bl	1c92e <tcp_conn_ref>
	sys_slist_append(&tcp_conns, &conn->next);
    8ad6:	9b01      	ldr	r3, [sp, #4]
	parent->next = child;
    8ad8:	601c      	str	r4, [r3, #0]
	return list->tail;
    8ada:	4a15      	ldr	r2, [pc, #84]	; (8b30 <tcp_conn_alloc+0x158>)
    8adc:	6852      	ldr	r2, [r2, #4]
Z_GENLIST_APPEND(slist, snode)
    8ade:	b12a      	cbz	r2, 8aec <tcp_conn_alloc+0x114>
	parent->next = child;
    8ae0:	6013      	str	r3, [r2, #0]
	list->tail = node;
    8ae2:	4a13      	ldr	r2, [pc, #76]	; (8b30 <tcp_conn_alloc+0x158>)
    8ae4:	6053      	str	r3, [r2, #4]
	return conn;
    8ae6:	9801      	ldr	r0, [sp, #4]
}
    8ae8:	b002      	add	sp, #8
    8aea:	bd10      	pop	{r4, pc}
    8aec:	4a10      	ldr	r2, [pc, #64]	; (8b30 <tcp_conn_alloc+0x158>)
    8aee:	6053      	str	r3, [r2, #4]
	list->head = node;
    8af0:	6013      	str	r3, [r2, #0]
}
    8af2:	e7f8      	b.n	8ae6 <tcp_conn_alloc+0x10e>
	if (CONFIG_NET_TCP_RECV_QUEUE_TIMEOUT && conn->queue_recv_data) {
    8af4:	9b01      	ldr	r3, [sp, #4]
    8af6:	68d8      	ldr	r0, [r3, #12]
    8af8:	b120      	cbz	r0, 8b04 <tcp_conn_alloc+0x12c>
		tcp_pkt_unref(conn->queue_recv_data);
    8afa:	f012 fad9 	bl	1b0b0 <net_pkt_unref>
		conn->queue_recv_data = NULL;
    8afe:	9b01      	ldr	r3, [sp, #4]
    8b00:	2200      	movs	r2, #0
    8b02:	60da      	str	r2, [r3, #12]
	k_mem_slab_free(&tcp_conns_slab, (void **)&conn);
    8b04:	a901      	add	r1, sp, #4
    8b06:	4802      	ldr	r0, [pc, #8]	; (8b10 <tcp_conn_alloc+0x138>)
    8b08:	f016 fa02 	bl	1ef10 <k_mem_slab_free>
	return NULL;
    8b0c:	2000      	movs	r0, #0
    8b0e:	e7eb      	b.n	8ae8 <tcp_conn_alloc+0x110>
    8b10:	200003ec 	.word	0x200003ec
    8b14:	0001c8f9 	.word	0x0001c8f9
    8b18:	0001c229 	.word	0x0001c229
    8b1c:	0001c8d7 	.word	0x0001c8d7
    8b20:	00008ea5 	.word	0x00008ea5
    8b24:	0001c3e5 	.word	0x0001c3e5
    8b28:	00008d1d 	.word	0x00008d1d
    8b2c:	0001caa7 	.word	0x0001caa7
    8b30:	20002a88 	.word	0x20002a88

00008b34 <net_tcp_get>:
{
    8b34:	b510      	push	{r4, lr}
    8b36:	4604      	mov	r4, r0
	return z_impl_k_mutex_lock(mutex, timeout);
    8b38:	f04f 32ff 	mov.w	r2, #4294967295
    8b3c:	f04f 33ff 	mov.w	r3, #4294967295
    8b40:	4808      	ldr	r0, [pc, #32]	; (8b64 <net_tcp_get+0x30>)
    8b42:	f008 fa65 	bl	11010 <z_impl_k_mutex_lock>
	conn = tcp_conn_alloc(context);
    8b46:	4620      	mov	r0, r4
    8b48:	f7ff ff46 	bl	89d8 <tcp_conn_alloc>
	if (conn == NULL) {
    8b4c:	b138      	cbz	r0, 8b5e <net_tcp_get+0x2a>
	conn->context = context;
    8b4e:	6044      	str	r4, [r0, #4]
	context->tcp = conn;
    8b50:	63e0      	str	r0, [r4, #60]	; 0x3c
	int ret = 0;
    8b52:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
    8b54:	4803      	ldr	r0, [pc, #12]	; (8b64 <net_tcp_get+0x30>)
    8b56:	f008 fadf 	bl	11118 <z_impl_k_mutex_unlock>
}
    8b5a:	4620      	mov	r0, r4
    8b5c:	bd10      	pop	{r4, pc}
		ret = -ENOMEM;
    8b5e:	f06f 040b 	mvn.w	r4, #11
    8b62:	e7f7      	b.n	8b54 <net_tcp_get+0x20>
    8b64:	20000528 	.word	0x20000528

00008b68 <net_tcp_accept>:
	return ret;
}

int net_tcp_accept(struct net_context *context, net_tcp_accept_cb_t cb,
		   void *user_data)
{
    8b68:	b570      	push	{r4, r5, r6, lr}
    8b6a:	b088      	sub	sp, #32
    8b6c:	4604      	mov	r4, r0
	struct tcp *conn = context->tcp;
    8b6e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
	struct sockaddr local_addr = { };
    8b70:	2000      	movs	r0, #0
    8b72:	9006      	str	r0, [sp, #24]
    8b74:	9007      	str	r0, [sp, #28]
	uint16_t local_port, remote_port;

	if (!conn) {
    8b76:	2b00      	cmp	r3, #0
    8b78:	d03f      	beq.n	8bfa <net_tcp_accept+0x92>
		return -EINVAL;
	}

	NET_DBG("context: %p, tcp: %p, cb: %p", context, conn, cb);

	if (conn->state != TCP_LISTEN) {
    8b7a:	f893 0220 	ldrb.w	r0, [r3, #544]	; 0x220
    8b7e:	2801      	cmp	r0, #1
    8b80:	d13e      	bne.n	8c00 <net_tcp_accept+0x98>
		return -EINVAL;
	}

	conn->accept_cb = cb;
    8b82:	6219      	str	r1, [r3, #32]
    8b84:	f8b4 3088 	ldrh.w	r3, [r4, #136]	; 0x88
    8b88:	f3c3 03c2 	ubfx	r3, r3, #3, #3
	local_addr.sa_family = net_context_get_family(context);
    8b8c:	f8ad 3018 	strh.w	r3, [sp, #24]

	switch (local_addr.sa_family) {
    8b90:	2b01      	cmp	r3, #1
    8b92:	d003      	beq.n	8b9c <net_tcp_accept+0x34>
		remote_port = ntohs(net_sin6(&context->remote)->sin6_port);

		break;

	default:
		return -EINVAL;
    8b94:	f06f 0015 	mvn.w	r0, #21
				 &context->remote : NULL,
				 &local_addr,
				 remote_port, local_port,
				 context, tcp_recv, context,
				 &context->conn_handler);
}
    8b98:	b008      	add	sp, #32
    8b9a:	bd70      	pop	{r4, r5, r6, pc}
		if (net_sin_ptr(&context->local)->sin_addr) {
    8b9c:	6a23      	ldr	r3, [r4, #32]
    8b9e:	b10b      	cbz	r3, 8ba4 <net_tcp_accept+0x3c>
			net_ipaddr_copy(&in->sin_addr,
    8ba0:	681b      	ldr	r3, [r3, #0]
    8ba2:	9307      	str	r3, [sp, #28]
			net_sin((struct sockaddr *)&context->local)->sin_port;
    8ba4:	8be3      	ldrh	r3, [r4, #30]
		in->sin_port =
    8ba6:	f8ad 301a 	strh.w	r3, [sp, #26]
		local_port = ntohs(in->sin_port);
    8baa:	021e      	lsls	r6, r3, #8
    8bac:	ea46 2613 	orr.w	r6, r6, r3, lsr #8
    8bb0:	b2b6      	uxth	r6, r6
		remote_port = ntohs(net_sin(&context->remote)->sin_port);
    8bb2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    8bb4:	021d      	lsls	r5, r3, #8
    8bb6:	b22d      	sxth	r5, r5
    8bb8:	ea45 2513 	orr.w	r5, r5, r3, lsr #8
    8bbc:	b2ad      	uxth	r5, r5
	context->user_data = user_data;
    8bbe:	6022      	str	r2, [r4, #0]
	net_conn_unregister(context->conn_handler);
    8bc0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    8bc2:	f7ff fa23 	bl	800c <net_conn_unregister>
	return context->proto;
    8bc6:	f8b4 0086 	ldrh.w	r0, [r4, #134]	; 0x86
	return net_conn_register(net_context_get_proto(context),
    8bca:	f89d 1018 	ldrb.w	r1, [sp, #24]
				 context->flags & NET_CONTEXT_REMOTE_ADDR_SET ?
    8bce:	f8b4 3088 	ldrh.w	r3, [r4, #136]	; 0x88
	return net_conn_register(net_context_get_proto(context),
    8bd2:	f413 7f80 	tst.w	r3, #256	; 0x100
    8bd6:	d00e      	beq.n	8bf6 <net_tcp_accept+0x8e>
    8bd8:	f104 0224 	add.w	r2, r4, #36	; 0x24
    8bdc:	f104 032c 	add.w	r3, r4, #44	; 0x2c
    8be0:	9305      	str	r3, [sp, #20]
    8be2:	9404      	str	r4, [sp, #16]
    8be4:	4b08      	ldr	r3, [pc, #32]	; (8c08 <net_tcp_accept+0xa0>)
    8be6:	9303      	str	r3, [sp, #12]
    8be8:	9402      	str	r4, [sp, #8]
    8bea:	9601      	str	r6, [sp, #4]
    8bec:	9500      	str	r5, [sp, #0]
    8bee:	ab06      	add	r3, sp, #24
    8bf0:	f012 fedd 	bl	1b9ae <net_conn_register>
    8bf4:	e7d0      	b.n	8b98 <net_tcp_accept+0x30>
    8bf6:	2200      	movs	r2, #0
    8bf8:	e7f0      	b.n	8bdc <net_tcp_accept+0x74>
		return -EINVAL;
    8bfa:	f06f 0015 	mvn.w	r0, #21
    8bfe:	e7cb      	b.n	8b98 <net_tcp_accept+0x30>
		return -EINVAL;
    8c00:	f06f 0015 	mvn.w	r0, #21
    8c04:	e7c8      	b.n	8b98 <net_tcp_accept+0x30>
    8c06:	bf00      	nop
    8c08:	0001cdbf 	.word	0x0001cdbf

00008c0c <tcp_out_ext>:
{
    8c0c:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
    8c10:	b082      	sub	sp, #8
    8c12:	4605      	mov	r5, r0
    8c14:	460f      	mov	r7, r1
    8c16:	4614      	mov	r4, r2
    8c18:	4698      	mov	r8, r3
	if (conn->send_options.mss_found) {
    8c1a:	f890 308a 	ldrb.w	r3, [r0, #138]	; 0x8a
    8c1e:	f013 0f01 	tst.w	r3, #1
    8c22:	d140      	bne.n	8ca6 <tcp_out_ext+0x9a>
	size_t alloc_len = sizeof(struct tcphdr);
    8c24:	2114      	movs	r1, #20
	pkt = tcp_pkt_alloc(conn, alloc_len);
    8c26:	686b      	ldr	r3, [r5, #4]
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
    8c28:	f8b3 2088 	ldrh.w	r2, [r3, #136]	; 0x88
    8c2c:	f640 4acd 	movw	sl, #3277	; 0xccd
    8c30:	f04f 0b00 	mov.w	fp, #0
    8c34:	e9cd ab00 	strd	sl, fp, [sp]
    8c38:	2306      	movs	r3, #6
    8c3a:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    8c3e:	6928      	ldr	r0, [r5, #16]
    8c40:	f7fe ff3c 	bl	7abc <net_pkt_alloc_with_buffer>
	if (!pkt) {
    8c44:	4606      	mov	r6, r0
    8c46:	2800      	cmp	r0, #0
    8c48:	d061      	beq.n	8d0e <tcp_out_ext+0x102>
	if (data) {
    8c4a:	b124      	cbz	r4, 8c56 <tcp_out_ext+0x4a>
		net_pkt_append_buffer(pkt, data->buffer);
    8c4c:	68a1      	ldr	r1, [r4, #8]
    8c4e:	f012 fae2 	bl	1b216 <net_pkt_append_buffer>
		data->buffer = NULL;
    8c52:	2300      	movs	r3, #0
    8c54:	60a3      	str	r3, [r4, #8]
	ret = ip_header_add(conn, pkt);
    8c56:	4631      	mov	r1, r6
    8c58:	4628      	mov	r0, r5
    8c5a:	f013 fb0e 	bl	1c27a <ip_header_add>
	if (ret < 0) {
    8c5e:	1e04      	subs	r4, r0, #0
    8c60:	db23      	blt.n	8caa <tcp_out_ext+0x9e>
	ret = tcp_header_add(conn, pkt, flags, seq);
    8c62:	4643      	mov	r3, r8
    8c64:	463a      	mov	r2, r7
    8c66:	4631      	mov	r1, r6
    8c68:	4628      	mov	r0, r5
    8c6a:	f013 fb17 	bl	1c29c <tcp_header_add>
	if (ret < 0) {
    8c6e:	1e04      	subs	r4, r0, #0
    8c70:	db1f      	blt.n	8cb2 <tcp_out_ext+0xa6>
	if (conn->send_options.mss_found) {
    8c72:	f895 308a 	ldrb.w	r3, [r5, #138]	; 0x8a
    8c76:	f013 0f01 	tst.w	r3, #1
    8c7a:	d005      	beq.n	8c88 <tcp_out_ext+0x7c>
		ret = net_tcp_set_mss_opt(conn, pkt);
    8c7c:	4631      	mov	r1, r6
    8c7e:	4628      	mov	r0, r5
    8c80:	f013 fee1 	bl	1ca46 <net_tcp_set_mss_opt>
		if (ret < 0) {
    8c84:	1e04      	subs	r4, r0, #0
    8c86:	db18      	blt.n	8cba <tcp_out_ext+0xae>
	ret = tcp_finalize_pkt(pkt);
    8c88:	4630      	mov	r0, r6
    8c8a:	f013 fb66 	bl	1c35a <tcp_finalize_pkt>
	if (ret < 0) {
    8c8e:	1e04      	subs	r4, r0, #0
    8c90:	db17      	blt.n	8cc2 <tcp_out_ext+0xb6>
	if (tcp_send_cb) {
    8c92:	4b20      	ldr	r3, [pc, #128]	; (8d14 <tcp_out_ext+0x108>)
    8c94:	681b      	ldr	r3, [r3, #0]
    8c96:	b1c3      	cbz	r3, 8cca <tcp_out_ext+0xbe>
		ret = tcp_send_cb(pkt);
    8c98:	4630      	mov	r0, r6
    8c9a:	4798      	blx	r3
    8c9c:	4604      	mov	r4, r0
}
    8c9e:	4620      	mov	r0, r4
    8ca0:	b002      	add	sp, #8
    8ca2:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
		alloc_len += sizeof(uint32_t);
    8ca6:	2118      	movs	r1, #24
    8ca8:	e7bd      	b.n	8c26 <tcp_out_ext+0x1a>
		tcp_pkt_unref(pkt);
    8caa:	4630      	mov	r0, r6
    8cac:	f012 fa00 	bl	1b0b0 <net_pkt_unref>
		goto out;
    8cb0:	e7f5      	b.n	8c9e <tcp_out_ext+0x92>
		tcp_pkt_unref(pkt);
    8cb2:	4630      	mov	r0, r6
    8cb4:	f012 f9fc 	bl	1b0b0 <net_pkt_unref>
		goto out;
    8cb8:	e7f1      	b.n	8c9e <tcp_out_ext+0x92>
			tcp_pkt_unref(pkt);
    8cba:	4630      	mov	r0, r6
    8cbc:	f012 f9f8 	bl	1b0b0 <net_pkt_unref>
			goto out;
    8cc0:	e7ed      	b.n	8c9e <tcp_out_ext+0x92>
		tcp_pkt_unref(pkt);
    8cc2:	4630      	mov	r0, r6
    8cc4:	f012 f9f4 	bl	1b0b0 <net_pkt_unref>
		goto out;
    8cc8:	e7e9      	b.n	8c9e <tcp_out_ext+0x92>
	sys_slist_append(&conn->send_queue, &pkt->next);
    8cca:	f106 031c 	add.w	r3, r6, #28
	parent->next = child;
    8cce:	2200      	movs	r2, #0
    8cd0:	61f2      	str	r2, [r6, #28]
	return list->tail;
    8cd2:	69ea      	ldr	r2, [r5, #28]
Z_GENLIST_APPEND(slist, snode)
    8cd4:	b16a      	cbz	r2, 8cf2 <tcp_out_ext+0xe6>
	parent->next = child;
    8cd6:	6013      	str	r3, [r2, #0]
	list->tail = node;
    8cd8:	61eb      	str	r3, [r5, #28]
	if (is_destination_local(pkt)) {
    8cda:	4630      	mov	r0, r6
    8cdc:	f013 fb6e 	bl	1c3bc <is_destination_local>
    8ce0:	b150      	cbz	r0, 8cf8 <tcp_out_ext+0xec>
		k_work_schedule_for_queue(&tcp_work_q,
    8ce2:	2200      	movs	r2, #0
    8ce4:	2300      	movs	r3, #0
    8ce6:	f105 0190 	add.w	r1, r5, #144	; 0x90
    8cea:	480b      	ldr	r0, [pc, #44]	; (8d18 <tcp_out_ext+0x10c>)
    8cec:	f016 fb9e 	bl	1f42c <k_work_schedule_for_queue>
    8cf0:	e7d5      	b.n	8c9e <tcp_out_ext+0x92>
    8cf2:	61eb      	str	r3, [r5, #28]
	list->head = node;
    8cf4:	61ab      	str	r3, [r5, #24]
}
    8cf6:	e7f0      	b.n	8cda <tcp_out_ext+0xce>
	} else if (tcp_send_process_no_lock(conn)) {
    8cf8:	4628      	mov	r0, r5
    8cfa:	f7ff fb9d 	bl	8438 <tcp_send_process_no_lock>
    8cfe:	2800      	cmp	r0, #0
    8d00:	d0cd      	beq.n	8c9e <tcp_out_ext+0x92>
		tcp_conn_unref(conn, -ETIMEDOUT);
    8d02:	f06f 0173 	mvn.w	r1, #115	; 0x73
    8d06:	4628      	mov	r0, r5
    8d08:	f7ff fdca 	bl	88a0 <tcp_conn_unref>
    8d0c:	e7c7      	b.n	8c9e <tcp_out_ext+0x92>
		ret = -ENOBUFS;
    8d0e:	f06f 0468 	mvn.w	r4, #104	; 0x68
	return ret;
    8d12:	e7c4      	b.n	8c9e <tcp_out_ext+0x92>
    8d14:	20002a84 	.word	0x20002a84
    8d18:	20000d40 	.word	0x20000d40

00008d1c <tcp_send_zwp>:
{
    8d1c:	b570      	push	{r4, r5, r6, lr}
    8d1e:	4604      	mov	r4, r0
	struct tcp *conn = CONTAINER_OF(dwork, struct tcp, persist_timer);
    8d20:	f5a0 75a8 	sub.w	r5, r0, #336	; 0x150
	k_mutex_lock(&conn->lock, K_FOREVER);
    8d24:	f5a0 7696 	sub.w	r6, r0, #300	; 0x12c
	return z_impl_k_mutex_lock(mutex, timeout);
    8d28:	f04f 32ff 	mov.w	r2, #4294967295
    8d2c:	f04f 33ff 	mov.w	r3, #4294967295
    8d30:	4630      	mov	r0, r6
    8d32:	f008 f96d 	bl	11010 <z_impl_k_mutex_lock>
	(void)tcp_out_ext(conn, ACK, NULL, conn->seq - 1);
    8d36:	f8d5 3224 	ldr.w	r3, [r5, #548]	; 0x224
    8d3a:	3b01      	subs	r3, #1
    8d3c:	2200      	movs	r2, #0
    8d3e:	2110      	movs	r1, #16
    8d40:	4628      	mov	r0, r5
    8d42:	f7ff ff63 	bl	8c0c <tcp_out_ext>
	tcp_derive_rto(conn);
    8d46:	4628      	mov	r0, r5
    8d48:	f013 fc2f 	bl	1c5aa <tcp_derive_rto>
	if (conn->send_win == 0) {
    8d4c:	f8b5 3230 	ldrh.w	r3, [r5, #560]	; 0x230
    8d50:	bb6b      	cbnz	r3, 8dae <tcp_send_zwp+0x92>
		if (conn->zwp_retries < UINT8_MAX) {
    8d52:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
    8d56:	2bff      	cmp	r3, #255	; 0xff
    8d58:	d002      	beq.n	8d60 <tcp_send_zwp+0x44>
			conn->zwp_retries++;
    8d5a:	3301      	adds	r3, #1
    8d5c:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
		timeout = TCP_RTO_MS << conn->zwp_retries;
    8d60:	f8b4 30e2 	ldrh.w	r3, [r4, #226]	; 0xe2
    8d64:	f894 20e6 	ldrb.w	r2, [r4, #230]	; 0xe6
    8d68:	4093      	lsls	r3, r2
    8d6a:	17da      	asrs	r2, r3, #31
    8d6c:	4611      	mov	r1, r2
		if (timeout == 0 || timeout > ZWP_MAX_DELAY_MS) {
    8d6e:	1e58      	subs	r0, r3, #1
    8d70:	f162 0200 	sbc.w	r2, r2, #0
    8d74:	4d10      	ldr	r5, [pc, #64]	; (8db8 <tcp_send_zwp+0x9c>)
    8d76:	4285      	cmp	r5, r0
    8d78:	f04f 0000 	mov.w	r0, #0
    8d7c:	4190      	sbcs	r0, r2
    8d7e:	d201      	bcs.n	8d84 <tcp_send_zwp+0x68>
			timeout = ZWP_MAX_DELAY_MS;
    8d80:	4b0e      	ldr	r3, [pc, #56]	; (8dbc <tcp_send_zwp+0xa0>)
    8d82:	2100      	movs	r1, #0
			return ((t * to_hz + off) / from_hz);
    8d84:	03c9      	lsls	r1, r1, #15
    8d86:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
    8d8a:	03db      	lsls	r3, r3, #15
    8d8c:	f240 32e7 	movw	r2, #999	; 0x3e7
    8d90:	1898      	adds	r0, r3, r2
    8d92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8d96:	f04f 0300 	mov.w	r3, #0
    8d9a:	f141 0100 	adc.w	r1, r1, #0
    8d9e:	f7f7 fdcd 	bl	93c <__aeabi_uldivmod>
    8da2:	4602      	mov	r2, r0
    8da4:	460b      	mov	r3, r1
		(void)k_work_reschedule_for_queue(
    8da6:	4621      	mov	r1, r4
    8da8:	4805      	ldr	r0, [pc, #20]	; (8dc0 <tcp_send_zwp+0xa4>)
    8daa:	f016 fb59 	bl	1f460 <k_work_reschedule_for_queue>
	return z_impl_k_mutex_unlock(mutex);
    8dae:	4630      	mov	r0, r6
    8db0:	f008 f9b2 	bl	11118 <z_impl_k_mutex_unlock>
}
    8db4:	bd70      	pop	{r4, r5, r6, pc}
    8db6:	bf00      	nop
    8db8:	0001d4bf 	.word	0x0001d4bf
    8dbc:	0001d4c0 	.word	0x0001d4c0
    8dc0:	20000d40 	.word	0x20000d40

00008dc4 <net_tcp_put>:
{
    8dc4:	b570      	push	{r4, r5, r6, lr}
	struct tcp *conn = context->tcp;
    8dc6:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
	if (!conn) {
    8dc8:	2c00      	cmp	r4, #0
    8dca:	d063      	beq.n	8e94 <net_tcp_put+0xd0>
    8dcc:	4605      	mov	r5, r0
	k_mutex_lock(&conn->lock, K_FOREVER);
    8dce:	f104 0624 	add.w	r6, r4, #36	; 0x24
	return z_impl_k_mutex_lock(mutex, timeout);
    8dd2:	f04f 32ff 	mov.w	r2, #4294967295
    8dd6:	f04f 33ff 	mov.w	r3, #4294967295
    8dda:	4630      	mov	r0, r6
    8ddc:	f008 f918 	bl	11010 <z_impl_k_mutex_lock>
	if (conn && conn->state == TCP_ESTABLISHED) {
    8de0:	f894 3220 	ldrb.w	r3, [r4, #544]	; 0x220
    8de4:	2b04      	cmp	r3, #4
    8de6:	d007      	beq.n	8df8 <net_tcp_put+0x34>
	return z_impl_k_mutex_unlock(mutex);
    8de8:	4630      	mov	r0, r6
    8dea:	f008 f995 	bl	11118 <z_impl_k_mutex_unlock>
	net_context_unref(context);
    8dee:	4628      	mov	r0, r5
    8df0:	f011 fb29 	bl	1a446 <net_context_unref>
	return 0;
    8df4:	2000      	movs	r0, #0
}
    8df6:	bd70      	pop	{r4, r5, r6, pc}
		if (conn->send_data_total > 0) {
    8df8:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
    8dfc:	b1db      	cbz	r3, 8e36 <net_tcp_put+0x72>
			conn->in_close = true;
    8dfe:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
    8e02:	f043 0304 	orr.w	r3, r3, #4
    8e06:	f884 3237 	strb.w	r3, [r4, #567]	; 0x237
						    K_MSEC(TCP_RTO_MS));
    8e0a:	f8b4 0232 	ldrh.w	r0, [r4, #562]	; 0x232
    8e0e:	03c0      	lsls	r0, r0, #15
    8e10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8e14:	2300      	movs	r3, #0
    8e16:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    8e1a:	2100      	movs	r1, #0
    8e1c:	f7f7 fd8e 	bl	93c <__aeabi_uldivmod>
    8e20:	4602      	mov	r2, r0
    8e22:	460b      	mov	r3, r1
			k_work_reschedule_for_queue(&tcp_work_q,
    8e24:	f104 01f0 	add.w	r1, r4, #240	; 0xf0
    8e28:	481c      	ldr	r0, [pc, #112]	; (8e9c <net_tcp_put+0xd8>)
    8e2a:	f016 fb19 	bl	1f460 <k_work_reschedule_for_queue>
		net_context_ref(context);
    8e2e:	4628      	mov	r0, r5
    8e30:	f011 fafc 	bl	1a42c <net_context_ref>
    8e34:	e7d8      	b.n	8de8 <net_tcp_put+0x24>
						    FIN_TIMEOUT);
    8e36:	4b1a      	ldr	r3, [pc, #104]	; (8ea0 <net_tcp_put+0xdc>)
    8e38:	6818      	ldr	r0, [r3, #0]
    8e3a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    8e3e:	17c1      	asrs	r1, r0, #31
    8e40:	03c9      	lsls	r1, r1, #15
    8e42:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    8e46:	03c0      	lsls	r0, r0, #15
    8e48:	f240 33e7 	movw	r3, #999	; 0x3e7
    8e4c:	18c0      	adds	r0, r0, r3
    8e4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8e52:	f04f 0300 	mov.w	r3, #0
    8e56:	f141 0100 	adc.w	r1, r1, #0
    8e5a:	f7f7 fd6f 	bl	93c <__aeabi_uldivmod>
    8e5e:	4602      	mov	r2, r0
    8e60:	460b      	mov	r3, r1
			k_work_reschedule_for_queue(&tcp_work_q,
    8e62:	f504 71d8 	add.w	r1, r4, #432	; 0x1b0
    8e66:	480d      	ldr	r0, [pc, #52]	; (8e9c <net_tcp_put+0xd8>)
    8e68:	f016 fafa 	bl	1f460 <k_work_reschedule_for_queue>
					  conn->seq + conn->unacked_len);
    8e6c:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
    8e70:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
			ret = tcp_out_ext(conn, FIN | ACK, NULL,
    8e74:	4413      	add	r3, r2
    8e76:	2200      	movs	r2, #0
    8e78:	2111      	movs	r1, #17
    8e7a:	4620      	mov	r0, r4
    8e7c:	f7ff fec6 	bl	8c0c <tcp_out_ext>
			if (ret == 0) {
    8e80:	b920      	cbnz	r0, 8e8c <net_tcp_put+0xc8>
				conn_seq(conn, + 1);
    8e82:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
    8e86:	3301      	adds	r3, #1
    8e88:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
			conn_state(conn, TCP_FIN_WAIT_1);
    8e8c:	2305      	movs	r3, #5
    8e8e:	f884 3220 	strb.w	r3, [r4, #544]	; 0x220
    8e92:	e7cc      	b.n	8e2e <net_tcp_put+0x6a>
		return -ENOENT;
    8e94:	f06f 0001 	mvn.w	r0, #1
    8e98:	e7ad      	b.n	8df6 <net_tcp_put+0x32>
    8e9a:	bf00      	nop
    8e9c:	20000d40 	.word	0x20000d40
    8ea0:	20002a90 	.word	0x20002a90

00008ea4 <tcp_resend_data>:
{
    8ea4:	b570      	push	{r4, r5, r6, lr}
    8ea6:	4604      	mov	r4, r0
	struct tcp *conn = CONTAINER_OF(dwork, struct tcp, send_data_timer);
    8ea8:	f1a0 06f0 	sub.w	r6, r0, #240	; 0xf0
	k_mutex_lock(&conn->lock, K_FOREVER);
    8eac:	f1a0 05cc 	sub.w	r5, r0, #204	; 0xcc
	return z_impl_k_mutex_lock(mutex, timeout);
    8eb0:	f04f 32ff 	mov.w	r2, #4294967295
    8eb4:	f04f 33ff 	mov.w	r3, #4294967295
    8eb8:	4628      	mov	r0, r5
    8eba:	f008 f8a9 	bl	11010 <z_impl_k_mutex_lock>
	if (conn->send_data_retries >= tcp_retries) {
    8ebe:	f894 3144 	ldrb.w	r3, [r4, #324]	; 0x144
    8ec2:	2b08      	cmp	r3, #8
    8ec4:	d906      	bls.n	8ed4 <tcp_resend_data+0x30>
		conn_unref = true;
    8ec6:	2401      	movs	r4, #1
	return z_impl_k_mutex_unlock(mutex);
    8ec8:	4628      	mov	r0, r5
    8eca:	f008 f925 	bl	11118 <z_impl_k_mutex_unlock>
	if (conn_unref) {
    8ece:	2c00      	cmp	r4, #0
    8ed0:	d176      	bne.n	8fc0 <tcp_resend_data+0x11c>
}
    8ed2:	bd70      	pop	{r4, r5, r6, pc}
	conn->data_mode = TCP_DATA_MODE_RESEND;
    8ed4:	2301      	movs	r3, #1
    8ed6:	f884 3131 	strb.w	r3, [r4, #305]	; 0x131
	conn->unacked_len = 0;
    8eda:	2300      	movs	r3, #0
    8edc:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
	ret = tcp_send_data(conn);
    8ee0:	4630      	mov	r0, r6
    8ee2:	f013 fdf4 	bl	1cace <tcp_send_data>
	conn->send_data_retries++;
    8ee6:	f894 1144 	ldrb.w	r1, [r4, #324]	; 0x144
    8eea:	3101      	adds	r1, #1
    8eec:	b2c9      	uxtb	r1, r1
    8eee:	f884 1144 	strb.w	r1, [r4, #324]	; 0x144
	if (ret == 0) {
    8ef2:	bbb8      	cbnz	r0, 8f64 <tcp_resend_data+0xc0>
		if (conn->in_close && conn->send_data_total == 0) {
    8ef4:	f894 3147 	ldrb.w	r3, [r4, #327]	; 0x147
    8ef8:	f013 0f04 	tst.w	r3, #4
    8efc:	d035      	beq.n	8f6a <tcp_resend_data+0xc6>
    8efe:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    8f02:	bb93      	cbnz	r3, 8f6a <tcp_resend_data+0xc6>
						    FIN_TIMEOUT);
    8f04:	4b31      	ldr	r3, [pc, #196]	; (8fcc <tcp_resend_data+0x128>)
    8f06:	681b      	ldr	r3, [r3, #0]
    8f08:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    8f0c:	17d9      	asrs	r1, r3, #31
    8f0e:	03c9      	lsls	r1, r1, #15
    8f10:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
    8f14:	03db      	lsls	r3, r3, #15
    8f16:	f240 32e7 	movw	r2, #999	; 0x3e7
    8f1a:	1898      	adds	r0, r3, r2
    8f1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8f20:	f04f 0300 	mov.w	r3, #0
    8f24:	f141 0100 	adc.w	r1, r1, #0
    8f28:	f7f7 fd08 	bl	93c <__aeabi_uldivmod>
    8f2c:	4602      	mov	r2, r0
    8f2e:	460b      	mov	r3, r1
			k_work_reschedule_for_queue(&tcp_work_q,
    8f30:	f104 01c0 	add.w	r1, r4, #192	; 0xc0
    8f34:	4826      	ldr	r0, [pc, #152]	; (8fd0 <tcp_resend_data+0x12c>)
    8f36:	f016 fa93 	bl	1f460 <k_work_reschedule_for_queue>
			conn_state(conn, TCP_FIN_WAIT_1);
    8f3a:	2305      	movs	r3, #5
    8f3c:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
					  conn->seq + conn->unacked_len);
    8f40:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
    8f44:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
			ret = tcp_out_ext(conn, FIN | ACK, NULL,
    8f48:	4413      	add	r3, r2
    8f4a:	2200      	movs	r2, #0
    8f4c:	2111      	movs	r1, #17
    8f4e:	4630      	mov	r0, r6
    8f50:	f7ff fe5c 	bl	8c0c <tcp_out_ext>
			if (ret == 0) {
    8f54:	b920      	cbnz	r0, 8f60 <tcp_resend_data+0xbc>
				conn_seq(conn, + 1);
    8f56:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
    8f5a:	3301      	adds	r3, #1
    8f5c:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
	bool conn_unref = false;
    8f60:	2400      	movs	r4, #0
    8f62:	e7b1      	b.n	8ec8 <tcp_resend_data+0x24>
	} else if (ret == -ENODATA) {
    8f64:	f110 0f3d 	cmn.w	r0, #61	; 0x3d
    8f68:	d01d      	beq.n	8fa6 <tcp_resend_data+0x102>
	exp_tcp_rto = TCP_RTO_MS;
    8f6a:	f8b4 3142 	ldrh.w	r3, [r4, #322]	; 0x142
	if (conn->send_data_retries < tcp_retries) {
    8f6e:	2908      	cmp	r1, #8
    8f70:	dd24      	ble.n	8fbc <tcp_resend_data+0x118>
				    K_MSEC(exp_tcp_rto));
    8f72:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    8f76:	17d9      	asrs	r1, r3, #31
    8f78:	03c9      	lsls	r1, r1, #15
    8f7a:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
    8f7e:	03db      	lsls	r3, r3, #15
    8f80:	f240 32e7 	movw	r2, #999	; 0x3e7
    8f84:	1898      	adds	r0, r3, r2
    8f86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8f8a:	f04f 0300 	mov.w	r3, #0
    8f8e:	f141 0100 	adc.w	r1, r1, #0
    8f92:	f7f7 fcd3 	bl	93c <__aeabi_uldivmod>
    8f96:	4602      	mov	r2, r0
    8f98:	460b      	mov	r3, r1
	k_work_reschedule_for_queue(&tcp_work_q, &conn->send_data_timer,
    8f9a:	4621      	mov	r1, r4
    8f9c:	480c      	ldr	r0, [pc, #48]	; (8fd0 <tcp_resend_data+0x12c>)
    8f9e:	f016 fa5f 	bl	1f460 <k_work_reschedule_for_queue>
	bool conn_unref = false;
    8fa2:	2400      	movs	r4, #0
    8fa4:	e790      	b.n	8ec8 <tcp_resend_data+0x24>
		conn->data_mode = TCP_DATA_MODE_SEND;
    8fa6:	2300      	movs	r3, #0
    8fa8:	f884 3131 	strb.w	r3, [r4, #305]	; 0x131
	bool conn_unref = false;
    8fac:	461c      	mov	r4, r3
		goto out;
    8fae:	e78b      	b.n	8ec8 <tcp_resend_data+0x24>
			exp_tcp_rto += exp_tcp_rto >> 1;
    8fb0:	eb03 0363 	add.w	r3, r3, r3, asr #1
		for (int i = 0; i < conn->send_data_retries; i++) {
    8fb4:	3201      	adds	r2, #1
    8fb6:	428a      	cmp	r2, r1
    8fb8:	dbfa      	blt.n	8fb0 <tcp_resend_data+0x10c>
    8fba:	e7da      	b.n	8f72 <tcp_resend_data+0xce>
    8fbc:	2200      	movs	r2, #0
    8fbe:	e7fa      	b.n	8fb6 <tcp_resend_data+0x112>
		tcp_conn_unref(conn, -ETIMEDOUT);
    8fc0:	f06f 0173 	mvn.w	r1, #115	; 0x73
    8fc4:	4630      	mov	r0, r6
    8fc6:	f7ff fc6b 	bl	88a0 <tcp_conn_unref>
    8fca:	e782      	b.n	8ed2 <tcp_resend_data+0x2e>
    8fcc:	20002a90 	.word	0x20002a90
    8fd0:	20000d40 	.word	0x20000d40

00008fd4 <tcp_data_get>:
{
    8fd4:	b570      	push	{r4, r5, r6, lr}
    8fd6:	4605      	mov	r5, r0
    8fd8:	460c      	mov	r4, r1
	if (tcp_recv_cb) {
    8fda:	4b1b      	ldr	r3, [pc, #108]	; (9048 <tcp_data_get+0x74>)
    8fdc:	681b      	ldr	r3, [r3, #0]
    8fde:	b9b3      	cbnz	r3, 900e <tcp_data_get+0x3a>
    8fe0:	4616      	mov	r6, r2
	if (conn->context->recv_cb) {
    8fe2:	6843      	ldr	r3, [r0, #4]
    8fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8fe6:	b36b      	cbz	r3, 9044 <tcp_data_get+0x70>
		*len += tcp_check_pending_data(conn, pkt, *len);
    8fe8:	6812      	ldr	r2, [r2, #0]
    8fea:	f013 fbca 	bl	1c782 <tcp_check_pending_data>
    8fee:	6833      	ldr	r3, [r6, #0]
    8ff0:	4403      	add	r3, r0
    8ff2:	6033      	str	r3, [r6, #0]
		net_pkt_cursor_init(pkt);
    8ff4:	4620      	mov	r0, r4
    8ff6:	f012 f8f3 	bl	1b1e0 <net_pkt_cursor_init>
	pkt->overwrite = overwrite;
    8ffa:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
    8ffe:	f043 0301 	orr.w	r3, r3, #1
    9002:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
	return net_buf_frags_len(pkt->frags);
    9006:	68a3      	ldr	r3, [r4, #8]
	size_t bytes = 0;
    9008:	f04f 0c00 	mov.w	ip, #0
	while (buf) {
    900c:	e006      	b.n	901c <tcp_data_get+0x48>
		tcp_recv_cb(conn, pkt);
    900e:	4798      	blx	r3
	enum net_verdict ret = NET_DROP;
    9010:	2002      	movs	r0, #2
		goto out;
    9012:	e016      	b.n	9042 <tcp_data_get+0x6e>
		bytes += buf->len;
    9014:	f8b3 e00c 	ldrh.w	lr, [r3, #12]
    9018:	44f4      	add	ip, lr
		buf = buf->frags;
    901a:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    901c:	2b00      	cmp	r3, #0
    901e:	d1f9      	bne.n	9014 <tcp_data_get+0x40>
		net_pkt_skip(pkt, net_pkt_get_len(pkt) - *len);
    9020:	6831      	ldr	r1, [r6, #0]
    9022:	ebac 0101 	sub.w	r1, ip, r1
    9026:	4620      	mov	r0, r4
    9028:	f012 f94c 	bl	1b2c4 <net_pkt_skip>
		tcp_update_recv_wnd(conn, -*len);
    902c:	6831      	ldr	r1, [r6, #0]
    902e:	4249      	negs	r1, r1
    9030:	4628      	mov	r0, r5
    9032:	f013 fe81 	bl	1cd38 <tcp_update_recv_wnd>
		k_fifo_put(&conn->recv_data, pkt);
    9036:	4621      	mov	r1, r4
    9038:	f105 0068 	add.w	r0, r5, #104	; 0x68
    903c:	f016 f8b9 	bl	1f1b2 <k_queue_append>
		ret = NET_OK;
    9040:	2000      	movs	r0, #0
}
    9042:	bd70      	pop	{r4, r5, r6, pc}
	enum net_verdict ret = NET_DROP;
    9044:	2002      	movs	r0, #2
    9046:	e7fc      	b.n	9042 <tcp_data_get+0x6e>
    9048:	20002a80 	.word	0x20002a80

0000904c <tcp_data_received>:
{
    904c:	b570      	push	{r4, r5, r6, lr}
	if (*len == 0) {
    904e:	6813      	ldr	r3, [r2, #0]
    9050:	b303      	cbz	r3, 9094 <tcp_data_received+0x48>
    9052:	4604      	mov	r4, r0
    9054:	4615      	mov	r5, r2
	ret = tcp_data_get(conn, pkt, len);
    9056:	f7ff ffbd 	bl	8fd4 <tcp_data_get>
    905a:	4606      	mov	r6, r0
	conn_ack(conn, *len);
    905c:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
    9060:	682a      	ldr	r2, [r5, #0]
    9062:	4413      	add	r3, r2
    9064:	f8c4 3228 	str.w	r3, [r4, #552]	; 0x228
	if (tcp_short_window(conn)) {
    9068:	4620      	mov	r0, r4
    906a:	f013 fe1a 	bl	1cca2 <tcp_short_window>
    906e:	b140      	cbz	r0, 9082 <tcp_data_received+0x36>
		k_work_schedule_for_queue(&tcp_work_q, &conn->ack_timer,
    9070:	f640 42cd 	movw	r2, #3277	; 0xccd
    9074:	2300      	movs	r3, #0
    9076:	f504 71c0 	add.w	r1, r4, #384	; 0x180
    907a:	4808      	ldr	r0, [pc, #32]	; (909c <tcp_data_received+0x50>)
    907c:	f016 f9d6 	bl	1f42c <k_work_schedule_for_queue>
    9080:	e009      	b.n	9096 <tcp_data_received+0x4a>
		k_work_cancel_delayable(&conn->ack_timer);
    9082:	f504 70c0 	add.w	r0, r4, #384	; 0x180
    9086:	f016 fa08 	bl	1f49a <k_work_cancel_delayable>
		tcp_out(conn, ACK);
    908a:	2110      	movs	r1, #16
    908c:	4620      	mov	r0, r4
    908e:	f013 fd03 	bl	1ca98 <tcp_out>
    9092:	e000      	b.n	9096 <tcp_data_received+0x4a>
		return NET_DROP;
    9094:	2602      	movs	r6, #2
}
    9096:	4630      	mov	r0, r6
    9098:	bd70      	pop	{r4, r5, r6, pc}
    909a:	bf00      	nop
    909c:	20000d40 	.word	0x20000d40

000090a0 <tcp_send_queued_data>:
{
    90a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->data_mode == TCP_DATA_MODE_RESEND) {
    90a2:	f890 3221 	ldrb.w	r3, [r0, #545]	; 0x221
    90a6:	2b01      	cmp	r3, #1
    90a8:	d059      	beq.n	915e <tcp_send_queued_data+0xbe>
    90aa:	4604      	mov	r4, r0
	int ret = 0;
    90ac:	2600      	movs	r6, #0
    90ae:	e00f      	b.n	90d0 <tcp_send_queued_data+0x30>
			if (tcp_unsent_len(conn) < conn_mss(conn)) {
    90b0:	f44f 7706 	mov.w	r7, #536	; 0x218
    90b4:	e021      	b.n	90fa <tcp_send_queued_data+0x5a>
    90b6:	4620      	mov	r0, r4
    90b8:	f013 fcab 	bl	1ca12 <net_tcp_get_supported_mss>
    90bc:	e001      	b.n	90c2 <tcp_send_queued_data+0x22>
    90be:	f44f 7006 	mov.w	r0, #536	; 0x218
    90c2:	4285      	cmp	r5, r0
    90c4:	db26      	blt.n	9114 <tcp_send_queued_data+0x74>
		ret = tcp_send_data(conn);
    90c6:	4620      	mov	r0, r4
    90c8:	f013 fd01 	bl	1cace <tcp_send_data>
		if (ret < 0) {
    90cc:	1e06      	subs	r6, r0, #0
    90ce:	db21      	blt.n	9114 <tcp_send_queued_data+0x74>
	while (tcp_unsent_len(conn) > 0) {
    90d0:	4620      	mov	r0, r4
    90d2:	f013 f861 	bl	1c198 <tcp_unsent_len>
    90d6:	1e05      	subs	r5, r0, #0
    90d8:	dd1c      	ble.n	9114 <tcp_send_queued_data+0x74>
		if ((conn->tcp_nodelay == false) && (conn->unacked_len > 0)) {
    90da:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
    90de:	f013 0f08 	tst.w	r3, #8
    90e2:	d1f0      	bne.n	90c6 <tcp_send_queued_data+0x26>
    90e4:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
    90e8:	2b00      	cmp	r3, #0
    90ea:	ddec      	ble.n	90c6 <tcp_send_queued_data+0x26>
			if (tcp_unsent_len(conn) < conn_mss(conn)) {
    90ec:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
    90f0:	f013 0f01 	tst.w	r3, #1
    90f4:	d0dc      	beq.n	90b0 <tcp_send_queued_data+0x10>
    90f6:	f8b4 7080 	ldrh.w	r7, [r4, #128]	; 0x80
    90fa:	4620      	mov	r0, r4
    90fc:	f013 fc89 	bl	1ca12 <net_tcp_get_supported_mss>
    9100:	42b8      	cmp	r0, r7
    9102:	ddd8      	ble.n	90b6 <tcp_send_queued_data+0x16>
    9104:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
    9108:	f013 0f01 	tst.w	r3, #1
    910c:	d0d7      	beq.n	90be <tcp_send_queued_data+0x1e>
    910e:	f8b4 0080 	ldrh.w	r0, [r4, #128]	; 0x80
    9112:	e7d6      	b.n	90c2 <tcp_send_queued_data+0x22>
	if (conn->send_data_total) {
    9114:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
    9118:	b94b      	cbnz	r3, 912e <tcp_send_queued_data+0x8e>
	bool subscribe = false;
    911a:	2500      	movs	r5, #0
	return z_timeout_remaining(&dwork->timeout);
    911c:	f504 7080 	add.w	r0, r4, #256	; 0x100
    9120:	f016 fbb1 	bl	1f886 <z_timeout_remaining>
	if (k_work_delayable_remaining_get(&conn->send_data_timer)) {
    9124:	4308      	orrs	r0, r1
    9126:	d100      	bne.n	912a <tcp_send_queued_data+0x8a>
	if (subscribe) {
    9128:	b91d      	cbnz	r5, 9132 <tcp_send_queued_data+0x92>
}
    912a:	4630      	mov	r0, r6
    912c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		subscribe = true;
    912e:	2501      	movs	r5, #1
    9130:	e7f4      	b.n	911c <tcp_send_queued_data+0x7c>
		conn->send_data_retries = 0;
    9132:	2300      	movs	r3, #0
    9134:	f884 3234 	strb.w	r3, [r4, #564]	; 0x234
					    K_MSEC(TCP_RTO_MS));
    9138:	f8b4 0232 	ldrh.w	r0, [r4, #562]	; 0x232
    913c:	03c0      	lsls	r0, r0, #15
    913e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    9142:	2300      	movs	r3, #0
    9144:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    9148:	2100      	movs	r1, #0
    914a:	f7f7 fbf7 	bl	93c <__aeabi_uldivmod>
    914e:	4602      	mov	r2, r0
    9150:	460b      	mov	r3, r1
		k_work_reschedule_for_queue(&tcp_work_q, &conn->send_data_timer,
    9152:	f104 01f0 	add.w	r1, r4, #240	; 0xf0
    9156:	4803      	ldr	r0, [pc, #12]	; (9164 <tcp_send_queued_data+0xc4>)
    9158:	f016 f982 	bl	1f460 <k_work_reschedule_for_queue>
    915c:	e7e5      	b.n	912a <tcp_send_queued_data+0x8a>
	int ret = 0;
    915e:	2600      	movs	r6, #0
	return ret;
    9160:	e7e3      	b.n	912a <tcp_send_queued_data+0x8a>
    9162:	bf00      	nop
    9164:	20000d40 	.word	0x20000d40

00009168 <net_tcp_queue_data>:
{
    9168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct tcp *conn = context->tcp;
    916c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
	if (!conn || conn->state != TCP_ESTABLISHED) {
    916e:	2c00      	cmp	r4, #0
    9170:	f000 8089 	beq.w	9286 <net_tcp_queue_data+0x11e>
    9174:	460e      	mov	r6, r1
    9176:	f894 3220 	ldrb.w	r3, [r4, #544]	; 0x220
    917a:	2b04      	cmp	r3, #4
    917c:	f040 8086 	bne.w	928c <net_tcp_queue_data+0x124>
	k_mutex_lock(&conn->lock, K_FOREVER);
    9180:	f104 0824 	add.w	r8, r4, #36	; 0x24
	return z_impl_k_mutex_lock(mutex, timeout);
    9184:	f04f 32ff 	mov.w	r2, #4294967295
    9188:	f04f 33ff 	mov.w	r3, #4294967295
    918c:	4640      	mov	r0, r8
    918e:	f007 ff3f 	bl	11010 <z_impl_k_mutex_lock>
	if (tcp_window_full(conn)) {
    9192:	4620      	mov	r0, r4
    9194:	f012 fff7 	bl	1c186 <tcp_window_full>
    9198:	b190      	cbz	r0, 91c0 <net_tcp_queue_data+0x58>
		if (conn->send_win == 0) {
    919a:	f8b4 3230 	ldrh.w	r3, [r4, #560]	; 0x230
    919e:	b93b      	cbnz	r3, 91b0 <net_tcp_queue_data+0x48>
    91a0:	f06f 070a 	mvn.w	r7, #10
	return z_impl_k_mutex_unlock(mutex);
    91a4:	4640      	mov	r0, r8
    91a6:	f007 ffb7 	bl	11118 <z_impl_k_mutex_unlock>
}
    91aa:	4638      	mov	r0, r7
    91ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		(void)k_work_schedule_for_queue(&tcp_work_q,
    91b0:	2200      	movs	r2, #0
    91b2:	2300      	movs	r3, #0
    91b4:	f104 01f0 	add.w	r1, r4, #240	; 0xf0
    91b8:	4836      	ldr	r0, [pc, #216]	; (9294 <net_tcp_queue_data+0x12c>)
    91ba:	f016 f937 	bl	1f42c <k_work_schedule_for_queue>
		goto out;
    91be:	e7ef      	b.n	91a0 <net_tcp_queue_data+0x38>
    91c0:	68b3      	ldr	r3, [r6, #8]
	size_t bytes = 0;
    91c2:	2500      	movs	r5, #0
	while (buf) {
    91c4:	e002      	b.n	91cc <net_tcp_queue_data+0x64>
		bytes += buf->len;
    91c6:	899a      	ldrh	r2, [r3, #12]
    91c8:	4415      	add	r5, r2
		buf = buf->frags;
    91ca:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    91cc:	2b00      	cmp	r3, #0
    91ce:	d1fa      	bne.n	91c6 <net_tcp_queue_data+0x5e>
	if (conn->send_data->buffer) {
    91d0:	68a3      	ldr	r3, [r4, #8]
    91d2:	f8d3 9008 	ldr.w	r9, [r3, #8]
    91d6:	f1b9 0f00 	cmp.w	r9, #0
    91da:	d003      	beq.n	91e4 <net_tcp_queue_data+0x7c>
		orig_buf = net_buf_frag_last(conn->send_data->buffer);
    91dc:	4648      	mov	r0, r9
    91de:	f010 f89e 	bl	1931e <net_buf_frag_last>
    91e2:	4681      	mov	r9, r0
	net_pkt_append_buffer(conn->send_data, pkt->buffer);
    91e4:	68b1      	ldr	r1, [r6, #8]
    91e6:	68a0      	ldr	r0, [r4, #8]
    91e8:	f012 f815 	bl	1b216 <net_pkt_append_buffer>
	conn->send_data_total += len;
    91ec:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
    91f0:	442b      	add	r3, r5
    91f2:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
	pkt->buffer = NULL;
    91f6:	2300      	movs	r3, #0
    91f8:	60b3      	str	r3, [r6, #8]
	ret = tcp_send_queued_data(conn);
    91fa:	4620      	mov	r0, r4
    91fc:	f7ff ff50 	bl	90a0 <tcp_send_queued_data>
	if (ret < 0 && ret != -ENOBUFS) {
    9200:	1e07      	subs	r7, r0, #0
    9202:	db0a      	blt.n	921a <net_tcp_queue_data+0xb2>
	if (ret == -ENOBUFS) {
    9204:	f117 0f69 	cmn.w	r7, #105	; 0x69
    9208:	d018      	beq.n	923c <net_tcp_queue_data+0xd4>
		if (tcp_window_full(conn)) {
    920a:	4620      	mov	r0, r4
    920c:	f012 ffbb 	bl	1c186 <tcp_window_full>
    9210:	bb90      	cbnz	r0, 9278 <net_tcp_queue_data+0x110>
		tcp_pkt_unref(pkt);
    9212:	4630      	mov	r0, r6
    9214:	f011 ff4c 	bl	1b0b0 <net_pkt_unref>
    9218:	e7c4      	b.n	91a4 <net_tcp_queue_data+0x3c>
	if (ret < 0 && ret != -ENOBUFS) {
    921a:	f117 0f69 	cmn.w	r7, #105	; 0x69
    921e:	d108      	bne.n	9232 <net_tcp_queue_data+0xca>
		(conn->send_data_total < (conn->unacked_len + len))) {
    9220:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
    9224:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
    9228:	442b      	add	r3, r5
	if ((ret == -ENOBUFS) &&
    922a:	429a      	cmp	r2, r3
    922c:	d2ea      	bcs.n	9204 <net_tcp_queue_data+0x9c>
		ret = 0;
    922e:	2700      	movs	r7, #0
    9230:	e7eb      	b.n	920a <net_tcp_queue_data+0xa2>
		tcp_conn_unref(conn, ret);
    9232:	4639      	mov	r1, r7
    9234:	4620      	mov	r0, r4
    9236:	f7ff fb33 	bl	88a0 <tcp_conn_unref>
		goto out;
    923a:	e7b3      	b.n	91a4 <net_tcp_queue_data+0x3c>
		conn->send_data_total -= len;
    923c:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
    9240:	1b5b      	subs	r3, r3, r5
    9242:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
		if (orig_buf) {
    9246:	f1b9 0f00 	cmp.w	r9, #0
    924a:	d00e      	beq.n	926a <net_tcp_queue_data+0x102>
			pkt->buffer = orig_buf->frags;
    924c:	f8d9 3000 	ldr.w	r3, [r9]
    9250:	60b3      	str	r3, [r6, #8]
			orig_buf->frags = NULL;
    9252:	2300      	movs	r3, #0
    9254:	f8c9 3000 	str.w	r3, [r9]
		if (conn->send_data_total == 0) {
    9258:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
    925c:	2b00      	cmp	r3, #0
    925e:	d1a1      	bne.n	91a4 <net_tcp_queue_data+0x3c>
			k_work_cancel_delayable(&conn->send_data_timer);
    9260:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
    9264:	f016 f919 	bl	1f49a <k_work_cancel_delayable>
    9268:	e79c      	b.n	91a4 <net_tcp_queue_data+0x3c>
			pkt->buffer = conn->send_data->buffer;
    926a:	68a3      	ldr	r3, [r4, #8]
    926c:	689b      	ldr	r3, [r3, #8]
    926e:	60b3      	str	r3, [r6, #8]
			conn->send_data->buffer = NULL;
    9270:	68a3      	ldr	r3, [r4, #8]
    9272:	2200      	movs	r2, #0
    9274:	609a      	str	r2, [r3, #8]
    9276:	e7ef      	b.n	9258 <net_tcp_queue_data+0xf0>
			(void)k_sem_take(&conn->tx_sem, K_NO_WAIT);
    9278:	f104 0050 	add.w	r0, r4, #80	; 0x50
	return z_impl_k_sem_take(sem, timeout);
    927c:	2200      	movs	r2, #0
    927e:	2300      	movs	r3, #0
    9280:	f007 ffee 	bl	11260 <z_impl_k_sem_take>
    9284:	e7c5      	b.n	9212 <net_tcp_queue_data+0xaa>
		return -ENOTCONN;
    9286:	f06f 077f 	mvn.w	r7, #127	; 0x7f
    928a:	e78e      	b.n	91aa <net_tcp_queue_data+0x42>
    928c:	f06f 077f 	mvn.w	r7, #127	; 0x7f
    9290:	e78b      	b.n	91aa <net_tcp_queue_data+0x42>
    9292:	bf00      	nop
    9294:	20000d40 	.word	0x20000d40

00009298 <tcp_in>:
{
    9298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    929c:	b089      	sub	sp, #36	; 0x24
    929e:	4604      	mov	r4, r0
	struct tcphdr *th = pkt ? th_get(pkt) : NULL;
    92a0:	460e      	mov	r6, r1
    92a2:	b191      	cbz	r1, 92ca <tcp_in+0x32>
    92a4:	4608      	mov	r0, r1
    92a6:	f013 f90d 	bl	1c4c4 <th_get>
	uint8_t next = 0, fl = 0;
    92aa:	2700      	movs	r7, #0
	size_t tcp_options_len = th ? (th_off(th) - 5) * 4 : 0;
    92ac:	4605      	mov	r5, r0
    92ae:	2800      	cmp	r0, #0
    92b0:	d061      	beq.n	9376 <tcp_in+0xde>
    92b2:	f890 800c 	ldrb.w	r8, [r0, #12]
    92b6:	ea4f 1818 	mov.w	r8, r8, lsr #4
    92ba:	f1a8 0805 	sub.w	r8, r8, #5
    92be:	ea4f 0888 	mov.w	r8, r8, lsl #2
		fl = th_flags(th) & ~(ECN | CWR);
    92c2:	7b47      	ldrb	r7, [r0, #13]
    92c4:	f007 073f 	and.w	r7, r7, #63	; 0x3f
    92c8:	e002      	b.n	92d0 <tcp_in+0x38>
	uint8_t next = 0, fl = 0;
    92ca:	2700      	movs	r7, #0
	struct tcphdr *th = pkt ? th_get(pkt) : NULL;
    92cc:	460d      	mov	r5, r1
	size_t tcp_options_len = th ? (th_off(th) - 5) * 4 : 0;
    92ce:	46b8      	mov	r8, r7
	k_mutex_lock(&conn->lock, K_FOREVER);
    92d0:	f104 0b24 	add.w	fp, r4, #36	; 0x24
	return z_impl_k_mutex_lock(mutex, timeout);
    92d4:	f04f 32ff 	mov.w	r2, #4294967295
    92d8:	f04f 33ff 	mov.w	r3, #4294967295
    92dc:	4658      	mov	r0, fp
    92de:	f007 fe97 	bl	11010 <z_impl_k_mutex_lock>
	if (th && th_off(th) < 5) {
    92e2:	b115      	cbz	r5, 92ea <tcp_in+0x52>
    92e4:	7b2b      	ldrb	r3, [r5, #12]
    92e6:	2b4f      	cmp	r3, #79	; 0x4f
    92e8:	d948      	bls.n	937c <tcp_in+0xe4>
	if (FL(&fl, &, RST)) {
    92ea:	f017 09ff 	ands.w	r9, r7, #255	; 0xff
    92ee:	d150      	bne.n	9392 <tcp_in+0xfa>
	if (tcp_options_len && !tcp_options_check(&conn->recv_options, pkt,
    92f0:	f1b8 0f00 	cmp.w	r8, #0
    92f4:	d168      	bne.n	93c8 <tcp_in+0x130>
	if (th && (conn->state != TCP_LISTEN) && (conn->state != TCP_SYN_SENT) &&
    92f6:	2d00      	cmp	r5, #0
    92f8:	f000 80ab 	beq.w	9452 <tcp_in+0x1ba>
    92fc:	f894 3220 	ldrb.w	r3, [r4, #544]	; 0x220
    9300:	2b01      	cmp	r3, #1
    9302:	d009      	beq.n	9318 <tcp_in+0x80>
    9304:	2b02      	cmp	r3, #2
    9306:	d007      	beq.n	9318 <tcp_in+0x80>
	    tcp_validate_seq(conn, th) && FL(&fl, &, SYN)) {
    9308:	4629      	mov	r1, r5
    930a:	4620      	mov	r0, r4
    930c:	f012 ff59 	bl	1c1c2 <tcp_validate_seq>
	if (th && (conn->state != TCP_LISTEN) && (conn->state != TCP_SYN_SENT) &&
    9310:	b110      	cbz	r0, 9318 <tcp_in+0x80>
	    tcp_validate_seq(conn, th) && FL(&fl, &, SYN)) {
    9312:	f1b9 0f00 	cmp.w	r9, #0
    9316:	d16a      	bne.n	93ee <tcp_in+0x156>
		conn->send_win = ntohs(th_win(th));
    9318:	89ea      	ldrh	r2, [r5, #14]
    931a:	0213      	lsls	r3, r2, #8
    931c:	b21b      	sxth	r3, r3
    931e:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
    9322:	b29b      	uxth	r3, r3
    9324:	f8a4 3230 	strh.w	r3, [r4, #560]	; 0x230
		if ((size_t)conn->send_win > max_win) {
    9328:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    932c:	d903      	bls.n	9336 <tcp_in+0x9e>
			conn->send_win = max_win;
    932e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
    9332:	f8a4 3230 	strh.w	r3, [r4, #560]	; 0x230
		if (conn->send_win == 0) {
    9336:	f8b4 3230 	ldrh.w	r3, [r4, #560]	; 0x230
    933a:	2b00      	cmp	r3, #0
    933c:	d16a      	bne.n	9414 <tcp_in+0x17c>
			if (!k_work_delayable_is_pending(&conn->persist_timer)) {
    933e:	f504 78a8 	add.w	r8, r4, #336	; 0x150
	return k_work_delayable_busy_get(dwork) != 0;
    9342:	4640      	mov	r0, r8
    9344:	f016 f862 	bl	1f40c <k_work_delayable_busy_get>
    9348:	2800      	cmp	r0, #0
    934a:	d167      	bne.n	941c <tcp_in+0x184>
				conn->zwp_retries = 0;
    934c:	2300      	movs	r3, #0
    934e:	f884 3236 	strb.w	r3, [r4, #566]	; 0x236
					K_MSEC(TCP_RTO_MS));
    9352:	f8b4 0232 	ldrh.w	r0, [r4, #562]	; 0x232
    9356:	03c0      	lsls	r0, r0, #15
    9358:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    935c:	2300      	movs	r3, #0
    935e:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    9362:	2100      	movs	r1, #0
    9364:	f7f7 faea 	bl	93c <__aeabi_uldivmod>
    9368:	4602      	mov	r2, r0
    936a:	460b      	mov	r3, r1
				(void)k_work_reschedule_for_queue(
    936c:	4641      	mov	r1, r8
    936e:	48ce      	ldr	r0, [pc, #824]	; (96a8 <tcp_in+0x410>)
    9370:	f016 f876 	bl	1f460 <k_work_reschedule_for_queue>
    9374:	e052      	b.n	941c <tcp_in+0x184>
	size_t tcp_options_len = th ? (th_off(th) - 5) * 4 : 0;
    9376:	f04f 0800 	mov.w	r8, #0
    937a:	e7a9      	b.n	92d0 <tcp_in+0x38>
		tcp_out(conn, RST);
    937c:	2104      	movs	r1, #4
    937e:	4620      	mov	r0, r4
    9380:	f013 fb8a 	bl	1ca98 <tcp_out>
		conn_state(conn, TCP_CLOSED);
    9384:	230b      	movs	r3, #11
    9386:	f884 3220 	strb.w	r3, [r4, #544]	; 0x220
		close_status = -ECONNRESET;
    938a:	f06f 0367 	mvn.w	r3, #103	; 0x67
    938e:	9304      	str	r3, [sp, #16]
		goto next_state;
    9390:	e050      	b.n	9434 <tcp_in+0x19c>
	if (FL(&fl, &, RST)) {
    9392:	48c6      	ldr	r0, [pc, #792]	; (96ac <tcp_in+0x414>)
    9394:	f7f7 fd0c 	bl	db0 <strlen>
    9398:	f019 0f04 	tst.w	r9, #4
    939c:	d0a8      	beq.n	92f0 <tcp_in+0x58>
    939e:	f009 07fb 	and.w	r7, r9, #251	; 0xfb
		if (!tcp_validate_seq(conn, th)) {
    93a2:	4629      	mov	r1, r5
    93a4:	4620      	mov	r0, r4
    93a6:	f012 ff0c 	bl	1c1c2 <tcp_validate_seq>
    93aa:	b130      	cbz	r0, 93ba <tcp_in+0x122>
		conn_state(conn, TCP_CLOSED);
    93ac:	230b      	movs	r3, #11
    93ae:	f884 3220 	strb.w	r3, [r4, #544]	; 0x220
		close_status = -ECONNRESET;
    93b2:	f06f 0367 	mvn.w	r3, #103	; 0x67
    93b6:	9304      	str	r3, [sp, #16]
		goto next_state;
    93b8:	e03c      	b.n	9434 <tcp_in+0x19c>
	return z_impl_k_mutex_unlock(mutex);
    93ba:	4658      	mov	r0, fp
    93bc:	f007 feac 	bl	11118 <z_impl_k_mutex_unlock>
			return verdict;
    93c0:	2302      	movs	r3, #2
    93c2:	9303      	str	r3, [sp, #12]
    93c4:	f000 bd5a 	b.w	9e7c <tcp_in+0xbe4>
	if (tcp_options_len && !tcp_options_check(&conn->recv_options, pkt,
    93c8:	4642      	mov	r2, r8
    93ca:	4631      	mov	r1, r6
    93cc:	f104 0080 	add.w	r0, r4, #128	; 0x80
    93d0:	f013 f984 	bl	1c6dc <tcp_options_check>
    93d4:	2800      	cmp	r0, #0
    93d6:	d18e      	bne.n	92f6 <tcp_in+0x5e>
		tcp_out(conn, RST);
    93d8:	2104      	movs	r1, #4
    93da:	4620      	mov	r0, r4
    93dc:	f013 fb5c 	bl	1ca98 <tcp_out>
		conn_state(conn, TCP_CLOSED);
    93e0:	230b      	movs	r3, #11
    93e2:	f884 3220 	strb.w	r3, [r4, #544]	; 0x220
		close_status = -ECONNRESET;
    93e6:	f06f 0367 	mvn.w	r3, #103	; 0x67
    93ea:	9304      	str	r3, [sp, #16]
		goto next_state;
    93ec:	e022      	b.n	9434 <tcp_in+0x19c>
	    tcp_validate_seq(conn, th) && FL(&fl, &, SYN)) {
    93ee:	48af      	ldr	r0, [pc, #700]	; (96ac <tcp_in+0x414>)
    93f0:	f7f7 fcde 	bl	db0 <strlen>
    93f4:	f019 0f02 	tst.w	r9, #2
    93f8:	d08e      	beq.n	9318 <tcp_in+0x80>
    93fa:	f009 07fd 	and.w	r7, r9, #253	; 0xfd
		tcp_out(conn, RST);
    93fe:	2104      	movs	r1, #4
    9400:	4620      	mov	r0, r4
    9402:	f013 fb49 	bl	1ca98 <tcp_out>
		conn_state(conn, TCP_CLOSED);
    9406:	230b      	movs	r3, #11
    9408:	f884 3220 	strb.w	r3, [r4, #544]	; 0x220
		close_status = -ECONNRESET;
    940c:	f06f 0367 	mvn.w	r3, #103	; 0x67
    9410:	9304      	str	r3, [sp, #16]
		goto next_state;
    9412:	e00f      	b.n	9434 <tcp_in+0x19c>
			(void)k_work_cancel_delayable(&conn->persist_timer);
    9414:	f504 70a8 	add.w	r0, r4, #336	; 0x150
    9418:	f016 f83f 	bl	1f49a <k_work_cancel_delayable>
		if (tcp_window_full(conn)) {
    941c:	4620      	mov	r0, r4
    941e:	f012 feb2 	bl	1c186 <tcp_window_full>
    9422:	b178      	cbz	r0, 9444 <tcp_in+0x1ac>
			(void)k_sem_take(&conn->tx_sem, K_NO_WAIT);
    9424:	f104 0050 	add.w	r0, r4, #80	; 0x50
	return z_impl_k_sem_take(sem, timeout);
    9428:	2200      	movs	r2, #0
    942a:	2300      	movs	r3, #0
    942c:	f007 ff18 	bl	11260 <z_impl_k_sem_take>
	int close_status = 0;
    9430:	2300      	movs	r3, #0
    9432:	9304      	str	r3, [sp, #16]
		close_status = -ECONNRESET;
    9434:	2302      	movs	r3, #2
    9436:	9303      	str	r3, [sp, #12]
    9438:	f04f 0800 	mov.w	r8, #0
    943c:	f8cd 8008 	str.w	r8, [sp, #8]
    9440:	f000 bcb6 	b.w	9db0 <tcp_in+0xb18>
			k_sem_give(&conn->tx_sem);
    9444:	f104 0050 	add.w	r0, r4, #80	; 0x50
	z_impl_k_sem_give(sem);
    9448:	f007 fee2 	bl	11210 <z_impl_k_sem_give>
	int close_status = 0;
    944c:	2300      	movs	r3, #0
    944e:	9304      	str	r3, [sp, #16]
}
    9450:	e7f0      	b.n	9434 <tcp_in+0x19c>
    9452:	2300      	movs	r3, #0
    9454:	9304      	str	r3, [sp, #16]
    9456:	e7ed      	b.n	9434 <tcp_in+0x19c>
	len = pkt ? tcp_data_len(pkt) : 0;
    9458:	2000      	movs	r0, #0
    945a:	f000 bcaf 	b.w	9dbc <tcp_in+0xb24>
		if (FL(&fl, ==, SYN)) {
    945e:	f017 06ff 	ands.w	r6, r7, #255	; 0xff
    9462:	d004      	beq.n	946e <tcp_in+0x1d6>
    9464:	4891      	ldr	r0, [pc, #580]	; (96ac <tcp_in+0x414>)
    9466:	f7f7 fca3 	bl	db0 <strlen>
    946a:	2e02      	cmp	r6, #2
    946c:	d018      	beq.n	94a0 <tcp_in+0x208>
			conn->send_options.mss_found = true;
    946e:	f894 308a 	ldrb.w	r3, [r4, #138]	; 0x8a
    9472:	f043 0301 	orr.w	r3, r3, #1
    9476:	f884 308a 	strb.w	r3, [r4, #138]	; 0x8a
			tcp_out(conn, SYN);
    947a:	2102      	movs	r1, #2
    947c:	4620      	mov	r0, r4
    947e:	f013 fb0b 	bl	1ca98 <tcp_out>
			conn->send_options.mss_found = false;
    9482:	f894 308a 	ldrb.w	r3, [r4, #138]	; 0x8a
    9486:	f36f 0300 	bfc	r3, #0, #1
    948a:	f884 308a 	strb.w	r3, [r4, #138]	; 0x8a
			conn_seq(conn, + 1);
    948e:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
    9492:	3301      	adds	r3, #1
    9494:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
			next = TCP_SYN_SENT;
    9498:	f04f 0902 	mov.w	r9, #2
    949c:	f000 bc7e 	b.w	9d9c <tcp_in+0xb04>
		if (FL(&fl, ==, SYN)) {
    94a0:	f006 07fd 	and.w	r7, r6, #253	; 0xfd
			conn->send_options.mss_found = true;
    94a4:	f894 308a 	ldrb.w	r3, [r4, #138]	; 0x8a
    94a8:	f043 0301 	orr.w	r3, r3, #1
    94ac:	f884 308a 	strb.w	r3, [r4, #138]	; 0x8a
			conn_ack(conn, th_seq(th) + 1); /* capture peer's isn */
    94b0:	686a      	ldr	r2, [r5, #4]
    94b2:	0a13      	lsrs	r3, r2, #8
    94b4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    94b8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    94bc:	0211      	lsls	r1, r2, #8
    94be:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    94c2:	430b      	orrs	r3, r1
    94c4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    94c8:	3301      	adds	r3, #1
    94ca:	f8d4 2228 	ldr.w	r2, [r4, #552]	; 0x228
    94ce:	441a      	add	r2, r3
    94d0:	f8c4 2228 	str.w	r2, [r4, #552]	; 0x228
			tcp_out(conn, SYN | ACK);
    94d4:	2112      	movs	r1, #18
    94d6:	4620      	mov	r0, r4
    94d8:	f013 fade 	bl	1ca98 <tcp_out>
			conn->send_options.mss_found = false;
    94dc:	f894 308a 	ldrb.w	r3, [r4, #138]	; 0x8a
    94e0:	f36f 0300 	bfc	r3, #0, #1
    94e4:	f884 308a 	strb.w	r3, [r4, #138]	; 0x8a
			conn_seq(conn, + 1);
    94e8:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
    94ec:	3301      	adds	r3, #1
    94ee:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
			k_work_reschedule_for_queue(&tcp_work_q,
    94f2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    94f6:	2300      	movs	r3, #0
    94f8:	f504 71d8 	add.w	r1, r4, #432	; 0x1b0
    94fc:	486a      	ldr	r0, [pc, #424]	; (96a8 <tcp_in+0x410>)
    94fe:	f015 ffaf 	bl	1f460 <k_work_reschedule_for_queue>
			next = TCP_SYN_RECEIVED;
    9502:	f04f 0903 	mov.w	r9, #3
    9506:	f000 bc49 	b.w	9d9c <tcp_in+0xb04>
		if (FL(&fl, &, ACK, th_ack(th) == conn->seq &&
    950a:	f017 09ff 	ands.w	r9, r7, #255	; 0xff
    950e:	f000 8445 	beq.w	9d9c <tcp_in+0xb04>
    9512:	4867      	ldr	r0, [pc, #412]	; (96b0 <tcp_in+0x418>)
    9514:	f7f7 fc4c 	bl	db0 <strlen>
    9518:	b338      	cbz	r0, 956a <tcp_in+0x2d2>
    951a:	68aa      	ldr	r2, [r5, #8]
    951c:	0a13      	lsrs	r3, r2, #8
    951e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    9522:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    9526:	0211      	lsls	r1, r2, #8
    9528:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    952c:	430b      	orrs	r3, r1
    952e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    9532:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
    9536:	4293      	cmp	r3, r2
    9538:	d003      	beq.n	9542 <tcp_in+0x2aa>
    953a:	f04f 0900 	mov.w	r9, #0
    953e:	f000 bc2d 	b.w	9d9c <tcp_in+0xb04>
    9542:	686a      	ldr	r2, [r5, #4]
    9544:	0a13      	lsrs	r3, r2, #8
    9546:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    954a:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    954e:	0211      	lsls	r1, r2, #8
    9550:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    9554:	430b      	orrs	r3, r1
    9556:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    955a:	f8d4 2228 	ldr.w	r2, [r4, #552]	; 0x228
    955e:	4293      	cmp	r3, r2
    9560:	d003      	beq.n	956a <tcp_in+0x2d2>
    9562:	f04f 0900 	mov.w	r9, #0
    9566:	f000 bc19 	b.w	9d9c <tcp_in+0xb04>
    956a:	f019 0310 	ands.w	r3, r9, #16
    956e:	d102      	bne.n	9576 <tcp_in+0x2de>
    9570:	4699      	mov	r9, r3
    9572:	f000 bc13 	b.w	9d9c <tcp_in+0xb04>
    9576:	f009 07ef 	and.w	r7, r9, #239	; 0xef
			k_work_cancel_delayable(&conn->establish_timer);
    957a:	f504 70d8 	add.w	r0, r4, #432	; 0x1b0
    957e:	f015 ff8c 	bl	1f49a <k_work_cancel_delayable>
			tcp_send_timer_cancel(conn);
    9582:	4620      	mov	r0, r4
    9584:	f7fe fef2 	bl	836c <tcp_send_timer_cancel>
			net_context_set_state(conn->context,
    9588:	6862      	ldr	r2, [r4, #4]
	context->flags &= ~(NET_CONTEXT_STATE_MASK << NET_CONTEXT_STATE_SHIFT);
    958a:	f8b2 3088 	ldrh.w	r3, [r2, #136]	; 0x88
    958e:	f023 0306 	bic.w	r3, r3, #6
    9592:	b29b      	uxth	r3, r3
    9594:	f8a2 3088 	strh.w	r3, [r2, #136]	; 0x88
	context->flags |= ((state & NET_CONTEXT_STATE_MASK) <<
    9598:	f043 0304 	orr.w	r3, r3, #4
    959c:	f8a2 3088 	strh.w	r3, [r2, #136]	; 0x88
			if (conn->accepted_conn) {
    95a0:	6a23      	ldr	r3, [r4, #32]
    95a2:	b153      	cbz	r3, 95ba <tcp_in+0x322>
				if (conn->accepted_conn->accept_cb) {
    95a4:	6a1d      	ldr	r5, [r3, #32]
    95a6:	b135      	cbz	r5, 95b6 <tcp_in+0x31e>
						&conn->accepted_conn->context->remote,
    95a8:	6859      	ldr	r1, [r3, #4]
					conn->accepted_conn->accept_cb(
    95aa:	9100      	str	r1, [sp, #0]
    95ac:	2300      	movs	r3, #0
    95ae:	2208      	movs	r2, #8
    95b0:	3124      	adds	r1, #36	; 0x24
    95b2:	6860      	ldr	r0, [r4, #4]
    95b4:	47a8      	blx	r5
				conn->accepted_conn = NULL;
    95b6:	2300      	movs	r3, #0
    95b8:	6223      	str	r3, [r4, #32]
			if (len) {
    95ba:	9b07      	ldr	r3, [sp, #28]
    95bc:	b913      	cbnz	r3, 95c4 <tcp_in+0x32c>
			next = TCP_ESTABLISHED;
    95be:	f04f 0904 	mov.w	r9, #4
    95c2:	e3eb      	b.n	9d9c <tcp_in+0xb04>
				verdict = tcp_data_get(conn, pkt, &len);
    95c4:	aa07      	add	r2, sp, #28
    95c6:	4631      	mov	r1, r6
    95c8:	4620      	mov	r0, r4
    95ca:	f7ff fd03 	bl	8fd4 <tcp_data_get>
    95ce:	9003      	str	r0, [sp, #12]
				conn_ack(conn, + len);
    95d0:	f8d4 2228 	ldr.w	r2, [r4, #552]	; 0x228
    95d4:	9b07      	ldr	r3, [sp, #28]
    95d6:	4413      	add	r3, r2
    95d8:	f8c4 3228 	str.w	r3, [r4, #552]	; 0x228
				tcp_out(conn, ACK);
    95dc:	2110      	movs	r1, #16
    95de:	4620      	mov	r0, r4
    95e0:	f013 fa5a 	bl	1ca98 <tcp_out>
			next = TCP_ESTABLISHED;
    95e4:	f04f 0904 	mov.w	r9, #4
    95e8:	e3d8      	b.n	9d9c <tcp_in+0xb04>
		if (FL(&fl, &, SYN | ACK, th && th_ack(th) == conn->seq)) {
    95ea:	f017 09ff 	ands.w	r9, r7, #255	; 0xff
    95ee:	f000 83d5 	beq.w	9d9c <tcp_in+0xb04>
    95f2:	4830      	ldr	r0, [pc, #192]	; (96b4 <tcp_in+0x41c>)
    95f4:	f7f7 fbdc 	bl	db0 <strlen>
    95f8:	b1a8      	cbz	r0, 9626 <tcp_in+0x38e>
    95fa:	2d00      	cmp	r5, #0
    95fc:	f000 83fe 	beq.w	9dfc <tcp_in+0xb64>
    9600:	68aa      	ldr	r2, [r5, #8]
    9602:	0a13      	lsrs	r3, r2, #8
    9604:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    9608:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    960c:	0211      	lsls	r1, r2, #8
    960e:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    9612:	430b      	orrs	r3, r1
    9614:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    9618:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
    961c:	4293      	cmp	r3, r2
    961e:	d002      	beq.n	9626 <tcp_in+0x38e>
    9620:	f04f 0900 	mov.w	r9, #0
    9624:	e3ba      	b.n	9d9c <tcp_in+0xb04>
    9626:	f019 0312 	ands.w	r3, r9, #18
    962a:	d101      	bne.n	9630 <tcp_in+0x398>
    962c:	4699      	mov	r9, r3
    962e:	e3b5      	b.n	9d9c <tcp_in+0xb04>
    9630:	f009 07ed 	and.w	r7, r9, #237	; 0xed
			tcp_send_timer_cancel(conn);
    9634:	4620      	mov	r0, r4
    9636:	f7fe fe99 	bl	836c <tcp_send_timer_cancel>
			conn_ack(conn, th_seq(th) + 1);
    963a:	686a      	ldr	r2, [r5, #4]
    963c:	0a13      	lsrs	r3, r2, #8
    963e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    9642:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    9646:	0211      	lsls	r1, r2, #8
    9648:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    964c:	430b      	orrs	r3, r1
    964e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    9652:	3301      	adds	r3, #1
    9654:	f8d4 2228 	ldr.w	r2, [r4, #552]	; 0x228
    9658:	441a      	add	r2, r3
    965a:	f8c4 2228 	str.w	r2, [r4, #552]	; 0x228
			if (len) {
    965e:	9b07      	ldr	r3, [sp, #28]
    9660:	b9a3      	cbnz	r3, 968c <tcp_in+0x3f4>
			net_context_set_state(conn->context,
    9662:	6862      	ldr	r2, [r4, #4]
	context->flags &= ~(NET_CONTEXT_STATE_MASK << NET_CONTEXT_STATE_SHIFT);
    9664:	f8b2 3088 	ldrh.w	r3, [r2, #136]	; 0x88
    9668:	f023 0306 	bic.w	r3, r3, #6
    966c:	b29b      	uxth	r3, r3
    966e:	f8a2 3088 	strh.w	r3, [r2, #136]	; 0x88
	context->flags |= ((state & NET_CONTEXT_STATE_MASK) <<
    9672:	f043 0304 	orr.w	r3, r3, #4
    9676:	f8a2 3088 	strh.w	r3, [r2, #136]	; 0x88
			tcp_out(conn, ACK);
    967a:	2110      	movs	r1, #16
    967c:	4620      	mov	r0, r4
    967e:	f013 fa0b 	bl	1ca98 <tcp_out>
			connection_ok = true;
    9682:	f04f 0801 	mov.w	r8, #1
			next = TCP_ESTABLISHED;
    9686:	f04f 0904 	mov.w	r9, #4
    968a:	e387      	b.n	9d9c <tcp_in+0xb04>
				verdict = tcp_data_get(conn, pkt, &len);
    968c:	aa07      	add	r2, sp, #28
    968e:	4631      	mov	r1, r6
    9690:	4620      	mov	r0, r4
    9692:	f7ff fc9f 	bl	8fd4 <tcp_data_get>
    9696:	9003      	str	r0, [sp, #12]
				conn_ack(conn, + len);
    9698:	f8d4 2228 	ldr.w	r2, [r4, #552]	; 0x228
    969c:	9b07      	ldr	r3, [sp, #28]
    969e:	4413      	add	r3, r2
    96a0:	f8c4 3228 	str.w	r3, [r4, #552]	; 0x228
    96a4:	e7dd      	b.n	9662 <tcp_in+0x3ca>
    96a6:	bf00      	nop
    96a8:	20000d40 	.word	0x20000d40
    96ac:	000224e4 	.word	0x000224e4
    96b0:	00021700 	.word	0x00021700
    96b4:	00021734 	.word	0x00021734
		if (th && FL(&fl, ==, (FIN | ACK), th_seq(th) == conn->ack)) {
    96b8:	2d00      	cmp	r5, #0
    96ba:	f000 83a2 	beq.w	9e02 <tcp_in+0xb6a>
    96be:	f017 09ff 	ands.w	r9, r7, #255	; 0xff
    96c2:	d161      	bne.n	9788 <tcp_in+0x4f0>
		} else if (th && FL(&fl, ==, FIN, th_seq(th) == conn->ack)) {
    96c4:	f1b9 0f00 	cmp.w	r9, #0
    96c8:	f040 8096 	bne.w	97f8 <tcp_in+0x560>
		} else if (th && FL(&fl, ==, (FIN | ACK | PSH),
    96cc:	f1b9 0f00 	cmp.w	r9, #0
    96d0:	f040 80b9 	bne.w	9846 <tcp_in+0x5ae>
		if (th && (net_tcp_seq_cmp(th_ack(th), conn->seq) == 0)) {
    96d4:	68aa      	ldr	r2, [r5, #8]
    96d6:	0a13      	lsrs	r3, r2, #8
    96d8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    96dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    96e0:	0211      	lsls	r1, r2, #8
    96e2:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    96e6:	430b      	orrs	r3, r1
    96e8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    96ec:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
    96f0:	4293      	cmp	r3, r2
    96f2:	f000 80da 	beq.w	98aa <tcp_in+0x612>
		if (th && (net_tcp_seq_cmp(th_ack(th), conn->seq) > 0)) {
    96f6:	68aa      	ldr	r2, [r5, #8]
    96f8:	0a13      	lsrs	r3, r2, #8
    96fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    96fe:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    9702:	0211      	lsls	r1, r2, #8
    9704:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    9708:	430b      	orrs	r3, r1
    970a:	ea43 6a02 	orr.w	sl, r3, r2, lsl #24
    970e:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
    9712:	9305      	str	r3, [sp, #20]
 *
 * @return < 0 if seq1 < seq2, 0 if seq1 == seq2, > 0 if seq > seq2
 */
static inline int32_t net_tcp_seq_cmp(uint32_t seq1, uint32_t seq2)
{
	return (int32_t)(seq1 - seq2);
    9714:	ebaa 0903 	sub.w	r9, sl, r3
    9718:	f1b9 0f00 	cmp.w	r9, #0
    971c:	f340 8121 	ble.w	9962 <tcp_in+0x6ca>
			if ((conn->send_data_total < len_acked) ||
    9720:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
    9724:	454b      	cmp	r3, r9
    9726:	f0c0 80e6 	bcc.w	98f6 <tcp_in+0x65e>
					(tcp_pkt_pull(conn->send_data,
    972a:	4649      	mov	r1, r9
    972c:	68a0      	ldr	r0, [r4, #8]
    972e:	f013 f88c 	bl	1c84a <tcp_pkt_pull>
			if ((conn->send_data_total < len_acked) ||
    9732:	2800      	cmp	r0, #0
    9734:	f2c0 80df 	blt.w	98f6 <tcp_in+0x65e>
			conn->dup_ack_cnt = 0;
    9738:	2300      	movs	r3, #0
    973a:	f884 3235 	strb.w	r3, [r4, #565]	; 0x235
			conn->send_data_total -= len_acked;
    973e:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
    9742:	9a05      	ldr	r2, [sp, #20]
    9744:	eba2 0a0a 	sub.w	sl, r2, sl
    9748:	4453      	add	r3, sl
    974a:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
			if (conn->unacked_len < len_acked) {
    974e:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
    9752:	454b      	cmp	r3, r9
    9754:	f080 80dc 	bcs.w	9910 <tcp_in+0x678>
				conn->unacked_len = 0;
    9758:	2300      	movs	r3, #0
    975a:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
			if (!tcp_window_full(conn)) {
    975e:	4620      	mov	r0, r4
    9760:	f012 fd11 	bl	1c186 <tcp_window_full>
    9764:	2800      	cmp	r0, #0
    9766:	f000 80d7 	beq.w	9918 <tcp_in+0x680>
			conn_seq(conn, + len_acked);
    976a:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
    976e:	444b      	add	r3, r9
    9770:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
	return z_timeout_remaining(&dwork->timeout);
    9774:	f504 7080 	add.w	r0, r4, #256	; 0x100
    9778:	f016 f885 	bl	1f886 <z_timeout_remaining>
			if (!k_work_delayable_remaining_get(
    977c:	4308      	orrs	r0, r1
    977e:	f040 80d0 	bne.w	9922 <tcp_in+0x68a>
    9782:	f04f 0900 	mov.w	r9, #0
    9786:	e309      	b.n	9d9c <tcp_in+0xb04>
		if (th && FL(&fl, ==, (FIN | ACK), th_seq(th) == conn->ack)) {
    9788:	48c5      	ldr	r0, [pc, #788]	; (9aa0 <tcp_in+0x808>)
    978a:	f7f7 fb11 	bl	db0 <strlen>
    978e:	b178      	cbz	r0, 97b0 <tcp_in+0x518>
    9790:	686a      	ldr	r2, [r5, #4]
    9792:	0a13      	lsrs	r3, r2, #8
    9794:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    9798:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    979c:	0211      	lsls	r1, r2, #8
    979e:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    97a2:	430b      	orrs	r3, r1
    97a4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    97a8:	f8d4 2228 	ldr.w	r2, [r4, #552]	; 0x228
    97ac:	4293      	cmp	r3, r2
    97ae:	d189      	bne.n	96c4 <tcp_in+0x42c>
    97b0:	f1b9 0f11 	cmp.w	r9, #17
    97b4:	d186      	bne.n	96c4 <tcp_in+0x42c>
    97b6:	f009 07ee 	and.w	r7, r9, #238	; 0xee
			if (net_tcp_seq_cmp(th_ack(th), conn->seq) > 0) {
    97ba:	68aa      	ldr	r2, [r5, #8]
    97bc:	0a13      	lsrs	r3, r2, #8
    97be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    97c2:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    97c6:	0211      	lsls	r1, r2, #8
    97c8:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    97cc:	430b      	orrs	r3, r1
    97ce:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    97d2:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
    97d6:	1a9a      	subs	r2, r3, r2
    97d8:	2a00      	cmp	r2, #0
    97da:	dd01      	ble.n	97e0 <tcp_in+0x548>
				conn_seq(conn, + len_acked);
    97dc:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
			conn_ack(conn, + 1);
    97e0:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
    97e4:	3301      	adds	r3, #1
    97e6:	f8c4 3228 	str.w	r3, [r4, #552]	; 0x228
			tcp_out(conn, FIN | ACK);
    97ea:	2111      	movs	r1, #17
    97ec:	4620      	mov	r0, r4
    97ee:	f013 f953 	bl	1ca98 <tcp_out>
			next = TCP_LAST_ACK;
    97f2:	f04f 0909 	mov.w	r9, #9
			break;
    97f6:	e2d1      	b.n	9d9c <tcp_in+0xb04>
		} else if (th && FL(&fl, ==, FIN, th_seq(th) == conn->ack)) {
    97f8:	48a9      	ldr	r0, [pc, #676]	; (9aa0 <tcp_in+0x808>)
    97fa:	f7f7 fad9 	bl	db0 <strlen>
    97fe:	b180      	cbz	r0, 9822 <tcp_in+0x58a>
    9800:	686a      	ldr	r2, [r5, #4]
    9802:	0a13      	lsrs	r3, r2, #8
    9804:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    9808:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    980c:	0211      	lsls	r1, r2, #8
    980e:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    9812:	430b      	orrs	r3, r1
    9814:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    9818:	f8d4 2228 	ldr.w	r2, [r4, #552]	; 0x228
    981c:	4293      	cmp	r3, r2
    981e:	f47f af55 	bne.w	96cc <tcp_in+0x434>
    9822:	f1b9 0f01 	cmp.w	r9, #1
    9826:	f47f af51 	bne.w	96cc <tcp_in+0x434>
    982a:	f009 07fe 	and.w	r7, r9, #254	; 0xfe
			conn_ack(conn, + 1);
    982e:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
    9832:	3301      	adds	r3, #1
    9834:	f8c4 3228 	str.w	r3, [r4, #552]	; 0x228
			tcp_out(conn, ACK);
    9838:	2110      	movs	r1, #16
    983a:	4620      	mov	r0, r4
    983c:	f013 f92c 	bl	1ca98 <tcp_out>
			next = TCP_CLOSE_WAIT;
    9840:	f04f 0907 	mov.w	r9, #7
			break;
    9844:	e2aa      	b.n	9d9c <tcp_in+0xb04>
		} else if (th && FL(&fl, ==, (FIN | ACK | PSH),
    9846:	4896      	ldr	r0, [pc, #600]	; (9aa0 <tcp_in+0x808>)
    9848:	f7f7 fab2 	bl	db0 <strlen>
    984c:	b180      	cbz	r0, 9870 <tcp_in+0x5d8>
    984e:	686a      	ldr	r2, [r5, #4]
    9850:	0a13      	lsrs	r3, r2, #8
    9852:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    9856:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    985a:	0211      	lsls	r1, r2, #8
    985c:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    9860:	430b      	orrs	r3, r1
    9862:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    9866:	f8d4 2228 	ldr.w	r2, [r4, #552]	; 0x228
    986a:	4293      	cmp	r3, r2
    986c:	f47f af32 	bne.w	96d4 <tcp_in+0x43c>
    9870:	f1b9 0f19 	cmp.w	r9, #25
    9874:	f47f af2e 	bne.w	96d4 <tcp_in+0x43c>
    9878:	f009 07e6 	and.w	r7, r9, #230	; 0xe6
			if (len) {
    987c:	9b07      	ldr	r3, [sp, #28]
    987e:	b96b      	cbnz	r3, 989c <tcp_in+0x604>
			conn_ack(conn, + len + 1);
    9880:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
    9884:	9a07      	ldr	r2, [sp, #28]
    9886:	4413      	add	r3, r2
    9888:	3301      	adds	r3, #1
    988a:	f8c4 3228 	str.w	r3, [r4, #552]	; 0x228
			tcp_out(conn, FIN | ACK);
    988e:	2111      	movs	r1, #17
    9890:	4620      	mov	r0, r4
    9892:	f013 f901 	bl	1ca98 <tcp_out>
			next = TCP_LAST_ACK;
    9896:	f04f 0909 	mov.w	r9, #9
			break;
    989a:	e27f      	b.n	9d9c <tcp_in+0xb04>
				verdict = tcp_data_get(conn, pkt, &len);
    989c:	aa07      	add	r2, sp, #28
    989e:	4631      	mov	r1, r6
    98a0:	4620      	mov	r0, r4
    98a2:	f7ff fb97 	bl	8fd4 <tcp_data_get>
    98a6:	9003      	str	r0, [sp, #12]
    98a8:	e7ea      	b.n	9880 <tcp_in+0x5e8>
			if (conn->send_data_total > 0) {
    98aa:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
    98ae:	b153      	cbz	r3, 98c6 <tcp_in+0x62e>
				if (len == 0) {
    98b0:	9b07      	ldr	r3, [sp, #28]
    98b2:	b95b      	cbnz	r3, 98cc <tcp_in+0x634>
					conn->dup_ack_cnt = MIN(conn->dup_ack_cnt + 1,
    98b4:	f894 3235 	ldrb.w	r3, [r4, #565]	; 0x235
    98b8:	2b03      	cmp	r3, #3
    98ba:	bf28      	it	cs
    98bc:	2303      	movcs	r3, #3
    98be:	3301      	adds	r3, #1
    98c0:	f884 3235 	strb.w	r3, [r4, #565]	; 0x235
    98c4:	e002      	b.n	98cc <tcp_in+0x634>
				conn->dup_ack_cnt = 0;
    98c6:	2300      	movs	r3, #0
    98c8:	f884 3235 	strb.w	r3, [r4, #565]	; 0x235
			if ((conn->data_mode == TCP_DATA_MODE_SEND) &&
    98cc:	f894 3221 	ldrb.w	r3, [r4, #545]	; 0x221
    98d0:	2b00      	cmp	r3, #0
    98d2:	f47f af10 	bne.w	96f6 <tcp_in+0x45e>
			    (conn->dup_ack_cnt == DUPLICATE_ACK_RETRANSMIT_TRHESHOLD)) {
    98d6:	f894 3235 	ldrb.w	r3, [r4, #565]	; 0x235
			if ((conn->data_mode == TCP_DATA_MODE_SEND) &&
    98da:	2b03      	cmp	r3, #3
    98dc:	f47f af0b 	bne.w	96f6 <tcp_in+0x45e>
				int temp_unacked_len = conn->unacked_len;
    98e0:	f8d4 9218 	ldr.w	r9, [r4, #536]	; 0x218
				conn->unacked_len = 0;
    98e4:	2300      	movs	r3, #0
    98e6:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
				(void)tcp_send_data(conn);
    98ea:	4620      	mov	r0, r4
    98ec:	f013 f8ef 	bl	1cace <tcp_send_data>
				conn->unacked_len = temp_unacked_len;
    98f0:	f8c4 9218 	str.w	r9, [r4, #536]	; 0x218
    98f4:	e6ff      	b.n	96f6 <tcp_in+0x45e>
				tcp_out(conn, RST);
    98f6:	2104      	movs	r1, #4
    98f8:	4620      	mov	r0, r4
    98fa:	f013 f8cd 	bl	1ca98 <tcp_out>
				conn_state(conn, TCP_CLOSED);
    98fe:	230b      	movs	r3, #11
    9900:	f884 3220 	strb.w	r3, [r4, #544]	; 0x220
				close_status = -ECONNRESET;
    9904:	f06f 0367 	mvn.w	r3, #103	; 0x67
    9908:	9304      	str	r3, [sp, #16]
				break;
    990a:	f04f 0900 	mov.w	r9, #0
    990e:	e245      	b.n	9d9c <tcp_in+0xb04>
				conn->unacked_len -= len_acked;
    9910:	4453      	add	r3, sl
    9912:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
    9916:	e722      	b.n	975e <tcp_in+0x4c6>
				k_sem_give(&conn->tx_sem);
    9918:	f104 0050 	add.w	r0, r4, #80	; 0x50
	z_impl_k_sem_give(sem);
    991c:	f007 fc78 	bl	11210 <z_impl_k_sem_give>
}
    9920:	e723      	b.n	976a <tcp_in+0x4d2>
			conn->send_data_retries = 0;
    9922:	2300      	movs	r3, #0
    9924:	f884 3234 	strb.w	r3, [r4, #564]	; 0x234
			k_work_cancel_delayable(&conn->send_data_timer);
    9928:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
    992c:	f015 fdb5 	bl	1f49a <k_work_cancel_delayable>
			if (conn->data_mode == TCP_DATA_MODE_RESEND) {
    9930:	f894 3221 	ldrb.w	r3, [r4, #545]	; 0x221
    9934:	2b01      	cmp	r3, #1
    9936:	d02e      	beq.n	9996 <tcp_in+0x6fe>
			conn->data_mode = TCP_DATA_MODE_SEND;
    9938:	2300      	movs	r3, #0
    993a:	f884 3221 	strb.w	r3, [r4, #545]	; 0x221
			if (conn->in_close && conn->send_data_total == 0) {
    993e:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
    9942:	f013 0f04 	tst.w	r3, #4
    9946:	d002      	beq.n	994e <tcp_in+0x6b6>
    9948:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
    994c:	b353      	cbz	r3, 99a4 <tcp_in+0x70c>
			ret = tcp_send_queued_data(conn);
    994e:	4620      	mov	r0, r4
    9950:	f7ff fba6 	bl	90a0 <tcp_send_queued_data>
			if (ret < 0 && ret != -ENOBUFS) {
    9954:	f1b0 0900 	subs.w	r9, r0, #0
    9958:	db33      	blt.n	99c2 <tcp_in+0x72a>
			if (tcp_window_full(conn)) {
    995a:	4620      	mov	r0, r4
    995c:	f012 fc13 	bl	1c186 <tcp_window_full>
    9960:	bbf0      	cbnz	r0, 99e0 <tcp_in+0x748>
			if (th_seq(th) == conn->ack) {
    9962:	686a      	ldr	r2, [r5, #4]
    9964:	0a13      	lsrs	r3, r2, #8
    9966:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    996a:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    996e:	0211      	lsls	r1, r2, #8
    9970:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    9974:	430b      	orrs	r3, r1
    9976:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    997a:	f8d4 2228 	ldr.w	r2, [r4, #552]	; 0x228
    997e:	4293      	cmp	r3, r2
    9980:	d035      	beq.n	99ee <tcp_in+0x756>
    9982:	1ad2      	subs	r2, r2, r3
			} else if (net_tcp_seq_greater(conn->ack, th_seq(th))) {
    9984:	2a00      	cmp	r2, #0
    9986:	dd3b      	ble.n	9a00 <tcp_in+0x768>
				tcp_out(conn, ACK); /* peer has resent */
    9988:	2110      	movs	r1, #16
    998a:	4620      	mov	r0, r4
    998c:	f013 f884 	bl	1ca98 <tcp_out>
				net_stats_update_tcp_seg_ackerr(conn->iface);
    9990:	f04f 0900 	mov.w	r9, #0
    9994:	e202      	b.n	9d9c <tcp_in+0xb04>
				conn->unacked_len = 0;
    9996:	2300      	movs	r3, #0
    9998:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
				tcp_derive_rto(conn);
    999c:	4620      	mov	r0, r4
    999e:	f012 fe04 	bl	1c5aa <tcp_derive_rto>
    99a2:	e7c9      	b.n	9938 <tcp_in+0x6a0>
				tcp_send_timer_cancel(conn);
    99a4:	4620      	mov	r0, r4
    99a6:	f7fe fce1 	bl	836c <tcp_send_timer_cancel>
				tcp_out(conn, FIN | ACK);
    99aa:	2111      	movs	r1, #17
    99ac:	4620      	mov	r0, r4
    99ae:	f013 f873 	bl	1ca98 <tcp_out>
				conn_seq(conn, + 1);
    99b2:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
    99b6:	3301      	adds	r3, #1
    99b8:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
				next = TCP_FIN_WAIT_1;
    99bc:	f04f 0905 	mov.w	r9, #5
				break;
    99c0:	e1ec      	b.n	9d9c <tcp_in+0xb04>
			if (ret < 0 && ret != -ENOBUFS) {
    99c2:	f119 0f69 	cmn.w	r9, #105	; 0x69
    99c6:	d0c8      	beq.n	995a <tcp_in+0x6c2>
				tcp_out(conn, RST);
    99c8:	2104      	movs	r1, #4
    99ca:	4620      	mov	r0, r4
    99cc:	f013 f864 	bl	1ca98 <tcp_out>
				conn_state(conn, TCP_CLOSED);
    99d0:	230b      	movs	r3, #11
    99d2:	f884 3220 	strb.w	r3, [r4, #544]	; 0x220
				close_status = ret;
    99d6:	f8cd 9010 	str.w	r9, [sp, #16]
				break;
    99da:	f04f 0900 	mov.w	r9, #0
    99de:	e1dd      	b.n	9d9c <tcp_in+0xb04>
				(void)k_sem_take(&conn->tx_sem, K_NO_WAIT);
    99e0:	f104 0050 	add.w	r0, r4, #80	; 0x50
	return z_impl_k_sem_take(sem, timeout);
    99e4:	2200      	movs	r2, #0
    99e6:	2300      	movs	r3, #0
    99e8:	f007 fc3a 	bl	11260 <z_impl_k_sem_take>
    99ec:	e7b9      	b.n	9962 <tcp_in+0x6ca>
				verdict = tcp_data_received(conn, pkt, &len);
    99ee:	aa07      	add	r2, sp, #28
    99f0:	4631      	mov	r1, r6
    99f2:	4620      	mov	r0, r4
    99f4:	f7ff fb2a 	bl	904c <tcp_data_received>
    99f8:	9003      	str	r0, [sp, #12]
    99fa:	f04f 0900 	mov.w	r9, #0
    99fe:	e1cd      	b.n	9d9c <tcp_in+0xb04>
				tcp_out_of_order_data(conn, pkt, len,
    9a00:	9a07      	ldr	r2, [sp, #28]
    9a02:	4631      	mov	r1, r6
    9a04:	4620      	mov	r0, r4
    9a06:	f012 ff43 	bl	1c890 <tcp_out_of_order_data>
				if ((len > 0) || FL(&fl, &, FIN)) {
    9a0a:	9b07      	ldr	r3, [sp, #28]
    9a0c:	b963      	cbnz	r3, 9a28 <tcp_in+0x790>
    9a0e:	f017 09ff 	ands.w	r9, r7, #255	; 0xff
    9a12:	f000 81c3 	beq.w	9d9c <tcp_in+0xb04>
    9a16:	4823      	ldr	r0, [pc, #140]	; (9aa4 <tcp_in+0x80c>)
    9a18:	f7f7 f9ca 	bl	db0 <strlen>
    9a1c:	f019 0301 	ands.w	r3, r9, #1
    9a20:	f000 81f2 	beq.w	9e08 <tcp_in+0xb70>
    9a24:	f009 07fe 	and.w	r7, r9, #254	; 0xfe
					tcp_out(conn, ACK);
    9a28:	2110      	movs	r1, #16
    9a2a:	4620      	mov	r0, r4
    9a2c:	f013 f834 	bl	1ca98 <tcp_out>
    9a30:	f04f 0900 	mov.w	r9, #0
    9a34:	e1b2      	b.n	9d9c <tcp_in+0xb04>
		tcp_out(conn, FIN);
    9a36:	2101      	movs	r1, #1
    9a38:	4620      	mov	r0, r4
    9a3a:	f013 f82d 	bl	1ca98 <tcp_out>
		next = TCP_LAST_ACK;
    9a3e:	f04f 0909 	mov.w	r9, #9
		break;
    9a42:	e1ab      	b.n	9d9c <tcp_in+0xb04>
		if (th && FL(&fl, ==, ACK, th_seq(th) == conn->ack)) {
    9a44:	2d00      	cmp	r5, #0
    9a46:	f000 81e1 	beq.w	9e0c <tcp_in+0xb74>
    9a4a:	f017 09ff 	ands.w	r9, r7, #255	; 0xff
    9a4e:	f000 81a5 	beq.w	9d9c <tcp_in+0xb04>
    9a52:	4813      	ldr	r0, [pc, #76]	; (9aa0 <tcp_in+0x808>)
    9a54:	f7f7 f9ac 	bl	db0 <strlen>
    9a58:	b190      	cbz	r0, 9a80 <tcp_in+0x7e8>
    9a5a:	686a      	ldr	r2, [r5, #4]
    9a5c:	0a13      	lsrs	r3, r2, #8
    9a5e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    9a62:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    9a66:	0211      	lsls	r1, r2, #8
    9a68:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    9a6c:	430b      	orrs	r3, r1
    9a6e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    9a72:	f8d4 2228 	ldr.w	r2, [r4, #552]	; 0x228
    9a76:	4293      	cmp	r3, r2
    9a78:	d002      	beq.n	9a80 <tcp_in+0x7e8>
    9a7a:	f04f 0900 	mov.w	r9, #0
    9a7e:	e18d      	b.n	9d9c <tcp_in+0xb04>
    9a80:	f1b9 0f10 	cmp.w	r9, #16
    9a84:	d002      	beq.n	9a8c <tcp_in+0x7f4>
    9a86:	f04f 0900 	mov.w	r9, #0
    9a8a:	e187      	b.n	9d9c <tcp_in+0xb04>
    9a8c:	f009 07ef 	and.w	r7, r9, #239	; 0xef
			tcp_send_timer_cancel(conn);
    9a90:	4620      	mov	r0, r4
    9a92:	f7fe fc6b 	bl	836c <tcp_send_timer_cancel>
			close_status = 0;
    9a96:	2300      	movs	r3, #0
    9a98:	9304      	str	r3, [sp, #16]
			next = TCP_CLOSED;
    9a9a:	f04f 090b 	mov.w	r9, #11
    9a9e:	e17d      	b.n	9d9c <tcp_in+0xb04>
    9aa0:	00021754 	.word	0x00021754
    9aa4:	000224e4 	.word	0x000224e4
		conn_ack(conn, + len);
    9aa8:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
    9aac:	4403      	add	r3, r0
    9aae:	f8c4 3228 	str.w	r3, [r4, #552]	; 0x228
		if (th && FL(&fl, ==, (FIN | ACK), th_seq(th) == conn->ack)) {
    9ab2:	2d00      	cmp	r5, #0
    9ab4:	f000 81ad 	beq.w	9e12 <tcp_in+0xb7a>
    9ab8:	f017 09ff 	ands.w	r9, r7, #255	; 0xff
    9abc:	d11e      	bne.n	9afc <tcp_in+0x864>
		} else if (th && FL(&fl, ==, FIN, th_seq(th) == conn->ack)) {
    9abe:	f1b9 0f00 	cmp.w	r9, #0
    9ac2:	d143      	bne.n	9b4c <tcp_in+0x8b4>
		} else if (th && FL(&fl, ==, ACK, th_seq(th) == conn->ack)) {
    9ac4:	f1b9 0f00 	cmp.w	r9, #0
    9ac8:	f000 8168 	beq.w	9d9c <tcp_in+0xb04>
    9acc:	48ae      	ldr	r0, [pc, #696]	; (9d88 <tcp_in+0xaf0>)
    9ace:	f7f7 f96f 	bl	db0 <strlen>
    9ad2:	2800      	cmp	r0, #0
    9ad4:	d062      	beq.n	9b9c <tcp_in+0x904>
    9ad6:	686a      	ldr	r2, [r5, #4]
    9ad8:	0a13      	lsrs	r3, r2, #8
    9ada:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    9ade:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    9ae2:	0211      	lsls	r1, r2, #8
    9ae4:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    9ae8:	430b      	orrs	r3, r1
    9aea:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    9aee:	f8d4 2228 	ldr.w	r2, [r4, #552]	; 0x228
    9af2:	4293      	cmp	r3, r2
    9af4:	d052      	beq.n	9b9c <tcp_in+0x904>
    9af6:	f04f 0900 	mov.w	r9, #0
    9afa:	e14f      	b.n	9d9c <tcp_in+0xb04>
		if (th && FL(&fl, ==, (FIN | ACK), th_seq(th) == conn->ack)) {
    9afc:	48a2      	ldr	r0, [pc, #648]	; (9d88 <tcp_in+0xaf0>)
    9afe:	f7f7 f957 	bl	db0 <strlen>
    9b02:	b178      	cbz	r0, 9b24 <tcp_in+0x88c>
    9b04:	686a      	ldr	r2, [r5, #4]
    9b06:	0a13      	lsrs	r3, r2, #8
    9b08:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    9b0c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    9b10:	0211      	lsls	r1, r2, #8
    9b12:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    9b16:	430b      	orrs	r3, r1
    9b18:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    9b1c:	f8d4 2228 	ldr.w	r2, [r4, #552]	; 0x228
    9b20:	4293      	cmp	r3, r2
    9b22:	d1cc      	bne.n	9abe <tcp_in+0x826>
    9b24:	f1b9 0f11 	cmp.w	r9, #17
    9b28:	d1c9      	bne.n	9abe <tcp_in+0x826>
    9b2a:	f009 07ee 	and.w	r7, r9, #238	; 0xee
			tcp_send_timer_cancel(conn);
    9b2e:	4620      	mov	r0, r4
    9b30:	f7fe fc1c 	bl	836c <tcp_send_timer_cancel>
			conn_ack(conn, + 1);
    9b34:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
    9b38:	3301      	adds	r3, #1
    9b3a:	f8c4 3228 	str.w	r3, [r4, #552]	; 0x228
			tcp_out(conn, ACK);
    9b3e:	2110      	movs	r1, #16
    9b40:	4620      	mov	r0, r4
    9b42:	f012 ffa9 	bl	1ca98 <tcp_out>
			next = TCP_TIME_WAIT;
    9b46:	f04f 090a 	mov.w	r9, #10
    9b4a:	e127      	b.n	9d9c <tcp_in+0xb04>
		} else if (th && FL(&fl, ==, FIN, th_seq(th) == conn->ack)) {
    9b4c:	488e      	ldr	r0, [pc, #568]	; (9d88 <tcp_in+0xaf0>)
    9b4e:	f7f7 f92f 	bl	db0 <strlen>
    9b52:	b178      	cbz	r0, 9b74 <tcp_in+0x8dc>
    9b54:	686a      	ldr	r2, [r5, #4]
    9b56:	0a13      	lsrs	r3, r2, #8
    9b58:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    9b5c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    9b60:	0211      	lsls	r1, r2, #8
    9b62:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    9b66:	430b      	orrs	r3, r1
    9b68:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    9b6c:	f8d4 2228 	ldr.w	r2, [r4, #552]	; 0x228
    9b70:	4293      	cmp	r3, r2
    9b72:	d1a7      	bne.n	9ac4 <tcp_in+0x82c>
    9b74:	f1b9 0f01 	cmp.w	r9, #1
    9b78:	d1a4      	bne.n	9ac4 <tcp_in+0x82c>
    9b7a:	f009 07fe 	and.w	r7, r9, #254	; 0xfe
			tcp_send_timer_cancel(conn);
    9b7e:	4620      	mov	r0, r4
    9b80:	f7fe fbf4 	bl	836c <tcp_send_timer_cancel>
			conn_ack(conn, + 1);
    9b84:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
    9b88:	3301      	adds	r3, #1
    9b8a:	f8c4 3228 	str.w	r3, [r4, #552]	; 0x228
			tcp_out(conn, ACK);
    9b8e:	2110      	movs	r1, #16
    9b90:	4620      	mov	r0, r4
    9b92:	f012 ff81 	bl	1ca98 <tcp_out>
			next = TCP_CLOSING;
    9b96:	f04f 0908 	mov.w	r9, #8
    9b9a:	e0ff      	b.n	9d9c <tcp_in+0xb04>
		} else if (th && FL(&fl, ==, ACK, th_seq(th) == conn->ack)) {
    9b9c:	f1b9 0f10 	cmp.w	r9, #16
    9ba0:	d002      	beq.n	9ba8 <tcp_in+0x910>
    9ba2:	f04f 0900 	mov.w	r9, #0
    9ba6:	e0f9      	b.n	9d9c <tcp_in+0xb04>
    9ba8:	f009 07ef 	and.w	r7, r9, #239	; 0xef
			tcp_send_timer_cancel(conn);
    9bac:	4620      	mov	r0, r4
    9bae:	f7fe fbdd 	bl	836c <tcp_send_timer_cancel>
			next = TCP_FIN_WAIT_2;
    9bb2:	f04f 0906 	mov.w	r9, #6
    9bb6:	e0f1      	b.n	9d9c <tcp_in+0xb04>
		if (th && (FL(&fl, ==, FIN, th_seq(th) == conn->ack) ||
    9bb8:	2d00      	cmp	r5, #0
    9bba:	f000 812d 	beq.w	9e18 <tcp_in+0xb80>
    9bbe:	f017 09ff 	ands.w	r9, r7, #255	; 0xff
    9bc2:	d11e      	bne.n	9c02 <tcp_in+0x96a>
			   FL(&fl, ==, FIN | ACK, th_seq(th) == conn->ack) ||
    9bc4:	f1b9 0f00 	cmp.w	r9, #0
    9bc8:	d144      	bne.n	9c54 <tcp_in+0x9bc>
			   FL(&fl, ==, FIN | PSH | ACK,
    9bca:	f1b9 0f00 	cmp.w	r9, #0
    9bce:	f000 80e5 	beq.w	9d9c <tcp_in+0xb04>
    9bd2:	486d      	ldr	r0, [pc, #436]	; (9d88 <tcp_in+0xaf0>)
    9bd4:	f7f7 f8ec 	bl	db0 <strlen>
    9bd8:	2800      	cmp	r0, #0
    9bda:	d055      	beq.n	9c88 <tcp_in+0x9f0>
    9bdc:	686a      	ldr	r2, [r5, #4]
    9bde:	0a13      	lsrs	r3, r2, #8
    9be0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    9be4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    9be8:	0211      	lsls	r1, r2, #8
    9bea:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    9bee:	430b      	orrs	r3, r1
    9bf0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    9bf4:	f8d4 2228 	ldr.w	r2, [r4, #552]	; 0x228
    9bf8:	4293      	cmp	r3, r2
    9bfa:	d045      	beq.n	9c88 <tcp_in+0x9f0>
    9bfc:	f04f 0900 	mov.w	r9, #0
    9c00:	e0cc      	b.n	9d9c <tcp_in+0xb04>
		if (th && (FL(&fl, ==, FIN, th_seq(th) == conn->ack) ||
    9c02:	4861      	ldr	r0, [pc, #388]	; (9d88 <tcp_in+0xaf0>)
    9c04:	f7f7 f8d4 	bl	db0 <strlen>
    9c08:	b178      	cbz	r0, 9c2a <tcp_in+0x992>
    9c0a:	686a      	ldr	r2, [r5, #4]
    9c0c:	0a13      	lsrs	r3, r2, #8
    9c0e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    9c12:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    9c16:	0211      	lsls	r1, r2, #8
    9c18:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    9c1c:	430b      	orrs	r3, r1
    9c1e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    9c22:	f8d4 2228 	ldr.w	r2, [r4, #552]	; 0x228
    9c26:	4293      	cmp	r3, r2
    9c28:	d1cc      	bne.n	9bc4 <tcp_in+0x92c>
    9c2a:	f1b9 0f01 	cmp.w	r9, #1
    9c2e:	d1c9      	bne.n	9bc4 <tcp_in+0x92c>
    9c30:	f009 07fe 	and.w	r7, r9, #254	; 0xfe
			k_work_cancel_delayable(&conn->fin_timer);
    9c34:	f504 70d8 	add.w	r0, r4, #432	; 0x1b0
    9c38:	f015 fc2f 	bl	1f49a <k_work_cancel_delayable>
			conn_ack(conn, + 1);
    9c3c:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
    9c40:	3301      	adds	r3, #1
    9c42:	f8c4 3228 	str.w	r3, [r4, #552]	; 0x228
			tcp_out(conn, ACK);
    9c46:	2110      	movs	r1, #16
    9c48:	4620      	mov	r0, r4
    9c4a:	f012 ff25 	bl	1ca98 <tcp_out>
			next = TCP_TIME_WAIT;
    9c4e:	f04f 090a 	mov.w	r9, #10
    9c52:	e0a3      	b.n	9d9c <tcp_in+0xb04>
			   FL(&fl, ==, FIN | ACK, th_seq(th) == conn->ack) ||
    9c54:	484c      	ldr	r0, [pc, #304]	; (9d88 <tcp_in+0xaf0>)
    9c56:	f7f7 f8ab 	bl	db0 <strlen>
    9c5a:	b178      	cbz	r0, 9c7c <tcp_in+0x9e4>
    9c5c:	686a      	ldr	r2, [r5, #4]
    9c5e:	0a13      	lsrs	r3, r2, #8
    9c60:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    9c64:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    9c68:	0211      	lsls	r1, r2, #8
    9c6a:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    9c6e:	430b      	orrs	r3, r1
    9c70:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    9c74:	f8d4 2228 	ldr.w	r2, [r4, #552]	; 0x228
    9c78:	4293      	cmp	r3, r2
    9c7a:	d1a6      	bne.n	9bca <tcp_in+0x932>
    9c7c:	f1b9 0f11 	cmp.w	r9, #17
    9c80:	d1a3      	bne.n	9bca <tcp_in+0x932>
    9c82:	f009 07ee 	and.w	r7, r9, #238	; 0xee
    9c86:	e7d5      	b.n	9c34 <tcp_in+0x99c>
			   FL(&fl, ==, FIN | PSH | ACK,
    9c88:	f1b9 0f19 	cmp.w	r9, #25
    9c8c:	d002      	beq.n	9c94 <tcp_in+0x9fc>
    9c8e:	f04f 0900 	mov.w	r9, #0
    9c92:	e083      	b.n	9d9c <tcp_in+0xb04>
    9c94:	f009 07e6 	and.w	r7, r9, #230	; 0xe6
    9c98:	e7cc      	b.n	9c34 <tcp_in+0x99c>
		if (th && FL(&fl, ==, ACK, th_seq(th) == conn->ack)) {
    9c9a:	2d00      	cmp	r5, #0
    9c9c:	f000 80bf 	beq.w	9e1e <tcp_in+0xb86>
    9ca0:	f017 09ff 	ands.w	r9, r7, #255	; 0xff
    9ca4:	d07a      	beq.n	9d9c <tcp_in+0xb04>
    9ca6:	4838      	ldr	r0, [pc, #224]	; (9d88 <tcp_in+0xaf0>)
    9ca8:	f7f7 f882 	bl	db0 <strlen>
    9cac:	b190      	cbz	r0, 9cd4 <tcp_in+0xa3c>
    9cae:	686a      	ldr	r2, [r5, #4]
    9cb0:	0a13      	lsrs	r3, r2, #8
    9cb2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    9cb6:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    9cba:	0211      	lsls	r1, r2, #8
    9cbc:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    9cc0:	430b      	orrs	r3, r1
    9cc2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    9cc6:	f8d4 2228 	ldr.w	r2, [r4, #552]	; 0x228
    9cca:	4293      	cmp	r3, r2
    9ccc:	d002      	beq.n	9cd4 <tcp_in+0xa3c>
    9cce:	f04f 0900 	mov.w	r9, #0
    9cd2:	e063      	b.n	9d9c <tcp_in+0xb04>
    9cd4:	f1b9 0f10 	cmp.w	r9, #16
    9cd8:	d002      	beq.n	9ce0 <tcp_in+0xa48>
    9cda:	f04f 0900 	mov.w	r9, #0
    9cde:	e05d      	b.n	9d9c <tcp_in+0xb04>
    9ce0:	f009 07ef 	and.w	r7, r9, #239	; 0xef
			tcp_send_timer_cancel(conn);
    9ce4:	4620      	mov	r0, r4
    9ce6:	f7fe fb41 	bl	836c <tcp_send_timer_cancel>
			next = TCP_TIME_WAIT;
    9cea:	f04f 090a 	mov.w	r9, #10
    9cee:	e055      	b.n	9d9c <tcp_in+0xb04>
		if (th && (FL(&fl, ==, (FIN | ACK), th_seq(th) + 1 == conn->ack) ||
    9cf0:	b11d      	cbz	r5, 9cfa <tcp_in+0xa62>
    9cf2:	f017 06ff 	ands.w	r6, r7, #255	; 0xff
    9cf6:	d10b      	bne.n	9d10 <tcp_in+0xa78>
			   FL(&fl, ==, FIN, th_seq(th) + 1 == conn->ack))) {
    9cf8:	bb46      	cbnz	r6, 9d4c <tcp_in+0xab4>
		k_work_reschedule_for_queue(
    9cfa:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    9cfe:	2300      	movs	r3, #0
    9d00:	f504 7190 	add.w	r1, r4, #288	; 0x120
    9d04:	4821      	ldr	r0, [pc, #132]	; (9d8c <tcp_in+0xaf4>)
    9d06:	f015 fbab 	bl	1f460 <k_work_reschedule_for_queue>
		break;
    9d0a:	f04f 0900 	mov.w	r9, #0
    9d0e:	e045      	b.n	9d9c <tcp_in+0xb04>
		if (th && (FL(&fl, ==, (FIN | ACK), th_seq(th) + 1 == conn->ack) ||
    9d10:	481f      	ldr	r0, [pc, #124]	; (9d90 <tcp_in+0xaf8>)
    9d12:	f7f7 f84d 	bl	db0 <strlen>
    9d16:	b180      	cbz	r0, 9d3a <tcp_in+0xaa2>
    9d18:	686a      	ldr	r2, [r5, #4]
    9d1a:	0a13      	lsrs	r3, r2, #8
    9d1c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    9d20:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    9d24:	0211      	lsls	r1, r2, #8
    9d26:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    9d2a:	430b      	orrs	r3, r1
    9d2c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    9d30:	3301      	adds	r3, #1
    9d32:	f8d4 2228 	ldr.w	r2, [r4, #552]	; 0x228
    9d36:	4293      	cmp	r3, r2
    9d38:	d1de      	bne.n	9cf8 <tcp_in+0xa60>
    9d3a:	2e11      	cmp	r6, #17
    9d3c:	d1dc      	bne.n	9cf8 <tcp_in+0xa60>
    9d3e:	f006 07ee 	and.w	r7, r6, #238	; 0xee
			tcp_out(conn, ACK);
    9d42:	2110      	movs	r1, #16
    9d44:	4620      	mov	r0, r4
    9d46:	f012 fea7 	bl	1ca98 <tcp_out>
    9d4a:	e7d6      	b.n	9cfa <tcp_in+0xa62>
			   FL(&fl, ==, FIN, th_seq(th) + 1 == conn->ack))) {
    9d4c:	4810      	ldr	r0, [pc, #64]	; (9d90 <tcp_in+0xaf8>)
    9d4e:	f7f7 f82f 	bl	db0 <strlen>
    9d52:	b180      	cbz	r0, 9d76 <tcp_in+0xade>
    9d54:	686a      	ldr	r2, [r5, #4]
    9d56:	0a13      	lsrs	r3, r2, #8
    9d58:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    9d5c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    9d60:	0211      	lsls	r1, r2, #8
    9d62:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    9d66:	430b      	orrs	r3, r1
    9d68:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    9d6c:	3301      	adds	r3, #1
    9d6e:	f8d4 2228 	ldr.w	r2, [r4, #552]	; 0x228
    9d72:	4293      	cmp	r3, r2
    9d74:	d1c1      	bne.n	9cfa <tcp_in+0xa62>
    9d76:	2e01      	cmp	r6, #1
    9d78:	d1bf      	bne.n	9cfa <tcp_in+0xa62>
    9d7a:	f006 07fe 	and.w	r7, r6, #254	; 0xfe
    9d7e:	e7e0      	b.n	9d42 <tcp_in+0xaaa>
			   tcp_state_to_str(conn->state, true));
    9d80:	f04f 0900 	mov.w	r9, #0
    9d84:	e00a      	b.n	9d9c <tcp_in+0xb04>
    9d86:	bf00      	nop
    9d88:	00021754 	.word	0x00021754
    9d8c:	20000d40 	.word	0x20000d40
    9d90:	0002176c 	.word	0x0002176c
	switch (conn->state) {
    9d94:	2301      	movs	r3, #1
    9d96:	9302      	str	r3, [sp, #8]
    9d98:	f04f 0900 	mov.w	r9, #0
	if (next) {
    9d9c:	f1b9 0f00 	cmp.w	r9, #0
    9da0:	d045      	beq.n	9e2e <tcp_in+0xb96>
		conn_state(conn, next);
    9da2:	f884 9220 	strb.w	r9, [r4, #544]	; 0x220
		if (connection_ok) {
    9da6:	f1b8 0f00 	cmp.w	r8, #0
    9daa:	d13b      	bne.n	9e24 <tcp_in+0xb8c>
		th = NULL;
    9dac:	2500      	movs	r5, #0
		pkt = NULL;
    9dae:	462e      	mov	r6, r5
	len = pkt ? tcp_data_len(pkt) : 0;
    9db0:	2e00      	cmp	r6, #0
    9db2:	f43f ab51 	beq.w	9458 <tcp_in+0x1c0>
    9db6:	4630      	mov	r0, r6
    9db8:	f012 fbd7 	bl	1c56a <tcp_data_len>
    9dbc:	9007      	str	r0, [sp, #28]
	switch (conn->state) {
    9dbe:	f894 3220 	ldrb.w	r3, [r4, #544]	; 0x220
    9dc2:	3b01      	subs	r3, #1
    9dc4:	2b0a      	cmp	r3, #10
    9dc6:	d8db      	bhi.n	9d80 <tcp_in+0xae8>
    9dc8:	a201      	add	r2, pc, #4	; (adr r2, 9dd0 <tcp_in+0xb38>)
    9dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    9dce:	bf00      	nop
    9dd0:	0000945f 	.word	0x0000945f
    9dd4:	000095eb 	.word	0x000095eb
    9dd8:	0000950b 	.word	0x0000950b
    9ddc:	000096b9 	.word	0x000096b9
    9de0:	00009aa9 	.word	0x00009aa9
    9de4:	00009bb9 	.word	0x00009bb9
    9de8:	00009a37 	.word	0x00009a37
    9dec:	00009c9b 	.word	0x00009c9b
    9df0:	00009a45 	.word	0x00009a45
    9df4:	00009cf1 	.word	0x00009cf1
    9df8:	00009d95 	.word	0x00009d95
    9dfc:	f04f 0900 	mov.w	r9, #0
    9e00:	e7cc      	b.n	9d9c <tcp_in+0xb04>
    9e02:	f04f 0900 	mov.w	r9, #0
    9e06:	e7c9      	b.n	9d9c <tcp_in+0xb04>
    9e08:	4699      	mov	r9, r3
    9e0a:	e7c7      	b.n	9d9c <tcp_in+0xb04>
    9e0c:	f04f 0900 	mov.w	r9, #0
    9e10:	e7c4      	b.n	9d9c <tcp_in+0xb04>
    9e12:	f04f 0900 	mov.w	r9, #0
    9e16:	e7c1      	b.n	9d9c <tcp_in+0xb04>
    9e18:	f04f 0900 	mov.w	r9, #0
    9e1c:	e7be      	b.n	9d9c <tcp_in+0xb04>
    9e1e:	f04f 0900 	mov.w	r9, #0
    9e22:	e7bb      	b.n	9d9c <tcp_in+0xb04>
			k_sem_give(&conn->connect_sem);
    9e24:	f104 0038 	add.w	r0, r4, #56	; 0x38
	z_impl_k_sem_give(sem);
    9e28:	f007 f9f2 	bl	11210 <z_impl_k_sem_give>
}
    9e2c:	e7be      	b.n	9dac <tcp_in+0xb14>
	if (conn->context) {
    9e2e:	6865      	ldr	r5, [r4, #4]
    9e30:	b105      	cbz	r5, 9e34 <tcp_in+0xb9c>
		conn_handler = (struct net_conn *)conn->context->conn_handler;
    9e32:	6aed      	ldr	r5, [r5, #44]	; 0x2c
	recv_user_data = conn->recv_user_data;
    9e34:	6966      	ldr	r6, [r4, #20]
	return z_impl_k_mutex_unlock(mutex);
    9e36:	4658      	mov	r0, fp
    9e38:	f007 f96e 	bl	11118 <z_impl_k_mutex_unlock>
	while (conn_handler && atomic_get(&conn->ref_count) > 0 &&
    9e3c:	b1e5      	cbz	r5, 9e78 <tcp_in+0xbe0>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9e3e:	f3bf 8f5b 	dmb	ish
    9e42:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
    9e46:	f3bf 8f5b 	dmb	ish
    9e4a:	2b00      	cmp	r3, #0
    9e4c:	dd14      	ble.n	9e78 <tcp_in+0xbe0>
	       (recv_pkt = k_fifo_get(recv_data_fifo, K_NO_WAIT)) != NULL) {
    9e4e:	f104 0068 	add.w	r0, r4, #104	; 0x68
	return z_impl_k_queue_get(queue, timeout);
    9e52:	2200      	movs	r2, #0
    9e54:	2300      	movs	r3, #0
    9e56:	f007 f99d 	bl	11194 <z_impl_k_queue_get>
	while (conn_handler && atomic_get(&conn->ref_count) > 0 &&
    9e5a:	4607      	mov	r7, r0
    9e5c:	b160      	cbz	r0, 9e78 <tcp_in+0xbe0>
		if (net_context_packet_received(conn_handler, recv_pkt, NULL,
    9e5e:	9600      	str	r6, [sp, #0]
    9e60:	2300      	movs	r3, #0
    9e62:	461a      	mov	r2, r3
    9e64:	4639      	mov	r1, r7
    9e66:	4628      	mov	r0, r5
    9e68:	f010 fa39 	bl	1a2de <net_context_packet_received>
    9e6c:	2802      	cmp	r0, #2
    9e6e:	d1e5      	bne.n	9e3c <tcp_in+0xba4>
			tcp_pkt_unref(recv_pkt);
    9e70:	4638      	mov	r0, r7
    9e72:	f011 f91d 	bl	1b0b0 <net_pkt_unref>
    9e76:	e7e1      	b.n	9e3c <tcp_in+0xba4>
	if (do_close) {
    9e78:	9b02      	ldr	r3, [sp, #8]
    9e7a:	b91b      	cbnz	r3, 9e84 <tcp_in+0xbec>
}
    9e7c:	9803      	ldr	r0, [sp, #12]
    9e7e:	b009      	add	sp, #36	; 0x24
    9e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		tcp_conn_unref(conn, close_status);
    9e84:	9904      	ldr	r1, [sp, #16]
    9e86:	4620      	mov	r0, r4
    9e88:	f7fe fd0a 	bl	88a0 <tcp_conn_unref>
    9e8c:	e7f6      	b.n	9e7c <tcp_in+0xbe4>
    9e8e:	bf00      	nop

00009e90 <net_tcp_connect>:
{
    9e90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9e94:	b087      	sub	sp, #28
    9e96:	4604      	mov	r4, r0
    9e98:	460f      	mov	r7, r1
    9e9a:	4690      	mov	r8, r2
    9e9c:	461e      	mov	r6, r3
    9e9e:	f8bd 9038 	ldrh.w	r9, [sp, #56]	; 0x38
	conn = context->tcp;
    9ea2:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
	return net_if_get_by_index(context->iface);
    9ea4:	f990 008a 	ldrsb.w	r0, [r0, #138]	; 0x8a
    9ea8:	f7fc fcf2 	bl	6890 <z_impl_net_if_get_by_index>
	conn->iface = net_context_get_iface(context);
    9eac:	6128      	str	r0, [r5, #16]
	tcp_derive_rto(conn);
    9eae:	4628      	mov	r0, r5
    9eb0:	f012 fb7b 	bl	1c5aa <tcp_derive_rto>
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
    9eb4:	f8b4 0088 	ldrh.w	r0, [r4, #136]	; 0x88
    9eb8:	f3c0 00c2 	ubfx	r0, r0, #3, #3
	switch (net_context_get_family(context)) {
    9ebc:	2801      	cmp	r0, #1
    9ebe:	d04c      	beq.n	9f5a <net_tcp_connect+0xca>
    9ec0:	2802      	cmp	r0, #2
    9ec2:	d078      	beq.n	9fb6 <net_tcp_connect+0x126>
		conn->seq = tcp_init_isn(&conn->src.sa, &conn->dst.sa);
    9ec4:	f505 71fc 	add.w	r1, r5, #504	; 0x1f8
    9ec8:	f505 70f0 	add.w	r0, r5, #480	; 0x1e0
    9ecc:	f012 fbca 	bl	1c664 <tcp_init_isn>
    9ed0:	f8c5 0224 	str.w	r0, [r5, #548]	; 0x224
	context->flags &= ~(NET_CONTEXT_STATE_MASK << NET_CONTEXT_STATE_SHIFT);
    9ed4:	f8b4 0088 	ldrh.w	r0, [r4, #136]	; 0x88
    9ed8:	f020 0006 	bic.w	r0, r0, #6
    9edc:	b280      	uxth	r0, r0
    9ede:	f8a4 0088 	strh.w	r0, [r4, #136]	; 0x88
	context->flags |= ((state & NET_CONTEXT_STATE_MASK) <<
    9ee2:	f040 0002 	orr.w	r0, r0, #2
    9ee6:	f8a4 0088 	strh.w	r0, [r4, #136]	; 0x88
				ntohs(remote_port), ntohs(local_port),
    9eea:	0233      	lsls	r3, r6, #8
    9eec:	ea4f 2209 	mov.w	r2, r9, lsl #8
	ret = net_conn_register(net_context_get_proto(context),
    9ef0:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    9ef4:	9105      	str	r1, [sp, #20]
    9ef6:	9404      	str	r4, [sp, #16]
    9ef8:	4932      	ldr	r1, [pc, #200]	; (9fc4 <net_tcp_connect+0x134>)
    9efa:	9103      	str	r1, [sp, #12]
    9efc:	9402      	str	r4, [sp, #8]
    9efe:	ea42 2219 	orr.w	r2, r2, r9, lsr #8
    9f02:	b292      	uxth	r2, r2
    9f04:	9201      	str	r2, [sp, #4]
    9f06:	ea43 2316 	orr.w	r3, r3, r6, lsr #8
    9f0a:	b29b      	uxth	r3, r3
    9f0c:	9300      	str	r3, [sp, #0]
    9f0e:	4643      	mov	r3, r8
    9f10:	463a      	mov	r2, r7
    9f12:	f3c0 01c2 	ubfx	r1, r0, #3, #3
    9f16:	f8b4 0086 	ldrh.w	r0, [r4, #134]	; 0x86
    9f1a:	f011 fd48 	bl	1b9ae <net_conn_register>
	if (ret < 0) {
    9f1e:	1e04      	subs	r4, r0, #0
    9f20:	db4b      	blt.n	9fba <net_tcp_connect+0x12a>
	conn->in_connect = !IS_ENABLED(CONFIG_NET_TEST_PROTOCOL);
    9f22:	f895 3237 	ldrb.w	r3, [r5, #567]	; 0x237
    9f26:	f043 0302 	orr.w	r3, r3, #2
    9f2a:	f885 3237 	strb.w	r3, [r5, #567]	; 0x237
	(void)tcp_in(conn, NULL);
    9f2e:	2100      	movs	r1, #0
    9f30:	4628      	mov	r0, r5
    9f32:	f7ff f9b1 	bl	9298 <tcp_in>
		if (k_sem_take(&conn->connect_sem, timeout) != 0 &&
    9f36:	f105 0038 	add.w	r0, r5, #56	; 0x38
	return z_impl_k_sem_take(sem, timeout);
    9f3a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    9f3e:	f007 f98f 	bl	11260 <z_impl_k_sem_take>
    9f42:	b118      	cbz	r0, 9f4c <net_tcp_connect+0xbc>
		    conn->state != TCP_ESTABLISHED) {
    9f44:	f895 3220 	ldrb.w	r3, [r5, #544]	; 0x220
		if (k_sem_take(&conn->connect_sem, timeout) != 0 &&
    9f48:	2b04      	cmp	r3, #4
    9f4a:	d126      	bne.n	9f9a <net_tcp_connect+0x10a>
		conn->in_connect = false;
    9f4c:	f895 3237 	ldrb.w	r3, [r5, #567]	; 0x237
    9f50:	f36f 0341 	bfc	r3, #1, #1
    9f54:	f885 3237 	strb.w	r3, [r5, #567]	; 0x237
    9f58:	e02f      	b.n	9fba <net_tcp_connect+0x12a>
    9f5a:	2300      	movs	r3, #0
    9f5c:	f8c5 31e0 	str.w	r3, [r5, #480]	; 0x1e0
    9f60:	f8c5 31e4 	str.w	r3, [r5, #484]	; 0x1e4
    9f64:	f8c5 31f8 	str.w	r3, [r5, #504]	; 0x1f8
    9f68:	f8c5 31fc 	str.w	r3, [r5, #508]	; 0x1fc
		conn->src.sa.sa_family = AF_INET;
    9f6c:	2301      	movs	r3, #1
    9f6e:	f8a5 31e0 	strh.w	r3, [r5, #480]	; 0x1e0
		conn->dst.sa.sa_family = AF_INET;
    9f72:	f8a5 31f8 	strh.w	r3, [r5, #504]	; 0x1f8
		conn->dst.sin.sin_port = remote_port;
    9f76:	f8a5 61fa 	strh.w	r6, [r5, #506]	; 0x1fa
		conn->src.sin.sin_port = local_port;
    9f7a:	f8a5 91e2 	strh.w	r9, [r5, #482]	; 0x1e2
	return net_if_get_by_index(context->iface);
    9f7e:	f994 008a 	ldrsb.w	r0, [r4, #138]	; 0x8a
    9f82:	f7fc fc85 	bl	6890 <z_impl_net_if_get_by_index>
		ip4 = net_if_ipv4_select_src_addr(
    9f86:	1d39      	adds	r1, r7, #4
    9f88:	f7fc fda8 	bl	6adc <net_if_ipv4_select_src_addr>
		conn->src.sin.sin_addr = *ip4;
    9f8c:	6803      	ldr	r3, [r0, #0]
    9f8e:	f8c5 31e4 	str.w	r3, [r5, #484]	; 0x1e4
		net_ipaddr_copy(&conn->dst.sin.sin_addr,
    9f92:	687b      	ldr	r3, [r7, #4]
    9f94:	f8c5 31fc 	str.w	r3, [r5, #508]	; 0x1fc
		break;
    9f98:	e794      	b.n	9ec4 <net_tcp_connect+0x34>
			conn->in_connect = false;
    9f9a:	f895 3237 	ldrb.w	r3, [r5, #567]	; 0x237
    9f9e:	f36f 0341 	bfc	r3, #1, #1
    9fa2:	f885 3237 	strb.w	r3, [r5, #567]	; 0x237
			tcp_conn_unref(conn, -ETIMEDOUT);
    9fa6:	f06f 0173 	mvn.w	r1, #115	; 0x73
    9faa:	4628      	mov	r0, r5
    9fac:	f7fe fc78 	bl	88a0 <tcp_conn_unref>
			ret = -ETIMEDOUT;
    9fb0:	f06f 0473 	mvn.w	r4, #115	; 0x73
			goto out;
    9fb4:	e001      	b.n	9fba <net_tcp_connect+0x12a>
	switch (net_context_get_family(context)) {
    9fb6:	f06f 0415 	mvn.w	r4, #21
}
    9fba:	4620      	mov	r0, r4
    9fbc:	b007      	add	sp, #28
    9fbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    9fc2:	bf00      	nop
    9fc4:	0001cdbf 	.word	0x0001cdbf

00009fc8 <net_tcp_init>:

	return &conn->tx_sem;
}

void net_tcp_init(void)
{
    9fc8:	b510      	push	{r4, lr}
    9fca:	b082      	sub	sp, #8
#define THREAD_PRIORITY K_PRIO_PREEMPT(0)
#endif

	/* Use private workqueue in order not to block the system work queue.
	 */
	k_work_queue_start(&tcp_work_q, work_q_stack,
    9fcc:	2400      	movs	r4, #0
    9fce:	9400      	str	r4, [sp, #0]
    9fd0:	f06f 030f 	mvn.w	r3, #15
    9fd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    9fd8:	490f      	ldr	r1, [pc, #60]	; (a018 <net_tcp_init+0x50>)
    9fda:	4810      	ldr	r0, [pc, #64]	; (a01c <net_tcp_init+0x54>)
    9fdc:	f007 fa8c 	bl	114f8 <k_work_queue_start>
			   K_KERNEL_STACK_SIZEOF(work_q_stack), THREAD_PRIORITY,
			   NULL);

	/* Compute the largest possible retransmission timeout */
	tcp_fin_timeout_ms = 0;
    9fe0:	4b0f      	ldr	r3, [pc, #60]	; (a020 <net_tcp_init+0x58>)
    9fe2:	601c      	str	r4, [r3, #0]
	rto = tcp_rto;
    9fe4:	23c8      	movs	r3, #200	; 0xc8
	for (i = 0; i < tcp_retries; i++) {
    9fe6:	4621      	mov	r1, r4
    9fe8:	e006      	b.n	9ff8 <net_tcp_init+0x30>
		tcp_fin_timeout_ms += rto;
    9fea:	480d      	ldr	r0, [pc, #52]	; (a020 <net_tcp_init+0x58>)
    9fec:	6802      	ldr	r2, [r0, #0]
    9fee:	441a      	add	r2, r3
    9ff0:	6002      	str	r2, [r0, #0]
		rto += rto >> 1;
    9ff2:	eb03 0363 	add.w	r3, r3, r3, asr #1
	for (i = 0; i < tcp_retries; i++) {
    9ff6:	3101      	adds	r1, #1
    9ff8:	2908      	cmp	r1, #8
    9ffa:	ddf6      	ble.n	9fea <net_tcp_init+0x22>
	}
	/* At the last timeout cicle */
	tcp_fin_timeout_ms += tcp_rto;
    9ffc:	4a08      	ldr	r2, [pc, #32]	; (a020 <net_tcp_init+0x58>)
    9ffe:	6813      	ldr	r3, [r2, #0]
    a000:	33c8      	adds	r3, #200	; 0xc8
    a002:	6013      	str	r3, [r2, #0]

	/* When CONFIG_NET_TCP_RANDOMIZED_RTO is active in can be worse case 1.5 times larger */
	if (IS_ENABLED(CONFIG_NET_TCP_RANDOMIZED_RTO)) {
		tcp_fin_timeout_ms += tcp_fin_timeout_ms >> 1;
    a004:	eb03 0363 	add.w	r3, r3, r3, asr #1
    a008:	6013      	str	r3, [r2, #0]
	return z_impl_k_thread_name_set(thread, str);
    a00a:	4906      	ldr	r1, [pc, #24]	; (a024 <net_tcp_init+0x5c>)
    a00c:	4803      	ldr	r0, [pc, #12]	; (a01c <net_tcp_init+0x54>)
    a00e:	f014 ffbc 	bl	1ef8a <z_impl_k_thread_name_set>
	}

	k_thread_name_set(&tcp_work_q.thread, "tcp_work");
	NET_DBG("Workq started. Thread ID: %p", &tcp_work_q.thread);
}
    a012:	b002      	add	sp, #8
    a014:	bd10      	pop	{r4, pc}
    a016:	bf00      	nop
    a018:	20004e98 	.word	0x20004e98
    a01c:	20000d40 	.word	0x20000d40
    a020:	20002a90 	.word	0x20002a90
    a024:	00021788 	.word	0x00021788

0000a028 <dns_resolve_init_locked>:

/* Must be invoked with context lock held */
static int dns_resolve_init_locked(struct dns_resolve_context *ctx,
				   const char *servers[],
				   const struct sockaddr *servers_sa[])
{
    a028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a02c:	b082      	sub	sp, #8
		.sin6_family = AF_INET6,
		.sin6_port = 0,
	};
#endif
#if defined(CONFIG_NET_IPV4)
	struct sockaddr_in local_addr4 = {
    a02e:	2300      	movs	r3, #0
    a030:	9300      	str	r3, [sp, #0]
    a032:	9301      	str	r3, [sp, #4]
    a034:	2301      	movs	r3, #1
    a036:	f8ad 3000 	strh.w	r3, [sp]
	socklen_t addr_len = 0;
	int i = 0, idx = 0;
	struct net_if *iface;
	int ret, count;

	if (!ctx) {
    a03a:	2800      	cmp	r0, #0
    a03c:	f000 8089 	beq.w	a152 <dns_resolve_init_locked+0x12a>
    a040:	4689      	mov	r9, r1
    a042:	4690      	mov	r8, r2
    a044:	4605      	mov	r5, r0
		return -ENOENT;
	}

	if (ctx->state != DNS_RESOLVE_CONTEXT_INACTIVE) {
    a046:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
    a04a:	2b02      	cmp	r3, #2
    a04c:	f040 8084 	bne.w	a158 <dns_resolve_init_locked+0x130>
		ret = -ENOTEMPTY;
		goto fail;
	}

	if (servers) {
    a050:	b111      	cbz	r1, a058 <dns_resolve_init_locked+0x30>
	int i = 0, idx = 0;
    a052:	2400      	movs	r4, #0
		for (i = 0; idx < SERVER_COUNT && servers[i]; i++) {
    a054:	4627      	mov	r7, r4
    a056:	e006      	b.n	a066 <dns_resolve_init_locked+0x3e>
	int i = 0, idx = 0;
    a058:	2400      	movs	r4, #0
							 " LLMNR" : "") : "");
			idx++;
		}
	}

	if (servers_sa) {
    a05a:	f1b8 0f00 	cmp.w	r8, #0
    a05e:	d033      	beq.n	a0c8 <dns_resolve_init_locked+0xa0>
		for (i = 0; idx < SERVER_COUNT && servers_sa[i]; i++) {
    a060:	2600      	movs	r6, #0
    a062:	e02b      	b.n	a0bc <dns_resolve_init_locked+0x94>
		for (i = 0; idx < SERVER_COUNT && servers[i]; i++) {
    a064:	3701      	adds	r7, #1
    a066:	2c00      	cmp	r4, #0
    a068:	dcf7      	bgt.n	a05a <dns_resolve_init_locked+0x32>
    a06a:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
    a06e:	2b00      	cmp	r3, #0
    a070:	d0f3      	beq.n	a05a <dns_resolve_init_locked+0x32>
			struct sockaddr *addr = &ctx->servers[idx].dns_server;
    a072:	0123      	lsls	r3, r4, #4
    a074:	eb05 1604 	add.w	r6, r5, r4, lsl #4
    a078:	2200      	movs	r2, #0
    a07a:	50ea      	str	r2, [r5, r3]
    a07c:	6072      	str	r2, [r6, #4]
			ret = net_ipaddr_parse(servers[i], strlen(servers[i]),
    a07e:	f859 a027 	ldr.w	sl, [r9, r7, lsl #2]
    a082:	4650      	mov	r0, sl
    a084:	f7f6 fe94 	bl	db0 <strlen>
    a088:	4601      	mov	r1, r0
    a08a:	4632      	mov	r2, r6
    a08c:	4650      	mov	r0, sl
    a08e:	f00f ffd8 	bl	1a042 <net_ipaddr_parse>
			if (!ret) {
    a092:	2800      	cmp	r0, #0
    a094:	d0e6      	beq.n	a064 <dns_resolve_init_locked+0x3c>
			dns_postprocess_server(ctx, idx);
    a096:	4621      	mov	r1, r4
    a098:	4628      	mov	r0, r5
    a09a:	f012 ffe2 	bl	1d062 <dns_postprocess_server>
			idx++;
    a09e:	3401      	adds	r4, #1
    a0a0:	e7e0      	b.n	a064 <dns_resolve_init_locked+0x3c>
			memcpy(&ctx->servers[idx].dns_server, servers_sa[i],
    a0a2:	0121      	lsls	r1, r4, #4
    a0a4:	eb05 1204 	add.w	r2, r5, r4, lsl #4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    a0a8:	6818      	ldr	r0, [r3, #0]
    a0aa:	685b      	ldr	r3, [r3, #4]
    a0ac:	5068      	str	r0, [r5, r1]
    a0ae:	6053      	str	r3, [r2, #4]
			       sizeof(ctx->servers[idx].dns_server));
			dns_postprocess_server(ctx, idx);
    a0b0:	4621      	mov	r1, r4
    a0b2:	4628      	mov	r0, r5
    a0b4:	f012 ffd5 	bl	1d062 <dns_postprocess_server>
			idx++;
    a0b8:	3401      	adds	r4, #1
		for (i = 0; idx < SERVER_COUNT && servers_sa[i]; i++) {
    a0ba:	3601      	adds	r6, #1
    a0bc:	2c00      	cmp	r4, #0
    a0be:	dc03      	bgt.n	a0c8 <dns_resolve_init_locked+0xa0>
    a0c0:	f858 3026 	ldr.w	r3, [r8, r6, lsl #2]
    a0c4:	2b00      	cmp	r3, #0
    a0c6:	d1ec      	bne.n	a0a2 <dns_resolve_init_locked+0x7a>
		}

		if (ctx->servers[i].dns_server.sa_family == AF_INET) {
#if defined(CONFIG_NET_IPV4)
			local_addr = (struct sockaddr *)&local_addr4;
			addr_len = sizeof(struct sockaddr_in);
    a0c8:	2600      	movs	r6, #0
    a0ca:	4634      	mov	r4, r6
    a0cc:	46b0      	mov	r8, r6
    a0ce:	4637      	mov	r7, r6
	     i < SERVER_COUNT && ctx->servers[i].dns_server.sa_family; i++) {
    a0d0:	2c00      	cmp	r4, #0
    a0d2:	dc32      	bgt.n	a13a <dns_resolve_init_locked+0x112>
    a0d4:	0123      	lsls	r3, r4, #4
    a0d6:	5ae8      	ldrh	r0, [r5, r3]
    a0d8:	b378      	cbz	r0, a13a <dns_resolve_init_locked+0x112>
		if (ctx->servers[i].dns_server.sa_family == AF_INET6) {
    a0da:	2802      	cmp	r0, #2
    a0dc:	d027      	beq.n	a12e <dns_resolve_init_locked+0x106>
		if (ctx->servers[i].dns_server.sa_family == AF_INET) {
    a0de:	2801      	cmp	r0, #1
    a0e0:	d027      	beq.n	a132 <dns_resolve_init_locked+0x10a>
#else
			continue;
#endif
		}

		if (!local_addr) {
    a0e2:	2f00      	cmp	r7, #0
    a0e4:	d03b      	beq.n	a15e <dns_resolve_init_locked+0x136>
			NET_DBG("Local address not set");
			ret = -EAFNOSUPPORT;
			goto fail;
		}

		ret = net_context_get(ctx->servers[i].dns_server.sa_family,
    a0e6:	0123      	lsls	r3, r4, #4
    a0e8:	3308      	adds	r3, #8
    a0ea:	442b      	add	r3, r5
    a0ec:	2211      	movs	r2, #17
    a0ee:	2102      	movs	r1, #2
    a0f0:	f7fd f9c0 	bl	7474 <net_context_get>
				      SOCK_DGRAM, IPPROTO_UDP,
				      &ctx->servers[i].net_ctx);
		if (ret < 0) {
    a0f4:	2800      	cmp	r0, #0
    a0f6:	db29      	blt.n	a14c <dns_resolve_init_locked+0x124>
			NET_DBG("Cannot get net_context (%d)", ret);
			goto fail;
		}

		ret = net_context_bind(ctx->servers[i].net_ctx,
    a0f8:	eb05 1304 	add.w	r3, r5, r4, lsl #4
    a0fc:	4642      	mov	r2, r8
    a0fe:	4639      	mov	r1, r7
    a100:	6898      	ldr	r0, [r3, #8]
    a102:	f010 f9d3 	bl	1a4ac <net_context_bind>
				       local_addr, addr_len);
		if (ret < 0) {
    a106:	2800      	cmp	r0, #0
    a108:	db20      	blt.n	a14c <dns_resolve_init_locked+0x124>
			NET_DBG("Cannot bind DNS context (%d)", ret);
			goto fail;
		}

		iface = net_context_get_iface(ctx->servers[i].net_ctx);
    a10a:	eb05 1904 	add.w	r9, r5, r4, lsl #4
    a10e:	f8d9 3008 	ldr.w	r3, [r9, #8]
    a112:	f993 008a 	ldrsb.w	r0, [r3, #138]	; 0x8a
    a116:	f7fc fbbb 	bl	6890 <z_impl_net_if_get_by_index>
    a11a:	4601      	mov	r1, r0

		if (IS_ENABLED(CONFIG_NET_MGMT_EVENT_INFO)) {
			net_mgmt_event_notify_with_info(
    a11c:	2308      	movs	r3, #8
    a11e:	464a      	mov	r2, r9
    a120:	4812      	ldr	r0, [pc, #72]	; (a16c <dns_resolve_init_locked+0x144>)
    a122:	f7fd fe91 	bl	7e48 <net_mgmt_event_notify_with_info>
#if defined(CONFIG_NET_IPV6)
		local_addr6.sin6_port = 0;
#endif

#if defined(CONFIG_NET_IPV4)
		local_addr4.sin_port = 0;
    a126:	2300      	movs	r3, #0
    a128:	f8ad 3002 	strh.w	r3, [sp, #2]
#endif

		count++;
    a12c:	3601      	adds	r6, #1
	     i < SERVER_COUNT && ctx->servers[i].dns_server.sa_family; i++) {
    a12e:	3401      	adds	r4, #1
    a130:	e7ce      	b.n	a0d0 <dns_resolve_init_locked+0xa8>
			local_addr = (struct sockaddr *)&local_addr4;
    a132:	466f      	mov	r7, sp
			addr_len = sizeof(struct sockaddr_in);
    a134:	f04f 0808 	mov.w	r8, #8
    a138:	e7d5      	b.n	a0e6 <dns_resolve_init_locked+0xbe>
	}

	if (count == 0) {
    a13a:	b19e      	cbz	r6, a164 <dns_resolve_init_locked+0x13c>
		NET_DBG("No DNS servers defined.");
		ret = -EINVAL;
		goto fail;
	}

	ctx->state = DNS_RESOLVE_CONTEXT_ACTIVE;
    a13c:	2000      	movs	r0, #0
    a13e:	f885 0088 	strb.w	r0, [r5, #136]	; 0x88
	ctx->buf_timeout = DNS_BUF_TIMEOUT;
    a142:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    a146:	2300      	movs	r3, #0
    a148:	e9c5 230a 	strd	r2, r3, [r5, #40]	; 0x28
	ret = 0;

fail:
	return ret;
}
    a14c:	b002      	add	sp, #8
    a14e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOENT;
    a152:	f06f 0001 	mvn.w	r0, #1
    a156:	e7f9      	b.n	a14c <dns_resolve_init_locked+0x124>
		ret = -ENOTEMPTY;
    a158:	f06f 0059 	mvn.w	r0, #89	; 0x59
    a15c:	e7f6      	b.n	a14c <dns_resolve_init_locked+0x124>
			ret = -EAFNOSUPPORT;
    a15e:	f06f 0069 	mvn.w	r0, #105	; 0x69
    a162:	e7f3      	b.n	a14c <dns_resolve_init_locked+0x124>
		ret = -EINVAL;
    a164:	f06f 0015 	mvn.w	r0, #21
    a168:	e7f0      	b.n	a14c <dns_resolve_init_locked+0x124>
    a16a:	bf00      	nop
    a16c:	f1140003 	.word	0xf1140003

0000a170 <dns_resolve_close_locked>:
	return ret;
}

/* Must be invoked with context lock held */
static int dns_resolve_close_locked(struct dns_resolve_context *ctx)
{
    a170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i;

	if (ctx->state != DNS_RESOLVE_CONTEXT_ACTIVE) {
    a172:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
    a176:	b113      	cbz	r3, a17e <dns_resolve_close_locked+0xe>
		return -ENOENT;
    a178:	f06f 0001 	mvn.w	r0, #1
	k_mutex_lock(&ctx->lock, K_FOREVER);

	ctx->state = DNS_RESOLVE_CONTEXT_INACTIVE;

	return 0;
}
    a17c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a17e:	4604      	mov	r4, r0
	ctx->state = DNS_RESOLVE_CONTEXT_DEACTIVATING;
    a180:	2301      	movs	r3, #1
    a182:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
	k_mutex_unlock(&ctx->lock);
    a186:	f100 0710 	add.w	r7, r0, #16
	return z_impl_k_mutex_unlock(mutex);
    a18a:	4638      	mov	r0, r7
    a18c:	f006 ffc4 	bl	11118 <z_impl_k_mutex_unlock>
	for (i = 0; i < SERVER_COUNT; i++) {
    a190:	2500      	movs	r5, #0
    a192:	2d00      	cmp	r5, #0
    a194:	dd0b      	ble.n	a1ae <dns_resolve_close_locked+0x3e>
	return z_impl_k_mutex_lock(mutex, timeout);
    a196:	f04f 32ff 	mov.w	r2, #4294967295
    a19a:	f04f 33ff 	mov.w	r3, #4294967295
    a19e:	4638      	mov	r0, r7
    a1a0:	f006 ff36 	bl	11010 <z_impl_k_mutex_lock>
	ctx->state = DNS_RESOLVE_CONTEXT_INACTIVE;
    a1a4:	2302      	movs	r3, #2
    a1a6:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
	return 0;
    a1aa:	2000      	movs	r0, #0
    a1ac:	e7e6      	b.n	a17c <dns_resolve_close_locked+0xc>
		if (ctx->servers[i].net_ctx) {
    a1ae:	eb04 1305 	add.w	r3, r4, r5, lsl #4
    a1b2:	689b      	ldr	r3, [r3, #8]
    a1b4:	b183      	cbz	r3, a1d8 <dns_resolve_close_locked+0x68>
    a1b6:	f993 008a 	ldrsb.w	r0, [r3, #138]	; 0x8a
    a1ba:	f7fc fb69 	bl	6890 <z_impl_net_if_get_by_index>
    a1be:	4601      	mov	r1, r0
					(void *)&ctx->servers[i].dns_server,
    a1c0:	eb04 1605 	add.w	r6, r4, r5, lsl #4
				net_mgmt_event_notify_with_info(
    a1c4:	2308      	movs	r3, #8
    a1c6:	4632      	mov	r2, r6
    a1c8:	4804      	ldr	r0, [pc, #16]	; (a1dc <dns_resolve_close_locked+0x6c>)
    a1ca:	f7fd fe3d 	bl	7e48 <net_mgmt_event_notify_with_info>
			net_context_put(ctx->servers[i].net_ctx);
    a1ce:	68b0      	ldr	r0, [r6, #8]
    a1d0:	f7fd fa26 	bl	7620 <net_context_put>
			ctx->servers[i].net_ctx = NULL;
    a1d4:	2300      	movs	r3, #0
    a1d6:	60b3      	str	r3, [r6, #8]
	for (i = 0; i < SERVER_COUNT; i++) {
    a1d8:	3501      	adds	r5, #1
    a1da:	e7da      	b.n	a192 <dns_resolve_close_locked+0x22>
    a1dc:	f1140004 	.word	0xf1140004

0000a1e0 <dns_resolve_get_default>:
}

struct dns_resolve_context *dns_resolve_get_default(void)
{
	return &dns_default_ctx;
}
    a1e0:	4800      	ldr	r0, [pc, #0]	; (a1e4 <dns_resolve_get_default+0x4>)
    a1e2:	4770      	bx	lr
    a1e4:	20000de0 	.word	0x20000de0

0000a1e8 <rand_get>:
	return random_num;
}
#endif /* CONFIG_ENTROPY_DEVICE_RANDOM_GENERATOR */

static int rand_get(uint8_t *dst, size_t outlen, bool csrand)
{
    a1e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    a1ea:	b083      	sub	sp, #12
    a1ec:	4605      	mov	r5, r0
    a1ee:	460c      	mov	r4, r1
    a1f0:	4616      	mov	r6, r2
	int ret;

	__ASSERT(device_is_ready(entropy_dev), "Entropy device %s not ready",
		 entropy_dev->name);

	ret = entropy_get_entropy(entropy_dev, dst, outlen);
    a1f2:	b28a      	uxth	r2, r1

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
    a1f4:	480f      	ldr	r0, [pc, #60]	; (a234 <rand_get+0x4c>)
    a1f6:	6883      	ldr	r3, [r0, #8]
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
    a1f8:	681b      	ldr	r3, [r3, #0]
    a1fa:	4629      	mov	r1, r5
    a1fc:	4798      	blx	r3
    a1fe:	4603      	mov	r3, r0

	if (unlikely(ret < 0)) {
    a200:	0fc0      	lsrs	r0, r0, #31
    a202:	d101      	bne.n	a208 <rand_get+0x20>
			len += copylen;
		}
	}

	return 0;
}
    a204:	b003      	add	sp, #12
    a206:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (csrand) {
    a208:	b156      	cbz	r6, a220 <rand_get+0x38>
			return ret;
    a20a:	4618      	mov	r0, r3
    a20c:	e7fa      	b.n	a204 <rand_get+0x1c>
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    a20e:	f014 fa67 	bl	1e6e0 <sys_clock_cycle_get_32>
			random_num = k_cycle_get_32();
    a212:	9001      	str	r0, [sp, #4]
    a214:	463a      	mov	r2, r7
    a216:	a901      	add	r1, sp, #4
    a218:	19a8      	adds	r0, r5, r6
    a21a:	f015 fdd2 	bl	1fdc2 <memcpy>
			len += copylen;
    a21e:	443e      	add	r6, r7
		while (len < outlen) {
    a220:	42a6      	cmp	r6, r4
    a222:	d204      	bcs.n	a22e <rand_get+0x46>
			size_t copylen = outlen - len;
    a224:	1ba7      	subs	r7, r4, r6
			if (copylen > blocksize) {
    a226:	2f04      	cmp	r7, #4
    a228:	d9f1      	bls.n	a20e <rand_get+0x26>
				copylen = blocksize;
    a22a:	2704      	movs	r7, #4
    a22c:	e7ef      	b.n	a20e <rand_get+0x26>
	return 0;
    a22e:	2000      	movs	r0, #0
    a230:	e7e8      	b.n	a204 <rand_get+0x1c>
    a232:	bf00      	nop
    a234:	00020814 	.word	0x00020814

0000a238 <z_impl_sys_rand32_get>:
{
    a238:	b500      	push	{lr}
    a23a:	b083      	sub	sp, #12
	const struct entropy_driver_api *api =
    a23c:	4808      	ldr	r0, [pc, #32]	; (a260 <z_impl_sys_rand32_get+0x28>)
    a23e:	6883      	ldr	r3, [r0, #8]
	return api->get_entropy(dev, buffer, length);
    a240:	681b      	ldr	r3, [r3, #0]
    a242:	2204      	movs	r2, #4
    a244:	eb0d 0102 	add.w	r1, sp, r2
    a248:	4798      	blx	r3
	if (unlikely(ret < 0)) {
    a24a:	2800      	cmp	r0, #0
    a24c:	db03      	blt.n	a256 <z_impl_sys_rand32_get+0x1e>
}
    a24e:	9801      	ldr	r0, [sp, #4]
    a250:	b003      	add	sp, #12
    a252:	f85d fb04 	ldr.w	pc, [sp], #4
    a256:	f014 fa43 	bl	1e6e0 <sys_clock_cycle_get_32>
		random_num = k_cycle_get_32();
    a25a:	9001      	str	r0, [sp, #4]
    a25c:	e7f7      	b.n	a24e <z_impl_sys_rand32_get+0x16>
    a25e:	bf00      	nop
    a260:	00020814 	.word	0x00020814

0000a264 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    a264:	4800      	ldr	r0, [pc, #0]	; (a268 <get_hf_flags+0x4>)
    a266:	4770      	bx	lr
    a268:	20002ae8 	.word	0x20002ae8

0000a26c <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    a26c:	4b03      	ldr	r3, [pc, #12]	; (a27c <get_subsys+0x10>)
    a26e:	1ac0      	subs	r0, r0, r3
    a270:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
    a272:	4b03      	ldr	r3, [pc, #12]	; (a280 <get_subsys+0x14>)
    a274:	fb03 f000 	mul.w	r0, r3, r0
    a278:	4770      	bx	lr
    a27a:	bf00      	nop
    a27c:	20002aa8 	.word	0x20002aa8
    a280:	b6db6db7 	.word	0xb6db6db7

0000a284 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    a284:	b538      	push	{r3, r4, r5, lr}
    a286:	4605      	mov	r5, r0
    a288:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    a28a:	f7ff ffef 	bl	a26c <get_subsys>
    a28e:	4601      	mov	r1, r0
    a290:	2240      	movs	r2, #64	; 0x40
    a292:	4803      	ldr	r0, [pc, #12]	; (a2a0 <onoff_stop+0x1c>)
    a294:	f013 f849 	bl	1d32a <stop>
    a298:	4601      	mov	r1, r0
	notify(mgr, res);
    a29a:	4628      	mov	r0, r5
    a29c:	47a0      	blx	r4
}
    a29e:	bd38      	pop	{r3, r4, r5, pc}
    a2a0:	000207b4 	.word	0x000207b4

0000a2a4 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    a2a4:	b530      	push	{r4, r5, lr}
    a2a6:	b083      	sub	sp, #12
    a2a8:	4605      	mov	r5, r0
    a2aa:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    a2ac:	f7ff ffde 	bl	a26c <get_subsys>
    a2b0:	4601      	mov	r1, r0
    a2b2:	2340      	movs	r3, #64	; 0x40
    a2b4:	9300      	str	r3, [sp, #0]
    a2b6:	4623      	mov	r3, r4
    a2b8:	4a05      	ldr	r2, [pc, #20]	; (a2d0 <onoff_start+0x2c>)
    a2ba:	4806      	ldr	r0, [pc, #24]	; (a2d4 <onoff_start+0x30>)
    a2bc:	f013 f84f 	bl	1d35e <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    a2c0:	1e01      	subs	r1, r0, #0
    a2c2:	db01      	blt.n	a2c8 <onoff_start+0x24>
		notify(mgr, err);
	}
}
    a2c4:	b003      	add	sp, #12
    a2c6:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    a2c8:	4628      	mov	r0, r5
    a2ca:	47a0      	blx	r4
}
    a2cc:	e7fa      	b.n	a2c4 <onoff_start+0x20>
    a2ce:	bf00      	nop
    a2d0:	0001d3a7 	.word	0x0001d3a7
    a2d4:	000207b4 	.word	0x000207b4

0000a2d8 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    a2d8:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    a2da:	b110      	cbz	r0, a2e2 <clock_event_handler+0xa>
    a2dc:	2801      	cmp	r0, #1
    a2de:	d00d      	beq.n	a2fc <clock_event_handler+0x24>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
    a2e0:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    a2e2:	2100      	movs	r1, #0
    a2e4:	4808      	ldr	r0, [pc, #32]	; (a308 <clock_event_handler+0x30>)
    a2e6:	f012 ffa9 	bl	1d23c <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    a2ea:	6883      	ldr	r3, [r0, #8]
    a2ec:	f013 0f07 	tst.w	r3, #7
    a2f0:	d1f6      	bne.n	a2e0 <clock_event_handler+0x8>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    a2f2:	2100      	movs	r1, #0
    a2f4:	4804      	ldr	r0, [pc, #16]	; (a308 <clock_event_handler+0x30>)
    a2f6:	f013 f806 	bl	1d306 <clkstarted_handle>
    a2fa:	e7f1      	b.n	a2e0 <clock_event_handler+0x8>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    a2fc:	2101      	movs	r1, #1
    a2fe:	4802      	ldr	r0, [pc, #8]	; (a308 <clock_event_handler+0x30>)
    a300:	f013 f801 	bl	1d306 <clkstarted_handle>
}
    a304:	e7ec      	b.n	a2e0 <clock_event_handler+0x8>
    a306:	bf00      	nop
    a308:	000207b4 	.word	0x000207b4

0000a30c <generic_hfclk_start>:
{
    a30c:	b510      	push	{r4, lr}
    a30e:	b082      	sub	sp, #8
	__asm__ volatile(
    a310:	f04f 0320 	mov.w	r3, #32
    a314:	f3ef 8411 	mrs	r4, BASEPRI
    a318:	f383 8812 	msr	BASEPRI_MAX, r3
    a31c:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    a320:	4a14      	ldr	r2, [pc, #80]	; (a374 <generic_hfclk_start+0x68>)
    a322:	6813      	ldr	r3, [r2, #0]
    a324:	f043 0102 	orr.w	r1, r3, #2
    a328:	6011      	str	r1, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    a32a:	f013 0f01 	tst.w	r3, #1
    a32e:	d109      	bne.n	a344 <generic_hfclk_start+0x38>
	bool already_started = false;
    a330:	2300      	movs	r3, #0
	__asm__ volatile(
    a332:	f384 8811 	msr	BASEPRI, r4
    a336:	f3bf 8f6f 	isb	sy
	if (already_started) {
    a33a:	b9b3      	cbnz	r3, a36a <generic_hfclk_start+0x5e>
	hfclk_start();
    a33c:	f013 f83b 	bl	1d3b6 <hfclk_start>
}
    a340:	b002      	add	sp, #8
    a342:	bd10      	pop	{r4, pc}
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
    a344:	f10d 0207 	add.w	r2, sp, #7
    a348:	2101      	movs	r1, #1
    a34a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    a34e:	f012 ff52 	bl	1d1f6 <nrf_clock_is_running>
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    a352:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a356:	2b01      	cmp	r3, #1
    a358:	d001      	beq.n	a35e <generic_hfclk_start+0x52>
	bool already_started = false;
    a35a:	2300      	movs	r3, #0
    a35c:	e7e9      	b.n	a332 <generic_hfclk_start+0x26>
			set_on_state(get_hf_flags());
    a35e:	f7ff ff81 	bl	a264 <get_hf_flags>
    a362:	f012 ffbd 	bl	1d2e0 <set_on_state>
			already_started = true;
    a366:	2301      	movs	r3, #1
    a368:	e7e3      	b.n	a332 <generic_hfclk_start+0x26>
		clkstarted_handle(CLOCK_DEVICE,
    a36a:	2100      	movs	r1, #0
    a36c:	4802      	ldr	r0, [pc, #8]	; (a378 <generic_hfclk_start+0x6c>)
    a36e:	f012 ffca 	bl	1d306 <clkstarted_handle>
		return;
    a372:	e7e5      	b.n	a340 <generic_hfclk_start+0x34>
    a374:	20002af8 	.word	0x20002af8
    a378:	000207b4 	.word	0x000207b4

0000a37c <generic_hfclk_stop>:
{
    a37c:	b508      	push	{r3, lr}
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a37e:	4b0a      	ldr	r3, [pc, #40]	; (a3a8 <generic_hfclk_stop+0x2c>)
    a380:	f3bf 8f5b 	dmb	ish
    a384:	e853 2f00 	ldrex	r2, [r3]
    a388:	f022 0102 	bic.w	r1, r2, #2
    a38c:	e843 1000 	strex	r0, r1, [r3]
    a390:	2800      	cmp	r0, #0
    a392:	d1f7      	bne.n	a384 <generic_hfclk_stop+0x8>
    a394:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    a398:	f012 0f01 	tst.w	r2, #1
    a39c:	d000      	beq.n	a3a0 <generic_hfclk_stop+0x24>
}
    a39e:	bd08      	pop	{r3, pc}
	hfclk_stop();
    a3a0:	f013 f813 	bl	1d3ca <hfclk_stop>
    a3a4:	e7fb      	b.n	a39e <generic_hfclk_stop+0x22>
    a3a6:	bf00      	nop
    a3a8:	20002af8 	.word	0x20002af8

0000a3ac <lfclk_spinwait>:
{
    a3ac:	b570      	push	{r4, r5, r6, lr}
    a3ae:	b082      	sub	sp, #8
    a3b0:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    a3b2:	2801      	cmp	r0, #1
    a3b4:	d107      	bne.n	a3c6 <lfclk_spinwait+0x1a>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    a3b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a3ba:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    a3be:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    a3c2:	2b01      	cmp	r3, #1
    a3c4:	d04c      	beq.n	a460 <lfclk_spinwait+0xb4>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    a3c6:	f014 fdda 	bl	1ef7e <k_is_in_isr>
    a3ca:	4604      	mov	r4, r0
    a3cc:	b918      	cbnz	r0, a3d6 <lfclk_spinwait+0x2a>
	return !z_sys_post_kernel;
    a3ce:	4b28      	ldr	r3, [pc, #160]	; (a470 <lfclk_spinwait+0xc4>)
    a3d0:	781b      	ldrb	r3, [r3, #0]
    a3d2:	2b00      	cmp	r3, #0
    a3d4:	d139      	bne.n	a44a <lfclk_spinwait+0x9e>
	__asm__ volatile(
    a3d6:	f04f 0320 	mov.w	r3, #32
    a3da:	f3ef 8611 	mrs	r6, BASEPRI
    a3de:	f383 8812 	msr	BASEPRI_MAX, r3
    a3e2:	f3bf 8f6f 	isb	sy
    a3e6:	2401      	movs	r4, #1
	if (!isr_mode) {
    a3e8:	b924      	cbnz	r4, a3f4 <lfclk_spinwait+0x48>
    p_reg->INTENCLR = mask;
    a3ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a3ee:	2202      	movs	r2, #2
    a3f0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    a3f4:	aa01      	add	r2, sp, #4
    a3f6:	2100      	movs	r1, #0
    a3f8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    a3fc:	f012 fefb 	bl	1d1f6 <nrf_clock_is_running>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    a400:	b120      	cbz	r0, a40c <lfclk_spinwait+0x60>
		 && ((type == target_type)
    a402:	9b01      	ldr	r3, [sp, #4]
	while (!(nrfx_clock_is_running(d, (void *)&type)
    a404:	2b01      	cmp	r3, #1
    a406:	d026      	beq.n	a456 <lfclk_spinwait+0xaa>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    a408:	2d01      	cmp	r5, #1
    a40a:	d024      	beq.n	a456 <lfclk_spinwait+0xaa>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    a40c:	b1fc      	cbz	r4, a44e <lfclk_spinwait+0xa2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    a40e:	4630      	mov	r0, r6
    a410:	f7fa fc4e 	bl	4cb0 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    a414:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a418:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    a41c:	2b00      	cmp	r3, #0
    a41e:	d1e9      	bne.n	a3f4 <lfclk_spinwait+0x48>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    a420:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a424:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    a428:	2b00      	cmp	r3, #0
    a42a:	d0e3      	beq.n	a3f4 <lfclk_spinwait+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a42c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a430:	2200      	movs	r2, #0
    a432:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    a436:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    a43a:	2201      	movs	r2, #1
    a43c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a440:	490c      	ldr	r1, [pc, #48]	; (a474 <lfclk_spinwait+0xc8>)
    a442:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a446:	609a      	str	r2, [r3, #8]
}
    a448:	e7d4      	b.n	a3f4 <lfclk_spinwait+0x48>
	int key = isr_mode ? irq_lock() : 0;
    a44a:	2600      	movs	r6, #0
    a44c:	e7cc      	b.n	a3e8 <lfclk_spinwait+0x3c>
				k_msleep(1);
    a44e:	2001      	movs	r0, #1
    a450:	f012 ffc5 	bl	1d3de <k_msleep>
    a454:	e7de      	b.n	a414 <lfclk_spinwait+0x68>
	if (isr_mode) {
    a456:	b12c      	cbz	r4, a464 <lfclk_spinwait+0xb8>
	__asm__ volatile(
    a458:	f386 8811 	msr	BASEPRI, r6
    a45c:	f3bf 8f6f 	isb	sy
}
    a460:	b002      	add	sp, #8
    a462:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
    a464:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a468:	2202      	movs	r2, #2
    a46a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    a46e:	e7f7      	b.n	a460 <lfclk_spinwait+0xb4>
    a470:	200042b1 	.word	0x200042b1
    a474:	e000e100 	.word	0xe000e100

0000a478 <api_blocking_start>:
{
    a478:	b500      	push	{lr}
    a47a:	b087      	sub	sp, #28
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    a47c:	f8cd d000 	str.w	sp, [sp]
    a480:	f8cd d004 	str.w	sp, [sp, #4]
    a484:	2300      	movs	r3, #0
    a486:	9302      	str	r3, [sp, #8]
    a488:	2301      	movs	r3, #1
    a48a:	9303      	str	r3, [sp, #12]
    a48c:	ab04      	add	r3, sp, #16
    a48e:	9304      	str	r3, [sp, #16]
    a490:	9305      	str	r3, [sp, #20]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    a492:	466b      	mov	r3, sp
    a494:	4a06      	ldr	r2, [pc, #24]	; (a4b0 <api_blocking_start+0x38>)
    a496:	f012 ff7e 	bl	1d396 <api_start>
	if (err < 0) {
    a49a:	2800      	cmp	r0, #0
    a49c:	db05      	blt.n	a4aa <api_blocking_start+0x32>
	return z_impl_k_sem_take(sem, timeout);
    a49e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    a4a2:	2300      	movs	r3, #0
    a4a4:	4668      	mov	r0, sp
    a4a6:	f006 fedb 	bl	11260 <z_impl_k_sem_take>
}
    a4aa:	b007      	add	sp, #28
    a4ac:	f85d fb04 	ldr.w	pc, [sp], #4
    a4b0:	0001d40b 	.word	0x0001d40b

0000a4b4 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    a4b4:	b570      	push	{r4, r5, r6, lr}
    a4b6:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    a4b8:	2200      	movs	r2, #0
    a4ba:	2101      	movs	r1, #1
    a4bc:	4610      	mov	r0, r2
    a4be:	f00e fd5b 	bl	18f78 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    a4c2:	4811      	ldr	r0, [pc, #68]	; (a508 <clk_init+0x54>)
    a4c4:	f005 fc54 	bl	fd70 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    a4c8:	4b10      	ldr	r3, [pc, #64]	; (a50c <clk_init+0x58>)
    a4ca:	4298      	cmp	r0, r3
    a4cc:	d119      	bne.n	a502 <clk_init+0x4e>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    a4ce:	f014 fb7f 	bl	1ebd0 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    a4d2:	2400      	movs	r4, #0
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    a4d4:	2c01      	cmp	r4, #1
    a4d6:	d812      	bhi.n	a4fe <clk_init+0x4a>
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    a4d8:	4621      	mov	r1, r4
    a4da:	4630      	mov	r0, r6
    a4dc:	f012 feae 	bl	1d23c <get_sub_data>
    a4e0:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
    a4e2:	4621      	mov	r1, r4
    a4e4:	4630      	mov	r0, r6
    a4e6:	f012 feb6 	bl	1d256 <get_onoff_manager>
    a4ea:	4909      	ldr	r1, [pc, #36]	; (a510 <clk_init+0x5c>)
    a4ec:	f00c fc57 	bl	16d9e <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    a4f0:	2800      	cmp	r0, #0
    a4f2:	db05      	blt.n	a500 <clk_init+0x4c>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    a4f4:	2301      	movs	r3, #1
    a4f6:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    a4f8:	441c      	add	r4, r3
    a4fa:	b2e4      	uxtb	r4, r4
    a4fc:	e7ea      	b.n	a4d4 <clk_init+0x20>
	}

	return 0;
    a4fe:	2000      	movs	r0, #0
}
    a500:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    a502:	f06f 0004 	mvn.w	r0, #4
    a506:	e7fb      	b.n	a500 <clk_init+0x4c>
    a508:	0000a2d9 	.word	0x0000a2d9
    a50c:	0bad0000 	.word	0x0bad0000
    a510:	000217b4 	.word	0x000217b4

0000a514 <z_nrf_clock_control_lf_on>:
{
    a514:	b510      	push	{r4, lr}
    a516:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    a518:	4b10      	ldr	r3, [pc, #64]	; (a55c <z_nrf_clock_control_lf_on+0x48>)
    a51a:	2101      	movs	r1, #1
    a51c:	f3bf 8f5b 	dmb	ish
    a520:	e853 2f00 	ldrex	r2, [r3]
    a524:	e843 1000 	strex	r0, r1, [r3]
    a528:	2800      	cmp	r0, #0
    a52a:	d1f9      	bne.n	a520 <z_nrf_clock_control_lf_on+0xc>
    a52c:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    a530:	b11a      	cbz	r2, a53a <z_nrf_clock_control_lf_on+0x26>
	switch (start_mode) {
    a532:	1e63      	subs	r3, r4, #1
    a534:	2b01      	cmp	r3, #1
    a536:	d90d      	bls.n	a554 <z_nrf_clock_control_lf_on+0x40>
}
    a538:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
    a53a:	4809      	ldr	r0, [pc, #36]	; (a560 <z_nrf_clock_control_lf_on+0x4c>)
    a53c:	f012 fe8b 	bl	1d256 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    a540:	4908      	ldr	r1, [pc, #32]	; (a564 <z_nrf_clock_control_lf_on+0x50>)
    a542:	2300      	movs	r3, #0
    a544:	604b      	str	r3, [r1, #4]
    a546:	608b      	str	r3, [r1, #8]
    a548:	60cb      	str	r3, [r1, #12]
    a54a:	2301      	movs	r3, #1
    a54c:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    a54e:	f00c fc43 	bl	16dd8 <onoff_request>
    a552:	e7ee      	b.n	a532 <z_nrf_clock_control_lf_on+0x1e>
		lfclk_spinwait(start_mode);
    a554:	4620      	mov	r0, r4
    a556:	f7ff ff29 	bl	a3ac <lfclk_spinwait>
		break;
    a55a:	e7ed      	b.n	a538 <z_nrf_clock_control_lf_on+0x24>
    a55c:	20002aa4 	.word	0x20002aa4
    a560:	000207b4 	.word	0x000207b4
    a564:	20002a94 	.word	0x20002a94

0000a568 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    a568:	b510      	push	{r4, lr}
    a56a:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    a56c:	280a      	cmp	r0, #10
    a56e:	d006      	beq.n	a57e <console_out+0x16>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    a570:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
    a572:	4806      	ldr	r0, [pc, #24]	; (a58c <console_out+0x24>)
    a574:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    a576:	685b      	ldr	r3, [r3, #4]
    a578:	4798      	blx	r3

	return c;
}
    a57a:	4620      	mov	r0, r4
    a57c:	bd10      	pop	{r4, pc}
	const struct uart_driver_api *api =
    a57e:	4803      	ldr	r0, [pc, #12]	; (a58c <console_out+0x24>)
    a580:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    a582:	685b      	ldr	r3, [r3, #4]
    a584:	210d      	movs	r1, #13
    a586:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    a588:	e7f2      	b.n	a570 <console_out+0x8>
    a58a:	bf00      	nop
    a58c:	0002082c 	.word	0x0002082c

0000a590 <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
    a590:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
    a592:	4c04      	ldr	r4, [pc, #16]	; (a5a4 <uart_console_hook_install+0x14>)
    a594:	4620      	mov	r0, r4
    a596:	f7fb fe4f 	bl	6238 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
    a59a:	4620      	mov	r0, r4
    a59c:	f7f8 fc5c 	bl	2e58 <__printk_hook_install>
#endif
}
    a5a0:	bd10      	pop	{r4, pc}
    a5a2:	bf00      	nop
    a5a4:	0000a569 	.word	0x0000a569

0000a5a8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    a5a8:	b508      	push	{r3, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    a5aa:	4805      	ldr	r0, [pc, #20]	; (a5c0 <uart_console_init+0x18>)
    a5ac:	f014 fbef 	bl	1ed8e <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
    a5b0:	b118      	cbz	r0, a5ba <uart_console_init+0x12>
		return -ENODEV;
	}

	uart_console_hook_install();
    a5b2:	f7ff ffed 	bl	a590 <uart_console_hook_install>

	return 0;
    a5b6:	2000      	movs	r0, #0
}
    a5b8:	bd08      	pop	{r3, pc}
		return -ENODEV;
    a5ba:	f06f 0012 	mvn.w	r0, #18
    a5be:	e7fb      	b.n	a5b8 <uart_console_init+0x10>
    a5c0:	0002082c 	.word	0x0002082c

0000a5c4 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    a5c4:	b128      	cbz	r0, a5d2 <get_dev+0xe>
    a5c6:	2801      	cmp	r0, #1
    a5c8:	d101      	bne.n	a5ce <get_dev+0xa>
    a5ca:	4803      	ldr	r0, [pc, #12]	; (a5d8 <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
    a5cc:	4770      	bx	lr
	const struct device *dev = NULL;
    a5ce:	2000      	movs	r0, #0
    a5d0:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    a5d2:	4802      	ldr	r0, [pc, #8]	; (a5dc <get_dev+0x18>)
    a5d4:	4770      	bx	lr
    a5d6:	bf00      	nop
    a5d8:	000207cc 	.word	0x000207cc
    a5dc:	000207e4 	.word	0x000207e4

0000a5e0 <gpio_nrfx_pin_interrupt_configure>:
{
    a5e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    a5e2:	b085      	sub	sp, #20
    a5e4:	460e      	mov	r6, r1
    a5e6:	4619      	mov	r1, r3
	return port->config;
    a5e8:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    a5ea:	7b1b      	ldrb	r3, [r3, #12]
    a5ec:	f006 051f 	and.w	r5, r6, #31
    a5f0:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    a5f4:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
    a5f8:	d022      	beq.n	a640 <gpio_nrfx_pin_interrupt_configure+0x60>
    a5fa:	4607      	mov	r7, r0
    a5fc:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    a5fe:	2300      	movs	r3, #0
    a600:	9301      	str	r3, [sp, #4]
    a602:	9302      	str	r3, [sp, #8]
		.trigger = get_trigger(mode, trig),
    a604:	4610      	mov	r0, r2
    a606:	f012 ffe2 	bl	1d5ce <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
    a60a:	f88d 0004 	strb.w	r0, [sp, #4]
	return port->config;
    a60e:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    a610:	6899      	ldr	r1, [r3, #8]
    a612:	40f1      	lsrs	r1, r6
    a614:	f011 0f01 	tst.w	r1, #1
    a618:	d102      	bne.n	a620 <gpio_nrfx_pin_interrupt_configure+0x40>
    a61a:	f1b4 7fa0 	cmp.w	r4, #20971520	; 0x1400000
    a61e:	d014      	beq.n	a64a <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    a620:	2300      	movs	r3, #0
    a622:	aa01      	add	r2, sp, #4
    a624:	4619      	mov	r1, r3
    a626:	4628      	mov	r0, r5
    a628:	f005 fe4c 	bl	102c4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    a62c:	4b1b      	ldr	r3, [pc, #108]	; (a69c <gpio_nrfx_pin_interrupt_configure+0xbc>)
    a62e:	4298      	cmp	r0, r3
    a630:	d131      	bne.n	a696 <gpio_nrfx_pin_interrupt_configure+0xb6>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    a632:	2101      	movs	r1, #1
    a634:	4628      	mov	r0, r5
    a636:	f005 ffa5 	bl	10584 <nrfx_gpiote_trigger_enable>
	return 0;
    a63a:	2000      	movs	r0, #0
}
    a63c:	b005      	add	sp, #20
    a63e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
    a640:	4628      	mov	r0, r5
    a642:	f005 ffd1 	bl	105e8 <nrfx_gpiote_trigger_disable>
		return 0;
    a646:	2000      	movs	r0, #0
    a648:	e7f8      	b.n	a63c <gpio_nrfx_pin_interrupt_configure+0x5c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    a64a:	f005 031f 	and.w	r3, r5, #31

    return pin_number >> 5;
    a64e:	096a      	lsrs	r2, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    a650:	2a01      	cmp	r2, #1
    a652:	d014      	beq.n	a67e <gpio_nrfx_pin_interrupt_configure+0x9e>
        case 0: return NRF_P0;
    a654:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    a658:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    a65c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    a660:	f013 0f01 	tst.w	r3, #1
    a664:	d1dc      	bne.n	a620 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    a666:	f10d 010f 	add.w	r1, sp, #15
    a66a:	4628      	mov	r0, r5
    a66c:	f005 ff2e 	bl	104cc <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    a670:	4b0b      	ldr	r3, [pc, #44]	; (a6a0 <gpio_nrfx_pin_interrupt_configure+0xc0>)
    a672:	4298      	cmp	r0, r3
    a674:	d005      	beq.n	a682 <gpio_nrfx_pin_interrupt_configure+0xa2>
		trigger_config.p_in_channel = &ch;
    a676:	f10d 030f 	add.w	r3, sp, #15
    a67a:	9302      	str	r3, [sp, #8]
    a67c:	e7d0      	b.n	a620 <gpio_nrfx_pin_interrupt_configure+0x40>
        case 1: return NRF_P1;
    a67e:	4a09      	ldr	r2, [pc, #36]	; (a6a4 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    a680:	e7ea      	b.n	a658 <gpio_nrfx_pin_interrupt_configure+0x78>
			err = nrfx_gpiote_channel_alloc(&ch);
    a682:	f10d 000f 	add.w	r0, sp, #15
    a686:	f005 ff75 	bl	10574 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    a68a:	4b04      	ldr	r3, [pc, #16]	; (a69c <gpio_nrfx_pin_interrupt_configure+0xbc>)
    a68c:	4298      	cmp	r0, r3
    a68e:	d0f2      	beq.n	a676 <gpio_nrfx_pin_interrupt_configure+0x96>
				return -ENOMEM;
    a690:	f06f 000b 	mvn.w	r0, #11
    a694:	e7d2      	b.n	a63c <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EINVAL;
    a696:	f06f 0015 	mvn.w	r0, #21
    a69a:	e7cf      	b.n	a63c <gpio_nrfx_pin_interrupt_configure+0x5c>
    a69c:	0bad0000 	.word	0x0bad0000
    a6a0:	0bad0004 	.word	0x0bad0004
    a6a4:	50000300 	.word	0x50000300

0000a6a8 <gpio_nrfx_pin_configure>:
{
    a6a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a6ac:	b086      	sub	sp, #24
    a6ae:	460e      	mov	r6, r1
    a6b0:	4614      	mov	r4, r2
	return port->config;
    a6b2:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    a6b6:	f898 300c 	ldrb.w	r3, [r8, #12]
    a6ba:	f001 051f 	and.w	r5, r1, #31
    a6be:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    a6c2:	f10d 0117 	add.w	r1, sp, #23
    a6c6:	4628      	mov	r0, r5
    a6c8:	f005 ff00 	bl	104cc <nrfx_gpiote_channel_get>
    a6cc:	4607      	mov	r7, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    a6ce:	f414 3f40 	tst.w	r4, #196608	; 0x30000
    a6d2:	d03a      	beq.n	a74a <gpio_nrfx_pin_configure+0xa2>
	nrfx_gpiote_trigger_config_t trigger_config = {
    a6d4:	2100      	movs	r1, #0
    a6d6:	9103      	str	r1, [sp, #12]
    a6d8:	9104      	str	r1, [sp, #16]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    a6da:	460b      	mov	r3, r1
    a6dc:	aa03      	add	r2, sp, #12
    a6de:	4628      	mov	r0, r5
    a6e0:	f005 fdf0 	bl	102c4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    a6e4:	4b33      	ldr	r3, [pc, #204]	; (a7b4 <gpio_nrfx_pin_configure+0x10c>)
    a6e6:	4298      	cmp	r0, r3
    a6e8:	d161      	bne.n	a7ae <gpio_nrfx_pin_configure+0x106>
	if (free_ch) {
    a6ea:	429f      	cmp	r7, r3
    a6ec:	d03d      	beq.n	a76a <gpio_nrfx_pin_configure+0xc2>
	if (flags & GPIO_OUTPUT) {
    a6ee:	f414 3f00 	tst.w	r4, #131072	; 0x20000
    a6f2:	d049      	beq.n	a788 <gpio_nrfx_pin_configure+0xe0>
		int rv = get_drive(flags, &drive);
    a6f4:	f10d 0103 	add.w	r1, sp, #3
    a6f8:	4620      	mov	r0, r4
    a6fa:	f012 feed 	bl	1d4d8 <get_drive>
		if (rv != 0) {
    a6fe:	4607      	mov	r7, r0
    a700:	bb50      	cbnz	r0, a758 <gpio_nrfx_pin_configure+0xb0>
		nrfx_gpiote_output_config_t output_config = {
    a702:	f89d 3003 	ldrb.w	r3, [sp, #3]
    a706:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    a70a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
    a70e:	bf0c      	ite	eq
    a710:	2301      	moveq	r3, #1
    a712:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
    a714:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
    a718:	4620      	mov	r0, r4
    a71a:	f012 ff20 	bl	1d55e <get_pull>
		nrfx_gpiote_output_config_t output_config = {
    a71e:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    a722:	f414 2f00 	tst.w	r4, #524288	; 0x80000
    a726:	d025      	beq.n	a774 <gpio_nrfx_pin_configure+0xcc>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    a728:	f8d8 2004 	ldr.w	r2, [r8, #4]
    a72c:	2301      	movs	r3, #1
    a72e:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    a730:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    a734:	2200      	movs	r2, #0
    a736:	a901      	add	r1, sp, #4
    a738:	4628      	mov	r0, r5
    a73a:	f005 fe57 	bl	103ec <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    a73e:	4b1d      	ldr	r3, [pc, #116]	; (a7b4 <gpio_nrfx_pin_configure+0x10c>)
    a740:	4298      	cmp	r0, r3
    a742:	d009      	beq.n	a758 <gpio_nrfx_pin_configure+0xb0>
    a744:	f06f 0715 	mvn.w	r7, #21
    a748:	e006      	b.n	a758 <gpio_nrfx_pin_configure+0xb0>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    a74a:	4628      	mov	r0, r5
    a74c:	f005 ff6e 	bl	1062c <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    a750:	4b18      	ldr	r3, [pc, #96]	; (a7b4 <gpio_nrfx_pin_configure+0x10c>)
    a752:	429f      	cmp	r7, r3
    a754:	d004      	beq.n	a760 <gpio_nrfx_pin_configure+0xb8>
		return 0;
    a756:	2700      	movs	r7, #0
}
    a758:	4638      	mov	r0, r7
    a75a:	b006      	add	sp, #24
    a75c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			err = nrfx_gpiote_channel_free(ch);
    a760:	f89d 0017 	ldrb.w	r0, [sp, #23]
    a764:	f005 fefe 	bl	10564 <nrfx_gpiote_channel_free>
    a768:	e7f5      	b.n	a756 <gpio_nrfx_pin_configure+0xae>
		err = nrfx_gpiote_channel_free(ch);
    a76a:	f89d 0017 	ldrb.w	r0, [sp, #23]
    a76e:	f005 fef9 	bl	10564 <nrfx_gpiote_channel_free>
    a772:	e7bc      	b.n	a6ee <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    a774:	f414 2f80 	tst.w	r4, #262144	; 0x40000
    a778:	d0dc      	beq.n	a734 <gpio_nrfx_pin_configure+0x8c>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    a77a:	f8d8 2004 	ldr.w	r2, [r8, #4]
    a77e:	2301      	movs	r3, #1
    a780:	40b3      	lsls	r3, r6
    p_reg->OUTCLR = clr_mask;
    a782:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
    a786:	e7d5      	b.n	a734 <gpio_nrfx_pin_configure+0x8c>
		.pull = get_pull(flags)
    a788:	4620      	mov	r0, r4
    a78a:	f012 fee8 	bl	1d55e <get_pull>
	nrfx_gpiote_input_config_t input_config = {
    a78e:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    a792:	2300      	movs	r3, #0
    a794:	461a      	mov	r2, r3
    a796:	a902      	add	r1, sp, #8
    a798:	4628      	mov	r0, r5
    a79a:	f005 fd93 	bl	102c4 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    a79e:	4b05      	ldr	r3, [pc, #20]	; (a7b4 <gpio_nrfx_pin_configure+0x10c>)
    a7a0:	4298      	cmp	r0, r3
    a7a2:	d101      	bne.n	a7a8 <gpio_nrfx_pin_configure+0x100>
    a7a4:	2700      	movs	r7, #0
    a7a6:	e7d7      	b.n	a758 <gpio_nrfx_pin_configure+0xb0>
    a7a8:	f06f 0715 	mvn.w	r7, #21
    a7ac:	e7d4      	b.n	a758 <gpio_nrfx_pin_configure+0xb0>
		return -EINVAL;
    a7ae:	f06f 0715 	mvn.w	r7, #21
    a7b2:	e7d1      	b.n	a758 <gpio_nrfx_pin_configure+0xb0>
    a7b4:	0bad0000 	.word	0x0bad0000

0000a7b8 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    a7b8:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    a7ba:	f005 fec9 	bl	10550 <nrfx_gpiote_is_init>
    a7be:	b108      	cbz	r0, a7c4 <gpio_nrfx_init+0xc>
		return 0;
    a7c0:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    a7c2:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
    a7c4:	f005 fe9a 	bl	104fc <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    a7c8:	4b08      	ldr	r3, [pc, #32]	; (a7ec <gpio_nrfx_init+0x34>)
    a7ca:	4298      	cmp	r0, r3
    a7cc:	d10a      	bne.n	a7e4 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    a7ce:	2100      	movs	r1, #0
    a7d0:	4807      	ldr	r0, [pc, #28]	; (a7f0 <gpio_nrfx_init+0x38>)
    a7d2:	f005 fe75 	bl	104c0 <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    a7d6:	2200      	movs	r2, #0
    a7d8:	2105      	movs	r1, #5
    a7da:	2006      	movs	r0, #6
    a7dc:	f00e fbcc 	bl	18f78 <z_arm_irq_priority_set>
	return 0;
    a7e0:	2000      	movs	r0, #0
    a7e2:	e7ee      	b.n	a7c2 <gpio_nrfx_init+0xa>
		return -EIO;
    a7e4:	f06f 0004 	mvn.w	r0, #4
    a7e8:	e7eb      	b.n	a7c2 <gpio_nrfx_init+0xa>
    a7ea:	bf00      	nop
    a7ec:	0bad0000 	.word	0x0bad0000
    a7f0:	0001d607 	.word	0x0001d607

0000a7f4 <context_from_dev>:
 * @param  *dev: device used by the receiver context.
 *
 * @retval Receiver context or NULL.
 */
static struct mdm_receiver_context *context_from_dev(const struct device *dev)
{
    a7f4:	4602      	mov	r2, r0
	int i;

	for (i = 0; i < MAX_MDM_CTX; i++) {
    a7f6:	2300      	movs	r3, #0
    a7f8:	2b00      	cmp	r3, #0
    a7fa:	dd01      	ble.n	a800 <context_from_dev+0xc>
		if (contexts[i] && contexts[i]->uart_dev == dev) {
			return contexts[i];
		}
	}

	return NULL;
    a7fc:	2000      	movs	r0, #0
}
    a7fe:	4770      	bx	lr
		if (contexts[i] && contexts[i]->uart_dev == dev) {
    a800:	4904      	ldr	r1, [pc, #16]	; (a814 <context_from_dev+0x20>)
    a802:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
    a806:	b110      	cbz	r0, a80e <context_from_dev+0x1a>
    a808:	6801      	ldr	r1, [r0, #0]
    a80a:	4291      	cmp	r1, r2
    a80c:	d0f7      	beq.n	a7fe <context_from_dev+0xa>
	for (i = 0; i < MAX_MDM_CTX; i++) {
    a80e:	3301      	adds	r3, #1
    a810:	e7f2      	b.n	a7f8 <context_from_dev+0x4>
    a812:	bf00      	nop
    a814:	20002b94 	.word	0x20002b94

0000a818 <mdm_receiver_get>:
 */
static int mdm_receiver_get(struct mdm_receiver_context *ctx)
{
	int i;

	for (i = 0; i < MAX_MDM_CTX; i++) {
    a818:	2300      	movs	r3, #0
    a81a:	2b00      	cmp	r3, #0
    a81c:	dd02      	ble.n	a824 <mdm_receiver_get+0xc>
			contexts[i] = ctx;
			return 0;
		}
	}

	return -ENOMEM;
    a81e:	f06f 000b 	mvn.w	r0, #11
}
    a822:	4770      	bx	lr
		if (!contexts[i]) {
    a824:	4a05      	ldr	r2, [pc, #20]	; (a83c <mdm_receiver_get+0x24>)
    a826:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    a82a:	b10a      	cbz	r2, a830 <mdm_receiver_get+0x18>
	for (i = 0; i < MAX_MDM_CTX; i++) {
    a82c:	3301      	adds	r3, #1
    a82e:	e7f4      	b.n	a81a <mdm_receiver_get+0x2>
			contexts[i] = ctx;
    a830:	4a02      	ldr	r2, [pc, #8]	; (a83c <mdm_receiver_get+0x24>)
    a832:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			return 0;
    a836:	2000      	movs	r0, #0
    a838:	4770      	bx	lr
    a83a:	bf00      	nop
    a83c:	20002b94 	.word	0x20002b94

0000a840 <mdm_receiver_setup>:
 * @param  *ctx: receiver context.
 *
 * @retval None.
 */
static void mdm_receiver_setup(struct mdm_receiver_context *ctx)
{
    a840:	b510      	push	{r4, lr}
    a842:	4604      	mov	r4, r0
	__ASSERT(ctx, "invalid ctx");

	uart_irq_rx_disable(ctx->uart_dev);
    a844:	6800      	ldr	r0, [r0, #0]
    a846:	f012 ff00 	bl	1d64a <uart_irq_rx_disable>
	uart_irq_tx_disable(ctx->uart_dev);
    a84a:	6820      	ldr	r0, [r4, #0]
    a84c:	f012 fef1 	bl	1d632 <uart_irq_tx_disable>
	mdm_receiver_flush(ctx);
    a850:	4620      	mov	r0, r4
    a852:	f012 ff09 	bl	1d668 <mdm_receiver_flush>
 * @param cb Pointer to the callback function.
 */
static inline void uart_irq_callback_set(const struct device *dev,
					 uart_irq_callback_user_data_t cb)
{
	uart_irq_callback_user_data_set(dev, cb, NULL);
    a856:	2200      	movs	r2, #0
    a858:	4903      	ldr	r1, [pc, #12]	; (a868 <mdm_receiver_setup+0x28>)
    a85a:	6820      	ldr	r0, [r4, #0]
    a85c:	f012 fee2 	bl	1d624 <uart_irq_callback_user_data_set>
	uart_irq_callback_set(ctx->uart_dev, mdm_receiver_isr);
	uart_irq_rx_enable(ctx->uart_dev);
    a860:	6820      	ldr	r0, [r4, #0]
    a862:	f012 feec 	bl	1d63e <uart_irq_rx_enable>
}
    a866:	bd10      	pop	{r4, pc}
    a868:	0000a86d 	.word	0x0000a86d

0000a86c <mdm_receiver_isr>:
{
    a86c:	b538      	push	{r3, r4, r5, lr}
	ctx = context_from_dev(uart_dev);
    a86e:	f7ff ffc1 	bl	a7f4 <context_from_dev>
	if (!ctx) {
    a872:	4605      	mov	r5, r0
    a874:	b348      	cbz	r0, a8ca <mdm_receiver_isr+0x5e>
	while (uart_irq_update(ctx->uart_dev) &&
    a876:	6828      	ldr	r0, [r5, #0]
    a878:	f012 feed 	bl	1d656 <uart_irq_update>
    a87c:	b328      	cbz	r0, a8ca <mdm_receiver_isr+0x5e>
	       uart_irq_rx_ready(ctx->uart_dev)) {
    a87e:	6828      	ldr	r0, [r5, #0]
	const struct uart_driver_api *api =
    a880:	6883      	ldr	r3, [r0, #8]
	if (api->irq_rx_ready == NULL) {
    a882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    a884:	b10b      	cbz	r3, a88a <mdm_receiver_isr+0x1e>
	return api->irq_rx_ready(dev);
    a886:	4798      	blx	r3
	while (uart_irq_update(ctx->uart_dev) &&
    a888:	b1f8      	cbz	r0, a8ca <mdm_receiver_isr+0x5e>
		rx = uart_fifo_read(ctx->uart_dev, read_buf, sizeof(read_buf));
    a88a:	6828      	ldr	r0, [r5, #0]
	const struct uart_driver_api *api =
    a88c:	6883      	ldr	r3, [r0, #8]
	if (api->fifo_read == NULL) {
    a88e:	699b      	ldr	r3, [r3, #24]
    a890:	b18b      	cbz	r3, a8b6 <mdm_receiver_isr+0x4a>
	return api->fifo_read(dev, rx_data, size);
    a892:	2280      	movs	r2, #128	; 0x80
    a894:	490d      	ldr	r1, [pc, #52]	; (a8cc <mdm_receiver_isr+0x60>)
    a896:	4798      	blx	r3
    a898:	4604      	mov	r4, r0
		if (rx > 0) {
    a89a:	2c00      	cmp	r4, #0
    a89c:	ddeb      	ble.n	a876 <mdm_receiver_isr+0xa>
			ret = ring_buf_put(&ctx->rx_rb, read_buf, rx);
    a89e:	4622      	mov	r2, r4
    a8a0:	490a      	ldr	r1, [pc, #40]	; (a8cc <mdm_receiver_isr+0x60>)
    a8a2:	1d28      	adds	r0, r5, #4
    a8a4:	f00c fd39 	bl	1731a <ring_buf_put>
			if (ret != rx) {
    a8a8:	4284      	cmp	r4, r0
    a8aa:	d107      	bne.n	a8bc <mdm_receiver_isr+0x50>
			k_sem_give(&ctx->rx_sem);
    a8ac:	f105 0024 	add.w	r0, r5, #36	; 0x24
	z_impl_k_sem_give(sem);
    a8b0:	f006 fcae 	bl	11210 <z_impl_k_sem_give>
}
    a8b4:	e7df      	b.n	a876 <mdm_receiver_isr+0xa>
		return -ENOSYS;
    a8b6:	f06f 0457 	mvn.w	r4, #87	; 0x57
    a8ba:	e7ee      	b.n	a89a <mdm_receiver_isr+0x2e>
				mdm_receiver_flush(ctx);
    a8bc:	4628      	mov	r0, r5
    a8be:	f012 fed3 	bl	1d668 <mdm_receiver_flush>
				k_sem_give(&ctx->rx_sem);
    a8c2:	f105 0024 	add.w	r0, r5, #36	; 0x24
	z_impl_k_sem_give(sem);
    a8c6:	f006 fca3 	bl	11210 <z_impl_k_sem_give>
}
    a8ca:	bd38      	pop	{r3, r4, r5, pc}
    a8cc:	20002b14 	.word	0x20002b14

0000a8d0 <alloc_stale_socket>:

static struct stale_socket *alloc_stale_socket(void)
{
	struct stale_socket *sock = NULL;

	for (int i = 0; i < MDM_MAX_SOCKETS; i++) {
    a8d0:	2300      	movs	r3, #0
    a8d2:	2b05      	cmp	r3, #5
    a8d4:	dc0e      	bgt.n	a8f4 <alloc_stale_socket+0x24>
		if (!ictx.stale_sockets[i].allocated) {
    a8d6:	f103 019c 	add.w	r1, r3, #156	; 0x9c
    a8da:	4a07      	ldr	r2, [pc, #28]	; (a8f8 <alloc_stale_socket+0x28>)
    a8dc:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    a8e0:	7992      	ldrb	r2, [r2, #6]
    a8e2:	b10a      	cbz	r2, a8e8 <alloc_stale_socket+0x18>
	for (int i = 0; i < MDM_MAX_SOCKETS; i++) {
    a8e4:	3301      	adds	r3, #1
    a8e6:	e7f4      	b.n	a8d2 <alloc_stale_socket+0x2>
			sock = &ictx.stale_sockets[i];
    a8e8:	4803      	ldr	r0, [pc, #12]	; (a8f8 <alloc_stale_socket+0x28>)
    a8ea:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
			sock->allocated = true;
    a8ee:	2301      	movs	r3, #1
    a8f0:	7183      	strb	r3, [r0, #6]
			break;
    a8f2:	4770      	bx	lr
	struct stale_socket *sock = NULL;
    a8f4:	2000      	movs	r0, #0
		}
	}

	return sock;
}
    a8f6:	4770      	bx	lr
    a8f8:	20000e70 	.word	0x20000e70

0000a8fc <hl7800_RX_locked>:
	return sem->count;
    a8fc:	4b03      	ldr	r3, [pc, #12]	; (a90c <hl7800_RX_locked+0x10>)
    a8fe:	689b      	ldr	r3, [r3, #8]
	HL7800_RX_LOCK_DBG_LOG("UNLocked RX [%p]", k_current_get());
}

static bool hl7800_RX_locked(void)
{
	if (k_sem_count_get(&hl7800_RX_lock_sem) == 0) {
    a900:	b90b      	cbnz	r3, a906 <hl7800_RX_locked+0xa>
		return true;
    a902:	2001      	movs	r0, #1
    a904:	4770      	bx	lr
	} else {
		return false;
    a906:	2000      	movs	r0, #0
	}
}
    a908:	4770      	bx	lr
    a90a:	bf00      	nop
    a90c:	2000053c 	.word	0x2000053c

0000a910 <hl7800_TX_locked>:
    a910:	4b03      	ldr	r3, [pc, #12]	; (a920 <hl7800_TX_locked+0x10>)
    a912:	689b      	ldr	r3, [r3, #8]
	HL7800_TX_LOCK_DBG_LOG("UNLocked TX [%p]", k_current_get());
}

static bool hl7800_TX_locked(void)
{
	if (k_sem_count_get(&hl7800_TX_lock_sem) == 0) {
    a914:	b90b      	cbnz	r3, a91a <hl7800_TX_locked+0xa>
		return true;
    a916:	2001      	movs	r0, #1
    a918:	4770      	bx	lr
	} else {
		return false;
    a91a:	2000      	movs	r0, #0
	}
}
    a91c:	4770      	bx	lr
    a91e:	bf00      	nop
    a920:	20000554 	.word	0x20000554

0000a924 <socket_get>:
static struct hl7800_socket *socket_get(void)
{
	int i;
	struct hl7800_socket *sock = NULL;

	for (i = 0; i < MDM_MAX_SOCKETS; i++) {
    a924:	2300      	movs	r3, #0
    a926:	2b05      	cmp	r3, #5
    a928:	dc0e      	bgt.n	a948 <socket_get+0x24>
		if (!ictx.sockets[i].context) {
    a92a:	4a08      	ldr	r2, [pc, #32]	; (a94c <socket_get+0x28>)
    a92c:	21a8      	movs	r1, #168	; 0xa8
    a92e:	fb01 2203 	mla	r2, r1, r3, r2
    a932:	f8d2 20e8 	ldr.w	r2, [r2, #232]	; 0xe8
    a936:	b10a      	cbz	r2, a93c <socket_get+0x18>
	for (i = 0; i < MDM_MAX_SOCKETS; i++) {
    a938:	3301      	adds	r3, #1
    a93a:	e7f4      	b.n	a926 <socket_get+0x2>
			sock = &ictx.sockets[i];
    a93c:	fb01 f003 	mul.w	r0, r1, r3
    a940:	30e8      	adds	r0, #232	; 0xe8
    a942:	4b02      	ldr	r3, [pc, #8]	; (a94c <socket_get+0x28>)
    a944:	4418      	add	r0, r3
			break;
    a946:	4770      	bx	lr
	struct hl7800_socket *sock = NULL;
    a948:	2000      	movs	r0, #0
		}
	}

	return sock;
}
    a94a:	4770      	bx	lr
    a94c:	20000e70 	.word	0x20000e70

0000a950 <socket_from_id>:
static struct hl7800_socket *socket_from_id(int socket_id)
{
	int i;
	struct hl7800_socket *sock = NULL;

	if (socket_id < 1) {
    a950:	2800      	cmp	r0, #0
    a952:	dd14      	ble.n	a97e <socket_from_id+0x2e>
		return NULL;
	}

	for (i = 0; i < MDM_MAX_SOCKETS; i++) {
    a954:	2300      	movs	r3, #0
    a956:	2b05      	cmp	r3, #5
    a958:	dc0f      	bgt.n	a97a <socket_from_id+0x2a>
		if (ictx.sockets[i].socket_id == socket_id) {
    a95a:	4a0a      	ldr	r2, [pc, #40]	; (a984 <socket_from_id+0x34>)
    a95c:	21a8      	movs	r1, #168	; 0xa8
    a95e:	fb01 2203 	mla	r2, r1, r3, r2
    a962:	f8d2 2104 	ldr.w	r2, [r2, #260]	; 0x104
    a966:	4282      	cmp	r2, r0
    a968:	d001      	beq.n	a96e <socket_from_id+0x1e>
	for (i = 0; i < MDM_MAX_SOCKETS; i++) {
    a96a:	3301      	adds	r3, #1
    a96c:	e7f3      	b.n	a956 <socket_from_id+0x6>
			sock = &ictx.sockets[i];
    a96e:	fb01 f003 	mul.w	r0, r1, r3
    a972:	30e8      	adds	r0, #232	; 0xe8
    a974:	4b03      	ldr	r3, [pc, #12]	; (a984 <socket_from_id+0x34>)
    a976:	4418      	add	r0, r3
			break;
    a978:	4770      	bx	lr
	struct hl7800_socket *sock = NULL;
    a97a:	2000      	movs	r0, #0
    a97c:	4770      	bx	lr
		return NULL;
    a97e:	2000      	movs	r0, #0
		}
	}

	return sock;
}
    a980:	4770      	bx	lr
    a982:	bf00      	nop
    a984:	20000e70 	.word	0x20000e70

0000a988 <modem_assert_wake>:
{
	ictx.cts_callback = func;
}

static void modem_assert_wake(bool assert)
{
    a988:	b510      	push	{r4, lr}
	int state;

	if (assert) {
    a98a:	b160      	cbz	r0, a9a6 <modem_assert_wake+0x1e>
		HL7800_IO_DBG_LOG("MDM_WAKE_PIN -> ASSERTED");
		state = 1;
    a98c:	2401      	movs	r4, #1
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
    a98e:	4622      	mov	r2, r4
    a990:	210d      	movs	r1, #13
    a992:	4806      	ldr	r0, [pc, #24]	; (a9ac <modem_assert_wake+0x24>)
    a994:	f012 ff3c 	bl	1d810 <gpio_pin_set>
		state = 0;
	}

	gpio_pin_set_dt(&hl7800_cfg.gpio[MDM_WAKE], state);

	if (ictx.wake_up_callback != NULL) {
    a998:	4b05      	ldr	r3, [pc, #20]	; (a9b0 <modem_assert_wake+0x28>)
    a99a:	f8d3 3ca4 	ldr.w	r3, [r3, #3236]	; 0xca4
    a99e:	b10b      	cbz	r3, a9a4 <modem_assert_wake+0x1c>
		ictx.wake_up_callback(state);
    a9a0:	4620      	mov	r0, r4
    a9a2:	4798      	blx	r3
	}
}
    a9a4:	bd10      	pop	{r4, pc}
		state = 0;
    a9a6:	2400      	movs	r4, #0
    a9a8:	e7f1      	b.n	a98e <modem_assert_wake+0x6>
    a9aa:	bf00      	nop
    a9ac:	000207cc 	.word	0x000207cc
    a9b0:	20000e70 	.word	0x20000e70

0000a9b4 <modem_assert_pwr_on>:

static void modem_assert_pwr_on(bool assert)
{
    a9b4:	b508      	push	{r3, lr}
	if (assert) {
    a9b6:	b128      	cbz	r0, a9c4 <modem_assert_pwr_on+0x10>
    a9b8:	2201      	movs	r2, #1
    a9ba:	2102      	movs	r1, #2
    a9bc:	4804      	ldr	r0, [pc, #16]	; (a9d0 <modem_assert_pwr_on+0x1c>)
    a9be:	f012 ff27 	bl	1d810 <gpio_pin_set>
		gpio_pin_set_dt(&hl7800_cfg.gpio[MDM_PWR_ON], 1);
	} else {
		HL7800_IO_DBG_LOG("MDM_PWR_ON -> NOT_ASSERTED");
		gpio_pin_set_dt(&hl7800_cfg.gpio[MDM_PWR_ON], 0);
	}
}
    a9c2:	bd08      	pop	{r3, pc}
    a9c4:	2200      	movs	r2, #0
    a9c6:	2102      	movs	r1, #2
    a9c8:	4801      	ldr	r0, [pc, #4]	; (a9d0 <modem_assert_pwr_on+0x1c>)
    a9ca:	f012 ff21 	bl	1d810 <gpio_pin_set>
    a9ce:	e7f8      	b.n	a9c2 <modem_assert_pwr_on+0xe>
    a9d0:	000207cc 	.word	0x000207cc

0000a9d4 <modem_assert_fast_shutd>:

static void modem_assert_fast_shutd(bool assert)
{
    a9d4:	b508      	push	{r3, lr}
	if (assert) {
    a9d6:	b128      	cbz	r0, a9e4 <modem_assert_fast_shutd+0x10>
    a9d8:	2201      	movs	r2, #1
    a9da:	210e      	movs	r1, #14
    a9dc:	4804      	ldr	r0, [pc, #16]	; (a9f0 <modem_assert_fast_shutd+0x1c>)
    a9de:	f012 ff17 	bl	1d810 <gpio_pin_set>
		gpio_pin_set_dt(&hl7800_cfg.gpio[MDM_FAST_SHUTD], 1);
	} else {
		HL7800_IO_DBG_LOG("MDM_FAST_SHUTD -> NOT_ASSERTED");
		gpio_pin_set_dt(&hl7800_cfg.gpio[MDM_FAST_SHUTD], 0);
	}
}
    a9e2:	bd08      	pop	{r3, pc}
    a9e4:	2200      	movs	r2, #0
    a9e6:	210e      	movs	r1, #14
    a9e8:	4801      	ldr	r0, [pc, #4]	; (a9f0 <modem_assert_fast_shutd+0x1c>)
    a9ea:	f012 ff11 	bl	1d810 <gpio_pin_set>
    a9ee:	e7f8      	b.n	a9e2 <modem_assert_fast_shutd+0xe>
    a9f0:	000207cc 	.word	0x000207cc

0000a9f4 <get_startup_state_string>:
}

static char *get_startup_state_string(enum mdm_hl7800_startup_state state)
{
	/* clang-format off */
	switch (state) {
    a9f4:	2806      	cmp	r0, #6
    a9f6:	d811      	bhi.n	aa1c <get_startup_state_string+0x28>
    a9f8:	e8df f000 	tbb	[pc, r0]
    a9fc:	08061204 	.word	0x08061204
    aa00:	0c0a      	.short	0x0c0a
    aa02:	0e          	.byte	0x0e
    aa03:	00          	.byte	0x00
    aa04:	4807      	ldr	r0, [pc, #28]	; (aa24 <get_startup_state_string+0x30>)
    aa06:	4770      	bx	lr
		PREFIXED_SWITCH_CASE_RETURN_STRING(HL7800_STARTUP_STATE, READY);
		PREFIXED_SWITCH_CASE_RETURN_STRING(HL7800_STARTUP_STATE, WAITING_FOR_ACCESS_CODE);
		PREFIXED_SWITCH_CASE_RETURN_STRING(HL7800_STARTUP_STATE, SIM_NOT_PRESENT);
    aa08:	4807      	ldr	r0, [pc, #28]	; (aa28 <get_startup_state_string+0x34>)
    aa0a:	4770      	bx	lr
		PREFIXED_SWITCH_CASE_RETURN_STRING(HL7800_STARTUP_STATE, SIMLOCK);
    aa0c:	4807      	ldr	r0, [pc, #28]	; (aa2c <get_startup_state_string+0x38>)
    aa0e:	4770      	bx	lr
		PREFIXED_SWITCH_CASE_RETURN_STRING(HL7800_STARTUP_STATE, UNRECOVERABLE_ERROR);
    aa10:	4807      	ldr	r0, [pc, #28]	; (aa30 <get_startup_state_string+0x3c>)
    aa12:	4770      	bx	lr
		PREFIXED_SWITCH_CASE_RETURN_STRING(HL7800_STARTUP_STATE, UNKNOWN);
    aa14:	4807      	ldr	r0, [pc, #28]	; (aa34 <get_startup_state_string+0x40>)
    aa16:	4770      	bx	lr
		PREFIXED_SWITCH_CASE_RETURN_STRING(HL7800_STARTUP_STATE, INACTIVE_SIM);
    aa18:	4807      	ldr	r0, [pc, #28]	; (aa38 <get_startup_state_string+0x44>)
    aa1a:	4770      	bx	lr
	default:
		return "UNKNOWN";
    aa1c:	4805      	ldr	r0, [pc, #20]	; (aa34 <get_startup_state_string+0x40>)
    aa1e:	4770      	bx	lr
		PREFIXED_SWITCH_CASE_RETURN_STRING(HL7800_STARTUP_STATE, WAITING_FOR_ACCESS_CODE);
    aa20:	4806      	ldr	r0, [pc, #24]	; (aa3c <get_startup_state_string+0x48>)
	}
	/* clang-format on */
}
    aa22:	4770      	bx	lr
    aa24:	00021888 	.word	0x00021888
    aa28:	000218a8 	.word	0x000218a8
    aa2c:	000218b8 	.word	0x000218b8
    aa30:	000218c0 	.word	0x000218c0
    aa34:	000218d4 	.word	0x000218d4
    aa38:	000218dc 	.word	0x000218dc
    aa3c:	00021890 	.word	0x00021890

0000aa40 <get_sleep_state_string>:
#endif /* CONFIG_MODEM_HL7800_LOW_POWER_MODE */

static char *get_sleep_state_string(enum mdm_hl7800_sleep state)
{
	/* clang-format off */
	switch (state) {
    aa40:	2804      	cmp	r0, #4
    aa42:	d80c      	bhi.n	aa5e <get_sleep_state_string+0x1e>
    aa44:	e8df f000 	tbb	[pc, r0]
    aa48:	05090d03 	.word	0x05090d03
    aa4c:	07          	.byte	0x07
    aa4d:	00          	.byte	0x00
    aa4e:	4806      	ldr	r0, [pc, #24]	; (aa68 <get_sleep_state_string+0x28>)
    aa50:	4770      	bx	lr
		PREFIXED_SWITCH_CASE_RETURN_STRING(HL7800_SLEEP, UNINITIALIZED);
		PREFIXED_SWITCH_CASE_RETURN_STRING(HL7800_SLEEP, HIBERNATE);
		PREFIXED_SWITCH_CASE_RETURN_STRING(HL7800_SLEEP, LITE_HIBERNATE);
    aa52:	4806      	ldr	r0, [pc, #24]	; (aa6c <get_sleep_state_string+0x2c>)
    aa54:	4770      	bx	lr
		PREFIXED_SWITCH_CASE_RETURN_STRING(HL7800_SLEEP, SLEEP);
    aa56:	4806      	ldr	r0, [pc, #24]	; (aa70 <get_sleep_state_string+0x30>)
    aa58:	4770      	bx	lr
		PREFIXED_SWITCH_CASE_RETURN_STRING(HL7800_SLEEP, AWAKE);
    aa5a:	4806      	ldr	r0, [pc, #24]	; (aa74 <get_sleep_state_string+0x34>)
    aa5c:	4770      	bx	lr
	default:
		return "UNKNOWN";
    aa5e:	4806      	ldr	r0, [pc, #24]	; (aa78 <get_sleep_state_string+0x38>)
    aa60:	4770      	bx	lr
		PREFIXED_SWITCH_CASE_RETURN_STRING(HL7800_SLEEP, HIBERNATE);
    aa62:	4806      	ldr	r0, [pc, #24]	; (aa7c <get_sleep_state_string+0x3c>)
	}
	/* clang-format on */
}
    aa64:	4770      	bx	lr
    aa66:	bf00      	nop
    aa68:	000218ec 	.word	0x000218ec
    aa6c:	00021908 	.word	0x00021908
    aa70:	00021918 	.word	0x00021918
    aa74:	00021920 	.word	0x00021920
    aa78:	000218d4 	.word	0x000218d4
    aa7c:	000218fc 	.word	0x000218fc

0000aa80 <get_fota_state_string>:

#ifdef CONFIG_MODEM_HL7800_FW_UPDATE
static char *get_fota_state_string(enum mdm_hl7800_fota_state state)
{
	/* clang-format off */
	switch (state) {
    aa80:	2808      	cmp	r0, #8
    aa82:	d816      	bhi.n	aab2 <get_fota_state_string+0x32>
    aa84:	e8df f000 	tbb	[pc, r0]
    aa88:	09071705 	.word	0x09071705
    aa8c:	110f0d0b 	.word	0x110f0d0b
    aa90:	13          	.byte	0x13
    aa91:	00          	.byte	0x00
    aa92:	480a      	ldr	r0, [pc, #40]	; (aabc <get_fota_state_string+0x3c>)
    aa94:	4770      	bx	lr
		PREFIXED_SWITCH_CASE_RETURN_STRING(HL7800_FOTA, IDLE);
		PREFIXED_SWITCH_CASE_RETURN_STRING(HL7800_FOTA, START);
		PREFIXED_SWITCH_CASE_RETURN_STRING(HL7800_FOTA, WIP);
    aa96:	480a      	ldr	r0, [pc, #40]	; (aac0 <get_fota_state_string+0x40>)
    aa98:	4770      	bx	lr
		PREFIXED_SWITCH_CASE_RETURN_STRING(HL7800_FOTA, PAD);
    aa9a:	480a      	ldr	r0, [pc, #40]	; (aac4 <get_fota_state_string+0x44>)
    aa9c:	4770      	bx	lr
		PREFIXED_SWITCH_CASE_RETURN_STRING(HL7800_FOTA, SEND_EOT);
    aa9e:	480a      	ldr	r0, [pc, #40]	; (aac8 <get_fota_state_string+0x48>)
    aaa0:	4770      	bx	lr
		PREFIXED_SWITCH_CASE_RETURN_STRING(HL7800_FOTA, FILE_ERROR);
    aaa2:	480a      	ldr	r0, [pc, #40]	; (aacc <get_fota_state_string+0x4c>)
    aaa4:	4770      	bx	lr
		PREFIXED_SWITCH_CASE_RETURN_STRING(HL7800_FOTA, INSTALL);
    aaa6:	480a      	ldr	r0, [pc, #40]	; (aad0 <get_fota_state_string+0x50>)
    aaa8:	4770      	bx	lr
		PREFIXED_SWITCH_CASE_RETURN_STRING(HL7800_FOTA, REBOOT_AND_RECONFIGURE);
    aaaa:	480a      	ldr	r0, [pc, #40]	; (aad4 <get_fota_state_string+0x54>)
    aaac:	4770      	bx	lr
		PREFIXED_SWITCH_CASE_RETURN_STRING(HL7800_FOTA, COMPLETE);
    aaae:	480a      	ldr	r0, [pc, #40]	; (aad8 <get_fota_state_string+0x58>)
    aab0:	4770      	bx	lr
	default:
		return "UNKNOWN";
    aab2:	480a      	ldr	r0, [pc, #40]	; (aadc <get_fota_state_string+0x5c>)
    aab4:	4770      	bx	lr
		PREFIXED_SWITCH_CASE_RETURN_STRING(HL7800_FOTA, START);
    aab6:	480a      	ldr	r0, [pc, #40]	; (aae0 <get_fota_state_string+0x60>)
	}
	/* clang-format on */
}
    aab8:	4770      	bx	lr
    aaba:	bf00      	nop
    aabc:	00021928 	.word	0x00021928
    aac0:	00021938 	.word	0x00021938
    aac4:	0002193c 	.word	0x0002193c
    aac8:	00021940 	.word	0x00021940
    aacc:	0002194c 	.word	0x0002194c
    aad0:	00021958 	.word	0x00021958
    aad4:	00021960 	.word	0x00021960
    aad8:	00021978 	.word	0x00021978
    aadc:	000218d4 	.word	0x000218d4
    aae0:	00021930 	.word	0x00021930

0000aae4 <notify_all_tcp_sockets_closed>:
	return true;
}
#endif /* CONFIG_MODEM_HL7800_POLTE */

static void notify_all_tcp_sockets_closed(void)
{
    aae4:	b530      	push	{r4, r5, lr}
    aae6:	b083      	sub	sp, #12
	int i;
	struct hl7800_socket *sock = NULL;

	for (i = 0; i < MDM_MAX_SOCKETS; i++) {
    aae8:	2400      	movs	r4, #0
    aaea:	e000      	b.n	aaee <notify_all_tcp_sockets_closed+0xa>
    aaec:	3401      	adds	r4, #1
    aaee:	2c05      	cmp	r4, #5
    aaf0:	dc22      	bgt.n	ab38 <notify_all_tcp_sockets_closed+0x54>
		sock = &ictx.sockets[i];
		if ((sock->context != NULL) && (sock->type == SOCK_STREAM)) {
    aaf2:	4b12      	ldr	r3, [pc, #72]	; (ab3c <notify_all_tcp_sockets_closed+0x58>)
    aaf4:	22a8      	movs	r2, #168	; 0xa8
    aaf6:	fb02 3304 	mla	r3, r2, r4, r3
    aafa:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
    aafe:	2800      	cmp	r0, #0
    ab00:	d0f4      	beq.n	aaec <notify_all_tcp_sockets_closed+0x8>
    ab02:	4b0e      	ldr	r3, [pc, #56]	; (ab3c <notify_all_tcp_sockets_closed+0x58>)
    ab04:	fb02 3304 	mla	r3, r2, r4, r3
    ab08:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
    ab0c:	2b01      	cmp	r3, #1
    ab0e:	d1ed      	bne.n	aaec <notify_all_tcp_sockets_closed+0x8>
			LOG_DBG("Sock %d closed", sock->socket_id);
			/* signal RX callback with null packet */
			if (sock->recv_cb) {
    ab10:	4b0a      	ldr	r3, [pc, #40]	; (ab3c <notify_all_tcp_sockets_closed+0x58>)
    ab12:	fb02 3304 	mla	r3, r2, r4, r3
    ab16:	f8d3 5180 	ldr.w	r5, [r3, #384]	; 0x180
    ab1a:	2d00      	cmp	r5, #0
    ab1c:	d0e6      	beq.n	aaec <notify_all_tcp_sockets_closed+0x8>
				sock->recv_cb(sock->context, sock->recv_pkt,
    ab1e:	4907      	ldr	r1, [pc, #28]	; (ab3c <notify_all_tcp_sockets_closed+0x58>)
    ab20:	fb02 1104 	mla	r1, r2, r4, r1
    ab24:	f8d1 3188 	ldr.w	r3, [r1, #392]	; 0x188
    ab28:	9301      	str	r3, [sp, #4]
    ab2a:	2200      	movs	r2, #0
    ab2c:	9200      	str	r2, [sp, #0]
    ab2e:	4613      	mov	r3, r2
    ab30:	f8d1 1184 	ldr.w	r1, [r1, #388]	; 0x184
    ab34:	47a8      	blx	r5
    ab36:	e7d9      	b.n	aaec <notify_all_tcp_sockets_closed+0x8>
					      NULL, NULL, 0,
					      sock->recv_user_data);
			}
		}
	}
}
    ab38:	b003      	add	sp, #12
    ab3a:	bd30      	pop	{r4, r5, pc}
    ab3c:	20000e70 	.word	0x20000e70

0000ab40 <get_network_state_string>:
	hl7800_unlock();
}

static char *get_network_state_string(enum mdm_hl7800_network_state state)
{
	switch (state) {
    ab40:	2808      	cmp	r0, #8
    ab42:	d80a      	bhi.n	ab5a <get_network_state_string+0x1a>
    ab44:	2808      	cmp	r0, #8
    ab46:	d816      	bhi.n	ab76 <get_network_state_string+0x36>
    ab48:	e8df f000 	tbb	[pc, r0]
    ab4c:	0d0b1705 	.word	0x0d0b1705
    ab50:	1515110f 	.word	0x1515110f
    ab54:	13          	.byte	0x13
    ab55:	00          	.byte	0x00
    ab56:	480b      	ldr	r0, [pc, #44]	; (ab84 <get_network_state_string+0x44>)
    ab58:	4770      	bx	lr
    ab5a:	28f0      	cmp	r0, #240	; 0xf0
    ab5c:	d10f      	bne.n	ab7e <get_network_state_string+0x3e>
		PREFIXED_SWITCH_CASE_RETURN_STRING(HL7800, SEARCHING);
		PREFIXED_SWITCH_CASE_RETURN_STRING(HL7800, REGISTRATION_DENIED);
		PREFIXED_SWITCH_CASE_RETURN_STRING(HL7800, OUT_OF_COVERAGE);
		PREFIXED_SWITCH_CASE_RETURN_STRING(HL7800, ROAMING);
		PREFIXED_SWITCH_CASE_RETURN_STRING(HL7800, EMERGENCY);
		PREFIXED_SWITCH_CASE_RETURN_STRING(HL7800, UNABLE_TO_CONFIGURE);
    ab5e:	480a      	ldr	r0, [pc, #40]	; (ab88 <get_network_state_string+0x48>)
    ab60:	4770      	bx	lr
		PREFIXED_SWITCH_CASE_RETURN_STRING(HL7800, SEARCHING);
    ab62:	480a      	ldr	r0, [pc, #40]	; (ab8c <get_network_state_string+0x4c>)
    ab64:	4770      	bx	lr
		PREFIXED_SWITCH_CASE_RETURN_STRING(HL7800, REGISTRATION_DENIED);
    ab66:	480a      	ldr	r0, [pc, #40]	; (ab90 <get_network_state_string+0x50>)
    ab68:	4770      	bx	lr
		PREFIXED_SWITCH_CASE_RETURN_STRING(HL7800, OUT_OF_COVERAGE);
    ab6a:	480a      	ldr	r0, [pc, #40]	; (ab94 <get_network_state_string+0x54>)
    ab6c:	4770      	bx	lr
		PREFIXED_SWITCH_CASE_RETURN_STRING(HL7800, ROAMING);
    ab6e:	480a      	ldr	r0, [pc, #40]	; (ab98 <get_network_state_string+0x58>)
    ab70:	4770      	bx	lr
		PREFIXED_SWITCH_CASE_RETURN_STRING(HL7800, EMERGENCY);
    ab72:	480a      	ldr	r0, [pc, #40]	; (ab9c <get_network_state_string+0x5c>)
    ab74:	4770      	bx	lr
	default:
		return "UNKNOWN";
    ab76:	480a      	ldr	r0, [pc, #40]	; (aba0 <get_network_state_string+0x60>)
    ab78:	4770      	bx	lr
		PREFIXED_SWITCH_CASE_RETURN_STRING(HL7800, HOME_NETWORK);
    ab7a:	480a      	ldr	r0, [pc, #40]	; (aba4 <get_network_state_string+0x64>)
    ab7c:	4770      	bx	lr
		return "UNKNOWN";
    ab7e:	4808      	ldr	r0, [pc, #32]	; (aba0 <get_network_state_string+0x60>)
	}
}
    ab80:	4770      	bx	lr
    ab82:	bf00      	nop
    ab84:	000219ec 	.word	0x000219ec
    ab88:	000219d8 	.word	0x000219d8
    ab8c:	00021994 	.word	0x00021994
    ab90:	000219a0 	.word	0x000219a0
    ab94:	000219b4 	.word	0x000219b4
    ab98:	000219c4 	.word	0x000219c4
    ab9c:	000219cc 	.word	0x000219cc
    aba0:	000218d4 	.word	0x000218d4
    aba4:	00021984 	.word	0x00021984

0000aba8 <valid_time_string>:
{
	size_t offset, i;

	/* Ensure the all the expected delimiters are present */
	offset = TIME_STRING_DIGIT_STRLEN + TIME_STRING_SEPARATOR_STRLEN;
	i = TIME_STRING_FIRST_SEPARATOR_INDEX;
    aba8:	2300      	movs	r3, #0

	for (; i < TIME_STRING_PLUS_MINUS_INDEX; i += offset) {
    abaa:	2b11      	cmp	r3, #17
    abac:	d806      	bhi.n	abbc <valid_time_string+0x14>
		if (time_string[i] != TIME_STRING_FORMAT[i]) {
    abae:	5cc1      	ldrb	r1, [r0, r3]
    abb0:	4a0b      	ldr	r2, [pc, #44]	; (abe0 <valid_time_string+0x38>)
    abb2:	5cd2      	ldrb	r2, [r2, r3]
    abb4:	4291      	cmp	r1, r2
    abb6:	d10e      	bne.n	abd6 <valid_time_string+0x2e>
	for (; i < TIME_STRING_PLUS_MINUS_INDEX; i += offset) {
    abb8:	3303      	adds	r3, #3
    abba:	e7f6      	b.n	abaa <valid_time_string+0x2>
		}
	}
	/* The last character is the offset from UTC and can be either
	 * positive or negative.  The last " is also handled here.
	 */
	if ((time_string[i] == '+' || time_string[i] == '-') &&
    abbc:	5cc2      	ldrb	r2, [r0, r3]
    abbe:	2a2b      	cmp	r2, #43	; 0x2b
    abc0:	d003      	beq.n	abca <valid_time_string+0x22>
    abc2:	2a2d      	cmp	r2, #45	; 0x2d
    abc4:	d001      	beq.n	abca <valid_time_string+0x22>
	    (time_string[i + offset] == '"')) {
		return true;
	}
	return false;
    abc6:	2000      	movs	r0, #0
    abc8:	4770      	bx	lr
	    (time_string[i + offset] == '"')) {
    abca:	3303      	adds	r3, #3
    abcc:	5cc3      	ldrb	r3, [r0, r3]
	if ((time_string[i] == '+' || time_string[i] == '-') &&
    abce:	2b22      	cmp	r3, #34	; 0x22
    abd0:	d003      	beq.n	abda <valid_time_string+0x32>
	return false;
    abd2:	2000      	movs	r0, #0
    abd4:	4770      	bx	lr
			return false;
    abd6:	2000      	movs	r0, #0
    abd8:	4770      	bx	lr
		return true;
    abda:	2001      	movs	r0, #1
}
    abdc:	4770      	bx	lr
    abde:	bf00      	nop
    abe0:	0002213c 	.word	0x0002213c

0000abe4 <prepare_io_for_reset>:
#endif
}

/* Make sure all IO voltages are removed for proper reset. */
static void prepare_io_for_reset(void)
{
    abe4:	b508      	push	{r3, lr}
	HL7800_IO_DBG_LOG("Preparing IO for reset/sleep");
	shutdown_uart();
	modem_assert_wake(false);
    abe6:	2000      	movs	r0, #0
    abe8:	f7ff fece 	bl	a988 <modem_assert_wake>
	modem_assert_pwr_on(false);
    abec:	2000      	movs	r0, #0
    abee:	f7ff fee1 	bl	a9b4 <modem_assert_pwr_on>
	modem_assert_fast_shutd(false);
    abf2:	2000      	movs	r0, #0
    abf4:	f7ff feee 	bl	a9d4 <modem_assert_fast_shutd>
	ictx.wait_for_KSUP = true;
    abf8:	4b02      	ldr	r3, [pc, #8]	; (ac04 <prepare_io_for_reset+0x20>)
    abfa:	2201      	movs	r2, #1
    abfc:	779a      	strb	r2, [r3, #30]
	ictx.wait_for_KSUP_tries = 0;
    abfe:	2200      	movs	r2, #0
    ac00:	621a      	str	r2, [r3, #32]
}
    ac02:	bd08      	pop	{r3, pc}
    ac04:	20000e70 	.word	0x20000e70

0000ac08 <mdm_uart_dsr_callback_isr>:
	k_work_submit_to_queue(&hl7800_workq, &ictx.mdm_vgpio_work);
}

void mdm_uart_dsr_callback_isr(const struct device *port,
			       struct gpio_callback *cb, uint32_t pins)
{
    ac08:	b508      	push	{r3, lr}
	ictx.dsr_state = read_pin(1, &hl7800_cfg.gpio[MDM_UART_DSR]);
    ac0a:	4904      	ldr	r1, [pc, #16]	; (ac1c <mdm_uart_dsr_callback_isr+0x14>)
    ac0c:	2001      	movs	r0, #1
    ac0e:	f012 fe1a 	bl	1d846 <read_pin>
    ac12:	4b03      	ldr	r3, [pc, #12]	; (ac20 <mdm_uart_dsr_callback_isr+0x18>)
    ac14:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
	HL7800_IO_DBG_LOG("MDM_UART_DSR:%d", ictx.dsr_state);
}
    ac18:	bd08      	pop	{r3, pc}
    ac1a:	bf00      	nop
    ac1c:	000220f4 	.word	0x000220f4
    ac20:	20000e70 	.word	0x20000e70

0000ac24 <hl7800_TX_lock>:
{
    ac24:	b508      	push	{r3, lr}
	return z_impl_k_sem_take(sem, timeout);
    ac26:	f04f 32ff 	mov.w	r2, #4294967295
    ac2a:	f04f 33ff 	mov.w	r3, #4294967295
    ac2e:	4802      	ldr	r0, [pc, #8]	; (ac38 <hl7800_TX_lock+0x14>)
    ac30:	f006 fb16 	bl	11260 <z_impl_k_sem_take>
}
    ac34:	bd08      	pop	{r3, pc}
    ac36:	bf00      	nop
    ac38:	20000554 	.word	0x20000554

0000ac3c <hl7800_RX_lock>:
{
    ac3c:	b508      	push	{r3, lr}
    ac3e:	f04f 32ff 	mov.w	r2, #4294967295
    ac42:	f04f 33ff 	mov.w	r3, #4294967295
    ac46:	4802      	ldr	r0, [pc, #8]	; (ac50 <hl7800_RX_lock+0x14>)
    ac48:	f006 fb0a 	bl	11260 <z_impl_k_sem_take>
}
    ac4c:	bd08      	pop	{r3, pc}
    ac4e:	bf00      	nop
    ac50:	2000053c 	.word	0x2000053c

0000ac54 <send_at_cmd>:
{
    ac54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ac58:	4605      	mov	r5, r0
    ac5a:	4688      	mov	r8, r1
    ac5c:	4692      	mov	sl, r2
    ac5e:	4699      	mov	r9, r3
    ac60:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    ac62:	f89d b02c 	ldrb.w	fp, [sp, #44]	; 0x2c
	ictx.last_error = 0;
    ac66:	2400      	movs	r4, #0
    ac68:	4b32      	ldr	r3, [pc, #200]	; (ad34 <send_at_cmd+0xe0>)
    ac6a:	f8c3 44dc 	str.w	r4, [r3, #1244]	; 0x4dc
    ac6e:	e026      	b.n	acbe <send_at_cmd+0x6a>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_RESET);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_reset(sem);
    ac70:	4f31      	ldr	r7, [pc, #196]	; (ad38 <send_at_cmd+0xe4>)
    ac72:	4638      	mov	r0, r7
    ac74:	f006 fb1c 	bl	112b0 <z_impl_k_sem_reset>
			ictx.last_socket_id = 0;
    ac78:	2300      	movs	r3, #0
    ac7a:	f847 3c50 	str.w	r3, [r7, #-80]
    ac7e:	e02a      	b.n	acd6 <send_at_cmd+0x82>
			strncpy(ictx.no_id_resp_cmd, data,
    ac80:	4f2e      	ldr	r7, [pc, #184]	; (ad3c <send_at_cmd+0xe8>)
    ac82:	221f      	movs	r2, #31
    ac84:	4641      	mov	r1, r8
    ac86:	4638      	mov	r0, r7
    ac88:	f015 fa54 	bl	20134 <strncpy>
			ictx.search_no_id_resp = true;
    ac8c:	2301      	movs	r3, #1
    ac8e:	f887 3020 	strb.w	r3, [r7, #32]
    ac92:	e023      	b.n	acdc <send_at_cmd+0x88>
	return z_impl_k_sem_take(sem, timeout);
    ac94:	4652      	mov	r2, sl
    ac96:	464b      	mov	r3, r9
    ac98:	f507 6092 	add.w	r0, r7, #1168	; 0x490
    ac9c:	f006 fae0 	bl	11260 <z_impl_k_sem_take>
    aca0:	4604      	mov	r4, r0
    aca2:	e035      	b.n	ad10 <send_at_cmd+0xbc>
				ret = ictx.last_error;
    aca4:	4b23      	ldr	r3, [pc, #140]	; (ad34 <send_at_cmd+0xe0>)
    aca6:	f8d3 44dc 	ldr.w	r4, [r3, #1244]	; 0x4dc
    acaa:	e002      	b.n	acb2 <send_at_cmd+0x5e>
		} else if (ret == -EAGAIN) {
    acac:	f114 0f0b 	cmn.w	r4, #11
    acb0:	d034      	beq.n	ad1c <send_at_cmd+0xc8>
		if (retries < 0) {
    acb2:	3e01      	subs	r6, #1
    acb4:	d435      	bmi.n	ad22 <send_at_cmd+0xce>
	} while (ret != 0 && retries > 0);
    acb6:	2c00      	cmp	r4, #0
    acb8:	d035      	beq.n	ad26 <send_at_cmd+0xd2>
    acba:	2e00      	cmp	r6, #0
    acbc:	dd33      	ble.n	ad26 <send_at_cmd+0xd2>
		if (!sock) {
    acbe:	2d00      	cmp	r5, #0
    acc0:	d0d6      	beq.n	ac70 <send_at_cmd+0x1c>
			sock->error = 0;
    acc2:	2300      	movs	r3, #0
    acc4:	626b      	str	r3, [r5, #36]	; 0x24
			k_sem_reset(&sock->sock_send_sem);
    acc6:	f105 002c 	add.w	r0, r5, #44	; 0x2c
	z_impl_k_sem_reset(sem);
    acca:	f006 faf1 	bl	112b0 <z_impl_k_sem_reset>
			ictx.last_socket_id = sock->socket_id;
    acce:	69ea      	ldr	r2, [r5, #28]
    acd0:	4b18      	ldr	r3, [pc, #96]	; (ad34 <send_at_cmd+0xe0>)
    acd2:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
		if (no_id_resp) {
    acd6:	f1bb 0f00 	cmp.w	fp, #0
    acda:	d1d1      	bne.n	ac80 <send_at_cmd+0x2c>
		mdm_receiver_send(&ictx.mdm_ctx, data, strlen(data));
    acdc:	4640      	mov	r0, r8
    acde:	f7f6 f867 	bl	db0 <strlen>
    ace2:	4602      	mov	r2, r0
    ace4:	4f16      	ldr	r7, [pc, #88]	; (ad40 <send_at_cmd+0xec>)
    ace6:	4641      	mov	r1, r8
    ace8:	4638      	mov	r0, r7
    acea:	f012 fcdc 	bl	1d6a6 <mdm_receiver_send>
		mdm_receiver_send(&ictx.mdm_ctx, "\r", 1);
    acee:	2201      	movs	r2, #1
    acf0:	4914      	ldr	r1, [pc, #80]	; (ad44 <send_at_cmd+0xf0>)
    acf2:	4638      	mov	r0, r7
    acf4:	f012 fcd7 	bl	1d6a6 <mdm_receiver_send>
		if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    acf8:	ea59 030a 	orrs.w	r3, r9, sl
    acfc:	d013      	beq.n	ad26 <send_at_cmd+0xd2>
		if (!sock) {
    acfe:	2d00      	cmp	r5, #0
    ad00:	d0c8      	beq.n	ac94 <send_at_cmd+0x40>
			ret = k_sem_take(&sock->sock_send_sem, timeout);
    ad02:	f105 002c 	add.w	r0, r5, #44	; 0x2c
	return z_impl_k_sem_take(sem, timeout);
    ad06:	4652      	mov	r2, sl
    ad08:	464b      	mov	r3, r9
    ad0a:	f006 faa9 	bl	11260 <z_impl_k_sem_take>
    ad0e:	4604      	mov	r4, r0
		if (ret == 0) {
    ad10:	2c00      	cmp	r4, #0
    ad12:	d1cb      	bne.n	acac <send_at_cmd+0x58>
			if (sock) {
    ad14:	2d00      	cmp	r5, #0
    ad16:	d0c5      	beq.n	aca4 <send_at_cmd+0x50>
				ret = sock->error;
    ad18:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    ad1a:	e7ca      	b.n	acb2 <send_at_cmd+0x5e>
			ret = -ETIMEDOUT;
    ad1c:	f06f 0473 	mvn.w	r4, #115	; 0x73
    ad20:	e7c7      	b.n	acb2 <send_at_cmd+0x5e>
			retries = 0;
    ad22:	2600      	movs	r6, #0
    ad24:	e7c7      	b.n	acb6 <send_at_cmd+0x62>
	ictx.search_no_id_resp = false;
    ad26:	4b03      	ldr	r3, [pc, #12]	; (ad34 <send_at_cmd+0xe0>)
    ad28:	2200      	movs	r2, #0
    ad2a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
}
    ad2e:	4620      	mov	r0, r4
    ad30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ad34:	20000e70 	.word	0x20000e70
    ad38:	20001398 	.word	0x20001398
    ad3c:	20000ea5 	.word	0x20000ea5
    ad40:	20000f08 	.word	0x20000f08
    ad44:	000219fc 	.word	0x000219fc

0000ad48 <modem_boot_handler>:
	k_sleep(MDM_RESET_HIGH_TIME);
	allow_sleep(false);
}

static int modem_boot_handler(char *reason)
{
    ad48:	b510      	push	{r4, lr}
    ad4a:	b082      	sub	sp, #8
    ad4c:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
    ad50:	2300      	movs	r3, #0
    ad52:	482c      	ldr	r0, [pc, #176]	; (ae04 <modem_boot_handler+0xbc>)
    ad54:	f006 fa84 	bl	11260 <z_impl_k_sem_take>
	int ret;

	LOG_DBG("%s", reason);
	ret = k_sem_take(&ictx.mdm_awake, MDM_BOOT_TIME);
	if (ret) {
    ad58:	2800      	cmp	r0, #0
    ad5a:	d14f      	bne.n	adfc <modem_boot_handler+0xb4>
    ad5c:	4604      	mov	r4, r0
	}

	/* Turn OFF EPS network registration status reporting because
	 * it isn't needed until after initialization is complete.
	 */
	SEND_AT_CMD_EXPECT_OK("AT+CEREG=0");
    ad5e:	9001      	str	r0, [sp, #4]
    ad60:	2303      	movs	r3, #3
    ad62:	9300      	str	r3, [sp, #0]
    ad64:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    ad68:	2300      	movs	r3, #0
    ad6a:	4927      	ldr	r1, [pc, #156]	; (ae08 <modem_boot_handler+0xc0>)
    ad6c:	f7ff ff72 	bl	ac54 <send_at_cmd>
    ad70:	2800      	cmp	r0, #0
    ad72:	db39      	blt.n	ade8 <modem_boot_handler+0xa0>

	/* Determine if echo is on/off by reading the profile
	 * note: It wasn't clear how to read the
	 * active profile so all 3 are read.
	 */
	ictx.mdm_echo_is_on = true;
    ad74:	4b25      	ldr	r3, [pc, #148]	; (ae0c <modem_boot_handler+0xc4>)
    ad76:	2201      	movs	r2, #1
    ad78:	f883 2b9c 	strb.w	r2, [r3, #2972]	; 0xb9c
	SEND_AT_CMD_EXPECT_OK("AT&V");
    ad7c:	2000      	movs	r0, #0
    ad7e:	9001      	str	r0, [sp, #4]
    ad80:	2303      	movs	r3, #3
    ad82:	9300      	str	r3, [sp, #0]
    ad84:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    ad88:	2300      	movs	r3, #0
    ad8a:	4921      	ldr	r1, [pc, #132]	; (ae10 <modem_boot_handler+0xc8>)
    ad8c:	f7ff ff62 	bl	ac54 <send_at_cmd>
    ad90:	2800      	cmp	r0, #0
    ad92:	db2d      	blt.n	adf0 <modem_boot_handler+0xa8>

	if (ictx.mdm_echo_is_on) {
    ad94:	4b1d      	ldr	r3, [pc, #116]	; (ae0c <modem_boot_handler+0xc4>)
    ad96:	f893 3b9c 	ldrb.w	r3, [r3, #2972]	; 0xb9c
    ad9a:	b333      	cbz	r3, adea <modem_boot_handler+0xa2>
		/* Turn OFF echo (after boot/reset) because a profile
		 * hasn't been saved yet
		 */
		SEND_AT_CMD_EXPECT_OK("ATE0");
    ad9c:	2000      	movs	r0, #0
    ad9e:	9001      	str	r0, [sp, #4]
    ada0:	2303      	movs	r3, #3
    ada2:	9300      	str	r3, [sp, #0]
    ada4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    ada8:	2300      	movs	r3, #0
    adaa:	491a      	ldr	r1, [pc, #104]	; (ae14 <modem_boot_handler+0xcc>)
    adac:	f7ff ff52 	bl	ac54 <send_at_cmd>
    adb0:	2800      	cmp	r0, #0
    adb2:	db1f      	blt.n	adf4 <modem_boot_handler+0xac>

		/* Save profile 0 */
		SEND_AT_CMD_EXPECT_OK("AT&W");
    adb4:	2000      	movs	r0, #0
    adb6:	9001      	str	r0, [sp, #4]
    adb8:	2303      	movs	r3, #3
    adba:	9300      	str	r3, [sp, #0]
    adbc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    adc0:	2300      	movs	r3, #0
    adc2:	4915      	ldr	r1, [pc, #84]	; (ae18 <modem_boot_handler+0xd0>)
    adc4:	f7ff ff46 	bl	ac54 <send_at_cmd>
    adc8:	2800      	cmp	r0, #0
    adca:	db15      	blt.n	adf8 <modem_boot_handler+0xb0>

		/* Reread profiles so echo state can be checked again. */
		SEND_AT_CMD_EXPECT_OK("AT&V");
    adcc:	2000      	movs	r0, #0
    adce:	9001      	str	r0, [sp, #4]
    add0:	2303      	movs	r3, #3
    add2:	9300      	str	r3, [sp, #0]
    add4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    add8:	2300      	movs	r3, #0
    adda:	490d      	ldr	r1, [pc, #52]	; (ae10 <modem_boot_handler+0xc8>)
    addc:	f7ff ff3a 	bl	ac54 <send_at_cmd>
    ade0:	2800      	cmp	r0, #0
    ade2:	da02      	bge.n	adea <modem_boot_handler+0xa2>
    ade4:	4604      	mov	r4, r0
    ade6:	e000      	b.n	adea <modem_boot_handler+0xa2>
	SEND_AT_CMD_EXPECT_OK("AT+CEREG=0");
    ade8:	4604      	mov	r4, r0

	return 0;

error:
	return ret;
}
    adea:	4620      	mov	r0, r4
    adec:	b002      	add	sp, #8
    adee:	bd10      	pop	{r4, pc}
	SEND_AT_CMD_EXPECT_OK("AT&V");
    adf0:	4604      	mov	r4, r0
    adf2:	e7fa      	b.n	adea <modem_boot_handler+0xa2>
		SEND_AT_CMD_EXPECT_OK("ATE0");
    adf4:	4604      	mov	r4, r0
    adf6:	e7f8      	b.n	adea <modem_boot_handler+0xa2>
		SEND_AT_CMD_EXPECT_OK("AT&W");
    adf8:	4604      	mov	r4, r0
    adfa:	e7f6      	b.n	adea <modem_boot_handler+0xa2>
		return -1;
    adfc:	f04f 34ff 	mov.w	r4, #4294967295
    ae00:	e7f3      	b.n	adea <modem_boot_handler+0xa2>
    ae02:	bf00      	nop
    ae04:	200013b0 	.word	0x200013b0
    ae08:	00021a00 	.word	0x00021a00
    ae0c:	20000e70 	.word	0x20000e70
    ae10:	00021a0c 	.word	0x00021a0c
    ae14:	00021a14 	.word	0x00021a14
    ae18:	00021a1c 	.word	0x00021a1c

0000ae1c <hl7800_query_rssi>:
{
    ae1c:	b500      	push	{lr}
    ae1e:	b083      	sub	sp, #12
	ret = send_at_cmd(NULL, "AT+KCELLMEAS=0", MDM_CMD_SEND_TIMEOUT, 1,
    ae20:	2000      	movs	r0, #0
    ae22:	9001      	str	r0, [sp, #4]
    ae24:	2301      	movs	r3, #1
    ae26:	9300      	str	r3, [sp, #0]
    ae28:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    ae2c:	2300      	movs	r3, #0
    ae2e:	4903      	ldr	r1, [pc, #12]	; (ae3c <hl7800_query_rssi+0x20>)
    ae30:	f7ff ff10 	bl	ac54 <send_at_cmd>
}
    ae34:	b003      	add	sp, #12
    ae36:	f85d fb04 	ldr.w	pc, [sp], #4
    ae3a:	bf00      	nop
    ae3c:	00021a24 	.word	0x00021a24

0000ae40 <hl7800_RX_unlock>:
{
    ae40:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
    ae42:	4802      	ldr	r0, [pc, #8]	; (ae4c <hl7800_RX_unlock+0xc>)
    ae44:	f006 f9e4 	bl	11210 <z_impl_k_sem_give>
}
    ae48:	bd08      	pop	{r3, pc}
    ae4a:	bf00      	nop
    ae4c:	2000053c 	.word	0x2000053c

0000ae50 <hl7800_TX_unlock>:
{
    ae50:	b508      	push	{r3, lr}
    ae52:	4802      	ldr	r0, [pc, #8]	; (ae5c <hl7800_TX_unlock+0xc>)
    ae54:	f006 f9dc 	bl	11210 <z_impl_k_sem_give>
}
    ae58:	bd08      	pop	{r3, pc}
    ae5a:	bf00      	nop
    ae5c:	20000554 	.word	0x20000554

0000ae60 <on_cmd_sockok>:
{
    ae60:	b508      	push	{r3, lr}
	sock = socket_from_id(ictx.last_socket_id);
    ae62:	4b0b      	ldr	r3, [pc, #44]	; (ae90 <on_cmd_sockok+0x30>)
    ae64:	f8d3 04d8 	ldr.w	r0, [r3, #1240]	; 0x4d8
    ae68:	f7ff fd72 	bl	a950 <socket_from_id>
	if (!sock) {
    ae6c:	b130      	cbz	r0, ae7c <on_cmd_sockok+0x1c>
		sock->error = 0;
    ae6e:	2200      	movs	r2, #0
    ae70:	6242      	str	r2, [r0, #36]	; 0x24
		k_sem_give(&sock->sock_send_sem);
    ae72:	302c      	adds	r0, #44	; 0x2c
    ae74:	f006 f9cc 	bl	11210 <z_impl_k_sem_give>
}
    ae78:	2001      	movs	r0, #1
    ae7a:	bd08      	pop	{r3, pc}
		ictx.last_error = 0;
    ae7c:	4804      	ldr	r0, [pc, #16]	; (ae90 <on_cmd_sockok+0x30>)
    ae7e:	2300      	movs	r3, #0
    ae80:	f8c0 34dc 	str.w	r3, [r0, #1244]	; 0x4dc
    ae84:	f500 60a5 	add.w	r0, r0, #1320	; 0x528
    ae88:	f006 f9c2 	bl	11210 <z_impl_k_sem_give>
}
    ae8c:	e7f4      	b.n	ae78 <on_cmd_sockok+0x18>
    ae8e:	bf00      	nop
    ae90:	20000e70 	.word	0x20000e70

0000ae94 <hl7800_start_rssi_work>:
{
    ae94:	b508      	push	{r3, lr}
	k_work_reschedule_for_queue(&hl7800_workq, &ictx.rssi_query_work,
    ae96:	2200      	movs	r2, #0
    ae98:	2300      	movs	r3, #0
    ae9a:	4902      	ldr	r1, [pc, #8]	; (aea4 <hl7800_start_rssi_work+0x10>)
    ae9c:	4802      	ldr	r0, [pc, #8]	; (aea8 <hl7800_start_rssi_work+0x14>)
    ae9e:	f014 fadf 	bl	1f460 <k_work_reschedule_for_queue>
}
    aea2:	bd08      	pop	{r3, pc}
    aea4:	200013c8 	.word	0x200013c8
    aea8:	20001b20 	.word	0x20001b20

0000aeac <hl7800_rssi_query_work>:
{
    aeac:	b508      	push	{r3, lr}
	rssi_query();
    aeae:	f012 fd5f 	bl	1d970 <rssi_query>
		k_work_reschedule_for_queue(&hl7800_workq, &ictx.rssi_query_work,
    aeb2:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    aeb6:	2300      	movs	r3, #0
    aeb8:	4902      	ldr	r1, [pc, #8]	; (aec4 <hl7800_rssi_query_work+0x18>)
    aeba:	4803      	ldr	r0, [pc, #12]	; (aec8 <hl7800_rssi_query_work+0x1c>)
    aebc:	f014 fad0 	bl	1f460 <k_work_reschedule_for_queue>
}
    aec0:	bd08      	pop	{r3, pc}
    aec2:	bf00      	nop
    aec4:	200013c8 	.word	0x200013c8
    aec8:	20001b20 	.word	0x20001b20

0000aecc <write_apn>:
	 */
	return 0;
}

static int write_apn(char *access_point_name)
{
    aecc:	b510      	push	{r4, lr}
    aece:	b0aa      	sub	sp, #168	; 0xa8
    aed0:	4604      	mov	r4, r0
	char cmd_string[MDM_HL7800_APN_CMD_MAX_SIZE];

	/* PDP Context */
	memset(cmd_string, 0, MDM_HL7800_APN_CMD_MAX_SIZE);
    aed2:	22a0      	movs	r2, #160	; 0xa0
    aed4:	2100      	movs	r1, #0
    aed6:	a802      	add	r0, sp, #8
    aed8:	f014 ffae 	bl	1fe38 <memset>
	if (strcmp(MODEM_HL7800_ADDRESS_FAMILY, ADDRESS_FAMILY_IPV4)) {
    aedc:	4912      	ldr	r1, [pc, #72]	; (af28 <write_apn+0x5c>)
    aede:	4813      	ldr	r0, [pc, #76]	; (af2c <write_apn+0x60>)
    aee0:	f7f5 ff5c 	bl	d9c <strcmp>
    aee4:	b1d0      	cbz	r0, af1c <write_apn+0x50>
		strncat(cmd_string, "AT+CGDCONT=1,\"" MODEM_HL7800_ADDRESS_FAMILY "\",\"",
    aee6:	22a0      	movs	r2, #160	; 0xa0
    aee8:	4911      	ldr	r1, [pc, #68]	; (af30 <write_apn+0x64>)
    aeea:	a802      	add	r0, sp, #8
    aeec:	f015 f8c8 	bl	20080 <__strcat_chk>
			MDM_HL7800_APN_CMD_MAX_STRLEN);
	} else {
		strncat(cmd_string, "AT+CGDCONT=1,\"IP\",\"", MDM_HL7800_APN_CMD_MAX_STRLEN);
	}
	strncat(cmd_string, access_point_name, MDM_HL7800_APN_CMD_MAX_STRLEN);
    aef0:	23a0      	movs	r3, #160	; 0xa0
    aef2:	229f      	movs	r2, #159	; 0x9f
    aef4:	4621      	mov	r1, r4
    aef6:	a802      	add	r0, sp, #8
    aef8:	f015 f8e7 	bl	200ca <__strncat_chk>
	strncat(cmd_string, "\"", MDM_HL7800_APN_CMD_MAX_STRLEN);
    aefc:	22a0      	movs	r2, #160	; 0xa0
    aefe:	490d      	ldr	r1, [pc, #52]	; (af34 <write_apn+0x68>)
    af00:	a802      	add	r0, sp, #8
    af02:	f015 f8bd 	bl	20080 <__strcat_chk>
	return send_at_cmd(NULL, cmd_string, MDM_CMD_SEND_TIMEOUT, 0, false);
    af06:	2000      	movs	r0, #0
    af08:	9001      	str	r0, [sp, #4]
    af0a:	9000      	str	r0, [sp, #0]
    af0c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    af10:	2300      	movs	r3, #0
    af12:	a902      	add	r1, sp, #8
    af14:	f7ff fe9e 	bl	ac54 <send_at_cmd>
}
    af18:	b02a      	add	sp, #168	; 0xa8
    af1a:	bd10      	pop	{r4, pc}
		strncat(cmd_string, "AT+CGDCONT=1,\"IP\",\"", MDM_HL7800_APN_CMD_MAX_STRLEN);
    af1c:	22a0      	movs	r2, #160	; 0xa0
    af1e:	4906      	ldr	r1, [pc, #24]	; (af38 <write_apn+0x6c>)
    af20:	a802      	add	r0, sp, #8
    af22:	f015 f8ad 	bl	20080 <__strcat_chk>
    af26:	e7e3      	b.n	aef0 <write_apn+0x24>
    af28:	00021a34 	.word	0x00021a34
    af2c:	00021a3c 	.word	0x00021a3c
    af30:	00021a44 	.word	0x00021a44
    af34:	00021a84 	.word	0x00021a84
    af38:	00021a5c 	.word	0x00021a5c

0000af3c <setup_gprs_connection>:
{
    af3c:	b530      	push	{r4, r5, lr}
    af3e:	b09d      	sub	sp, #116	; 0x74
    af40:	4604      	mov	r4, r0
	memset(cmd_string, 0, cmd_max_len);
    af42:	2561      	movs	r5, #97	; 0x61
    af44:	462a      	mov	r2, r5
    af46:	2100      	movs	r1, #0
    af48:	a803      	add	r0, sp, #12
    af4a:	f014 ff75 	bl	1fe38 <memset>
	strncat(cmd_string, "AT+KCNXCFG=1,\"GPRS\",\"", cmd_max_len);
    af4e:	2262      	movs	r2, #98	; 0x62
    af50:	490f      	ldr	r1, [pc, #60]	; (af90 <setup_gprs_connection+0x54>)
    af52:	a803      	add	r0, sp, #12
    af54:	f015 f894 	bl	20080 <__strcat_chk>
	strncat(cmd_string, access_point_name, cmd_max_len);
    af58:	2362      	movs	r3, #98	; 0x62
    af5a:	462a      	mov	r2, r5
    af5c:	4621      	mov	r1, r4
    af5e:	a803      	add	r0, sp, #12
    af60:	f015 f8b3 	bl	200ca <__strncat_chk>
	strncat(cmd_string, "\",,,\"", cmd_max_len);
    af64:	2262      	movs	r2, #98	; 0x62
    af66:	490b      	ldr	r1, [pc, #44]	; (af94 <setup_gprs_connection+0x58>)
    af68:	a803      	add	r0, sp, #12
    af6a:	f015 f889 	bl	20080 <__strcat_chk>
	strncat(cmd_string, MODEM_HL7800_ADDRESS_FAMILY "\"", cmd_max_len);
    af6e:	2262      	movs	r2, #98	; 0x62
    af70:	4909      	ldr	r1, [pc, #36]	; (af98 <setup_gprs_connection+0x5c>)
    af72:	a803      	add	r0, sp, #12
    af74:	f015 f884 	bl	20080 <__strcat_chk>
	return send_at_cmd(NULL, cmd_string, MDM_CMD_SEND_TIMEOUT, 0, false);
    af78:	2000      	movs	r0, #0
    af7a:	9001      	str	r0, [sp, #4]
    af7c:	9000      	str	r0, [sp, #0]
    af7e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    af82:	2300      	movs	r3, #0
    af84:	a903      	add	r1, sp, #12
    af86:	f7ff fe65 	bl	ac54 <send_at_cmd>
}
    af8a:	b01d      	add	sp, #116	; 0x74
    af8c:	bd30      	pop	{r4, r5, pc}
    af8e:	bf00      	nop
    af90:	00021a70 	.word	0x00021a70
    af94:	00021a88 	.word	0x00021a88
    af98:	00021a90 	.word	0x00021a90

0000af9c <reconfigure_IP_connection>:

static int reconfigure_IP_connection(void)
{
	int ret = 0;

	if (ictx.reconfig_IP_connection) {
    af9c:	4b13      	ldr	r3, [pc, #76]	; (afec <reconfigure_IP_connection+0x50>)
    af9e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    afa2:	b90b      	cbnz	r3, afa8 <reconfigure_IP_connection+0xc>
	int ret = 0;
    afa4:	2000      	movs	r0, #0
				  false);
	}

done:
	return ret;
}
    afa6:	4770      	bx	lr
{
    afa8:	b5d0      	push	{r4, r6, r7, lr}
    afaa:	b082      	sub	sp, #8
		ictx.reconfig_IP_connection = false;
    afac:	480f      	ldr	r0, [pc, #60]	; (afec <reconfigure_IP_connection+0x50>)
    afae:	2300      	movs	r3, #0
    afb0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
		ret = setup_gprs_connection(ictx.mdm_apn.value);
    afb4:	f600 309d 	addw	r0, r0, #2973	; 0xb9d
    afb8:	f7ff ffc0 	bl	af3c <setup_gprs_connection>
		if (ret < 0) {
    afbc:	2800      	cmp	r0, #0
    afbe:	db13      	blt.n	afe8 <reconfigure_IP_connection+0x4c>
		ret = send_at_cmd(NULL, "AT+KTCPCFG?", MDM_CMD_SEND_TIMEOUT, 0,
    afc0:	f44f 3640 	mov.w	r6, #196608	; 0x30000
    afc4:	2700      	movs	r7, #0
    afc6:	2400      	movs	r4, #0
    afc8:	9401      	str	r4, [sp, #4]
    afca:	9400      	str	r4, [sp, #0]
    afcc:	4632      	mov	r2, r6
    afce:	463b      	mov	r3, r7
    afd0:	4907      	ldr	r1, [pc, #28]	; (aff0 <reconfigure_IP_connection+0x54>)
    afd2:	4620      	mov	r0, r4
    afd4:	f7ff fe3e 	bl	ac54 <send_at_cmd>
		ret = send_at_cmd(NULL, "AT+KUDPCFG?", MDM_CMD_SEND_TIMEOUT, 0,
    afd8:	9401      	str	r4, [sp, #4]
    afda:	9400      	str	r4, [sp, #0]
    afdc:	4632      	mov	r2, r6
    afde:	463b      	mov	r3, r7
    afe0:	4904      	ldr	r1, [pc, #16]	; (aff4 <reconfigure_IP_connection+0x58>)
    afe2:	4620      	mov	r0, r4
    afe4:	f7ff fe36 	bl	ac54 <send_at_cmd>
}
    afe8:	b002      	add	sp, #8
    afea:	bdd0      	pop	{r4, r6, r7, pc}
    afec:	20000e70 	.word	0x20000e70
    aff0:	00021a98 	.word	0x00021a98
    aff4:	00021aa4 	.word	0x00021aa4

0000aff8 <delete_socket>:
{
    aff8:	b510      	push	{r4, lr}
    affa:	b088      	sub	sp, #32
    affc:	4604      	mov	r4, r0
	if (type == SOCK_STREAM) {
    affe:	2901      	cmp	r1, #1
    b000:	d00d      	beq.n	b01e <delete_socket+0x26>
	} else if (type == SOCK_DGRAM) {
    b002:	2902      	cmp	r1, #2
    b004:	d012      	beq.n	b02c <delete_socket+0x34>
	return send_at_cmd(sock, cmd, MDM_CMD_SEND_TIMEOUT, 0, false);
    b006:	2300      	movs	r3, #0
    b008:	9301      	str	r3, [sp, #4]
    b00a:	9300      	str	r3, [sp, #0]
    b00c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    b010:	2300      	movs	r3, #0
    b012:	a903      	add	r1, sp, #12
    b014:	4620      	mov	r0, r4
    b016:	f7ff fe1d 	bl	ac54 <send_at_cmd>
}
    b01a:	b008      	add	sp, #32
    b01c:	bd10      	pop	{r4, pc}
		snprintk(cmd, sizeof(cmd), "AT+KTCPDEL=%d", id);
    b01e:	4613      	mov	r3, r2
    b020:	4a06      	ldr	r2, [pc, #24]	; (b03c <delete_socket+0x44>)
    b022:	2111      	movs	r1, #17
    b024:	a803      	add	r0, sp, #12
    b026:	f00b fbbc 	bl	167a2 <snprintk>
    b02a:	e7ec      	b.n	b006 <delete_socket+0xe>
		snprintk(cmd, sizeof(cmd), "AT+KUDPCLOSE=%d", id);
    b02c:	4613      	mov	r3, r2
    b02e:	4a04      	ldr	r2, [pc, #16]	; (b040 <delete_socket+0x48>)
    b030:	2111      	movs	r1, #17
    b032:	a803      	add	r0, sp, #12
    b034:	f00b fbb5 	bl	167a2 <snprintk>
    b038:	e7e5      	b.n	b006 <delete_socket+0xe>
    b03a:	bf00      	nop
    b03c:	00021ab0 	.word	0x00021ab0
    b040:	00021ac0 	.word	0x00021ac0

0000b044 <send_data>:
	if (!sock) {
    b044:	2800      	cmp	r0, #0
    b046:	d07a      	beq.n	b13e <send_data+0xfa>
{
    b048:	b5f0      	push	{r4, r5, r6, r7, lr}
    b04a:	b0a1      	sub	sp, #132	; 0x84
    b04c:	4606      	mov	r6, r0
	sock->error = 0;
    b04e:	2400      	movs	r4, #0
    b050:	6244      	str	r4, [r0, #36]	; 0x24
	sock->state = SOCK_TX;
    b052:	2302      	movs	r3, #2
    b054:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
	frag = pkt->frags;
    b058:	688d      	ldr	r5, [r1, #8]
    b05a:	462b      	mov	r3, r5
    b05c:	e002      	b.n	b064 <send_data+0x20>
		bytes += buf->len;
    b05e:	899a      	ldrh	r2, [r3, #12]
    b060:	4414      	add	r4, r2
		buf = buf->frags;
    b062:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    b064:	2b00      	cmp	r3, #0
    b066:	d1fa      	bne.n	b05e <send_data+0x1a>
	k_sem_reset(&sock->sock_send_sem);
    b068:	f106 072c 	add.w	r7, r6, #44	; 0x2c
	z_impl_k_sem_reset(sem);
    b06c:	4638      	mov	r0, r7
    b06e:	f006 f91f 	bl	112b0 <z_impl_k_sem_reset>
	if (sock->type == SOCK_STREAM) {
    b072:	79b3      	ldrb	r3, [r6, #6]
    b074:	2b01      	cmp	r3, #1
    b076:	d02f      	beq.n	b0d8 <send_data+0x94>
		if (!net_addr_ntop(sock->family, &net_sin(&sock->dst)->sin_addr,
    b078:	88b0      	ldrh	r0, [r6, #4]
    b07a:	f106 0114 	add.w	r1, r6, #20
    b07e:	2328      	movs	r3, #40	; 0x28
    b080:	aa16      	add	r2, sp, #88	; 0x58
    b082:	f00e fd6a 	bl	19b5a <z_impl_net_addr_ntop>
    b086:	2800      	cmp	r0, #0
    b088:	d05d      	beq.n	b146 <send_data+0x102>
			 net_sin(&sock->dst)->sin_port, send_len);
    b08a:	8a73      	ldrh	r3, [r6, #18]
		snprintk(buf, sizeof(buf), "AT+KUDPSND=%d,\"%s\",%u,%zu",
    b08c:	9402      	str	r4, [sp, #8]
    b08e:	9301      	str	r3, [sp, #4]
    b090:	ab16      	add	r3, sp, #88	; 0x58
    b092:	9300      	str	r3, [sp, #0]
    b094:	69f3      	ldr	r3, [r6, #28]
    b096:	4a2d      	ldr	r2, [pc, #180]	; (b14c <send_data+0x108>)
    b098:	2143      	movs	r1, #67	; 0x43
    b09a:	a805      	add	r0, sp, #20
    b09c:	f00b fb81 	bl	167a2 <snprintk>
	send_at_cmd(sock, buf, K_NO_WAIT, 0, false);
    b0a0:	2300      	movs	r3, #0
    b0a2:	9301      	str	r3, [sp, #4]
    b0a4:	9300      	str	r3, [sp, #0]
    b0a6:	2200      	movs	r2, #0
    b0a8:	2300      	movs	r3, #0
    b0aa:	a905      	add	r1, sp, #20
    b0ac:	4630      	mov	r0, r6
    b0ae:	f7ff fdd1 	bl	ac54 <send_at_cmd>
	return z_impl_k_sem_take(sem, timeout);
    b0b2:	f44f 12f8 	mov.w	r2, #2031616	; 0x1f0000
    b0b6:	2300      	movs	r3, #0
    b0b8:	4638      	mov	r0, r7
    b0ba:	f006 f8d1 	bl	11260 <z_impl_k_sem_take>
	if (ret) {
    b0be:	4603      	mov	r3, r0
    b0c0:	b908      	cbnz	r0, b0c6 <send_data+0x82>
	if (sock->error != 0) {
    b0c2:	6a73      	ldr	r3, [r6, #36]	; 0x24
    b0c4:	b1b3      	cbz	r3, b0f4 <send_data+0xb0>
	if (sock->type == SOCK_STREAM) {
    b0c6:	79b2      	ldrb	r2, [r6, #6]
    b0c8:	2a01      	cmp	r2, #1
    b0ca:	d031      	beq.n	b130 <send_data+0xec>
		sock->state = SOCK_IDLE;
    b0cc:	2200      	movs	r2, #0
    b0ce:	f886 2028 	strb.w	r2, [r6, #40]	; 0x28
}
    b0d2:	4618      	mov	r0, r3
    b0d4:	b021      	add	sp, #132	; 0x84
    b0d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		snprintk(buf, sizeof(buf), "AT+KTCPSND=%d,%zu", sock->socket_id,
    b0d8:	9400      	str	r4, [sp, #0]
    b0da:	69f3      	ldr	r3, [r6, #28]
    b0dc:	4a1c      	ldr	r2, [pc, #112]	; (b150 <send_data+0x10c>)
    b0de:	2143      	movs	r1, #67	; 0x43
    b0e0:	a805      	add	r0, sp, #20
    b0e2:	f00b fb5e 	bl	167a2 <snprintk>
    b0e6:	e7db      	b.n	b0a0 <send_data+0x5c>
		mdm_receiver_send(&ictx.mdm_ctx, frag->data, frag->len);
    b0e8:	89aa      	ldrh	r2, [r5, #12]
    b0ea:	68a9      	ldr	r1, [r5, #8]
    b0ec:	4819      	ldr	r0, [pc, #100]	; (b154 <send_data+0x110>)
    b0ee:	f012 fada 	bl	1d6a6 <mdm_receiver_send>
		frag = frag->frags;
    b0f2:	682d      	ldr	r5, [r5, #0]
	while (frag) {
    b0f4:	2d00      	cmp	r5, #0
    b0f6:	d1f7      	bne.n	b0e8 <send_data+0xa4>
	z_impl_k_sem_reset(sem);
    b0f8:	4638      	mov	r0, r7
    b0fa:	f006 f8d9 	bl	112b0 <z_impl_k_sem_reset>
	mdm_receiver_send(&ictx.mdm_ctx, EOF_PATTERN, strlen(EOF_PATTERN));
    b0fe:	4c16      	ldr	r4, [pc, #88]	; (b158 <send_data+0x114>)
    b100:	4620      	mov	r0, r4
    b102:	f7f5 fe55 	bl	db0 <strlen>
    b106:	4602      	mov	r2, r0
    b108:	4621      	mov	r1, r4
    b10a:	4812      	ldr	r0, [pc, #72]	; (b154 <send_data+0x110>)
    b10c:	f012 facb 	bl	1d6a6 <mdm_receiver_send>
	return z_impl_k_sem_take(sem, timeout);
    b110:	f44f 12f8 	mov.w	r2, #2031616	; 0x1f0000
    b114:	2300      	movs	r3, #0
    b116:	4638      	mov	r0, r7
    b118:	f006 f8a2 	bl	11260 <z_impl_k_sem_take>
	if (ret == 0) {
    b11c:	4603      	mov	r3, r0
    b11e:	b908      	cbnz	r0, b124 <send_data+0xe0>
		ret = sock->error;
    b120:	6a73      	ldr	r3, [r6, #36]	; 0x24
    b122:	e7d0      	b.n	b0c6 <send_data+0x82>
	} else if (ret == -EAGAIN) {
    b124:	f110 0f0b 	cmn.w	r0, #11
    b128:	d1cd      	bne.n	b0c6 <send_data+0x82>
		ret = -ETIMEDOUT;
    b12a:	f06f 0373 	mvn.w	r3, #115	; 0x73
    b12e:	e7ca      	b.n	b0c6 <send_data+0x82>
		if (sock->error == 0) {
    b130:	6a72      	ldr	r2, [r6, #36]	; 0x24
    b132:	2a00      	cmp	r2, #0
    b134:	d1cd      	bne.n	b0d2 <send_data+0x8e>
			sock->state = SOCK_CONNECTED;
    b136:	2203      	movs	r2, #3
    b138:	f886 2028 	strb.w	r2, [r6, #40]	; 0x28
    b13c:	e7c9      	b.n	b0d2 <send_data+0x8e>
		return -EINVAL;
    b13e:	f06f 0315 	mvn.w	r3, #21
}
    b142:	4618      	mov	r0, r3
    b144:	4770      	bx	lr
			return -EINVAL;
    b146:	f06f 0315 	mvn.w	r3, #21
    b14a:	e7c2      	b.n	b0d2 <send_data+0x8e>
    b14c:	00021ae4 	.word	0x00021ae4
    b150:	00021ad0 	.word	0x00021ad0
    b154:	20000f08 	.word	0x20000f08
    b158:	00022118 	.word	0x00022118

0000b15c <connect_TCP_socket>:
{
    b15c:	b510      	push	{r4, lr}
    b15e:	b086      	sub	sp, #24
    b160:	4604      	mov	r4, r0
	snprintk(cmd_con, sizeof(cmd_con), "AT+KTCPCNX=%d", sock->socket_id);
    b162:	69c3      	ldr	r3, [r0, #28]
    b164:	4a1a      	ldr	r2, [pc, #104]	; (b1d0 <connect_TCP_socket+0x74>)
    b166:	210e      	movs	r1, #14
    b168:	a802      	add	r0, sp, #8
    b16a:	f00b fb1a 	bl	167a2 <snprintk>
	ret = send_at_cmd(sock, cmd_con, MDM_CMD_SEND_TIMEOUT, 0, false);
    b16e:	2300      	movs	r3, #0
    b170:	9301      	str	r3, [sp, #4]
    b172:	9300      	str	r3, [sp, #0]
    b174:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    b178:	2300      	movs	r3, #0
    b17a:	a902      	add	r1, sp, #8
    b17c:	4620      	mov	r0, r4
    b17e:	f7ff fd69 	bl	ac54 <send_at_cmd>
	if (ret < 0) {
    b182:	2800      	cmp	r0, #0
    b184:	db21      	blt.n	b1ca <connect_TCP_socket+0x6e>
	ret = k_sem_take(&sock->sock_send_sem, MDM_CMD_CONN_TIMEOUT);
    b186:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    b18a:	f44f 2278 	mov.w	r2, #1015808	; 0xf8000
    b18e:	2300      	movs	r3, #0
    b190:	f006 f866 	bl	11260 <z_impl_k_sem_take>
	if (ret == 0) {
    b194:	b998      	cbnz	r0, b1be <connect_TCP_socket+0x62>
		ret = sock->error;
    b196:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if (ret < 0) {
    b198:	2800      	cmp	r0, #0
    b19a:	db0e      	blt.n	b1ba <connect_TCP_socket+0x5e>
		sock->state = SOCK_CONNECTED;
    b19c:	2303      	movs	r3, #3
    b19e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		net_context_set_state(sock->context, NET_CONTEXT_CONNECTED);
    b1a2:	6822      	ldr	r2, [r4, #0]
	context->flags &= ~(NET_CONTEXT_STATE_MASK << NET_CONTEXT_STATE_SHIFT);
    b1a4:	f8b2 3088 	ldrh.w	r3, [r2, #136]	; 0x88
    b1a8:	f023 0306 	bic.w	r3, r3, #6
    b1ac:	b29b      	uxth	r3, r3
    b1ae:	f8a2 3088 	strh.w	r3, [r2, #136]	; 0x88
	context->flags |= ((state & NET_CONTEXT_STATE_MASK) <<
    b1b2:	f043 0304 	orr.w	r3, r3, #4
    b1b6:	f8a2 3088 	strh.w	r3, [r2, #136]	; 0x88
}
    b1ba:	b006      	add	sp, #24
    b1bc:	bd10      	pop	{r4, pc}
	} else if (ret == -EAGAIN) {
    b1be:	f110 0f0b 	cmn.w	r0, #11
    b1c2:	d1e9      	bne.n	b198 <connect_TCP_socket+0x3c>
		ret = -ETIMEDOUT;
    b1c4:	f06f 0073 	mvn.w	r0, #115	; 0x73
		goto done;
    b1c8:	e7f7      	b.n	b1ba <connect_TCP_socket+0x5e>
		ret = -EIO;
    b1ca:	f06f 0004 	mvn.w	r0, #4
    b1ce:	e7f4      	b.n	b1ba <connect_TCP_socket+0x5e>
    b1d0:	00021b00 	.word	0x00021b00

0000b1d4 <configure_UDP_socket>:
{
    b1d4:	b530      	push	{r4, r5, lr}
    b1d6:	b089      	sub	sp, #36	; 0x24
    b1d8:	4604      	mov	r4, r0
	sock->socket_id = MDM_CREATE_SOCKET_ID;
    b1da:	2307      	movs	r3, #7
    b1dc:	61c3      	str	r3, [r0, #28]
	if (sock->family == AF_INET) {
    b1de:	8883      	ldrh	r3, [r0, #4]
    b1e0:	2b01      	cmp	r3, #1
    b1e2:	d01f      	beq.n	b224 <configure_UDP_socket+0x50>
	} else if (sock->family == AF_INET6) {
    b1e4:	2b02      	cmp	r3, #2
    b1e6:	d125      	bne.n	b234 <configure_UDP_socket+0x60>
		af = MDM_HL7800_SOCKET_AF_IPV6;
    b1e8:	2301      	movs	r3, #1
	snprintk(cmd, sizeof(cmd), "AT+KUDPCFG=1,0,,,,,%d,%d", af, restore_on_boot);
    b1ea:	2500      	movs	r5, #0
    b1ec:	9500      	str	r5, [sp, #0]
    b1ee:	4a13      	ldr	r2, [pc, #76]	; (b23c <configure_UDP_socket+0x68>)
    b1f0:	2117      	movs	r1, #23
    b1f2:	a802      	add	r0, sp, #8
    b1f4:	f00b fad5 	bl	167a2 <snprintk>
	ret = send_at_cmd(sock, cmd, MDM_CMD_SEND_TIMEOUT, 0, false);
    b1f8:	9501      	str	r5, [sp, #4]
    b1fa:	9500      	str	r5, [sp, #0]
    b1fc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    b200:	2300      	movs	r3, #0
    b202:	a902      	add	r1, sp, #8
    b204:	4620      	mov	r0, r4
    b206:	f7ff fd25 	bl	ac54 <send_at_cmd>
	if (ret < 0) {
    b20a:	2800      	cmp	r0, #0
    b20c:	db08      	blt.n	b220 <configure_UDP_socket+0x4c>
	ret = k_sem_take(&sock->sock_send_sem, MDM_CMD_CONN_TIMEOUT);
    b20e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    b212:	f44f 2278 	mov.w	r2, #1015808	; 0xf8000
    b216:	2300      	movs	r3, #0
    b218:	f006 f822 	bl	11260 <z_impl_k_sem_take>
	if (ret == 0) {
    b21c:	b920      	cbnz	r0, b228 <configure_UDP_socket+0x54>
		ret = sock->error;
    b21e:	6a60      	ldr	r0, [r4, #36]	; 0x24
}
    b220:	b009      	add	sp, #36	; 0x24
    b222:	bd30      	pop	{r4, r5, pc}
		af = MDM_HL7800_SOCKET_AF_IPV4;
    b224:	2300      	movs	r3, #0
    b226:	e7e0      	b.n	b1ea <configure_UDP_socket+0x16>
	} else if (ret == -EAGAIN) {
    b228:	f110 0f0b 	cmn.w	r0, #11
    b22c:	d1f8      	bne.n	b220 <configure_UDP_socket+0x4c>
		ret = -ETIMEDOUT;
    b22e:	f06f 0073 	mvn.w	r0, #115	; 0x73
		goto done;
    b232:	e7f5      	b.n	b220 <configure_UDP_socket+0x4c>
		return -EINVAL;
    b234:	f06f 0015 	mvn.w	r0, #21
    b238:	e7f2      	b.n	b220 <configure_UDP_socket+0x4c>
    b23a:	bf00      	nop
    b23c:	00021b10 	.word	0x00021b10

0000b240 <start_socket_rx>:
	if ((sock->socket_id <= 0) || (sock->rx_size <= 0)) {
    b240:	69c3      	ldr	r3, [r0, #28]
    b242:	2b00      	cmp	r3, #0
    b244:	dd40      	ble.n	b2c8 <start_socket_rx+0x88>
{
    b246:	b530      	push	{r4, r5, lr}
    b248:	b08b      	sub	sp, #44	; 0x2c
    b24a:	4604      	mov	r4, r0
	if ((sock->socket_id <= 0) || (sock->rx_size <= 0)) {
    b24c:	6a02      	ldr	r2, [r0, #32]
    b24e:	2a00      	cmp	r2, #0
    b250:	dd3d      	ble.n	b2ce <start_socket_rx+0x8e>
	sock->state = SOCK_RX;
    b252:	2201      	movs	r2, #1
    b254:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
	if (sock->type == SOCK_DGRAM) {
    b258:	7982      	ldrb	r2, [r0, #6]
    b25a:	2a02      	cmp	r2, #2
    b25c:	d01e      	beq.n	b29c <start_socket_rx+0x5c>
		if (rx_size > (net_if_get_mtu(ictx.iface) - NET_IPV4TCPH_LEN)) {
    b25e:	4a1d      	ldr	r2, [pc, #116]	; (b2d4 <start_socket_rx+0x94>)
    b260:	6812      	ldr	r2, [r2, #0]
 *
 * @return the MTU
 */
static inline uint16_t net_if_get_mtu(struct net_if *iface)
{
	if (iface == NULL) {
    b262:	2a00      	cmp	r2, #0
    b264:	d02e      	beq.n	b2c4 <start_socket_rx+0x84>
		return 0U;
	}

	return iface->if_dev->mtu;
    b266:	6812      	ldr	r2, [r2, #0]
    b268:	8b92      	ldrh	r2, [r2, #28]
    b26a:	f1a2 0027 	sub.w	r0, r2, #39	; 0x27
    b26e:	4288      	cmp	r0, r1
    b270:	dc01      	bgt.n	b276 <start_socket_rx+0x36>
				net_if_get_mtu(ictx.iface) - NET_IPV4TCPH_LEN;
    b272:	3a28      	subs	r2, #40	; 0x28
			sock->rx_size =
    b274:	6222      	str	r2, [r4, #32]
		snprintk(sendbuf, sizeof(sendbuf), "AT+KTCPRCV=%d,%u",
    b276:	6a22      	ldr	r2, [r4, #32]
    b278:	9200      	str	r2, [sp, #0]
    b27a:	4a17      	ldr	r2, [pc, #92]	; (b2d8 <start_socket_rx+0x98>)
    b27c:	211c      	movs	r1, #28
    b27e:	a803      	add	r0, sp, #12
    b280:	f00b fa8f 	bl	167a2 <snprintk>
	send_at_cmd(sock, sendbuf, K_NO_WAIT, 0, false);
    b284:	2500      	movs	r5, #0
    b286:	9501      	str	r5, [sp, #4]
    b288:	9500      	str	r5, [sp, #0]
    b28a:	2200      	movs	r2, #0
    b28c:	2300      	movs	r3, #0
    b28e:	a903      	add	r1, sp, #12
    b290:	4620      	mov	r0, r4
    b292:	f7ff fcdf 	bl	ac54 <send_at_cmd>
	return 0;
    b296:	4628      	mov	r0, r5
}
    b298:	b00b      	add	sp, #44	; 0x2c
    b29a:	bd30      	pop	{r4, r5, pc}
		if (rx_size > (net_if_get_mtu(ictx.iface) - NET_IPV4UDPH_LEN)) {
    b29c:	4a0d      	ldr	r2, [pc, #52]	; (b2d4 <start_socket_rx+0x94>)
    b29e:	6812      	ldr	r2, [r2, #0]
	if (iface == NULL) {
    b2a0:	b172      	cbz	r2, b2c0 <start_socket_rx+0x80>
	return iface->if_dev->mtu;
    b2a2:	6812      	ldr	r2, [r2, #0]
    b2a4:	8b92      	ldrh	r2, [r2, #28]
    b2a6:	f1a2 001b 	sub.w	r0, r2, #27
    b2aa:	4288      	cmp	r0, r1
    b2ac:	dc01      	bgt.n	b2b2 <start_socket_rx+0x72>
				net_if_get_mtu(ictx.iface) - NET_IPV4UDPH_LEN;
    b2ae:	3a1c      	subs	r2, #28
			sock->rx_size =
    b2b0:	6222      	str	r2, [r4, #32]
		snprintk(sendbuf, sizeof(sendbuf), "AT+KUDPRCV=%d,%u",
    b2b2:	9100      	str	r1, [sp, #0]
    b2b4:	4a09      	ldr	r2, [pc, #36]	; (b2dc <start_socket_rx+0x9c>)
    b2b6:	211c      	movs	r1, #28
    b2b8:	a803      	add	r0, sp, #12
    b2ba:	f00b fa72 	bl	167a2 <snprintk>
    b2be:	e7e1      	b.n	b284 <start_socket_rx+0x44>
		return 0U;
    b2c0:	2200      	movs	r2, #0
    b2c2:	e7f0      	b.n	b2a6 <start_socket_rx+0x66>
    b2c4:	2200      	movs	r2, #0
    b2c6:	e7d0      	b.n	b26a <start_socket_rx+0x2a>
		return -1;
    b2c8:	f04f 30ff 	mov.w	r0, #4294967295
}
    b2cc:	4770      	bx	lr
		return -1;
    b2ce:	f04f 30ff 	mov.w	r0, #4294967295
    b2d2:	e7e1      	b.n	b298 <start_socket_rx+0x58>
    b2d4:	20000e70 	.word	0x20000e70
    b2d8:	00021b40 	.word	0x00021b40
    b2dc:	00021b2c 	.word	0x00021b2c

0000b2e0 <event_handler>:
{
    b2e0:	b570      	push	{r4, r5, r6, lr}
    b2e2:	4606      	mov	r6, r0
    b2e4:	460d      	mov	r5, r1
	return z_impl_k_mutex_lock(mutex, timeout);
    b2e6:	f04f 32ff 	mov.w	r2, #4294967295
    b2ea:	f04f 33ff 	mov.w	r3, #4294967295
    b2ee:	4809      	ldr	r0, [pc, #36]	; (b314 <event_handler+0x34>)
    b2f0:	f005 fe8e 	bl	11010 <z_impl_k_mutex_lock>
	return list->head;
    b2f4:	4b08      	ldr	r3, [pc, #32]	; (b318 <event_handler+0x38>)
    b2f6:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_NODE(&hl7800_event_callback_list, node) {
    b2f8:	e003      	b.n	b302 <event_handler+0x22>
			agent->event_callback(event, event_data);
    b2fa:	4629      	mov	r1, r5
    b2fc:	4630      	mov	r0, r6
    b2fe:	4798      	blx	r3
	return node->next;
    b300:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_NODE(&hl7800_event_callback_list, node) {
    b302:	b11c      	cbz	r4, b30c <event_handler+0x2c>
		if (agent->event_callback != NULL) {
    b304:	6863      	ldr	r3, [r4, #4]
    b306:	2b00      	cmp	r3, #0
    b308:	d1f7      	bne.n	b2fa <event_handler+0x1a>
    b30a:	e7f9      	b.n	b300 <event_handler+0x20>
	return z_impl_k_mutex_unlock(mutex);
    b30c:	4801      	ldr	r0, [pc, #4]	; (b314 <event_handler+0x34>)
    b30e:	f005 ff03 	bl	11118 <z_impl_k_mutex_unlock>
}
    b312:	bd70      	pop	{r4, r5, r6, pc}
    b314:	20000488 	.word	0x20000488
    b318:	20002c24 	.word	0x20002c24

0000b31c <generate_startup_state_event>:
{
    b31c:	b500      	push	{lr}
    b31e:	b083      	sub	sp, #12
	event.code = ictx.mdm_startup_state;
    b320:	4b07      	ldr	r3, [pc, #28]	; (b340 <generate_startup_state_event+0x24>)
    b322:	f893 0b4a 	ldrb.w	r0, [r3, #2890]	; 0xb4a
    b326:	f88d 0000 	strb.w	r0, [sp]
	event.string = get_startup_state_string(ictx.mdm_startup_state);
    b32a:	f7ff fb63 	bl	a9f4 <get_startup_state_string>
    b32e:	9001      	str	r0, [sp, #4]
	event_handler(HL7800_EVENT_STARTUP_STATE_CHANGE, &event);
    b330:	4669      	mov	r1, sp
    b332:	2005      	movs	r0, #5
    b334:	f7ff ffd4 	bl	b2e0 <event_handler>
}
    b338:	b003      	add	sp, #12
    b33a:	f85d fb04 	ldr.w	pc, [sp], #4
    b33e:	bf00      	nop
    b340:	20000e70 	.word	0x20000e70

0000b344 <set_startup_state>:
{
    b344:	b508      	push	{r3, lr}
	ictx.mdm_startup_state = state;
    b346:	4b03      	ldr	r3, [pc, #12]	; (b354 <set_startup_state+0x10>)
    b348:	f883 0b4a 	strb.w	r0, [r3, #2890]	; 0xb4a
	generate_startup_state_event();
    b34c:	f7ff ffe6 	bl	b31c <generate_startup_state_event>
}
    b350:	bd08      	pop	{r3, pc}
    b352:	bf00      	nop
    b354:	20000e70 	.word	0x20000e70

0000b358 <generate_network_state_event>:
{
    b358:	b500      	push	{lr}
    b35a:	b083      	sub	sp, #12
	event.code = ictx.network_state;
    b35c:	4b07      	ldr	r3, [pc, #28]	; (b37c <generate_network_state_event+0x24>)
    b35e:	f893 0c73 	ldrb.w	r0, [r3, #3187]	; 0xc73
    b362:	f88d 0000 	strb.w	r0, [sp]
	event.string = get_network_state_string(ictx.network_state);
    b366:	f7ff fbeb 	bl	ab40 <get_network_state_string>
    b36a:	9001      	str	r0, [sp, #4]
	event_handler(HL7800_EVENT_NETWORK_STATE_CHANGE, &event);
    b36c:	4669      	mov	r1, sp
    b36e:	2001      	movs	r0, #1
    b370:	f7ff ffb6 	bl	b2e0 <event_handler>
}
    b374:	b003      	add	sp, #12
    b376:	f85d fb04 	ldr.w	pc, [sp], #4
    b37a:	bf00      	nop
    b37c:	20000e70 	.word	0x20000e70

0000b380 <set_network_state>:
{
    b380:	b508      	push	{r3, lr}
	ictx.network_state = state;
    b382:	4b03      	ldr	r3, [pc, #12]	; (b390 <set_network_state+0x10>)
    b384:	f883 0c73 	strb.w	r0, [r3, #3187]	; 0xc73
	generate_network_state_event();
    b388:	f7ff ffe6 	bl	b358 <generate_network_state_event>
}
    b38c:	bd08      	pop	{r3, pc}
    b38e:	bf00      	nop
    b390:	20000e70 	.word	0x20000e70

0000b394 <generate_sleep_state_event>:
{
    b394:	b500      	push	{lr}
    b396:	b083      	sub	sp, #12
	event.code = ictx.sleep_state;
    b398:	4b07      	ldr	r3, [pc, #28]	; (b3b8 <generate_sleep_state_event+0x24>)
    b39a:	f893 0c71 	ldrb.w	r0, [r3, #3185]	; 0xc71
    b39e:	f88d 0000 	strb.w	r0, [sp]
	event.string = get_sleep_state_string(ictx.sleep_state);
    b3a2:	f7ff fb4d 	bl	aa40 <get_sleep_state_string>
    b3a6:	9001      	str	r0, [sp, #4]
	event_handler(HL7800_EVENT_SLEEP_STATE_CHANGE, &event);
    b3a8:	4669      	mov	r1, sp
    b3aa:	2006      	movs	r0, #6
    b3ac:	f7ff ff98 	bl	b2e0 <event_handler>
}
    b3b0:	b003      	add	sp, #12
    b3b2:	f85d fb04 	ldr.w	pc, [sp], #4
    b3b6:	bf00      	nop
    b3b8:	20000e70 	.word	0x20000e70

0000b3bc <set_sleep_state>:
{
    b3bc:	b508      	push	{r3, lr}
	ictx.sleep_state = state;
    b3be:	4b06      	ldr	r3, [pc, #24]	; (b3d8 <set_sleep_state+0x1c>)
    b3c0:	f883 0c71 	strb.w	r0, [r3, #3185]	; 0xc71
	if (ictx.sleep_state != HL7800_SLEEP_AWAKE) {
    b3c4:	2802      	cmp	r0, #2
    b3c6:	d102      	bne.n	b3ce <set_sleep_state+0x12>
	generate_sleep_state_event();
    b3c8:	f7ff ffe4 	bl	b394 <generate_sleep_state_event>
}
    b3cc:	bd08      	pop	{r3, pc}
	z_impl_k_sem_reset(sem);
    b3ce:	f503 60a8 	add.w	r0, r3, #1344	; 0x540
    b3d2:	f005 ff6d 	bl	112b0 <z_impl_k_sem_reset>
}
    b3d6:	e7f7      	b.n	b3c8 <set_sleep_state+0xc>
    b3d8:	20000e70 	.word	0x20000e70

0000b3dc <allow_sleep_work_callback>:
{
    b3dc:	b508      	push	{r3, lr}
	ictx.allow_sleep = true;
    b3de:	4b06      	ldr	r3, [pc, #24]	; (b3f8 <allow_sleep_work_callback+0x1c>)
    b3e0:	2201      	movs	r2, #1
    b3e2:	f883 2c6e 	strb.w	r2, [r3, #3182]	; 0xc6e
	set_sleep_state(ictx.desired_sleep_level);
    b3e6:	f893 0c70 	ldrb.w	r0, [r3, #3184]	; 0xc70
    b3ea:	f7ff ffe7 	bl	b3bc <set_sleep_state>
	modem_assert_wake(false);
    b3ee:	2000      	movs	r0, #0
    b3f0:	f7ff faca 	bl	a988 <modem_assert_wake>
}
    b3f4:	bd08      	pop	{r3, pc}
    b3f6:	bf00      	nop
    b3f8:	20000e70 	.word	0x20000e70

0000b3fc <generate_fota_state_event>:
{
    b3fc:	b500      	push	{lr}
    b3fe:	b083      	sub	sp, #12
	event.code = ictx.fw_update_state;
    b400:	4b07      	ldr	r3, [pc, #28]	; (b420 <generate_fota_state_event+0x24>)
    b402:	f893 0688 	ldrb.w	r0, [r3, #1672]	; 0x688
    b406:	f88d 0000 	strb.w	r0, [sp]
	event.string = get_fota_state_string(ictx.fw_update_state);
    b40a:	f7ff fb39 	bl	aa80 <get_fota_state_string>
    b40e:	9001      	str	r0, [sp, #4]
	event_handler(HL7800_EVENT_FOTA_STATE, &event);
    b410:	4669      	mov	r1, sp
    b412:	200a      	movs	r0, #10
    b414:	f7ff ff64 	bl	b2e0 <event_handler>
}
    b418:	b003      	add	sp, #12
    b41a:	f85d fb04 	ldr.w	pc, [sp], #4
    b41e:	bf00      	nop
    b420:	20000e70 	.word	0x20000e70

0000b424 <set_fota_state>:
{
    b424:	b508      	push	{r3, lr}
	ictx.fw_update_state = state;
    b426:	4b03      	ldr	r3, [pc, #12]	; (b434 <set_fota_state+0x10>)
    b428:	f883 0688 	strb.w	r0, [r3, #1672]	; 0x688
	generate_fota_state_event();
    b42c:	f7ff ffe6 	bl	b3fc <generate_fota_state_event>
}
    b430:	bd08      	pop	{r3, pc}
    b432:	bf00      	nop
    b434:	20000e70 	.word	0x20000e70

0000b438 <finish_fw_update_work_callback>:
{
    b438:	b500      	push	{lr}
    b43a:	b083      	sub	sp, #12
	send_at_cmd(NULL, "AT+WDSR=4", MDM_CMD_SEND_TIMEOUT, 0, false);
    b43c:	2000      	movs	r0, #0
    b43e:	9001      	str	r0, [sp, #4]
    b440:	9000      	str	r0, [sp, #0]
    b442:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    b446:	2300      	movs	r3, #0
    b448:	4907      	ldr	r1, [pc, #28]	; (b468 <finish_fw_update_work_callback+0x30>)
    b44a:	f7ff fc03 	bl	ac54 <send_at_cmd>
	ictx.fw_updated = true;
    b44e:	4b07      	ldr	r3, [pc, #28]	; (b46c <finish_fw_update_work_callback+0x34>)
    b450:	2201      	movs	r2, #1
    b452:	f883 2ab4 	strb.w	r2, [r3, #2740]	; 0xab4
	set_fota_state(HL7800_FOTA_INSTALL);
    b456:	2006      	movs	r0, #6
    b458:	f7ff ffe4 	bl	b424 <set_fota_state>
	hl7800_unlock();
    b45c:	f012 fa82 	bl	1d964 <hl7800_unlock>
}
    b460:	b003      	add	sp, #12
    b462:	f85d fb04 	ldr.w	pc, [sp], #4
    b466:	bf00      	nop
    b468:	00021b54 	.word	0x00021b54
    b46c:	20000e70 	.word	0x20000e70

0000b470 <generate_fota_count_event>:
{
    b470:	b500      	push	{lr}
    b472:	b083      	sub	sp, #12
	uint32_t count = ictx.fw_packet_count * XMODEM_DATA_SIZE;
    b474:	4b05      	ldr	r3, [pc, #20]	; (b48c <generate_fota_count_event+0x1c>)
    b476:	f8d3 3a9c 	ldr.w	r3, [r3, #2716]	; 0xa9c
    b47a:	029b      	lsls	r3, r3, #10
    b47c:	9301      	str	r3, [sp, #4]
	event_handler(HL7800_EVENT_FOTA_COUNT, &count);
    b47e:	a901      	add	r1, sp, #4
    b480:	200b      	movs	r0, #11
    b482:	f7ff ff2d 	bl	b2e0 <event_handler>
}
    b486:	b003      	add	sp, #12
    b488:	f85d fb04 	ldr.w	pc, [sp], #4
    b48c:	20000e70 	.word	0x20000e70

0000b490 <send_fw_update_packet>:
{
    b490:	b510      	push	{r4, lr}
    b492:	4604      	mov	r4, r0
	generate_fota_count_event();
    b494:	f7ff ffec 	bl	b470 <generate_fota_count_event>
	return mdm_receiver_send(&ictx.mdm_ctx, (const uint8_t *)pkt,
    b498:	f240 4204 	movw	r2, #1028	; 0x404
    b49c:	4621      	mov	r1, r4
    b49e:	4802      	ldr	r0, [pc, #8]	; (b4a8 <send_fw_update_packet+0x18>)
    b4a0:	f012 f901 	bl	1d6a6 <mdm_receiver_send>
}
    b4a4:	bd10      	pop	{r4, pc}
    b4a6:	bf00      	nop
    b4a8:	20000f08 	.word	0x20000f08

0000b4ac <mdm_vgpio_callback_isr>:
{
    b4ac:	b508      	push	{r3, lr}
	ictx.vgpio_state = read_pin(1, &hl7800_cfg.gpio[MDM_VGPIO]);
    b4ae:	490e      	ldr	r1, [pc, #56]	; (b4e8 <mdm_vgpio_callback_isr+0x3c>)
    b4b0:	2001      	movs	r0, #1
    b4b2:	f012 f9c8 	bl	1d846 <read_pin>
    b4b6:	4b0d      	ldr	r3, [pc, #52]	; (b4ec <mdm_vgpio_callback_isr+0x40>)
    b4b8:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	if (!ictx.vgpio_state) {
    b4bc:	b120      	cbz	r0, b4c8 <mdm_vgpio_callback_isr+0x1c>
	k_work_submit_to_queue(&hl7800_workq, &ictx.mdm_vgpio_work);
    b4be:	490c      	ldr	r1, [pc, #48]	; (b4f0 <mdm_vgpio_callback_isr+0x44>)
    b4c0:	480c      	ldr	r0, [pc, #48]	; (b4f4 <mdm_vgpio_callback_isr+0x48>)
    b4c2:	f013 ff8d 	bl	1f3e0 <k_work_submit_to_queue>
}
    b4c6:	bd08      	pop	{r3, pc}
		prepare_io_for_reset();
    b4c8:	f7ff fb8c 	bl	abe4 <prepare_io_for_reset>
		if (!ictx.restarting && ictx.initialized) {
    b4cc:	4b07      	ldr	r3, [pc, #28]	; (b4ec <mdm_vgpio_callback_isr+0x40>)
    b4ce:	7f1b      	ldrb	r3, [r3, #28]
    b4d0:	2b00      	cmp	r3, #0
    b4d2:	d1f4      	bne.n	b4be <mdm_vgpio_callback_isr+0x12>
    b4d4:	4b05      	ldr	r3, [pc, #20]	; (b4ec <mdm_vgpio_callback_isr+0x40>)
    b4d6:	7f5b      	ldrb	r3, [r3, #29]
    b4d8:	2b00      	cmp	r3, #0
    b4da:	d0f0      	beq.n	b4be <mdm_vgpio_callback_isr+0x12>
			ictx.reconfig_IP_connection = true;
    b4dc:	4b03      	ldr	r3, [pc, #12]	; (b4ec <mdm_vgpio_callback_isr+0x40>)
    b4de:	2201      	movs	r2, #1
    b4e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		check_hl7800_awake();
    b4e4:	e7eb      	b.n	b4be <mdm_vgpio_callback_isr+0x12>
    b4e6:	bf00      	nop
    b4e8:	000220ec 	.word	0x000220ec
    b4ec:	20000e70 	.word	0x20000e70
    b4f0:	20001458 	.word	0x20001458
    b4f4:	20001b20 	.word	0x20001b20

0000b4f8 <sock_notif_cb_work>:
{
    b4f8:	b510      	push	{r4, lr}
    b4fa:	4604      	mov	r4, r0
	hl7800_lock();
    b4fc:	f012 fa2c 	bl	1d958 <hl7800_lock>
	if (sock->recv_pkt != NULL) {
    b500:	6b63      	ldr	r3, [r4, #52]	; 0x34
    b502:	b14b      	cbz	r3, b518 <sock_notif_cb_work+0x20>
		k_work_reschedule_for_queue(&hl7800_workq, &sock->notif_work,
    b504:	f241 3234 	movw	r2, #4916	; 0x1334
    b508:	2300      	movs	r3, #0
    b50a:	4621      	mov	r1, r4
    b50c:	4807      	ldr	r0, [pc, #28]	; (b52c <sock_notif_cb_work+0x34>)
    b50e:	f013 ffa7 	bl	1f460 <k_work_reschedule_for_queue>
	hl7800_unlock();
    b512:	f012 fa27 	bl	1d964 <hl7800_unlock>
}
    b516:	bd10      	pop	{r4, pc}
		if (sock->type == SOCK_STREAM) {
    b518:	f814 3c62 	ldrb.w	r3, [r4, #-98]
    b51c:	2b01      	cmp	r3, #1
    b51e:	d1f8      	bne.n	b512 <sock_notif_cb_work+0x1a>
			k_work_submit_to_queue(&hl7800_workq, &sock->recv_cb_work);
    b520:	f1a4 0124 	sub.w	r1, r4, #36	; 0x24
    b524:	4801      	ldr	r0, [pc, #4]	; (b52c <sock_notif_cb_work+0x34>)
    b526:	f013 ff5b 	bl	1f3e0 <k_work_submit_to_queue>
    b52a:	e7f2      	b.n	b512 <sock_notif_cb_work+0x1a>
    b52c:	20001b20 	.word	0x20001b20

0000b530 <mdm_uart_cts_callback>:
{
    b530:	b508      	push	{r3, lr}
		glitch_filter(0, &hl7800_cfg.gpio[MDM_UART_CTS],
    b532:	2305      	movs	r3, #5
    b534:	220a      	movs	r2, #10
    b536:	4909      	ldr	r1, [pc, #36]	; (b55c <mdm_uart_cts_callback+0x2c>)
    b538:	2000      	movs	r0, #0
    b53a:	f012 fa35 	bl	1d9a8 <glitch_filter>
	ictx.cts_state =
    b53e:	4b08      	ldr	r3, [pc, #32]	; (b560 <mdm_uart_cts_callback+0x30>)
    b540:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	if ((ictx.cts_callback != NULL) && (ictx.desired_sleep_level == HL7800_SLEEP_SLEEP)) {
    b544:	f8d3 3cac 	ldr.w	r3, [r3, #3244]	; 0xcac
    b548:	b123      	cbz	r3, b554 <mdm_uart_cts_callback+0x24>
    b54a:	4a05      	ldr	r2, [pc, #20]	; (b560 <mdm_uart_cts_callback+0x30>)
    b54c:	f892 2c70 	ldrb.w	r2, [r2, #3184]	; 0xc70
    b550:	2a04      	cmp	r2, #4
    b552:	d000      	beq.n	b556 <mdm_uart_cts_callback+0x26>
}
    b554:	bd08      	pop	{r3, pc}
		ictx.cts_callback(ictx.cts_state);
    b556:	4798      	blx	r3
}
    b558:	e7fc      	b.n	b554 <mdm_uart_cts_callback+0x24>
    b55a:	bf00      	nop
    b55c:	000220fc 	.word	0x000220fc
    b560:	20000e70 	.word	0x20000e70

0000b564 <mdm_vgpio_work_cb>:
{
    b564:	b508      	push	{r3, lr}
	hl7800_lock();
    b566:	f012 f9f7 	bl	1d958 <hl7800_lock>
	if (!ictx.vgpio_state) {
    b56a:	4b11      	ldr	r3, [pc, #68]	; (b5b0 <mdm_vgpio_work_cb+0x4c>)
    b56c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    b570:	b983      	cbnz	r3, b594 <mdm_vgpio_work_cb+0x30>
		if (ictx.desired_sleep_level == HL7800_SLEEP_HIBERNATE ||
    b572:	4b0f      	ldr	r3, [pc, #60]	; (b5b0 <mdm_vgpio_work_cb+0x4c>)
    b574:	f893 0c70 	ldrb.w	r0, [r3, #3184]	; 0xc70
    b578:	2801      	cmp	r0, #1
    b57a:	d00e      	beq.n	b59a <mdm_vgpio_work_cb+0x36>
    b57c:	2803      	cmp	r0, #3
    b57e:	d00c      	beq.n	b59a <mdm_vgpio_work_cb+0x36>
		if (ictx.iface && ictx.initialized &&
    b580:	4b0b      	ldr	r3, [pc, #44]	; (b5b0 <mdm_vgpio_work_cb+0x4c>)
    b582:	6818      	ldr	r0, [r3, #0]
    b584:	b130      	cbz	r0, b594 <mdm_vgpio_work_cb+0x30>
    b586:	7f5b      	ldrb	r3, [r3, #29]
    b588:	b123      	cbz	r3, b594 <mdm_vgpio_work_cb+0x30>
		    ictx.low_power_mode != HL7800_LPM_PSM) {
    b58a:	4b09      	ldr	r3, [pc, #36]	; (b5b0 <mdm_vgpio_work_cb+0x4c>)
    b58c:	f893 3c72 	ldrb.w	r3, [r3, #3186]	; 0xc72
		if (ictx.iface && ictx.initialized &&
    b590:	2b02      	cmp	r3, #2
    b592:	d10a      	bne.n	b5aa <mdm_vgpio_work_cb+0x46>
	hl7800_unlock();
    b594:	f012 f9e6 	bl	1d964 <hl7800_unlock>
}
    b598:	bd08      	pop	{r3, pc}
			if (ictx.sleep_state != ictx.desired_sleep_level) {
    b59a:	4b05      	ldr	r3, [pc, #20]	; (b5b0 <mdm_vgpio_work_cb+0x4c>)
    b59c:	f893 3c71 	ldrb.w	r3, [r3, #3185]	; 0xc71
    b5a0:	4298      	cmp	r0, r3
    b5a2:	d0ed      	beq.n	b580 <mdm_vgpio_work_cb+0x1c>
				set_sleep_state(ictx.desired_sleep_level);
    b5a4:	f7ff ff0a 	bl	b3bc <set_sleep_state>
    b5a8:	e7ea      	b.n	b580 <mdm_vgpio_work_cb+0x1c>
			net_if_carrier_off(ictx.iface);
    b5aa:	f7fb fd8f 	bl	70cc <net_if_carrier_off>
    b5ae:	e7f1      	b.n	b594 <mdm_vgpio_work_cb+0x30>
    b5b0:	20000e70 	.word	0x20000e70

0000b5b4 <hl7800_stop_rssi_work>:
{
    b5b4:	b508      	push	{r3, lr}
	rc = k_work_cancel_delayable(&ictx.rssi_query_work);
    b5b6:	4802      	ldr	r0, [pc, #8]	; (b5c0 <hl7800_stop_rssi_work+0xc>)
    b5b8:	f013 ff6f 	bl	1f49a <k_work_cancel_delayable>
}
    b5bc:	bd08      	pop	{r3, pc}
    b5be:	bf00      	nop
    b5c0:	200013c8 	.word	0x200013c8

0000b5c4 <modem_reset>:
{
    b5c4:	b538      	push	{r3, r4, r5, lr}
	prepare_io_for_reset();
    b5c6:	f7ff fb0d 	bl	abe4 <prepare_io_for_reset>
    b5ca:	2201      	movs	r2, #1
    b5cc:	210f      	movs	r1, #15
    b5ce:	4812      	ldr	r0, [pc, #72]	; (b618 <modem_reset+0x54>)
    b5d0:	f012 f91e 	bl	1d810 <gpio_pin_set>
	return z_impl_k_sleep(timeout);
    b5d4:	f240 6067 	movw	r0, #1639	; 0x667
    b5d8:	2100      	movs	r1, #0
    b5da:	f006 fb5d 	bl	11c98 <z_impl_k_sleep>
	ictx.mdm_startup_reporting_on = false;
    b5de:	4d0f      	ldr	r5, [pc, #60]	; (b61c <modem_reset+0x58>)
    b5e0:	2400      	movs	r4, #0
    b5e2:	f885 4c5f 	strb.w	r4, [r5, #3167]	; 0xc5f
	set_sleep_state(HL7800_SLEEP_UNINITIALIZED);
    b5e6:	4620      	mov	r0, r4
    b5e8:	f7ff fee8 	bl	b3bc <set_sleep_state>
	set_network_state(HL7800_NOT_REGISTERED);
    b5ec:	4620      	mov	r0, r4
    b5ee:	f7ff fec7 	bl	b380 <set_network_state>
	set_startup_state(HL7800_STARTUP_STATE_UNKNOWN);
    b5f2:	2005      	movs	r0, #5
    b5f4:	f7ff fea6 	bl	b344 <set_startup_state>
	if (ictx.fw_update_state == HL7800_FOTA_REBOOT_AND_RECONFIGURE) {
    b5f8:	f895 3688 	ldrb.w	r3, [r5, #1672]	; 0x688
    b5fc:	2b07      	cmp	r3, #7
    b5fe:	d006      	beq.n	b60e <modem_reset+0x4a>
		set_fota_state(HL7800_FOTA_IDLE);
    b600:	2000      	movs	r0, #0
    b602:	f7ff ff0f 	bl	b424 <set_fota_state>
	z_impl_k_sem_reset(sem);
    b606:	4806      	ldr	r0, [pc, #24]	; (b620 <modem_reset+0x5c>)
    b608:	f005 fe52 	bl	112b0 <z_impl_k_sem_reset>
}
    b60c:	bd38      	pop	{r3, r4, r5, pc}
		set_fota_state(HL7800_FOTA_COMPLETE);
    b60e:	2008      	movs	r0, #8
    b610:	f7ff ff08 	bl	b424 <set_fota_state>
    b614:	e7f7      	b.n	b606 <modem_reset+0x42>
    b616:	bf00      	nop
    b618:	000207cc 	.word	0x000207cc
    b61c:	20000e70 	.word	0x20000e70
    b620:	200013b0 	.word	0x200013b0

0000b624 <modem_run>:
{
    b624:	b508      	push	{r3, lr}
    b626:	2200      	movs	r2, #0
    b628:	210f      	movs	r1, #15
    b62a:	4804      	ldr	r0, [pc, #16]	; (b63c <modem_run+0x18>)
    b62c:	f012 f8f0 	bl	1d810 <gpio_pin_set>
	return z_impl_k_sleep(timeout);
    b630:	f44f 70a4 	mov.w	r0, #328	; 0x148
    b634:	2100      	movs	r1, #0
    b636:	f006 fb2f 	bl	11c98 <z_impl_k_sleep>
}
    b63a:	bd08      	pop	{r3, pc}
    b63c:	000207cc 	.word	0x000207cc

0000b640 <modem_reset_and_configure>:
{
    b640:	b5d0      	push	{r4, r6, r7, lr}
    b642:	b088      	sub	sp, #32
	ictx.restarting = true;
    b644:	4bb6      	ldr	r3, [pc, #728]	; (b920 <modem_reset_and_configure+0x2e0>)
    b646:	2201      	movs	r2, #1
    b648:	771a      	strb	r2, [r3, #28]
	if (ictx.iface) {
    b64a:	6818      	ldr	r0, [r3, #0]
    b64c:	b108      	cbz	r0, b652 <modem_reset_and_configure+0x12>
		net_if_carrier_off(ictx.iface);
    b64e:	f7fb fd3d 	bl	70cc <net_if_carrier_off>
	hl7800_stop_rssi_work();
    b652:	f7ff ffaf 	bl	b5b4 <hl7800_stop_rssi_work>
	modem_reset();
    b656:	f7ff ffb5 	bl	b5c4 <modem_reset>
	modem_run();
    b65a:	f7ff ffe3 	bl	b624 <modem_run>
	ret = modem_boot_handler("Initialization");
    b65e:	48b1      	ldr	r0, [pc, #708]	; (b924 <modem_reset_and_configure+0x2e4>)
    b660:	f7ff fb72 	bl	ad48 <modem_boot_handler>
	if (!ictx.mdm_startup_reporting_on) {
    b664:	4bae      	ldr	r3, [pc, #696]	; (b920 <modem_reset_and_configure+0x2e0>)
    b666:	f893 3c5f 	ldrb.w	r3, [r3, #3167]	; 0xc5f
    b66a:	b9ab      	cbnz	r3, b698 <modem_reset_and_configure+0x58>
		SEND_AT_CMD_EXPECT_OK("AT+KSREP=1");
    b66c:	2000      	movs	r0, #0
    b66e:	9001      	str	r0, [sp, #4]
    b670:	2303      	movs	r3, #3
    b672:	9300      	str	r3, [sp, #0]
    b674:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    b678:	2300      	movs	r3, #0
    b67a:	49ab      	ldr	r1, [pc, #684]	; (b928 <modem_reset_and_configure+0x2e8>)
    b67c:	f7ff faea 	bl	ac54 <send_at_cmd>
    b680:	2800      	cmp	r0, #0
    b682:	dae8      	bge.n	b656 <modem_reset_and_configure+0x16>
	ictx.configured = false;
    b684:	4ba6      	ldr	r3, [pc, #664]	; (b920 <modem_reset_and_configure+0x2e0>)
    b686:	2200      	movs	r2, #0
    b688:	f883 2ca1 	strb.w	r2, [r3, #3233]	; 0xca1
	set_network_state(HL7800_UNABLE_TO_CONFIGURE);
    b68c:	20f0      	movs	r0, #240	; 0xf0
    b68e:	f7ff fe77 	bl	b380 <set_network_state>
}
    b692:	2000      	movs	r0, #0
    b694:	b008      	add	sp, #32
    b696:	bdd0      	pop	{r4, r6, r7, pc}
	} else if (ret < 0) {
    b698:	2800      	cmp	r0, #0
    b69a:	dbf3      	blt.n	b684 <modem_reset_and_configure+0x44>
	SEND_AT_CMD_EXPECT_OK("AT+CMEE=1");
    b69c:	2000      	movs	r0, #0
    b69e:	9001      	str	r0, [sp, #4]
    b6a0:	2303      	movs	r3, #3
    b6a2:	9300      	str	r3, [sp, #0]
    b6a4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    b6a8:	2300      	movs	r3, #0
    b6aa:	49a0      	ldr	r1, [pc, #640]	; (b92c <modem_reset_and_configure+0x2ec>)
    b6ac:	f7ff fad2 	bl	ac54 <send_at_cmd>
    b6b0:	2800      	cmp	r0, #0
    b6b2:	dbe7      	blt.n	b684 <modem_reset_and_configure+0x44>
	SEND_COMPLEX_AT_CMD("AT+CGMR");
    b6b4:	2301      	movs	r3, #1
    b6b6:	9301      	str	r3, [sp, #4]
    b6b8:	2303      	movs	r3, #3
    b6ba:	9300      	str	r3, [sp, #0]
    b6bc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    b6c0:	2300      	movs	r3, #0
    b6c2:	499b      	ldr	r1, [pc, #620]	; (b930 <modem_reset_and_configure+0x2f0>)
    b6c4:	2000      	movs	r0, #0
    b6c6:	f7ff fac5 	bl	ac54 <send_at_cmd>
    b6ca:	2800      	cmp	r0, #0
    b6cc:	dbda      	blt.n	b684 <modem_reset_and_configure+0x44>
	ret = compare_versions(ictx.mdm_revision, NEW_RAT_CMD_MIN_VERSION);
    b6ce:	4999      	ldr	r1, [pc, #612]	; (b934 <modem_reset_and_configure+0x2f4>)
    b6d0:	4899      	ldr	r0, [pc, #612]	; (b938 <modem_reset_and_configure+0x2f8>)
    b6d2:	f012 f999 	bl	1da08 <compare_versions>
	if (ret < 0) {
    b6d6:	2800      	cmp	r0, #0
    b6d8:	f2c0 8106 	blt.w	b8e8 <modem_reset_and_configure+0x2a8>
		ictx.new_rat_cmd_support = true;
    b6dc:	4b90      	ldr	r3, [pc, #576]	; (b920 <modem_reset_and_configure+0x2e0>)
    b6de:	2201      	movs	r2, #1
    b6e0:	f883 2c64 	strb.w	r2, [r3, #3172]	; 0xc64
	SEND_AT_CMD_EXPECT_OK("AT+KSRAT?");
    b6e4:	2000      	movs	r0, #0
    b6e6:	9001      	str	r0, [sp, #4]
    b6e8:	2303      	movs	r3, #3
    b6ea:	9300      	str	r3, [sp, #0]
    b6ec:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    b6f0:	2300      	movs	r3, #0
    b6f2:	4992      	ldr	r1, [pc, #584]	; (b93c <modem_reset_and_configure+0x2fc>)
    b6f4:	f7ff faae 	bl	ac54 <send_at_cmd>
    b6f8:	2800      	cmp	r0, #0
    b6fa:	dbc3      	blt.n	b684 <modem_reset_and_configure+0x44>
	SEND_AT_CMD_EXPECT_OK("AT+KBNDCFG?");
    b6fc:	2000      	movs	r0, #0
    b6fe:	9001      	str	r0, [sp, #4]
    b700:	2303      	movs	r3, #3
    b702:	9300      	str	r3, [sp, #0]
    b704:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    b708:	2300      	movs	r3, #0
    b70a:	498d      	ldr	r1, [pc, #564]	; (b940 <modem_reset_and_configure+0x300>)
    b70c:	f7ff faa2 	bl	ac54 <send_at_cmd>
    b710:	2800      	cmp	r0, #0
    b712:	dbb7      	blt.n	b684 <modem_reset_and_configure+0x44>
	if (ictx.mdm_bands_top != bands_top ||
    b714:	4b82      	ldr	r3, [pc, #520]	; (b920 <modem_reset_and_configure+0x2e0>)
    b716:	f8b3 3b8c 	ldrh.w	r3, [r3, #2956]	; 0xb8c
    b71a:	b94b      	cbnz	r3, b730 <modem_reset_and_configure+0xf0>
	    ictx.mdm_bands_middle != bands_middle ||
    b71c:	4b80      	ldr	r3, [pc, #512]	; (b920 <modem_reset_and_configure+0x2e0>)
    b71e:	f8d3 3b90 	ldr.w	r3, [r3, #2960]	; 0xb90
	if (ictx.mdm_bands_top != bands_top ||
    b722:	b92b      	cbnz	r3, b730 <modem_reset_and_configure+0xf0>
	    ictx.mdm_bands_bottom != bands_bottom) {
    b724:	4b7e      	ldr	r3, [pc, #504]	; (b920 <modem_reset_and_configure+0x2e0>)
    b726:	f8d3 2b94 	ldr.w	r2, [r3, #2964]	; 0xb94
	    ictx.mdm_bands_middle != bands_middle ||
    b72a:	4b86      	ldr	r3, [pc, #536]	; (b944 <modem_reset_and_configure+0x304>)
    b72c:	429a      	cmp	r2, r3
    b72e:	d00f      	beq.n	b750 <modem_reset_and_configure+0x110>
		snprintk(new_bands, sizeof(new_bands),
    b730:	4b84      	ldr	r3, [pc, #528]	; (b944 <modem_reset_and_configure+0x304>)
    b732:	9301      	str	r3, [sp, #4]
    b734:	2400      	movs	r4, #0
    b736:	9400      	str	r4, [sp, #0]
    b738:	4623      	mov	r3, r4
    b73a:	4a83      	ldr	r2, [pc, #524]	; (b948 <modem_reset_and_configure+0x308>)
    b73c:	2115      	movs	r1, #21
    b73e:	a802      	add	r0, sp, #8
    b740:	f00b f82f 	bl	167a2 <snprintk>
		ret = set_bands(new_bands, false);
    b744:	4621      	mov	r1, r4
    b746:	a802      	add	r0, sp, #8
    b748:	f000 f924 	bl	b994 <set_bands>
		if (ret < 0) {
    b74c:	42a0      	cmp	r0, r4
    b74e:	db99      	blt.n	b684 <modem_reset_and_configure+0x44>
	ictx.low_power_mode = HL7800_LPM_NONE;
    b750:	2000      	movs	r0, #0
    b752:	4b73      	ldr	r3, [pc, #460]	; (b920 <modem_reset_and_configure+0x2e0>)
    b754:	f883 0c72 	strb.w	r0, [r3, #3186]	; 0xc72
	SEND_AT_CMD_EXPECT_OK("AT+KSLEEP=2");
    b758:	9001      	str	r0, [sp, #4]
    b75a:	2303      	movs	r3, #3
    b75c:	9300      	str	r3, [sp, #0]
    b75e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    b762:	2300      	movs	r3, #0
    b764:	4979      	ldr	r1, [pc, #484]	; (b94c <modem_reset_and_configure+0x30c>)
    b766:	f7ff fa75 	bl	ac54 <send_at_cmd>
    b76a:	2800      	cmp	r0, #0
    b76c:	db8a      	blt.n	b684 <modem_reset_and_configure+0x44>
	SEND_AT_CMD_EXPECT_OK("AT+CPSMS=0");
    b76e:	2000      	movs	r0, #0
    b770:	9001      	str	r0, [sp, #4]
    b772:	2303      	movs	r3, #3
    b774:	9300      	str	r3, [sp, #0]
    b776:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    b77a:	2300      	movs	r3, #0
    b77c:	4974      	ldr	r1, [pc, #464]	; (b950 <modem_reset_and_configure+0x310>)
    b77e:	f7ff fa69 	bl	ac54 <send_at_cmd>
    b782:	2800      	cmp	r0, #0
    b784:	f6ff af7e 	blt.w	b684 <modem_reset_and_configure+0x44>
	SEND_AT_CMD_EXPECT_OK("AT+CEDRXS=0");
    b788:	2000      	movs	r0, #0
    b78a:	9001      	str	r0, [sp, #4]
    b78c:	2303      	movs	r3, #3
    b78e:	9300      	str	r3, [sp, #0]
    b790:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    b794:	2300      	movs	r3, #0
    b796:	496f      	ldr	r1, [pc, #444]	; (b954 <modem_reset_and_configure+0x314>)
    b798:	f7ff fa5c 	bl	ac54 <send_at_cmd>
    b79c:	2800      	cmp	r0, #0
    b79e:	f6ff af71 	blt.w	b684 <modem_reset_and_configure+0x44>
	SEND_COMPLEX_AT_CMD("AT+CGMI");
    b7a2:	2301      	movs	r3, #1
    b7a4:	9301      	str	r3, [sp, #4]
    b7a6:	2303      	movs	r3, #3
    b7a8:	9300      	str	r3, [sp, #0]
    b7aa:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    b7ae:	2300      	movs	r3, #0
    b7b0:	4969      	ldr	r1, [pc, #420]	; (b958 <modem_reset_and_configure+0x318>)
    b7b2:	2000      	movs	r0, #0
    b7b4:	f7ff fa4e 	bl	ac54 <send_at_cmd>
    b7b8:	2800      	cmp	r0, #0
    b7ba:	f6ff af63 	blt.w	b684 <modem_reset_and_configure+0x44>
	SEND_COMPLEX_AT_CMD("AT+CGMM");
    b7be:	2301      	movs	r3, #1
    b7c0:	9301      	str	r3, [sp, #4]
    b7c2:	2303      	movs	r3, #3
    b7c4:	9300      	str	r3, [sp, #0]
    b7c6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    b7ca:	2300      	movs	r3, #0
    b7cc:	4963      	ldr	r1, [pc, #396]	; (b95c <modem_reset_and_configure+0x31c>)
    b7ce:	2000      	movs	r0, #0
    b7d0:	f7ff fa40 	bl	ac54 <send_at_cmd>
    b7d4:	2800      	cmp	r0, #0
    b7d6:	f6ff af55 	blt.w	b684 <modem_reset_and_configure+0x44>
	SEND_COMPLEX_AT_CMD("AT+CGSN");
    b7da:	2301      	movs	r3, #1
    b7dc:	9301      	str	r3, [sp, #4]
    b7de:	2303      	movs	r3, #3
    b7e0:	9300      	str	r3, [sp, #0]
    b7e2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    b7e6:	2300      	movs	r3, #0
    b7e8:	495d      	ldr	r1, [pc, #372]	; (b960 <modem_reset_and_configure+0x320>)
    b7ea:	2000      	movs	r0, #0
    b7ec:	f7ff fa32 	bl	ac54 <send_at_cmd>
    b7f0:	2800      	cmp	r0, #0
    b7f2:	f6ff af47 	blt.w	b684 <modem_reset_and_configure+0x44>
	SEND_COMPLEX_AT_CMD("AT+KGSN=3");
    b7f6:	2301      	movs	r3, #1
    b7f8:	9301      	str	r3, [sp, #4]
    b7fa:	2303      	movs	r3, #3
    b7fc:	9300      	str	r3, [sp, #0]
    b7fe:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    b802:	2300      	movs	r3, #0
    b804:	4957      	ldr	r1, [pc, #348]	; (b964 <modem_reset_and_configure+0x324>)
    b806:	2000      	movs	r0, #0
    b808:	f7ff fa24 	bl	ac54 <send_at_cmd>
    b80c:	2800      	cmp	r0, #0
    b80e:	f6ff af39 	blt.w	b684 <modem_reset_and_configure+0x44>
	if (ictx.mdm_startup_state != HL7800_STARTUP_STATE_SIM_NOT_PRESENT) {
    b812:	4b43      	ldr	r3, [pc, #268]	; (b920 <modem_reset_and_configure+0x2e0>)
    b814:	f893 3b4a 	ldrb.w	r3, [r3, #2890]	; 0xb4a
    b818:	2b02      	cmp	r3, #2
    b81a:	d16a      	bne.n	b8f2 <modem_reset_and_configure+0x2b2>
	SEND_AT_CMD_EXPECT_OK("AT+CGDCONT?");
    b81c:	2000      	movs	r0, #0
    b81e:	9001      	str	r0, [sp, #4]
    b820:	2303      	movs	r3, #3
    b822:	9300      	str	r3, [sp, #0]
    b824:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    b828:	2300      	movs	r3, #0
    b82a:	494f      	ldr	r1, [pc, #316]	; (b968 <modem_reset_and_configure+0x328>)
    b82c:	f7ff fa12 	bl	ac54 <send_at_cmd>
    b830:	2800      	cmp	r0, #0
    b832:	f6ff af27 	blt.w	b684 <modem_reset_and_configure+0x44>
	if (strcmp(ictx.mdm_pdp_addr_fam, MODEM_HL7800_ADDRESS_FAMILY)) {
    b836:	494d      	ldr	r1, [pc, #308]	; (b96c <modem_reset_and_configure+0x32c>)
    b838:	484d      	ldr	r0, [pc, #308]	; (b970 <modem_reset_and_configure+0x330>)
    b83a:	f7f5 faaf 	bl	d9c <strcmp>
    b83e:	b128      	cbz	r0, b84c <modem_reset_and_configure+0x20c>
		ret = write_apn(ictx.mdm_apn.value);
    b840:	484c      	ldr	r0, [pc, #304]	; (b974 <modem_reset_and_configure+0x334>)
    b842:	f7ff fb43 	bl	aecc <write_apn>
		if (ret < 0) {
    b846:	2800      	cmp	r0, #0
    b848:	f6ff af1c 	blt.w	b684 <modem_reset_and_configure+0x44>
	ret = setup_gprs_connection(ictx.mdm_apn.value);
    b84c:	4849      	ldr	r0, [pc, #292]	; (b974 <modem_reset_and_configure+0x334>)
    b84e:	f7ff fb75 	bl	af3c <setup_gprs_connection>
	if (ret < 0) {
    b852:	2800      	cmp	r0, #0
    b854:	f6ff af16 	blt.w	b684 <modem_reset_and_configure+0x44>
	SEND_AT_CMD_IGNORE_ERROR("AT+WPPP?");
    b858:	f44f 3640 	mov.w	r6, #196608	; 0x30000
    b85c:	2700      	movs	r7, #0
    b85e:	2400      	movs	r4, #0
    b860:	9401      	str	r4, [sp, #4]
    b862:	9400      	str	r4, [sp, #0]
    b864:	4632      	mov	r2, r6
    b866:	463b      	mov	r3, r7
    b868:	4943      	ldr	r1, [pc, #268]	; (b978 <modem_reset_and_configure+0x338>)
    b86a:	4620      	mov	r0, r4
    b86c:	f7ff f9f2 	bl	ac54 <send_at_cmd>
	SEND_COMPLEX_AT_CMD("AT+CEREG?");
    b870:	2301      	movs	r3, #1
    b872:	9301      	str	r3, [sp, #4]
    b874:	2303      	movs	r3, #3
    b876:	9300      	str	r3, [sp, #0]
    b878:	4632      	mov	r2, r6
    b87a:	463b      	mov	r3, r7
    b87c:	493f      	ldr	r1, [pc, #252]	; (b97c <modem_reset_and_configure+0x33c>)
    b87e:	4620      	mov	r0, r4
    b880:	f7ff f9e8 	bl	ac54 <send_at_cmd>
    b884:	42a0      	cmp	r0, r4
    b886:	f6ff aefd 	blt.w	b684 <modem_reset_and_configure+0x44>
	SEND_AT_CMD_EXPECT_OK("AT+CEREG=4");
    b88a:	4620      	mov	r0, r4
    b88c:	9401      	str	r4, [sp, #4]
    b88e:	2303      	movs	r3, #3
    b890:	9300      	str	r3, [sp, #0]
    b892:	4632      	mov	r2, r6
    b894:	463b      	mov	r3, r7
    b896:	493a      	ldr	r1, [pc, #232]	; (b980 <modem_reset_and_configure+0x340>)
    b898:	f7ff f9dc 	bl	ac54 <send_at_cmd>
    b89c:	42a0      	cmp	r0, r4
    b89e:	f6ff aef1 	blt.w	b684 <modem_reset_and_configure+0x44>
	SEND_AT_CMD_EXPECT_OK("AT+KTCPCFG?");
    b8a2:	4620      	mov	r0, r4
    b8a4:	9401      	str	r4, [sp, #4]
    b8a6:	2303      	movs	r3, #3
    b8a8:	9300      	str	r3, [sp, #0]
    b8aa:	4632      	mov	r2, r6
    b8ac:	463b      	mov	r3, r7
    b8ae:	4935      	ldr	r1, [pc, #212]	; (b984 <modem_reset_and_configure+0x344>)
    b8b0:	f7ff f9d0 	bl	ac54 <send_at_cmd>
    b8b4:	42a0      	cmp	r0, r4
    b8b6:	f6ff aee5 	blt.w	b684 <modem_reset_and_configure+0x44>
	SEND_AT_CMD_EXPECT_OK("AT+KUDPCFG?");
    b8ba:	4620      	mov	r0, r4
    b8bc:	9401      	str	r4, [sp, #4]
    b8be:	2303      	movs	r3, #3
    b8c0:	9300      	str	r3, [sp, #0]
    b8c2:	4632      	mov	r2, r6
    b8c4:	463b      	mov	r3, r7
    b8c6:	4930      	ldr	r1, [pc, #192]	; (b988 <modem_reset_and_configure+0x348>)
    b8c8:	f7ff f9c4 	bl	ac54 <send_at_cmd>
    b8cc:	42a0      	cmp	r0, r4
    b8ce:	f6ff aed9 	blt.w	b684 <modem_reset_and_configure+0x44>
	ictx.restarting = false;
    b8d2:	4913      	ldr	r1, [pc, #76]	; (b920 <modem_reset_and_configure+0x2e0>)
    b8d4:	770c      	strb	r4, [r1, #28]
	ictx.configured = true;
    b8d6:	2301      	movs	r3, #1
    b8d8:	f881 3ca1 	strb.w	r3, [r1, #3233]	; 0xca1
	event_handler(HL7800_EVENT_APN_UPDATE, &ictx.mdm_apn);
    b8dc:	f601 319d 	addw	r1, r1, #2973	; 0xb9d
    b8e0:	2002      	movs	r0, #2
    b8e2:	f7ff fcfd 	bl	b2e0 <event_handler>
	return 0;
    b8e6:	e6d4      	b.n	b692 <modem_reset_and_configure+0x52>
		ictx.new_rat_cmd_support = false;
    b8e8:	4b0d      	ldr	r3, [pc, #52]	; (b920 <modem_reset_and_configure+0x2e0>)
    b8ea:	2200      	movs	r2, #0
    b8ec:	f883 2c64 	strb.w	r2, [r3, #3172]	; 0xc64
    b8f0:	e6f8      	b.n	b6e4 <modem_reset_and_configure+0xa4>
		SEND_AT_CMD_IGNORE_ERROR("AT+CCID?");
    b8f2:	f44f 3640 	mov.w	r6, #196608	; 0x30000
    b8f6:	2700      	movs	r7, #0
    b8f8:	2400      	movs	r4, #0
    b8fa:	9401      	str	r4, [sp, #4]
    b8fc:	9400      	str	r4, [sp, #0]
    b8fe:	4632      	mov	r2, r6
    b900:	463b      	mov	r3, r7
    b902:	4922      	ldr	r1, [pc, #136]	; (b98c <modem_reset_and_configure+0x34c>)
    b904:	4620      	mov	r0, r4
    b906:	f7ff f9a5 	bl	ac54 <send_at_cmd>
		(void)send_at_cmd(NULL, "AT+CIMI", MDM_CMD_SEND_TIMEOUT, MDM_DEFAULT_AT_CMD_RETRIES,
    b90a:	2301      	movs	r3, #1
    b90c:	9301      	str	r3, [sp, #4]
    b90e:	2303      	movs	r3, #3
    b910:	9300      	str	r3, [sp, #0]
    b912:	4632      	mov	r2, r6
    b914:	463b      	mov	r3, r7
    b916:	491e      	ldr	r1, [pc, #120]	; (b990 <modem_reset_and_configure+0x350>)
    b918:	4620      	mov	r0, r4
    b91a:	f7ff f99b 	bl	ac54 <send_at_cmd>
    b91e:	e77d      	b.n	b81c <modem_reset_and_configure+0x1dc>
    b920:	20000e70 	.word	0x20000e70
    b924:	00021b60 	.word	0x00021b60
    b928:	00021b70 	.word	0x00021b70
    b92c:	00021b7c 	.word	0x00021b7c
    b930:	00021b88 	.word	0x00021b88
    b934:	00021b90 	.word	0x00021b90
    b938:	2000193c 	.word	0x2000193c
    b93c:	00021ba0 	.word	0x00021ba0
    b940:	00021bac 	.word	0x00021bac
    b944:	0808189f 	.word	0x0808189f
    b948:	00021bb8 	.word	0x00021bb8
    b94c:	00021bc8 	.word	0x00021bc8
    b950:	00021bd4 	.word	0x00021bd4
    b954:	00021be0 	.word	0x00021be0
    b958:	00021bec 	.word	0x00021bec
    b95c:	00021bf4 	.word	0x00021bf4
    b960:	00021bfc 	.word	0x00021bfc
    b964:	00021c04 	.word	0x00021c04
    b968:	00021c24 	.word	0x00021c24
    b96c:	00021a3c 	.word	0x00021a3c
    b970:	20001ad7 	.word	0x20001ad7
    b974:	20001a0d 	.word	0x20001a0d
    b978:	00021c30 	.word	0x00021c30
    b97c:	00021c3c 	.word	0x00021c3c
    b980:	00021c48 	.word	0x00021c48
    b984:	00021a98 	.word	0x00021a98
    b988:	00021aa4 	.word	0x00021aa4
    b98c:	00021c10 	.word	0x00021c10
    b990:	00021c1c 	.word	0x00021c1c

0000b994 <set_bands>:
{
    b994:	b510      	push	{r4, lr}
    b996:	b08c      	sub	sp, #48	; 0x30
    b998:	460c      	mov	r4, r1
	snprintk(cmd, sizeof(cmd), "AT+KBNDCFG=%d,%s", ictx.mdm_rat, bands);
    b99a:	9000      	str	r0, [sp, #0]
    b99c:	4b14      	ldr	r3, [pc, #80]	; (b9f0 <set_bands+0x5c>)
    b99e:	f893 3b4b 	ldrb.w	r3, [r3, #2891]	; 0xb4b
    b9a2:	4a14      	ldr	r2, [pc, #80]	; (b9f4 <set_bands+0x60>)
    b9a4:	2122      	movs	r1, #34	; 0x22
    b9a6:	a803      	add	r0, sp, #12
    b9a8:	f00a fefb 	bl	167a2 <snprintk>
	ret = send_at_cmd(NULL, cmd, MDM_CMD_SEND_TIMEOUT, MDM_DEFAULT_AT_CMD_RETRIES, false);
    b9ac:	2000      	movs	r0, #0
    b9ae:	9001      	str	r0, [sp, #4]
    b9b0:	2303      	movs	r3, #3
    b9b2:	9300      	str	r3, [sp, #0]
    b9b4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    b9b8:	2300      	movs	r3, #0
    b9ba:	a903      	add	r1, sp, #12
    b9bc:	f7ff f94a 	bl	ac54 <send_at_cmd>
	if (ret < 0) {
    b9c0:	2800      	cmp	r0, #0
    b9c2:	db12      	blt.n	b9ea <set_bands+0x56>
	if (!full_reboot) {
    b9c4:	b97c      	cbnz	r4, b9e6 <set_bands+0x52>
		ret = send_at_cmd(NULL, "AT+CFUN=1,1", MDM_CMD_SEND_TIMEOUT,
    b9c6:	2000      	movs	r0, #0
    b9c8:	9001      	str	r0, [sp, #4]
    b9ca:	2303      	movs	r3, #3
    b9cc:	9300      	str	r3, [sp, #0]
    b9ce:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    b9d2:	2300      	movs	r3, #0
    b9d4:	4908      	ldr	r1, [pc, #32]	; (b9f8 <set_bands+0x64>)
    b9d6:	f7ff f93d 	bl	ac54 <send_at_cmd>
		if (ret < 0) {
    b9da:	2800      	cmp	r0, #0
    b9dc:	db05      	blt.n	b9ea <set_bands+0x56>
		ret = modem_boot_handler("LTE bands were just set");
    b9de:	4807      	ldr	r0, [pc, #28]	; (b9fc <set_bands+0x68>)
    b9e0:	f7ff f9b2 	bl	ad48 <modem_boot_handler>
    b9e4:	e001      	b.n	b9ea <set_bands+0x56>
		ret = modem_reset_and_configure();
    b9e6:	f7ff fe2b 	bl	b640 <modem_reset_and_configure>
}
    b9ea:	b00c      	add	sp, #48	; 0x30
    b9ec:	bd10      	pop	{r4, pc}
    b9ee:	bf00      	nop
    b9f0:	20000e70 	.word	0x20000e70
    b9f4:	00021c54 	.word	0x00021c54
    b9f8:	00021c68 	.word	0x00021c68
    b9fc:	00021c74 	.word	0x00021c74

0000ba00 <offload_put>:
static int offload_put(struct net_context *context)
{
	struct hl7800_socket *sock;
	char cmd[sizeof("AT+KTCPCLOSE=##")];

	if (!context) {
    ba00:	2800      	cmp	r0, #0
    ba02:	d047      	beq.n	ba94 <offload_put+0x94>
{
    ba04:	b530      	push	{r4, r5, lr}
    ba06:	b087      	sub	sp, #28
    ba08:	4605      	mov	r5, r0
		return -EINVAL;
	}

	sock = (struct hl7800_socket *)context->offload_context;
    ba0a:	f8d0 4080 	ldr.w	r4, [r0, #128]	; 0x80
	if (!sock) {
    ba0e:	2c00      	cmp	r4, #0
    ba10:	d043      	beq.n	ba9a <offload_put+0x9a>
		/* socket was already closed?  Exit quietly here. */
		return 0;
	}

	/* cancel notif work if queued */
	k_work_cancel_delayable(&sock->notif_work);
    ba12:	f104 0068 	add.w	r0, r4, #104	; 0x68
    ba16:	f013 fd40 	bl	1f49a <k_work_cancel_delayable>

	hl7800_lock();
    ba1a:	f011 ff9d 	bl	1d958 <hl7800_lock>

	/* close connection */
	if (sock->type == SOCK_STREAM) {
    ba1e:	79a3      	ldrb	r3, [r4, #6]
    ba20:	2b01      	cmp	r3, #1
    ba22:	d027      	beq.n	ba74 <offload_put+0x74>
		snprintk(cmd, sizeof(cmd), "AT+KTCPCLOSE=%d",
			 sock->socket_id);
	} else {
		snprintk(cmd, sizeof(cmd), "AT+KUDPCLOSE=%d",
    ba24:	69e3      	ldr	r3, [r4, #28]
    ba26:	4a1e      	ldr	r2, [pc, #120]	; (baa0 <offload_put+0xa0>)
    ba28:	2110      	movs	r1, #16
    ba2a:	a802      	add	r0, sp, #8
    ba2c:	f00a feb9 	bl	167a2 <snprintk>
			 sock->socket_id);
	}

	wakeup_hl7800();

	if ((sock->type == SOCK_DGRAM) || (sock->error != -ENOTCONN)) {
    ba30:	79a3      	ldrb	r3, [r4, #6]
    ba32:	2b02      	cmp	r3, #2
    ba34:	d003      	beq.n	ba3e <offload_put+0x3e>
    ba36:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ba38:	f113 0f80 	cmn.w	r3, #128	; 0x80
    ba3c:	d009      	beq.n	ba52 <offload_put+0x52>
		send_at_cmd(sock, cmd, MDM_CMD_SEND_TIMEOUT, 0, false);
    ba3e:	2300      	movs	r3, #0
    ba40:	9301      	str	r3, [sp, #4]
    ba42:	9300      	str	r3, [sp, #0]
    ba44:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    ba48:	2300      	movs	r3, #0
    ba4a:	a902      	add	r1, sp, #8
    ba4c:	4620      	mov	r0, r4
    ba4e:	f7ff f901 	bl	ac54 <send_at_cmd>
	}

	if (sock->type == SOCK_STREAM) {
    ba52:	79a1      	ldrb	r1, [r4, #6]
    ba54:	2901      	cmp	r1, #1
    ba56:	d014      	beq.n	ba82 <offload_put+0x82>
		/* delete session */
		delete_socket(sock, sock->type, sock->socket_id);
	}
	allow_sleep(true);

	socket_put(sock);
    ba58:	4620      	mov	r0, r4
    ba5a:	f012 f802 	bl	1da62 <socket_put>
	net_context_unref(context);
    ba5e:	4628      	mov	r0, r5
    ba60:	f00e fcf1 	bl	1a446 <net_context_unref>
	if (sock->type == SOCK_STREAM) {
    ba64:	79a3      	ldrb	r3, [r4, #6]
    ba66:	2b01      	cmp	r3, #1
    ba68:	d010      	beq.n	ba8c <offload_put+0x8c>
		 * unref a second time.
		 */
		net_context_unref(context);
	}

	hl7800_unlock();
    ba6a:	f011 ff7b 	bl	1d964 <hl7800_unlock>

	return 0;
    ba6e:	2000      	movs	r0, #0
}
    ba70:	b007      	add	sp, #28
    ba72:	bd30      	pop	{r4, r5, pc}
		snprintk(cmd, sizeof(cmd), "AT+KTCPCLOSE=%d",
    ba74:	69e3      	ldr	r3, [r4, #28]
    ba76:	4a0b      	ldr	r2, [pc, #44]	; (baa4 <offload_put+0xa4>)
    ba78:	2110      	movs	r1, #16
    ba7a:	a802      	add	r0, sp, #8
    ba7c:	f00a fe91 	bl	167a2 <snprintk>
    ba80:	e7d6      	b.n	ba30 <offload_put+0x30>
		delete_socket(sock, sock->type, sock->socket_id);
    ba82:	7f22      	ldrb	r2, [r4, #28]
    ba84:	4620      	mov	r0, r4
    ba86:	f7ff fab7 	bl	aff8 <delete_socket>
    ba8a:	e7e5      	b.n	ba58 <offload_put+0x58>
		net_context_unref(context);
    ba8c:	4628      	mov	r0, r5
    ba8e:	f00e fcda 	bl	1a446 <net_context_unref>
    ba92:	e7ea      	b.n	ba6a <offload_put+0x6a>
		return -EINVAL;
    ba94:	f06f 0015 	mvn.w	r0, #21
}
    ba98:	4770      	bx	lr
		return 0;
    ba9a:	2000      	movs	r0, #0
    ba9c:	e7e8      	b.n	ba70 <offload_put+0x70>
    ba9e:	bf00      	nop
    baa0:	00021ac0 	.word	0x00021ac0
    baa4:	00021c8c 	.word	0x00021c8c

0000baa8 <offload_get>:
{
    baa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    baac:	4680      	mov	r8, r0
    baae:	460e      	mov	r6, r1
    bab0:	4617      	mov	r7, r2
    bab2:	461d      	mov	r5, r3
	hl7800_lock();
    bab4:	f011 ff50 	bl	1d958 <hl7800_lock>
	sock = socket_get();
    bab8:	f7fe ff34 	bl	a924 <socket_get>
	if (!sock) {
    babc:	b378      	cbz	r0, bb1e <offload_get+0x76>
    babe:	4604      	mov	r4, r0
	(*context)->offload_context = sock;
    bac0:	682b      	ldr	r3, [r5, #0]
    bac2:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
	(*context)->iface = net_if_get_by_iface(ictx.iface);
    bac6:	4b17      	ldr	r3, [pc, #92]	; (bb24 <offload_get+0x7c>)
    bac8:	6818      	ldr	r0, [r3, #0]
    baca:	f7fb fa87 	bl	6fdc <net_if_get_by_iface>
    bace:	682b      	ldr	r3, [r5, #0]
    bad0:	f883 008a 	strb.w	r0, [r3, #138]	; 0x8a
	sock->family = family;
    bad4:	f8a4 8004 	strh.w	r8, [r4, #4]
	sock->type = type;
    bad8:	71a6      	strb	r6, [r4, #6]
	sock->ip_proto = ip_proto;
    bada:	71e7      	strb	r7, [r4, #7]
	sock->context = *context;
    badc:	682b      	ldr	r3, [r5, #0]
    bade:	6023      	str	r3, [r4, #0]
	sock->reconfig = false;
    bae0:	2300      	movs	r3, #0
    bae2:	7663      	strb	r3, [r4, #25]
	sock->created = false;
    bae4:	7623      	strb	r3, [r4, #24]
	sock->socket_id = MDM_CREATE_SOCKET_ID;
    bae6:	2307      	movs	r3, #7
    bae8:	61e3      	str	r3, [r4, #28]
	if (type == SOCK_DGRAM) {
    baea:	2e02      	cmp	r6, #2
    baec:	d005      	beq.n	bafa <offload_get+0x52>
	int ret = 0;
    baee:	2500      	movs	r5, #0
	hl7800_unlock();
    baf0:	f011 ff38 	bl	1d964 <hl7800_unlock>
}
    baf4:	4628      	mov	r0, r5
    baf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (reconfigure_IP_connection() < 0) {
    bafa:	f7ff fa4f 	bl	af9c <reconfigure_IP_connection>
    bafe:	2800      	cmp	r0, #0
    bb00:	db08      	blt.n	bb14 <offload_get+0x6c>
		ret = configure_UDP_socket(sock);
    bb02:	4620      	mov	r0, r4
    bb04:	f7ff fb66 	bl	b1d4 <configure_UDP_socket>
		if (ret < 0) {
    bb08:	1e05      	subs	r5, r0, #0
    bb0a:	daf1      	bge.n	baf0 <offload_get+0x48>
			socket_put(sock);
    bb0c:	4620      	mov	r0, r4
    bb0e:	f011 ffa8 	bl	1da62 <socket_put>
			goto done;
    bb12:	e7ed      	b.n	baf0 <offload_get+0x48>
			socket_put(sock);
    bb14:	4620      	mov	r0, r4
    bb16:	f011 ffa4 	bl	1da62 <socket_put>
	int ret = 0;
    bb1a:	2500      	movs	r5, #0
			goto done;
    bb1c:	e7e8      	b.n	baf0 <offload_get+0x48>
		ret = -ENOMEM;
    bb1e:	f06f 050b 	mvn.w	r5, #11
    bb22:	e7e5      	b.n	baf0 <offload_get+0x48>
    bb24:	20000e70 	.word	0x20000e70

0000bb28 <offload_iface_init>:

	return ret;
}

static void offload_iface_init(struct net_if *iface)
{
    bb28:	b538      	push	{r3, r4, r5, lr}
    bb2a:	4604      	mov	r4, r0
	return iface->if_dev->dev;
    bb2c:	6803      	ldr	r3, [r0, #0]
    bb2e:	681a      	ldr	r2, [r3, #0]
	const struct device *dev = net_if_get_device(iface);
	struct hl7800_iface_ctx *ctx = dev->data;
    bb30:	6912      	ldr	r2, [r2, #16]

	iface->if_dev->offload = &offload_funcs;
    bb32:	4908      	ldr	r1, [pc, #32]	; (bb54 <offload_iface_init+0x2c>)
    bb34:	6199      	str	r1, [r3, #24]
	ctx->iface = iface;
    bb36:	6010      	str	r0, [r2, #0]

	if (!IS_ENABLED(CONFIG_MODEM_HL7800_BOOT_DELAY)) {
		hl7800_build_mac(&ictx);
    bb38:	4d07      	ldr	r5, [pc, #28]	; (bb58 <offload_iface_init+0x30>)
    bb3a:	4628      	mov	r0, r5
    bb3c:	f011 fef9 	bl	1d932 <hl7800_build_mac>
	return net_if_set_link_addr_locked(iface, addr, len, type);
    bb40:	2303      	movs	r3, #3
    bb42:	2206      	movs	r2, #6
    bb44:	1d29      	adds	r1, r5, #4
    bb46:	4620      	mov	r0, r4
    bb48:	f7fa feb4 	bl	68b4 <net_if_set_link_addr_locked>
		net_if_set_link_addr(iface, ictx.mac_addr, sizeof(ictx.mac_addr),
				     NET_LINK_ETHERNET);
		ictx.initialized = true;
    bb4c:	2301      	movs	r3, #1
    bb4e:	776b      	strb	r3, [r5, #29]
	}
}
    bb50:	bd38      	pop	{r3, r4, r5, pc}
    bb52:	bf00      	nop
    bb54:	20000044 	.word	0x20000044
    bb58:	20000e70 	.word	0x20000e70

0000bb5c <on_cmd_device_service_ind>:
{
    bb5c:	b570      	push	{r4, r5, r6, lr}
    bb5e:	b0a2      	sub	sp, #136	; 0x88
    bb60:	4604      	mov	r4, r0
    bb62:	460d      	mov	r5, r1
	memset(value, 0, sizeof(value));
    bb64:	2680      	movs	r6, #128	; 0x80
    bb66:	4632      	mov	r2, r6
    bb68:	2100      	movs	r1, #0
    bb6a:	a802      	add	r0, sp, #8
    bb6c:	f014 f964 	bl	1fe38 <memset>
	out_len = net_buf_linearize(value, sizeof(value), *buf, 0, len);
    bb70:	9500      	str	r5, [sp, #0]
    bb72:	2300      	movs	r3, #0
    bb74:	6822      	ldr	r2, [r4, #0]
    bb76:	4631      	mov	r1, r6
    bb78:	a802      	add	r0, sp, #8
    bb7a:	f00d fbfc 	bl	19376 <net_buf_linearize>
	if (out_len > 0) {
    bb7e:	b938      	cbnz	r0, bb90 <on_cmd_device_service_ind+0x34>
	if (ictx.device_services_ind == WDSI_PKG_DOWNLOADED) {
    bb80:	4b0a      	ldr	r3, [pc, #40]	; (bbac <on_cmd_device_service_ind+0x50>)
    bb82:	f8d3 3c60 	ldr.w	r3, [r3, #3168]	; 0xc60
    bb86:	2b03      	cmp	r3, #3
    bb88:	d00b      	beq.n	bba2 <on_cmd_device_service_ind+0x46>
}
    bb8a:	2001      	movs	r0, #1
    bb8c:	b022      	add	sp, #136	; 0x88
    bb8e:	bd70      	pop	{r4, r5, r6, pc}
		ictx.device_services_ind = strtol(value, NULL, 10);
    bb90:	220a      	movs	r2, #10
    bb92:	2100      	movs	r1, #0
    bb94:	a802      	add	r0, sp, #8
    bb96:	f007 f8d9 	bl	12d4c <strtol>
    bb9a:	4b04      	ldr	r3, [pc, #16]	; (bbac <on_cmd_device_service_ind+0x50>)
    bb9c:	f8c3 0c60 	str.w	r0, [r3, #3168]	; 0xc60
    bba0:	e7ee      	b.n	bb80 <on_cmd_device_service_ind+0x24>
		k_work_submit_to_queue(&hl7800_workq,
    bba2:	4903      	ldr	r1, [pc, #12]	; (bbb0 <on_cmd_device_service_ind+0x54>)
    bba4:	4803      	ldr	r0, [pc, #12]	; (bbb4 <on_cmd_device_service_ind+0x58>)
    bba6:	f013 fc1b 	bl	1f3e0 <k_work_submit_to_queue>
    bbaa:	e7ee      	b.n	bb8a <on_cmd_device_service_ind+0x2e>
    bbac:	20000e70 	.word	0x20000e70
    bbb0:	20001914 	.word	0x20001914
    bbb4:	20001b20 	.word	0x20001b20

0000bbb8 <on_cmd_sock_error_code>:
{
    bbb8:	b500      	push	{lr}
    bbba:	b0a3      	sub	sp, #140	; 0x8c
	out_len = net_buf_linearize(value, sizeof(value), *buf, 0, len);
    bbbc:	6802      	ldr	r2, [r0, #0]
    bbbe:	9100      	str	r1, [sp, #0]
    bbc0:	2300      	movs	r3, #0
    bbc2:	2180      	movs	r1, #128	; 0x80
    bbc4:	a802      	add	r0, sp, #8
    bbc6:	f00d fbd6 	bl	19376 <net_buf_linearize>
	value[out_len] = 0;
    bbca:	f100 0388 	add.w	r3, r0, #136	; 0x88
    bbce:	eb0d 0003 	add.w	r0, sp, r3
    bbd2:	2300      	movs	r3, #0
    bbd4:	f800 3c80 	strb.w	r3, [r0, #-128]
	sock = socket_from_id(ictx.last_socket_id);
    bbd8:	4b0c      	ldr	r3, [pc, #48]	; (bc0c <on_cmd_sock_error_code+0x54>)
    bbda:	f8d3 04d8 	ldr.w	r0, [r3, #1240]	; 0x4d8
    bbde:	f7fe feb7 	bl	a950 <socket_from_id>
	if (!sock) {
    bbe2:	b148      	cbz	r0, bbf8 <on_cmd_sock_error_code+0x40>
		sock->error = -EIO;
    bbe4:	f06f 0204 	mvn.w	r2, #4
    bbe8:	6242      	str	r2, [r0, #36]	; 0x24
		k_sem_give(&sock->sock_send_sem);
    bbea:	302c      	adds	r0, #44	; 0x2c
	z_impl_k_sem_give(sem);
    bbec:	f005 fb10 	bl	11210 <z_impl_k_sem_give>
}
    bbf0:	2001      	movs	r0, #1
    bbf2:	b023      	add	sp, #140	; 0x8c
    bbf4:	f85d fb04 	ldr.w	pc, [sp], #4
		ictx.last_error = -EIO;
    bbf8:	4804      	ldr	r0, [pc, #16]	; (bc0c <on_cmd_sock_error_code+0x54>)
    bbfa:	f06f 0304 	mvn.w	r3, #4
    bbfe:	f8c0 34dc 	str.w	r3, [r0, #1244]	; 0x4dc
    bc02:	f500 60a5 	add.w	r0, r0, #1320	; 0x528
    bc06:	f005 fb03 	bl	11210 <z_impl_k_sem_give>
}
    bc0a:	e7f1      	b.n	bbf0 <on_cmd_sock_error_code+0x38>
    bc0c:	20000e70 	.word	0x20000e70

0000bc10 <on_cmd_sockerror>:
{
    bc10:	b570      	push	{r4, r5, r6, lr}
    bc12:	b0a2      	sub	sp, #136	; 0x88
	if (len > 0) {
    bc14:	b971      	cbnz	r1, bc34 <on_cmd_sockerror+0x24>
	sock = socket_from_id(ictx.last_socket_id);
    bc16:	4b14      	ldr	r3, [pc, #80]	; (bc68 <on_cmd_sockerror+0x58>)
    bc18:	f8d3 04d8 	ldr.w	r0, [r3, #1240]	; 0x4d8
    bc1c:	f7fe fe98 	bl	a950 <socket_from_id>
	if (!sock) {
    bc20:	b1c0      	cbz	r0, bc54 <on_cmd_sockerror+0x44>
		sock->error = -EIO;
    bc22:	f06f 0204 	mvn.w	r2, #4
    bc26:	6242      	str	r2, [r0, #36]	; 0x24
		k_sem_give(&sock->sock_send_sem);
    bc28:	302c      	adds	r0, #44	; 0x2c
	z_impl_k_sem_give(sem);
    bc2a:	f005 faf1 	bl	11210 <z_impl_k_sem_give>
}
    bc2e:	2001      	movs	r0, #1
    bc30:	b022      	add	sp, #136	; 0x88
    bc32:	bd70      	pop	{r4, r5, r6, pc}
    bc34:	4604      	mov	r4, r0
    bc36:	460d      	mov	r5, r1
		memset(string, 0, sizeof(string));
    bc38:	2680      	movs	r6, #128	; 0x80
    bc3a:	4632      	mov	r2, r6
    bc3c:	2100      	movs	r1, #0
    bc3e:	a802      	add	r0, sp, #8
    bc40:	f014 f8fa 	bl	1fe38 <memset>
		net_buf_linearize(string, sizeof(string), *buf, 0, len);
    bc44:	9500      	str	r5, [sp, #0]
    bc46:	2300      	movs	r3, #0
    bc48:	6822      	ldr	r2, [r4, #0]
    bc4a:	4631      	mov	r1, r6
    bc4c:	a802      	add	r0, sp, #8
    bc4e:	f00d fb92 	bl	19376 <net_buf_linearize>
		LOG_ERR("'%s'", string);
    bc52:	e7e0      	b.n	bc16 <on_cmd_sockerror+0x6>
		ictx.last_error = -EIO;
    bc54:	4804      	ldr	r0, [pc, #16]	; (bc68 <on_cmd_sockerror+0x58>)
    bc56:	f06f 0304 	mvn.w	r3, #4
    bc5a:	f8c0 34dc 	str.w	r3, [r0, #1244]	; 0x4dc
    bc5e:	f500 60a5 	add.w	r0, r0, #1320	; 0x528
    bc62:	f005 fad5 	bl	11210 <z_impl_k_sem_give>
}
    bc66:	e7e2      	b.n	bc2e <on_cmd_sockerror+0x1e>
    bc68:	20000e70 	.word	0x20000e70

0000bc6c <on_cmd_startup_report>:
{
    bc6c:	b570      	push	{r4, r5, r6, lr}
    bc6e:	b0a2      	sub	sp, #136	; 0x88
    bc70:	4604      	mov	r4, r0
    bc72:	460d      	mov	r5, r1
	memset(value, 0, sizeof(value));
    bc74:	2680      	movs	r6, #128	; 0x80
    bc76:	4632      	mov	r2, r6
    bc78:	2100      	movs	r1, #0
    bc7a:	a802      	add	r0, sp, #8
    bc7c:	f014 f8dc 	bl	1fe38 <memset>
	out_len = net_buf_linearize(value, sizeof(value), *buf, 0, len);
    bc80:	9500      	str	r5, [sp, #0]
    bc82:	2300      	movs	r3, #0
    bc84:	6822      	ldr	r2, [r4, #0]
    bc86:	4631      	mov	r1, r6
    bc88:	a802      	add	r0, sp, #8
    bc8a:	f00d fb74 	bl	19376 <net_buf_linearize>
	if (out_len > 0) {
    bc8e:	b1e0      	cbz	r0, bcca <on_cmd_startup_report+0x5e>
		set_startup_state(strtol(value, NULL, 10));
    bc90:	220a      	movs	r2, #10
    bc92:	2100      	movs	r1, #0
    bc94:	a802      	add	r0, sp, #8
    bc96:	f007 f859 	bl	12d4c <strtol>
    bc9a:	b2c0      	uxtb	r0, r0
    bc9c:	f7ff fb52 	bl	b344 <set_startup_state>
	if (ictx.fw_updated) {
    bca0:	4b14      	ldr	r3, [pc, #80]	; (bcf4 <on_cmd_startup_report+0x88>)
    bca2:	f893 3ab4 	ldrb.w	r3, [r3, #2740]	; 0xab4
    bca6:	b1a3      	cbz	r3, bcd2 <on_cmd_startup_report+0x66>
		ictx.fw_updated = false;
    bca8:	4c12      	ldr	r4, [pc, #72]	; (bcf4 <on_cmd_startup_report+0x88>)
    bcaa:	2300      	movs	r3, #0
    bcac:	f884 3ab4 	strb.w	r3, [r4, #2740]	; 0xab4
		set_fota_state(HL7800_FOTA_REBOOT_AND_RECONFIGURE);
    bcb0:	2007      	movs	r0, #7
    bcb2:	f7ff fbb7 	bl	b424 <set_fota_state>
		k_work_reschedule_for_queue(&hl7800_workq, &ictx.mdm_reset_work,
    bcb6:	2200      	movs	r2, #0
    bcb8:	2300      	movs	r3, #0
    bcba:	f504 61bf 	add.w	r1, r4, #1528	; 0x5f8
    bcbe:	480e      	ldr	r0, [pc, #56]	; (bcf8 <on_cmd_startup_report+0x8c>)
    bcc0:	f013 fbce 	bl	1f460 <k_work_reschedule_for_queue>
}
    bcc4:	2001      	movs	r0, #1
    bcc6:	b022      	add	sp, #136	; 0x88
    bcc8:	bd70      	pop	{r4, r5, r6, pc}
		set_startup_state(HL7800_STARTUP_STATE_UNKNOWN);
    bcca:	2005      	movs	r0, #5
    bccc:	f7ff fb3a 	bl	b344 <set_startup_state>
    bcd0:	e7e6      	b.n	bca0 <on_cmd_startup_report+0x34>
		ictx.wait_for_KSUP = false;
    bcd2:	4c08      	ldr	r4, [pc, #32]	; (bcf4 <on_cmd_startup_report+0x88>)
    bcd4:	2300      	movs	r3, #0
    bcd6:	77a3      	strb	r3, [r4, #30]
		ictx.mdm_startup_reporting_on = true;
    bcd8:	2301      	movs	r3, #1
    bcda:	f884 3c5f 	strb.w	r3, [r4, #3167]	; 0xc5f
		ictx.reconfig_IP_connection = true;
    bcde:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
		set_sleep_state(HL7800_SLEEP_AWAKE);
    bce2:	2002      	movs	r0, #2
    bce4:	f7ff fb6a 	bl	b3bc <set_sleep_state>
	z_impl_k_sem_give(sem);
    bce8:	f504 60a8 	add.w	r0, r4, #1344	; 0x540
    bcec:	f005 fa90 	bl	11210 <z_impl_k_sem_give>
}
    bcf0:	e7e8      	b.n	bcc4 <on_cmd_startup_report+0x58>
    bcf2:	bf00      	nop
    bcf4:	20000e70 	.word	0x20000e70
    bcf8:	20001b20 	.word	0x20001b20

0000bcfc <on_cmd_radio_tech_status>:
{
    bcfc:	b500      	push	{lr}
    bcfe:	b0a3      	sub	sp, #140	; 0x8c
	out_len = net_buf_linearize(value, sizeof(value), *buf, 0, len);
    bd00:	6802      	ldr	r2, [r0, #0]
    bd02:	9100      	str	r1, [sp, #0]
    bd04:	2300      	movs	r3, #0
    bd06:	2180      	movs	r1, #128	; 0x80
    bd08:	a802      	add	r0, sp, #8
    bd0a:	f00d fb34 	bl	19376 <net_buf_linearize>
	value[out_len] = 0;
    bd0e:	f100 0388 	add.w	r3, r0, #136	; 0x88
    bd12:	eb0d 0003 	add.w	r0, sp, r3
    bd16:	2100      	movs	r1, #0
    bd18:	f800 1c80 	strb.w	r1, [r0, #-128]
	ictx.mdm_rat = strtol(value, NULL, 10);
    bd1c:	220a      	movs	r2, #10
    bd1e:	a802      	add	r0, sp, #8
    bd20:	f007 f814 	bl	12d4c <strtol>
    bd24:	4905      	ldr	r1, [pc, #20]	; (bd3c <on_cmd_radio_tech_status+0x40>)
    bd26:	f881 0b4b 	strb.w	r0, [r1, #2891]	; 0xb4b
	event_handler(HL7800_EVENT_RAT, &ictx.mdm_rat);
    bd2a:	f601 314b 	addw	r1, r1, #2891	; 0xb4b
    bd2e:	2007      	movs	r0, #7
    bd30:	f7ff fad6 	bl	b2e0 <event_handler>
}
    bd34:	2001      	movs	r0, #1
    bd36:	b023      	add	sp, #140	; 0x8c
    bd38:	f85d fb04 	ldr.w	pc, [sp], #4
    bd3c:	20000e70 	.word	0x20000e70

0000bd40 <hl7800_read_rx>:
{
    bd40:	b530      	push	{r4, r5, lr}
    bd42:	b0a7      	sub	sp, #156	; 0x9c
    bd44:	4604      	mov	r4, r0
	bytes_read = 0, total_read = 0;
    bd46:	2500      	movs	r5, #0
    bd48:	9505      	str	r5, [sp, #20]
    bd4a:	e00f      	b.n	bd6c <hl7800_read_rx+0x2c>
			net_buf_append_bytes(*buf, bytes_read, uart_buffer,
    bd4c:	4b14      	ldr	r3, [pc, #80]	; (bda0 <hl7800_read_rx+0x60>)
    bd4e:	9303      	str	r3, [sp, #12]
    bd50:	4b14      	ldr	r3, [pc, #80]	; (bda4 <hl7800_read_rx+0x64>)
    bd52:	9302      	str	r3, [sp, #8]
    bd54:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    bd58:	2300      	movs	r3, #0
    bd5a:	e9cd 2300 	strd	r2, r3, [sp]
    bd5e:	aa06      	add	r2, sp, #24
    bd60:	9905      	ldr	r1, [sp, #20]
    bd62:	6820      	ldr	r0, [r4, #0]
    bd64:	f00d fb61 	bl	1942a <net_buf_append_bytes>
		if (rx_len < bytes_read) {
    bd68:	9b05      	ldr	r3, [sp, #20]
		total_read += bytes_read;
    bd6a:	441d      	add	r5, r3
		ret = mdm_receiver_recv(&ictx.mdm_ctx, uart_buffer,
    bd6c:	ab05      	add	r3, sp, #20
    bd6e:	2280      	movs	r2, #128	; 0x80
    bd70:	a906      	add	r1, sp, #24
    bd72:	480d      	ldr	r0, [pc, #52]	; (bda8 <hl7800_read_rx+0x68>)
    bd74:	f011 fc87 	bl	1d686 <mdm_receiver_recv>
		if (ret < 0 || bytes_read == 0) {
    bd78:	2800      	cmp	r0, #0
    bd7a:	db0d      	blt.n	bd98 <hl7800_read_rx+0x58>
    bd7c:	9b05      	ldr	r3, [sp, #20]
    bd7e:	b15b      	cbz	r3, bd98 <hl7800_read_rx+0x58>
		if (!*buf) {
    bd80:	6823      	ldr	r3, [r4, #0]
    bd82:	2b00      	cmp	r3, #0
    bd84:	d1e2      	bne.n	bd4c <hl7800_read_rx+0xc>
	return net_buf_alloc_fixed(pool, timeout);
    bd86:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    bd8a:	2300      	movs	r3, #0
    bd8c:	4804      	ldr	r0, [pc, #16]	; (bda0 <hl7800_read_rx+0x60>)
    bd8e:	f00d fa98 	bl	192c2 <net_buf_alloc_fixed>
			*buf = net_buf_alloc(&mdm_recv_pool, BUF_ALLOC_TIMEOUT);
    bd92:	6020      	str	r0, [r4, #0]
			if (!*buf) {
    bd94:	2800      	cmp	r0, #0
    bd96:	d1d9      	bne.n	bd4c <hl7800_read_rx+0xc>
}
    bd98:	4628      	mov	r0, r5
    bd9a:	b027      	add	sp, #156	; 0x9c
    bd9c:	bd30      	pop	{r4, r5, pc}
    bd9e:	bf00      	nop
    bda0:	2000060c 	.word	0x2000060c
    bda4:	0001db71 	.word	0x0001db71
    bda8:	20000f08 	.word	0x20000f08

0000bdac <wait_for_modem_data_and_newline>:
{
    bdac:	b570      	push	{r4, r5, r6, lr}
    bdae:	4604      	mov	r4, r0
    bdb0:	460d      	mov	r5, r1
    bdb2:	4616      	mov	r6, r2
				   (expected_len + strlen("\r\n")));
    bdb4:	4804      	ldr	r0, [pc, #16]	; (bdc8 <wait_for_modem_data_and_newline+0x1c>)
    bdb6:	f7f4 fffb 	bl	db0 <strlen>
	return wait_for_modem_data(buf, current_len,
    bdba:	1982      	adds	r2, r0, r6
    bdbc:	4629      	mov	r1, r5
    bdbe:	4620      	mov	r0, r4
    bdc0:	f011 fec0 	bl	1db44 <wait_for_modem_data>
}
    bdc4:	bd70      	pop	{r4, r5, r6, pc}
    bdc6:	bf00      	nop
    bdc8:	00022634 	.word	0x00022634

0000bdcc <on_cmd_modem_functionality>:
{
    bdcc:	b510      	push	{r4, lr}
    bdce:	b084      	sub	sp, #16
    bdd0:	4604      	mov	r4, r0
	wait_for_modem_data_and_newline(buf, net_buf_frags_len(*buf),
    bdd2:	6803      	ldr	r3, [r0, #0]
	size_t bytes = 0;
    bdd4:	2100      	movs	r1, #0
	while (buf) {
    bdd6:	e002      	b.n	bdde <on_cmd_modem_functionality+0x12>
		bytes += buf->len;
    bdd8:	899a      	ldrh	r2, [r3, #12]
    bdda:	4411      	add	r1, r2
		buf = buf->frags;
    bddc:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    bdde:	2b00      	cmp	r3, #0
    bde0:	d1fa      	bne.n	bdd8 <on_cmd_modem_functionality+0xc>
    bde2:	2202      	movs	r2, #2
    bde4:	4620      	mov	r0, r4
    bde6:	f7ff ffe1 	bl	bdac <wait_for_modem_data_and_newline>
	frag = NULL;
    bdea:	2300      	movs	r3, #0
    bdec:	9303      	str	r3, [sp, #12]
	len = net_buf_findcrlf(*buf, &frag);
    bdee:	a903      	add	r1, sp, #12
    bdf0:	6820      	ldr	r0, [r4, #0]
    bdf2:	f011 fd3e 	bl	1d872 <net_buf_findcrlf>
	if (!frag) {
    bdf6:	9b03      	ldr	r3, [sp, #12]
    bdf8:	b1a3      	cbz	r3, be24 <on_cmd_modem_functionality+0x58>
	out_len = net_buf_linearize(rsp, MDM_HL7800_MODEM_FUNCTIONALITY_STRLEN,
    bdfa:	9000      	str	r0, [sp, #0]
    bdfc:	2300      	movs	r3, #0
    bdfe:	6822      	ldr	r2, [r4, #0]
    be00:	2101      	movs	r1, #1
    be02:	a802      	add	r0, sp, #8
    be04:	f00d fab7 	bl	19376 <net_buf_linearize>
	rsp[out_len] = 0;
    be08:	f100 0310 	add.w	r3, r0, #16
    be0c:	eb0d 0003 	add.w	r0, sp, r3
    be10:	2100      	movs	r1, #0
    be12:	f800 1c08 	strb.w	r1, [r0, #-8]
	ictx.functionality = strtol(rsp, NULL, 10);
    be16:	220a      	movs	r2, #10
    be18:	a802      	add	r0, sp, #8
    be1a:	f006 ff97 	bl	12d4c <strtol>
    be1e:	4b03      	ldr	r3, [pc, #12]	; (be2c <on_cmd_modem_functionality+0x60>)
    be20:	f883 0c66 	strb.w	r0, [r3, #3174]	; 0xc66
}
    be24:	2001      	movs	r0, #1
    be26:	b004      	add	sp, #16
    be28:	bd10      	pop	{r4, pc}
    be2a:	bf00      	nop
    be2c:	20000e70 	.word	0x20000e70

0000be30 <on_cmd_operator_index_query>:
{
    be30:	b510      	push	{r4, lr}
    be32:	b084      	sub	sp, #16
    be34:	4604      	mov	r4, r0
	struct net_buf *frag = NULL;
    be36:	2100      	movs	r1, #0
    be38:	9103      	str	r1, [sp, #12]
	wait_for_modem_data_and_newline(buf, net_buf_frags_len(*buf),
    be3a:	6803      	ldr	r3, [r0, #0]
    be3c:	e002      	b.n	be44 <on_cmd_operator_index_query+0x14>
		bytes += buf->len;
    be3e:	899a      	ldrh	r2, [r3, #12]
    be40:	4411      	add	r1, r2
		buf = buf->frags;
    be42:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    be44:	2b00      	cmp	r3, #0
    be46:	d1fa      	bne.n	be3e <on_cmd_operator_index_query+0xe>
    be48:	2203      	movs	r2, #3
    be4a:	4620      	mov	r0, r4
    be4c:	f7ff ffae 	bl	bdac <wait_for_modem_data_and_newline>
	frag = NULL;
    be50:	2300      	movs	r3, #0
    be52:	9303      	str	r3, [sp, #12]
	len = net_buf_findcrlf(*buf, &frag);
    be54:	a903      	add	r1, sp, #12
    be56:	6820      	ldr	r0, [r4, #0]
    be58:	f011 fd0b 	bl	1d872 <net_buf_findcrlf>
	if (!frag) {
    be5c:	9b03      	ldr	r3, [sp, #12]
    be5e:	b1a3      	cbz	r3, be8a <on_cmd_operator_index_query+0x5a>
	out_len = net_buf_linearize(carrier, MDM_HL7800_OPERATOR_INDEX_STRLEN,
    be60:	9000      	str	r0, [sp, #0]
    be62:	2300      	movs	r3, #0
    be64:	6822      	ldr	r2, [r4, #0]
    be66:	2102      	movs	r1, #2
    be68:	a802      	add	r0, sp, #8
    be6a:	f00d fa84 	bl	19376 <net_buf_linearize>
	carrier[out_len] = 0;
    be6e:	f100 0310 	add.w	r3, r0, #16
    be72:	eb0d 0003 	add.w	r0, sp, r3
    be76:	2100      	movs	r1, #0
    be78:	f800 1c08 	strb.w	r1, [r0, #-8]
	ictx.operator_index = (uint8_t)strtol(carrier, NULL, 10);
    be7c:	220a      	movs	r2, #10
    be7e:	a802      	add	r0, sp, #8
    be80:	f006 ff64 	bl	12d4c <strtol>
    be84:	4b02      	ldr	r3, [pc, #8]	; (be90 <on_cmd_operator_index_query+0x60>)
    be86:	f883 0c65 	strb.w	r0, [r3, #3173]	; 0xc65
}
    be8a:	2001      	movs	r0, #1
    be8c:	b004      	add	sp, #16
    be8e:	bd10      	pop	{r4, pc}
    be90:	20000e70 	.word	0x20000e70

0000be94 <on_cmd_atcmdinfo_iccid>:
{
    be94:	b530      	push	{r4, r5, lr}
    be96:	b085      	sub	sp, #20
    be98:	4604      	mov	r4, r0
	struct net_buf *frag = NULL;
    be9a:	2100      	movs	r1, #0
    be9c:	9103      	str	r1, [sp, #12]
	wait_for_modem_data_and_newline(buf, net_buf_frags_len(*buf),
    be9e:	6803      	ldr	r3, [r0, #0]
    bea0:	e002      	b.n	bea8 <on_cmd_atcmdinfo_iccid+0x14>
		bytes += buf->len;
    bea2:	899a      	ldrh	r2, [r3, #12]
    bea4:	4411      	add	r1, r2
		buf = buf->frags;
    bea6:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    bea8:	2b00      	cmp	r3, #0
    beaa:	d1fa      	bne.n	bea2 <on_cmd_atcmdinfo_iccid+0xe>
    beac:	2215      	movs	r2, #21
    beae:	4620      	mov	r0, r4
    beb0:	f7ff ff7c 	bl	bdac <wait_for_modem_data_and_newline>
	frag = NULL;
    beb4:	2300      	movs	r3, #0
    beb6:	9303      	str	r3, [sp, #12]
	len = net_buf_findcrlf(*buf, &frag);
    beb8:	a903      	add	r1, sp, #12
    beba:	6820      	ldr	r0, [r4, #0]
    bebc:	f011 fcd9 	bl	1d872 <net_buf_findcrlf>
	if (!frag) {
    bec0:	9b03      	ldr	r3, [sp, #12]
    bec2:	b183      	cbz	r3, bee6 <on_cmd_atcmdinfo_iccid+0x52>
	if (len > MDM_HL7800_ICCID_STRLEN) {
    bec4:	2814      	cmp	r0, #20
    bec6:	d900      	bls.n	beca <on_cmd_atcmdinfo_iccid+0x36>
		len = MDM_HL7800_ICCID_STRLEN;
    bec8:	2014      	movs	r0, #20
	out_len = net_buf_linearize(ictx.mdm_iccid, MDM_HL7800_ICCID_STRLEN,
    beca:	4d08      	ldr	r5, [pc, #32]	; (beec <on_cmd_atcmdinfo_iccid+0x58>)
    becc:	9000      	str	r0, [sp, #0]
    bece:	2300      	movs	r3, #0
    bed0:	6822      	ldr	r2, [r4, #0]
    bed2:	2114      	movs	r1, #20
    bed4:	4628      	mov	r0, r5
    bed6:	f00d fa4e 	bl	19376 <net_buf_linearize>
	ictx.mdm_iccid[out_len] = 0;
    beda:	f6a5 3535 	subw	r5, r5, #2869	; 0xb35
    bede:	4405      	add	r5, r0
    bee0:	2300      	movs	r3, #0
    bee2:	f885 3b35 	strb.w	r3, [r5, #2869]	; 0xb35
}
    bee6:	2001      	movs	r0, #1
    bee8:	b005      	add	sp, #20
    beea:	bd30      	pop	{r4, r5, pc}
    beec:	200019a5 	.word	0x200019a5

0000bef0 <on_cmd_atcmdinfo_imei>:
{
    bef0:	b530      	push	{r4, r5, lr}
    bef2:	b085      	sub	sp, #20
    bef4:	4604      	mov	r4, r0
	struct net_buf *frag = NULL;
    bef6:	2100      	movs	r1, #0
    bef8:	9103      	str	r1, [sp, #12]
	wait_for_modem_data_and_newline(buf, net_buf_frags_len(*buf),
    befa:	6803      	ldr	r3, [r0, #0]
    befc:	e002      	b.n	bf04 <on_cmd_atcmdinfo_imei+0x14>
		bytes += buf->len;
    befe:	899a      	ldrh	r2, [r3, #12]
    bf00:	4411      	add	r1, r2
		buf = buf->frags;
    bf02:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    bf04:	2b00      	cmp	r3, #0
    bf06:	d1fa      	bne.n	befe <on_cmd_atcmdinfo_imei+0xe>
    bf08:	2210      	movs	r2, #16
    bf0a:	4620      	mov	r0, r4
    bf0c:	f7ff ff4e 	bl	bdac <wait_for_modem_data_and_newline>
	frag = NULL;
    bf10:	2300      	movs	r3, #0
    bf12:	9303      	str	r3, [sp, #12]
	len = net_buf_findcrlf(*buf, &frag);
    bf14:	a903      	add	r1, sp, #12
    bf16:	6820      	ldr	r0, [r4, #0]
    bf18:	f011 fcab 	bl	1d872 <net_buf_findcrlf>
	if (!frag) {
    bf1c:	9b03      	ldr	r3, [sp, #12]
    bf1e:	b193      	cbz	r3, bf46 <on_cmd_atcmdinfo_imei+0x56>
	if (len < MDM_HL7800_IMEI_STRLEN) {
    bf20:	280e      	cmp	r0, #14
    bf22:	d902      	bls.n	bf2a <on_cmd_atcmdinfo_imei+0x3a>
	} else if (len > MDM_HL7800_IMEI_STRLEN) {
    bf24:	280f      	cmp	r0, #15
    bf26:	d900      	bls.n	bf2a <on_cmd_atcmdinfo_imei+0x3a>
		len = MDM_HL7800_IMEI_STRLEN;
    bf28:	200f      	movs	r0, #15
	out_len = net_buf_linearize(ictx.mdm_imei, sizeof(ictx.mdm_imei) - 1,
    bf2a:	4d08      	ldr	r5, [pc, #32]	; (bf4c <on_cmd_atcmdinfo_imei+0x5c>)
    bf2c:	9000      	str	r0, [sp, #0]
    bf2e:	2300      	movs	r3, #0
    bf30:	6822      	ldr	r2, [r4, #0]
    bf32:	210f      	movs	r1, #15
    bf34:	4628      	mov	r0, r5
    bf36:	f00d fa1e 	bl	19376 <net_buf_linearize>
	ictx.mdm_imei[out_len] = 0;
    bf3a:	f6a5 25e9 	subw	r5, r5, #2793	; 0xae9
    bf3e:	4405      	add	r5, r0
    bf40:	2300      	movs	r3, #0
    bf42:	f885 3ae9 	strb.w	r3, [r5, #2793]	; 0xae9
}
    bf46:	2001      	movs	r0, #1
    bf48:	b005      	add	sp, #20
    bf4a:	bd30      	pop	{r4, r5, pc}
    bf4c:	20001959 	.word	0x20001959

0000bf50 <on_cmd_atcmdinfo_revision>:
{
    bf50:	b530      	push	{r4, r5, lr}
    bf52:	b085      	sub	sp, #20
    bf54:	4604      	mov	r4, r0
	struct net_buf *frag = NULL;
    bf56:	2100      	movs	r1, #0
    bf58:	9103      	str	r1, [sp, #12]
	wait_for_modem_data_and_newline(buf, net_buf_frags_len(*buf),
    bf5a:	6803      	ldr	r3, [r0, #0]
    bf5c:	e002      	b.n	bf64 <on_cmd_atcmdinfo_revision+0x14>
		bytes += buf->len;
    bf5e:	899a      	ldrh	r2, [r3, #12]
    bf60:	4411      	add	r1, r2
		buf = buf->frags;
    bf62:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    bf64:	2b00      	cmp	r3, #0
    bf66:	d1fa      	bne.n	bf5e <on_cmd_atcmdinfo_revision+0xe>
    bf68:	221d      	movs	r2, #29
    bf6a:	4620      	mov	r0, r4
    bf6c:	f7ff ff1e 	bl	bdac <wait_for_modem_data_and_newline>
	frag = NULL;
    bf70:	2300      	movs	r3, #0
    bf72:	9303      	str	r3, [sp, #12]
	len = net_buf_findcrlf(*buf, &frag);
    bf74:	a903      	add	r1, sp, #12
    bf76:	6820      	ldr	r0, [r4, #0]
    bf78:	f011 fc7b 	bl	1d872 <net_buf_findcrlf>
	if (!frag) {
    bf7c:	9b03      	ldr	r3, [sp, #12]
    bf7e:	b1ab      	cbz	r3, bfac <on_cmd_atcmdinfo_revision+0x5c>
	if (len == 0) {
    bf80:	b110      	cbz	r0, bf88 <on_cmd_atcmdinfo_revision+0x38>
	} else if (len > MDM_HL7800_REVISION_MAX_STRLEN) {
    bf82:	281c      	cmp	r0, #28
    bf84:	d900      	bls.n	bf88 <on_cmd_atcmdinfo_revision+0x38>
		len = MDM_HL7800_REVISION_MAX_STRLEN;
    bf86:	201c      	movs	r0, #28
	out_len = net_buf_linearize(
    bf88:	4d0a      	ldr	r5, [pc, #40]	; (bfb4 <on_cmd_atcmdinfo_revision+0x64>)
    bf8a:	9000      	str	r0, [sp, #0]
    bf8c:	2300      	movs	r3, #0
    bf8e:	6822      	ldr	r2, [r4, #0]
    bf90:	211c      	movs	r1, #28
    bf92:	4628      	mov	r0, r5
    bf94:	f00d f9ef 	bl	19376 <net_buf_linearize>
	ictx.mdm_revision[out_len] = 0;
    bf98:	f6a5 23cc 	subw	r3, r5, #2764	; 0xacc
    bf9c:	4403      	add	r3, r0
    bf9e:	2200      	movs	r2, #0
    bfa0:	f883 2acc 	strb.w	r2, [r3, #2764]	; 0xacc
	event_handler(HL7800_EVENT_REVISION, ictx.mdm_revision);
    bfa4:	4629      	mov	r1, r5
    bfa6:	200c      	movs	r0, #12
    bfa8:	f7ff f99a 	bl	b2e0 <event_handler>
}
    bfac:	2001      	movs	r0, #1
    bfae:	b005      	add	sp, #20
    bfb0:	bd30      	pop	{r4, r5, pc}
    bfb2:	bf00      	nop
    bfb4:	2000193c 	.word	0x2000193c

0000bfb8 <on_cmd_atcmdinfo_model>:
{
    bfb8:	b530      	push	{r4, r5, lr}
    bfba:	b085      	sub	sp, #20
    bfbc:	4604      	mov	r4, r0
	struct net_buf *frag = NULL;
    bfbe:	2100      	movs	r1, #0
    bfc0:	9103      	str	r1, [sp, #12]
	wait_for_modem_data_and_newline(buf, net_buf_frags_len(*buf),
    bfc2:	6803      	ldr	r3, [r0, #0]
    bfc4:	e002      	b.n	bfcc <on_cmd_atcmdinfo_model+0x14>
		bytes += buf->len;
    bfc6:	899a      	ldrh	r2, [r3, #12]
    bfc8:	4411      	add	r1, r2
		buf = buf->frags;
    bfca:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    bfcc:	2b00      	cmp	r3, #0
    bfce:	d1fa      	bne.n	bfc6 <on_cmd_atcmdinfo_model+0xe>
    bfd0:	2207      	movs	r2, #7
    bfd2:	4620      	mov	r0, r4
    bfd4:	f7ff feea 	bl	bdac <wait_for_modem_data_and_newline>
	frag = NULL;
    bfd8:	2300      	movs	r3, #0
    bfda:	9303      	str	r3, [sp, #12]
	len = net_buf_findcrlf(*buf, &frag);
    bfdc:	a903      	add	r1, sp, #12
    bfde:	6820      	ldr	r0, [r4, #0]
    bfe0:	f011 fc47 	bl	1d872 <net_buf_findcrlf>
	if (!frag) {
    bfe4:	9b03      	ldr	r3, [sp, #12]
    bfe6:	b193      	cbz	r3, c00e <on_cmd_atcmdinfo_model+0x56>
	if (len < len_no_null) {
    bfe8:	2805      	cmp	r0, #5
    bfea:	d902      	bls.n	bff2 <on_cmd_atcmdinfo_model+0x3a>
	} else if (len > len_no_null) {
    bfec:	2806      	cmp	r0, #6
    bfee:	d900      	bls.n	bff2 <on_cmd_atcmdinfo_model+0x3a>
		len = MDM_MODEL_LENGTH;
    bff0:	2007      	movs	r0, #7
	out_len = net_buf_linearize(ictx.mdm_model, sizeof(ictx.mdm_model) - 1,
    bff2:	4d08      	ldr	r5, [pc, #32]	; (c014 <on_cmd_atcmdinfo_model+0x5c>)
    bff4:	9000      	str	r0, [sp, #0]
    bff6:	2300      	movs	r3, #0
    bff8:	6822      	ldr	r2, [r4, #0]
    bffa:	2106      	movs	r1, #6
    bffc:	4628      	mov	r0, r5
    bffe:	f00d f9ba 	bl	19376 <net_buf_linearize>
	ictx.mdm_model[out_len] = 0;
    c002:	f6a5 25c5 	subw	r5, r5, #2757	; 0xac5
    c006:	4405      	add	r5, r0
    c008:	2300      	movs	r3, #0
    c00a:	f885 3ac5 	strb.w	r3, [r5, #2757]	; 0xac5
}
    c00e:	2001      	movs	r0, #1
    c010:	b005      	add	sp, #20
    c012:	bd30      	pop	{r4, r5, pc}
    c014:	20001935 	.word	0x20001935

0000c018 <on_cmd_atcmdinfo_manufacturer>:
{
    c018:	b530      	push	{r4, r5, lr}
    c01a:	b085      	sub	sp, #20
    c01c:	4604      	mov	r4, r0
	struct net_buf *frag = NULL;
    c01e:	2100      	movs	r1, #0
    c020:	9103      	str	r1, [sp, #12]
	wait_for_modem_data_and_newline(buf, net_buf_frags_len(*buf),
    c022:	6803      	ldr	r3, [r0, #0]
    c024:	e002      	b.n	c02c <on_cmd_atcmdinfo_manufacturer+0x14>
		bytes += buf->len;
    c026:	899a      	ldrh	r2, [r3, #12]
    c028:	4411      	add	r1, r2
		buf = buf->frags;
    c02a:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    c02c:	2b00      	cmp	r3, #0
    c02e:	d1fa      	bne.n	c026 <on_cmd_atcmdinfo_manufacturer+0xe>
    c030:	2210      	movs	r2, #16
    c032:	4620      	mov	r0, r4
    c034:	f7ff feba 	bl	bdac <wait_for_modem_data_and_newline>
	frag = NULL;
    c038:	2300      	movs	r3, #0
    c03a:	9303      	str	r3, [sp, #12]
	len = net_buf_findcrlf(*buf, &frag);
    c03c:	a903      	add	r1, sp, #12
    c03e:	6820      	ldr	r0, [r4, #0]
    c040:	f011 fc17 	bl	1d872 <net_buf_findcrlf>
	if (!frag) {
    c044:	9b03      	ldr	r3, [sp, #12]
    c046:	b193      	cbz	r3, c06e <on_cmd_atcmdinfo_manufacturer+0x56>
	if (len < len_no_null) {
    c048:	280e      	cmp	r0, #14
    c04a:	d902      	bls.n	c052 <on_cmd_atcmdinfo_manufacturer+0x3a>
	} else if (len > len_no_null) {
    c04c:	280f      	cmp	r0, #15
    c04e:	d900      	bls.n	c052 <on_cmd_atcmdinfo_manufacturer+0x3a>
		len = MDM_MANUFACTURER_LENGTH;
    c050:	2010      	movs	r0, #16
	out_len = net_buf_linearize(ictx.mdm_manufacturer,
    c052:	4d08      	ldr	r5, [pc, #32]	; (c074 <on_cmd_atcmdinfo_manufacturer+0x5c>)
    c054:	9000      	str	r0, [sp, #0]
    c056:	2300      	movs	r3, #0
    c058:	6822      	ldr	r2, [r4, #0]
    c05a:	210f      	movs	r1, #15
    c05c:	4628      	mov	r0, r5
    c05e:	f00d f98a 	bl	19376 <net_buf_linearize>
	ictx.mdm_manufacturer[out_len] = 0;
    c062:	f6a5 25b5 	subw	r5, r5, #2741	; 0xab5
    c066:	4405      	add	r5, r0
    c068:	2300      	movs	r3, #0
    c06a:	f885 3ab5 	strb.w	r3, [r5, #2741]	; 0xab5
}
    c06e:	2001      	movs	r0, #1
    c070:	b005      	add	sp, #20
    c072:	bd30      	pop	{r4, r5, pc}
    c074:	20001925 	.word	0x20001925

0000c078 <prepare_and_send_fw_packet>:
{
    c078:	b570      	push	{r4, r5, r6, lr}
	ictx.fw_packet.id_complement = 0xFF - ictx.fw_packet.id;
    c07a:	4828      	ldr	r0, [pc, #160]	; (c11c <prepare_and_send_fw_packet+0xa4>)
    c07c:	f890 3699 	ldrb.w	r3, [r0, #1689]	; 0x699
    c080:	43db      	mvns	r3, r3
    c082:	f880 369a 	strb.w	r3, [r0, #1690]	; 0x69a
	ret = fs_seek(&ictx.fw_update_file, ictx.file_pos, FS_SEEK_SET);
    c086:	2200      	movs	r2, #0
    c088:	f8d0 1aa0 	ldr.w	r1, [r0, #2720]	; 0xaa0
    c08c:	f200 608c 	addw	r0, r0, #1676	; 0x68c
    c090:	f7fa fa1a 	bl	64c8 <fs_seek>
	if (ret < 0) {
    c094:	1e05      	subs	r5, r0, #0
    c096:	db27      	blt.n	c0e8 <prepare_and_send_fw_packet+0x70>
	read_res = fs_read(&ictx.fw_update_file, ictx.fw_packet.data,
    c098:	4921      	ldr	r1, [pc, #132]	; (c120 <prepare_and_send_fw_packet+0xa8>)
    c09a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    c09e:	f1a1 000f 	sub.w	r0, r1, #15
    c0a2:	f7fa f9b9 	bl	6418 <fs_read>
	if (read_res < 0) {
    c0a6:	1e06      	subs	r6, r0, #0
    c0a8:	db22      	blt.n	c0f0 <prepare_and_send_fw_packet+0x78>
	} else if (read_res < XMODEM_DATA_SIZE) {
    c0aa:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    c0ae:	db23      	blt.n	c0f8 <prepare_and_send_fw_packet+0x80>
		calc_fw_update_crc(ictx.fw_packet.data, XMODEM_DATA_SIZE);
    c0b0:	4c1b      	ldr	r4, [pc, #108]	; (c120 <prepare_and_send_fw_packet+0xa8>)
    c0b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
    c0b6:	4620      	mov	r0, r4
    c0b8:	f011 fc00 	bl	1d8bc <calc_fw_update_crc>
	ictx.fw_packet.crc =
    c0bc:	f884 0400 	strb.w	r0, [r4, #1024]	; 0x400
	send_fw_update_packet(&ictx.fw_packet);
    c0c0:	1ee0      	subs	r0, r4, #3
    c0c2:	f7ff f9e5 	bl	b490 <send_fw_update_packet>
	ictx.file_pos += read_res;
    c0c6:	f8d4 3405 	ldr.w	r3, [r4, #1029]	; 0x405
    c0ca:	4433      	add	r3, r6
    c0cc:	f8c4 3405 	str.w	r3, [r4, #1029]	; 0x405
	ictx.fw_packet_count++;
    c0d0:	f8d4 3401 	ldr.w	r3, [r4, #1025]	; 0x401
    c0d4:	3301      	adds	r3, #1
    c0d6:	f8c4 3401 	str.w	r3, [r4, #1025]	; 0x401
	ictx.fw_packet.id++;
    c0da:	f814 3c02 	ldrb.w	r3, [r4, #-2]
    c0de:	3301      	adds	r3, #1
    c0e0:	f804 3c02 	strb.w	r3, [r4, #-2]
}
    c0e4:	4628      	mov	r0, r5
    c0e6:	bd70      	pop	{r4, r5, r6, pc}
		set_fota_state(HL7800_FOTA_FILE_ERROR);
    c0e8:	2005      	movs	r0, #5
    c0ea:	f7ff f99b 	bl	b424 <set_fota_state>
		return ret;
    c0ee:	e7f9      	b.n	c0e4 <prepare_and_send_fw_packet+0x6c>
		set_fota_state(HL7800_FOTA_FILE_ERROR);
    c0f0:	2005      	movs	r0, #5
    c0f2:	f7ff f997 	bl	b424 <set_fota_state>
		return ret;
    c0f6:	e7f5      	b.n	c0e4 <prepare_and_send_fw_packet+0x6c>
		set_fota_state(HL7800_FOTA_PAD);
    c0f8:	2003      	movs	r0, #3
    c0fa:	f7ff f993 	bl	b424 <set_fota_state>
		fs_close(&ictx.fw_update_file);
    c0fe:	4809      	ldr	r0, [pc, #36]	; (c124 <prepare_and_send_fw_packet+0xac>)
    c100:	f7fa f930 	bl	6364 <fs_close>
		for (int i = read_res; i < XMODEM_DATA_SIZE; i++) {
    c104:	4633      	mov	r3, r6
    c106:	e005      	b.n	c114 <prepare_and_send_fw_packet+0x9c>
			ictx.fw_packet.data[i] = XMODEM_PAD_VALUE;
    c108:	4a04      	ldr	r2, [pc, #16]	; (c11c <prepare_and_send_fw_packet+0xa4>)
    c10a:	441a      	add	r2, r3
    c10c:	211a      	movs	r1, #26
    c10e:	f882 169b 	strb.w	r1, [r2, #1691]	; 0x69b
		for (int i = read_res; i < XMODEM_DATA_SIZE; i++) {
    c112:	3301      	adds	r3, #1
    c114:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    c118:	dbf6      	blt.n	c108 <prepare_and_send_fw_packet+0x90>
    c11a:	e7c9      	b.n	c0b0 <prepare_and_send_fw_packet+0x38>
    c11c:	20000e70 	.word	0x20000e70
    c120:	2000150b 	.word	0x2000150b
    c124:	200014fc 	.word	0x200014fc

0000c128 <process_fw_update_rx>:
{
    c128:	b500      	push	{lr}
    c12a:	b083      	sub	sp, #12
	uint8_t eot = XM_EOT;
    c12c:	2304      	movs	r3, #4
    c12e:	f88d 3007 	strb.w	r3, [sp, #7]
	xm_msg = net_buf_get_u8(rx_buf);
    c132:	f011 fd25 	bl	1db80 <net_buf_get_u8>
    c136:	4b1d      	ldr	r3, [pc, #116]	; (c1ac <process_fw_update_rx+0x84>)
    c138:	7018      	strb	r0, [r3, #0]
	if (xm_msg == XM_NACK) {
    c13a:	2815      	cmp	r0, #21
    c13c:	d004      	beq.n	c148 <process_fw_update_rx+0x20>
	} else if (xm_msg == XM_ACK) {
    c13e:	2806      	cmp	r0, #6
    c140:	d01f      	beq.n	c182 <process_fw_update_rx+0x5a>
}
    c142:	b003      	add	sp, #12
    c144:	f85d fb04 	ldr.w	pc, [sp], #4
		if (ictx.fw_update_state == HL7800_FOTA_START) {
    c148:	4b19      	ldr	r3, [pc, #100]	; (c1b0 <process_fw_update_rx+0x88>)
    c14a:	f893 3688 	ldrb.w	r3, [r3, #1672]	; 0x688
    c14e:	2b01      	cmp	r3, #1
    c150:	d005      	beq.n	c15e <process_fw_update_rx+0x36>
		} else if (ictx.fw_update_state == HL7800_FOTA_WIP) {
    c152:	2b02      	cmp	r3, #2
    c154:	d1f5      	bne.n	c142 <process_fw_update_rx+0x1a>
			send_fw_update_packet(&ictx.fw_packet);
    c156:	4817      	ldr	r0, [pc, #92]	; (c1b4 <process_fw_update_rx+0x8c>)
    c158:	f7ff f99a 	bl	b490 <send_fw_update_packet>
    c15c:	e7f1      	b.n	c142 <process_fw_update_rx+0x1a>
			set_fota_state(HL7800_FOTA_WIP);
    c15e:	2002      	movs	r0, #2
    c160:	f7ff f960 	bl	b424 <set_fota_state>
			ictx.file_pos = 0;
    c164:	4b12      	ldr	r3, [pc, #72]	; (c1b0 <process_fw_update_rx+0x88>)
    c166:	2200      	movs	r2, #0
    c168:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
			ictx.fw_packet_count = 1;
    c16c:	2201      	movs	r2, #1
    c16e:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
			ictx.fw_packet.id = 1;
    c172:	f883 2699 	strb.w	r2, [r3, #1689]	; 0x699
			ictx.fw_packet.preamble = XM_SOH_1K;
    c176:	2202      	movs	r2, #2
    c178:	f883 2698 	strb.w	r2, [r3, #1688]	; 0x698
			prepare_and_send_fw_packet();
    c17c:	f7ff ff7c 	bl	c078 <prepare_and_send_fw_packet>
    c180:	e7df      	b.n	c142 <process_fw_update_rx+0x1a>
		if (ictx.fw_update_state == HL7800_FOTA_WIP) {
    c182:	4b0b      	ldr	r3, [pc, #44]	; (c1b0 <process_fw_update_rx+0x88>)
    c184:	f893 3688 	ldrb.w	r3, [r3, #1672]	; 0x688
    c188:	2b02      	cmp	r3, #2
    c18a:	d00b      	beq.n	c1a4 <process_fw_update_rx+0x7c>
		} else if (ictx.fw_update_state == HL7800_FOTA_PAD) {
    c18c:	2b03      	cmp	r3, #3
    c18e:	d1d8      	bne.n	c142 <process_fw_update_rx+0x1a>
			set_fota_state(HL7800_FOTA_SEND_EOT);
    c190:	2004      	movs	r0, #4
    c192:	f7ff f947 	bl	b424 <set_fota_state>
			mdm_receiver_send(&ictx.mdm_ctx, &eot, sizeof(eot));
    c196:	2201      	movs	r2, #1
    c198:	f10d 0107 	add.w	r1, sp, #7
    c19c:	4806      	ldr	r0, [pc, #24]	; (c1b8 <process_fw_update_rx+0x90>)
    c19e:	f011 fa82 	bl	1d6a6 <mdm_receiver_send>
}
    c1a2:	e7ce      	b.n	c142 <process_fw_update_rx+0x1a>
			prepare_and_send_fw_packet();
    c1a4:	f7ff ff68 	bl	c078 <prepare_and_send_fw_packet>
    c1a8:	e7cb      	b.n	c142 <process_fw_update_rx+0x1a>
    c1aa:	bf00      	nop
    c1ac:	200042ab 	.word	0x200042ab
    c1b0:	20000e70 	.word	0x20000e70
    c1b4:	20001508 	.word	0x20001508
    c1b8:	20000f08 	.word	0x20000f08

0000c1bc <profile_handler>:
{
    c1bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    c1be:	b095      	sub	sp, #84	; 0x54
    c1c0:	4605      	mov	r5, r0
    c1c2:	4616      	mov	r6, r2
	struct net_buf *frag = NULL;
    c1c4:	2400      	movs	r4, #0
    c1c6:	9413      	str	r4, [sp, #76]	; 0x4c
	net_buf_remove(buf, len);
    c1c8:	f011 fd18 	bl	1dbfc <net_buf_remove>
	net_buf_skipcrlf(buf);
    c1cc:	4628      	mov	r0, r5
    c1ce:	f011 fce8 	bl	1dba2 <net_buf_skipcrlf>
	size = wait_for_modem_data(buf, net_buf_frags_len(*buf),
    c1d2:	682b      	ldr	r3, [r5, #0]
	size_t bytes = 0;
    c1d4:	4621      	mov	r1, r4
	while (buf) {
    c1d6:	e002      	b.n	c1de <profile_handler+0x22>
		bytes += buf->len;
    c1d8:	8998      	ldrh	r0, [r3, #12]
    c1da:	4401      	add	r1, r0
		buf = buf->frags;
    c1dc:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    c1de:	2b00      	cmp	r3, #0
    c1e0:	d1fa      	bne.n	c1d8 <profile_handler+0x1c>
    c1e2:	2240      	movs	r2, #64	; 0x40
    c1e4:	4628      	mov	r0, r5
    c1e6:	f011 fcad 	bl	1db44 <wait_for_modem_data>
	net_buf_skipcrlf(buf); /* remove any \r\n that are in the front */
    c1ea:	4628      	mov	r0, r5
    c1ec:	f011 fcd9 	bl	1dba2 <net_buf_skipcrlf>
	line_length = net_buf_findcrlf(*buf, &frag);
    c1f0:	a913      	add	r1, sp, #76	; 0x4c
    c1f2:	6828      	ldr	r0, [r5, #0]
    c1f4:	f011 fb3d 	bl	1d872 <net_buf_findcrlf>
	if (line_length) {
    c1f8:	4607      	mov	r7, r0
    c1fa:	b990      	cbnz	r0, c222 <profile_handler+0x66>
	int echo_state = -1;
    c1fc:	f04f 34ff 	mov.w	r4, #4294967295
	net_buf_remove(buf, line_length);
    c200:	4639      	mov	r1, r7
    c202:	4628      	mov	r0, r5
    c204:	f011 fcfa 	bl	1dbfc <net_buf_remove>
	net_buf_skipcrlf(buf);
    c208:	4628      	mov	r0, r5
    c20a:	f011 fcca 	bl	1dba2 <net_buf_skipcrlf>
	if (active_profile) {
    c20e:	b12e      	cbz	r6, c21c <profile_handler+0x60>
		ictx.mdm_echo_is_on = (echo_state != 0);
    c210:	3c00      	subs	r4, #0
    c212:	bf18      	it	ne
    c214:	2401      	movne	r4, #1
    c216:	4b1c      	ldr	r3, [pc, #112]	; (c288 <profile_handler+0xcc>)
    c218:	f883 4b9c 	strb.w	r4, [r3, #2972]	; 0xb9c
	size = wait_for_modem_data(buf, net_buf_frags_len(*buf),
    c21c:	682b      	ldr	r3, [r5, #0]
	size_t bytes = 0;
    c21e:	2100      	movs	r1, #0
	while (buf) {
    c220:	e01a      	b.n	c258 <profile_handler+0x9c>
		memset(line, 0, sizeof(line));
    c222:	2242      	movs	r2, #66	; 0x42
    c224:	2100      	movs	r1, #0
    c226:	a802      	add	r0, sp, #8
    c228:	f013 fe06 	bl	1fe38 <memset>
		output_length = net_buf_linearize(line, SIZE_WITHOUT_NUL(line),
    c22c:	9700      	str	r7, [sp, #0]
    c22e:	2300      	movs	r3, #0
    c230:	682a      	ldr	r2, [r5, #0]
    c232:	2141      	movs	r1, #65	; 0x41
    c234:	a802      	add	r0, sp, #8
    c236:	f00d f89e 	bl	19376 <net_buf_linearize>
		if (output_length >= SIZE_WITHOUT_NUL("E?")) {
    c23a:	2801      	cmp	r0, #1
    c23c:	d906      	bls.n	c24c <profile_handler+0x90>
			echo_state = (line[1] == '1') ? 1 : 0;
    c23e:	f89d 4009 	ldrb.w	r4, [sp, #9]
    c242:	2c31      	cmp	r4, #49	; 0x31
    c244:	bf14      	ite	ne
    c246:	2400      	movne	r4, #0
    c248:	2401      	moveq	r4, #1
    c24a:	e7d9      	b.n	c200 <profile_handler+0x44>
	int echo_state = -1;
    c24c:	f04f 34ff 	mov.w	r4, #4294967295
    c250:	e7d6      	b.n	c200 <profile_handler+0x44>
		bytes += buf->len;
    c252:	899a      	ldrh	r2, [r3, #12]
    c254:	4411      	add	r1, r2
		buf = buf->frags;
    c256:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    c258:	2b00      	cmp	r3, #0
    c25a:	d1fa      	bne.n	c252 <profile_handler+0x96>
	size = wait_for_modem_data(buf, net_buf_frags_len(*buf),
    c25c:	2242      	movs	r2, #66	; 0x42
    c25e:	4628      	mov	r0, r5
    c260:	f011 fc70 	bl	1db44 <wait_for_modem_data>
	net_buf_skipcrlf(buf);
    c264:	4628      	mov	r0, r5
    c266:	f011 fc9c 	bl	1dba2 <net_buf_skipcrlf>
	len = net_buf_findcrlf(*buf, &frag);
    c26a:	a913      	add	r1, sp, #76	; 0x4c
    c26c:	6828      	ldr	r0, [r5, #0]
    c26e:	f011 fb00 	bl	1d872 <net_buf_findcrlf>
    c272:	4601      	mov	r1, r0
	net_buf_remove(buf, len);
    c274:	4628      	mov	r0, r5
    c276:	f011 fcc1 	bl	1dbfc <net_buf_remove>
	net_buf_skipcrlf(buf);
    c27a:	4628      	mov	r0, r5
    c27c:	f011 fc91 	bl	1dba2 <net_buf_skipcrlf>
}
    c280:	2000      	movs	r0, #0
    c282:	b015      	add	sp, #84	; 0x54
    c284:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c286:	bf00      	nop
    c288:	20000e70 	.word	0x20000e70

0000c28c <hl7800_rx>:
{
    c28c:	b570      	push	{r4, r5, r6, lr}
    c28e:	b0a4      	sub	sp, #144	; 0x90
	struct net_buf *rx_buf = NULL;
    c290:	2300      	movs	r3, #0
    c292:	9323      	str	r3, [sp, #140]	; 0x8c
	struct net_buf *frag = NULL;
    c294:	9322      	str	r3, [sp, #136]	; 0x88
	bool remove_line_from_buf = true;
    c296:	e0a4      	b.n	c3e2 <hl7800_rx+0x156>
			hl7800_RX_lock();
    c298:	f7fe fcd0 	bl	ac3c <hl7800_RX_lock>
			unlock = true;
    c29c:	2601      	movs	r6, #1
    c29e:	e063      	b.n	c368 <hl7800_rx+0xdc>
						strncmp(rx_msg, handlers[i].cmd,
    c2a0:	4b58      	ldr	r3, [pc, #352]	; (c404 <hl7800_rx+0x178>)
    c2a2:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    c2a6:	eb03 0281 	add.w	r2, r3, r1, lsl #2
    c2aa:	8892      	ldrh	r2, [r2, #4]
    c2ac:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
    c2b0:	4855      	ldr	r0, [pc, #340]	; (c408 <hl7800_rx+0x17c>)
    c2b2:	f013 ff2d 	bl	20110 <strncmp>
				if (cmp_res == 0) {
    c2b6:	b198      	cbz	r0, c2e0 <hl7800_rx+0x54>
			for (i = 0; i < ARRAY_SIZE(handlers); i++) {
    c2b8:	3401      	adds	r4, #1
    c2ba:	2c28      	cmp	r4, #40	; 0x28
    c2bc:	d844      	bhi.n	c348 <hl7800_rx+0xbc>
				if (ictx.search_no_id_resp) {
    c2be:	4b53      	ldr	r3, [pc, #332]	; (c40c <hl7800_rx+0x180>)
    c2c0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
    c2c4:	2b00      	cmp	r3, #0
    c2c6:	d0eb      	beq.n	c2a0 <hl7800_rx+0x14>
							  handlers[i].cmd,
    c2c8:	4b4e      	ldr	r3, [pc, #312]	; (c404 <hl7800_rx+0x178>)
    c2ca:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    c2ce:	eb03 0281 	add.w	r2, r3, r1, lsl #2
					cmp_res = strncmp(ictx.no_id_resp_cmd,
    c2d2:	8892      	ldrh	r2, [r2, #4]
    c2d4:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
    c2d8:	484d      	ldr	r0, [pc, #308]	; (c410 <hl7800_rx+0x184>)
    c2da:	f013 ff19 	bl	20110 <strncmp>
    c2de:	e7ea      	b.n	c2b6 <hl7800_rx+0x2a>
					if (!ictx.search_no_id_resp) {
    c2e0:	4b4a      	ldr	r3, [pc, #296]	; (c40c <hl7800_rx+0x180>)
    c2e2:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
    c2e6:	b313      	cbz	r3, c32e <hl7800_rx+0xa2>
					frag = NULL;
    c2e8:	2300      	movs	r3, #0
    c2ea:	9322      	str	r3, [sp, #136]	; 0x88
					len = net_buf_findcrlf(rx_buf, &frag);
    c2ec:	a922      	add	r1, sp, #136	; 0x88
    c2ee:	9823      	ldr	r0, [sp, #140]	; 0x8c
    c2f0:	f011 fabf 	bl	1d872 <net_buf_findcrlf>
    c2f4:	4605      	mov	r5, r0
					if (!frag) {
    c2f6:	9b22      	ldr	r3, [sp, #136]	; 0x88
    c2f8:	2b00      	cmp	r3, #0
    c2fa:	d05a      	beq.n	c3b2 <hl7800_rx+0x126>
					if (handlers[i].func) {
    c2fc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    c300:	4b40      	ldr	r3, [pc, #256]	; (c404 <hl7800_rx+0x178>)
    c302:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    c306:	689b      	ldr	r3, [r3, #8]
    c308:	b1e3      	cbz	r3, c344 <hl7800_rx+0xb8>
							handlers[i].func(
    c30a:	4601      	mov	r1, r0
    c30c:	a823      	add	r0, sp, #140	; 0x8c
    c30e:	4798      	blx	r3
    c310:	4604      	mov	r4, r0
					ictx.search_no_id_resp = false;
    c312:	2300      	movs	r3, #0
    c314:	4a3d      	ldr	r2, [pc, #244]	; (c40c <hl7800_rx+0x180>)
    c316:	f882 3055 	strb.w	r3, [r2, #85]	; 0x55
					frag = NULL;
    c31a:	9322      	str	r3, [sp, #136]	; 0x88
					if (!rx_buf) {
    c31c:	9823      	ldr	r0, [sp, #140]	; 0x8c
    c31e:	2800      	cmp	r0, #0
    c320:	d04a      	beq.n	c3b8 <hl7800_rx+0x12c>
					len = net_buf_findcrlf(rx_buf, &frag);
    c322:	a922      	add	r1, sp, #136	; 0x88
    c324:	f011 faa5 	bl	1d872 <net_buf_findcrlf>
    c328:	4605      	mov	r5, r0
					cmd_handled = true;
    c32a:	2301      	movs	r3, #1
					break;
    c32c:	e00e      	b.n	c34c <hl7800_rx+0xc0>
							handlers[i].cmd_len);
    c32e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    c332:	4b34      	ldr	r3, [pc, #208]	; (c404 <hl7800_rx+0x178>)
    c334:	eb03 0382 	add.w	r3, r3, r2, lsl #2
						rx_buf = net_buf_skip(
    c338:	8899      	ldrh	r1, [r3, #4]
    c33a:	9823      	ldr	r0, [sp, #140]	; 0x8c
    c33c:	f011 fc48 	bl	1dbd0 <net_buf_skip>
    c340:	9023      	str	r0, [sp, #140]	; 0x8c
    c342:	e7d1      	b.n	c2e8 <hl7800_rx+0x5c>
			remove_line_from_buf = true;
    c344:	2401      	movs	r4, #1
    c346:	e7e4      	b.n	c312 <hl7800_rx+0x86>
    c348:	2401      	movs	r4, #1
			cmd_handled = false;
    c34a:	2300      	movs	r3, #0
			if (IS_ENABLED(HL7800_LOG_UNHANDLED_RX_MSGS) &&
    c34c:	b91b      	cbnz	r3, c356 <hl7800_rx+0xca>
			    !cmd_handled && frag && len > 1) {
    c34e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    c350:	b10b      	cbz	r3, c356 <hl7800_rx+0xca>
    c352:	2d01      	cmp	r5, #1
    c354:	d832      	bhi.n	c3bc <hl7800_rx+0x130>
			if (remove_line_from_buf && frag && rx_buf) {
    c356:	b13c      	cbz	r4, c368 <hl7800_rx+0xdc>
    c358:	9b22      	ldr	r3, [sp, #136]	; 0x88
    c35a:	b12b      	cbz	r3, c368 <hl7800_rx+0xdc>
    c35c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    c35e:	b11b      	cbz	r3, c368 <hl7800_rx+0xdc>
				net_buf_remove(&rx_buf, len);
    c360:	4629      	mov	r1, r5
    c362:	a823      	add	r0, sp, #140	; 0x8c
    c364:	f011 fc4a 	bl	1dbfc <net_buf_remove>
		while (rx_buf) {
    c368:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    c36a:	2b00      	cmp	r3, #0
    c36c:	d034      	beq.n	c3d8 <hl7800_rx+0x14c>
			if ((ictx.fw_update_state == HL7800_FOTA_START) ||
    c36e:	4b27      	ldr	r3, [pc, #156]	; (c40c <hl7800_rx+0x180>)
    c370:	f893 3688 	ldrb.w	r3, [r3, #1672]	; 0x688
			    (ictx.fw_update_state == HL7800_FOTA_WIP) ||
    c374:	3b01      	subs	r3, #1
    c376:	b2db      	uxtb	r3, r3
			if ((ictx.fw_update_state == HL7800_FOTA_START) ||
    c378:	2b02      	cmp	r3, #2
    c37a:	d804      	bhi.n	c386 <hl7800_rx+0xfa>
				process_fw_update_rx(&rx_buf);
    c37c:	a823      	add	r0, sp, #140	; 0x8c
    c37e:	f7ff fed3 	bl	c128 <process_fw_update_rx>
				if (!rx_buf) {
    c382:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    c384:	b343      	cbz	r3, c3d8 <hl7800_rx+0x14c>
			net_buf_skipcrlf(&rx_buf);
    c386:	a823      	add	r0, sp, #140	; 0x8c
    c388:	f011 fc0b 	bl	1dba2 <net_buf_skipcrlf>
			if (!rx_buf) {
    c38c:	9823      	ldr	r0, [sp, #140]	; 0x8c
    c38e:	b318      	cbz	r0, c3d8 <hl7800_rx+0x14c>
			frag = NULL;
    c390:	2300      	movs	r3, #0
    c392:	9322      	str	r3, [sp, #136]	; 0x88
			len = net_buf_findcrlf(rx_buf, &frag);
    c394:	a922      	add	r1, sp, #136	; 0x88
    c396:	f011 fa6c 	bl	1d872 <net_buf_findcrlf>
    c39a:	4605      	mov	r5, r0
			if (!frag) {
    c39c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    c39e:	b1db      	cbz	r3, c3d8 <hl7800_rx+0x14c>
			out_len = net_buf_linearize(rx_msg, sizeof(rx_msg),
    c3a0:	9000      	str	r0, [sp, #0]
    c3a2:	2300      	movs	r3, #0
    c3a4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    c3a6:	2164      	movs	r1, #100	; 0x64
    c3a8:	4817      	ldr	r0, [pc, #92]	; (c408 <hl7800_rx+0x17c>)
    c3aa:	f00c ffe4 	bl	19376 <net_buf_linearize>
			for (i = 0; i < ARRAY_SIZE(handlers); i++) {
    c3ae:	2400      	movs	r4, #0
    c3b0:	e783      	b.n	c2ba <hl7800_rx+0x2e>
			remove_line_from_buf = true;
    c3b2:	2401      	movs	r4, #1
			cmd_handled = false;
    c3b4:	2300      	movs	r3, #0
    c3b6:	e7c9      	b.n	c34c <hl7800_rx+0xc0>
					cmd_handled = true;
    c3b8:	2301      	movs	r3, #1
    c3ba:	e7c7      	b.n	c34c <hl7800_rx+0xc0>
				out_len = net_buf_linearize(msg, sizeof(msg),
    c3bc:	9500      	str	r5, [sp, #0]
    c3be:	2300      	movs	r3, #0
    c3c0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    c3c2:	2180      	movs	r1, #128	; 0x80
    c3c4:	a802      	add	r0, sp, #8
    c3c6:	f00c ffd6 	bl	19376 <net_buf_linearize>
				msg[out_len] = 0;
    c3ca:	f100 0390 	add.w	r3, r0, #144	; 0x90
    c3ce:	446b      	add	r3, sp
    c3d0:	2200      	movs	r2, #0
    c3d2:	f803 2c88 	strb.w	r2, [r3, #-136]
				LOG_HEXDUMP_DBG((const uint8_t *)&msg, len,
    c3d6:	e7be      	b.n	c356 <hl7800_rx+0xca>
		if (unlock) {
    c3d8:	b10e      	cbz	r6, c3de <hl7800_rx+0x152>
			hl7800_RX_unlock();
    c3da:	f7fe fd31 	bl	ae40 <hl7800_RX_unlock>
	z_impl_k_yield();
    c3de:	f005 fbc9 	bl	11b74 <z_impl_k_yield>
	return z_impl_k_sem_take(sem, timeout);
    c3e2:	f04f 32ff 	mov.w	r2, #4294967295
    c3e6:	f04f 33ff 	mov.w	r3, #4294967295
    c3ea:	480a      	ldr	r0, [pc, #40]	; (c414 <hl7800_rx+0x188>)
    c3ec:	f004 ff38 	bl	11260 <z_impl_k_sem_take>
		hl7800_read_rx(&rx_buf);
    c3f0:	a823      	add	r0, sp, #140	; 0x8c
    c3f2:	f7ff fca5 	bl	bd40 <hl7800_read_rx>
		if (!hl7800_RX_locked()) {
    c3f6:	f7fe fa81 	bl	a8fc <hl7800_RX_locked>
    c3fa:	2800      	cmp	r0, #0
    c3fc:	f43f af4c 	beq.w	c298 <hl7800_rx+0xc>
			unlock = false;
    c400:	2600      	movs	r6, #0
    c402:	e7b1      	b.n	c368 <hl7800_rx+0xdc>
    c404:	00021ee0 	.word	0x00021ee0
    c408:	20002b98 	.word	0x20002b98
    c40c:	20000e70 	.word	0x20000e70
    c410:	20000ea5 	.word	0x20000ea5
    c414:	20000f2c 	.word	0x20000f2c

0000c418 <on_cmd_sockdataind>:
{
    c418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c41c:	b084      	sub	sp, #16
    c41e:	4604      	mov	r4, r0
    c420:	460d      	mov	r5, r1
	if (!hl7800_TX_locked()) {
    c422:	f7fe fa75 	bl	a910 <hl7800_TX_locked>
    c426:	4607      	mov	r7, r0
    c428:	b380      	cbz	r0, c48c <on_cmd_sockdataind+0x74>
	bool unlock = false;
    c42a:	2600      	movs	r6, #0
	out_len = net_buf_linearize(value, sizeof(value) - 1, *buf, 0, len);
    c42c:	9500      	str	r5, [sp, #0]
    c42e:	2300      	movs	r3, #0
    c430:	6822      	ldr	r2, [r4, #0]
    c432:	2107      	movs	r1, #7
    c434:	a802      	add	r0, sp, #8
    c436:	f00c ff9e 	bl	19376 <net_buf_linearize>
	value[out_len] = 0;
    c43a:	f100 0310 	add.w	r3, r0, #16
    c43e:	eb0d 0003 	add.w	r0, sp, r3
    c442:	2300      	movs	r3, #0
    c444:	f800 3c08 	strb.w	r3, [r0, #-8]
	delim = strchr(value, ',');
    c448:	212c      	movs	r1, #44	; 0x2c
    c44a:	a802      	add	r0, sp, #8
    c44c:	f013 fe30 	bl	200b0 <strchr>
	if (!delim) {
    c450:	4604      	mov	r4, r0
    c452:	b1b0      	cbz	r0, c482 <on_cmd_sockdataind+0x6a>
	*delim++ = '\0';
    c454:	2500      	movs	r5, #0
    c456:	f804 5b01 	strb.w	r5, [r4], #1
	socket_id = strtol(value, NULL, 0);
    c45a:	462a      	mov	r2, r5
    c45c:	4629      	mov	r1, r5
    c45e:	a802      	add	r0, sp, #8
    c460:	f006 fc74 	bl	12d4c <strtol>
    c464:	4680      	mov	r8, r0
	left_bytes = strtol(delim, NULL, 0);
    c466:	462a      	mov	r2, r5
    c468:	4629      	mov	r1, r5
    c46a:	4620      	mov	r0, r4
    c46c:	f006 fc6e 	bl	12d4c <strtol>
    c470:	4604      	mov	r4, r0
	sock = socket_from_id(socket_id);
    c472:	4640      	mov	r0, r8
    c474:	f7fe fa6c 	bl	a950 <socket_from_id>
	if (!sock) {
    c478:	b118      	cbz	r0, c482 <on_cmd_sockdataind+0x6a>
	sock->rx_size = left_bytes;
    c47a:	6204      	str	r4, [r0, #32]
	if (defer_rx) {
    c47c:	b957      	cbnz	r7, c494 <on_cmd_sockdataind+0x7c>
		if (left_bytes > 0) {
    c47e:	2c00      	cmp	r4, #0
    c480:	dc0e      	bgt.n	c4a0 <on_cmd_sockdataind+0x88>
	if (unlock) {
    c482:	b99e      	cbnz	r6, c4ac <on_cmd_sockdataind+0x94>
}
    c484:	2001      	movs	r0, #1
    c486:	b004      	add	sp, #16
    c488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		hl7800_TX_lock();
    c48c:	f7fe fbca 	bl	ac24 <hl7800_TX_lock>
		unlock = true;
    c490:	2601      	movs	r6, #1
    c492:	e7cb      	b.n	c42c <on_cmd_sockdataind+0x14>
		k_work_submit_to_queue(&hl7800_workq, &sock->rx_data_work);
    c494:	f100 0154 	add.w	r1, r0, #84	; 0x54
    c498:	4806      	ldr	r0, [pc, #24]	; (c4b4 <on_cmd_sockdataind+0x9c>)
    c49a:	f012 ffa1 	bl	1f3e0 <k_work_submit_to_queue>
    c49e:	e7f0      	b.n	c482 <on_cmd_sockdataind+0x6a>
			rc = start_socket_rx(sock, left_bytes);
    c4a0:	b2a1      	uxth	r1, r4
    c4a2:	f7fe fecd 	bl	b240 <start_socket_rx>
			if (rc < 0) {
    c4a6:	2800      	cmp	r0, #0
    c4a8:	daec      	bge.n	c484 <on_cmd_sockdataind+0x6c>
    c4aa:	e7ea      	b.n	c482 <on_cmd_sockdataind+0x6a>
		hl7800_TX_unlock();
    c4ac:	f7fe fcd0 	bl	ae50 <hl7800_TX_unlock>
    c4b0:	e7e8      	b.n	c484 <on_cmd_sockdataind+0x6c>
    c4b2:	bf00      	nop
    c4b4:	20001b20 	.word	0x20001b20

0000c4b8 <on_cmd_sock_notif>:
{
    c4b8:	b530      	push	{r4, r5, lr}
    c4ba:	b0a3      	sub	sp, #140	; 0x8c
	out_len = net_buf_linearize(value, sizeof(value), *buf, 0, len);
    c4bc:	6802      	ldr	r2, [r0, #0]
    c4be:	9100      	str	r1, [sp, #0]
    c4c0:	2300      	movs	r3, #0
    c4c2:	2180      	movs	r1, #128	; 0x80
    c4c4:	a802      	add	r0, sp, #8
    c4c6:	f00c ff56 	bl	19376 <net_buf_linearize>
	value[out_len] = 0;
    c4ca:	f100 0388 	add.w	r3, r0, #136	; 0x88
    c4ce:	eb0d 0003 	add.w	r0, sp, r3
    c4d2:	2300      	movs	r3, #0
    c4d4:	f800 3c80 	strb.w	r3, [r0, #-128]
	delim = strchr(value, ',');
    c4d8:	212c      	movs	r1, #44	; 0x2c
    c4da:	a802      	add	r0, sp, #8
    c4dc:	f013 fde8 	bl	200b0 <strchr>
	if (!delim) {
    c4e0:	b330      	cbz	r0, c530 <on_cmd_sock_notif+0x78>
    c4e2:	4604      	mov	r4, r0
	id = strtol(value, NULL, 10);
    c4e4:	220a      	movs	r2, #10
    c4e6:	2100      	movs	r1, #0
    c4e8:	a802      	add	r0, sp, #8
    c4ea:	f006 fc2f 	bl	12d4c <strtol>
    c4ee:	4605      	mov	r5, r0
	notif_val = strtol(delim + 1, NULL, 10);
    c4f0:	220a      	movs	r2, #10
    c4f2:	2100      	movs	r1, #0
    c4f4:	1c60      	adds	r0, r4, #1
    c4f6:	f006 fc29 	bl	12d4c <strtol>
    c4fa:	4604      	mov	r4, r0
	sock = socket_from_id(id);
    c4fc:	4628      	mov	r0, r5
    c4fe:	f7fe fa27 	bl	a950 <socket_from_id>
	if (!sock) {
    c502:	4605      	mov	r5, r0
    c504:	b1a0      	cbz	r0, c530 <on_cmd_sock_notif+0x78>
	switch (notif_val) {
    c506:	b2e0      	uxtb	r0, r4
    c508:	2804      	cmp	r0, #4
    c50a:	d004      	beq.n	c516 <on_cmd_sock_notif+0x5e>
    c50c:	2808      	cmp	r0, #8
    c50e:	d112      	bne.n	c536 <on_cmd_sock_notif+0x7e>
		sock->error = 0;
    c510:	2300      	movs	r3, #0
    c512:	626b      	str	r3, [r5, #36]	; 0x24
	if (err) {
    c514:	e00c      	b.n	c530 <on_cmd_sock_notif+0x78>
		sock->error = -ENOTCONN;
    c516:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    c51a:	626b      	str	r3, [r5, #36]	; 0x24
		trigger_sem = false;
    c51c:	2400      	movs	r4, #0
		k_work_reschedule_for_queue(&hl7800_workq, &sock->notif_work, MDM_SOCK_NOTIF_DELAY);
    c51e:	f241 3234 	movw	r2, #4916	; 0x1334
    c522:	2300      	movs	r3, #0
    c524:	f105 0168 	add.w	r1, r5, #104	; 0x68
    c528:	4808      	ldr	r0, [pc, #32]	; (c54c <on_cmd_sock_notif+0x94>)
    c52a:	f012 ff99 	bl	1f460 <k_work_reschedule_for_queue>
		if (trigger_sem) {
    c52e:	b93c      	cbnz	r4, c540 <on_cmd_sock_notif+0x88>
}
    c530:	2001      	movs	r0, #1
    c532:	b023      	add	sp, #140	; 0x8c
    c534:	bd30      	pop	{r4, r5, pc}
		sock->error = -EIO;
    c536:	f06f 0304 	mvn.w	r3, #4
    c53a:	626b      	str	r3, [r5, #36]	; 0x24
	bool trigger_sem = true;
    c53c:	2401      	movs	r4, #1
    c53e:	e7ee      	b.n	c51e <on_cmd_sock_notif+0x66>
			k_sem_give(&sock->sock_send_sem);
    c540:	f105 002c 	add.w	r0, r5, #44	; 0x2c
	z_impl_k_sem_give(sem);
    c544:	f004 fe64 	bl	11210 <z_impl_k_sem_give>
}
    c548:	e7f2      	b.n	c530 <on_cmd_sock_notif+0x78>
    c54a:	bf00      	nop
    c54c:	20001b20 	.word	0x20001b20

0000c550 <on_cmd_sock_ind>:
{
    c550:	b510      	push	{r4, lr}
    c552:	b0a2      	sub	sp, #136	; 0x88
	ictx.last_error = 0;
    c554:	2400      	movs	r4, #0
    c556:	4b12      	ldr	r3, [pc, #72]	; (c5a0 <on_cmd_sock_ind+0x50>)
    c558:	f8c3 44dc 	str.w	r4, [r3, #1244]	; 0x4dc
	out_len = net_buf_linearize(value, sizeof(value), *buf, 0, len);
    c55c:	6802      	ldr	r2, [r0, #0]
    c55e:	9100      	str	r1, [sp, #0]
    c560:	4623      	mov	r3, r4
    c562:	2180      	movs	r1, #128	; 0x80
    c564:	a802      	add	r0, sp, #8
    c566:	f00c ff06 	bl	19376 <net_buf_linearize>
	value[out_len] = 0;
    c56a:	f100 0388 	add.w	r3, r0, #136	; 0x88
    c56e:	eb0d 0003 	add.w	r0, sp, r3
    c572:	f800 4c80 	strb.w	r4, [r0, #-128]
	delim = strchr(value, ',');
    c576:	212c      	movs	r1, #44	; 0x2c
    c578:	a802      	add	r0, sp, #8
    c57a:	f013 fd99 	bl	200b0 <strchr>
	if (!delim) {
    c57e:	b160      	cbz	r0, c59a <on_cmd_sock_ind+0x4a>
	id = strtol(value, NULL, 10);
    c580:	220a      	movs	r2, #10
    c582:	4621      	mov	r1, r4
    c584:	a802      	add	r0, sp, #8
    c586:	f006 fbe1 	bl	12d4c <strtol>
	sock = socket_from_id(id);
    c58a:	f7fe f9e1 	bl	a950 <socket_from_id>
	if (sock) {
    c58e:	4603      	mov	r3, r0
    c590:	b118      	cbz	r0, c59a <on_cmd_sock_ind+0x4a>
		sock->error = 0;
    c592:	625c      	str	r4, [r3, #36]	; 0x24
		k_sem_give(&sock->sock_send_sem);
    c594:	302c      	adds	r0, #44	; 0x2c
	z_impl_k_sem_give(sem);
    c596:	f004 fe3b 	bl	11210 <z_impl_k_sem_give>
}
    c59a:	2001      	movs	r0, #1
    c59c:	b022      	add	sp, #136	; 0x88
    c59e:	bd10      	pop	{r4, pc}
    c5a0:	20000e70 	.word	0x20000e70

0000c5a4 <on_cmd_kudp_ind>:
{
    c5a4:	b508      	push	{r3, lr}
	return on_cmd_sock_ind(buf, len, "+KUDP_IND");
    c5a6:	4a02      	ldr	r2, [pc, #8]	; (c5b0 <on_cmd_kudp_ind+0xc>)
    c5a8:	f7ff ffd2 	bl	c550 <on_cmd_sock_ind>
}
    c5ac:	bd08      	pop	{r3, pc}
    c5ae:	bf00      	nop
    c5b0:	00021c9c 	.word	0x00021c9c

0000c5b4 <on_cmd_ktcp_ind>:
{
    c5b4:	b508      	push	{r3, lr}
	return on_cmd_sock_ind(buf, len, "+KTCP_IND");
    c5b6:	4a02      	ldr	r2, [pc, #8]	; (c5c0 <on_cmd_ktcp_ind+0xc>)
    c5b8:	f7ff ffca 	bl	c550 <on_cmd_sock_ind>
}
    c5bc:	bd08      	pop	{r3, pc}
    c5be:	bf00      	nop
    c5c0:	00021ca8 	.word	0x00021ca8

0000c5c4 <on_cmd_network_report>:
{
    c5c4:	b510      	push	{r4, lr}
    c5c6:	b0a2      	sub	sp, #136	; 0x88
	out_len = net_buf_linearize(ictx.mdm_network_status,
    c5c8:	6802      	ldr	r2, [r0, #0]
    c5ca:	4c1d      	ldr	r4, [pc, #116]	; (c640 <on_cmd_network_report+0x7c>)
    c5cc:	9100      	str	r1, [sp, #0]
    c5ce:	2300      	movs	r3, #0
    c5d0:	212c      	movs	r1, #44	; 0x2c
    c5d2:	4620      	mov	r0, r4
    c5d4:	f00c fecf 	bl	19376 <net_buf_linearize>
	ictx.mdm_network_status[out_len] = 0;
    c5d8:	f6a4 3308 	subw	r3, r4, #2824	; 0xb08
    c5dc:	4403      	add	r3, r0
    c5de:	2200      	movs	r2, #0
    c5e0:	f883 2b08 	strb.w	r2, [r3, #2824]	; 0xb08
	pos = strchr(ictx.mdm_network_status, ',');
    c5e4:	212c      	movs	r1, #44	; 0x2c
    c5e6:	4620      	mov	r0, r4
    c5e8:	f013 fd62 	bl	200b0 <strchr>
	if (pos) {
    c5ec:	b1f0      	cbz	r0, c62c <on_cmd_network_report+0x68>
		l = pos - ictx.mdm_network_status;
    c5ee:	4914      	ldr	r1, [pc, #80]	; (c640 <on_cmd_network_report+0x7c>)
    c5f0:	1a44      	subs	r4, r0, r1
		strncpy(val, ictx.mdm_network_status, l);
    c5f2:	2380      	movs	r3, #128	; 0x80
    c5f4:	4622      	mov	r2, r4
    c5f6:	a802      	add	r0, sp, #8
    c5f8:	f013 fdaf 	bl	2015a <__strncpy_chk>
		val[l] = 0;
    c5fc:	f104 0388 	add.w	r3, r4, #136	; 0x88
    c600:	eb0d 0403 	add.w	r4, sp, r3
    c604:	2100      	movs	r1, #0
    c606:	f804 1c80 	strb.w	r1, [r4, #-128]
		set_network_state(strtol(val, NULL, 0));
    c60a:	460a      	mov	r2, r1
    c60c:	a802      	add	r0, sp, #8
    c60e:	f006 fb9d 	bl	12d4c <strtol>
    c612:	b2c0      	uxtb	r0, r0
    c614:	f7fe feb4 	bl	b380 <set_network_state>
	k_work_reschedule_for_queue(&hl7800_workq, &ictx.iface_status_work,
    c618:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    c61c:	2300      	movs	r3, #0
    c61e:	4909      	ldr	r1, [pc, #36]	; (c644 <on_cmd_network_report+0x80>)
    c620:	4809      	ldr	r0, [pc, #36]	; (c648 <on_cmd_network_report+0x84>)
    c622:	f012 ff1d 	bl	1f460 <k_work_reschedule_for_queue>
}
    c626:	2001      	movs	r0, #1
    c628:	b022      	add	sp, #136	; 0x88
    c62a:	bd10      	pop	{r4, pc}
		set_network_state(strtol(ictx.mdm_network_status, NULL, 0));
    c62c:	2200      	movs	r2, #0
    c62e:	4611      	mov	r1, r2
    c630:	4803      	ldr	r0, [pc, #12]	; (c640 <on_cmd_network_report+0x7c>)
    c632:	f006 fb8b 	bl	12d4c <strtol>
    c636:	b2c0      	uxtb	r0, r0
    c638:	f7fe fea2 	bl	b380 <set_network_state>
    c63c:	e7ec      	b.n	c618 <on_cmd_network_report+0x54>
    c63e:	bf00      	nop
    c640:	20001978 	.word	0x20001978
    c644:	200013f8 	.word	0x200013f8
    c648:	20001b20 	.word	0x20001b20

0000c64c <on_cmd_network_report_query>:
{
    c64c:	b530      	push	{r4, r5, lr}
    c64e:	b0c3      	sub	sp, #268	; 0x10c
	out_len = net_buf_linearize(value, sizeof(value), *buf, 0, len);
    c650:	6802      	ldr	r2, [r0, #0]
    c652:	9100      	str	r1, [sp, #0]
    c654:	2300      	movs	r3, #0
    c656:	2180      	movs	r1, #128	; 0x80
    c658:	a822      	add	r0, sp, #136	; 0x88
    c65a:	f00c fe8c 	bl	19376 <net_buf_linearize>
    c65e:	4604      	mov	r4, r0
	pos = strchr(value, ',');
    c660:	212c      	movs	r1, #44	; 0x2c
    c662:	a822      	add	r0, sp, #136	; 0x88
    c664:	f013 fd24 	bl	200b0 <strchr>
	if (pos) {
    c668:	b1d0      	cbz	r0, c6a0 <on_cmd_network_report_query+0x54>
    c66a:	4601      	mov	r1, r0
		l = (value + out_len) - pos;
    c66c:	ab22      	add	r3, sp, #136	; 0x88
    c66e:	1918      	adds	r0, r3, r4
    c670:	1a44      	subs	r4, r0, r1
		strncpy(val, pos + 1, l);
    c672:	ad02      	add	r5, sp, #8
    c674:	2380      	movs	r3, #128	; 0x80
    c676:	4622      	mov	r2, r4
    c678:	3101      	adds	r1, #1
    c67a:	4628      	mov	r0, r5
    c67c:	f013 fd6d 	bl	2015a <__strncpy_chk>
		val[l] = 0;
    c680:	2100      	movs	r1, #0
    c682:	5529      	strb	r1, [r5, r4]
		set_network_state(strtol(val, NULL, 0));
    c684:	460a      	mov	r2, r1
    c686:	4628      	mov	r0, r5
    c688:	f006 fb60 	bl	12d4c <strtol>
    c68c:	b2c0      	uxtb	r0, r0
    c68e:	f7fe fe77 	bl	b380 <set_network_state>
		k_work_reschedule_for_queue(&hl7800_workq,
    c692:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    c696:	2300      	movs	r3, #0
    c698:	4903      	ldr	r1, [pc, #12]	; (c6a8 <on_cmd_network_report_query+0x5c>)
    c69a:	4804      	ldr	r0, [pc, #16]	; (c6ac <on_cmd_network_report_query+0x60>)
    c69c:	f012 fee0 	bl	1f460 <k_work_reschedule_for_queue>
}
    c6a0:	2001      	movs	r0, #1
    c6a2:	b043      	add	sp, #268	; 0x10c
    c6a4:	bd30      	pop	{r4, r5, pc}
    c6a6:	bf00      	nop
    c6a8:	200013f8 	.word	0x200013f8
    c6ac:	20001b20 	.word	0x20001b20

0000c6b0 <on_cmd_atcmdinfo_pdp_context>:
{
    c6b0:	b570      	push	{r4, r5, r6, lr}
    c6b2:	b0ac      	sub	sp, #176	; 0xb0
    c6b4:	4604      	mov	r4, r0
	struct net_buf *frag = NULL;
    c6b6:	2100      	movs	r1, #0
    c6b8:	912b      	str	r1, [sp, #172]	; 0xac
	wait_for_modem_data_and_newline(buf, net_buf_frags_len(*buf),
    c6ba:	6803      	ldr	r3, [r0, #0]
    c6bc:	e002      	b.n	c6c4 <on_cmd_atcmdinfo_pdp_context+0x14>
		bytes += buf->len;
    c6be:	899a      	ldrh	r2, [r3, #12]
    c6c0:	4411      	add	r1, r2
		buf = buf->frags;
    c6c2:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    c6c4:	2b00      	cmp	r3, #0
    c6c6:	d1fa      	bne.n	c6be <on_cmd_atcmdinfo_pdp_context+0xe>
    c6c8:	22a0      	movs	r2, #160	; 0xa0
    c6ca:	4620      	mov	r0, r4
    c6cc:	f7ff fb6e 	bl	bdac <wait_for_modem_data_and_newline>
	line_length = net_buf_findcrlf(*buf, &frag);
    c6d0:	a92b      	add	r1, sp, #172	; 0xac
    c6d2:	6820      	ldr	r0, [r4, #0]
    c6d4:	f011 f8cd 	bl	1d872 <net_buf_findcrlf>
	if (line_length) {
    c6d8:	4605      	mov	r5, r0
    c6da:	b948      	cbnz	r0, c6f0 <on_cmd_atcmdinfo_pdp_context+0x40>
	net_buf_remove(buf, line_length);
    c6dc:	4629      	mov	r1, r5
    c6de:	4620      	mov	r0, r4
    c6e0:	f011 fa8c 	bl	1dbfc <net_buf_remove>
	net_buf_skipcrlf(buf);
    c6e4:	4620      	mov	r0, r4
    c6e6:	f011 fa5c 	bl	1dba2 <net_buf_skipcrlf>
}
    c6ea:	2000      	movs	r0, #0
    c6ec:	b02c      	add	sp, #176	; 0xb0
    c6ee:	bd70      	pop	{r4, r5, r6, pc}
		memset(line, 0, sizeof(line));
    c6f0:	22a0      	movs	r2, #160	; 0xa0
    c6f2:	2100      	movs	r1, #0
    c6f4:	a803      	add	r0, sp, #12
    c6f6:	f013 fb9f 	bl	1fe38 <memset>
		output_length = net_buf_linearize(line, SIZE_WITHOUT_NUL(line),
    c6fa:	9500      	str	r5, [sp, #0]
    c6fc:	2300      	movs	r3, #0
    c6fe:	6822      	ldr	r2, [r4, #0]
    c700:	219f      	movs	r1, #159	; 0x9f
    c702:	a803      	add	r0, sp, #12
    c704:	f00c fe37 	bl	19376 <net_buf_linearize>
		if (output_length > 0) {
    c708:	2800      	cmp	r0, #0
    c70a:	d0e7      	beq.n	c6dc <on_cmd_atcmdinfo_pdp_context+0x2c>
			memset(ictx.mdm_apn.value, 0, sizeof(ictx.mdm_apn.value));
    c70c:	4e1d      	ldr	r6, [pc, #116]	; (c784 <on_cmd_atcmdinfo_pdp_context+0xd4>)
    c70e:	2240      	movs	r2, #64	; 0x40
    c710:	2100      	movs	r1, #0
    c712:	4630      	mov	r0, r6
    c714:	f013 fb90 	bl	1fe38 <memset>
			memset(ictx.mdm_pdp_addr_fam, 0, MDM_ADDR_FAM_MAX_LEN);
    c718:	2300      	movs	r3, #0
    c71a:	f8c6 30ca 	str.w	r3, [r6, #202]	; 0xca
    c71e:	f8c6 30cd 	str.w	r3, [r6, #205]	; 0xcd
			p = strchr(line, ',');
    c722:	212c      	movs	r1, #44	; 0x2c
    c724:	a803      	add	r0, sp, #12
    c726:	f013 fcc3 	bl	200b0 <strchr>
			if (p == NULL) {
    c72a:	2800      	cmp	r0, #0
    c72c:	d0d6      	beq.n	c6dc <on_cmd_atcmdinfo_pdp_context+0x2c>
			p += 2;
    c72e:	3002      	adds	r0, #2
			i = 0;
    c730:	2300      	movs	r3, #0
			while ((p != NULL) && (*p != '"') && (i < MDM_ADDR_FAM_MAX_LEN)) {
    c732:	b158      	cbz	r0, c74c <on_cmd_atcmdinfo_pdp_context+0x9c>
    c734:	7801      	ldrb	r1, [r0, #0]
    c736:	2922      	cmp	r1, #34	; 0x22
    c738:	d008      	beq.n	c74c <on_cmd_atcmdinfo_pdp_context+0x9c>
    c73a:	2b06      	cmp	r3, #6
    c73c:	d806      	bhi.n	c74c <on_cmd_atcmdinfo_pdp_context+0x9c>
				ictx.mdm_pdp_addr_fam[i++] = *p++;
    c73e:	3001      	adds	r0, #1
    c740:	4a11      	ldr	r2, [pc, #68]	; (c788 <on_cmd_atcmdinfo_pdp_context+0xd8>)
    c742:	441a      	add	r2, r3
    c744:	f882 1c67 	strb.w	r1, [r2, #3175]	; 0xc67
    c748:	3301      	adds	r3, #1
    c74a:	e7f2      	b.n	c732 <on_cmd_atcmdinfo_pdp_context+0x82>
			p = strchr(p, ',');
    c74c:	212c      	movs	r1, #44	; 0x2c
    c74e:	f013 fcaf 	bl	200b0 <strchr>
			if (p == NULL) {
    c752:	4603      	mov	r3, r0
    c754:	2800      	cmp	r0, #0
    c756:	d0c1      	beq.n	c6dc <on_cmd_atcmdinfo_pdp_context+0x2c>
			if (*p == ',') {
    c758:	7842      	ldrb	r2, [r0, #1]
    c75a:	2a2c      	cmp	r2, #44	; 0x2c
    c75c:	d0be      	beq.n	c6dc <on_cmd_atcmdinfo_pdp_context+0x2c>
			if (*p == '"') {
    c75e:	2a22      	cmp	r2, #34	; 0x22
    c760:	d1bc      	bne.n	c6dc <on_cmd_atcmdinfo_pdp_context+0x2c>
				p++;
    c762:	3302      	adds	r3, #2
				i = 0;
    c764:	2200      	movs	r2, #0
				while ((p != NULL) && (*p != '"') &&
    c766:	e005      	b.n	c774 <on_cmd_atcmdinfo_pdp_context+0xc4>
					ictx.mdm_apn.value[i++] = *p++;
    c768:	3301      	adds	r3, #1
    c76a:	4907      	ldr	r1, [pc, #28]	; (c788 <on_cmd_atcmdinfo_pdp_context+0xd8>)
    c76c:	4411      	add	r1, r2
    c76e:	f881 0b9d 	strb.w	r0, [r1, #2973]	; 0xb9d
    c772:	3201      	adds	r2, #1
				while ((p != NULL) && (*p != '"') &&
    c774:	2b00      	cmp	r3, #0
    c776:	d0b1      	beq.n	c6dc <on_cmd_atcmdinfo_pdp_context+0x2c>
    c778:	7818      	ldrb	r0, [r3, #0]
    c77a:	2822      	cmp	r0, #34	; 0x22
    c77c:	d0ae      	beq.n	c6dc <on_cmd_atcmdinfo_pdp_context+0x2c>
    c77e:	2a3e      	cmp	r2, #62	; 0x3e
    c780:	d9f2      	bls.n	c768 <on_cmd_atcmdinfo_pdp_context+0xb8>
    c782:	e7ab      	b.n	c6dc <on_cmd_atcmdinfo_pdp_context+0x2c>
    c784:	20001a0d 	.word	0x20001a0d
    c788:	20000e70 	.word	0x20000e70

0000c78c <on_cmd_atcmdinfo_pdp_authentication_cfg>:
{
    c78c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c78e:	b0ad      	sub	sp, #180	; 0xb4
    c790:	4604      	mov	r4, r0
	struct net_buf *frag = NULL;
    c792:	2100      	movs	r1, #0
    c794:	912b      	str	r1, [sp, #172]	; 0xac
	wait_for_modem_data_and_newline(buf, net_buf_frags_len(*buf),
    c796:	6803      	ldr	r3, [r0, #0]
    c798:	e002      	b.n	c7a0 <on_cmd_atcmdinfo_pdp_authentication_cfg+0x14>
		bytes += buf->len;
    c79a:	899a      	ldrh	r2, [r3, #12]
    c79c:	4411      	add	r1, r2
		buf = buf->frags;
    c79e:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    c7a0:	2b00      	cmp	r3, #0
    c7a2:	d1fa      	bne.n	c79a <on_cmd_atcmdinfo_pdp_authentication_cfg+0xe>
    c7a4:	22a0      	movs	r2, #160	; 0xa0
    c7a6:	4620      	mov	r0, r4
    c7a8:	f7ff fb00 	bl	bdac <wait_for_modem_data_and_newline>
	line_length = net_buf_findcrlf(*buf, &frag);
    c7ac:	a92b      	add	r1, sp, #172	; 0xac
    c7ae:	6820      	ldr	r0, [r4, #0]
    c7b0:	f011 f85f 	bl	1d872 <net_buf_findcrlf>
	if (line_length) {
    c7b4:	4605      	mov	r5, r0
    c7b6:	b948      	cbnz	r0, c7cc <on_cmd_atcmdinfo_pdp_authentication_cfg+0x40>
	net_buf_remove(buf, line_length);
    c7b8:	4629      	mov	r1, r5
    c7ba:	4620      	mov	r0, r4
    c7bc:	f011 fa1e 	bl	1dbfc <net_buf_remove>
	net_buf_skipcrlf(buf);
    c7c0:	4620      	mov	r0, r4
    c7c2:	f011 f9ee 	bl	1dba2 <net_buf_skipcrlf>
}
    c7c6:	2000      	movs	r0, #0
    c7c8:	b02d      	add	sp, #180	; 0xb4
    c7ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(line, 0, sizeof(line));
    c7cc:	22a0      	movs	r2, #160	; 0xa0
    c7ce:	2100      	movs	r1, #0
    c7d0:	a803      	add	r0, sp, #12
    c7d2:	f013 fb31 	bl	1fe38 <memset>
		output_length = net_buf_linearize(line, SIZE_WITHOUT_NUL(line),
    c7d6:	9500      	str	r5, [sp, #0]
    c7d8:	2300      	movs	r3, #0
    c7da:	6822      	ldr	r2, [r4, #0]
    c7dc:	219f      	movs	r1, #159	; 0x9f
    c7de:	a803      	add	r0, sp, #12
    c7e0:	f00c fdc9 	bl	19376 <net_buf_linearize>
		if (output_length > 0) {
    c7e4:	2800      	cmp	r0, #0
    c7e6:	d0e7      	beq.n	c7b8 <on_cmd_atcmdinfo_pdp_authentication_cfg+0x2c>
			memset(ictx.mdm_apn.username, 0,
    c7e8:	4e1c      	ldr	r6, [pc, #112]	; (c85c <on_cmd_atcmdinfo_pdp_authentication_cfg+0xd0>)
    c7ea:	2741      	movs	r7, #65	; 0x41
    c7ec:	463a      	mov	r2, r7
    c7ee:	2100      	movs	r1, #0
    c7f0:	4630      	mov	r0, r6
    c7f2:	f013 fb21 	bl	1fe38 <memset>
			memset(ictx.mdm_apn.password, 0,
    c7f6:	463a      	mov	r2, r7
    c7f8:	2100      	movs	r1, #0
    c7fa:	19f0      	adds	r0, r6, r7
    c7fc:	f013 fb1c 	bl	1fe38 <memset>
			p = strchr(line, '"');
    c800:	2122      	movs	r1, #34	; 0x22
    c802:	a803      	add	r0, sp, #12
    c804:	f013 fc54 	bl	200b0 <strchr>
			if (p != NULL) {
    c808:	4603      	mov	r3, r0
    c80a:	b170      	cbz	r0, c82a <on_cmd_atcmdinfo_pdp_authentication_cfg+0x9e>
				p += 1;
    c80c:	3301      	adds	r3, #1
				i = 0;
    c80e:	2200      	movs	r2, #0
				while ((p != NULL) && (*p != '"') &&
    c810:	e005      	b.n	c81e <on_cmd_atcmdinfo_pdp_authentication_cfg+0x92>
					ictx.mdm_apn.username[i++] = *p++;
    c812:	3301      	adds	r3, #1
    c814:	4912      	ldr	r1, [pc, #72]	; (c860 <on_cmd_atcmdinfo_pdp_authentication_cfg+0xd4>)
    c816:	4411      	add	r1, r2
    c818:	f881 0bdd 	strb.w	r0, [r1, #3037]	; 0xbdd
    c81c:	3201      	adds	r2, #1
				while ((p != NULL) && (*p != '"') &&
    c81e:	b123      	cbz	r3, c82a <on_cmd_atcmdinfo_pdp_authentication_cfg+0x9e>
    c820:	7818      	ldrb	r0, [r3, #0]
    c822:	2822      	cmp	r0, #34	; 0x22
    c824:	d001      	beq.n	c82a <on_cmd_atcmdinfo_pdp_authentication_cfg+0x9e>
    c826:	2a3f      	cmp	r2, #63	; 0x3f
    c828:	d9f3      	bls.n	c812 <on_cmd_atcmdinfo_pdp_authentication_cfg+0x86>
			p = strchr(p + 1, '"');
    c82a:	2122      	movs	r1, #34	; 0x22
    c82c:	1c58      	adds	r0, r3, #1
    c82e:	f013 fc3f 	bl	200b0 <strchr>
			if (p != NULL) {
    c832:	4603      	mov	r3, r0
    c834:	2800      	cmp	r0, #0
    c836:	d0bf      	beq.n	c7b8 <on_cmd_atcmdinfo_pdp_authentication_cfg+0x2c>
				p += 1;
    c838:	3301      	adds	r3, #1
				i = 0;
    c83a:	2200      	movs	r2, #0
				while ((p != NULL) && (*p != '"') &&
    c83c:	e005      	b.n	c84a <on_cmd_atcmdinfo_pdp_authentication_cfg+0xbe>
					ictx.mdm_apn.password[i++] = *p++;
    c83e:	3301      	adds	r3, #1
    c840:	4907      	ldr	r1, [pc, #28]	; (c860 <on_cmd_atcmdinfo_pdp_authentication_cfg+0xd4>)
    c842:	4411      	add	r1, r2
    c844:	f881 0c1e 	strb.w	r0, [r1, #3102]	; 0xc1e
    c848:	3201      	adds	r2, #1
				while ((p != NULL) && (*p != '"') &&
    c84a:	2b00      	cmp	r3, #0
    c84c:	d0b4      	beq.n	c7b8 <on_cmd_atcmdinfo_pdp_authentication_cfg+0x2c>
    c84e:	7818      	ldrb	r0, [r3, #0]
    c850:	2822      	cmp	r0, #34	; 0x22
    c852:	d0b1      	beq.n	c7b8 <on_cmd_atcmdinfo_pdp_authentication_cfg+0x2c>
    c854:	2a3f      	cmp	r2, #63	; 0x3f
    c856:	d9f2      	bls.n	c83e <on_cmd_atcmdinfo_pdp_authentication_cfg+0xb2>
    c858:	e7ae      	b.n	c7b8 <on_cmd_atcmdinfo_pdp_authentication_cfg+0x2c>
    c85a:	bf00      	nop
    c85c:	20001a4d 	.word	0x20001a4d
    c860:	20000e70 	.word	0x20000e70

0000c864 <on_cmd_atcmdinfo_operator_status>:
{
    c864:	b510      	push	{r4, lr}
    c866:	b0a4      	sub	sp, #144	; 0x90
    c868:	460c      	mov	r4, r1
	out_len = net_buf_linearize(value, sizeof(value), *buf, 0, len);
    c86a:	6802      	ldr	r2, [r0, #0]
    c86c:	9100      	str	r1, [sp, #0]
    c86e:	2300      	movs	r3, #0
    c870:	2180      	movs	r1, #128	; 0x80
    c872:	a804      	add	r0, sp, #16
    c874:	f00c fd7f 	bl	19376 <net_buf_linearize>
	value[out_len] = 0;
    c878:	f100 0390 	add.w	r3, r0, #144	; 0x90
    c87c:	eb0d 0003 	add.w	r0, sp, r3
    c880:	2300      	movs	r3, #0
    c882:	f800 3c80 	strb.w	r3, [r0, #-128]
	if (strchr(value, '(') != NULL) {
    c886:	2128      	movs	r1, #40	; 0x28
    c888:	a804      	add	r0, sp, #16
    c88a:	f013 fc11 	bl	200b0 <strchr>
    c88e:	b110      	cbz	r0, c896 <on_cmd_atcmdinfo_operator_status+0x32>
}
    c890:	2001      	movs	r0, #1
    c892:	b024      	add	sp, #144	; 0x90
    c894:	bd10      	pop	{r4, pc}
	if (len == 1) {
    c896:	2c01      	cmp	r4, #1
    c898:	d010      	beq.n	c8bc <on_cmd_atcmdinfo_operator_status+0x58>
	for (i = 0; i < num_delims; i++) {
    c89a:	2400      	movs	r4, #0
	search_start = value;
    c89c:	a804      	add	r0, sp, #16
	for (i = 0; i < num_delims; i++) {
    c89e:	2c01      	cmp	r4, #1
    c8a0:	dc11      	bgt.n	c8c6 <on_cmd_atcmdinfo_operator_status+0x62>
		delims[i] = strchr(search_start, ',');
    c8a2:	212c      	movs	r1, #44	; 0x2c
    c8a4:	f013 fc04 	bl	200b0 <strchr>
    c8a8:	ab24      	add	r3, sp, #144	; 0x90
    c8aa:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    c8ae:	f843 0c88 	str.w	r0, [r3, #-136]
		if (!delims[i]) {
    c8b2:	2800      	cmp	r0, #0
    c8b4:	d0ec      	beq.n	c890 <on_cmd_atcmdinfo_operator_status+0x2c>
		search_start = delims[i] + 1;
    c8b6:	3001      	adds	r0, #1
	for (i = 0; i < num_delims; i++) {
    c8b8:	3401      	adds	r4, #1
    c8ba:	e7f0      	b.n	c89e <on_cmd_atcmdinfo_operator_status+0x3a>
		ictx.operator_status = NO_OPERATOR;
    c8bc:	4b04      	ldr	r3, [pc, #16]	; (c8d0 <on_cmd_atcmdinfo_operator_status+0x6c>)
    c8be:	2200      	movs	r2, #0
    c8c0:	f883 2c74 	strb.w	r2, [r3, #3188]	; 0xc74
		goto done;
    c8c4:	e7e4      	b.n	c890 <on_cmd_atcmdinfo_operator_status+0x2c>
	ictx.operator_status = REGISTERED;
    c8c6:	4b02      	ldr	r3, [pc, #8]	; (c8d0 <on_cmd_atcmdinfo_operator_status+0x6c>)
    c8c8:	2201      	movs	r2, #1
    c8ca:	f883 2c74 	strb.w	r2, [r3, #3188]	; 0xc74
    c8ce:	e7df      	b.n	c890 <on_cmd_atcmdinfo_operator_status+0x2c>
    c8d0:	20000e70 	.word	0x20000e70

0000c8d4 <on_cmd_atcmdinfo_rssi>:
{
    c8d4:	b510      	push	{r4, lr}
    c8d6:	b0a6      	sub	sp, #152	; 0x98
	out_len = net_buf_linearize(value, len, *buf, 0, len);
    c8d8:	6802      	ldr	r2, [r0, #0]
    c8da:	9100      	str	r1, [sp, #0]
    c8dc:	2300      	movs	r3, #0
    c8de:	a802      	add	r0, sp, #8
    c8e0:	f00c fd49 	bl	19376 <net_buf_linearize>
	value[out_len] = 0;
    c8e4:	f100 0398 	add.w	r3, r0, #152	; 0x98
    c8e8:	eb0d 0003 	add.w	r0, sp, r3
    c8ec:	2400      	movs	r4, #0
    c8ee:	f800 4c90 	strb.w	r4, [r0, #-144]
	search_start = value;
    c8f2:	a802      	add	r0, sp, #8
	for (i = 0; i < num_delims; i++) {
    c8f4:	2c03      	cmp	r4, #3
    c8f6:	dc0b      	bgt.n	c910 <on_cmd_atcmdinfo_rssi+0x3c>
		delims[i] = strchr(search_start, ',');
    c8f8:	212c      	movs	r1, #44	; 0x2c
    c8fa:	f013 fbd9 	bl	200b0 <strchr>
    c8fe:	ab26      	add	r3, sp, #152	; 0x98
    c900:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    c904:	f843 0c10 	str.w	r0, [r3, #-16]
		if (!delims[i]) {
    c908:	b1b8      	cbz	r0, c93a <on_cmd_atcmdinfo_rssi+0x66>
		search_start = delims[i] + 1;
    c90a:	3001      	adds	r0, #1
	for (i = 0; i < num_delims; i++) {
    c90c:	3401      	adds	r4, #1
    c90e:	e7f1      	b.n	c8f4 <on_cmd_atcmdinfo_rssi+0x20>
	ictx.mdm_rssi = strtol(value, NULL, 10);
    c910:	220a      	movs	r2, #10
    c912:	2100      	movs	r1, #0
    c914:	a802      	add	r0, sp, #8
    c916:	f006 fa19 	bl	12d4c <strtol>
    c91a:	4c0f      	ldr	r4, [pc, #60]	; (c958 <on_cmd_atcmdinfo_rssi+0x84>)
    c91c:	f8c4 0b88 	str.w	r0, [r4, #2952]	; 0xb88
	ictx.mdm_sinr = strtol(delims[3] + 1, NULL, 10);
    c920:	220a      	movs	r2, #10
    c922:	2100      	movs	r1, #0
    c924:	9825      	ldr	r0, [sp, #148]	; 0x94
    c926:	3001      	adds	r0, #1
    c928:	f006 fa10 	bl	12d4c <strtol>
    c92c:	f8c4 0b98 	str.w	r0, [r4, #2968]	; 0xb98
	if ((delims[1] - delims[0]) == 1) {
    c930:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    c932:	9a22      	ldr	r2, [sp, #136]	; 0x88
    c934:	1a9b      	subs	r3, r3, r2
    c936:	2b01      	cmp	r3, #1
    c938:	d102      	bne.n	c940 <on_cmd_atcmdinfo_rssi+0x6c>
}
    c93a:	2001      	movs	r0, #1
    c93c:	b026      	add	sp, #152	; 0x98
    c93e:	bd10      	pop	{r4, pc}
		event_handler(HL7800_EVENT_RSSI, &ictx.mdm_rssi);
    c940:	f604 3488 	addw	r4, r4, #2952	; 0xb88
    c944:	4621      	mov	r1, r4
    c946:	2003      	movs	r0, #3
    c948:	f7fe fcca 	bl	b2e0 <event_handler>
		event_handler(HL7800_EVENT_SINR, &ictx.mdm_sinr);
    c94c:	f104 0110 	add.w	r1, r4, #16
    c950:	2004      	movs	r0, #4
    c952:	f7fe fcc5 	bl	b2e0 <event_handler>
    c956:	e7f0      	b.n	c93a <on_cmd_atcmdinfo_rssi+0x66>
    c958:	20000e70 	.word	0x20000e70

0000c95c <on_cmd_atcmdinfo_serial_number>:
{
    c95c:	b530      	push	{r4, r5, lr}
    c95e:	b08b      	sub	sp, #44	; 0x2c
    c960:	4604      	mov	r4, r0
	struct net_buf *frag = NULL;
    c962:	2100      	movs	r1, #0
    c964:	9109      	str	r1, [sp, #36]	; 0x24
	wait_for_modem_data(buf, net_buf_frags_len(*buf),
    c966:	6803      	ldr	r3, [r0, #0]
    c968:	e002      	b.n	c970 <on_cmd_atcmdinfo_serial_number+0x14>
		bytes += buf->len;
    c96a:	899a      	ldrh	r2, [r3, #12]
    c96c:	4411      	add	r1, r2
		buf = buf->frags;
    c96e:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    c970:	2b00      	cmp	r3, #0
    c972:	d1fa      	bne.n	c96a <on_cmd_atcmdinfo_serial_number+0xe>
    c974:	2216      	movs	r2, #22
    c976:	4620      	mov	r0, r4
    c978:	f011 f8e4 	bl	1db44 <wait_for_modem_data>
	frag = NULL;
    c97c:	2300      	movs	r3, #0
    c97e:	9309      	str	r3, [sp, #36]	; 0x24
	len = net_buf_findcrlf(*buf, &frag);
    c980:	a909      	add	r1, sp, #36	; 0x24
    c982:	6820      	ldr	r0, [r4, #0]
    c984:	f010 ff75 	bl	1d872 <net_buf_findcrlf>
    c988:	4605      	mov	r5, r0
	if (!frag) {
    c98a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c98c:	b34b      	cbz	r3, c9e2 <on_cmd_atcmdinfo_serial_number+0x86>
	out_len = net_buf_linearize(value, sizeof(value), *buf, 0, len);
    c98e:	9000      	str	r0, [sp, #0]
    c990:	2300      	movs	r3, #0
    c992:	6822      	ldr	r2, [r4, #0]
    c994:	2116      	movs	r1, #22
    c996:	a803      	add	r0, sp, #12
    c998:	f00c fced 	bl	19376 <net_buf_linearize>
	value[out_len] = 0;
    c99c:	f100 0328 	add.w	r3, r0, #40	; 0x28
    c9a0:	eb0d 0003 	add.w	r0, sp, r3
    c9a4:	2300      	movs	r3, #0
    c9a6:	f800 3c1c 	strb.w	r3, [r0, #-28]
	val_start = strchr(value, ':');
    c9aa:	213a      	movs	r1, #58	; 0x3a
    c9ac:	a803      	add	r0, sp, #12
    c9ae:	f013 fb7f 	bl	200b0 <strchr>
	if (!val_start) {
    c9b2:	4601      	mov	r1, r0
    c9b4:	b1a8      	cbz	r0, c9e2 <on_cmd_atcmdinfo_serial_number+0x86>
	val_start += 2;
    c9b6:	3102      	adds	r1, #2
	sn_len = len - (val_start - value);
    c9b8:	ab03      	add	r3, sp, #12
    c9ba:	1acb      	subs	r3, r1, r3
    c9bc:	1aec      	subs	r4, r5, r3
	if (sn_len < MDM_HL7800_SERIAL_NUMBER_STRLEN) {
    c9be:	2c0d      	cmp	r4, #13
    c9c0:	dd02      	ble.n	c9c8 <on_cmd_atcmdinfo_serial_number+0x6c>
	} else if (sn_len > MDM_HL7800_SERIAL_NUMBER_STRLEN) {
    c9c2:	2c0e      	cmp	r4, #14
    c9c4:	dd00      	ble.n	c9c8 <on_cmd_atcmdinfo_serial_number+0x6c>
		sn_len = MDM_HL7800_SERIAL_NUMBER_STRLEN;
    c9c6:	240e      	movs	r4, #14
	strncpy(ictx.mdm_sn, val_start, sn_len);
    c9c8:	4d07      	ldr	r5, [pc, #28]	; (c9e8 <on_cmd_atcmdinfo_serial_number+0x8c>)
    c9ca:	f240 13b7 	movw	r3, #439	; 0x1b7
    c9ce:	4622      	mov	r2, r4
    c9d0:	4628      	mov	r0, r5
    c9d2:	f013 fbc2 	bl	2015a <__strncpy_chk>
	ictx.mdm_sn[sn_len] = 0;
    c9d6:	f6a5 25f9 	subw	r5, r5, #2809	; 0xaf9
    c9da:	4425      	add	r5, r4
    c9dc:	2300      	movs	r3, #0
    c9de:	f885 3af9 	strb.w	r3, [r5, #2809]	; 0xaf9
}
    c9e2:	2001      	movs	r0, #1
    c9e4:	b00b      	add	sp, #44	; 0x2c
    c9e6:	bd30      	pop	{r4, r5, pc}
    c9e8:	20001969 	.word	0x20001969

0000c9ec <sock_read>:
{
    c9ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c9f0:	b08a      	sub	sp, #40	; 0x28
    c9f2:	4605      	mov	r5, r0
	sock = socket_from_id(ictx.last_socket_id);
    c9f4:	4b97      	ldr	r3, [pc, #604]	; (cc54 <sock_read+0x268>)
    c9f6:	f8d3 04d8 	ldr.w	r0, [r3, #1240]	; 0x4d8
    c9fa:	f7fd ffa9 	bl	a950 <socket_from_id>
	if (!sock) {
    c9fe:	2800      	cmp	r0, #0
    ca00:	f000 8115 	beq.w	cc2e <sock_read+0x242>
    ca04:	4604      	mov	r4, r0
	if (sock->error != 0) {
    ca06:	6a43      	ldr	r3, [r0, #36]	; 0x24
    ca08:	b913      	cbnz	r3, ca10 <sock_read+0x24>
	if (net_buf_frags_len(*buf) < 2) {
    ca0a:	682b      	ldr	r3, [r5, #0]
	size_t bytes = 0;
    ca0c:	2200      	movs	r2, #0
	while (buf) {
    ca0e:	e00b      	b.n	ca28 <sock_read+0x3c>
		k_work_reschedule_for_queue(&hl7800_workq, &sock->notif_work,
    ca10:	f241 3234 	movw	r2, #4916	; 0x1334
    ca14:	2300      	movs	r3, #0
    ca16:	f100 0168 	add.w	r1, r0, #104	; 0x68
    ca1a:	488f      	ldr	r0, [pc, #572]	; (cc58 <sock_read+0x26c>)
    ca1c:	f012 fd20 	bl	1f460 <k_work_reschedule_for_queue>
    ca20:	e7f3      	b.n	ca0a <sock_read+0x1e>
		bytes += buf->len;
    ca22:	8999      	ldrh	r1, [r3, #12]
    ca24:	440a      	add	r2, r1
		buf = buf->frags;
    ca26:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    ca28:	2b00      	cmp	r3, #0
    ca2a:	d1fa      	bne.n	ca22 <sock_read+0x36>
	if (net_buf_frags_len(*buf) < 2) {
    ca2c:	2a01      	cmp	r2, #1
    ca2e:	d923      	bls.n	ca78 <sock_read+0x8c>
	net_buf_remove(buf, 2);
    ca30:	2102      	movs	r1, #2
    ca32:	4628      	mov	r0, r5
    ca34:	f011 f8e2 	bl	1dbfc <net_buf_remove>
	if (!*buf) {
    ca38:	682b      	ldr	r3, [r5, #0]
    ca3a:	b31b      	cbz	r3, ca84 <sock_read+0x98>
	sock->recv_pkt = net_pkt_rx_alloc_with_buffer(
    ca3c:	6823      	ldr	r3, [r4, #0]
	return net_if_get_by_index(context->iface);
    ca3e:	f993 008a 	ldrsb.w	r0, [r3, #138]	; 0x8a
    ca42:	f7f9 ff25 	bl	6890 <z_impl_net_if_get_by_index>
		net_context_get_iface(sock->context), sock->rx_size,
    ca46:	6a21      	ldr	r1, [r4, #32]
	sock->recv_pkt = net_pkt_rx_alloc_with_buffer(
    ca48:	88a2      	ldrh	r2, [r4, #4]
    ca4a:	79e3      	ldrb	r3, [r4, #7]
		sock->family, sock->ip_proto, BUF_ALLOC_TIMEOUT);
    ca4c:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    ca50:	2700      	movs	r7, #0
	sock->recv_pkt = net_pkt_rx_alloc_with_buffer(
    ca52:	e9cd 6700 	strd	r6, r7, [sp]
    ca56:	f7fb f845 	bl	7ae4 <net_pkt_rx_alloc_with_buffer>
    ca5a:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
	if (!sock->recv_pkt) {
    ca5e:	2800      	cmp	r0, #0
    ca60:	f000 80df 	beq.w	cc22 <sock_read+0x236>
	net_pkt_set_context(sock->recv_pkt, sock->context);
    ca64:	6823      	ldr	r3, [r4, #0]
	pkt->context = ctx;
    ca66:	6143      	str	r3, [r0, #20]
	hdr_len = pkt_setup_ip_data(sock->recv_pkt, sock);
    ca68:	4621      	mov	r1, r4
    ca6a:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    ca6e:	f011 f948 	bl	1dd02 <pkt_setup_ip_data>
    ca72:	4607      	mov	r7, r0
	for (i = 0; i < sock->rx_size; i++) {
    ca74:	2600      	movs	r6, #0
    ca76:	e014      	b.n	caa2 <sock_read+0xb6>
		wait_for_modem_data(buf, 0, 1);
    ca78:	2201      	movs	r2, #1
    ca7a:	2100      	movs	r1, #0
    ca7c:	4628      	mov	r0, r5
    ca7e:	f011 f861 	bl	1db44 <wait_for_modem_data>
    ca82:	e7d5      	b.n	ca30 <sock_read+0x44>
		wait_for_modem_data(buf, 0, sock->rx_size);
    ca84:	6a22      	ldr	r2, [r4, #32]
    ca86:	2100      	movs	r1, #0
    ca88:	4628      	mov	r0, r5
    ca8a:	f011 f85b 	bl	1db44 <wait_for_modem_data>
    ca8e:	e7d5      	b.n	ca3c <sock_read+0x50>
	net_pkt_unref(sock->recv_pkt);
    ca90:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    ca94:	f00e fb0c 	bl	1b0b0 <net_pkt_unref>
	sock->recv_pkt = NULL;
    ca98:	2300      	movs	r3, #0
    ca9a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ca9e:	e0c0      	b.n	cc22 <sock_read+0x236>
	for (i = 0; i < sock->rx_size; i++) {
    caa0:	3601      	adds	r6, #1
    caa2:	6a23      	ldr	r3, [r4, #32]
    caa4:	42b3      	cmp	r3, r6
    caa6:	dd1b      	ble.n	cae0 <sock_read+0xf4>
		c = net_buf_get_u8(buf);
    caa8:	4628      	mov	r0, r5
    caaa:	f011 f869 	bl	1db80 <net_buf_get_u8>
		if (net_pkt_write_u8(sock->recv_pkt, c)) {
    caae:	f88d 000b 	strb.w	r0, [sp, #11]
	return net_pkt_write(pkt, &data, sizeof(uint8_t));
    cab2:	2201      	movs	r2, #1
    cab4:	f10d 010b 	add.w	r1, sp, #11
    cab8:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    cabc:	f00e fe07 	bl	1b6ce <net_pkt_write>
    cac0:	2800      	cmp	r0, #0
    cac2:	d1e5      	bne.n	ca90 <sock_read+0xa4>
		if (!*buf && i < sock->rx_size) {
    cac4:	682b      	ldr	r3, [r5, #0]
    cac6:	2b00      	cmp	r3, #0
    cac8:	d1ea      	bne.n	caa0 <sock_read+0xb4>
    caca:	6a23      	ldr	r3, [r4, #32]
    cacc:	42b3      	cmp	r3, r6
    cace:	dde7      	ble.n	caa0 <sock_read+0xb4>
			wait_for_modem_data(buf, 0, 1);
    cad0:	2201      	movs	r2, #1
    cad2:	2100      	movs	r1, #0
    cad4:	4628      	mov	r0, r5
    cad6:	f011 f835 	bl	1db44 <wait_for_modem_data>
			if (!*buf) {
    cada:	682b      	ldr	r3, [r5, #0]
    cadc:	2b00      	cmp	r3, #0
    cade:	d1df      	bne.n	caa0 <sock_read+0xb4>
	if (!*buf || (net_buf_frags_len(*buf) < strlen(EOF_PATTERN))) {
    cae0:	682b      	ldr	r3, [r5, #0]
    cae2:	b15b      	cbz	r3, cafc <sock_read+0x110>
	size_t bytes = 0;
    cae4:	2600      	movs	r6, #0
    cae6:	e002      	b.n	caee <sock_read+0x102>
		bytes += buf->len;
    cae8:	899a      	ldrh	r2, [r3, #12]
    caea:	4416      	add	r6, r2
		buf = buf->frags;
    caec:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    caee:	2b00      	cmp	r3, #0
    caf0:	d1fa      	bne.n	cae8 <sock_read+0xfc>
    caf2:	485a      	ldr	r0, [pc, #360]	; (cc5c <sock_read+0x270>)
    caf4:	f7f4 f95c 	bl	db0 <strlen>
    caf8:	42b0      	cmp	r0, r6
    cafa:	d912      	bls.n	cb22 <sock_read+0x136>
		wait_for_modem_data(buf, net_buf_frags_len(*buf),
    cafc:	682b      	ldr	r3, [r5, #0]
	size_t bytes = 0;
    cafe:	2600      	movs	r6, #0
	while (buf) {
    cb00:	e002      	b.n	cb08 <sock_read+0x11c>
		bytes += buf->len;
    cb02:	899a      	ldrh	r2, [r3, #12]
    cb04:	4416      	add	r6, r2
		buf = buf->frags;
    cb06:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    cb08:	2b00      	cmp	r3, #0
    cb0a:	d1fa      	bne.n	cb02 <sock_read+0x116>
    cb0c:	4853      	ldr	r0, [pc, #332]	; (cc5c <sock_read+0x270>)
    cb0e:	f7f4 f94f 	bl	db0 <strlen>
    cb12:	4602      	mov	r2, r0
    cb14:	4631      	mov	r1, r6
    cb16:	4628      	mov	r0, r5
    cb18:	f011 f814 	bl	1db44 <wait_for_modem_data>
		if (!*buf) {
    cb1c:	682b      	ldr	r3, [r5, #0]
    cb1e:	2b00      	cmp	r3, #0
    cb20:	d06c      	beq.n	cbfc <sock_read+0x210>
	out_len = net_buf_linearize(eof, sizeof(eof), *buf, 0,
    cb22:	f8d5 8000 	ldr.w	r8, [r5]
    cb26:	4e4d      	ldr	r6, [pc, #308]	; (cc5c <sock_read+0x270>)
    cb28:	4630      	mov	r0, r6
    cb2a:	f7f4 f941 	bl	db0 <strlen>
    cb2e:	9000      	str	r0, [sp, #0]
    cb30:	2300      	movs	r3, #0
    cb32:	4642      	mov	r2, r8
    cb34:	2111      	movs	r1, #17
    cb36:	a803      	add	r0, sp, #12
    cb38:	f00c fc1d 	bl	19376 <net_buf_linearize>
	eof[out_len] = 0;
    cb3c:	f100 0328 	add.w	r3, r0, #40	; 0x28
    cb40:	eb0d 0003 	add.w	r0, sp, r3
    cb44:	2300      	movs	r3, #0
    cb46:	f800 3c1c 	strb.w	r3, [r0, #-28]
	net_buf_remove(buf, strlen(EOF_PATTERN));
    cb4a:	4630      	mov	r0, r6
    cb4c:	f7f4 f930 	bl	db0 <strlen>
    cb50:	4601      	mov	r1, r0
    cb52:	4628      	mov	r0, r5
    cb54:	f011 f852 	bl	1dbfc <net_buf_remove>
	if (strcmp(eof, EOF_PATTERN)) {
    cb58:	4631      	mov	r1, r6
    cb5a:	a803      	add	r0, sp, #12
    cb5c:	f7f4 f91e 	bl	d9c <strcmp>
	if (!*buf || (net_buf_frags_len(*buf) < strlen(OK_STRING) + 4)) {
    cb60:	682b      	ldr	r3, [r5, #0]
    cb62:	b163      	cbz	r3, cb7e <sock_read+0x192>
	size_t bytes = 0;
    cb64:	2600      	movs	r6, #0
    cb66:	e002      	b.n	cb6e <sock_read+0x182>
		bytes += buf->len;
    cb68:	899a      	ldrh	r2, [r3, #12]
    cb6a:	4416      	add	r6, r2
		buf = buf->frags;
    cb6c:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    cb6e:	2b00      	cmp	r3, #0
    cb70:	d1fa      	bne.n	cb68 <sock_read+0x17c>
    cb72:	483b      	ldr	r0, [pc, #236]	; (cc60 <sock_read+0x274>)
    cb74:	f7f4 f91c 	bl	db0 <strlen>
    cb78:	3004      	adds	r0, #4
    cb7a:	42b0      	cmp	r0, r6
    cb7c:	d911      	bls.n	cba2 <sock_read+0x1b6>
		wait_for_modem_data(buf, net_buf_frags_len(*buf),
    cb7e:	682b      	ldr	r3, [r5, #0]
	size_t bytes = 0;
    cb80:	2600      	movs	r6, #0
	while (buf) {
    cb82:	e002      	b.n	cb8a <sock_read+0x19e>
		bytes += buf->len;
    cb84:	899a      	ldrh	r2, [r3, #12]
    cb86:	4416      	add	r6, r2
		buf = buf->frags;
    cb88:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    cb8a:	2b00      	cmp	r3, #0
    cb8c:	d1fa      	bne.n	cb84 <sock_read+0x198>
				    strlen(OK_STRING) + 4);
    cb8e:	4834      	ldr	r0, [pc, #208]	; (cc60 <sock_read+0x274>)
    cb90:	f7f4 f90e 	bl	db0 <strlen>
		wait_for_modem_data(buf, net_buf_frags_len(*buf),
    cb94:	1d02      	adds	r2, r0, #4
    cb96:	4631      	mov	r1, r6
    cb98:	4628      	mov	r0, r5
    cb9a:	f010 ffd3 	bl	1db44 <wait_for_modem_data>
		if (!*buf) {
    cb9e:	682b      	ldr	r3, [r5, #0]
    cba0:	b363      	cbz	r3, cbfc <sock_read+0x210>
	frag = NULL;
    cba2:	2300      	movs	r3, #0
    cba4:	9309      	str	r3, [sp, #36]	; 0x24
	len = net_buf_findcrlf(*buf, &frag);
    cba6:	a909      	add	r1, sp, #36	; 0x24
    cba8:	6828      	ldr	r0, [r5, #0]
    cbaa:	f010 fe62 	bl	1d872 <net_buf_findcrlf>
	if (!frag) {
    cbae:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cbb0:	b323      	cbz	r3, cbfc <sock_read+0x210>
	net_buf_skipcrlf(buf);
    cbb2:	4628      	mov	r0, r5
    cbb4:	f010 fff5 	bl	1dba2 <net_buf_skipcrlf>
	out_len = net_buf_linearize(ok_resp, sizeof(ok_resp), *buf, 0,
    cbb8:	f8d5 8000 	ldr.w	r8, [r5]
    cbbc:	4e28      	ldr	r6, [pc, #160]	; (cc60 <sock_read+0x274>)
    cbbe:	4630      	mov	r0, r6
    cbc0:	f7f4 f8f6 	bl	db0 <strlen>
    cbc4:	9000      	str	r0, [sp, #0]
    cbc6:	2300      	movs	r3, #0
    cbc8:	4642      	mov	r2, r8
    cbca:	2103      	movs	r1, #3
    cbcc:	a808      	add	r0, sp, #32
    cbce:	f00c fbd2 	bl	19376 <net_buf_linearize>
	ok_resp[out_len] = 0;
    cbd2:	f100 0328 	add.w	r3, r0, #40	; 0x28
    cbd6:	eb0d 0003 	add.w	r0, sp, r3
    cbda:	2300      	movs	r3, #0
    cbdc:	f800 3c08 	strb.w	r3, [r0, #-8]
	net_buf_remove(buf, strlen(OK_STRING));
    cbe0:	4630      	mov	r0, r6
    cbe2:	f7f4 f8e5 	bl	db0 <strlen>
    cbe6:	4601      	mov	r1, r0
    cbe8:	4628      	mov	r0, r5
    cbea:	f011 f807 	bl	1dbfc <net_buf_remove>
	if (strcmp(ok_resp, OK_STRING)) {
    cbee:	4631      	mov	r1, r6
    cbf0:	a808      	add	r0, sp, #32
    cbf2:	f7f4 f8d3 	bl	d9c <strcmp>
	net_buf_skipcrlf(buf);
    cbf6:	4628      	mov	r0, r5
    cbf8:	f010 ffd3 	bl	1dba2 <net_buf_skipcrlf>
	net_pkt_cursor_init(sock->recv_pkt);
    cbfc:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    cc00:	f00e faee 	bl	1b1e0 <net_pkt_cursor_init>
	net_pkt_set_overwrite(sock->recv_pkt, true);
    cc04:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
	pkt->overwrite = overwrite;
    cc08:	f892 3037 	ldrb.w	r3, [r2, #55]	; 0x37
    cc0c:	f043 0301 	orr.w	r3, r3, #1
    cc10:	f882 3037 	strb.w	r3, [r2, #55]	; 0x37
	if (hdr_len > 0) {
    cc14:	2f00      	cmp	r7, #0
    cc16:	dc0f      	bgt.n	cc38 <sock_read+0x24c>
	k_work_submit_to_queue(&hl7800_workq, &sock->recv_cb_work);
    cc18:	f104 0144 	add.w	r1, r4, #68	; 0x44
    cc1c:	480e      	ldr	r0, [pc, #56]	; (cc58 <sock_read+0x26c>)
    cc1e:	f012 fbdf 	bl	1f3e0 <k_work_submit_to_queue>
	if (sock->type == SOCK_STREAM) {
    cc22:	79a3      	ldrb	r3, [r4, #6]
    cc24:	2b01      	cmp	r3, #1
    cc26:	d00d      	beq.n	cc44 <sock_read+0x258>
		sock->state = SOCK_IDLE;
    cc28:	2300      	movs	r3, #0
    cc2a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	hl7800_TX_unlock();
    cc2e:	f7fe f90f 	bl	ae50 <hl7800_TX_unlock>
}
    cc32:	b00a      	add	sp, #40	; 0x28
    cc34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_pkt_skip(sock->recv_pkt, hdr_len);
    cc38:	4639      	mov	r1, r7
    cc3a:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    cc3e:	f00e fb41 	bl	1b2c4 <net_pkt_skip>
    cc42:	e7e9      	b.n	cc18 <sock_read+0x22c>
		if (sock->error == 0) {
    cc44:	6a63      	ldr	r3, [r4, #36]	; 0x24
    cc46:	2b00      	cmp	r3, #0
    cc48:	d1f1      	bne.n	cc2e <sock_read+0x242>
			sock->state = SOCK_CONNECTED;
    cc4a:	2303      	movs	r3, #3
    cc4c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    cc50:	e7ed      	b.n	cc2e <sock_read+0x242>
    cc52:	bf00      	nop
    cc54:	20000e70 	.word	0x20000e70
    cc58:	20001b20 	.word	0x20001b20
    cc5c:	00022118 	.word	0x00022118
    cc60:	0002210c 	.word	0x0002210c

0000cc64 <on_cmd_connect>:
{
    cc64:	b538      	push	{r3, r4, r5, lr}
    cc66:	4604      	mov	r4, r0
    cc68:	460d      	mov	r5, r1
	sock = socket_from_id(ictx.last_socket_id);
    cc6a:	4b0b      	ldr	r3, [pc, #44]	; (cc98 <on_cmd_connect+0x34>)
    cc6c:	f8d3 04d8 	ldr.w	r0, [r3, #1240]	; 0x4d8
    cc70:	f7fd fe6e 	bl	a950 <socket_from_id>
	if (!sock) {
    cc74:	b170      	cbz	r0, cc94 <on_cmd_connect+0x30>
	if (sock->state == SOCK_RX) {
    cc76:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
    cc7a:	2a01      	cmp	r2, #1
    cc7c:	d004      	beq.n	cc88 <on_cmd_connect+0x24>
		k_sem_give(&sock->sock_send_sem);
    cc7e:	302c      	adds	r0, #44	; 0x2c
    cc80:	f004 fac6 	bl	11210 <z_impl_k_sem_give>
	bool remove_data_from_buffer = true;
    cc84:	2001      	movs	r0, #1
}
    cc86:	bd38      	pop	{r3, r4, r5, pc}
		sock_read(buf, len);
    cc88:	4629      	mov	r1, r5
    cc8a:	4620      	mov	r0, r4
    cc8c:	f7ff feae 	bl	c9ec <sock_read>
		remove_data_from_buffer = false;
    cc90:	2000      	movs	r0, #0
    cc92:	e7f8      	b.n	cc86 <on_cmd_connect+0x22>
	bool remove_data_from_buffer = true;
    cc94:	2001      	movs	r0, #1
    cc96:	e7f6      	b.n	cc86 <on_cmd_connect+0x22>
    cc98:	20000e70 	.word	0x20000e70

0000cc9c <queue_stale_socket>:
{
    cc9c:	b538      	push	{r3, r4, r5, lr}
    cc9e:	4605      	mov	r5, r0
    cca0:	460c      	mov	r4, r1
	sock = alloc_stale_socket();
    cca2:	f7fd fe15 	bl	a8d0 <alloc_stale_socket>
	if (sock != NULL) {
    cca6:	b138      	cbz	r0, ccb8 <queue_stale_socket+0x1c>
    cca8:	4601      	mov	r1, r0
		sock->type = type;
    ccaa:	7105      	strb	r5, [r0, #4]
		sock->id = id;
    ccac:	7144      	strb	r4, [r0, #5]
		k_queue_append(&ictx.stale_socket_queue, (void *)sock);
    ccae:	4804      	ldr	r0, [pc, #16]	; (ccc0 <queue_stale_socket+0x24>)
    ccb0:	f012 fa7f 	bl	1f1b2 <k_queue_append>
	int ret = 0;
    ccb4:	2000      	movs	r0, #0
}
    ccb6:	bd38      	pop	{r3, r4, r5, pc}
		ret = -ENOMEM;
    ccb8:	f06f 000b 	mvn.w	r0, #11
	return ret;
    ccbc:	e7fb      	b.n	ccb6 <queue_stale_socket+0x1a>
    ccbe:	bf00      	nop
    ccc0:	20001380 	.word	0x20001380

0000ccc4 <on_cmd_sockcreate>:
{
    ccc4:	b530      	push	{r4, r5, lr}
    ccc6:	b0a3      	sub	sp, #140	; 0x8c
    ccc8:	4605      	mov	r5, r0
    ccca:	4613      	mov	r3, r2
	out_len = net_buf_linearize(value, sizeof(value), *buf, 0, len);
    cccc:	680a      	ldr	r2, [r1, #0]
    ccce:	9300      	str	r3, [sp, #0]
    ccd0:	2300      	movs	r3, #0
    ccd2:	2180      	movs	r1, #128	; 0x80
    ccd4:	a802      	add	r0, sp, #8
    ccd6:	f00c fb4e 	bl	19376 <net_buf_linearize>
	value[out_len] = 0;
    ccda:	f100 0388 	add.w	r3, r0, #136	; 0x88
    ccde:	446b      	add	r3, sp
    cce0:	2100      	movs	r1, #0
    cce2:	f803 1c80 	strb.w	r1, [r3, #-128]
	ictx.last_socket_id = strtol(value, NULL, 10);
    cce6:	220a      	movs	r2, #10
    cce8:	a802      	add	r0, sp, #8
    ccea:	f006 f82f 	bl	12d4c <strtol>
    ccee:	4604      	mov	r4, r0
    ccf0:	4b11      	ldr	r3, [pc, #68]	; (cd38 <on_cmd_sockcreate+0x74>)
    ccf2:	f8c3 04d8 	str.w	r0, [r3, #1240]	; 0x4d8
	sock = socket_from_id(ictx.last_socket_id);
    ccf6:	f7fd fe2b 	bl	a950 <socket_from_id>
	if (!sock) {
    ccfa:	4603      	mov	r3, r0
    ccfc:	b138      	cbz	r0, cd0e <on_cmd_sockcreate+0x4a>
	sock->socket_id = ictx.last_socket_id;
    ccfe:	61dc      	str	r4, [r3, #28]
	sock->created = true;
    cd00:	2201      	movs	r2, #1
    cd02:	761a      	strb	r2, [r3, #24]
	sock->reconfig = false;
    cd04:	2200      	movs	r2, #0
    cd06:	765a      	strb	r2, [r3, #25]
}
    cd08:	2001      	movs	r0, #1
    cd0a:	b023      	add	sp, #140	; 0x8c
    cd0c:	bd30      	pop	{r4, r5, pc}
		sock = socket_from_id(MDM_CREATE_SOCKET_ID);
    cd0e:	2007      	movs	r0, #7
    cd10:	f7fd fe1e 	bl	a950 <socket_from_id>
		if (!sock) {
    cd14:	4603      	mov	r3, r0
    cd16:	2800      	cmp	r0, #0
    cd18:	d1f1      	bne.n	ccfe <on_cmd_sockcreate+0x3a>
			if (queue_stale_socket(type, ictx.last_socket_id) == 0) {
    cd1a:	b2e1      	uxtb	r1, r4
    cd1c:	4628      	mov	r0, r5
    cd1e:	f7ff ffbd 	bl	cc9c <queue_stale_socket>
    cd22:	2800      	cmp	r0, #0
    cd24:	d1f0      	bne.n	cd08 <on_cmd_sockcreate+0x44>
				k_work_reschedule_for_queue(&hl7800_workq,
    cd26:	f640 42cd 	movw	r2, #3277	; 0xccd
    cd2a:	2300      	movs	r3, #0
    cd2c:	4903      	ldr	r1, [pc, #12]	; (cd3c <on_cmd_sockcreate+0x78>)
    cd2e:	4804      	ldr	r0, [pc, #16]	; (cd40 <on_cmd_sockcreate+0x7c>)
    cd30:	f012 fb96 	bl	1f460 <k_work_reschedule_for_queue>
			goto done;
    cd34:	e7e8      	b.n	cd08 <on_cmd_sockcreate+0x44>
    cd36:	bf00      	nop
    cd38:	20000e70 	.word	0x20000e70
    cd3c:	200014c8 	.word	0x200014c8
    cd40:	20001b20 	.word	0x20001b20

0000cd44 <on_cmd_survey_status>:
{
    cd44:	b510      	push	{r4, lr}
    cd46:	b098      	sub	sp, #96	; 0x60
    cd48:	4604      	mov	r4, r0
	struct net_buf *frag = NULL;
    cd4a:	2100      	movs	r1, #0
    cd4c:	9117      	str	r1, [sp, #92]	; 0x5c
	wait_for_modem_data_and_newline(buf, net_buf_frags_len(*buf),
    cd4e:	6803      	ldr	r3, [r0, #0]
    cd50:	e002      	b.n	cd58 <on_cmd_survey_status+0x14>
		bytes += buf->len;
    cd52:	899a      	ldrh	r2, [r3, #12]
    cd54:	4411      	add	r1, r2
		buf = buf->frags;
    cd56:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    cd58:	2b00      	cmp	r3, #0
    cd5a:	d1fa      	bne.n	cd52 <on_cmd_survey_status+0xe>
    cd5c:	223d      	movs	r2, #61	; 0x3d
    cd5e:	4620      	mov	r0, r4
    cd60:	f7ff f824 	bl	bdac <wait_for_modem_data_and_newline>
	frag = NULL;
    cd64:	2300      	movs	r3, #0
    cd66:	9317      	str	r3, [sp, #92]	; 0x5c
	len = net_buf_findcrlf(*buf, &frag);
    cd68:	a917      	add	r1, sp, #92	; 0x5c
    cd6a:	6820      	ldr	r0, [r4, #0]
    cd6c:	f010 fd81 	bl	1d872 <net_buf_findcrlf>
	if (!frag) {
    cd70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    cd72:	2b00      	cmp	r3, #0
    cd74:	d047      	beq.n	ce06 <on_cmd_survey_status+0xc2>
	out_len = net_buf_linearize(response, sizeof(response), *buf, 0, len);
    cd76:	9000      	str	r0, [sp, #0]
    cd78:	2300      	movs	r3, #0
    cd7a:	6822      	ldr	r2, [r4, #0]
    cd7c:	213d      	movs	r1, #61	; 0x3d
    cd7e:	a807      	add	r0, sp, #28
    cd80:	f00c faf9 	bl	19376 <net_buf_linearize>
	value = strstr(response, key);
    cd84:	4921      	ldr	r1, [pc, #132]	; (ce0c <on_cmd_survey_status+0xc8>)
    cd86:	a807      	add	r0, sp, #28
    cd88:	f013 fa1a 	bl	201c0 <strstr>
	if (value == NULL) {
    cd8c:	4604      	mov	r4, r0
    cd8e:	2800      	cmp	r0, #0
    cd90:	d039      	beq.n	ce06 <on_cmd_survey_status+0xc2>
		value += strlen(key);
    cd92:	481e      	ldr	r0, [pc, #120]	; (ce0c <on_cmd_survey_status+0xc8>)
    cd94:	f7f4 f80c 	bl	db0 <strlen>
		site_survey.earfcn = strtoul(value, NULL, 10);
    cd98:	220a      	movs	r2, #10
    cd9a:	2100      	movs	r1, #0
    cd9c:	4420      	add	r0, r4
    cd9e:	f006 f851 	bl	12e44 <strtoul>
    cda2:	9003      	str	r0, [sp, #12]
	value = strstr(response, key);
    cda4:	491a      	ldr	r1, [pc, #104]	; (ce10 <on_cmd_survey_status+0xcc>)
    cda6:	a807      	add	r0, sp, #28
    cda8:	f013 fa0a 	bl	201c0 <strstr>
	if (value == NULL) {
    cdac:	4604      	mov	r4, r0
    cdae:	b350      	cbz	r0, ce06 <on_cmd_survey_status+0xc2>
		value += strlen(key);
    cdb0:	4817      	ldr	r0, [pc, #92]	; (ce10 <on_cmd_survey_status+0xcc>)
    cdb2:	f7f3 fffd 	bl	db0 <strlen>
		site_survey.cell_id = strtoul(value, NULL, 10);
    cdb6:	220a      	movs	r2, #10
    cdb8:	2100      	movs	r1, #0
    cdba:	4420      	add	r0, r4
    cdbc:	f006 f842 	bl	12e44 <strtoul>
    cdc0:	9004      	str	r0, [sp, #16]
	value = strstr(response, key);
    cdc2:	4914      	ldr	r1, [pc, #80]	; (ce14 <on_cmd_survey_status+0xd0>)
    cdc4:	a807      	add	r0, sp, #28
    cdc6:	f013 f9fb 	bl	201c0 <strstr>
	if (value == NULL) {
    cdca:	4604      	mov	r4, r0
    cdcc:	b1d8      	cbz	r0, ce06 <on_cmd_survey_status+0xc2>
		value += strlen(key);
    cdce:	4811      	ldr	r0, [pc, #68]	; (ce14 <on_cmd_survey_status+0xd0>)
    cdd0:	f7f3 ffee 	bl	db0 <strlen>
		site_survey.rsrp = strtol(value, NULL, 10);
    cdd4:	220a      	movs	r2, #10
    cdd6:	2100      	movs	r1, #0
    cdd8:	4420      	add	r0, r4
    cdda:	f005 ffb7 	bl	12d4c <strtol>
    cdde:	9005      	str	r0, [sp, #20]
	value = strstr(response, key);
    cde0:	490d      	ldr	r1, [pc, #52]	; (ce18 <on_cmd_survey_status+0xd4>)
    cde2:	a807      	add	r0, sp, #28
    cde4:	f013 f9ec 	bl	201c0 <strstr>
	if (value == NULL) {
    cde8:	4604      	mov	r4, r0
    cdea:	b160      	cbz	r0, ce06 <on_cmd_survey_status+0xc2>
		value += strlen(key);
    cdec:	480a      	ldr	r0, [pc, #40]	; (ce18 <on_cmd_survey_status+0xd4>)
    cdee:	f7f3 ffdf 	bl	db0 <strlen>
		site_survey.rsrq = strtol(value, NULL, 10);
    cdf2:	220a      	movs	r2, #10
    cdf4:	2100      	movs	r1, #0
    cdf6:	4420      	add	r0, r4
    cdf8:	f005 ffa8 	bl	12d4c <strtol>
    cdfc:	9006      	str	r0, [sp, #24]
	event_handler(HL7800_EVENT_SITE_SURVEY, &site_survey);
    cdfe:	a903      	add	r1, sp, #12
    ce00:	2012      	movs	r0, #18
    ce02:	f7fe fa6d 	bl	b2e0 <event_handler>
}
    ce06:	2001      	movs	r0, #1
    ce08:	b018      	add	sp, #96	; 0x60
    ce0a:	bd10      	pop	{r4, pc}
    ce0c:	00021cb4 	.word	0x00021cb4
    ce10:	00021cbc 	.word	0x00021cbc
    ce14:	00021cc4 	.word	0x00021cc4
    ce18:	00021ccc 	.word	0x00021ccc

0000ce1c <on_cmd_atcmdinfo_imsi>:
{
    ce1c:	b530      	push	{r4, r5, lr}
    ce1e:	b085      	sub	sp, #20
    ce20:	4604      	mov	r4, r0
	struct net_buf *frag = NULL;
    ce22:	2100      	movs	r1, #0
    ce24:	9103      	str	r1, [sp, #12]
	wait_for_modem_data_and_newline(buf, net_buf_frags_len(*buf),
    ce26:	6803      	ldr	r3, [r0, #0]
    ce28:	e002      	b.n	ce30 <on_cmd_atcmdinfo_imsi+0x14>
		bytes += buf->len;
    ce2a:	899a      	ldrh	r2, [r3, #12]
    ce2c:	4411      	add	r1, r2
		buf = buf->frags;
    ce2e:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    ce30:	2b00      	cmp	r3, #0
    ce32:	d1fa      	bne.n	ce2a <on_cmd_atcmdinfo_imsi+0xe>
    ce34:	220f      	movs	r2, #15
    ce36:	4620      	mov	r0, r4
    ce38:	f7fe ffb8 	bl	bdac <wait_for_modem_data_and_newline>
	frag = NULL;
    ce3c:	2300      	movs	r3, #0
    ce3e:	9303      	str	r3, [sp, #12]
	len = net_buf_findcrlf(*buf, &frag);
    ce40:	a903      	add	r1, sp, #12
    ce42:	6820      	ldr	r0, [r4, #0]
    ce44:	f010 fd15 	bl	1d872 <net_buf_findcrlf>
	if (!frag) {
    ce48:	9b03      	ldr	r3, [sp, #12]
    ce4a:	b1d3      	cbz	r3, ce82 <on_cmd_atcmdinfo_imsi+0x66>
	if (len > MDM_HL7800_IMSI_MAX_STRLEN) {
    ce4c:	280f      	cmp	r0, #15
    ce4e:	d900      	bls.n	ce52 <on_cmd_atcmdinfo_imsi+0x36>
		len = MDM_HL7800_IMSI_MAX_STRLEN;
    ce50:	200f      	movs	r0, #15
	out_len = net_buf_linearize(ictx.mdm_imsi, MDM_HL7800_IMSI_MAX_STR_SIZE,
    ce52:	4d0d      	ldr	r5, [pc, #52]	; (ce88 <on_cmd_atcmdinfo_imsi+0x6c>)
    ce54:	9000      	str	r0, [sp, #0]
    ce56:	2300      	movs	r3, #0
    ce58:	6822      	ldr	r2, [r4, #0]
    ce5a:	2110      	movs	r1, #16
    ce5c:	4628      	mov	r0, r5
    ce5e:	f00c fa8a 	bl	19376 <net_buf_linearize>
	ictx.mdm_imsi[out_len] = 0;
    ce62:	f6a5 3376 	subw	r3, r5, #2934	; 0xb76
    ce66:	4403      	add	r3, r0
    ce68:	2200      	movs	r2, #0
    ce6a:	f883 2b76 	strb.w	r2, [r3, #2934]	; 0xb76
	if (strstr(ictx.mdm_imsi, "ERROR") != NULL) {
    ce6e:	4907      	ldr	r1, [pc, #28]	; (ce8c <on_cmd_atcmdinfo_imsi+0x70>)
    ce70:	4628      	mov	r0, r5
    ce72:	f013 f9a5 	bl	201c0 <strstr>
    ce76:	b120      	cbz	r0, ce82 <on_cmd_atcmdinfo_imsi+0x66>
		memset(ictx.mdm_imsi, 0, sizeof(ictx.mdm_imsi));
    ce78:	2200      	movs	r2, #0
    ce7a:	602a      	str	r2, [r5, #0]
    ce7c:	606a      	str	r2, [r5, #4]
    ce7e:	60aa      	str	r2, [r5, #8]
    ce80:	60ea      	str	r2, [r5, #12]
}
    ce82:	2001      	movs	r0, #1
    ce84:	b005      	add	sp, #20
    ce86:	bd30      	pop	{r4, r5, pc}
    ce88:	200019e6 	.word	0x200019e6
    ce8c:	00021cd4 	.word	0x00021cd4

0000ce90 <on_cmd_radio_active_bands>:
{
    ce90:	b510      	push	{r4, lr}
    ce92:	b0a2      	sub	sp, #136	; 0x88
	out_len = net_buf_linearize(value, sizeof(value), *buf, 0, len);
    ce94:	6802      	ldr	r2, [r0, #0]
    ce96:	9100      	str	r1, [sp, #0]
    ce98:	2300      	movs	r3, #0
    ce9a:	2180      	movs	r1, #128	; 0x80
    ce9c:	a802      	add	r0, sp, #8
    ce9e:	f00c fa6a 	bl	19376 <net_buf_linearize>
	value[out_len] = 0;
    cea2:	f100 0388 	add.w	r3, r0, #136	; 0x88
    cea6:	eb0d 0003 	add.w	r0, sp, r3
    ceaa:	2300      	movs	r3, #0
    ceac:	f800 3c80 	strb.w	r3, [r0, #-128]
	if (strlen(value) < sizeof("#,###################")) {
    ceb0:	a802      	add	r0, sp, #8
    ceb2:	f7f3 ff7d 	bl	db0 <strlen>
    ceb6:	2815      	cmp	r0, #21
    ceb8:	d802      	bhi.n	cec0 <on_cmd_radio_active_bands+0x30>
}
    ceba:	2001      	movs	r0, #1
    cebc:	b022      	add	sp, #136	; 0x88
    cebe:	bd10      	pop	{r4, pc}
	memcpy(ictx.mdm_active_bands_string,
    cec0:	4c0a      	ldr	r4, [pc, #40]	; (ceec <on_cmd_radio_active_bands+0x5c>)
    cec2:	46a4      	mov	ip, r4
    cec4:	f8dd 000a 	ldr.w	r0, [sp, #10]
    cec8:	f8dd 100e 	ldr.w	r1, [sp, #14]
    cecc:	f8dd 2012 	ldr.w	r2, [sp, #18]
    ced0:	f8dd 3016 	ldr.w	r3, [sp, #22]
    ced4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    ced8:	f8dd 001a 	ldr.w	r0, [sp, #26]
    cedc:	f8cc 0000 	str.w	r0, [ip]
	event_handler(HL7800_EVENT_ACTIVE_BANDS, ictx.mdm_active_bands_string);
    cee0:	4621      	mov	r1, r4
    cee2:	2009      	movs	r0, #9
    cee4:	f7fe f9fc 	bl	b2e0 <event_handler>
	return true;
    cee8:	e7e7      	b.n	ceba <on_cmd_radio_active_bands+0x2a>
    ceea:	bf00      	nop
    ceec:	200019bc 	.word	0x200019bc

0000cef0 <on_cmd_radio_band_configuration>:
{
    cef0:	b530      	push	{r4, r5, lr}
    cef2:	b0a7      	sub	sp, #156	; 0x9c
	out_len = net_buf_linearize(value, sizeof(value), *buf, 0, len);
    cef4:	6802      	ldr	r2, [r0, #0]
    cef6:	9100      	str	r1, [sp, #0]
    cef8:	2300      	movs	r3, #0
    cefa:	2180      	movs	r1, #128	; 0x80
    cefc:	a806      	add	r0, sp, #24
    cefe:	f00c fa3a 	bl	19376 <net_buf_linearize>
	value[out_len] = 0;
    cf02:	f100 0398 	add.w	r3, r0, #152	; 0x98
    cf06:	eb0d 0003 	add.w	r0, sp, r3
    cf0a:	2300      	movs	r3, #0
    cf0c:	f800 3c80 	strb.w	r3, [r0, #-128]
	if (value[0] != (ictx.mdm_rat == MDM_RAT_CAT_M1 ? '0' : '1')) {
    cf10:	f89d 2018 	ldrb.w	r2, [sp, #24]
    cf14:	4b26      	ldr	r3, [pc, #152]	; (cfb0 <on_cmd_radio_band_configuration+0xc0>)
    cf16:	f893 3b4b 	ldrb.w	r3, [r3, #2891]	; 0xb4b
    cf1a:	b92b      	cbnz	r3, cf28 <on_cmd_radio_band_configuration+0x38>
    cf1c:	2330      	movs	r3, #48	; 0x30
    cf1e:	429a      	cmp	r2, r3
    cf20:	d004      	beq.n	cf2c <on_cmd_radio_band_configuration+0x3c>
}
    cf22:	2001      	movs	r0, #1
    cf24:	b027      	add	sp, #156	; 0x9c
    cf26:	bd30      	pop	{r4, r5, pc}
	if (value[0] != (ictx.mdm_rat == MDM_RAT_CAT_M1 ? '0' : '1')) {
    cf28:	2331      	movs	r3, #49	; 0x31
    cf2a:	e7f8      	b.n	cf1e <on_cmd_radio_band_configuration+0x2e>
	} else if (strlen(value) < sizeof("#,###################")) {
    cf2c:	a806      	add	r0, sp, #24
    cf2e:	f7f3 ff3f 	bl	db0 <strlen>
    cf32:	2815      	cmp	r0, #21
    cf34:	d9f5      	bls.n	cf22 <on_cmd_radio_band_configuration+0x32>
	memcpy(ictx.mdm_bands_string, &value[MDM_TOP_BAND_START_POSITION],
    cf36:	4c1f      	ldr	r4, [pc, #124]	; (cfb4 <on_cmd_radio_band_configuration+0xc4>)
    cf38:	f8dd 301a 	ldr.w	r3, [sp, #26]
    cf3c:	f8dd 001e 	ldr.w	r0, [sp, #30]
    cf40:	f8dd 1022 	ldr.w	r1, [sp, #34]	; 0x22
    cf44:	f8dd 2026 	ldr.w	r2, [sp, #38]	; 0x26
    cf48:	6023      	str	r3, [r4, #0]
    cf4a:	6060      	str	r0, [r4, #4]
    cf4c:	60a1      	str	r1, [r4, #8]
    cf4e:	60e2      	str	r2, [r4, #12]
    cf50:	f8dd 302a 	ldr.w	r3, [sp, #42]	; 0x2a
    cf54:	6123      	str	r3, [r4, #16]
	memcpy(n_tmp, &value[MDM_TOP_BAND_START_POSITION], MDM_TOP_BAND_SIZE);
    cf56:	f8dd 301a 	ldr.w	r3, [sp, #26]
    cf5a:	9303      	str	r3, [sp, #12]
	n_tmp[MDM_TOP_BAND_SIZE] = 0;
    cf5c:	2500      	movs	r5, #0
    cf5e:	f88d 5010 	strb.w	r5, [sp, #16]
	ictx.mdm_bands_top = strtoul(n_tmp, NULL, 16);
    cf62:	2210      	movs	r2, #16
    cf64:	4629      	mov	r1, r5
    cf66:	a803      	add	r0, sp, #12
    cf68:	f005 ff6c 	bl	12e44 <strtoul>
    cf6c:	f8a4 002b 	strh.w	r0, [r4, #43]	; 0x2b
	memcpy(n_tmp, &value[MDM_MIDDLE_BAND_START_POSITION],
    cf70:	ab03      	add	r3, sp, #12
    cf72:	f8dd 001e 	ldr.w	r0, [sp, #30]
    cf76:	f8dd 1022 	ldr.w	r1, [sp, #34]	; 0x22
    cf7a:	c303      	stmia	r3!, {r0, r1}
	n_tmp[MDM_MIDDLE_BAND_SIZE] = 0;
    cf7c:	f88d 5014 	strb.w	r5, [sp, #20]
	ictx.mdm_bands_middle = strtoul(n_tmp, NULL, 16);
    cf80:	2210      	movs	r2, #16
    cf82:	4629      	mov	r1, r5
    cf84:	a803      	add	r0, sp, #12
    cf86:	f005 ff5d 	bl	12e44 <strtoul>
    cf8a:	f8c4 002f 	str.w	r0, [r4, #47]	; 0x2f
	memcpy(n_tmp, &value[MDM_BOTTOM_BAND_START_POSITION],
    cf8e:	ab03      	add	r3, sp, #12
    cf90:	f8dd 0026 	ldr.w	r0, [sp, #38]	; 0x26
    cf94:	f8dd 102a 	ldr.w	r1, [sp, #42]	; 0x2a
    cf98:	c303      	stmia	r3!, {r0, r1}
	n_tmp[MDM_BOTTOM_BAND_SIZE] = 0;
    cf9a:	f88d 5014 	strb.w	r5, [sp, #20]
	ictx.mdm_bands_bottom = strtoul(n_tmp, NULL, 16);
    cf9e:	2210      	movs	r2, #16
    cfa0:	4629      	mov	r1, r5
    cfa2:	a803      	add	r0, sp, #12
    cfa4:	f005 ff4e 	bl	12e44 <strtoul>
    cfa8:	f8c4 0033 	str.w	r0, [r4, #51]	; 0x33
	return true;
    cfac:	e7b9      	b.n	cf22 <on_cmd_radio_band_configuration+0x32>
    cfae:	bf00      	nop
    cfb0:	20000e70 	.word	0x20000e70
    cfb4:	200019d1 	.word	0x200019d1

0000cfb8 <on_cmd_atcmdinfo_ipaddr>:
{
    cfb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cfbc:	b0de      	sub	sp, #376	; 0x178
	out_len = net_buf_linearize(value, sizeof(value), *buf, 0, len);
    cfbe:	6802      	ldr	r2, [r0, #0]
    cfc0:	ac17      	add	r4, sp, #92	; 0x5c
    cfc2:	9100      	str	r1, [sp, #0]
    cfc4:	2300      	movs	r3, #0
    cfc6:	f44f 7180 	mov.w	r1, #256	; 0x100
    cfca:	4620      	mov	r0, r4
    cfcc:	f00c f9d3 	bl	19376 <net_buf_linearize>
	value[out_len] = 0;
    cfd0:	2500      	movs	r5, #0
    cfd2:	5425      	strb	r5, [r4, r0]
	search_start = value;
    cfd4:	4620      	mov	r0, r4
	for (int i = 0; i < num_delims; i++) {
    cfd6:	2d06      	cmp	r5, #6
    cfd8:	dc0c      	bgt.n	cff4 <on_cmd_atcmdinfo_ipaddr+0x3c>
		delims[i] = strchr(search_start, ',');
    cfda:	212c      	movs	r1, #44	; 0x2c
    cfdc:	f013 f868 	bl	200b0 <strchr>
    cfe0:	ab5e      	add	r3, sp, #376	; 0x178
    cfe2:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    cfe6:	f843 0c1c 	str.w	r0, [r3, #-28]
		if (!delims[i]) {
    cfea:	2800      	cmp	r0, #0
    cfec:	d053      	beq.n	d096 <on_cmd_atcmdinfo_ipaddr+0xde>
		search_start = delims[i] + 1;
    cfee:	3001      	adds	r0, #1
	for (int i = 0; i < num_delims; i++) {
    cff0:	3501      	adds	r5, #1
    cff2:	e7f0      	b.n	cfd6 <on_cmd_atcmdinfo_ipaddr+0x1e>
	addr_len = delims[3] - delims[2];
    cff4:	9f59      	ldr	r7, [sp, #356]	; 0x164
    cff6:	9b5a      	ldr	r3, [sp, #360]	; 0x168
    cff8:	1bdb      	subs	r3, r3, r7
	if (addr_len <= (NET_IPV4_ADDR_LEN * 2)) {
    cffa:	2b20      	cmp	r3, #32
    cffc:	d914      	bls.n	d028 <on_cmd_atcmdinfo_ipaddr+0x70>
	is_ipv4 = false;
    cffe:	f04f 0800 	mov.w	r8, #0
	addr_start = delims[2] + 1;
    d002:	3701      	adds	r7, #1
	if (is_ipv4) {
    d004:	f1b8 0f00 	cmp.w	r8, #0
    d008:	d011      	beq.n	d02e <on_cmd_atcmdinfo_ipaddr+0x76>
		num_delims = 4;
    d00a:	2604      	movs	r6, #4
	sm_start = addr_start;
    d00c:	463d      	mov	r5, r7
	search_start = addr_start;
    d00e:	4638      	mov	r0, r7
	for (int i = 0; i < num_delims; i++) {
    d010:	2400      	movs	r4, #0
    d012:	42b4      	cmp	r4, r6
    d014:	da0d      	bge.n	d032 <on_cmd_atcmdinfo_ipaddr+0x7a>
		sm_start = strchr(search_start, '.');
    d016:	212e      	movs	r1, #46	; 0x2e
    d018:	f013 f84a 	bl	200b0 <strchr>
		if (!sm_start) {
    d01c:	4605      	mov	r5, r0
    d01e:	2800      	cmp	r0, #0
    d020:	d039      	beq.n	d096 <on_cmd_atcmdinfo_ipaddr+0xde>
		search_start = sm_start + 1;
    d022:	3001      	adds	r0, #1
	for (int i = 0; i < num_delims; i++) {
    d024:	3401      	adds	r4, #1
    d026:	e7f4      	b.n	d012 <on_cmd_atcmdinfo_ipaddr+0x5a>
		is_ipv4 = true;
    d028:	f04f 0801 	mov.w	r8, #1
    d02c:	e7e9      	b.n	d002 <on_cmd_atcmdinfo_ipaddr+0x4a>
		num_delims = 16;
    d02e:	2610      	movs	r6, #16
    d030:	e7ec      	b.n	d00c <on_cmd_atcmdinfo_ipaddr+0x54>
	addr_len = sm_start - addr_start;
    d032:	1bec      	subs	r4, r5, r7
	strncpy(temp_addr_str, addr_start, addr_len);
    d034:	ae02      	add	r6, sp, #8
    d036:	2340      	movs	r3, #64	; 0x40
    d038:	4622      	mov	r2, r4
    d03a:	4639      	mov	r1, r7
    d03c:	4630      	mov	r0, r6
    d03e:	f013 f88c 	bl	2015a <__strncpy_chk>
	temp_addr_str[addr_len] = 0;
    d042:	2300      	movs	r3, #0
    d044:	5533      	strb	r3, [r6, r4]
	if (is_ipv4) {
    d046:	f1b8 0f00 	cmp.w	r8, #0
    d04a:	d028      	beq.n	d09e <on_cmd_atcmdinfo_ipaddr+0xe6>
	return z_impl_net_addr_pton(family, src, dst);
    d04c:	aa16      	add	r2, sp, #88	; 0x58
    d04e:	4631      	mov	r1, r6
    d050:	2001      	movs	r0, #1
    d052:	f7fa f8bf 	bl	71d4 <z_impl_net_addr_pton>
	if (ret < 0) {
    d056:	2800      	cmp	r0, #0
    d058:	db1d      	blt.n	d096 <on_cmd_atcmdinfo_ipaddr+0xde>
	if (is_ipv4) {
    d05a:	f1b8 0f00 	cmp.w	r8, #0
    d05e:	d123      	bne.n	d0a8 <on_cmd_atcmdinfo_ipaddr+0xf0>
	addr_start = delims[4] + 1;
    d060:	995b      	ldr	r1, [sp, #364]	; 0x16c
    d062:	3101      	adds	r1, #1
	addr_len = delims[5] - addr_start;
    d064:	9b5c      	ldr	r3, [sp, #368]	; 0x170
    d066:	1a5c      	subs	r4, r3, r1
	if (is_ipv4) {
    d068:	f1b8 0f00 	cmp.w	r8, #0
    d06c:	d141      	bne.n	d0f2 <on_cmd_atcmdinfo_ipaddr+0x13a>
	if (ret < 0) {
    d06e:	2800      	cmp	r0, #0
    d070:	db11      	blt.n	d096 <on_cmd_atcmdinfo_ipaddr+0xde>
	if (ictx.iface) {
    d072:	4b37      	ldr	r3, [pc, #220]	; (d150 <on_cmd_atcmdinfo_ipaddr+0x198>)
    d074:	6818      	ldr	r0, [r3, #0]
    d076:	b170      	cbz	r0, d096 <on_cmd_atcmdinfo_ipaddr+0xde>
		if (is_ipv4) {
    d078:	f1b8 0f00 	cmp.w	r8, #0
    d07c:	d14c      	bne.n	d118 <on_cmd_atcmdinfo_ipaddr+0x160>
		delay = K_NO_WAIT;
    d07e:	2200      	movs	r2, #0
    d080:	2300      	movs	r3, #0
		if (!ictx.initialized) {
    d082:	4933      	ldr	r1, [pc, #204]	; (d150 <on_cmd_atcmdinfo_ipaddr+0x198>)
    d084:	7f49      	ldrb	r1, [r1, #29]
    d086:	b911      	cbnz	r1, d08e <on_cmd_atcmdinfo_ipaddr+0xd6>
			delay = K_SECONDS(DNS_WORK_DELAY_SECS);
    d088:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    d08c:	2300      	movs	r3, #0
		k_work_reschedule_for_queue(&hl7800_workq, &ictx.dns_work,
    d08e:	4931      	ldr	r1, [pc, #196]	; (d154 <on_cmd_atcmdinfo_ipaddr+0x19c>)
    d090:	4831      	ldr	r0, [pc, #196]	; (d158 <on_cmd_atcmdinfo_ipaddr+0x1a0>)
    d092:	f012 f9e5 	bl	1f460 <k_work_reschedule_for_queue>
}
    d096:	2001      	movs	r0, #1
    d098:	b05e      	add	sp, #376	; 0x178
    d09a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ret = hl7800_net_addr6_pton(temp_addr_str, &new_ipv6_addr);
    d09e:	a912      	add	r1, sp, #72	; 0x48
    d0a0:	a802      	add	r0, sp, #8
    d0a2:	f010 fdd7 	bl	1dc54 <hl7800_net_addr6_pton>
    d0a6:	e7d6      	b.n	d056 <on_cmd_atcmdinfo_ipaddr+0x9e>
		sm_start += 1;
    d0a8:	1c69      	adds	r1, r5, #1
		addr_len = delims[3] - sm_start;
    d0aa:	9c5a      	ldr	r4, [sp, #360]	; 0x168
    d0ac:	1a64      	subs	r4, r4, r1
		strncpy(temp_addr_str, sm_start, addr_len);
    d0ae:	ad02      	add	r5, sp, #8
    d0b0:	2340      	movs	r3, #64	; 0x40
    d0b2:	4622      	mov	r2, r4
    d0b4:	4628      	mov	r0, r5
    d0b6:	f013 f850 	bl	2015a <__strncpy_chk>
		temp_addr_str[addr_len] = 0;
    d0ba:	2300      	movs	r3, #0
    d0bc:	552b      	strb	r3, [r5, r4]
    d0be:	4a27      	ldr	r2, [pc, #156]	; (d15c <on_cmd_atcmdinfo_ipaddr+0x1a4>)
    d0c0:	4629      	mov	r1, r5
    d0c2:	2001      	movs	r0, #1
    d0c4:	f7fa f886 	bl	71d4 <z_impl_net_addr_pton>
		if (ret < 0) {
    d0c8:	2800      	cmp	r0, #0
    d0ca:	dbe4      	blt.n	d096 <on_cmd_atcmdinfo_ipaddr+0xde>
		addr_start = delims[3] + 1;
    d0cc:	995a      	ldr	r1, [sp, #360]	; 0x168
    d0ce:	3101      	adds	r1, #1
		addr_len = delims[4] - addr_start;
    d0d0:	9c5b      	ldr	r4, [sp, #364]	; 0x16c
    d0d2:	1a64      	subs	r4, r4, r1
		strncpy(temp_addr_str, addr_start, addr_len);
    d0d4:	2340      	movs	r3, #64	; 0x40
    d0d6:	4622      	mov	r2, r4
    d0d8:	4628      	mov	r0, r5
    d0da:	f013 f83e 	bl	2015a <__strncpy_chk>
		temp_addr_str[addr_len] = 0;
    d0de:	2300      	movs	r3, #0
    d0e0:	552b      	strb	r3, [r5, r4]
    d0e2:	4a1f      	ldr	r2, [pc, #124]	; (d160 <on_cmd_atcmdinfo_ipaddr+0x1a8>)
    d0e4:	4629      	mov	r1, r5
    d0e6:	2001      	movs	r0, #1
    d0e8:	f7fa f874 	bl	71d4 <z_impl_net_addr_pton>
		if (ret < 0) {
    d0ec:	2800      	cmp	r0, #0
    d0ee:	dab7      	bge.n	d060 <on_cmd_atcmdinfo_ipaddr+0xa8>
    d0f0:	e7d1      	b.n	d096 <on_cmd_atcmdinfo_ipaddr+0xde>
		strncpy(ictx.dns_v4_string, addr_start, addr_len);
    d0f2:	4d1c      	ldr	r5, [pc, #112]	; (d164 <on_cmd_atcmdinfo_ipaddr+0x1ac>)
    d0f4:	f640 438b 	movw	r3, #3211	; 0xc8b
    d0f8:	4622      	mov	r2, r4
    d0fa:	4628      	mov	r0, r5
    d0fc:	f013 f82d 	bl	2015a <__strncpy_chk>
		ictx.dns_v4_string[addr_len] = 0;
    d100:	f1a5 0225 	sub.w	r2, r5, #37	; 0x25
    d104:	1913      	adds	r3, r2, r4
    d106:	2100      	movs	r1, #0
    d108:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
    d10c:	3218      	adds	r2, #24
    d10e:	4629      	mov	r1, r5
    d110:	2001      	movs	r0, #1
    d112:	f7fa f85f 	bl	71d4 <z_impl_net_addr_pton>
		LOG_DBG("IPv4 DNS addr: %s", ictx.dns_v4_string);
    d116:	e7aa      	b.n	d06e <on_cmd_atcmdinfo_ipaddr+0xb6>
			net_if_ipv4_addr_rm(ictx.iface, &ictx.ipv4Addr);
    d118:	f103 040c 	add.w	r4, r3, #12
    d11c:	4621      	mov	r1, r4
    d11e:	f7f9 fe0f 	bl	6d40 <net_if_ipv4_addr_rm>
			if (!net_if_ipv4_addr_add(ictx.iface, &new_ipv4_addr, NET_ADDR_DHCP, 0)) {
    d122:	f1a4 050c 	sub.w	r5, r4, #12
    d126:	2300      	movs	r3, #0
    d128:	2202      	movs	r2, #2
    d12a:	a916      	add	r1, sp, #88	; 0x58
    d12c:	f854 0c0c 	ldr.w	r0, [r4, #-12]
    d130:	f7f9 fda4 	bl	6c7c <net_if_ipv4_addr_add>
			net_if_ipv4_set_netmask(ictx.iface, &ictx.subnet);
    d134:	1d21      	adds	r1, r4, #4
    d136:	f854 0c0c 	ldr.w	r0, [r4, #-12]
    d13a:	f7f9 fd6b 	bl	6c14 <net_if_ipv4_set_netmask>
			net_if_ipv4_set_gw(ictx.iface, &ictx.gateway);
    d13e:	f104 0108 	add.w	r1, r4, #8
    d142:	f854 0c0c 	ldr.w	r0, [r4, #-12]
    d146:	f7f9 fd7f 	bl	6c48 <net_if_ipv4_set_gw>
			net_ipaddr_copy(&ictx.ipv4Addr, &new_ipv4_addr);
    d14a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    d14c:	60eb      	str	r3, [r5, #12]
    d14e:	e796      	b.n	d07e <on_cmd_atcmdinfo_ipaddr+0xc6>
    d150:	20000e70 	.word	0x20000e70
    d154:	20001428 	.word	0x20001428
    d158:	20001b20 	.word	0x20001b20
    d15c:	20000e80 	.word	0x20000e80
    d160:	20000e84 	.word	0x20000e84
    d164:	20000e95 	.word	0x20000e95

0000d168 <dequeue_stale_socket>:
{
    d168:	b508      	push	{r3, lr}
	return z_impl_k_queue_get(queue, timeout);
    d16a:	2200      	movs	r2, #0
    d16c:	2300      	movs	r3, #0
    d16e:	4802      	ldr	r0, [pc, #8]	; (d178 <dequeue_stale_socket+0x10>)
    d170:	f004 f810 	bl	11194 <z_impl_k_queue_get>
}
    d174:	bd08      	pop	{r3, pc}
    d176:	bf00      	nop
    d178:	20001380 	.word	0x20001380

0000d17c <dns_work_cb>:
{
    d17c:	b508      	push	{r3, lr}
	if (ictx.iface && net_if_is_up(ictx.iface)) {
    d17e:	4b07      	ldr	r3, [pc, #28]	; (d19c <dns_work_cb+0x20>)
    d180:	6818      	ldr	r0, [r3, #0]
    d182:	b110      	cbz	r0, d18a <dns_work_cb+0xe>
    d184:	f010 fe42 	bl	1de0c <net_if_is_up>
    d188:	b900      	cbnz	r0, d18c <dns_work_cb+0x10>
}
    d18a:	bd08      	pop	{r3, pc}
		dnsCtx = dns_resolve_get_default();
    d18c:	f7fd f828 	bl	a1e0 <dns_resolve_get_default>
		ret = dns_resolve_reconfigure(dnsCtx, (const char **)dns_servers_str, NULL);
    d190:	2200      	movs	r2, #0
    d192:	4903      	ldr	r1, [pc, #12]	; (d1a0 <dns_work_cb+0x24>)
    d194:	f00f fff4 	bl	1d180 <dns_resolve_reconfigure>
		if (ret < 0) {
    d198:	e7f7      	b.n	d18a <dns_work_cb+0xe>
    d19a:	bf00      	nop
    d19c:	20000e70 	.word	0x20000e70
    d1a0:	00021d44 	.word	0x00021d44

0000d1a4 <iface_status_work_cb>:
{
    d1a4:	b5d0      	push	{r4, r6, r7, lr}
    d1a6:	b082      	sub	sp, #8
	hl7800_lock();
    d1a8:	f010 fbd6 	bl	1d958 <hl7800_lock>
	if (!ictx.initialized && ictx.restarting) {
    d1ac:	4b3d      	ldr	r3, [pc, #244]	; (d2a4 <iface_status_work_cb+0x100>)
    d1ae:	7f5b      	ldrb	r3, [r3, #29]
    d1b0:	b913      	cbnz	r3, d1b8 <iface_status_work_cb+0x14>
    d1b2:	4b3c      	ldr	r3, [pc, #240]	; (d2a4 <iface_status_work_cb+0x100>)
    d1b4:	7f1b      	ldrb	r3, [r3, #28]
    d1b6:	bb43      	cbnz	r3, d20a <iface_status_work_cb+0x66>
	} else if (ictx.wait_for_KSUP &&
    d1b8:	4b3a      	ldr	r3, [pc, #232]	; (d2a4 <iface_status_work_cb+0x100>)
    d1ba:	7f9b      	ldrb	r3, [r3, #30]
    d1bc:	b11b      	cbz	r3, d1c6 <iface_status_work_cb+0x22>
		   ictx.wait_for_KSUP_tries < WAIT_FOR_KSUP_RETRIES) {
    d1be:	4a39      	ldr	r2, [pc, #228]	; (d2a4 <iface_status_work_cb+0x100>)
    d1c0:	6a12      	ldr	r2, [r2, #32]
	} else if (ictx.wait_for_KSUP &&
    d1c2:	2a04      	cmp	r2, #4
    d1c4:	d929      	bls.n	d21a <iface_status_work_cb+0x76>
	} else if (ictx.wait_for_KSUP &&
    d1c6:	b133      	cbz	r3, d1d6 <iface_status_work_cb+0x32>
		   ictx.wait_for_KSUP_tries >= WAIT_FOR_KSUP_RETRIES) {
    d1c8:	4b36      	ldr	r3, [pc, #216]	; (d2a4 <iface_status_work_cb+0x100>)
    d1ca:	6a1b      	ldr	r3, [r3, #32]
	} else if (ictx.wait_for_KSUP &&
    d1cc:	2b04      	cmp	r3, #4
    d1ce:	d902      	bls.n	d1d6 <iface_status_work_cb+0x32>
		ictx.wait_for_KSUP = false;
    d1d0:	4b34      	ldr	r3, [pc, #208]	; (d2a4 <iface_status_work_cb+0x100>)
    d1d2:	2200      	movs	r2, #0
    d1d4:	779a      	strb	r2, [r3, #30]
	ret = send_at_cmd(NULL, "AT+COPS?", MDM_CMD_SEND_TIMEOUT, 0, false);
    d1d6:	2000      	movs	r0, #0
    d1d8:	9001      	str	r0, [sp, #4]
    d1da:	9000      	str	r0, [sp, #0]
    d1dc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    d1e0:	2300      	movs	r3, #0
    d1e2:	4931      	ldr	r1, [pc, #196]	; (d2a8 <iface_status_work_cb+0x104>)
    d1e4:	f7fd fd36 	bl	ac54 <send_at_cmd>
	switch (ictx.network_state) {
    d1e8:	4b2e      	ldr	r3, [pc, #184]	; (d2a4 <iface_status_work_cb+0x100>)
    d1ea:	f893 3c73 	ldrb.w	r3, [r3, #3187]	; 0xc73
    d1ee:	2b01      	cmp	r3, #1
    d1f0:	d01f      	beq.n	d232 <iface_status_work_cb+0x8e>
    d1f2:	2b05      	cmp	r3, #5
    d1f4:	d01d      	beq.n	d232 <iface_status_work_cb+0x8e>
		if (ictx.iface && (ictx.low_power_mode != HL7800_LPM_PSM)) {
    d1f6:	4b2b      	ldr	r3, [pc, #172]	; (d2a4 <iface_status_work_cb+0x100>)
    d1f8:	6818      	ldr	r0, [r3, #0]
    d1fa:	b1f8      	cbz	r0, d23c <iface_status_work_cb+0x98>
    d1fc:	f893 3c72 	ldrb.w	r3, [r3, #3186]	; 0xc72
    d200:	2b02      	cmp	r3, #2
    d202:	d01b      	beq.n	d23c <iface_status_work_cb+0x98>
			net_if_carrier_off(ictx.iface);
    d204:	f7f9 ff62 	bl	70cc <net_if_carrier_off>
    d208:	e018      	b.n	d23c <iface_status_work_cb+0x98>
		k_work_reschedule_for_queue(&hl7800_workq,
    d20a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    d20e:	2300      	movs	r3, #0
    d210:	4926      	ldr	r1, [pc, #152]	; (d2ac <iface_status_work_cb+0x108>)
    d212:	4827      	ldr	r0, [pc, #156]	; (d2b0 <iface_status_work_cb+0x10c>)
    d214:	f012 f924 	bl	1f460 <k_work_reschedule_for_queue>
		goto done;
    d218:	e03f      	b.n	d29a <iface_status_work_cb+0xf6>
		ictx.wait_for_KSUP_tries++;
    d21a:	4922      	ldr	r1, [pc, #136]	; (d2a4 <iface_status_work_cb+0x100>)
    d21c:	3201      	adds	r2, #1
    d21e:	620a      	str	r2, [r1, #32]
		k_work_reschedule_for_queue(&hl7800_workq,
    d220:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    d224:	2300      	movs	r3, #0
    d226:	f501 61b1 	add.w	r1, r1, #1416	; 0x588
    d22a:	4821      	ldr	r0, [pc, #132]	; (d2b0 <iface_status_work_cb+0x10c>)
    d22c:	f012 f918 	bl	1f460 <k_work_reschedule_for_queue>
		goto done;
    d230:	e033      	b.n	d29a <iface_status_work_cb+0xf6>
		if (ictx.iface) {
    d232:	4b1c      	ldr	r3, [pc, #112]	; (d2a4 <iface_status_work_cb+0x100>)
    d234:	6818      	ldr	r0, [r3, #0]
    d236:	b108      	cbz	r0, d23c <iface_status_work_cb+0x98>
			net_if_carrier_on(ictx.iface);
    d238:	f7f9 ff2e 	bl	7098 <net_if_carrier_on>
	if ((ictx.iface && !net_if_is_up(ictx.iface)) ||
    d23c:	4b19      	ldr	r3, [pc, #100]	; (d2a4 <iface_status_work_cb+0x100>)
    d23e:	6818      	ldr	r0, [r3, #0]
    d240:	b110      	cbz	r0, d248 <iface_status_work_cb+0xa4>
    d242:	f010 fde3 	bl	1de0c <net_if_is_up>
    d246:	b320      	cbz	r0, d292 <iface_status_work_cb+0xee>
	    (ictx.low_power_mode == HL7800_LPM_PSM &&
    d248:	4b16      	ldr	r3, [pc, #88]	; (d2a4 <iface_status_work_cb+0x100>)
    d24a:	f8b3 2c72 	ldrh.w	r2, [r3, #3186]	; 0xc72
	if ((ictx.iface && !net_if_is_up(ictx.iface)) ||
    d24e:	f240 4302 	movw	r3, #1026	; 0x402
    d252:	429a      	cmp	r2, r3
    d254:	d01d      	beq.n	d292 <iface_status_work_cb+0xee>
	} else if (ictx.iface && net_if_is_up(ictx.iface)) {
    d256:	4b13      	ldr	r3, [pc, #76]	; (d2a4 <iface_status_work_cb+0x100>)
    d258:	6818      	ldr	r0, [r3, #0]
    d25a:	b1f0      	cbz	r0, d29a <iface_status_work_cb+0xf6>
    d25c:	f010 fdd6 	bl	1de0c <net_if_is_up>
    d260:	b1d8      	cbz	r0, d29a <iface_status_work_cb+0xf6>
		hl7800_start_rssi_work();
    d262:	f7fd fe17 	bl	ae94 <hl7800_start_rssi_work>
		(void)send_at_cmd(NULL, "AT+CGCONTRDP=1", MDM_CMD_SEND_TIMEOUT,
    d266:	f44f 3640 	mov.w	r6, #196608	; 0x30000
    d26a:	2700      	movs	r7, #0
    d26c:	2400      	movs	r4, #0
    d26e:	9401      	str	r4, [sp, #4]
    d270:	2304      	movs	r3, #4
    d272:	9300      	str	r3, [sp, #0]
    d274:	4632      	mov	r2, r6
    d276:	463b      	mov	r3, r7
    d278:	490e      	ldr	r1, [pc, #56]	; (d2b4 <iface_status_work_cb+0x110>)
    d27a:	4620      	mov	r0, r4
    d27c:	f7fd fcea 	bl	ac54 <send_at_cmd>
		SEND_AT_CMD_IGNORE_ERROR("AT+KBND?");
    d280:	9401      	str	r4, [sp, #4]
    d282:	9400      	str	r4, [sp, #0]
    d284:	4632      	mov	r2, r6
    d286:	463b      	mov	r3, r7
    d288:	490b      	ldr	r1, [pc, #44]	; (d2b8 <iface_status_work_cb+0x114>)
    d28a:	4620      	mov	r0, r4
    d28c:	f7fd fce2 	bl	ac54 <send_at_cmd>
	allow_sleep(true);
    d290:	e003      	b.n	d29a <iface_status_work_cb+0xf6>
		hl7800_stop_rssi_work();
    d292:	f7fe f98f 	bl	b5b4 <hl7800_stop_rssi_work>
		notify_all_tcp_sockets_closed();
    d296:	f7fd fc25 	bl	aae4 <notify_all_tcp_sockets_closed>
	hl7800_unlock();
    d29a:	f010 fb63 	bl	1d964 <hl7800_unlock>
}
    d29e:	b002      	add	sp, #8
    d2a0:	bdd0      	pop	{r4, r6, r7, pc}
    d2a2:	bf00      	nop
    d2a4:	20000e70 	.word	0x20000e70
    d2a8:	00021cdc 	.word	0x00021cdc
    d2ac:	200013f8 	.word	0x200013f8
    d2b0:	20001b20 	.word	0x20001b20
    d2b4:	00021ce8 	.word	0x00021ce8
    d2b8:	00021cf8 	.word	0x00021cf8

0000d2bc <hl7800_init>:
{
    d2bc:	b570      	push	{r4, r5, r6, lr}
    d2be:	b08a      	sub	sp, #40	; 0x28
	struct k_work_queue_config cfg = {
    d2c0:	2300      	movs	r3, #0
    d2c2:	9308      	str	r3, [sp, #32]
    d2c4:	9309      	str	r3, [sp, #36]	; 0x24
    d2c6:	4bb9      	ldr	r3, [pc, #740]	; (d5ac <hl7800_init+0x2f0>)
    d2c8:	9308      	str	r3, [sp, #32]
	ictx.iface = net_if_get_default();
    d2ca:	f7f9 fb23 	bl	6914 <net_if_get_default>
    d2ce:	4bb8      	ldr	r3, [pc, #736]	; (d5b0 <hl7800_init+0x2f4>)
    d2d0:	6018      	str	r0, [r3, #0]
	if (ictx.iface == NULL) {
    d2d2:	2800      	cmp	r0, #0
    d2d4:	f000 8163 	beq.w	d59e <hl7800_init+0x2e2>
	net_if_carrier_off(ictx.iface);
    d2d8:	f7f9 fef8 	bl	70cc <net_if_carrier_off>
	for (i = 0; i < MDM_MAX_SOCKETS; i++) {
    d2dc:	2600      	movs	r6, #0
    d2de:	e025      	b.n	d32c <hl7800_init+0x70>
		ictx.sockets[i].socket_id = -1;
    d2e0:	4db3      	ldr	r5, [pc, #716]	; (d5b0 <hl7800_init+0x2f4>)
    d2e2:	24a8      	movs	r4, #168	; 0xa8
    d2e4:	fb06 f404 	mul.w	r4, r6, r4
    d2e8:	192b      	adds	r3, r5, r4
    d2ea:	f04f 32ff 	mov.w	r2, #4294967295
    d2ee:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		k_work_init(&ictx.sockets[i].recv_cb_work,
    d2f2:	f504 7094 	add.w	r0, r4, #296	; 0x128
    d2f6:	4428      	add	r0, r5
    d2f8:	49ae      	ldr	r1, [pc, #696]	; (d5b4 <hl7800_init+0x2f8>)
    d2fa:	3004      	adds	r0, #4
    d2fc:	f012 f854 	bl	1f3a8 <k_work_init>
		k_work_init(&ictx.sockets[i].rx_data_work,
    d300:	f504 709c 	add.w	r0, r4, #312	; 0x138
    d304:	4428      	add	r0, r5
    d306:	49ac      	ldr	r1, [pc, #688]	; (d5b8 <hl7800_init+0x2fc>)
    d308:	3004      	adds	r0, #4
    d30a:	f012 f84d 	bl	1f3a8 <k_work_init>
		k_work_init_delayable(&ictx.sockets[i].notif_work,
    d30e:	f504 70a8 	add.w	r0, r4, #336	; 0x150
    d312:	49aa      	ldr	r1, [pc, #680]	; (d5bc <hl7800_init+0x300>)
    d314:	4428      	add	r0, r5
    d316:	f012 f86d 	bl	1f3f4 <k_work_init_delayable>
		k_sem_init(&ictx.sockets[i].sock_send_sem, 0, 1);
    d31a:	f504 7088 	add.w	r0, r4, #272	; 0x110
    d31e:	4428      	add	r0, r5
    d320:	3004      	adds	r0, #4
	return z_impl_k_sem_init(sem, initial_count, limit);
    d322:	2201      	movs	r2, #1
    d324:	2100      	movs	r1, #0
    d326:	f011 ff67 	bl	1f1f8 <z_impl_k_sem_init>
	for (i = 0; i < MDM_MAX_SOCKETS; i++) {
    d32a:	3601      	adds	r6, #1
    d32c:	2e05      	cmp	r6, #5
    d32e:	ddd7      	ble.n	d2e0 <hl7800_init+0x24>
	ictx.last_socket_id = 0;
    d330:	4d9f      	ldr	r5, [pc, #636]	; (d5b0 <hl7800_init+0x2f4>)
    d332:	2400      	movs	r4, #0
    d334:	f8c5 44d8 	str.w	r4, [r5, #1240]	; 0x4d8
    d338:	2201      	movs	r2, #1
    d33a:	4621      	mov	r1, r4
    d33c:	f505 60a5 	add.w	r0, r5, #1320	; 0x528
    d340:	f011 ff5a 	bl	1f1f8 <z_impl_k_sem_init>
    d344:	2201      	movs	r2, #1
    d346:	4621      	mov	r1, r4
    d348:	f505 60a8 	add.w	r0, r5, #1344	; 0x540
    d34c:	f011 ff54 	bl	1f1f8 <z_impl_k_sem_init>
	k_work_queue_start(&hl7800_workq, hl7800_workq_stack,
    d350:	ab08      	add	r3, sp, #32
    d352:	9300      	str	r3, [sp, #0]
    d354:	f06f 0308 	mvn.w	r3, #8
    d358:	f44f 6200 	mov.w	r2, #2048	; 0x800
    d35c:	4998      	ldr	r1, [pc, #608]	; (d5c0 <hl7800_init+0x304>)
    d35e:	4899      	ldr	r0, [pc, #612]	; (d5c4 <hl7800_init+0x308>)
    d360:	f004 f8ca 	bl	114f8 <k_work_queue_start>
	k_work_init_delayable(&ictx.rssi_query_work, hl7800_rssi_query_work);
    d364:	4998      	ldr	r1, [pc, #608]	; (d5c8 <hl7800_init+0x30c>)
    d366:	f505 60ab 	add.w	r0, r5, #1368	; 0x558
    d36a:	f012 f843 	bl	1f3f4 <k_work_init_delayable>
	k_work_init_delayable(&ictx.iface_status_work, iface_status_work_cb);
    d36e:	4997      	ldr	r1, [pc, #604]	; (d5cc <hl7800_init+0x310>)
    d370:	f505 60b1 	add.w	r0, r5, #1416	; 0x588
    d374:	f012 f83e 	bl	1f3f4 <k_work_init_delayable>
	k_work_init_delayable(&ictx.dns_work, dns_work_cb);
    d378:	4995      	ldr	r1, [pc, #596]	; (d5d0 <hl7800_init+0x314>)
    d37a:	f505 60b7 	add.w	r0, r5, #1464	; 0x5b8
    d37e:	f012 f839 	bl	1f3f4 <k_work_init_delayable>
	k_work_init(&ictx.mdm_vgpio_work, mdm_vgpio_work_cb);
    d382:	4994      	ldr	r1, [pc, #592]	; (d5d4 <hl7800_init+0x318>)
    d384:	f505 60bd 	add.w	r0, r5, #1512	; 0x5e8
    d388:	f012 f80e 	bl	1f3a8 <k_work_init>
	k_work_init_delayable(&ictx.mdm_reset_work, mdm_reset_work_callback);
    d38c:	4992      	ldr	r1, [pc, #584]	; (d5d8 <hl7800_init+0x31c>)
    d38e:	f505 60bf 	add.w	r0, r5, #1528	; 0x5f8
    d392:	f012 f82f 	bl	1f3f4 <k_work_init_delayable>
	k_work_init_delayable(&ictx.allow_sleep_work,
    d396:	4991      	ldr	r1, [pc, #580]	; (d5dc <hl7800_init+0x320>)
    d398:	f505 60c5 	add.w	r0, r5, #1576	; 0x628
    d39c:	f012 f82a 	bl	1f3f4 <k_work_init_delayable>
	k_work_init_delayable(&ictx.delete_untracked_socket_work, delete_untracked_socket_work_cb);
    d3a0:	498f      	ldr	r1, [pc, #572]	; (d5e0 <hl7800_init+0x324>)
    d3a2:	f505 60cb 	add.w	r0, r5, #1624	; 0x658
    d3a6:	f012 f825 	bl	1f3f4 <k_work_init_delayable>
	k_work_init(&ictx.finish_fw_update_work,
    d3aa:	498e      	ldr	r1, [pc, #568]	; (d5e4 <hl7800_init+0x328>)
    d3ac:	f605 20a4 	addw	r0, r5, #2724	; 0xaa4
    d3b0:	f011 fffa 	bl	1f3a8 <k_work_init>
	ictx.fw_updated = false;
    d3b4:	f885 4ab4 	strb.w	r4, [r5, #2740]	; 0xab4
	for (i = 0; i < MAX_MDM_CONTROL_PINS; i++) {
    d3b8:	2c07      	cmp	r4, #7
    d3ba:	dc09      	bgt.n	d3d0 <hl7800_init+0x114>
		if (!device_is_ready(hl7800_cfg.gpio[i].port)) {
    d3bc:	4b8a      	ldr	r3, [pc, #552]	; (d5e8 <hl7800_init+0x32c>)
    d3be:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
    d3c2:	f011 fce4 	bl	1ed8e <z_device_is_ready>
    d3c6:	2800      	cmp	r0, #0
    d3c8:	f000 80ec 	beq.w	d5a4 <hl7800_init+0x2e8>
	for (i = 0; i < MAX_MDM_CONTROL_PINS; i++) {
    d3cc:	3401      	adds	r4, #1
    d3ce:	e7f3      	b.n	d3b8 <hl7800_init+0xfc>
	ret = gpio_pin_configure_dt(&hl7800_cfg.gpio[MDM_RESET], GPIO_OUTPUT);
    d3d0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    d3d4:	4884      	ldr	r0, [pc, #528]	; (d5e8 <hl7800_init+0x32c>)
    d3d6:	f010 f9e4 	bl	1d7a2 <gpio_pin_configure_dt>
	if (ret) {
    d3da:	4603      	mov	r3, r0
    d3dc:	b110      	cbz	r0, d3e4 <hl7800_init+0x128>
}
    d3de:	4618      	mov	r0, r3
    d3e0:	b00a      	add	sp, #40	; 0x28
    d3e2:	bd70      	pop	{r4, r5, r6, pc}
	ret = gpio_pin_configure_dt(&hl7800_cfg.gpio[MDM_WAKE], GPIO_OUTPUT);
    d3e4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    d3e8:	4880      	ldr	r0, [pc, #512]	; (d5ec <hl7800_init+0x330>)
    d3ea:	f010 f9da 	bl	1d7a2 <gpio_pin_configure_dt>
	if (ret) {
    d3ee:	4603      	mov	r3, r0
    d3f0:	2800      	cmp	r0, #0
    d3f2:	d1f4      	bne.n	d3de <hl7800_init+0x122>
	ret = gpio_pin_configure_dt(&hl7800_cfg.gpio[MDM_PWR_ON], GPIO_OUTPUT);
    d3f4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    d3f8:	487d      	ldr	r0, [pc, #500]	; (d5f0 <hl7800_init+0x334>)
    d3fa:	f010 f9d2 	bl	1d7a2 <gpio_pin_configure_dt>
	if (ret) {
    d3fe:	4603      	mov	r3, r0
    d400:	2800      	cmp	r0, #0
    d402:	d1ec      	bne.n	d3de <hl7800_init+0x122>
	ret = gpio_pin_configure_dt(&hl7800_cfg.gpio[MDM_FAST_SHUTD], GPIO_OUTPUT);
    d404:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    d408:	487a      	ldr	r0, [pc, #488]	; (d5f4 <hl7800_init+0x338>)
    d40a:	f010 f9ca 	bl	1d7a2 <gpio_pin_configure_dt>
	if (ret) {
    d40e:	4603      	mov	r3, r0
    d410:	2800      	cmp	r0, #0
    d412:	d1e4      	bne.n	d3de <hl7800_init+0x122>
	ret = gpio_pin_configure_dt(&hl7800_cfg.gpio[MDM_VGPIO], GPIO_INPUT);
    d414:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    d418:	4877      	ldr	r0, [pc, #476]	; (d5f8 <hl7800_init+0x33c>)
    d41a:	f010 f9c2 	bl	1d7a2 <gpio_pin_configure_dt>
	if (ret) {
    d41e:	4603      	mov	r3, r0
    d420:	2800      	cmp	r0, #0
    d422:	d1dc      	bne.n	d3de <hl7800_init+0x122>
	ret = gpio_pin_configure_dt(&hl7800_cfg.gpio[MDM_UART_DSR], GPIO_INPUT);
    d424:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    d428:	4874      	ldr	r0, [pc, #464]	; (d5fc <hl7800_init+0x340>)
    d42a:	f010 f9ba 	bl	1d7a2 <gpio_pin_configure_dt>
	if (ret) {
    d42e:	4603      	mov	r3, r0
    d430:	2800      	cmp	r0, #0
    d432:	d1d4      	bne.n	d3de <hl7800_init+0x122>
	ret = gpio_pin_configure_dt(&hl7800_cfg.gpio[MDM_UART_CTS], GPIO_INPUT);
    d434:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    d438:	4871      	ldr	r0, [pc, #452]	; (d600 <hl7800_init+0x344>)
    d43a:	f010 f9b2 	bl	1d7a2 <gpio_pin_configure_dt>
	if (ret) {
    d43e:	4603      	mov	r3, r0
    d440:	2800      	cmp	r0, #0
    d442:	d1cc      	bne.n	d3de <hl7800_init+0x122>
	ret = gpio_pin_configure_dt(&hl7800_cfg.gpio[MDM_GPIO6], GPIO_INPUT);
    d444:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    d448:	486e      	ldr	r0, [pc, #440]	; (d604 <hl7800_init+0x348>)
    d44a:	f010 f9aa 	bl	1d7a2 <gpio_pin_configure_dt>
	if (ret) {
    d44e:	4603      	mov	r3, r0
    d450:	2800      	cmp	r0, #0
    d452:	d1c4      	bne.n	d3de <hl7800_init+0x122>
	ictx.uart_on = true;
    d454:	4c56      	ldr	r4, [pc, #344]	; (d5b0 <hl7800_init+0x2f4>)
    d456:	2301      	movs	r3, #1
    d458:	f884 3c6f 	strb.w	r3, [r4, #3183]	; 0xc6f
	modem_assert_wake(false);
    d45c:	f7fd fa94 	bl	a988 <modem_assert_wake>
	modem_assert_pwr_on(false);
    d460:	2000      	movs	r0, #0
    d462:	f7fd faa7 	bl	a9b4 <modem_assert_pwr_on>
	modem_assert_fast_shutd(false);
    d466:	2000      	movs	r0, #0
    d468:	f7fd fab4 	bl	a9d4 <modem_assert_fast_shutd>
	modem_run();
    d46c:	f7fe f8da 	bl	b624 <modem_run>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    d470:	4b65      	ldr	r3, [pc, #404]	; (d608 <hl7800_init+0x34c>)
    d472:	65e3      	str	r3, [r4, #92]	; 0x5c
	callback->pin_mask = pin_mask;
    d474:	f44f 6300 	mov.w	r3, #2048	; 0x800
    d478:	6623      	str	r3, [r4, #96]	; 0x60
	ret = gpio_add_callback(hl7800_cfg.gpio[MDM_VGPIO].port,
    d47a:	f104 0158 	add.w	r1, r4, #88	; 0x58
    d47e:	4863      	ldr	r0, [pc, #396]	; (d60c <hl7800_init+0x350>)
    d480:	f010 f9d3 	bl	1d82a <gpio_add_callback>
	if (ret) {
    d484:	4603      	mov	r3, r0
    d486:	2800      	cmp	r0, #0
    d488:	d1a9      	bne.n	d3de <hl7800_init+0x122>
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
    d48a:	f04f 62e8 	mov.w	r2, #121634816	; 0x7400000
    d48e:	210b      	movs	r1, #11
    d490:	485e      	ldr	r0, [pc, #376]	; (d60c <hl7800_init+0x350>)
    d492:	f010 f94a 	bl	1d72a <z_impl_gpio_pin_interrupt_configure>
	if (ret) {
    d496:	4603      	mov	r3, r0
    d498:	2800      	cmp	r0, #0
    d49a:	d1a0      	bne.n	d3de <hl7800_init+0x122>
	callback->handler = handler;
    d49c:	4621      	mov	r1, r4
    d49e:	4b5c      	ldr	r3, [pc, #368]	; (d610 <hl7800_init+0x354>)
    d4a0:	66a3      	str	r3, [r4, #104]	; 0x68
	callback->pin_mask = pin_mask;
    d4a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    d4a6:	66e3      	str	r3, [r4, #108]	; 0x6c
	ret = gpio_add_callback(hl7800_cfg.gpio[MDM_UART_DSR].port,
    d4a8:	3164      	adds	r1, #100	; 0x64
    d4aa:	485a      	ldr	r0, [pc, #360]	; (d614 <hl7800_init+0x358>)
    d4ac:	f010 f9bd 	bl	1d82a <gpio_add_callback>
	if (ret) {
    d4b0:	4603      	mov	r3, r0
    d4b2:	2800      	cmp	r0, #0
    d4b4:	d193      	bne.n	d3de <hl7800_init+0x122>
    d4b6:	f04f 62e8 	mov.w	r2, #121634816	; 0x7400000
    d4ba:	2119      	movs	r1, #25
    d4bc:	4855      	ldr	r0, [pc, #340]	; (d614 <hl7800_init+0x358>)
    d4be:	f010 f934 	bl	1d72a <z_impl_gpio_pin_interrupt_configure>
	if (ret) {
    d4c2:	4603      	mov	r3, r0
    d4c4:	2800      	cmp	r0, #0
    d4c6:	d18a      	bne.n	d3de <hl7800_init+0x122>
	callback->handler = handler;
    d4c8:	4621      	mov	r1, r4
    d4ca:	4b53      	ldr	r3, [pc, #332]	; (d618 <hl7800_init+0x35c>)
    d4cc:	6763      	str	r3, [r4, #116]	; 0x74
	callback->pin_mask = pin_mask;
    d4ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    d4d2:	67a3      	str	r3, [r4, #120]	; 0x78
	ret = gpio_add_callback(hl7800_cfg.gpio[MDM_GPIO6].port,
    d4d4:	3170      	adds	r1, #112	; 0x70
    d4d6:	484d      	ldr	r0, [pc, #308]	; (d60c <hl7800_init+0x350>)
    d4d8:	f010 f9a7 	bl	1d82a <gpio_add_callback>
	if (ret) {
    d4dc:	4603      	mov	r3, r0
    d4de:	2800      	cmp	r0, #0
    d4e0:	f47f af7d 	bne.w	d3de <hl7800_init+0x122>
    d4e4:	f04f 62e8 	mov.w	r2, #121634816	; 0x7400000
    d4e8:	210c      	movs	r1, #12
    d4ea:	4848      	ldr	r0, [pc, #288]	; (d60c <hl7800_init+0x350>)
    d4ec:	f010 f91d 	bl	1d72a <z_impl_gpio_pin_interrupt_configure>
	if (ret) {
    d4f0:	4603      	mov	r3, r0
    d4f2:	2800      	cmp	r0, #0
    d4f4:	f47f af73 	bne.w	d3de <hl7800_init+0x122>
	callback->handler = handler;
    d4f8:	4621      	mov	r1, r4
    d4fa:	4b48      	ldr	r3, [pc, #288]	; (d61c <hl7800_init+0x360>)
    d4fc:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	callback->pin_mask = pin_mask;
    d500:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    d504:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	ret = gpio_add_callback(hl7800_cfg.gpio[MDM_UART_CTS].port,
    d508:	317c      	adds	r1, #124	; 0x7c
    d50a:	4842      	ldr	r0, [pc, #264]	; (d614 <hl7800_init+0x358>)
    d50c:	f010 f98d 	bl	1d82a <gpio_add_callback>
	if (ret) {
    d510:	4603      	mov	r3, r0
    d512:	2800      	cmp	r0, #0
    d514:	f47f af63 	bne.w	d3de <hl7800_init+0x122>
    d518:	f04f 62e8 	mov.w	r2, #121634816	; 0x7400000
    d51c:	210f      	movs	r1, #15
    d51e:	483d      	ldr	r0, [pc, #244]	; (d614 <hl7800_init+0x358>)
    d520:	f010 f903 	bl	1d72a <z_impl_gpio_pin_interrupt_configure>
	if (ret) {
    d524:	4603      	mov	r3, r0
    d526:	2800      	cmp	r0, #0
    d528:	f47f af59 	bne.w	d3de <hl7800_init+0x122>
	ictx.mdm_ctx.data_manufacturer = ictx.mdm_manufacturer;
    d52c:	4620      	mov	r0, r4
    d52e:	f604 23b5 	addw	r3, r4, #2741	; 0xab5
    d532:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
	ictx.mdm_ctx.data_model = ictx.mdm_model;
    d536:	f604 23c5 	addw	r3, r4, #2757	; 0xac5
    d53a:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	ictx.mdm_ctx.data_revision = ictx.mdm_revision;
    d53e:	f604 23cc 	addw	r3, r4, #2764	; 0xacc
    d542:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
	ictx.mdm_ctx.data_rssi = &ictx.mdm_rssi;
    d546:	f604 3388 	addw	r3, r4, #2952	; 0xb88
    d54a:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
	ret = mdm_receiver_register(&ictx.mdm_ctx, MDM_UART_DEV,
    d54e:	f240 53dc 	movw	r3, #1500	; 0x5dc
    d552:	4a33      	ldr	r2, [pc, #204]	; (d620 <hl7800_init+0x364>)
    d554:	4933      	ldr	r1, [pc, #204]	; (d624 <hl7800_init+0x368>)
    d556:	3098      	adds	r0, #152	; 0x98
    d558:	f010 f8ba 	bl	1d6d0 <mdm_receiver_register>
	if (ret < 0) {
    d55c:	1e03      	subs	r3, r0, #0
    d55e:	f6ff af3e 	blt.w	d3de <hl7800_init+0x122>
	z_impl_k_queue_init(queue);
    d562:	f504 60a2 	add.w	r0, r4, #1296	; 0x510
    d566:	f011 fdfb 	bl	1f160 <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    d56a:	2200      	movs	r2, #0
    d56c:	2300      	movs	r3, #0
    d56e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    d572:	2300      	movs	r3, #0
    d574:	9304      	str	r3, [sp, #16]
    d576:	f06f 0208 	mvn.w	r2, #8
    d57a:	9203      	str	r2, [sp, #12]
    d57c:	9302      	str	r3, [sp, #8]
    d57e:	9301      	str	r3, [sp, #4]
    d580:	9300      	str	r3, [sp, #0]
    d582:	4b29      	ldr	r3, [pc, #164]	; (d628 <hl7800_init+0x36c>)
    d584:	f44f 62a0 	mov.w	r2, #1280	; 0x500
    d588:	4928      	ldr	r1, [pc, #160]	; (d62c <hl7800_init+0x370>)
    d58a:	4829      	ldr	r0, [pc, #164]	; (d630 <hl7800_init+0x374>)
    d58c:	f011 fd11 	bl	1efb2 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    d590:	4928      	ldr	r1, [pc, #160]	; (d634 <hl7800_init+0x378>)
    d592:	f011 fcfa 	bl	1ef8a <z_impl_k_thread_name_set>
	ret = modem_reset_and_configure();
    d596:	f7fe f853 	bl	b640 <modem_reset_and_configure>
    d59a:	4603      	mov	r3, r0
	return ret;
    d59c:	e71f      	b.n	d3de <hl7800_init+0x122>
		return -EIO;
    d59e:	f06f 0304 	mvn.w	r3, #4
    d5a2:	e71c      	b.n	d3de <hl7800_init+0x122>
			return -ENODEV;
    d5a4:	f06f 0312 	mvn.w	r3, #18
    d5a8:	e719      	b.n	d3de <hl7800_init+0x122>
    d5aa:	bf00      	nop
    d5ac:	00021d04 	.word	0x00021d04
    d5b0:	20000e70 	.word	0x20000e70
    d5b4:	0001db1b 	.word	0x0001db1b
    d5b8:	0001d981 	.word	0x0001d981
    d5bc:	0000b4f9 	.word	0x0000b4f9
    d5c0:	20005298 	.word	0x20005298
    d5c4:	20001b20 	.word	0x20001b20
    d5c8:	0000aead 	.word	0x0000aead
    d5cc:	0000d1a5 	.word	0x0000d1a5
    d5d0:	0000d17d 	.word	0x0000d17d
    d5d4:	0000b565 	.word	0x0000b565
    d5d8:	0001dfcb 	.word	0x0001dfcb
    d5dc:	0000b3dd 	.word	0x0000b3dd
    d5e0:	0001ddcf 	.word	0x0001ddcf
    d5e4:	0000b439 	.word	0x0000b439
    d5e8:	000220cc 	.word	0x000220cc
    d5ec:	000220d4 	.word	0x000220d4
    d5f0:	000220dc 	.word	0x000220dc
    d5f4:	000220e4 	.word	0x000220e4
    d5f8:	000220ec 	.word	0x000220ec
    d5fc:	000220f4 	.word	0x000220f4
    d600:	000220fc 	.word	0x000220fc
    d604:	00022104 	.word	0x00022104
    d608:	0000b4ad 	.word	0x0000b4ad
    d60c:	000207cc 	.word	0x000207cc
    d610:	0000ac09 	.word	0x0000ac09
    d614:	000207e4 	.word	0x000207e4
    d618:	0001d8d7 	.word	0x0001d8d7
    d61c:	0000b531 	.word	0x0000b531
    d620:	20002c2c 	.word	0x20002c2c
    d624:	00020844 	.word	0x00020844
    d628:	0000c28d 	.word	0x0000c28d
    d62c:	20005a98 	.word	0x20005a98
    d630:	20001bc0 	.word	0x20001bc0
    d634:	00021d14 	.word	0x00021d14

0000d638 <hl7800_sprint_ip_addr>:
{
    d638:	b508      	push	{r3, lr}
		if (addr->sa_family == AF_INET) {
    d63a:	8803      	ldrh	r3, [r0, #0]
    d63c:	2b01      	cmp	r3, #1
    d63e:	d001      	beq.n	d644 <hl7800_sprint_ip_addr+0xc>
		return NULL;
    d640:	2000      	movs	r0, #0
}
    d642:	bd08      	pop	{r3, pc}
		return net_addr_ntop(AF_INET, &net_sin(addr)->sin_addr, buf,
    d644:	1d01      	adds	r1, r0, #4
	return z_impl_net_addr_ntop(family, src, dst, size);
    d646:	2328      	movs	r3, #40	; 0x28
    d648:	4a02      	ldr	r2, [pc, #8]	; (d654 <hl7800_sprint_ip_addr+0x1c>)
    d64a:	2001      	movs	r0, #1
    d64c:	f00c fa85 	bl	19b5a <z_impl_net_addr_ntop>
    d650:	e7f7      	b.n	d642 <hl7800_sprint_ip_addr+0xa>
    d652:	bf00      	nop
    d654:	20002bfc 	.word	0x20002bfc

0000d658 <configure_TCP_socket>:
{
    d658:	b5f0      	push	{r4, r5, r6, r7, lr}
    d65a:	b099      	sub	sp, #100	; 0x64
    d65c:	4604      	mov	r4, r0
	if (sock->dst.sa_family == AF_INET6) {
    d65e:	8a03      	ldrh	r3, [r0, #16]
    d660:	2b02      	cmp	r3, #2
    d662:	d022      	beq.n	d6aa <configure_TCP_socket+0x52>
	} else if (sock->dst.sa_family == AF_INET) {
    d664:	2b01      	cmp	r3, #1
    d666:	d123      	bne.n	d6b0 <configure_TCP_socket+0x58>
		dst_port = net_sin(&sock->dst)->sin_port;
    d668:	8a46      	ldrh	r6, [r0, #18]
		af = MDM_HL7800_SOCKET_AF_IPV4;
    d66a:	2700      	movs	r7, #0
	sock->socket_id = MDM_CREATE_SOCKET_ID;
    d66c:	2307      	movs	r3, #7
    d66e:	61e3      	str	r3, [r4, #28]
	snprintk(cmd_cfg, sizeof(cmd_cfg), "AT+KTCPCFG=%d,%d,\"%s\",%u,,,,%d,,%d", 1, 0,
    d670:	f104 0010 	add.w	r0, r4, #16
    d674:	f7ff ffe0 	bl	d638 <hl7800_sprint_ip_addr>
    d678:	2500      	movs	r5, #0
    d67a:	9504      	str	r5, [sp, #16]
    d67c:	9703      	str	r7, [sp, #12]
    d67e:	9602      	str	r6, [sp, #8]
    d680:	9001      	str	r0, [sp, #4]
    d682:	9500      	str	r5, [sp, #0]
    d684:	2301      	movs	r3, #1
    d686:	4a0d      	ldr	r2, [pc, #52]	; (d6bc <configure_TCP_socket+0x64>)
    d688:	2147      	movs	r1, #71	; 0x47
    d68a:	a806      	add	r0, sp, #24
    d68c:	f009 f889 	bl	167a2 <snprintk>
	ret = send_at_cmd(sock, cmd_cfg, MDM_CMD_SEND_TIMEOUT, 0, false);
    d690:	9501      	str	r5, [sp, #4]
    d692:	9500      	str	r5, [sp, #0]
    d694:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    d698:	2300      	movs	r3, #0
    d69a:	a906      	add	r1, sp, #24
    d69c:	4620      	mov	r0, r4
    d69e:	f7fd fad9 	bl	ac54 <send_at_cmd>
	if (ret < 0) {
    d6a2:	2800      	cmp	r0, #0
    d6a4:	db07      	blt.n	d6b6 <configure_TCP_socket+0x5e>
}
    d6a6:	b019      	add	sp, #100	; 0x64
    d6a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		dst_port = net_sin6(&sock->dst)->sin6_port;
    d6aa:	8a46      	ldrh	r6, [r0, #18]
		af = MDM_HL7800_SOCKET_AF_IPV6;
    d6ac:	2701      	movs	r7, #1
    d6ae:	e7dd      	b.n	d66c <configure_TCP_socket+0x14>
		return -EINVAL;
    d6b0:	f06f 0015 	mvn.w	r0, #21
    d6b4:	e7f7      	b.n	d6a6 <configure_TCP_socket+0x4e>
		ret = -EIO;
    d6b6:	f06f 0004 	mvn.w	r0, #4
    d6ba:	e7f4      	b.n	d6a6 <configure_TCP_socket+0x4e>
    d6bc:	00021d20 	.word	0x00021d20

0000d6c0 <on_cmd_rtc_query>:
{
    d6c0:	b510      	push	{r4, lr}
    d6c2:	b08a      	sub	sp, #40	; 0x28
    d6c4:	4604      	mov	r4, r0
	struct net_buf *frag = NULL;
    d6c6:	2100      	movs	r1, #0
    d6c8:	9109      	str	r1, [sp, #36]	; 0x24
	memset(rtc_string, 0, sizeof(rtc_string));
    d6ca:	9103      	str	r1, [sp, #12]
    d6cc:	9104      	str	r1, [sp, #16]
    d6ce:	9105      	str	r1, [sp, #20]
    d6d0:	9106      	str	r1, [sp, #24]
    d6d2:	9107      	str	r1, [sp, #28]
    d6d4:	f8cd 101f 	str.w	r1, [sp, #31]
	ictx.local_time_valid = false;
    d6d8:	4b15      	ldr	r3, [pc, #84]	; (d730 <on_cmd_rtc_query+0x70>)
    d6da:	f883 1ca0 	strb.w	r1, [r3, #3232]	; 0xca0
	wait_for_modem_data_and_newline(buf, net_buf_frags_len(*buf),
    d6de:	6803      	ldr	r3, [r0, #0]
    d6e0:	e002      	b.n	d6e8 <on_cmd_rtc_query+0x28>
		bytes += buf->len;
    d6e2:	899a      	ldrh	r2, [r3, #12]
    d6e4:	4411      	add	r1, r2
		buf = buf->frags;
    d6e6:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    d6e8:	2b00      	cmp	r3, #0
    d6ea:	d1fa      	bne.n	d6e2 <on_cmd_rtc_query+0x22>
    d6ec:	2217      	movs	r2, #23
    d6ee:	4620      	mov	r0, r4
    d6f0:	f7fe fb5c 	bl	bdac <wait_for_modem_data_and_newline>
	frag = NULL;
    d6f4:	2300      	movs	r3, #0
    d6f6:	9309      	str	r3, [sp, #36]	; 0x24
	len = net_buf_findcrlf(*buf, &frag);
    d6f8:	a909      	add	r1, sp, #36	; 0x24
    d6fa:	6820      	ldr	r0, [r4, #0]
    d6fc:	f010 f8b9 	bl	1d872 <net_buf_findcrlf>
	if (!frag) {
    d700:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d702:	b10b      	cbz	r3, d708 <on_cmd_rtc_query+0x48>
	if (len != str_len) {
    d704:	2816      	cmp	r0, #22
    d706:	d002      	beq.n	d70e <on_cmd_rtc_query+0x4e>
}
    d708:	2001      	movs	r0, #1
    d70a:	b00a      	add	sp, #40	; 0x28
    d70c:	bd10      	pop	{r4, pc}
		net_buf_linearize(rtc_string, str_len, *buf, 0, str_len);
    d70e:	2116      	movs	r1, #22
    d710:	9100      	str	r1, [sp, #0]
    d712:	2300      	movs	r3, #0
    d714:	6822      	ldr	r2, [r4, #0]
    d716:	a803      	add	r0, sp, #12
    d718:	f00b fe2d 	bl	19376 <net_buf_linearize>
		ictx.local_time_valid = convert_time_string_to_struct(
    d71c:	4c05      	ldr	r4, [pc, #20]	; (d734 <on_cmd_rtc_query+0x74>)
    d71e:	aa03      	add	r2, sp, #12
    d720:	4621      	mov	r1, r4
    d722:	f1a4 0024 	sub.w	r0, r4, #36	; 0x24
    d726:	f010 fbf1 	bl	1df0c <convert_time_string_to_struct>
    d72a:	7120      	strb	r0, [r4, #4]
    d72c:	e7ec      	b.n	d708 <on_cmd_rtc_query+0x48>
    d72e:	bf00      	nop
    d730:	20000e70 	.word	0x20000e70
    d734:	20001b0c 	.word	0x20001b0c

0000d738 <mdm_hl7800_register_event_callback>:
{
    d738:	b510      	push	{r4, lr}
    d73a:	4604      	mov	r4, r0
	return z_impl_k_mutex_lock(mutex, timeout);
    d73c:	f04f 32ff 	mov.w	r2, #4294967295
    d740:	f04f 33ff 	mov.w	r3, #4294967295
    d744:	4809      	ldr	r0, [pc, #36]	; (d76c <mdm_hl7800_register_event_callback+0x34>)
    d746:	f003 fc63 	bl	11010 <z_impl_k_mutex_lock>
	parent->next = child;
    d74a:	2300      	movs	r3, #0
    d74c:	6023      	str	r3, [r4, #0]
	return list->tail;
    d74e:	4b08      	ldr	r3, [pc, #32]	; (d770 <mdm_hl7800_register_event_callback+0x38>)
    d750:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
    d752:	b133      	cbz	r3, d762 <mdm_hl7800_register_event_callback+0x2a>
	parent->next = child;
    d754:	601c      	str	r4, [r3, #0]
	list->tail = node;
    d756:	4b06      	ldr	r3, [pc, #24]	; (d770 <mdm_hl7800_register_event_callback+0x38>)
    d758:	605c      	str	r4, [r3, #4]
	return z_impl_k_mutex_unlock(mutex);
    d75a:	4804      	ldr	r0, [pc, #16]	; (d76c <mdm_hl7800_register_event_callback+0x34>)
    d75c:	f003 fcdc 	bl	11118 <z_impl_k_mutex_unlock>
}
    d760:	bd10      	pop	{r4, pc}
    d762:	4b03      	ldr	r3, [pc, #12]	; (d770 <mdm_hl7800_register_event_callback+0x38>)
    d764:	605c      	str	r4, [r3, #4]
	list->head = node;
    d766:	601c      	str	r4, [r3, #0]
}
    d768:	e7f7      	b.n	d75a <mdm_hl7800_register_event_callback+0x22>
    d76a:	bf00      	nop
    d76c:	20000488 	.word	0x20000488
    d770:	20002c24 	.word	0x20002c24

0000d774 <event_txdrdy_check>:
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type const * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d774:	4b06      	ldr	r3, [pc, #24]	; (d790 <event_txdrdy_check+0x1c>)
    d776:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c

static bool event_txdrdy_check(void)
{
	return (nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_TXDRDY)
#ifdef CONFIG_UART_0_INTERRUPT_DRIVEN
		|| uart_sw_event_txdrdy
    d77a:	b923      	cbnz	r3, d786 <event_txdrdy_check+0x12>
    d77c:	4b05      	ldr	r3, [pc, #20]	; (d794 <event_txdrdy_check+0x20>)
    d77e:	781b      	ldrb	r3, [r3, #0]
    d780:	b11b      	cbz	r3, d78a <event_txdrdy_check+0x16>
    d782:	2001      	movs	r0, #1
    d784:	4770      	bx	lr
    d786:	2001      	movs	r0, #1
    d788:	4770      	bx	lr
    d78a:	2000      	movs	r0, #0
#endif
	       );
}
    d78c:	4770      	bx	lr
    d78e:	bf00      	nop
    d790:	40002000 	.word	0x40002000
    d794:	200042ad 	.word	0x200042ad

0000d798 <event_txdrdy_clear>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d798:	4a04      	ldr	r2, [pc, #16]	; (d7ac <event_txdrdy_clear+0x14>)
    d79a:	2300      	movs	r3, #0
    d79c:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
    d7a0:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c

static void event_txdrdy_clear(void)
{
	nrf_uart_event_clear(uart0_addr, NRF_UART_EVENT_TXDRDY);
#ifdef CONFIG_UART_0_INTERRUPT_DRIVEN
	uart_sw_event_txdrdy = 0U;
    d7a4:	4a02      	ldr	r2, [pc, #8]	; (d7b0 <event_txdrdy_clear+0x18>)
    d7a6:	7013      	strb	r3, [r2, #0]
#endif
}
    d7a8:	4770      	bx	lr
    d7aa:	bf00      	nop
    d7ac:	40002000 	.word	0x40002000
    d7b0:	200042ad 	.word	0x200042ad

0000d7b4 <baudrate_set>:

static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uart_baudrate_t nrf_baudrate; /* calculated baudrate divisor */

	switch (baudrate) {
    d7b4:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    d7b8:	d06d      	beq.n	d896 <baudrate_set+0xe2>
    d7ba:	d83b      	bhi.n	d834 <baudrate_set+0x80>
    d7bc:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    d7c0:	d06b      	beq.n	d89a <baudrate_set+0xe6>
    d7c2:	d90a      	bls.n	d7da <baudrate_set+0x26>
    d7c4:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    d7c8:	d072      	beq.n	d8b0 <baudrate_set+0xfc>
    d7ca:	d925      	bls.n	d818 <baudrate_set+0x64>
    d7cc:	f647 2312 	movw	r3, #31250	; 0x7a12
    d7d0:	4299      	cmp	r1, r3
    d7d2:	d12c      	bne.n	d82e <baudrate_set+0x7a>
		break;
	case 28800:
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
    d7d4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    d7d8:	e013      	b.n	d802 <baudrate_set+0x4e>
	switch (baudrate) {
    d7da:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    d7de:	d05e      	beq.n	d89e <baudrate_set+0xea>
    d7e0:	d907      	bls.n	d7f2 <baudrate_set+0x3e>
    d7e2:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    d7e6:	d060      	beq.n	d8aa <baudrate_set+0xf6>
    d7e8:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    d7ec:	d111      	bne.n	d812 <baudrate_set+0x5e>
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
    d7ee:	4b3a      	ldr	r3, [pc, #232]	; (d8d8 <baudrate_set+0x124>)
    d7f0:	e007      	b.n	d802 <baudrate_set+0x4e>
	switch (baudrate) {
    d7f2:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    d7f6:	d055      	beq.n	d8a4 <baudrate_set+0xf0>
    d7f8:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    d7fc:	d106      	bne.n	d80c <baudrate_set+0x58>
		nrf_baudrate = 0x00027000;
    d7fe:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    d802:	4a36      	ldr	r2, [pc, #216]	; (d8dc <baudrate_set+0x128>)
    d804:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uart_baudrate_set(uart0_addr, nrf_baudrate);

	return 0;
    d808:	2000      	movs	r0, #0
    d80a:	4770      	bx	lr
	switch (baudrate) {
    d80c:	f06f 0015 	mvn.w	r0, #21
    d810:	4770      	bx	lr
    d812:	f06f 0015 	mvn.w	r0, #21
    d816:	4770      	bx	lr
    d818:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    d81c:	d04a      	beq.n	d8b4 <baudrate_set+0x100>
    d81e:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    d822:	d101      	bne.n	d828 <baudrate_set+0x74>
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
    d824:	4b2e      	ldr	r3, [pc, #184]	; (d8e0 <baudrate_set+0x12c>)
    d826:	e7ec      	b.n	d802 <baudrate_set+0x4e>
	switch (baudrate) {
    d828:	f06f 0015 	mvn.w	r0, #21
    d82c:	4770      	bx	lr
    d82e:	f06f 0015 	mvn.w	r0, #21
    d832:	4770      	bx	lr
    d834:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    d838:	d03f      	beq.n	d8ba <baudrate_set+0x106>
    d83a:	d909      	bls.n	d850 <baudrate_set+0x9c>
    d83c:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    d840:	d042      	beq.n	d8c8 <baudrate_set+0x114>
    d842:	d91d      	bls.n	d880 <baudrate_set+0xcc>
    d844:	4b27      	ldr	r3, [pc, #156]	; (d8e4 <baudrate_set+0x130>)
    d846:	4299      	cmp	r1, r3
    d848:	d143      	bne.n	d8d2 <baudrate_set+0x11e>
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
    d84a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    d84e:	e7d8      	b.n	d802 <baudrate_set+0x4e>
	switch (baudrate) {
    d850:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    d854:	d033      	beq.n	d8be <baudrate_set+0x10a>
    d856:	d904      	bls.n	d862 <baudrate_set+0xae>
    d858:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    d85c:	d10d      	bne.n	d87a <baudrate_set+0xc6>
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
    d85e:	4b22      	ldr	r3, [pc, #136]	; (d8e8 <baudrate_set+0x134>)
    d860:	e7cf      	b.n	d802 <baudrate_set+0x4e>
	switch (baudrate) {
    d862:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    d866:	4299      	cmp	r1, r3
    d868:	d02b      	beq.n	d8c2 <baudrate_set+0x10e>
    d86a:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    d86e:	d101      	bne.n	d874 <baudrate_set+0xc0>
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
    d870:	4b1e      	ldr	r3, [pc, #120]	; (d8ec <baudrate_set+0x138>)
    d872:	e7c6      	b.n	d802 <baudrate_set+0x4e>
	switch (baudrate) {
    d874:	f06f 0015 	mvn.w	r0, #21
    d878:	4770      	bx	lr
    d87a:	f06f 0015 	mvn.w	r0, #21
    d87e:	4770      	bx	lr
    d880:	4b1b      	ldr	r3, [pc, #108]	; (d8f0 <baudrate_set+0x13c>)
    d882:	4299      	cmp	r1, r3
    d884:	d022      	beq.n	d8cc <baudrate_set+0x118>
    d886:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    d88a:	d101      	bne.n	d890 <baudrate_set+0xdc>
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
    d88c:	4b19      	ldr	r3, [pc, #100]	; (d8f4 <baudrate_set+0x140>)
    d88e:	e7b8      	b.n	d802 <baudrate_set+0x4e>
	switch (baudrate) {
    d890:	f06f 0015 	mvn.w	r0, #21
    d894:	4770      	bx	lr
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
    d896:	4b18      	ldr	r3, [pc, #96]	; (d8f8 <baudrate_set+0x144>)
    d898:	e7b3      	b.n	d802 <baudrate_set+0x4e>
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
    d89a:	4b18      	ldr	r3, [pc, #96]	; (d8fc <baudrate_set+0x148>)
    d89c:	e7b1      	b.n	d802 <baudrate_set+0x4e>
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
    d89e:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    d8a2:	e7ae      	b.n	d802 <baudrate_set+0x4e>
	switch (baudrate) {
    d8a4:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    d8a8:	e7ab      	b.n	d802 <baudrate_set+0x4e>
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
    d8aa:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    d8ae:	e7a8      	b.n	d802 <baudrate_set+0x4e>
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
    d8b0:	4b13      	ldr	r3, [pc, #76]	; (d900 <baudrate_set+0x14c>)
    d8b2:	e7a6      	b.n	d802 <baudrate_set+0x4e>
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
    d8b4:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
    d8b8:	e7a3      	b.n	d802 <baudrate_set+0x4e>
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
    d8ba:	4b12      	ldr	r3, [pc, #72]	; (d904 <baudrate_set+0x150>)
    d8bc:	e7a1      	b.n	d802 <baudrate_set+0x4e>
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
    d8be:	4b12      	ldr	r3, [pc, #72]	; (d908 <baudrate_set+0x154>)
    d8c0:	e79f      	b.n	d802 <baudrate_set+0x4e>
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
    d8c2:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    d8c6:	e79c      	b.n	d802 <baudrate_set+0x4e>
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
    d8c8:	4b10      	ldr	r3, [pc, #64]	; (d90c <baudrate_set+0x158>)
    d8ca:	e79a      	b.n	d802 <baudrate_set+0x4e>
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
    d8cc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    d8d0:	e797      	b.n	d802 <baudrate_set+0x4e>
	switch (baudrate) {
    d8d2:	f06f 0015 	mvn.w	r0, #21
}
    d8d6:	4770      	bx	lr
    d8d8:	0013b000 	.word	0x0013b000
    d8dc:	40002000 	.word	0x40002000
    d8e0:	004ea000 	.word	0x004ea000
    d8e4:	000f4240 	.word	0x000f4240
    d8e8:	01d7e000 	.word	0x01d7e000
    d8ec:	00ebf000 	.word	0x00ebf000
    d8f0:	0003d090 	.word	0x0003d090
    d8f4:	075f7000 	.word	0x075f7000
    d8f8:	009d5000 	.word	0x009d5000
    d8fc:	00275000 	.word	0x00275000
    d900:	0075f000 	.word	0x0075f000
    d904:	03afb000 	.word	0x03afb000
    d908:	013a9000 	.word	0x013a9000
    d90c:	0ebed000 	.word	0x0ebed000

0000d910 <uart_nrfx_poll_in>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d910:	4b08      	ldr	r3, [pc, #32]	; (d934 <uart_nrfx_poll_in+0x24>)
    d912:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrfx_poll_in(const struct device *dev, unsigned char *c)
{
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
    d916:	b14b      	cbz	r3, d92c <uart_nrfx_poll_in+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d918:	4b06      	ldr	r3, [pc, #24]	; (d934 <uart_nrfx_poll_in+0x24>)
    d91a:	2000      	movs	r0, #0
    d91c:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
    d920:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    return p_reg->RXD;
    d924:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518

	/* Clear the interrupt */
	nrf_uart_event_clear(uart0_addr, NRF_UART_EVENT_RXDRDY);

	/* got a character */
	*c = nrf_uart_rxd_get(uart0_addr);
    d928:	700b      	strb	r3, [r1, #0]

	return 0;
    d92a:	4770      	bx	lr
		return -1;
    d92c:	f04f 30ff 	mov.w	r0, #4294967295
}
    d930:	4770      	bx	lr
    d932:	bf00      	nop
    d934:	40002000 	.word	0x40002000

0000d938 <uart_nrfx_err_check>:
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    d938:	4b02      	ldr	r3, [pc, #8]	; (d944 <uart_nrfx_err_check+0xc>)
    d93a:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    d93e:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
/** Console I/O function */
static int uart_nrfx_err_check(const struct device *dev)
{
	/* register bitfields maps to the defines in uart.h */
	return nrf_uart_errorsrc_get_and_clear(uart0_addr);
}
    d942:	4770      	bx	lr
    d944:	40002000 	.word	0x40002000

0000d948 <uart_nrfx_configure>:

static int uart_nrfx_configure(const struct device *dev,
			       const struct uart_config *cfg)
{
    d948:	b530      	push	{r4, r5, lr}
    d94a:	b083      	sub	sp, #12
    d94c:	460c      	mov	r4, r1
	struct uart_nrfx_data *data = dev->data;
    d94e:	6905      	ldr	r5, [r0, #16]
	nrf_uart_config_t uart_cfg;

#if defined(UART_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    d950:	794b      	ldrb	r3, [r1, #5]
    d952:	2b01      	cmp	r3, #1
    d954:	d006      	beq.n	d964 <uart_nrfx_configure+0x1c>
    d956:	2b03      	cmp	r3, #3
    d958:	d00f      	beq.n	d97a <uart_nrfx_configure+0x32>
    d95a:	f06f 0385 	mvn.w	r3, #133	; 0x85
	nrf_uart_configure(uart0_addr, &uart_cfg);

	data->uart_config = *cfg;

	return 0;
}
    d95e:	4618      	mov	r0, r3
    d960:	b003      	add	sp, #12
    d962:	bd30      	pop	{r4, r5, pc}
		uart_cfg.stop = NRF_UART_STOP_ONE;
    d964:	2300      	movs	r3, #0
    d966:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    d96a:	79a3      	ldrb	r3, [r4, #6]
    d96c:	2b03      	cmp	r3, #3
    d96e:	d12a      	bne.n	d9c6 <uart_nrfx_configure+0x7e>
	switch (cfg->flow_ctrl) {
    d970:	79e3      	ldrb	r3, [r4, #7]
    d972:	b133      	cbz	r3, d982 <uart_nrfx_configure+0x3a>
		return -ENOTSUP;
    d974:	f06f 0385 	mvn.w	r3, #133	; 0x85
    d978:	e7f1      	b.n	d95e <uart_nrfx_configure+0x16>
		uart_cfg.stop = NRF_UART_STOP_TWO;
    d97a:	2310      	movs	r3, #16
    d97c:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
    d980:	e7f3      	b.n	d96a <uart_nrfx_configure+0x22>
		uart_cfg.hwfc = NRF_UART_HWFC_DISABLED;
    d982:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
    d986:	7923      	ldrb	r3, [r4, #4]
    d988:	b123      	cbz	r3, d994 <uart_nrfx_configure+0x4c>
    d98a:	2b02      	cmp	r3, #2
    d98c:	d017      	beq.n	d9be <uart_nrfx_configure+0x76>
    d98e:	f06f 0385 	mvn.w	r3, #133	; 0x85
    d992:	e7e4      	b.n	d95e <uart_nrfx_configure+0x16>
		uart_cfg.parity = NRF_UART_PARITY_EXCLUDED;
    d994:	2300      	movs	r3, #0
    d996:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    d99a:	6821      	ldr	r1, [r4, #0]
    d99c:	f7ff ff0a 	bl	d7b4 <baudrate_set>
    d9a0:	4603      	mov	r3, r0
    d9a2:	b998      	cbnz	r0, d9cc <uart_nrfx_configure+0x84>
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    d9a4:	f89d 2005 	ldrb.w	r2, [sp, #5]
                    | (uint32_t)p_cfg->stop
    d9a8:	f89d 1006 	ldrb.w	r1, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
    d9ac:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    d9ae:	4909      	ldr	r1, [pc, #36]	; (d9d4 <uart_nrfx_configure+0x8c>)
    d9b0:	f8c1 256c 	str.w	r2, [r1, #1388]	; 0x56c
	data->uart_config = *cfg;
    d9b4:	e894 0003 	ldmia.w	r4, {r0, r1}
    d9b8:	e885 0003 	stmia.w	r5, {r0, r1}
	return 0;
    d9bc:	e7cf      	b.n	d95e <uart_nrfx_configure+0x16>
		uart_cfg.parity = NRF_UART_PARITY_INCLUDED;
    d9be:	230e      	movs	r3, #14
    d9c0:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
    d9c4:	e7e9      	b.n	d99a <uart_nrfx_configure+0x52>
		return -ENOTSUP;
    d9c6:	f06f 0385 	mvn.w	r3, #133	; 0x85
    d9ca:	e7c8      	b.n	d95e <uart_nrfx_configure+0x16>
		return -ENOTSUP;
    d9cc:	f06f 0385 	mvn.w	r3, #133	; 0x85
    d9d0:	e7c5      	b.n	d95e <uart_nrfx_configure+0x16>
    d9d2:	bf00      	nop
    d9d4:	40002000 	.word	0x40002000

0000d9d8 <uart_nrfx_fifo_fill>:

/** Interrupt driven FIFO fill function */
static int uart_nrfx_fifo_fill(const struct device *dev,
			       const uint8_t *tx_data,
			       int len)
{
    d9d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d9da:	460e      	mov	r6, r1
    d9dc:	4615      	mov	r5, r2
	uint8_t num_tx = 0U;
    d9de:	2400      	movs	r4, #0

	while ((len - num_tx > 0) &&
    d9e0:	e007      	b.n	d9f2 <uart_nrfx_fifo_fill+0x1a>
	       event_txdrdy_check()) {

		/* Clear the interrupt */
		event_txdrdy_clear();
    d9e2:	f7ff fed9 	bl	d798 <event_txdrdy_clear>

		/* Send a character */
		nrf_uart_txd_set(uart0_addr, (uint8_t)tx_data[num_tx++]);
    d9e6:	1c63      	adds	r3, r4, #1
    d9e8:	5d34      	ldrb	r4, [r6, r4]
    p_reg->TXD = txd;
    d9ea:	4807      	ldr	r0, [pc, #28]	; (da08 <uart_nrfx_fifo_fill+0x30>)
    d9ec:	f8c0 451c 	str.w	r4, [r0, #1308]	; 0x51c
    d9f0:	b2dc      	uxtb	r4, r3
	while ((len - num_tx > 0) &&
    d9f2:	4627      	mov	r7, r4
    d9f4:	1b2b      	subs	r3, r5, r4
    d9f6:	2b00      	cmp	r3, #0
    d9f8:	dd03      	ble.n	da02 <uart_nrfx_fifo_fill+0x2a>
	       event_txdrdy_check()) {
    d9fa:	f7ff febb 	bl	d774 <event_txdrdy_check>
	while ((len - num_tx > 0) &&
    d9fe:	2800      	cmp	r0, #0
    da00:	d1ef      	bne.n	d9e2 <uart_nrfx_fifo_fill+0xa>
	}

	return (int)num_tx;
}
    da02:	4638      	mov	r0, r7
    da04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    da06:	bf00      	nop
    da08:	40002000 	.word	0x40002000

0000da0c <uart_nrfx_fifo_read>:
/** Interrupt driven FIFO read function */
static int uart_nrfx_fifo_read(const struct device *dev,
			       uint8_t *rx_data,
			       const int size)
{
	uint8_t num_rx = 0U;
    da0c:	2300      	movs	r3, #0

	while ((size - num_rx > 0) &&
    da0e:	4618      	mov	r0, r3
    da10:	eba2 0c03 	sub.w	ip, r2, r3
    da14:	f1bc 0f00 	cmp.w	ip, #0
    da18:	dd17      	ble.n	da4a <uart_nrfx_fifo_read+0x3e>
{
    da1a:	b410      	push	{r4}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    da1c:	4c0b      	ldr	r4, [pc, #44]	; (da4c <uart_nrfx_fifo_read+0x40>)
    da1e:	f8d4 4108 	ldr.w	r4, [r4, #264]	; 0x108
	while ((size - num_rx > 0) &&
    da22:	b184      	cbz	r4, da46 <uart_nrfx_fifo_read+0x3a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    da24:	4809      	ldr	r0, [pc, #36]	; (da4c <uart_nrfx_fifo_read+0x40>)
    da26:	2400      	movs	r4, #0
    da28:	f8c0 4108 	str.w	r4, [r0, #264]	; 0x108
    da2c:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
	       nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
		/* Clear the interrupt */
		nrf_uart_event_clear(uart0_addr, NRF_UART_EVENT_RXDRDY);

		/* Receive a character */
		rx_data[num_rx++] = (uint8_t)nrf_uart_rxd_get(uart0_addr);
    da30:	1c5c      	adds	r4, r3, #1
    return p_reg->RXD;
    da32:	f8d0 0518 	ldr.w	r0, [r0, #1304]	; 0x518
    da36:	54c8      	strb	r0, [r1, r3]
    da38:	b2e3      	uxtb	r3, r4
	while ((size - num_rx > 0) &&
    da3a:	4618      	mov	r0, r3
    da3c:	eba2 0c03 	sub.w	ip, r2, r3
    da40:	f1bc 0f00 	cmp.w	ip, #0
    da44:	dcea      	bgt.n	da1c <uart_nrfx_fifo_read+0x10>
	}

	return num_rx;
}
    da46:	bc10      	pop	{r4}
    da48:	4770      	bx	lr
    da4a:	4770      	bx	lr
    da4c:	40002000 	.word	0x40002000

0000da50 <uart_nrfx_irq_tx_enable>:
/** Interrupt driven transfer enabling function */
static void uart_nrfx_irq_tx_enable(const struct device *dev)
{
	uint32_t key;

	disable_tx_irq = false;
    da50:	4b0e      	ldr	r3, [pc, #56]	; (da8c <uart_nrfx_irq_tx_enable+0x3c>)
    da52:	2200      	movs	r2, #0
    da54:	701a      	strb	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    da56:	4b0e      	ldr	r3, [pc, #56]	; (da90 <uart_nrfx_irq_tx_enable+0x40>)
    da58:	2201      	movs	r2, #1
    da5a:	609a      	str	r2, [r3, #8]
    p_reg->INTENSET = mask;
    da5c:	2280      	movs	r2, #128	; 0x80
    da5e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	__asm__ volatile(
    da62:	f04f 0220 	mov.w	r2, #32
    da66:	f3ef 8311 	mrs	r3, BASEPRI
    da6a:	f382 8812 	msr	BASEPRI_MAX, r2
    da6e:	f3bf 8f6f 	isb	sy
	/* Critical section is used to avoid any UART related interrupt which
	 * can occur after the if statement and before call of the function
	 * forcing an interrupt.
	 */
	key = irq_lock();
	if (uart_sw_event_txdrdy) {
    da72:	4a08      	ldr	r2, [pc, #32]	; (da94 <uart_nrfx_irq_tx_enable+0x44>)
    da74:	7812      	ldrb	r2, [r2, #0]
    da76:	b11a      	cbz	r2, da80 <uart_nrfx_irq_tx_enable+0x30>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    da78:	4a07      	ldr	r2, [pc, #28]	; (da98 <uart_nrfx_irq_tx_enable+0x48>)
    da7a:	2104      	movs	r1, #4
    da7c:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
	__asm__ volatile(
    da80:	f383 8811 	msr	BASEPRI, r3
    da84:	f3bf 8f6f 	isb	sy
		 * triggered by the software.
		 */
		NVIC_SetPendingIRQ(IRQN);
	}
	irq_unlock(key);
}
    da88:	4770      	bx	lr
    da8a:	bf00      	nop
    da8c:	200042ac 	.word	0x200042ac
    da90:	40002000 	.word	0x40002000
    da94:	200042ad 	.word	0x200042ad
    da98:	e000e100 	.word	0xe000e100

0000da9c <uart_nrfx_irq_tx_disable>:

/** Interrupt driven transfer disabling function */
static void uart_nrfx_irq_tx_disable(const struct device *dev)
{
	/* Disable TX interrupt in uart_nrfx_isr() when transmission is done. */
	disable_tx_irq = true;
    da9c:	4b01      	ldr	r3, [pc, #4]	; (daa4 <uart_nrfx_irq_tx_disable+0x8>)
    da9e:	2201      	movs	r2, #1
    daa0:	701a      	strb	r2, [r3, #0]
}
    daa2:	4770      	bx	lr
    daa4:	200042ac 	.word	0x200042ac

0000daa8 <uart_nrfx_irq_rx_enable>:
    daa8:	4b02      	ldr	r3, [pc, #8]	; (dab4 <uart_nrfx_irq_rx_enable+0xc>)
    daaa:	2204      	movs	r2, #4
    daac:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

/** Interrupt driven receiver enabling function */
static void uart_nrfx_irq_rx_enable(const struct device *dev)
{
	nrf_uart_int_enable(uart0_addr, NRF_UART_INT_MASK_RXDRDY);
}
    dab0:	4770      	bx	lr
    dab2:	bf00      	nop
    dab4:	40002000 	.word	0x40002000

0000dab8 <uart_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
    dab8:	4b02      	ldr	r3, [pc, #8]	; (dac4 <uart_nrfx_irq_rx_disable+0xc>)
    daba:	2204      	movs	r2, #4
    dabc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

/** Interrupt driven receiver disabling function */
static void uart_nrfx_irq_rx_disable(const struct device *dev)
{
	nrf_uart_int_disable(uart0_addr, NRF_UART_INT_MASK_RXDRDY);
}
    dac0:	4770      	bx	lr
    dac2:	bf00      	nop
    dac4:	40002000 	.word	0x40002000

0000dac8 <uart_nrfx_irq_tx_ready_complete>:

/** Interrupt driven transfer empty function */
static int uart_nrfx_irq_tx_ready_complete(const struct device *dev)
{
    dac8:	b508      	push	{r3, lr}
    return p_reg->INTENSET & mask;
    daca:	4b0a      	ldr	r3, [pc, #40]	; (daf4 <uart_nrfx_irq_tx_ready_complete+0x2c>)
    dacc:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	 * called after the TX interrupt is requested to be disabled but before
	 * the disabling is actually performed (in the IRQ handler).
	 */
	return nrf_uart_int_enable_check(uart0_addr,
					 NRF_UART_INT_MASK_TXDRDY) &&
	       !disable_tx_irq &&
    dad0:	f013 0f80 	tst.w	r3, #128	; 0x80
    dad4:	d009      	beq.n	daea <uart_nrfx_irq_tx_ready_complete+0x22>
    dad6:	4b08      	ldr	r3, [pc, #32]	; (daf8 <uart_nrfx_irq_tx_ready_complete+0x30>)
    dad8:	781b      	ldrb	r3, [r3, #0]
					 NRF_UART_INT_MASK_TXDRDY) &&
    dada:	b10b      	cbz	r3, dae0 <uart_nrfx_irq_tx_ready_complete+0x18>
	       !disable_tx_irq &&
    dadc:	2000      	movs	r0, #0
    dade:	e005      	b.n	daec <uart_nrfx_irq_tx_ready_complete+0x24>
	       event_txdrdy_check();
    dae0:	f7ff fe48 	bl	d774 <event_txdrdy_check>
	       !disable_tx_irq &&
    dae4:	b118      	cbz	r0, daee <uart_nrfx_irq_tx_ready_complete+0x26>
    dae6:	2001      	movs	r0, #1
    dae8:	e000      	b.n	daec <uart_nrfx_irq_tx_ready_complete+0x24>
    daea:	2000      	movs	r0, #0
}
    daec:	bd08      	pop	{r3, pc}
	       !disable_tx_irq &&
    daee:	2000      	movs	r0, #0
    daf0:	e7fc      	b.n	daec <uart_nrfx_irq_tx_ready_complete+0x24>
    daf2:	bf00      	nop
    daf4:	40002000 	.word	0x40002000
    daf8:	200042ac 	.word	0x200042ac

0000dafc <uart_nrfx_irq_rx_ready>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    dafc:	4b03      	ldr	r3, [pc, #12]	; (db0c <uart_nrfx_irq_rx_ready+0x10>)
    dafe:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108

/** Interrupt driven receiver ready function */
static int uart_nrfx_irq_rx_ready(const struct device *dev)
{
	return nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY);
}
    db02:	3800      	subs	r0, #0
    db04:	bf18      	it	ne
    db06:	2001      	movne	r0, #1
    db08:	4770      	bx	lr
    db0a:	bf00      	nop
    db0c:	40002000 	.word	0x40002000

0000db10 <uart_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
    db10:	4b02      	ldr	r3, [pc, #8]	; (db1c <uart_nrfx_irq_err_enable+0xc>)
    db12:	f44f 7200 	mov.w	r2, #512	; 0x200
    db16:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

/** Interrupt driven error enabling function */
static void uart_nrfx_irq_err_enable(const struct device *dev)
{
	nrf_uart_int_enable(uart0_addr, NRF_UART_INT_MASK_ERROR);
}
    db1a:	4770      	bx	lr
    db1c:	40002000 	.word	0x40002000

0000db20 <uart_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
    db20:	4b02      	ldr	r3, [pc, #8]	; (db2c <uart_nrfx_irq_err_disable+0xc>)
    db22:	f44f 7200 	mov.w	r2, #512	; 0x200
    db26:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

/** Interrupt driven error disabling function */
static void uart_nrfx_irq_err_disable(const struct device *dev)
{
	nrf_uart_int_disable(uart0_addr, NRF_UART_INT_MASK_ERROR);
}
    db2a:	4770      	bx	lr
    db2c:	40002000 	.word	0x40002000

0000db30 <uart_nrfx_irq_is_pending>:

/** Interrupt driven pending status function */
static int uart_nrfx_irq_is_pending(const struct device *dev)
{
    db30:	b510      	push	{r4, lr}
    db32:	4604      	mov	r4, r0
    return p_reg->INTENSET & mask;
    db34:	4b0d      	ldr	r3, [pc, #52]	; (db6c <uart_nrfx_irq_is_pending+0x3c>)
    db36:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	return ((nrf_uart_int_enable_check(uart0_addr,
					   NRF_UART_INT_MASK_TXDRDY) &&
		 uart_nrfx_irq_tx_ready_complete(dev))
		||
    db3a:	f013 0f80 	tst.w	r3, #128	; 0x80
    db3e:	d107      	bne.n	db50 <uart_nrfx_irq_is_pending+0x20>
    db40:	4b0a      	ldr	r3, [pc, #40]	; (db6c <uart_nrfx_irq_is_pending+0x3c>)
    db42:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
    db46:	f013 0f04 	tst.w	r3, #4
    db4a:	d107      	bne.n	db5c <uart_nrfx_irq_is_pending+0x2c>
    db4c:	2000      	movs	r0, #0
		(nrf_uart_int_enable_check(uart0_addr,
					   NRF_UART_INT_MASK_RXDRDY) &&
		 uart_nrfx_irq_rx_ready(dev)));
}
    db4e:	bd10      	pop	{r4, pc}
		 uart_nrfx_irq_tx_ready_complete(dev))
    db50:	f7ff ffba 	bl	dac8 <uart_nrfx_irq_tx_ready_complete>
					   NRF_UART_INT_MASK_TXDRDY) &&
    db54:	2800      	cmp	r0, #0
    db56:	d0f3      	beq.n	db40 <uart_nrfx_irq_is_pending+0x10>
		||
    db58:	2001      	movs	r0, #1
    db5a:	e7f8      	b.n	db4e <uart_nrfx_irq_is_pending+0x1e>
		 uart_nrfx_irq_rx_ready(dev)));
    db5c:	4620      	mov	r0, r4
    db5e:	f7ff ffcd 	bl	dafc <uart_nrfx_irq_rx_ready>
					   NRF_UART_INT_MASK_RXDRDY) &&
    db62:	2800      	cmp	r0, #0
    db64:	d0f3      	beq.n	db4e <uart_nrfx_irq_is_pending+0x1e>
		||
    db66:	2001      	movs	r0, #1
    db68:	e7f1      	b.n	db4e <uart_nrfx_irq_is_pending+0x1e>
    db6a:	bf00      	nop
    db6c:	40002000 	.word	0x40002000

0000db70 <uart_nrfx_irq_callback_set>:
static void uart_nrfx_irq_callback_set(const struct device *dev,
				       uart_irq_callback_user_data_t cb,
				       void *cb_data)
{
	(void)dev;
	irq_callback = cb;
    db70:	4b02      	ldr	r3, [pc, #8]	; (db7c <uart_nrfx_irq_callback_set+0xc>)
    db72:	6019      	str	r1, [r3, #0]
	irq_cb_data = cb_data;
    db74:	4b02      	ldr	r3, [pc, #8]	; (db80 <uart_nrfx_irq_callback_set+0x10>)
    db76:	601a      	str	r2, [r3, #0]
}
    db78:	4770      	bx	lr
    db7a:	bf00      	nop
    db7c:	20003210 	.word	0x20003210
    db80:	2000320c 	.word	0x2000320c

0000db84 <uart_nrfx_isr>:
 * This simply calls the callback function, if one exists.
 *
 * @param arg Argument to ISR.
 */
static void uart_nrfx_isr(const struct device *dev)
{
    db84:	b508      	push	{r3, lr}
	if (disable_tx_irq &&
    db86:	4b11      	ldr	r3, [pc, #68]	; (dbcc <uart_nrfx_isr+0x48>)
    db88:	781b      	ldrb	r3, [r3, #0]
    db8a:	b11b      	cbz	r3, db94 <uart_nrfx_isr+0x10>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    db8c:	4b10      	ldr	r3, [pc, #64]	; (dbd0 <uart_nrfx_isr+0x4c>)
    db8e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    db92:	b983      	cbnz	r3, dbb6 <uart_nrfx_isr+0x32>
    db94:	4b0e      	ldr	r3, [pc, #56]	; (dbd0 <uart_nrfx_isr+0x4c>)
    db96:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
		disable_tx_irq = false;

		return;
	}

	if (nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_ERROR)) {
    db9a:	b12b      	cbz	r3, dba8 <uart_nrfx_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    db9c:	4b0c      	ldr	r3, [pc, #48]	; (dbd0 <uart_nrfx_isr+0x4c>)
    db9e:	2200      	movs	r2, #0
    dba0:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    dba4:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
		nrf_uart_event_clear(uart0_addr, NRF_UART_EVENT_ERROR);
	}

	if (irq_callback) {
    dba8:	4b0a      	ldr	r3, [pc, #40]	; (dbd4 <uart_nrfx_isr+0x50>)
    dbaa:	681b      	ldr	r3, [r3, #0]
    dbac:	b113      	cbz	r3, dbb4 <uart_nrfx_isr+0x30>
		irq_callback(dev, irq_cb_data);
    dbae:	4a0a      	ldr	r2, [pc, #40]	; (dbd8 <uart_nrfx_isr+0x54>)
    dbb0:	6811      	ldr	r1, [r2, #0]
    dbb2:	4798      	blx	r3
	}
}
    dbb4:	bd08      	pop	{r3, pc}
    p_reg->INTENCLR = mask;
    dbb6:	4b06      	ldr	r3, [pc, #24]	; (dbd0 <uart_nrfx_isr+0x4c>)
    dbb8:	2280      	movs	r2, #128	; 0x80
    dbba:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    dbbe:	2201      	movs	r2, #1
    dbc0:	60da      	str	r2, [r3, #12]
		disable_tx_irq = false;
    dbc2:	4b02      	ldr	r3, [pc, #8]	; (dbcc <uart_nrfx_isr+0x48>)
    dbc4:	2200      	movs	r2, #0
    dbc6:	701a      	strb	r2, [r3, #0]
		return;
    dbc8:	e7f4      	b.n	dbb4 <uart_nrfx_isr+0x30>
    dbca:	bf00      	nop
    dbcc:	200042ac 	.word	0x200042ac
    dbd0:	40002000 	.word	0x40002000
    dbd4:	20003210 	.word	0x20003210
    dbd8:	2000320c 	.word	0x2000320c

0000dbdc <uart_nrfx_poll_out>:
{
    dbdc:	b538      	push	{r3, r4, r5, lr}
    dbde:	460c      	mov	r4, r1
	if (!k_is_in_isr()) {
    dbe0:	f011 f9cd 	bl	1ef7e <k_is_in_isr>
    dbe4:	b9b8      	cbnz	r0, dc16 <uart_nrfx_poll_out+0x3a>
		uint8_t safety_cnt = 100;
    dbe6:	2564      	movs	r5, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    dbe8:	4b18      	ldr	r3, [pc, #96]	; (dc4c <uart_nrfx_poll_out+0x70>)
    dbea:	2201      	movs	r2, #1
    dbec:	f3bf 8f5b 	dmb	ish
    dbf0:	e853 1f00 	ldrex	r1, [r3]
    dbf4:	2900      	cmp	r1, #0
    dbf6:	d103      	bne.n	dc00 <uart_nrfx_poll_out+0x24>
    dbf8:	e843 2000 	strex	r0, r2, [r3]
    dbfc:	2800      	cmp	r0, #0
    dbfe:	d1f7      	bne.n	dbf0 <uart_nrfx_poll_out+0x14>
    dc00:	f3bf 8f5b 	dmb	ish
				  (atomic_val_t) 1) == false) {
    dc04:	d00a      	beq.n	dc1c <uart_nrfx_poll_out+0x40>
				k_msleep(1);
    dc06:	2001      	movs	r0, #1
    dc08:	f010 f9ed 	bl	1dfe6 <k_msleep>
			if (--safety_cnt == 0) {
    dc0c:	3d01      	subs	r5, #1
    dc0e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    dc12:	d1e9      	bne.n	dbe8 <uart_nrfx_poll_out+0xc>
    dc14:	e002      	b.n	dc1c <uart_nrfx_poll_out+0x40>
		*lock = 1;
    dc16:	4b0d      	ldr	r3, [pc, #52]	; (dc4c <uart_nrfx_poll_out+0x70>)
    dc18:	2201      	movs	r2, #1
    dc1a:	601a      	str	r2, [r3, #0]
	event_txdrdy_clear();
    dc1c:	f7ff fdbc 	bl	d798 <event_txdrdy_clear>
    dc20:	4b0b      	ldr	r3, [pc, #44]	; (dc50 <uart_nrfx_poll_out+0x74>)
    dc22:	2201      	movs	r2, #1
    dc24:	609a      	str	r2, [r3, #8]
    p_reg->TXD = txd;
    dc26:	f8c3 451c 	str.w	r4, [r3, #1308]	; 0x51c
	NRFX_WAIT_FOR(event_txdrdy_check(), 1000, 1, res);
    dc2a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    dc2e:	f7ff fda1 	bl	d774 <event_txdrdy_check>
    dc32:	b920      	cbnz	r0, dc3e <uart_nrfx_poll_out+0x62>
    dc34:	2001      	movs	r0, #1
    dc36:	f010 ff83 	bl	1eb40 <nrfx_busy_wait>
    dc3a:	3c01      	subs	r4, #1
    dc3c:	d1f7      	bne.n	dc2e <uart_nrfx_poll_out+0x52>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    dc3e:	4b04      	ldr	r3, [pc, #16]	; (dc50 <uart_nrfx_poll_out+0x74>)
    dc40:	2201      	movs	r2, #1
    dc42:	60da      	str	r2, [r3, #12]
	*lock = 0;
    dc44:	4b01      	ldr	r3, [pc, #4]	; (dc4c <uart_nrfx_poll_out+0x70>)
    dc46:	2200      	movs	r2, #0
    dc48:	601a      	str	r2, [r3, #0]
}
    dc4a:	bd38      	pop	{r3, r4, r5, pc}
    dc4c:	20003208 	.word	0x20003208
    dc50:	40002000 	.word	0x40002000

0000dc54 <uart_nrfx_init>:
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(const struct device *dev)
{
    dc54:	b570      	push	{r4, r5, r6, lr}
    dc56:	4604      	mov	r4, r0
	struct uart_nrfx_data *data = dev->data;
    dc58:	6906      	ldr	r6, [r0, #16]
	int err;
#ifdef CONFIG_PINCTRL
	const struct uart_nrfx_config *config = dev->config;
    dc5a:	6843      	ldr	r3, [r0, #4]
    p_reg->ENABLE = UART_ENABLE_ENABLE_Disabled;
    dc5c:	2100      	movs	r1, #0
    dc5e:	4a12      	ldr	r2, [pc, #72]	; (dca8 <uart_nrfx_init+0x54>)
    dc60:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
#endif /* CONFIG_PINCTRL */

	nrf_uart_disable(uart0_addr);

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(config->pcfg, PINCTRL_STATE_DEFAULT);
    dc64:	6818      	ldr	r0, [r3, #0]
    dc66:	f010 f9d4 	bl	1e012 <pinctrl_apply_state>
	if (err < 0) {
    dc6a:	1e05      	subs	r5, r0, #0
    dc6c:	db05      	blt.n	dc7a <uart_nrfx_init+0x26>
#else
	uart_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	/* Set initial configuration */
	err = uart_nrfx_configure(dev, &data->uart_config);
    dc6e:	4631      	mov	r1, r6
    dc70:	4620      	mov	r0, r4
    dc72:	f7ff fe69 	bl	d948 <uart_nrfx_configure>
	if (err) {
    dc76:	4605      	mov	r5, r0
    dc78:	b108      	cbz	r0, dc7e <uart_nrfx_init+0x2a>
#if HW_FLOW_CONTROL_AVAILABLE
	k_timer_init(&uart0_cb.tx_timeout_timer, tx_timeout, NULL);
#endif
#endif
	return 0;
}
    dc7a:	4628      	mov	r0, r5
    dc7c:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
    dc7e:	4b0a      	ldr	r3, [pc, #40]	; (dca8 <uart_nrfx_init+0x54>)
    dc80:	2204      	movs	r2, #4
    dc82:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    dc86:	2200      	movs	r2, #0
    dc88:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    dc8c:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    dc90:	2101      	movs	r1, #1
    dc92:	6019      	str	r1, [r3, #0]
	uart_sw_event_txdrdy = 1U;
    dc94:	4b05      	ldr	r3, [pc, #20]	; (dcac <uart_nrfx_init+0x58>)
    dc96:	7019      	strb	r1, [r3, #0]
	IRQ_CONNECT(IRQN,
    dc98:	2002      	movs	r0, #2
    dc9a:	f00b f96d 	bl	18f78 <z_arm_irq_priority_set>
	irq_enable(IRQN);
    dc9e:	2002      	movs	r0, #2
    dca0:	f00b f960 	bl	18f64 <arch_irq_enable>
	return 0;
    dca4:	e7e9      	b.n	dc7a <uart_nrfx_init+0x26>
    dca6:	bf00      	nop
    dca8:	40002000 	.word	0x40002000
    dcac:	200042ad 	.word	0x200042ad

0000dcb0 <baudrate_set>:
#endif
};

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = dev->config;
    dcb0:	6843      	ldr	r3, [r0, #4]

	return config->uarte_regs;
    dcb2:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    dcb4:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    dcb8:	d06f      	beq.n	dd9a <baudrate_set+0xea>
    dcba:	d83a      	bhi.n	dd32 <baudrate_set+0x82>
    dcbc:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    dcc0:	d06e      	beq.n	dda0 <baudrate_set+0xf0>
    dcc2:	d90a      	bls.n	dcda <baudrate_set+0x2a>
    dcc4:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    dcc8:	d075      	beq.n	ddb6 <baudrate_set+0x106>
    dcca:	d924      	bls.n	dd16 <baudrate_set+0x66>
    dccc:	f647 2312 	movw	r3, #31250	; 0x7a12
    dcd0:	4299      	cmp	r1, r3
    dcd2:	d12b      	bne.n	dd2c <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    dcd4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    dcd8:	e013      	b.n	dd02 <baudrate_set+0x52>
	switch (baudrate) {
    dcda:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    dcde:	d061      	beq.n	dda4 <baudrate_set+0xf4>
    dce0:	d907      	bls.n	dcf2 <baudrate_set+0x42>
    dce2:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    dce6:	d063      	beq.n	ddb0 <baudrate_set+0x100>
    dce8:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    dcec:	d110      	bne.n	dd10 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    dcee:	4b3c      	ldr	r3, [pc, #240]	; (dde0 <baudrate_set+0x130>)
    dcf0:	e007      	b.n	dd02 <baudrate_set+0x52>
	switch (baudrate) {
    dcf2:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    dcf6:	d058      	beq.n	ddaa <baudrate_set+0xfa>
    dcf8:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    dcfc:	d105      	bne.n	dd0a <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    dcfe:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    dd02:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    dd06:	2000      	movs	r0, #0
    dd08:	4770      	bx	lr
	switch (baudrate) {
    dd0a:	f06f 0015 	mvn.w	r0, #21
    dd0e:	4770      	bx	lr
    dd10:	f06f 0015 	mvn.w	r0, #21
    dd14:	4770      	bx	lr
    dd16:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    dd1a:	d04e      	beq.n	ddba <baudrate_set+0x10a>
    dd1c:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    dd20:	d101      	bne.n	dd26 <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    dd22:	4b30      	ldr	r3, [pc, #192]	; (dde4 <baudrate_set+0x134>)
    dd24:	e7ed      	b.n	dd02 <baudrate_set+0x52>
	switch (baudrate) {
    dd26:	f06f 0015 	mvn.w	r0, #21
    dd2a:	4770      	bx	lr
    dd2c:	f06f 0015 	mvn.w	r0, #21
    dd30:	4770      	bx	lr
    dd32:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    dd36:	d042      	beq.n	ddbe <baudrate_set+0x10e>
    dd38:	d909      	bls.n	dd4e <baudrate_set+0x9e>
    dd3a:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    dd3e:	d046      	beq.n	ddce <baudrate_set+0x11e>
    dd40:	d91f      	bls.n	dd82 <baudrate_set+0xd2>
    dd42:	4b29      	ldr	r3, [pc, #164]	; (dde8 <baudrate_set+0x138>)
    dd44:	4299      	cmp	r1, r3
    dd46:	d148      	bne.n	ddda <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    dd48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    dd4c:	e7d9      	b.n	dd02 <baudrate_set+0x52>
	switch (baudrate) {
    dd4e:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    dd52:	d037      	beq.n	ddc4 <baudrate_set+0x114>
    dd54:	d905      	bls.n	dd62 <baudrate_set+0xb2>
    dd56:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    dd5a:	d10f      	bne.n	dd7c <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    dd5c:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    dd60:	e7cf      	b.n	dd02 <baudrate_set+0x52>
	switch (baudrate) {
    dd62:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    dd66:	4299      	cmp	r1, r3
    dd68:	d02e      	beq.n	ddc8 <baudrate_set+0x118>
    dd6a:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    dd6e:	d102      	bne.n	dd76 <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    dd70:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    dd74:	e7c5      	b.n	dd02 <baudrate_set+0x52>
	switch (baudrate) {
    dd76:	f06f 0015 	mvn.w	r0, #21
    dd7a:	4770      	bx	lr
    dd7c:	f06f 0015 	mvn.w	r0, #21
    dd80:	4770      	bx	lr
    dd82:	4b1a      	ldr	r3, [pc, #104]	; (ddec <baudrate_set+0x13c>)
    dd84:	4299      	cmp	r1, r3
    dd86:	d025      	beq.n	ddd4 <baudrate_set+0x124>
    dd88:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    dd8c:	d102      	bne.n	dd94 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    dd8e:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    dd92:	e7b6      	b.n	dd02 <baudrate_set+0x52>
	switch (baudrate) {
    dd94:	f06f 0015 	mvn.w	r0, #21
    dd98:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    dd9a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    dd9e:	e7b0      	b.n	dd02 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    dda0:	4b13      	ldr	r3, [pc, #76]	; (ddf0 <baudrate_set+0x140>)
    dda2:	e7ae      	b.n	dd02 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    dda4:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    dda8:	e7ab      	b.n	dd02 <baudrate_set+0x52>
	switch (baudrate) {
    ddaa:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    ddae:	e7a8      	b.n	dd02 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    ddb0:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    ddb4:	e7a5      	b.n	dd02 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    ddb6:	4b0f      	ldr	r3, [pc, #60]	; (ddf4 <baudrate_set+0x144>)
    ddb8:	e7a3      	b.n	dd02 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    ddba:	4b0f      	ldr	r3, [pc, #60]	; (ddf8 <baudrate_set+0x148>)
    ddbc:	e7a1      	b.n	dd02 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    ddbe:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    ddc2:	e79e      	b.n	dd02 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    ddc4:	4b0d      	ldr	r3, [pc, #52]	; (ddfc <baudrate_set+0x14c>)
    ddc6:	e79c      	b.n	dd02 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    ddc8:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    ddcc:	e799      	b.n	dd02 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    ddce:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    ddd2:	e796      	b.n	dd02 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    ddd4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    ddd8:	e793      	b.n	dd02 <baudrate_set+0x52>
	switch (baudrate) {
    ddda:	f06f 0015 	mvn.w	r0, #21
}
    ddde:	4770      	bx	lr
    dde0:	0013b000 	.word	0x0013b000
    dde4:	004ea000 	.word	0x004ea000
    dde8:	000f4240 	.word	0x000f4240
    ddec:	0003d090 	.word	0x0003d090
    ddf0:	00275000 	.word	0x00275000
    ddf4:	0075c000 	.word	0x0075c000
    ddf8:	003af000 	.word	0x003af000
    ddfc:	013a9000 	.word	0x013a9000

0000de00 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    de00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    de02:	4605      	mov	r5, r0
    de04:	460e      	mov	r6, r1
	struct uarte_nrfx_data *data = dev->data;
    de06:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    de08:	f011 f8b9 	bl	1ef7e <k_is_in_isr>
    de0c:	b910      	cbnz	r0, de14 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    de0e:	4b12      	ldr	r3, [pc, #72]	; (de58 <uarte_nrfx_poll_out+0x58>)
    de10:	781b      	ldrb	r3, [r3, #0]
    de12:	b983      	cbnz	r3, de36 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    de14:	f04f 0320 	mov.w	r3, #32
    de18:	f3ef 8411 	mrs	r4, BASEPRI
    de1c:	f383 8812 	msr	BASEPRI_MAX, r3
    de20:	f3bf 8f6f 	isb	sy
#endif

	if (isr_mode) {
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    de24:	4628      	mov	r0, r5
    de26:	f010 f9d0 	bl	1e1ca <is_tx_ready>
    de2a:	b940      	cbnz	r0, de3e <uarte_nrfx_poll_out+0x3e>
	__asm__ volatile(
    de2c:	f384 8811 	msr	BASEPRI, r4
    de30:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    de34:	e7ee      	b.n	de14 <uarte_nrfx_poll_out+0x14>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    de36:	4628      	mov	r0, r5
    de38:	f010 faf8 	bl	1e42c <wait_tx_ready>
    de3c:	4604      	mov	r4, r0
	}

	*data->char_out = c;
    de3e:	697b      	ldr	r3, [r7, #20]
    de40:	701e      	strb	r6, [r3, #0]
	tx_start(dev, data->char_out, 1);
    de42:	2201      	movs	r2, #1
    de44:	6979      	ldr	r1, [r7, #20]
    de46:	4628      	mov	r0, r5
    de48:	f010 f9d9 	bl	1e1fe <tx_start>
	__asm__ volatile(
    de4c:	f384 8811 	msr	BASEPRI, r4
    de50:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    de54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    de56:	bf00      	nop
    de58:	200042b1 	.word	0x200042b1

0000de5c <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    de5c:	b530      	push	{r4, r5, lr}
    de5e:	b089      	sub	sp, #36	; 0x24
    de60:	4604      	mov	r4, r0
    de62:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    de64:	f101 001c 	add.w	r0, r1, #28
    de68:	f002 fc34 	bl	106d4 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    de6c:	4b1e      	ldr	r3, [pc, #120]	; (dee8 <endtx_stoptx_ppi_init+0x8c>)
    de6e:	4298      	cmp	r0, r3
    de70:	d112      	bne.n	de98 <endtx_stoptx_ppi_init+0x3c>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    de72:	7f2b      	ldrb	r3, [r5, #28]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    de74:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
    de78:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    de7a:	4a1c      	ldr	r2, [pc, #112]	; (deec <endtx_stoptx_ppi_init+0x90>)
    de7c:	33a2      	adds	r3, #162	; 0xa2
    de7e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
    de82:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    de86:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    de88:	7f29      	ldrb	r1, [r5, #28]
    de8a:	2301      	movs	r3, #1
    de8c:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
    de8e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    de92:	2000      	movs	r0, #0
}
    de94:	b009      	add	sp, #36	; 0x24
    de96:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("Failed to allocate PPI Channel");
    de98:	4b15      	ldr	r3, [pc, #84]	; (def0 <endtx_stoptx_ppi_init+0x94>)
    de9a:	9307      	str	r3, [sp, #28]
    de9c:	2302      	movs	r3, #2
    de9e:	f88d 3004 	strb.w	r3, [sp, #4]
    dea2:	2300      	movs	r3, #0
    dea4:	f88d 3005 	strb.w	r3, [sp, #5]
    dea8:	f88d 3006 	strb.w	r3, [sp, #6]
    deac:	f88d 3007 	strb.w	r3, [sp, #7]
    deb0:	9a01      	ldr	r2, [sp, #4]
    deb2:	9206      	str	r2, [sp, #24]
    deb4:	4619      	mov	r1, r3
    deb6:	f363 0100 	bfi	r1, r3, #0, #1
    deba:	f363 0141 	bfi	r1, r3, #1, #1
    debe:	f363 0182 	bfi	r1, r3, #2, #1
    dec2:	f363 01c5 	bfi	r1, r3, #3, #3
    dec6:	2201      	movs	r2, #1
    dec8:	f362 1188 	bfi	r1, r2, #6, #3
    decc:	2208      	movs	r2, #8
    dece:	f362 2152 	bfi	r1, r2, #9, #10
    ded2:	f363 41de 	bfi	r1, r3, #19, #12
    ded6:	f363 71df 	bfi	r1, r3, #31, #1
    deda:	aa06      	add	r2, sp, #24
    dedc:	4805      	ldr	r0, [pc, #20]	; (def4 <endtx_stoptx_ppi_init+0x98>)
    dede:	f009 fda5 	bl	17a2c <z_impl_z_log_msg_static_create>
		return -EIO;
    dee2:	f06f 0004 	mvn.w	r0, #4
    dee6:	e7d5      	b.n	de94 <endtx_stoptx_ppi_init+0x38>
    dee8:	0bad0000 	.word	0x0bad0000
    deec:	4001f000 	.word	0x4001f000
    def0:	000221d8 	.word	0x000221d8
    def4:	00020ac0 	.word	0x00020ac0

0000def8 <random_byte_get>:
	__asm__ volatile(
    def8:	f04f 0220 	mov.w	r2, #32
    defc:	f3ef 8311 	mrs	r3, BASEPRI
    df00:	f382 8812 	msr	BASEPRI_MAX, r2
    df04:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
    df08:	4a0a      	ldr	r2, [pc, #40]	; (df34 <random_byte_get+0x3c>)
    df0a:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
    df0e:	b16a      	cbz	r2, df2c <random_byte_get+0x34>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
    df10:	4a08      	ldr	r2, [pc, #32]	; (df34 <random_byte_get+0x3c>)
    df12:	f8d2 0508 	ldr.w	r0, [r2, #1288]	; 0x508
		retval = nrf_rng_random_value_get(NRF_RNG);
    df16:	b2c0      	uxtb	r0, r0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
    df18:	2100      	movs	r1, #0
    df1a:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    df1e:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
	__asm__ volatile(
    df22:	f383 8811 	msr	BASEPRI, r3
    df26:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
    df2a:	4770      	bx	lr
	int retval = -EAGAIN;
    df2c:	f06f 000a 	mvn.w	r0, #10
    df30:	e7f7      	b.n	df22 <random_byte_get+0x2a>
    df32:	bf00      	nop
    df34:	4000d000 	.word	0x4000d000

0000df38 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
    df38:	b5f0      	push	{r4, r5, r6, r7, lr}
    df3a:	4686      	mov	lr, r0
	uint32_t last  = rngp->last;
    df3c:	7885      	ldrb	r5, [r0, #2]
	uint32_t mask  = rngp->mask;
    df3e:	78c4      	ldrb	r4, [r0, #3]
	__asm__ volatile(
    df40:	f04f 0320 	mov.w	r3, #32
    df44:	f3ef 8011 	mrs	r0, BASEPRI
    df48:	f383 8812 	msr	BASEPRI_MAX, r3
    df4c:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
    df50:	f89e 6000 	ldrb.w	r6, [lr]
    df54:	4633      	mov	r3, r6
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
    df56:	f89e 7001 	ldrb.w	r7, [lr, #1]

	available = (last - first) & mask;
    df5a:	1bad      	subs	r5, r5, r6
    df5c:	4025      	ands	r5, r4
	if (available < len) {
    df5e:	42aa      	cmp	r2, r5
    df60:	d900      	bls.n	df64 <rng_pool_get+0x2c>
		len = available;
    df62:	b2aa      	uxth	r2, r5

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
    df64:	eb06 0c02 	add.w	ip, r6, r2
    df68:	ea0c 0c04 	and.w	ip, ip, r4
    df6c:	f88e c000 	strb.w	ip, [lr]
	__asm__ volatile(
    df70:	f380 8811 	msr	BASEPRI, r0
    df74:	f3bf 8f6f 	isb	sy
	uint8_t *dst   = buf;
    df78:	4608      	mov	r0, r1
}
    df7a:	e007      	b.n	df8c <rng_pool_get+0x54>
	irq_unlock(key);

	while (likely(len--)) {
		*dst++ = rngp->buffer[first];
    df7c:	eb0e 0203 	add.w	r2, lr, r3
    df80:	7952      	ldrb	r2, [r2, #5]
    df82:	f800 2b01 	strb.w	r2, [r0], #1
		first = (first + 1) & mask;
    df86:	3301      	adds	r3, #1
    df88:	4023      	ands	r3, r4
	while (likely(len--)) {
    df8a:	4662      	mov	r2, ip
    df8c:	f102 3cff 	add.w	ip, r2, #4294967295
    df90:	fa1f fc8c 	uxth.w	ip, ip
    df94:	2a00      	cmp	r2, #0
    df96:	d1f1      	bne.n	df7c <rng_pool_get+0x44>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
    df98:	42be      	cmp	r6, r7
    df9a:	d10f      	bne.n	dfbc <rng_pool_get+0x84>
	__asm__ volatile(
    df9c:	f04f 0220 	mov.w	r2, #32
    dfa0:	f3ef 8311 	mrs	r3, BASEPRI
    dfa4:	f382 8812 	msr	BASEPRI_MAX, r2
    dfa8:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
    dfac:	f89e 2000 	ldrb.w	r2, [lr]
    dfb0:	f88e 2001 	strb.w	r2, [lr, #1]
	__asm__ volatile(
    dfb4:	f383 8811 	msr	BASEPRI, r3
    dfb8:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
    dfbc:	1a40      	subs	r0, r0, r1
    dfbe:	b280      	uxth	r0, r0
	available = available - len;
    dfc0:	1a2d      	subs	r5, r5, r0
	if (available <= rngp->threshold) {
    dfc2:	f89e 3004 	ldrb.w	r3, [lr, #4]
    dfc6:	42ab      	cmp	r3, r5
    dfc8:	d302      	bcc.n	dfd0 <rng_pool_get+0x98>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
    dfca:	4b02      	ldr	r3, [pc, #8]	; (dfd4 <rng_pool_get+0x9c>)
    dfcc:	2201      	movs	r2, #1
    dfce:	601a      	str	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
    dfd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dfd2:	bf00      	nop
    dfd4:	4000d000 	.word	0x4000d000

0000dfd8 <entropy_nrf5_get_entropy_isr>:
}

static int entropy_nrf5_get_entropy_isr(const struct device *dev,
					uint8_t *buf, uint16_t len,
					uint32_t flags)
{
    dfd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dfda:	460d      	mov	r5, r1
    dfdc:	4614      	mov	r4, r2
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
    dfde:	f013 0f01 	tst.w	r3, #1
    dfe2:	d103      	bne.n	dfec <entropy_nrf5_get_entropy_isr+0x14>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
    dfe4:	4823      	ldr	r0, [pc, #140]	; (e074 <entropy_nrf5_get_entropy_isr+0x9c>)
    dfe6:	f7ff ffa7 	bl	df38 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
    dfea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len) {
    dfec:	b90a      	cbnz	r2, dff2 <entropy_nrf5_get_entropy_isr+0x1a>
	return cnt;
    dfee:	4620      	mov	r0, r4
    dff0:	e7fb      	b.n	dfea <entropy_nrf5_get_entropy_isr+0x12>
	__asm__ volatile(
    dff2:	f04f 0320 	mov.w	r3, #32
    dff6:	f3ef 8611 	mrs	r6, BASEPRI
    dffa:	f383 8812 	msr	BASEPRI_MAX, r3
    dffe:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
    e002:	200d      	movs	r0, #13
    e004:	f7f6 ffb8 	bl	4f78 <arch_irq_is_enabled>
    e008:	4607      	mov	r7, r0
		irq_disable(IRQN);
    e00a:	200d      	movs	r0, #13
    e00c:	f00a ffaf 	bl	18f6e <arch_irq_disable>
	__asm__ volatile(
    e010:	f386 8811 	msr	BASEPRI, r6
    e014:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
    e018:	4b17      	ldr	r3, [pc, #92]	; (e078 <entropy_nrf5_get_entropy_isr+0xa0>)
    e01a:	2200      	movs	r2, #0
    e01c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    e020:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
    e024:	2201      	movs	r2, #1
    e026:	601a      	str	r2, [r3, #0]
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    e028:	4b14      	ldr	r3, [pc, #80]	; (e07c <entropy_nrf5_get_entropy_isr+0xa4>)
    e02a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    e02e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    e032:	4626      	mov	r6, r4
    e034:	e004      	b.n	e040 <entropy_nrf5_get_entropy_isr+0x68>
  __ASM volatile ("dsb 0xF":::"memory");
    e036:	f3bf 8f4f 	dsb	sy
				__WFE();
    e03a:	bf20      	wfe
				__SEV();
    e03c:	bf40      	sev
				__WFE();
    e03e:	bf20      	wfe
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
    e040:	4b0d      	ldr	r3, [pc, #52]	; (e078 <entropy_nrf5_get_entropy_isr+0xa0>)
    e042:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
    e046:	2b00      	cmp	r3, #0
    e048:	d0f5      	beq.n	e036 <entropy_nrf5_get_entropy_isr+0x5e>
			byte = random_byte_get();
    e04a:	f7ff ff55 	bl	def8 <random_byte_get>
    e04e:	4b0b      	ldr	r3, [pc, #44]	; (e07c <entropy_nrf5_get_entropy_isr+0xa4>)
    e050:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    e054:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
			if (byte < 0) {
    e058:	2800      	cmp	r0, #0
    e05a:	db02      	blt.n	e062 <entropy_nrf5_get_entropy_isr+0x8a>
			buf[--len] = byte;
    e05c:	3e01      	subs	r6, #1
    e05e:	b2b6      	uxth	r6, r6
    e060:	55a8      	strb	r0, [r5, r6]
		} while (len);
    e062:	2e00      	cmp	r6, #0
    e064:	d1ec      	bne.n	e040 <entropy_nrf5_get_entropy_isr+0x68>
		if (irq_enabled) {
    e066:	2f00      	cmp	r7, #0
    e068:	d0c1      	beq.n	dfee <entropy_nrf5_get_entropy_isr+0x16>
			irq_enable(IRQN);
    e06a:	200d      	movs	r0, #13
    e06c:	f00a ff7a 	bl	18f64 <arch_irq_enable>
    e070:	e7bd      	b.n	dfee <entropy_nrf5_get_entropy_isr+0x16>
    e072:	bf00      	nop
    e074:	20003264 	.word	0x20003264
    e078:	4000d000 	.word	0x4000d000
    e07c:	e000e100 	.word	0xe000e100

0000e080 <isr>:
{
    e080:	b510      	push	{r4, lr}
	byte = random_byte_get();
    e082:	f7ff ff39 	bl	def8 <random_byte_get>
	if (byte < 0) {
    e086:	2800      	cmp	r0, #0
    e088:	db06      	blt.n	e098 <isr+0x18>
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
    e08a:	b2c4      	uxtb	r4, r0
    e08c:	4621      	mov	r1, r4
    e08e:	480a      	ldr	r0, [pc, #40]	; (e0b8 <isr+0x38>)
    e090:	f010 fa63 	bl	1e55a <rng_pool_put>
	if (ret < 0) {
    e094:	2800      	cmp	r0, #0
    e096:	db00      	blt.n	e09a <isr+0x1a>
}
    e098:	bd10      	pop	{r4, pc}
		ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.thr),
    e09a:	4621      	mov	r1, r4
    e09c:	4807      	ldr	r0, [pc, #28]	; (e0bc <isr+0x3c>)
    e09e:	f010 fa5c 	bl	1e55a <rng_pool_put>
		if (ret < 0) {
    e0a2:	2800      	cmp	r0, #0
    e0a4:	db03      	blt.n	e0ae <isr+0x2e>
	z_impl_k_sem_give(sem);
    e0a6:	4806      	ldr	r0, [pc, #24]	; (e0c0 <isr+0x40>)
    e0a8:	f003 f8b2 	bl	11210 <z_impl_k_sem_give>
}
    e0ac:	e7f4      	b.n	e098 <isr+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
    e0ae:	4b05      	ldr	r3, [pc, #20]	; (e0c4 <isr+0x44>)
    e0b0:	2201      	movs	r2, #1
    e0b2:	605a      	str	r2, [r3, #4]
}
    e0b4:	e7f7      	b.n	e0a6 <isr+0x26>
    e0b6:	bf00      	nop
    e0b8:	20003264 	.word	0x20003264
    e0bc:	20003279 	.word	0x20003279
    e0c0:	2000324c 	.word	0x2000324c
    e0c4:	4000d000 	.word	0x4000d000

0000e0c8 <entropy_nrf5_get_entropy>:
{
    e0c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e0ca:	460f      	mov	r7, r1
    e0cc:	4614      	mov	r4, r2
	while (len) {
    e0ce:	e007      	b.n	e0e0 <entropy_nrf5_get_entropy+0x18>
	return z_impl_k_sem_take(sem, timeout);
    e0d0:	f04f 32ff 	mov.w	r2, #4294967295
    e0d4:	f04f 33ff 	mov.w	r3, #4294967295
    e0d8:	f106 0018 	add.w	r0, r6, #24
    e0dc:	f003 f8c0 	bl	11260 <z_impl_k_sem_take>
    e0e0:	b1bc      	cbz	r4, e112 <entropy_nrf5_get_entropy+0x4a>
    e0e2:	4e0d      	ldr	r6, [pc, #52]	; (e118 <entropy_nrf5_get_entropy+0x50>)
    e0e4:	f04f 32ff 	mov.w	r2, #4294967295
    e0e8:	f04f 33ff 	mov.w	r3, #4294967295
    e0ec:	4630      	mov	r0, r6
    e0ee:	f003 f8b7 	bl	11260 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
    e0f2:	4622      	mov	r2, r4
    e0f4:	4639      	mov	r1, r7
    e0f6:	f106 0045 	add.w	r0, r6, #69	; 0x45
    e0fa:	f7ff ff1d 	bl	df38 <rng_pool_get>
    e0fe:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
    e100:	4630      	mov	r0, r6
    e102:	f003 f885 	bl	11210 <z_impl_k_sem_give>
		if (bytes == 0U) {
    e106:	2d00      	cmp	r5, #0
    e108:	d0e2      	beq.n	e0d0 <entropy_nrf5_get_entropy+0x8>
		len -= bytes;
    e10a:	1b64      	subs	r4, r4, r5
    e10c:	b2a4      	uxth	r4, r4
		buf += bytes;
    e10e:	442f      	add	r7, r5
    e110:	e7e6      	b.n	e0e0 <entropy_nrf5_get_entropy+0x18>
}
    e112:	2000      	movs	r0, #0
    e114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e116:	bf00      	nop
    e118:	20003234 	.word	0x20003234

0000e11c <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
    e11c:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
    e11e:	4c18      	ldr	r4, [pc, #96]	; (e180 <entropy_nrf5_init+0x64>)
    e120:	2201      	movs	r2, #1
    e122:	4611      	mov	r1, r2
    e124:	4620      	mov	r0, r4
    e126:	f011 f867 	bl	1f1f8 <z_impl_k_sem_init>
    e12a:	2201      	movs	r2, #1
    e12c:	2100      	movs	r1, #0
    e12e:	f104 0018 	add.w	r0, r4, #24
    e132:	f011 f861 	bl	1f1f8 <z_impl_k_sem_init>
	k_sem_init(&entropy_nrf5_data.sem_lock, 1, 1);

	/* Synching semaphore */
	k_sem_init(&entropy_nrf5_data.sem_sync, 0, 1);

	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.thr),
    e136:	2204      	movs	r2, #4
    e138:	2108      	movs	r1, #8
    e13a:	f104 0045 	add.w	r0, r4, #69	; 0x45
    e13e:	f010 fa1f 	bl	1e580 <rng_pool_init>
		      CONFIG_ENTROPY_NRF5_THR_POOL_SIZE,
		      CONFIG_ENTROPY_NRF5_THR_THRESHOLD);
	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.isr),
    e142:	220c      	movs	r2, #12
    e144:	2110      	movs	r1, #16
    e146:	f104 0030 	add.w	r0, r4, #48	; 0x30
    e14a:	f010 fa19 	bl	1e580 <rng_pool_init>
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
    e14e:	4b0d      	ldr	r3, [pc, #52]	; (e184 <entropy_nrf5_init+0x68>)
    e150:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
    e154:	f022 0201 	bic.w	r2, r2, #1
    e158:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
    e15c:	2400      	movs	r4, #0
    e15e:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    e162:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    e166:	2101      	movs	r1, #1
    e168:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
    e16c:	6019      	str	r1, [r3, #0]

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
    e16e:	4622      	mov	r2, r4
    e170:	200d      	movs	r0, #13
    e172:	f00a ff01 	bl	18f78 <z_arm_irq_priority_set>
	irq_enable(IRQN);
    e176:	200d      	movs	r0, #13
    e178:	f00a fef4 	bl	18f64 <arch_irq_enable>

	return 0;
}
    e17c:	4620      	mov	r0, r4
    e17e:	bd10      	pop	{r4, pc}
    e180:	20003234 	.word	0x20003234
    e184:	4000d000 	.word	0x4000d000

0000e188 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    e188:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    e18c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    e190:	4b01      	ldr	r3, [pc, #4]	; (e198 <set_comparator+0x10>)
    e192:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    e196:	4770      	bx	lr
    e198:	40011000 	.word	0x40011000

0000e19c <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    e19c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    e1a0:	4b01      	ldr	r3, [pc, #4]	; (e1a8 <get_comparator+0xc>)
    e1a2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    e1a6:	4770      	bx	lr
    e1a8:	40011000 	.word	0x40011000

0000e1ac <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    e1ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    e1b0:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    e1b2:	4a02      	ldr	r2, [pc, #8]	; (e1bc <event_enable+0x10>)
    e1b4:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    e1b8:	4770      	bx	lr
    e1ba:	bf00      	nop
    e1bc:	40011000 	.word	0x40011000

0000e1c0 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    e1c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    e1c4:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    e1c6:	4a02      	ldr	r2, [pc, #8]	; (e1d0 <event_disable+0x10>)
    e1c8:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    e1cc:	4770      	bx	lr
    e1ce:	bf00      	nop
    e1d0:	40011000 	.word	0x40011000

0000e1d4 <counter>:
     return p_reg->COUNTER;
    e1d4:	4b01      	ldr	r3, [pc, #4]	; (e1dc <counter+0x8>)
    e1d6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    e1da:	4770      	bx	lr
    e1dc:	40011000 	.word	0x40011000

0000e1e0 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    e1e0:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    e1e2:	2301      	movs	r3, #1
    e1e4:	4083      	lsls	r3, r0
    e1e6:	ea6f 0c03 	mvn.w	ip, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    e1ea:	4a0e      	ldr	r2, [pc, #56]	; (e224 <compare_int_lock+0x44>)
    e1ec:	f3bf 8f5b 	dmb	ish
    e1f0:	e852 1f00 	ldrex	r1, [r2]
    e1f4:	ea01 0e0c 	and.w	lr, r1, ip
    e1f8:	e842 e400 	strex	r4, lr, [r2]
    e1fc:	2c00      	cmp	r4, #0
    e1fe:	d1f7      	bne.n	e1f0 <compare_int_lock+0x10>
    e200:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    e204:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    e208:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    e20a:	4807      	ldr	r0, [pc, #28]	; (e228 <compare_int_lock+0x48>)
    e20c:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    e210:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    e214:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    e218:	420b      	tst	r3, r1
}
    e21a:	bf14      	ite	ne
    e21c:	2001      	movne	r0, #1
    e21e:	2000      	moveq	r0, #0
    e220:	bd10      	pop	{r4, pc}
    e222:	bf00      	nop
    e224:	2000328c 	.word	0x2000328c
    e228:	40011000 	.word	0x40011000

0000e22c <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    e22c:	b538      	push	{r3, r4, r5, lr}
    e22e:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    e230:	f010 f9f4 	bl	1e61c <full_int_lock>
    e234:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    e236:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    e23a:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    e23c:	4a16      	ldr	r2, [pc, #88]	; (e298 <channel_processing_check_and_clear+0x6c>)
    e23e:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    e242:	4213      	tst	r3, r2
    e244:	d105      	bne.n	e252 <channel_processing_check_and_clear+0x26>
	bool result = false;
    e246:	2400      	movs	r4, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    e248:	4628      	mov	r0, r5
    e24a:	f010 f9f0 	bl	1e62e <full_int_unlock>

	return result;
}
    e24e:	4620      	mov	r0, r4
    e250:	bd38      	pop	{r3, r4, r5, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    e252:	2301      	movs	r3, #1
    e254:	40a3      	lsls	r3, r4
    e256:	43db      	mvns	r3, r3
    e258:	4a10      	ldr	r2, [pc, #64]	; (e29c <channel_processing_check_and_clear+0x70>)
    e25a:	f3bf 8f5b 	dmb	ish
    e25e:	e852 1f00 	ldrex	r1, [r2]
    e262:	ea01 0003 	and.w	r0, r1, r3
    e266:	e842 0c00 	strex	ip, r0, [r2]
    e26a:	f1bc 0f00 	cmp.w	ip, #0
    e26e:	d1f6      	bne.n	e25e <channel_processing_check_and_clear+0x32>
    e270:	f3bf 8f5b 	dmb	ish
    e274:	b949      	cbnz	r1, e28a <channel_processing_check_and_clear+0x5e>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    e276:	f104 0350 	add.w	r3, r4, #80	; 0x50
    e27a:	009b      	lsls	r3, r3, #2
    e27c:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e27e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    e282:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    e286:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    e288:	b123      	cbz	r3, e294 <channel_processing_check_and_clear+0x68>
			event_clear(chan);
    e28a:	4620      	mov	r0, r4
    e28c:	f010 f9b7 	bl	1e5fe <event_clear>
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    e290:	2401      	movs	r4, #1
    e292:	e7d9      	b.n	e248 <channel_processing_check_and_clear+0x1c>
    e294:	2400      	movs	r4, #0
    e296:	e7d7      	b.n	e248 <channel_processing_check_and_clear+0x1c>
    e298:	40011000 	.word	0x40011000
    e29c:	20003288 	.word	0x20003288

0000e2a0 <compare_int_unlock>:
	if (key) {
    e2a0:	b901      	cbnz	r1, e2a4 <compare_int_unlock+0x4>
}
    e2a2:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    e2a4:	2301      	movs	r3, #1
    e2a6:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    e2a8:	4a11      	ldr	r2, [pc, #68]	; (e2f0 <compare_int_unlock+0x50>)
    e2aa:	f3bf 8f5b 	dmb	ish
    e2ae:	e852 cf00 	ldrex	ip, [r2]
    e2b2:	ea4c 0c03 	orr.w	ip, ip, r3
    e2b6:	e842 c100 	strex	r1, ip, [r2]
    e2ba:	2900      	cmp	r1, #0
    e2bc:	d1f7      	bne.n	e2ae <compare_int_unlock+0xe>
    e2be:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    e2c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    e2c6:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    e2c8:	4a0a      	ldr	r2, [pc, #40]	; (e2f4 <compare_int_unlock+0x54>)
    e2ca:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    e2ce:	f3bf 8f5b 	dmb	ish
    e2d2:	4b09      	ldr	r3, [pc, #36]	; (e2f8 <compare_int_unlock+0x58>)
    e2d4:	681b      	ldr	r3, [r3, #0]
    e2d6:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    e2da:	40c3      	lsrs	r3, r0
    e2dc:	f013 0f01 	tst.w	r3, #1
    e2e0:	d0df      	beq.n	e2a2 <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    e2e2:	4b06      	ldr	r3, [pc, #24]	; (e2fc <compare_int_unlock+0x5c>)
    e2e4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    e2e8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    e2ec:	e7d9      	b.n	e2a2 <compare_int_unlock+0x2>
    e2ee:	bf00      	nop
    e2f0:	2000328c 	.word	0x2000328c
    e2f4:	40011000 	.word	0x40011000
    e2f8:	20003288 	.word	0x20003288
    e2fc:	e000e100 	.word	0xe000e100

0000e300 <sys_clock_timeout_handler>:
{
    e300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e304:	4607      	mov	r7, r0
    e306:	4614      	mov	r4, r2
    e308:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    e30a:	4610      	mov	r0, r2
    e30c:	4619      	mov	r1, r3
    e30e:	f010 f982 	bl	1e616 <absolute_time_to_cc>
    e312:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    e314:	4b15      	ldr	r3, [pc, #84]	; (e36c <sys_clock_timeout_handler+0x6c>)
    e316:	681a      	ldr	r2, [r3, #0]
    e318:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    e31a:	601c      	str	r4, [r3, #0]
    e31c:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    e31e:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    e322:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    e326:	d309      	bcc.n	e33c <sys_clock_timeout_handler+0x3c>
	return false;
    e328:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    e32a:	f003 fe63 	bl	11ff4 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    e32e:	4638      	mov	r0, r7
    e330:	f7ff ff34 	bl	e19c <get_comparator>
    e334:	42a8      	cmp	r0, r5
    e336:	d00e      	beq.n	e356 <sys_clock_timeout_handler+0x56>
}
    e338:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    e33c:	4b0c      	ldr	r3, [pc, #48]	; (e370 <sys_clock_timeout_handler+0x70>)
    e33e:	681b      	ldr	r3, [r3, #0]
    e340:	0a1a      	lsrs	r2, r3, #8
    e342:	061b      	lsls	r3, r3, #24
    e344:	eb15 0803 	adds.w	r8, r5, r3
    e348:	f142 0900 	adc.w	r9, r2, #0
    e34c:	4b09      	ldr	r3, [pc, #36]	; (e374 <sys_clock_timeout_handler+0x74>)
    e34e:	e9c3 8900 	strd	r8, r9, [r3]
		return true;
    e352:	2401      	movs	r4, #1
    e354:	e7e9      	b.n	e32a <sys_clock_timeout_handler+0x2a>
		if (!anchor_updated) {
    e356:	b11c      	cbz	r4, e360 <sys_clock_timeout_handler+0x60>
		event_enable(chan);
    e358:	4638      	mov	r0, r7
    e35a:	f7ff ff27 	bl	e1ac <event_enable>
}
    e35e:	e7eb      	b.n	e338 <sys_clock_timeout_handler+0x38>
			set_comparator(chan, COUNTER_HALF_SPAN);
    e360:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    e364:	4638      	mov	r0, r7
    e366:	f7ff ff0f 	bl	e188 <set_comparator>
    e36a:	e7f5      	b.n	e358 <sys_clock_timeout_handler+0x58>
    e36c:	20001c50 	.word	0x20001c50
    e370:	20003290 	.word	0x20003290
    e374:	20001c58 	.word	0x20001c58

0000e378 <z_nrf_rtc_timer_read>:
{
    e378:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    e37a:	4b0d      	ldr	r3, [pc, #52]	; (e3b0 <z_nrf_rtc_timer_read+0x38>)
    e37c:	681c      	ldr	r4, [r3, #0]
    e37e:	0a25      	lsrs	r5, r4, #8
    e380:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
    e382:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    e386:	f7ff ff25 	bl	e1d4 <counter>
    e38a:	4603      	mov	r3, r0
	val += cntr;
    e38c:	1900      	adds	r0, r0, r4
    e38e:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    e392:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    e396:	d20a      	bcs.n	e3ae <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    e398:	4b06      	ldr	r3, [pc, #24]	; (e3b4 <z_nrf_rtc_timer_read+0x3c>)
    e39a:	e9d3 2300 	ldrd	r2, r3, [r3]
    e39e:	4290      	cmp	r0, r2
    e3a0:	eb71 0303 	sbcs.w	r3, r1, r3
    e3a4:	d203      	bcs.n	e3ae <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    e3a6:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    e3aa:	f141 0100 	adc.w	r1, r1, #0
}
    e3ae:	bd38      	pop	{r3, r4, r5, pc}
    e3b0:	20003290 	.word	0x20003290
    e3b4:	20001c58 	.word	0x20001c58

0000e3b8 <compare_set_nolocks>:
{
    e3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e3ba:	4606      	mov	r6, r0
    e3bc:	4614      	mov	r4, r2
    e3be:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    e3c0:	4610      	mov	r0, r2
    e3c2:	4619      	mov	r1, r3
    e3c4:	f010 f927 	bl	1e616 <absolute_time_to_cc>
    e3c8:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    e3ca:	f7ff ffd5 	bl	e378 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    e3ce:	42a0      	cmp	r0, r4
    e3d0:	eb71 0305 	sbcs.w	r3, r1, r5
    e3d4:	d21d      	bcs.n	e412 <compare_set_nolocks+0x5a>
		if (target_time - curr_time > COUNTER_SPAN) {
    e3d6:	1a20      	subs	r0, r4, r0
    e3d8:	eb65 0101 	sbc.w	r1, r5, r1
    e3dc:	4b1b      	ldr	r3, [pc, #108]	; (e44c <compare_set_nolocks+0x94>)
    e3de:	4298      	cmp	r0, r3
    e3e0:	f171 0100 	sbcs.w	r1, r1, #0
    e3e4:	d22f      	bcs.n	e446 <compare_set_nolocks+0x8e>
		if (target_time != cc_data[chan].target_time) {
    e3e6:	4b1a      	ldr	r3, [pc, #104]	; (e450 <compare_set_nolocks+0x98>)
    e3e8:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    e3ec:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    e3f0:	42ab      	cmp	r3, r5
    e3f2:	bf08      	it	eq
    e3f4:	42a2      	cmpeq	r2, r4
    e3f6:	d01a      	beq.n	e42e <compare_set_nolocks+0x76>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    e3f8:	4639      	mov	r1, r7
    e3fa:	4630      	mov	r0, r6
    e3fc:	f010 f91c 	bl	1e638 <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    e400:	4639      	mov	r1, r7
    e402:	f010 f8f8 	bl	1e5f6 <counter_sub>
    e406:	1900      	adds	r0, r0, r4
    e408:	f145 0300 	adc.w	r3, r5, #0
    e40c:	4604      	mov	r4, r0
    e40e:	461d      	mov	r5, r3
    e410:	e00d      	b.n	e42e <compare_set_nolocks+0x76>
		atomic_or(&force_isr_mask, BIT(chan));
    e412:	2301      	movs	r3, #1
    e414:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    e416:	4a0f      	ldr	r2, [pc, #60]	; (e454 <compare_set_nolocks+0x9c>)
    e418:	f3bf 8f5b 	dmb	ish
    e41c:	e852 0f00 	ldrex	r0, [r2]
    e420:	4318      	orrs	r0, r3
    e422:	e842 0100 	strex	r1, r0, [r2]
    e426:	2900      	cmp	r1, #0
    e428:	d1f8      	bne.n	e41c <compare_set_nolocks+0x64>
    e42a:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    e42e:	4b08      	ldr	r3, [pc, #32]	; (e450 <compare_set_nolocks+0x98>)
    e430:	0132      	lsls	r2, r6, #4
    e432:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    e436:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    e43a:	9906      	ldr	r1, [sp, #24]
    e43c:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    e43e:	9b07      	ldr	r3, [sp, #28]
    e440:	6073      	str	r3, [r6, #4]
	return ret;
    e442:	2000      	movs	r0, #0
}
    e444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
    e446:	f06f 0015 	mvn.w	r0, #21
    e44a:	e7fb      	b.n	e444 <compare_set_nolocks+0x8c>
    e44c:	01000001 	.word	0x01000001
    e450:	20001c40 	.word	0x20001c40
    e454:	20003288 	.word	0x20003288

0000e458 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    e458:	b530      	push	{r4, r5, lr}
    e45a:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    e45c:	2300      	movs	r3, #0
    e45e:	4a1d      	ldr	r2, [pc, #116]	; (e4d4 <sys_clock_driver_init+0x7c>)
    e460:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    e464:	2b00      	cmp	r3, #0
    e466:	dd24      	ble.n	e4b2 <sys_clock_driver_init+0x5a>
    p_reg->INTENSET = mask;
    e468:	4c1a      	ldr	r4, [pc, #104]	; (e4d4 <sys_clock_driver_init+0x7c>)
    e46a:	2502      	movs	r5, #2
    e46c:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    e470:	4b19      	ldr	r3, [pc, #100]	; (e4d8 <sys_clock_driver_init+0x80>)
    e472:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    e476:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    e47a:	2200      	movs	r2, #0
    e47c:	2101      	movs	r1, #1
    e47e:	2011      	movs	r0, #17
    e480:	f00a fd7a 	bl	18f78 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    e484:	2011      	movs	r0, #17
    e486:	f00a fd6d 	bl	18f64 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    e48a:	2301      	movs	r3, #1
    e48c:	60a3      	str	r3, [r4, #8]
    e48e:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    e490:	4a12      	ldr	r2, [pc, #72]	; (e4dc <sys_clock_driver_init+0x84>)
    e492:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    e494:	2400      	movs	r4, #0
    e496:	9401      	str	r4, [sp, #4]
    e498:	4b11      	ldr	r3, [pc, #68]	; (e4e0 <sys_clock_driver_init+0x88>)
    e49a:	9300      	str	r3, [sp, #0]
    e49c:	4a11      	ldr	r2, [pc, #68]	; (e4e4 <sys_clock_driver_init+0x8c>)
    e49e:	2300      	movs	r3, #0
    e4a0:	4620      	mov	r0, r4
    e4a2:	f010 f904 	bl	1e6ae <compare_set>

	z_nrf_clock_control_lf_on(mode);
    e4a6:	4628      	mov	r0, r5
    e4a8:	f7fc f834 	bl	a514 <z_nrf_clock_control_lf_on>

	return 0;
}
    e4ac:	4620      	mov	r0, r4
    e4ae:	b003      	add	sp, #12
    e4b0:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    e4b2:	4a0d      	ldr	r2, [pc, #52]	; (e4e8 <sys_clock_driver_init+0x90>)
    e4b4:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    e4b8:	f04f 30ff 	mov.w	r0, #4294967295
    e4bc:	f04f 31ff 	mov.w	r1, #4294967295
    e4c0:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    e4c4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    e4c8:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    e4ca:	4902      	ldr	r1, [pc, #8]	; (e4d4 <sys_clock_driver_init+0x7c>)
    e4cc:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    e4d0:	3301      	adds	r3, #1
    e4d2:	e7c7      	b.n	e464 <sys_clock_driver_init+0xc>
    e4d4:	40011000 	.word	0x40011000
    e4d8:	e000e100 	.word	0xe000e100
    e4dc:	2000328c 	.word	0x2000328c
    e4e0:	0000e301 	.word	0x0000e301
    e4e4:	007fffff 	.word	0x007fffff
    e4e8:	20001c40 	.word	0x20001c40

0000e4ec <process_channel>:
{
    e4ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e4f0:	b082      	sub	sp, #8
    e4f2:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    e4f4:	f7ff fe9a 	bl	e22c <channel_processing_check_and_clear>
    e4f8:	b910      	cbnz	r0, e500 <process_channel+0x14>
}
    e4fa:	b002      	add	sp, #8
    e4fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    e500:	f7ff ff3a 	bl	e378 <z_nrf_rtc_timer_read>
    e504:	4682      	mov	sl, r0
    e506:	460d      	mov	r5, r1
		mcu_critical_state = full_int_lock();
    e508:	f010 f888 	bl	1e61c <full_int_lock>
    e50c:	4606      	mov	r6, r0
		expire_time = cc_data[chan].target_time;
    e50e:	4b13      	ldr	r3, [pc, #76]	; (e55c <process_channel+0x70>)
    e510:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    e514:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    e518:	45c2      	cmp	sl, r8
    e51a:	eb75 0509 	sbcs.w	r5, r5, r9
    e51e:	d20b      	bcs.n	e538 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    e520:	2500      	movs	r5, #0
		full_int_unlock(mcu_critical_state);
    e522:	4630      	mov	r0, r6
    e524:	f010 f883 	bl	1e62e <full_int_unlock>
		if (handler) {
    e528:	2d00      	cmp	r5, #0
    e52a:	d0e6      	beq.n	e4fa <process_channel+0xe>
			handler(chan, expire_time, user_context);
    e52c:	9700      	str	r7, [sp, #0]
    e52e:	4642      	mov	r2, r8
    e530:	464b      	mov	r3, r9
    e532:	4620      	mov	r0, r4
    e534:	47a8      	blx	r5
}
    e536:	e7e0      	b.n	e4fa <process_channel+0xe>
			handler = cc_data[chan].callback;
    e538:	4a08      	ldr	r2, [pc, #32]	; (e55c <process_channel+0x70>)
    e53a:	0123      	lsls	r3, r4, #4
    e53c:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    e540:	58d5      	ldr	r5, [r2, r3]
			user_context = cc_data[chan].user_context;
    e542:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
    e544:	2000      	movs	r0, #0
    e546:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    e548:	f04f 32ff 	mov.w	r2, #4294967295
    e54c:	f04f 33ff 	mov.w	r3, #4294967295
    e550:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    e554:	4620      	mov	r0, r4
    e556:	f7ff fe33 	bl	e1c0 <event_disable>
    e55a:	e7e2      	b.n	e522 <process_channel+0x36>
    e55c:	20001c40 	.word	0x20001c40

0000e560 <rtc_nrf_isr>:
{
    e560:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    e562:	4b0e      	ldr	r3, [pc, #56]	; (e59c <rtc_nrf_isr+0x3c>)
    e564:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    e568:	f013 0f02 	tst.w	r3, #2
    e56c:	d00d      	beq.n	e58a <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e56e:	4b0b      	ldr	r3, [pc, #44]	; (e59c <rtc_nrf_isr+0x3c>)
    e570:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    e574:	b14b      	cbz	r3, e58a <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    e576:	4b09      	ldr	r3, [pc, #36]	; (e59c <rtc_nrf_isr+0x3c>)
    e578:	2200      	movs	r2, #0
    e57a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    e57e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
    e582:	4a07      	ldr	r2, [pc, #28]	; (e5a0 <rtc_nrf_isr+0x40>)
    e584:	6813      	ldr	r3, [r2, #0]
    e586:	3301      	adds	r3, #1
    e588:	6013      	str	r3, [r2, #0]
{
    e58a:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    e58c:	2c00      	cmp	r4, #0
    e58e:	dd00      	ble.n	e592 <rtc_nrf_isr+0x32>
}
    e590:	bd10      	pop	{r4, pc}
		process_channel(chan);
    e592:	4620      	mov	r0, r4
    e594:	f7ff ffaa 	bl	e4ec <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    e598:	3401      	adds	r4, #1
    e59a:	e7f7      	b.n	e58c <rtc_nrf_isr+0x2c>
    e59c:	40011000 	.word	0x40011000
    e5a0:	20003290 	.word	0x20003290

0000e5a4 <sys_clock_set_timeout>:
{
    e5a4:	b510      	push	{r4, lr}
    e5a6:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    e5a8:	f1b0 3fff 	cmp.w	r0, #4294967295
    e5ac:	d006      	beq.n	e5bc <sys_clock_set_timeout+0x18>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    e5ae:	2801      	cmp	r0, #1
    e5b0:	dd06      	ble.n	e5c0 <sys_clock_set_timeout+0x1c>
    e5b2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    e5b6:	da05      	bge.n	e5c4 <sys_clock_set_timeout+0x20>
    e5b8:	1e44      	subs	r4, r0, #1
    e5ba:	e004      	b.n	e5c6 <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    e5bc:	480f      	ldr	r0, [pc, #60]	; (e5fc <sys_clock_set_timeout+0x58>)
    e5be:	e7f8      	b.n	e5b2 <sys_clock_set_timeout+0xe>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    e5c0:	2400      	movs	r4, #0
    e5c2:	e000      	b.n	e5c6 <sys_clock_set_timeout+0x22>
    e5c4:	4c0d      	ldr	r4, [pc, #52]	; (e5fc <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    e5c6:	f7ff fed7 	bl	e378 <z_nrf_rtc_timer_read>
    e5ca:	4b0d      	ldr	r3, [pc, #52]	; (e600 <sys_clock_set_timeout+0x5c>)
    e5cc:	681a      	ldr	r2, [r3, #0]
    e5ce:	685b      	ldr	r3, [r3, #4]
    e5d0:	1a80      	subs	r0, r0, r2
	if (unannounced >= COUNTER_HALF_SPAN) {
    e5d2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    e5d6:	d300      	bcc.n	e5da <sys_clock_set_timeout+0x36>
		ticks = 0;
    e5d8:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    e5da:	4420      	add	r0, r4
    e5dc:	1c41      	adds	r1, r0, #1
	if (cyc > MAX_CYCLES) {
    e5de:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    e5e2:	d300      	bcc.n	e5e6 <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    e5e4:	4905      	ldr	r1, [pc, #20]	; (e5fc <sys_clock_set_timeout+0x58>)
	uint64_t target_time = cyc + last_count;
    e5e6:	2000      	movs	r0, #0
    e5e8:	1852      	adds	r2, r2, r1
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    e5ea:	9001      	str	r0, [sp, #4]
    e5ec:	4905      	ldr	r1, [pc, #20]	; (e604 <sys_clock_set_timeout+0x60>)
    e5ee:	9100      	str	r1, [sp, #0]
    e5f0:	f143 0300 	adc.w	r3, r3, #0
    e5f4:	f010 f85b 	bl	1e6ae <compare_set>
}
    e5f8:	b002      	add	sp, #8
    e5fa:	bd10      	pop	{r4, pc}
    e5fc:	007fffff 	.word	0x007fffff
    e600:	20001c50 	.word	0x20001c50
    e604:	0000e301 	.word	0x0000e301

0000e608 <sys_clock_elapsed>:
{
    e608:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    e60a:	f7ff feb5 	bl	e378 <z_nrf_rtc_timer_read>
    e60e:	4b02      	ldr	r3, [pc, #8]	; (e618 <sys_clock_elapsed+0x10>)
    e610:	681b      	ldr	r3, [r3, #0]
}
    e612:	1ac0      	subs	r0, r0, r3
    e614:	bd08      	pop	{r3, pc}
    e616:	bf00      	nop
    e618:	20001c50 	.word	0x20001c50

0000e61c <nrf_gpio_pin_write>:
    if (value == 0)
    e61c:	b969      	cbnz	r1, e63a <nrf_gpio_pin_write+0x1e>
    *p_pin = pin_number & 0x1F;
    e61e:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    e622:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    e624:	2801      	cmp	r0, #1
    e626:	d006      	beq.n	e636 <nrf_gpio_pin_write+0x1a>
        case 0: return NRF_P0;
    e628:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    e62c:	2301      	movs	r3, #1
    e62e:	408b      	lsls	r3, r1
    p_reg->OUTCLR = clr_mask;
    e630:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
    e634:	4770      	bx	lr
        case 1: return NRF_P1;
    e636:	4a08      	ldr	r2, [pc, #32]	; (e658 <nrf_gpio_pin_write+0x3c>)
    e638:	e7f8      	b.n	e62c <nrf_gpio_pin_write+0x10>
    *p_pin = pin_number & 0x1F;
    e63a:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    e63e:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    e640:	2801      	cmp	r0, #1
    e642:	d006      	beq.n	e652 <nrf_gpio_pin_write+0x36>
        case 0: return NRF_P0;
    e644:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    e648:	2301      	movs	r3, #1
    e64a:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
    e64c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
}
    e650:	4770      	bx	lr
        case 1: return NRF_P1;
    e652:	4a01      	ldr	r2, [pc, #4]	; (e658 <nrf_gpio_pin_write+0x3c>)
    e654:	e7f8      	b.n	e648 <nrf_gpio_pin_write+0x2c>
    e656:	bf00      	nop
    e658:	50000300 	.word	0x50000300

0000e65c <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    e65c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e660:	b083      	sub	sp, #12
    e662:	4680      	mov	r8, r0
    e664:	468b      	mov	fp, r1
    e666:	9201      	str	r2, [sp, #4]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    e668:	2500      	movs	r5, #0
    e66a:	e02b      	b.n	e6c4 <pinctrl_configure_pins+0x68>
		uint32_t write = NO_WRITE;
		nrf_gpio_pin_dir_t dir;
		nrf_gpio_pin_input_t input;

		if (pin == NRF_PIN_DISCONNECTED) {
			pin = 0xFFFFFFFFU;
    e66c:	f04f 34ff 	mov.w	r4, #4294967295
    e670:	e035      	b.n	e6de <pinctrl_configure_pins+0x82>
		}

		switch (NRF_GET_FUN(pins[i])) {
#if defined(NRF_PSEL_UART)
		case NRF_FUN_UART_TX:
			NRF_PSEL_UART(reg, TXD) = pin;
    e672:	9b01      	ldr	r3, [sp, #4]
    e674:	f8c3 450c 	str.w	r4, [r3, #1292]	; 0x50c
			write = 1U;
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    e678:	2701      	movs	r7, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    e67a:	463e      	mov	r6, r7
			write = 1U;
    e67c:	4639      	mov	r1, r7
		default:
			return -ENOTSUP;
		}

		/* configure GPIO properties */
		if (pin != NRF_PIN_DISCONNECTED) {
    e67e:	2c7f      	cmp	r4, #127	; 0x7f
    e680:	d01e      	beq.n	e6c0 <pinctrl_configure_pins+0x64>
			if (write != NO_WRITE) {
    e682:	f1b1 3fff 	cmp.w	r1, #4294967295
    e686:	f040 80f7 	bne.w	e878 <pinctrl_configure_pins+0x21c>
				nrf_gpio_pin_write(pin, write);
			}

			/* force input and disconnected buffer for low power */
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    e68a:	f858 300a 	ldr.w	r3, [r8, sl]
    e68e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    e692:	d001      	beq.n	e698 <pinctrl_configure_pins+0x3c>
				dir = NRF_GPIO_PIN_DIR_INPUT;
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    e694:	2701      	movs	r7, #1
				dir = NRF_GPIO_PIN_DIR_INPUT;
    e696:	2600      	movs	r6, #0
			}

			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
    e698:	f3c3 13c1 	ubfx	r3, r3, #7, #2
    *p_pin = pin_number & 0x1F;
    e69c:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    e6a0:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    e6a2:	2c01      	cmp	r4, #1
    e6a4:	f000 80ec 	beq.w	e880 <pinctrl_configure_pins+0x224>
        case 0: return NRF_P0;
    e6a8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    e6ac:	ea46 0647 	orr.w	r6, r6, r7, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    e6b0:	ea46 0683 	orr.w	r6, r6, r3, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    e6b4:	ea46 2609 	orr.w	r6, r6, r9, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    e6b8:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
    e6bc:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    e6c0:	3501      	adds	r5, #1
    e6c2:	b2ed      	uxtb	r5, r5
    e6c4:	455d      	cmp	r5, fp
    e6c6:	f080 80dd 	bcs.w	e884 <pinctrl_configure_pins+0x228>
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    e6ca:	ea4f 0a85 	mov.w	sl, r5, lsl #2
    e6ce:	f858 3025 	ldr.w	r3, [r8, r5, lsl #2]
    e6d2:	f3c3 2943 	ubfx	r9, r3, #9, #4
		uint32_t pin = NRF_GET_PIN(pins[i]);
    e6d6:	f003 047f 	and.w	r4, r3, #127	; 0x7f
		if (pin == NRF_PIN_DISCONNECTED) {
    e6da:	2c7f      	cmp	r4, #127	; 0x7f
    e6dc:	d0c6      	beq.n	e66c <pinctrl_configure_pins+0x10>
		switch (NRF_GET_FUN(pins[i])) {
    e6de:	0c1b      	lsrs	r3, r3, #16
    e6e0:	2b22      	cmp	r3, #34	; 0x22
    e6e2:	f200 80d1 	bhi.w	e888 <pinctrl_configure_pins+0x22c>
    e6e6:	a201      	add	r2, pc, #4	; (adr r2, e6ec <pinctrl_configure_pins+0x90>)
    e6e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    e6ec:	0000e673 	.word	0x0000e673
    e6f0:	0000e779 	.word	0x0000e779
    e6f4:	0000e789 	.word	0x0000e789
    e6f8:	0000e797 	.word	0x0000e797
    e6fc:	0000e7a7 	.word	0x0000e7a7
    e700:	0000e7b5 	.word	0x0000e7b5
    e704:	0000e7c3 	.word	0x0000e7c3
    e708:	0000e889 	.word	0x0000e889
    e70c:	0000e889 	.word	0x0000e889
    e710:	0000e889 	.word	0x0000e889
    e714:	0000e889 	.word	0x0000e889
    e718:	0000e7d3 	.word	0x0000e7d3
    e71c:	0000e7e9 	.word	0x0000e7e9
    e720:	0000e889 	.word	0x0000e889
    e724:	0000e889 	.word	0x0000e889
    e728:	0000e889 	.word	0x0000e889
    e72c:	0000e889 	.word	0x0000e889
    e730:	0000e889 	.word	0x0000e889
    e734:	0000e889 	.word	0x0000e889
    e738:	0000e889 	.word	0x0000e889
    e73c:	0000e889 	.word	0x0000e889
    e740:	0000e889 	.word	0x0000e889
    e744:	0000e889 	.word	0x0000e889
    e748:	0000e889 	.word	0x0000e889
    e74c:	0000e889 	.word	0x0000e889
    e750:	0000e889 	.word	0x0000e889
    e754:	0000e889 	.word	0x0000e889
    e758:	0000e889 	.word	0x0000e889
    e75c:	0000e889 	.word	0x0000e889
    e760:	0000e7ff 	.word	0x0000e7ff
    e764:	0000e80f 	.word	0x0000e80f
    e768:	0000e81d 	.word	0x0000e81d
    e76c:	0000e82d 	.word	0x0000e82d
    e770:	0000e83d 	.word	0x0000e83d
    e774:	0000e84d 	.word	0x0000e84d
			NRF_PSEL_UART(reg, RXD) = pin;
    e778:	9b01      	ldr	r3, [sp, #4]
    e77a:	f8c3 4514 	str.w	r4, [r3, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    e77e:	2700      	movs	r7, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    e780:	463e      	mov	r6, r7
		uint32_t write = NO_WRITE;
    e782:	f04f 31ff 	mov.w	r1, #4294967295
			break;
    e786:	e77a      	b.n	e67e <pinctrl_configure_pins+0x22>
			NRF_PSEL_UART(reg, RTS) = pin;
    e788:	9b01      	ldr	r3, [sp, #4]
    e78a:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    e78e:	2701      	movs	r7, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    e790:	463e      	mov	r6, r7
			write = 1U;
    e792:	4639      	mov	r1, r7
			break;
    e794:	e773      	b.n	e67e <pinctrl_configure_pins+0x22>
			NRF_PSEL_UART(reg, CTS) = pin;
    e796:	9b01      	ldr	r3, [sp, #4]
    e798:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    e79c:	2700      	movs	r7, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    e79e:	463e      	mov	r6, r7
		uint32_t write = NO_WRITE;
    e7a0:	f04f 31ff 	mov.w	r1, #4294967295
			break;
    e7a4:	e76b      	b.n	e67e <pinctrl_configure_pins+0x22>
			NRF_PSEL_SPIM(reg, SCK) = pin;
    e7a6:	9b01      	ldr	r3, [sp, #4]
    e7a8:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    e7ac:	2700      	movs	r7, #0
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    e7ae:	2601      	movs	r6, #1
			write = 0U;
    e7b0:	4639      	mov	r1, r7
			break;
    e7b2:	e764      	b.n	e67e <pinctrl_configure_pins+0x22>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    e7b4:	9b01      	ldr	r3, [sp, #4]
    e7b6:	f8c3 450c 	str.w	r4, [r3, #1292]	; 0x50c
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    e7ba:	2701      	movs	r7, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    e7bc:	463e      	mov	r6, r7
			write = 0U;
    e7be:	2100      	movs	r1, #0
			break;
    e7c0:	e75d      	b.n	e67e <pinctrl_configure_pins+0x22>
			NRF_PSEL_SPIM(reg, MISO) = pin;
    e7c2:	9b01      	ldr	r3, [sp, #4]
    e7c4:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    e7c8:	2700      	movs	r7, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    e7ca:	463e      	mov	r6, r7
		uint32_t write = NO_WRITE;
    e7cc:	f04f 31ff 	mov.w	r1, #4294967295
			break;
    e7d0:	e755      	b.n	e67e <pinctrl_configure_pins+0x22>
			NRF_PSEL_TWIM(reg, SCL) = pin;
    e7d2:	9b01      	ldr	r3, [sp, #4]
    e7d4:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    e7d8:	f1b9 0f00 	cmp.w	r9, #0
    e7dc:	d03e      	beq.n	e85c <pinctrl_configure_pins+0x200>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    e7de:	2700      	movs	r7, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    e7e0:	463e      	mov	r6, r7
		uint32_t write = NO_WRITE;
    e7e2:	f04f 31ff 	mov.w	r1, #4294967295
    e7e6:	e74a      	b.n	e67e <pinctrl_configure_pins+0x22>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    e7e8:	9b01      	ldr	r3, [sp, #4]
    e7ea:	f8c3 450c 	str.w	r4, [r3, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    e7ee:	f1b9 0f00 	cmp.w	r9, #0
    e7f2:	d03a      	beq.n	e86a <pinctrl_configure_pins+0x20e>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    e7f4:	2700      	movs	r7, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    e7f6:	463e      	mov	r6, r7
		uint32_t write = NO_WRITE;
    e7f8:	f04f 31ff 	mov.w	r1, #4294967295
    e7fc:	e73f      	b.n	e67e <pinctrl_configure_pins+0x22>
			NRF_PSEL_QSPI(reg, SCK) = pin;
    e7fe:	9b01      	ldr	r3, [sp, #4]
    e800:	f8c3 4524 	str.w	r4, [r3, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    e804:	2701      	movs	r7, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    e806:	2600      	movs	r6, #0
		uint32_t write = NO_WRITE;
    e808:	f04f 31ff 	mov.w	r1, #4294967295
			break;
    e80c:	e737      	b.n	e67e <pinctrl_configure_pins+0x22>
			NRF_PSEL_QSPI(reg, CSN) = pin;
    e80e:	9b01      	ldr	r3, [sp, #4]
    e810:	f8c3 4528 	str.w	r4, [r3, #1320]	; 0x528
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    e814:	2701      	movs	r7, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    e816:	463e      	mov	r6, r7
			write = 1U;
    e818:	4639      	mov	r1, r7
			break;
    e81a:	e730      	b.n	e67e <pinctrl_configure_pins+0x22>
			NRF_PSEL_QSPI(reg, IO0) = pin;
    e81c:	9b01      	ldr	r3, [sp, #4]
    e81e:	f8c3 4530 	str.w	r4, [r3, #1328]	; 0x530
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    e822:	2701      	movs	r7, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    e824:	2600      	movs	r6, #0
		uint32_t write = NO_WRITE;
    e826:	f04f 31ff 	mov.w	r1, #4294967295
			break;
    e82a:	e728      	b.n	e67e <pinctrl_configure_pins+0x22>
			NRF_PSEL_QSPI(reg, IO1) = pin;
    e82c:	9b01      	ldr	r3, [sp, #4]
    e82e:	f8c3 4534 	str.w	r4, [r3, #1332]	; 0x534
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    e832:	2701      	movs	r7, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    e834:	2600      	movs	r6, #0
		uint32_t write = NO_WRITE;
    e836:	f04f 31ff 	mov.w	r1, #4294967295
			break;
    e83a:	e720      	b.n	e67e <pinctrl_configure_pins+0x22>
			NRF_PSEL_QSPI(reg, IO2) = pin;
    e83c:	9b01      	ldr	r3, [sp, #4]
    e83e:	f8c3 4538 	str.w	r4, [r3, #1336]	; 0x538
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    e842:	2701      	movs	r7, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    e844:	2600      	movs	r6, #0
		uint32_t write = NO_WRITE;
    e846:	f04f 31ff 	mov.w	r1, #4294967295
			break;
    e84a:	e718      	b.n	e67e <pinctrl_configure_pins+0x22>
			NRF_PSEL_QSPI(reg, IO3) = pin;
    e84c:	9b01      	ldr	r3, [sp, #4]
    e84e:	f8c3 453c 	str.w	r4, [r3, #1340]	; 0x53c
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    e852:	2701      	movs	r7, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    e854:	2600      	movs	r6, #0
		uint32_t write = NO_WRITE;
    e856:	f04f 31ff 	mov.w	r1, #4294967295
			break;
    e85a:	e710      	b.n	e67e <pinctrl_configure_pins+0x22>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    e85c:	464f      	mov	r7, r9
			dir = NRF_GPIO_PIN_DIR_INPUT;
    e85e:	464e      	mov	r6, r9
		uint32_t write = NO_WRITE;
    e860:	f04f 31ff 	mov.w	r1, #4294967295
				drive = NRF_DRIVE_S0D1;
    e864:	f04f 0906 	mov.w	r9, #6
    e868:	e709      	b.n	e67e <pinctrl_configure_pins+0x22>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    e86a:	464f      	mov	r7, r9
			dir = NRF_GPIO_PIN_DIR_INPUT;
    e86c:	464e      	mov	r6, r9
		uint32_t write = NO_WRITE;
    e86e:	f04f 31ff 	mov.w	r1, #4294967295
				drive = NRF_DRIVE_S0D1;
    e872:	f04f 0906 	mov.w	r9, #6
    e876:	e702      	b.n	e67e <pinctrl_configure_pins+0x22>
				nrf_gpio_pin_write(pin, write);
    e878:	4620      	mov	r0, r4
    e87a:	f7ff fecf 	bl	e61c <nrf_gpio_pin_write>
    e87e:	e704      	b.n	e68a <pinctrl_configure_pins+0x2e>
        case 1: return NRF_P1;
    e880:	4904      	ldr	r1, [pc, #16]	; (e894 <pinctrl_configure_pins+0x238>)
    e882:	e713      	b.n	e6ac <pinctrl_configure_pins+0x50>
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    e884:	2000      	movs	r0, #0
    e886:	e001      	b.n	e88c <pinctrl_configure_pins+0x230>
		switch (NRF_GET_FUN(pins[i])) {
    e888:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    e88c:	b003      	add	sp, #12
    e88e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e892:	bf00      	nop
    e894:	50000300 	.word	0x50000300

0000e898 <callback_ctrl>:
static struct k_spinlock lock;
static sys_slist_t button_handlers;
static struct k_mutex button_handler_mut;

static int callback_ctrl(bool enable)
{
    e898:	b538      	push	{r3, r4, r5, lr}
	gpio_flags_t flags = enable ? GPIO_INT_LEVEL_ACTIVE : GPIO_INT_DISABLE;
    e89a:	b120      	cbz	r0, e8a6 <callback_ctrl+0xe>
    e89c:	f04f 6598 	mov.w	r5, #79691776	; 0x4c00000
	int err = 0;

	/* This must be done with irqs disabled to avoid pin callback
	 * being fired before others are still not activated.
	 */
	for (size_t i = 0; (i < ARRAY_SIZE(buttons)) && !err; i++) {
    e8a0:	2400      	movs	r4, #0
	int err = 0;
    e8a2:	4620      	mov	r0, r4
	for (size_t i = 0; (i < ARRAY_SIZE(buttons)) && !err; i++) {
    e8a4:	e00c      	b.n	e8c0 <callback_ctrl+0x28>
	gpio_flags_t flags = enable ? GPIO_INT_LEVEL_ACTIVE : GPIO_INT_DISABLE;
    e8a6:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
    e8aa:	e7f9      	b.n	e8a0 <callback_ctrl+0x8>
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
    e8ac:	4b07      	ldr	r3, [pc, #28]	; (e8cc <callback_ctrl+0x34>)
    e8ae:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
    e8b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    e8b6:	7919      	ldrb	r1, [r3, #4]
    e8b8:	462a      	mov	r2, r5
    e8ba:	f00f ff2f 	bl	1e71c <z_impl_gpio_pin_interrupt_configure>
	for (size_t i = 0; (i < ARRAY_SIZE(buttons)) && !err; i++) {
    e8be:	3401      	adds	r4, #1
    e8c0:	2c03      	cmp	r4, #3
    e8c2:	d801      	bhi.n	e8c8 <callback_ctrl+0x30>
    e8c4:	2800      	cmp	r0, #0
    e8c6:	d0f1      	beq.n	e8ac <callback_ctrl+0x14>
		err = gpio_pin_interrupt_configure_dt(&buttons[i], flags);
	}

	return err;
}
    e8c8:	bd38      	pop	{r3, r4, r5, pc}
    e8ca:	bf00      	nop
    e8cc:	000223d4 	.word	0x000223d4

0000e8d0 <get_buttons>:

static uint32_t get_buttons(void)
{
    e8d0:	b530      	push	{r4, r5, lr}
    e8d2:	b089      	sub	sp, #36	; 0x24
	uint32_t ret = 0;
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
    e8d4:	2400      	movs	r4, #0
	uint32_t ret = 0;
    e8d6:	4625      	mov	r5, r4
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
    e8d8:	e029      	b.n	e92e <get_buttons+0x5e>
		int val;

		val = gpio_pin_get_dt(&buttons[i]);
		if (val < 0) {
			LOG_ERR("Cannot read gpio pin");
    e8da:	4b1e      	ldr	r3, [pc, #120]	; (e954 <get_buttons+0x84>)
    e8dc:	9307      	str	r3, [sp, #28]
    e8de:	2302      	movs	r3, #2
    e8e0:	f88d 3004 	strb.w	r3, [sp, #4]
    e8e4:	2500      	movs	r5, #0
    e8e6:	f88d 5005 	strb.w	r5, [sp, #5]
    e8ea:	f88d 5006 	strb.w	r5, [sp, #6]
    e8ee:	f88d 5007 	strb.w	r5, [sp, #7]
    e8f2:	9b01      	ldr	r3, [sp, #4]
    e8f4:	9306      	str	r3, [sp, #24]
    e8f6:	4629      	mov	r1, r5
    e8f8:	f365 0100 	bfi	r1, r5, #0, #1
    e8fc:	f365 0141 	bfi	r1, r5, #1, #1
    e900:	f365 0182 	bfi	r1, r5, #2, #1
    e904:	f365 01c5 	bfi	r1, r5, #3, #3
    e908:	2301      	movs	r3, #1
    e90a:	f363 1188 	bfi	r1, r3, #6, #3
    e90e:	2308      	movs	r3, #8
    e910:	f363 2152 	bfi	r1, r3, #9, #10
    e914:	f365 41de 	bfi	r1, r5, #19, #12
    e918:	f365 71df 	bfi	r1, r5, #31, #1
    e91c:	462b      	mov	r3, r5
    e91e:	aa06      	add	r2, sp, #24
    e920:	480d      	ldr	r0, [pc, #52]	; (e958 <get_buttons+0x88>)
    e922:	f009 f883 	bl	17a2c <z_impl_z_log_msg_static_create>
			ret |= 1U << i;
		}
	}

	return ret;
}
    e926:	4628      	mov	r0, r5
    e928:	b009      	add	sp, #36	; 0x24
    e92a:	bd30      	pop	{r4, r5, pc}
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
    e92c:	3401      	adds	r4, #1
    e92e:	2c03      	cmp	r4, #3
    e930:	d8f9      	bhi.n	e926 <get_buttons+0x56>
	return gpio_pin_get(spec->port, spec->pin);
    e932:	4a0a      	ldr	r2, [pc, #40]	; (e95c <get_buttons+0x8c>)
    e934:	eb02 03c4 	add.w	r3, r2, r4, lsl #3
    e938:	7919      	ldrb	r1, [r3, #4]
    e93a:	f852 0034 	ldr.w	r0, [r2, r4, lsl #3]
    e93e:	f00f ff40 	bl	1e7c2 <gpio_pin_get>
		if (val < 0) {
    e942:	2800      	cmp	r0, #0
    e944:	dbc9      	blt.n	e8da <get_buttons+0xa>
		if (val) {
    e946:	2800      	cmp	r0, #0
    e948:	d0f0      	beq.n	e92c <get_buttons+0x5c>
			ret |= 1U << i;
    e94a:	2301      	movs	r3, #1
    e94c:	40a3      	lsls	r3, r4
    e94e:	431d      	orrs	r5, r3
    e950:	e7ec      	b.n	e92c <get_buttons+0x5c>
    e952:	bf00      	nop
    e954:	000222c8 	.word	0x000222c8
    e958:	00020a68 	.word	0x00020a68
    e95c:	000223d4 	.word	0x000223d4

0000e960 <button_pressed>:
	return dk_set_leds_state(DK_NO_LEDS_MSK, DK_ALL_LEDS_MSK);
}

static void button_pressed(const struct device *gpio_dev, struct gpio_callback *cb,
		    uint32_t pins)
{
    e960:	b510      	push	{r4, lr}
    e962:	b088      	sub	sp, #32
	__asm__ volatile(
    e964:	f04f 0320 	mov.w	r3, #32
    e968:	f3ef 8411 	mrs	r4, BASEPRI
    e96c:	f383 8812 	msr	BASEPRI_MAX, r3
    e970:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Disable GPIO interrupt */
	int err = callback_ctrl(false);
    e974:	2000      	movs	r0, #0
    e976:	f7ff ff8f 	bl	e898 <callback_ctrl>

	if (err) {
    e97a:	b940      	cbnz	r0, e98e <button_pressed+0x2e>
		LOG_ERR("Cannot disable callbacks");
	}

	switch (state) {
    e97c:	4b1b      	ldr	r3, [pc, #108]	; (e9ec <button_pressed+0x8c>)
    e97e:	781b      	ldrb	r3, [r3, #0]
    e980:	b35b      	cbz	r3, e9da <button_pressed+0x7a>
	__asm__ volatile(
    e982:	f384 8811 	msr	BASEPRI, r4
    e986:	f3bf 8f6f 	isb	sy
		__ASSERT_NO_MSG(false);
		break;
	}

	k_spin_unlock(&lock, key);
}
    e98a:	b008      	add	sp, #32
    e98c:	bd10      	pop	{r4, pc}
		LOG_ERR("Cannot disable callbacks");
    e98e:	4b18      	ldr	r3, [pc, #96]	; (e9f0 <button_pressed+0x90>)
    e990:	9307      	str	r3, [sp, #28]
    e992:	2302      	movs	r3, #2
    e994:	f88d 3004 	strb.w	r3, [sp, #4]
    e998:	2300      	movs	r3, #0
    e99a:	f88d 3005 	strb.w	r3, [sp, #5]
    e99e:	f88d 3006 	strb.w	r3, [sp, #6]
    e9a2:	f88d 3007 	strb.w	r3, [sp, #7]
    e9a6:	9a01      	ldr	r2, [sp, #4]
    e9a8:	9206      	str	r2, [sp, #24]
    e9aa:	4619      	mov	r1, r3
    e9ac:	f363 0100 	bfi	r1, r3, #0, #1
    e9b0:	f363 0141 	bfi	r1, r3, #1, #1
    e9b4:	f363 0182 	bfi	r1, r3, #2, #1
    e9b8:	f363 01c5 	bfi	r1, r3, #3, #3
    e9bc:	2201      	movs	r2, #1
    e9be:	f362 1188 	bfi	r1, r2, #6, #3
    e9c2:	2208      	movs	r2, #8
    e9c4:	f362 2152 	bfi	r1, r2, #9, #10
    e9c8:	f363 41de 	bfi	r1, r3, #19, #12
    e9cc:	f363 71df 	bfi	r1, r3, #31, #1
    e9d0:	aa06      	add	r2, sp, #24
    e9d2:	4808      	ldr	r0, [pc, #32]	; (e9f4 <button_pressed+0x94>)
    e9d4:	f009 f82a 	bl	17a2c <z_impl_z_log_msg_static_create>
    e9d8:	e7d0      	b.n	e97c <button_pressed+0x1c>
		state = STATE_SCANNING;
    e9da:	4b04      	ldr	r3, [pc, #16]	; (e9ec <button_pressed+0x8c>)
    e9dc:	2201      	movs	r2, #1
    e9de:	701a      	strb	r2, [r3, #0]
		k_work_reschedule(&buttons_scan, K_MSEC(1));
    e9e0:	2221      	movs	r2, #33	; 0x21
    e9e2:	2300      	movs	r3, #0
    e9e4:	4804      	ldr	r0, [pc, #16]	; (e9f8 <button_pressed+0x98>)
    e9e6:	f002 fdcd 	bl	11584 <k_work_reschedule>
		break;
    e9ea:	e7ca      	b.n	e982 <button_pressed+0x22>
    e9ec:	200042b0 	.word	0x200042b0
    e9f0:	000222e0 	.word	0x000222e0
    e9f4:	00020a68 	.word	0x00020a68
    e9f8:	20001c60 	.word	0x20001c60

0000e9fc <button_handlers_call>:
{
    e9fc:	b570      	push	{r4, r5, r6, lr}
    e9fe:	4605      	mov	r5, r0
    ea00:	460e      	mov	r6, r1
	if (button_handler_cb != NULL) {
    ea02:	4b0f      	ldr	r3, [pc, #60]	; (ea40 <button_handlers_call+0x44>)
    ea04:	681b      	ldr	r3, [r3, #0]
    ea06:	b103      	cbz	r3, ea0a <button_handlers_call+0xe>
		button_handler_cb(button_state, has_changed);
    ea08:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
    ea0a:	f04f 32ff 	mov.w	r2, #4294967295
    ea0e:	f04f 33ff 	mov.w	r3, #4294967295
    ea12:	480c      	ldr	r0, [pc, #48]	; (ea44 <button_handlers_call+0x48>)
    ea14:	f002 fafc 	bl	11010 <z_impl_k_mutex_lock>
	return list->head;
    ea18:	4b0b      	ldr	r3, [pc, #44]	; (ea48 <button_handlers_call+0x4c>)
    ea1a:	681c      	ldr	r4, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
    ea1c:	b114      	cbz	r4, ea24 <button_handlers_call+0x28>
    ea1e:	3c04      	subs	r4, #4
    ea20:	e000      	b.n	ea24 <button_handlers_call+0x28>
    ea22:	3c04      	subs	r4, #4
    ea24:	b13c      	cbz	r4, ea36 <button_handlers_call+0x3a>
			handler->cb(button_state, has_changed);
    ea26:	6823      	ldr	r3, [r4, #0]
    ea28:	4631      	mov	r1, r6
    ea2a:	4628      	mov	r0, r5
    ea2c:	4798      	blx	r3
	return node->next;
    ea2e:	6864      	ldr	r4, [r4, #4]
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
    ea30:	2c00      	cmp	r4, #0
    ea32:	d1f6      	bne.n	ea22 <button_handlers_call+0x26>
    ea34:	e7f6      	b.n	ea24 <button_handlers_call+0x28>
	return z_impl_k_mutex_unlock(mutex);
    ea36:	4803      	ldr	r0, [pc, #12]	; (ea44 <button_handlers_call+0x48>)
    ea38:	f002 fb6e 	bl	11118 <z_impl_k_mutex_unlock>
}
    ea3c:	bd70      	pop	{r4, r5, r6, pc}
    ea3e:	bf00      	nop
    ea40:	200032c8 	.word	0x200032c8
    ea44:	2000329c 	.word	0x2000329c
    ea48:	200032b0 	.word	0x200032b0

0000ea4c <buttons_scan_fn>:
{
    ea4c:	b510      	push	{r4, lr}
    ea4e:	b088      	sub	sp, #32
	button_scan = get_buttons();
    ea50:	f7ff ff3e 	bl	e8d0 <get_buttons>
    ea54:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    ea56:	4b32      	ldr	r3, [pc, #200]	; (eb20 <buttons_scan_fn+0xd4>)
    ea58:	f3bf 8f5b 	dmb	ish
    ea5c:	e853 2f00 	ldrex	r2, [r3]
    ea60:	e843 4100 	strex	r1, r4, [r3]
    ea64:	2900      	cmp	r1, #0
    ea66:	d1f9      	bne.n	ea5c <buttons_scan_fn+0x10>
    ea68:	f3bf 8f5b 	dmb	ish
	if (!initial_run) {
    ea6c:	4b2d      	ldr	r3, [pc, #180]	; (eb24 <buttons_scan_fn+0xd8>)
    ea6e:	781b      	ldrb	r3, [r3, #0]
    ea70:	b943      	cbnz	r3, ea84 <buttons_scan_fn+0x38>
		if (button_scan != last_button_scan) {
    ea72:	4b2d      	ldr	r3, [pc, #180]	; (eb28 <buttons_scan_fn+0xdc>)
    ea74:	6819      	ldr	r1, [r3, #0]
    ea76:	42a1      	cmp	r1, r4
    ea78:	d007      	beq.n	ea8a <buttons_scan_fn+0x3e>
			button_handlers_call(button_scan, has_changed);
    ea7a:	4061      	eors	r1, r4
    ea7c:	4620      	mov	r0, r4
    ea7e:	f7ff ffbd 	bl	e9fc <button_handlers_call>
    ea82:	e002      	b.n	ea8a <buttons_scan_fn+0x3e>
		initial_run = false;
    ea84:	4b27      	ldr	r3, [pc, #156]	; (eb24 <buttons_scan_fn+0xd8>)
    ea86:	2200      	movs	r2, #0
    ea88:	701a      	strb	r2, [r3, #0]
	last_button_scan = button_scan;
    ea8a:	4b27      	ldr	r3, [pc, #156]	; (eb28 <buttons_scan_fn+0xdc>)
    ea8c:	601c      	str	r4, [r3, #0]
	if (button_scan != 0) {
    ea8e:	b99c      	cbnz	r4, eab8 <buttons_scan_fn+0x6c>
	__asm__ volatile(
    ea90:	f04f 0320 	mov.w	r3, #32
    ea94:	f3ef 8411 	mrs	r4, BASEPRI
    ea98:	f383 8812 	msr	BASEPRI_MAX, r3
    ea9c:	f3bf 8f6f 	isb	sy
		switch (state) {
    eaa0:	4b22      	ldr	r3, [pc, #136]	; (eb2c <buttons_scan_fn+0xe0>)
    eaa2:	781b      	ldrb	r3, [r3, #0]
    eaa4:	2b01      	cmp	r3, #1
    eaa6:	d00e      	beq.n	eac6 <buttons_scan_fn+0x7a>
		int err = 0;
    eaa8:	2000      	movs	r0, #0
	__asm__ volatile(
    eaaa:	f384 8811 	msr	BASEPRI, r4
    eaae:	f3bf 8f6f 	isb	sy
		if (err) {
    eab2:	b978      	cbnz	r0, ead4 <buttons_scan_fn+0x88>
}
    eab4:	b008      	add	sp, #32
    eab6:	bd10      	pop	{r4, pc}
		k_work_reschedule(&buttons_scan,
    eab8:	f44f 72a4 	mov.w	r2, #328	; 0x148
    eabc:	2300      	movs	r3, #0
    eabe:	481c      	ldr	r0, [pc, #112]	; (eb30 <buttons_scan_fn+0xe4>)
    eac0:	f002 fd60 	bl	11584 <k_work_reschedule>
    eac4:	e7f6      	b.n	eab4 <buttons_scan_fn+0x68>
			state = STATE_WAITING;
    eac6:	4b19      	ldr	r3, [pc, #100]	; (eb2c <buttons_scan_fn+0xe0>)
    eac8:	2200      	movs	r2, #0
    eaca:	701a      	strb	r2, [r3, #0]
			err = callback_ctrl(true);
    eacc:	2001      	movs	r0, #1
    eace:	f7ff fee3 	bl	e898 <callback_ctrl>
			break;
    ead2:	e7ea      	b.n	eaaa <buttons_scan_fn+0x5e>
			LOG_ERR("Cannot enable callbacks");
    ead4:	4b17      	ldr	r3, [pc, #92]	; (eb34 <buttons_scan_fn+0xe8>)
    ead6:	9307      	str	r3, [sp, #28]
    ead8:	2302      	movs	r3, #2
    eada:	f88d 3004 	strb.w	r3, [sp, #4]
    eade:	2300      	movs	r3, #0
    eae0:	f88d 3005 	strb.w	r3, [sp, #5]
    eae4:	f88d 3006 	strb.w	r3, [sp, #6]
    eae8:	f88d 3007 	strb.w	r3, [sp, #7]
    eaec:	9a01      	ldr	r2, [sp, #4]
    eaee:	9206      	str	r2, [sp, #24]
    eaf0:	4619      	mov	r1, r3
    eaf2:	f363 0100 	bfi	r1, r3, #0, #1
    eaf6:	f363 0141 	bfi	r1, r3, #1, #1
    eafa:	f363 0182 	bfi	r1, r3, #2, #1
    eafe:	f363 01c5 	bfi	r1, r3, #3, #3
    eb02:	2201      	movs	r2, #1
    eb04:	f362 1188 	bfi	r1, r2, #6, #3
    eb08:	2208      	movs	r2, #8
    eb0a:	f362 2152 	bfi	r1, r2, #9, #10
    eb0e:	f363 41de 	bfi	r1, r3, #19, #12
    eb12:	f363 71df 	bfi	r1, r3, #31, #1
    eb16:	aa06      	add	r2, sp, #24
    eb18:	4807      	ldr	r0, [pc, #28]	; (eb38 <buttons_scan_fn+0xec>)
    eb1a:	f008 ff87 	bl	17a2c <z_impl_z_log_msg_static_create>
}
    eb1e:	e7c9      	b.n	eab4 <buttons_scan_fn+0x68>
    eb20:	200032c4 	.word	0x200032c4
    eb24:	20000378 	.word	0x20000378
    eb28:	20003298 	.word	0x20003298
    eb2c:	200042b0 	.word	0x200042b0
    eb30:	20001c60 	.word	0x20001c60
    eb34:	000222fc 	.word	0x000222fc
    eb38:	00020a68 	.word	0x00020a68

0000eb3c <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    eb3c:	f3bf 8f5b 	dmb	ish
    eb40:	4b06      	ldr	r3, [pc, #24]	; (eb5c <dk_read_buttons+0x20>)
    eb42:	681b      	ldr	r3, [r3, #0]
    eb44:	f3bf 8f5b 	dmb	ish
void dk_read_buttons(uint32_t *button_state, uint32_t *has_changed)
{
	static uint32_t last_state;
	uint32_t current_state = atomic_get(&my_buttons);

	if (button_state != NULL) {
    eb48:	b100      	cbz	r0, eb4c <dk_read_buttons+0x10>
		*button_state = current_state;
    eb4a:	6003      	str	r3, [r0, #0]
	}

	if (has_changed != NULL) {
    eb4c:	b119      	cbz	r1, eb56 <dk_read_buttons+0x1a>
		*has_changed = (current_state ^ last_state);
    eb4e:	4a04      	ldr	r2, [pc, #16]	; (eb60 <dk_read_buttons+0x24>)
    eb50:	6812      	ldr	r2, [r2, #0]
    eb52:	405a      	eors	r2, r3
    eb54:	600a      	str	r2, [r1, #0]
	}

	last_state = current_state;
    eb56:	4a02      	ldr	r2, [pc, #8]	; (eb60 <dk_read_buttons+0x24>)
    eb58:	6013      	str	r3, [r2, #0]
}
    eb5a:	4770      	bx	lr
    eb5c:	200032c4 	.word	0x200032c4
    eb60:	20003294 	.word	0x20003294

0000eb64 <dk_buttons_init>:
{
    eb64:	b570      	push	{r4, r5, r6, lr}
    eb66:	b094      	sub	sp, #80	; 0x50
	button_handler_cb = button_handler;
    eb68:	4b6d      	ldr	r3, [pc, #436]	; (ed20 <dk_buttons_init+0x1bc>)
    eb6a:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_init(mutex);
    eb6c:	486d      	ldr	r0, [pc, #436]	; (ed24 <dk_buttons_init+0x1c0>)
    eb6e:	f010 fa5e 	bl	1f02e <z_impl_k_mutex_init>
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
    eb72:	2400      	movs	r4, #0
    eb74:	e00a      	b.n	eb8c <dk_buttons_init+0x28>
			GPIO_PULL_UP : GPIO_PULL_DOWN;
    eb76:	2120      	movs	r1, #32
		err = gpio_pin_configure_dt(&buttons[i], GPIO_INPUT | flags);
    eb78:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
    eb7c:	486a      	ldr	r0, [pc, #424]	; (ed28 <dk_buttons_init+0x1c4>)
    eb7e:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
    eb82:	f00f fe07 	bl	1e794 <gpio_pin_configure_dt>
		if (err) {
    eb86:	4606      	mov	r6, r0
    eb88:	b958      	cbnz	r0, eba2 <dk_buttons_init+0x3e>
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
    eb8a:	3401      	adds	r4, #1
    eb8c:	2c03      	cmp	r4, #3
    eb8e:	d82e      	bhi.n	ebee <dk_buttons_init+0x8a>
			buttons[i].dt_flags & GPIO_ACTIVE_LOW ?
    eb90:	4b65      	ldr	r3, [pc, #404]	; (ed28 <dk_buttons_init+0x1c4>)
    eb92:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    eb96:	88db      	ldrh	r3, [r3, #6]
			GPIO_PULL_UP : GPIO_PULL_DOWN;
    eb98:	f013 0f01 	tst.w	r3, #1
    eb9c:	d0eb      	beq.n	eb76 <dk_buttons_init+0x12>
    eb9e:	2110      	movs	r1, #16
    eba0:	e7ea      	b.n	eb78 <dk_buttons_init+0x14>
			LOG_ERR("Cannot configure button gpio");
    eba2:	4b62      	ldr	r3, [pc, #392]	; (ed2c <dk_buttons_init+0x1c8>)
    eba4:	9313      	str	r3, [sp, #76]	; 0x4c
    eba6:	2302      	movs	r3, #2
    eba8:	f88d 3004 	strb.w	r3, [sp, #4]
    ebac:	2300      	movs	r3, #0
    ebae:	f88d 3005 	strb.w	r3, [sp, #5]
    ebb2:	f88d 3006 	strb.w	r3, [sp, #6]
    ebb6:	f88d 3007 	strb.w	r3, [sp, #7]
    ebba:	9a01      	ldr	r2, [sp, #4]
    ebbc:	9212      	str	r2, [sp, #72]	; 0x48
    ebbe:	4619      	mov	r1, r3
    ebc0:	f363 0100 	bfi	r1, r3, #0, #1
    ebc4:	f363 0141 	bfi	r1, r3, #1, #1
    ebc8:	f363 0182 	bfi	r1, r3, #2, #1
    ebcc:	f363 01c5 	bfi	r1, r3, #3, #3
    ebd0:	2201      	movs	r2, #1
    ebd2:	f362 1188 	bfi	r1, r2, #6, #3
    ebd6:	2208      	movs	r2, #8
    ebd8:	f362 2152 	bfi	r1, r2, #9, #10
    ebdc:	f363 41de 	bfi	r1, r3, #19, #12
    ebe0:	f363 71df 	bfi	r1, r3, #31, #1
    ebe4:	aa12      	add	r2, sp, #72	; 0x48
    ebe6:	4852      	ldr	r0, [pc, #328]	; (ed30 <dk_buttons_init+0x1cc>)
    ebe8:	f008 ff20 	bl	17a2c <z_impl_z_log_msg_static_create>
			return err;
    ebec:	e095      	b.n	ed1a <dk_buttons_init+0x1b6>
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
    ebee:	2400      	movs	r4, #0
	uint32_t pin_mask = 0;
    ebf0:	4625      	mov	r5, r4
    ebf2:	e007      	b.n	ec04 <dk_buttons_init+0xa0>
		pin_mask |= BIT(buttons[i].pin);
    ebf4:	4b4c      	ldr	r3, [pc, #304]	; (ed28 <dk_buttons_init+0x1c4>)
    ebf6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    ebfa:	791a      	ldrb	r2, [r3, #4]
    ebfc:	2301      	movs	r3, #1
    ebfe:	4093      	lsls	r3, r2
    ec00:	431d      	orrs	r5, r3
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
    ec02:	3401      	adds	r4, #1
    ec04:	2c03      	cmp	r4, #3
    ec06:	d832      	bhi.n	ec6e <dk_buttons_init+0x10a>
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
    ec08:	4b47      	ldr	r3, [pc, #284]	; (ed28 <dk_buttons_init+0x1c4>)
    ec0a:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
    ec0e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    ec12:	7919      	ldrb	r1, [r3, #4]
    ec14:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    ec18:	f00f fd80 	bl	1e71c <z_impl_gpio_pin_interrupt_configure>
		if (err) {
    ec1c:	4606      	mov	r6, r0
    ec1e:	2800      	cmp	r0, #0
    ec20:	d0e8      	beq.n	ebf4 <dk_buttons_init+0x90>
			LOG_ERR("Cannot disable callbacks()");
    ec22:	4b44      	ldr	r3, [pc, #272]	; (ed34 <dk_buttons_init+0x1d0>)
    ec24:	930d      	str	r3, [sp, #52]	; 0x34
    ec26:	2302      	movs	r3, #2
    ec28:	f88d 3004 	strb.w	r3, [sp, #4]
    ec2c:	2300      	movs	r3, #0
    ec2e:	f88d 3005 	strb.w	r3, [sp, #5]
    ec32:	f88d 3006 	strb.w	r3, [sp, #6]
    ec36:	f88d 3007 	strb.w	r3, [sp, #7]
    ec3a:	9a01      	ldr	r2, [sp, #4]
    ec3c:	920c      	str	r2, [sp, #48]	; 0x30
    ec3e:	4619      	mov	r1, r3
    ec40:	f363 0100 	bfi	r1, r3, #0, #1
    ec44:	f363 0141 	bfi	r1, r3, #1, #1
    ec48:	f363 0182 	bfi	r1, r3, #2, #1
    ec4c:	f363 01c5 	bfi	r1, r3, #3, #3
    ec50:	2201      	movs	r2, #1
    ec52:	f362 1188 	bfi	r1, r2, #6, #3
    ec56:	2208      	movs	r2, #8
    ec58:	f362 2152 	bfi	r1, r2, #9, #10
    ec5c:	f363 41de 	bfi	r1, r3, #19, #12
    ec60:	f363 71df 	bfi	r1, r3, #31, #1
    ec64:	aa0c      	add	r2, sp, #48	; 0x30
    ec66:	4832      	ldr	r0, [pc, #200]	; (ed30 <dk_buttons_init+0x1cc>)
    ec68:	f008 fee0 	bl	17a2c <z_impl_z_log_msg_static_create>
			return err;
    ec6c:	e055      	b.n	ed1a <dk_buttons_init+0x1b6>
	callback->handler = handler;
    ec6e:	4b32      	ldr	r3, [pc, #200]	; (ed38 <dk_buttons_init+0x1d4>)
    ec70:	4a32      	ldr	r2, [pc, #200]	; (ed3c <dk_buttons_init+0x1d8>)
    ec72:	605a      	str	r2, [r3, #4]
	callback->pin_mask = pin_mask;
    ec74:	609d      	str	r5, [r3, #8]
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
    ec76:	2400      	movs	r4, #0
    ec78:	2c03      	cmp	r4, #3
    ec7a:	d82f      	bhi.n	ecdc <dk_buttons_init+0x178>
		err = gpio_add_callback(buttons[i].port, &gpio_cb);
    ec7c:	492e      	ldr	r1, [pc, #184]	; (ed38 <dk_buttons_init+0x1d4>)
    ec7e:	4b2a      	ldr	r3, [pc, #168]	; (ed28 <dk_buttons_init+0x1c4>)
    ec80:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
    ec84:	f00f fdca 	bl	1e81c <gpio_add_callback>
		if (err) {
    ec88:	4606      	mov	r6, r0
    ec8a:	b908      	cbnz	r0, ec90 <dk_buttons_init+0x12c>
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
    ec8c:	3401      	adds	r4, #1
    ec8e:	e7f3      	b.n	ec78 <dk_buttons_init+0x114>
			LOG_ERR("Cannot add callback");
    ec90:	4b2b      	ldr	r3, [pc, #172]	; (ed40 <dk_buttons_init+0x1dc>)
    ec92:	9307      	str	r3, [sp, #28]
    ec94:	2302      	movs	r3, #2
    ec96:	f88d 3004 	strb.w	r3, [sp, #4]
    ec9a:	2300      	movs	r3, #0
    ec9c:	f88d 3005 	strb.w	r3, [sp, #5]
    eca0:	f88d 3006 	strb.w	r3, [sp, #6]
    eca4:	f88d 3007 	strb.w	r3, [sp, #7]
    eca8:	9a01      	ldr	r2, [sp, #4]
    ecaa:	9206      	str	r2, [sp, #24]
    ecac:	4619      	mov	r1, r3
    ecae:	f363 0100 	bfi	r1, r3, #0, #1
    ecb2:	f363 0141 	bfi	r1, r3, #1, #1
    ecb6:	f363 0182 	bfi	r1, r3, #2, #1
    ecba:	f363 01c5 	bfi	r1, r3, #3, #3
    ecbe:	2201      	movs	r2, #1
    ecc0:	f362 1188 	bfi	r1, r2, #6, #3
    ecc4:	2208      	movs	r2, #8
    ecc6:	f362 2152 	bfi	r1, r2, #9, #10
    ecca:	f363 41de 	bfi	r1, r3, #19, #12
    ecce:	f363 71df 	bfi	r1, r3, #31, #1
    ecd2:	aa06      	add	r2, sp, #24
    ecd4:	4816      	ldr	r0, [pc, #88]	; (ed30 <dk_buttons_init+0x1cc>)
    ecd6:	f008 fea9 	bl	17a2c <z_impl_z_log_msg_static_create>
			return err;
    ecda:	e01e      	b.n	ed1a <dk_buttons_init+0x1b6>
	k_work_init_delayable(&buttons_scan, buttons_scan_fn);
    ecdc:	4c19      	ldr	r4, [pc, #100]	; (ed44 <dk_buttons_init+0x1e0>)
    ecde:	491a      	ldr	r1, [pc, #104]	; (ed48 <dk_buttons_init+0x1e4>)
    ece0:	4620      	mov	r0, r4
    ece2:	f010 fb87 	bl	1f3f4 <k_work_init_delayable>
	state = STATE_SCANNING;
    ece6:	4b19      	ldr	r3, [pc, #100]	; (ed4c <dk_buttons_init+0x1e8>)
    ece8:	2201      	movs	r2, #1
    ecea:	701a      	strb	r2, [r3, #0]
	k_work_schedule(&buttons_scan, K_NO_WAIT);
    ecec:	2200      	movs	r2, #0
    ecee:	2300      	movs	r3, #0
    ecf0:	4620      	mov	r0, r4
    ecf2:	f002 fc3f 	bl	11574 <k_work_schedule>
	dk_read_buttons(NULL, NULL);
    ecf6:	2100      	movs	r1, #0
    ecf8:	4608      	mov	r0, r1
    ecfa:	f7ff ff1f 	bl	eb3c <dk_read_buttons>
	atomic_set(&my_buttons, (atomic_val_t)get_buttons());
    ecfe:	f7ff fde7 	bl	e8d0 <get_buttons>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    ed02:	4b13      	ldr	r3, [pc, #76]	; (ed50 <dk_buttons_init+0x1ec>)
    ed04:	f3bf 8f5b 	dmb	ish
    ed08:	e853 2f00 	ldrex	r2, [r3]
    ed0c:	e843 0100 	strex	r1, r0, [r3]
    ed10:	2900      	cmp	r1, #0
    ed12:	d1f9      	bne.n	ed08 <dk_buttons_init+0x1a4>
    ed14:	f3bf 8f5b 	dmb	ish
	return 0;
    ed18:	2600      	movs	r6, #0
}
    ed1a:	4630      	mov	r0, r6
    ed1c:	b014      	add	sp, #80	; 0x50
    ed1e:	bd70      	pop	{r4, r5, r6, pc}
    ed20:	200032c8 	.word	0x200032c8
    ed24:	2000329c 	.word	0x2000329c
    ed28:	000223d4 	.word	0x000223d4
    ed2c:	00022314 	.word	0x00022314
    ed30:	00020a68 	.word	0x00020a68
    ed34:	00022334 	.word	0x00022334
    ed38:	200032b8 	.word	0x200032b8
    ed3c:	0000e961 	.word	0x0000e961
    ed40:	00022350 	.word	0x00022350
    ed44:	20001c60 	.word	0x20001c60
    ed48:	0000ea4d 	.word	0x0000ea4d
    ed4c:	200042b0 	.word	0x200042b0
    ed50:	200032c4 	.word	0x200032c4

0000ed54 <dk_set_leds_state>:
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
{
    ed54:	b5f0      	push	{r4, r5, r6, r7, lr}
    ed56:	b089      	sub	sp, #36	; 0x24
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
    ed58:	280f      	cmp	r0, #15
    ed5a:	d849      	bhi.n	edf0 <dk_set_leds_state+0x9c>
    ed5c:	4605      	mov	r5, r0
    ed5e:	460e      	mov	r6, r1
    ed60:	290f      	cmp	r1, #15
    ed62:	d848      	bhi.n	edf6 <dk_set_leds_state+0xa2>
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
    ed64:	2400      	movs	r4, #0
    ed66:	e00b      	b.n	ed80 <dk_set_leds_state+0x2c>
		int val, err;

		if (BIT(i) & leds_on_mask) {
			val = 1;
    ed68:	2201      	movs	r2, #1
	return gpio_pin_set(spec->port, spec->pin, value);
    ed6a:	4b24      	ldr	r3, [pc, #144]	; (edfc <dk_set_leds_state+0xa8>)
    ed6c:	eb03 01c4 	add.w	r1, r3, r4, lsl #3
    ed70:	7909      	ldrb	r1, [r1, #4]
    ed72:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
    ed76:	f00f fd44 	bl	1e802 <gpio_pin_set>
		} else {
			continue;
		}

		err = gpio_pin_set_dt(&leds[i], val);
		if (err) {
    ed7a:	4607      	mov	r7, r0
    ed7c:	b970      	cbnz	r0, ed9c <dk_set_leds_state+0x48>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
    ed7e:	3401      	adds	r4, #1
    ed80:	2c03      	cmp	r4, #3
    ed82:	d831      	bhi.n	ede8 <dk_set_leds_state+0x94>
		if (BIT(i) & leds_on_mask) {
    ed84:	fa25 f304 	lsr.w	r3, r5, r4
    ed88:	f013 0f01 	tst.w	r3, #1
    ed8c:	d1ec      	bne.n	ed68 <dk_set_leds_state+0x14>
		} else if (BIT(i) & leds_off_mask) {
    ed8e:	fa26 f304 	lsr.w	r3, r6, r4
    ed92:	f013 0f01 	tst.w	r3, #1
    ed96:	d0f2      	beq.n	ed7e <dk_set_leds_state+0x2a>
			val = 0;
    ed98:	2200      	movs	r2, #0
    ed9a:	e7e6      	b.n	ed6a <dk_set_leds_state+0x16>
			LOG_ERR("Cannot write LED gpio");
    ed9c:	4b18      	ldr	r3, [pc, #96]	; (ee00 <dk_set_leds_state+0xac>)
    ed9e:	9307      	str	r3, [sp, #28]
    eda0:	2302      	movs	r3, #2
    eda2:	f88d 3004 	strb.w	r3, [sp, #4]
    eda6:	2300      	movs	r3, #0
    eda8:	f88d 3005 	strb.w	r3, [sp, #5]
    edac:	f88d 3006 	strb.w	r3, [sp, #6]
    edb0:	f88d 3007 	strb.w	r3, [sp, #7]
    edb4:	9a01      	ldr	r2, [sp, #4]
    edb6:	9206      	str	r2, [sp, #24]
    edb8:	4619      	mov	r1, r3
    edba:	f363 0100 	bfi	r1, r3, #0, #1
    edbe:	f363 0141 	bfi	r1, r3, #1, #1
    edc2:	f363 0182 	bfi	r1, r3, #2, #1
    edc6:	f363 01c5 	bfi	r1, r3, #3, #3
    edca:	2201      	movs	r2, #1
    edcc:	f362 1188 	bfi	r1, r2, #6, #3
    edd0:	2208      	movs	r2, #8
    edd2:	f362 2152 	bfi	r1, r2, #9, #10
    edd6:	f363 41de 	bfi	r1, r3, #19, #12
    edda:	f363 71df 	bfi	r1, r3, #31, #1
    edde:	aa06      	add	r2, sp, #24
    ede0:	4808      	ldr	r0, [pc, #32]	; (ee04 <dk_set_leds_state+0xb0>)
    ede2:	f008 fe23 	bl	17a2c <z_impl_z_log_msg_static_create>
			return err;
    ede6:	e000      	b.n	edea <dk_set_leds_state+0x96>
		}
	}

	return 0;
    ede8:	2700      	movs	r7, #0
}
    edea:	4638      	mov	r0, r7
    edec:	b009      	add	sp, #36	; 0x24
    edee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
    edf0:	f06f 0715 	mvn.w	r7, #21
    edf4:	e7f9      	b.n	edea <dk_set_leds_state+0x96>
    edf6:	f06f 0715 	mvn.w	r7, #21
    edfa:	e7f6      	b.n	edea <dk_set_leds_state+0x96>
    edfc:	000223b4 	.word	0x000223b4
    ee00:	00022364 	.word	0x00022364
    ee04:	00020a68 	.word	0x00020a68

0000ee08 <dk_leds_init>:
{
    ee08:	b530      	push	{r4, r5, lr}
    ee0a:	b089      	sub	sp, #36	; 0x24
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
    ee0c:	2400      	movs	r4, #0
    ee0e:	2c03      	cmp	r4, #3
    ee10:	d830      	bhi.n	ee74 <dk_leds_init+0x6c>
		err = gpio_pin_configure_dt(&leds[i], GPIO_OUTPUT);
    ee12:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    ee16:	481b      	ldr	r0, [pc, #108]	; (ee84 <dk_leds_init+0x7c>)
    ee18:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
    ee1c:	f00f fcba 	bl	1e794 <gpio_pin_configure_dt>
		if (err) {
    ee20:	4605      	mov	r5, r0
    ee22:	b908      	cbnz	r0, ee28 <dk_leds_init+0x20>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
    ee24:	3401      	adds	r4, #1
    ee26:	e7f2      	b.n	ee0e <dk_leds_init+0x6>
			LOG_ERR("Cannot configure LED gpio");
    ee28:	4b17      	ldr	r3, [pc, #92]	; (ee88 <dk_leds_init+0x80>)
    ee2a:	9307      	str	r3, [sp, #28]
    ee2c:	2302      	movs	r3, #2
    ee2e:	f88d 3004 	strb.w	r3, [sp, #4]
    ee32:	2300      	movs	r3, #0
    ee34:	f88d 3005 	strb.w	r3, [sp, #5]
    ee38:	f88d 3006 	strb.w	r3, [sp, #6]
    ee3c:	f88d 3007 	strb.w	r3, [sp, #7]
    ee40:	9a01      	ldr	r2, [sp, #4]
    ee42:	9206      	str	r2, [sp, #24]
    ee44:	4619      	mov	r1, r3
    ee46:	f363 0100 	bfi	r1, r3, #0, #1
    ee4a:	f363 0141 	bfi	r1, r3, #1, #1
    ee4e:	f363 0182 	bfi	r1, r3, #2, #1
    ee52:	f363 01c5 	bfi	r1, r3, #3, #3
    ee56:	2201      	movs	r2, #1
    ee58:	f362 1188 	bfi	r1, r2, #6, #3
    ee5c:	2208      	movs	r2, #8
    ee5e:	f362 2152 	bfi	r1, r2, #9, #10
    ee62:	f363 41de 	bfi	r1, r3, #19, #12
    ee66:	f363 71df 	bfi	r1, r3, #31, #1
    ee6a:	aa06      	add	r2, sp, #24
    ee6c:	4807      	ldr	r0, [pc, #28]	; (ee8c <dk_leds_init+0x84>)
    ee6e:	f008 fddd 	bl	17a2c <z_impl_z_log_msg_static_create>
			return err;
    ee72:	e004      	b.n	ee7e <dk_leds_init+0x76>
	return dk_set_leds_state(DK_NO_LEDS_MSK, DK_ALL_LEDS_MSK);
    ee74:	210f      	movs	r1, #15
    ee76:	2000      	movs	r0, #0
    ee78:	f7ff ff6c 	bl	ed54 <dk_set_leds_state>
    ee7c:	4605      	mov	r5, r0
}
    ee7e:	4628      	mov	r0, r5
    ee80:	b009      	add	sp, #36	; 0x24
    ee82:	bd30      	pop	{r4, r5, pc}
    ee84:	000223b4 	.word	0x000223b4
    ee88:	0002237c 	.word	0x0002237c
    ee8c:	00020a68 	.word	0x00020a68

0000ee90 <dk_set_led>:

int dk_set_led(uint8_t led_idx, uint32_t val)
{
    ee90:	b510      	push	{r4, lr}
    ee92:	b08e      	sub	sp, #56	; 0x38
	int err;

	if (led_idx >= ARRAY_SIZE(leds)) {
    ee94:	2803      	cmp	r0, #3
    ee96:	d80d      	bhi.n	eeb4 <dk_set_led+0x24>
    ee98:	460a      	mov	r2, r1
    ee9a:	4b2d      	ldr	r3, [pc, #180]	; (ef50 <dk_set_led+0xc0>)
    ee9c:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
    eea0:	7909      	ldrb	r1, [r1, #4]
    eea2:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
    eea6:	f00f fcac 	bl	1e802 <gpio_pin_set>
		LOG_ERR("LED index out of the range");
		return -EINVAL;
	}
	err = gpio_pin_set_dt(&leds[led_idx], val);
	if (err) {
    eeaa:	4604      	mov	r4, r0
    eeac:	bb50      	cbnz	r0, ef04 <dk_set_led+0x74>
		LOG_ERR("Cannot write LED gpio");
	}
	return err;
}
    eeae:	4620      	mov	r0, r4
    eeb0:	b00e      	add	sp, #56	; 0x38
    eeb2:	bd10      	pop	{r4, pc}
		LOG_ERR("LED index out of the range");
    eeb4:	4b27      	ldr	r3, [pc, #156]	; (ef54 <dk_set_led+0xc4>)
    eeb6:	930d      	str	r3, [sp, #52]	; 0x34
    eeb8:	2302      	movs	r3, #2
    eeba:	f88d 3004 	strb.w	r3, [sp, #4]
    eebe:	2300      	movs	r3, #0
    eec0:	f88d 3005 	strb.w	r3, [sp, #5]
    eec4:	f88d 3006 	strb.w	r3, [sp, #6]
    eec8:	f88d 3007 	strb.w	r3, [sp, #7]
    eecc:	9a01      	ldr	r2, [sp, #4]
    eece:	920c      	str	r2, [sp, #48]	; 0x30
    eed0:	4619      	mov	r1, r3
    eed2:	f363 0100 	bfi	r1, r3, #0, #1
    eed6:	f363 0141 	bfi	r1, r3, #1, #1
    eeda:	f363 0182 	bfi	r1, r3, #2, #1
    eede:	f363 01c5 	bfi	r1, r3, #3, #3
    eee2:	2201      	movs	r2, #1
    eee4:	f362 1188 	bfi	r1, r2, #6, #3
    eee8:	2208      	movs	r2, #8
    eeea:	f362 2152 	bfi	r1, r2, #9, #10
    eeee:	f363 41de 	bfi	r1, r3, #19, #12
    eef2:	f363 71df 	bfi	r1, r3, #31, #1
    eef6:	aa0c      	add	r2, sp, #48	; 0x30
    eef8:	4817      	ldr	r0, [pc, #92]	; (ef58 <dk_set_led+0xc8>)
    eefa:	f008 fd97 	bl	17a2c <z_impl_z_log_msg_static_create>
		return -EINVAL;
    eefe:	f06f 0415 	mvn.w	r4, #21
    ef02:	e7d4      	b.n	eeae <dk_set_led+0x1e>
		LOG_ERR("Cannot write LED gpio");
    ef04:	4b15      	ldr	r3, [pc, #84]	; (ef5c <dk_set_led+0xcc>)
    ef06:	9307      	str	r3, [sp, #28]
    ef08:	2302      	movs	r3, #2
    ef0a:	f88d 3004 	strb.w	r3, [sp, #4]
    ef0e:	2300      	movs	r3, #0
    ef10:	f88d 3005 	strb.w	r3, [sp, #5]
    ef14:	f88d 3006 	strb.w	r3, [sp, #6]
    ef18:	f88d 3007 	strb.w	r3, [sp, #7]
    ef1c:	9a01      	ldr	r2, [sp, #4]
    ef1e:	9206      	str	r2, [sp, #24]
    ef20:	4619      	mov	r1, r3
    ef22:	f363 0100 	bfi	r1, r3, #0, #1
    ef26:	f363 0141 	bfi	r1, r3, #1, #1
    ef2a:	f363 0182 	bfi	r1, r3, #2, #1
    ef2e:	f363 01c5 	bfi	r1, r3, #3, #3
    ef32:	2201      	movs	r2, #1
    ef34:	f362 1188 	bfi	r1, r2, #6, #3
    ef38:	2208      	movs	r2, #8
    ef3a:	f362 2152 	bfi	r1, r2, #9, #10
    ef3e:	f363 41de 	bfi	r1, r3, #19, #12
    ef42:	f363 71df 	bfi	r1, r3, #31, #1
    ef46:	aa06      	add	r2, sp, #24
    ef48:	4803      	ldr	r0, [pc, #12]	; (ef58 <dk_set_led+0xc8>)
    ef4a:	f008 fd6f 	bl	17a2c <z_impl_z_log_msg_static_create>
    ef4e:	e7ae      	b.n	eeae <dk_set_led+0x1e>
    ef50:	000223b4 	.word	0x000223b4
    ef54:	00022398 	.word	0x00022398
    ef58:	00020a68 	.word	0x00020a68
    ef5c:	00022364 	.word	0x00022364

0000ef60 <mbedtls_md5_starts>:

/*
 * MD5 context setup
 */
int mbedtls_md5_starts( mbedtls_md5_context *ctx )
{
    ef60:	4603      	mov	r3, r0
    ctx->total[0] = 0;
    ef62:	2000      	movs	r0, #0
    ef64:	6018      	str	r0, [r3, #0]
    ctx->total[1] = 0;
    ef66:	6058      	str	r0, [r3, #4]

    ctx->state[0] = 0x67452301;
    ef68:	4a07      	ldr	r2, [pc, #28]	; (ef88 <mbedtls_md5_starts+0x28>)
    ef6a:	609a      	str	r2, [r3, #8]
    ctx->state[1] = 0xEFCDAB89;
    ef6c:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
    ef70:	60da      	str	r2, [r3, #12]
    ctx->state[2] = 0x98BADCFE;
    ef72:	f102 4229 	add.w	r2, r2, #2835349504	; 0xa9000000
    ef76:	f5a2 1296 	sub.w	r2, r2, #1228800	; 0x12c000
    ef7a:	f6a2 628b 	subw	r2, r2, #3723	; 0xe8b
    ef7e:	611a      	str	r2, [r3, #16]
    ctx->state[3] = 0x10325476;
    ef80:	f1a2 3288 	sub.w	r2, r2, #2290649224	; 0x88888888
    ef84:	615a      	str	r2, [r3, #20]

    return( 0 );
}
    ef86:	4770      	bx	lr
    ef88:	67452301 	.word	0x67452301

0000ef8c <mbedtls_internal_md5_process>:

#if !defined(MBEDTLS_MD5_PROCESS_ALT)
int mbedtls_internal_md5_process( mbedtls_md5_context *ctx,
                                  const unsigned char data[64] )
{
    ef8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ef90:	b0a3      	sub	sp, #140	; 0x8c
    ef92:	4686      	mov	lr, r0
    ef94:	460b      	mov	r3, r1
    struct
    {
        uint32_t X[16], A, B, C, D;
    } local;

    local.X[ 0] = MBEDTLS_GET_UINT32_LE( data,  0 );
    ef96:	7809      	ldrb	r1, [r1, #0]
    ef98:	785a      	ldrb	r2, [r3, #1]
    ef9a:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
    ef9e:	789a      	ldrb	r2, [r3, #2]
    efa0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
    efa4:	78da      	ldrb	r2, [r3, #3]
    efa6:	ea41 6c02 	orr.w	ip, r1, r2, lsl #24
    efaa:	f8cd c004 	str.w	ip, [sp, #4]
    efae:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
    local.X[ 1] = MBEDTLS_GET_UINT32_LE( data,  4 );
    efb2:	791a      	ldrb	r2, [r3, #4]
    efb4:	7958      	ldrb	r0, [r3, #5]
    efb6:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    efba:	7998      	ldrb	r0, [r3, #6]
    efbc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    efc0:	79d8      	ldrb	r0, [r3, #7]
    efc2:	ea42 6900 	orr.w	r9, r2, r0, lsl #24
    efc6:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
    local.X[ 2] = MBEDTLS_GET_UINT32_LE( data,  8 );
    efca:	7a1a      	ldrb	r2, [r3, #8]
    efcc:	7a58      	ldrb	r0, [r3, #9]
    efce:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    efd2:	7a98      	ldrb	r0, [r3, #10]
    efd4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    efd8:	7ad8      	ldrb	r0, [r3, #11]
    efda:	ea42 6b00 	orr.w	fp, r2, r0, lsl #24
    efde:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
    local.X[ 3] = MBEDTLS_GET_UINT32_LE( data, 12 );
    efe2:	7b1a      	ldrb	r2, [r3, #12]
    efe4:	7b58      	ldrb	r0, [r3, #13]
    efe6:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    efea:	7b98      	ldrb	r0, [r3, #14]
    efec:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    eff0:	7bd8      	ldrb	r0, [r3, #15]
    eff2:	ea42 6100 	orr.w	r1, r2, r0, lsl #24
    eff6:	9102      	str	r1, [sp, #8]
    eff8:	9111      	str	r1, [sp, #68]	; 0x44
    local.X[ 4] = MBEDTLS_GET_UINT32_LE( data, 16 );
    effa:	7c18      	ldrb	r0, [r3, #16]
    effc:	7c5c      	ldrb	r4, [r3, #17]
    effe:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
    f002:	7c9c      	ldrb	r4, [r3, #18]
    f004:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
    f008:	7cdc      	ldrb	r4, [r3, #19]
    f00a:	ea40 6204 	orr.w	r2, r0, r4, lsl #24
    f00e:	4611      	mov	r1, r2
    f010:	9212      	str	r2, [sp, #72]	; 0x48
    local.X[ 5] = MBEDTLS_GET_UINT32_LE( data, 20 );
    f012:	7d1d      	ldrb	r5, [r3, #20]
    f014:	7d58      	ldrb	r0, [r3, #21]
    f016:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
    f01a:	7d98      	ldrb	r0, [r3, #22]
    f01c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
    f020:	7dd8      	ldrb	r0, [r3, #23]
    f022:	ea45 6500 	orr.w	r5, r5, r0, lsl #24
    f026:	9503      	str	r5, [sp, #12]
    f028:	9513      	str	r5, [sp, #76]	; 0x4c
    local.X[ 6] = MBEDTLS_GET_UINT32_LE( data, 24 );
    f02a:	7e18      	ldrb	r0, [r3, #24]
    f02c:	7e5c      	ldrb	r4, [r3, #25]
    f02e:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
    f032:	7e9c      	ldrb	r4, [r3, #26]
    f034:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
    f038:	7edc      	ldrb	r4, [r3, #27]
    f03a:	ea40 6404 	orr.w	r4, r0, r4, lsl #24
    f03e:	9404      	str	r4, [sp, #16]
    f040:	9414      	str	r4, [sp, #80]	; 0x50
    local.X[ 7] = MBEDTLS_GET_UINT32_LE( data, 28 );
    f042:	7f1f      	ldrb	r7, [r3, #28]
    f044:	7f58      	ldrb	r0, [r3, #29]
    f046:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
    f04a:	7f98      	ldrb	r0, [r3, #30]
    f04c:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
    f050:	7fd8      	ldrb	r0, [r3, #31]
    f052:	ea47 6700 	orr.w	r7, r7, r0, lsl #24
    f056:	9705      	str	r7, [sp, #20]
    f058:	9715      	str	r7, [sp, #84]	; 0x54
    local.X[ 8] = MBEDTLS_GET_UINT32_LE( data, 32 );
    f05a:	f893 0020 	ldrb.w	r0, [r3, #32]
    f05e:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
    f062:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
    f066:	f893 4022 	ldrb.w	r4, [r3, #34]	; 0x22
    f06a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
    f06e:	f893 4023 	ldrb.w	r4, [r3, #35]	; 0x23
    f072:	ea40 6004 	orr.w	r0, r0, r4, lsl #24
    f076:	9006      	str	r0, [sp, #24]
    f078:	9016      	str	r0, [sp, #88]	; 0x58
    local.X[ 9] = MBEDTLS_GET_UINT32_LE( data, 36 );
    f07a:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
    f07e:	f893 4025 	ldrb.w	r4, [r3, #37]	; 0x25
    f082:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
    f086:	f893 4026 	ldrb.w	r4, [r3, #38]	; 0x26
    f08a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
    f08e:	f893 4027 	ldrb.w	r4, [r3, #39]	; 0x27
    f092:	ea40 6704 	orr.w	r7, r0, r4, lsl #24
    f096:	9707      	str	r7, [sp, #28]
    f098:	9717      	str	r7, [sp, #92]	; 0x5c
    local.X[10] = MBEDTLS_GET_UINT32_LE( data, 40 );
    f09a:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
    f09e:	f893 4029 	ldrb.w	r4, [r3, #41]	; 0x29
    f0a2:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
    f0a6:	f893 402a 	ldrb.w	r4, [r3, #42]	; 0x2a
    f0aa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
    f0ae:	f893 402b 	ldrb.w	r4, [r3, #43]	; 0x2b
    f0b2:	ea40 6004 	orr.w	r0, r0, r4, lsl #24
    f0b6:	9018      	str	r0, [sp, #96]	; 0x60
    local.X[11] = MBEDTLS_GET_UINT32_LE( data, 44 );
    f0b8:	f893 402c 	ldrb.w	r4, [r3, #44]	; 0x2c
    f0bc:	f893 602d 	ldrb.w	r6, [r3, #45]	; 0x2d
    f0c0:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
    f0c4:	f893 602e 	ldrb.w	r6, [r3, #46]	; 0x2e
    f0c8:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
    f0cc:	f893 602f 	ldrb.w	r6, [r3, #47]	; 0x2f
    f0d0:	ea44 6606 	orr.w	r6, r4, r6, lsl #24
    f0d4:	9608      	str	r6, [sp, #32]
    f0d6:	9619      	str	r6, [sp, #100]	; 0x64
    local.X[12] = MBEDTLS_GET_UINT32_LE( data, 48 );
    f0d8:	f893 4030 	ldrb.w	r4, [r3, #48]	; 0x30
    f0dc:	f893 6031 	ldrb.w	r6, [r3, #49]	; 0x31
    f0e0:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
    f0e4:	f893 6032 	ldrb.w	r6, [r3, #50]	; 0x32
    f0e8:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
    f0ec:	f893 6033 	ldrb.w	r6, [r3, #51]	; 0x33
    f0f0:	ea44 6406 	orr.w	r4, r4, r6, lsl #24
    f0f4:	941a      	str	r4, [sp, #104]	; 0x68
    local.X[13] = MBEDTLS_GET_UINT32_LE( data, 52 );
    f0f6:	f893 6034 	ldrb.w	r6, [r3, #52]	; 0x34
    f0fa:	f893 c035 	ldrb.w	ip, [r3, #53]	; 0x35
    f0fe:	ea46 260c 	orr.w	r6, r6, ip, lsl #8
    f102:	f893 c036 	ldrb.w	ip, [r3, #54]	; 0x36
    f106:	ea46 460c 	orr.w	r6, r6, ip, lsl #16
    f10a:	f893 c037 	ldrb.w	ip, [r3, #55]	; 0x37
    f10e:	ea46 6c0c 	orr.w	ip, r6, ip, lsl #24
    f112:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    f116:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
    local.X[14] = MBEDTLS_GET_UINT32_LE( data, 56 );
    f11a:	f893 6038 	ldrb.w	r6, [r3, #56]	; 0x38
    f11e:	f893 c039 	ldrb.w	ip, [r3, #57]	; 0x39
    f122:	ea46 260c 	orr.w	r6, r6, ip, lsl #8
    f126:	f893 c03a 	ldrb.w	ip, [r3, #58]	; 0x3a
    f12a:	ea46 460c 	orr.w	r6, r6, ip, lsl #16
    f12e:	f893 c03b 	ldrb.w	ip, [r3, #59]	; 0x3b
    f132:	ea46 660c 	orr.w	r6, r6, ip, lsl #24
    f136:	961c      	str	r6, [sp, #112]	; 0x70
    local.X[15] = MBEDTLS_GET_UINT32_LE( data, 60 );
    f138:	f893 c03c 	ldrb.w	ip, [r3, #60]	; 0x3c
    f13c:	f893 803d 	ldrb.w	r8, [r3, #61]	; 0x3d
    f140:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
    f144:	f893 803e 	ldrb.w	r8, [r3, #62]	; 0x3e
    f148:	ea4c 4c08 	orr.w	ip, ip, r8, lsl #16
    f14c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
    f150:	ea4c 6303 	orr.w	r3, ip, r3, lsl #24
    f154:	930a      	str	r3, [sp, #40]	; 0x28
    f156:	931d      	str	r3, [sp, #116]	; 0x74
    {                                                                   \
        (a) += F((b),(c),(d)) + local.X[(k)] + (t);                     \
        (a) = S((a),(s)) + (b);                                         \
    } while( 0 )

    local.A = ctx->state[0];
    f158:	f8de 8008 	ldr.w	r8, [lr, #8]
    f15c:	f8cd 8078 	str.w	r8, [sp, #120]	; 0x78
    local.B = ctx->state[1];
    f160:	f8de 800c 	ldr.w	r8, [lr, #12]
    f164:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
    local.C = ctx->state[2];
    f168:	f8de a010 	ldr.w	sl, [lr, #16]
    f16c:	f8cd a080 	str.w	sl, [sp, #128]	; 0x80
    local.D = ctx->state[3];
    f170:	f8de a014 	ldr.w	sl, [lr, #20]
    f174:	f8cd a084 	str.w	sl, [sp, #132]	; 0x84

#define F(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))

    P( local.A, local.B, local.C, local.D,  0,  7, 0xD76AA478 );
    f178:	f8de a010 	ldr.w	sl, [lr, #16]
    f17c:	f8de 5014 	ldr.w	r5, [lr, #20]
    f180:	ea8a 0305 	eor.w	r3, sl, r5
    f184:	ea08 0303 	and.w	r3, r8, r3
    f188:	406b      	eors	r3, r5
    f18a:	f8dd c004 	ldr.w	ip, [sp, #4]
    f18e:	4463      	add	r3, ip
    f190:	f8de a008 	ldr.w	sl, [lr, #8]
    f194:	4453      	add	r3, sl
    f196:	f8df a3b4 	ldr.w	sl, [pc, #948]	; f54c <mbedtls_internal_md5_process+0x5c0>
    f19a:	449a      	add	sl, r3
    f19c:	f8cd a078 	str.w	sl, [sp, #120]	; 0x78
    f1a0:	eb08 6a7a 	add.w	sl, r8, sl, ror #25
    f1a4:	f8cd a078 	str.w	sl, [sp, #120]	; 0x78
    P( local.D, local.A, local.B, local.C,  1, 12, 0xE8C7B756 );
    f1a8:	f8de 5010 	ldr.w	r5, [lr, #16]
    f1ac:	ea88 0305 	eor.w	r3, r8, r5
    f1b0:	ea0a 0303 	and.w	r3, sl, r3
    f1b4:	406b      	eors	r3, r5
    f1b6:	464a      	mov	r2, r9
    f1b8:	444b      	add	r3, r9
    f1ba:	f8de 9014 	ldr.w	r9, [lr, #20]
    f1be:	444b      	add	r3, r9
    f1c0:	f8df c38c 	ldr.w	ip, [pc, #908]	; f550 <mbedtls_internal_md5_process+0x5c4>
    f1c4:	449c      	add	ip, r3
    f1c6:	f8cd c084 	str.w	ip, [sp, #132]	; 0x84
    f1ca:	eb0a 5c3c 	add.w	ip, sl, ip, ror #20
    f1ce:	f8cd c084 	str.w	ip, [sp, #132]	; 0x84
    P( local.C, local.D, local.A, local.B,  2, 17, 0x242070DB );
    f1d2:	ea88 090a 	eor.w	r9, r8, sl
    f1d6:	ea0c 0909 	and.w	r9, ip, r9
    f1da:	ea88 0909 	eor.w	r9, r8, r9
    f1de:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
    f1e2:	44d9      	add	r9, fp
    f1e4:	f8de 5010 	ldr.w	r5, [lr, #16]
    f1e8:	44a9      	add	r9, r5
    f1ea:	4bda      	ldr	r3, [pc, #872]	; (f554 <mbedtls_internal_md5_process+0x5c8>)
    f1ec:	444b      	add	r3, r9
    f1ee:	9320      	str	r3, [sp, #128]	; 0x80
    f1f0:	eb0c 33f3 	add.w	r3, ip, r3, ror #15
    f1f4:	9320      	str	r3, [sp, #128]	; 0x80
    P( local.B, local.C, local.D, local.A,  3, 22, 0xC1BDCEEE );
    f1f6:	ea8a 0b0c 	eor.w	fp, sl, ip
    f1fa:	ea03 0b0b 	and.w	fp, r3, fp
    f1fe:	ea8a 0b0b 	eor.w	fp, sl, fp
    f202:	f8dd 9008 	ldr.w	r9, [sp, #8]
    f206:	44cb      	add	fp, r9
    f208:	44c3      	add	fp, r8
    f20a:	f8df 934c 	ldr.w	r9, [pc, #844]	; f558 <mbedtls_internal_md5_process+0x5cc>
    f20e:	44d9      	add	r9, fp
    f210:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
    f214:	eb03 29b9 	add.w	r9, r3, r9, ror #10
    f218:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
    P( local.A, local.B, local.C, local.D,  4,  7, 0xF57C0FAF );
    f21c:	ea8c 0b03 	eor.w	fp, ip, r3
    f220:	ea09 0b0b 	and.w	fp, r9, fp
    f224:	ea8c 0b0b 	eor.w	fp, ip, fp
    f228:	910c      	str	r1, [sp, #48]	; 0x30
    f22a:	448b      	add	fp, r1
    f22c:	44d3      	add	fp, sl
    f22e:	f8df a32c 	ldr.w	sl, [pc, #812]	; f55c <mbedtls_internal_md5_process+0x5d0>
    f232:	44da      	add	sl, fp
    f234:	f8cd a078 	str.w	sl, [sp, #120]	; 0x78
    f238:	eb09 6a7a 	add.w	sl, r9, sl, ror #25
    f23c:	f8cd a078 	str.w	sl, [sp, #120]	; 0x78
    P( local.D, local.A, local.B, local.C,  5, 12, 0x4787C62A );
    f240:	ea83 0b09 	eor.w	fp, r3, r9
    f244:	ea0a 0b0b 	and.w	fp, sl, fp
    f248:	ea83 0b0b 	eor.w	fp, r3, fp
    f24c:	9d03      	ldr	r5, [sp, #12]
    f24e:	44ab      	add	fp, r5
    f250:	44e3      	add	fp, ip
    f252:	f8df c30c 	ldr.w	ip, [pc, #780]	; f560 <mbedtls_internal_md5_process+0x5d4>
    f256:	44dc      	add	ip, fp
    f258:	f8cd c084 	str.w	ip, [sp, #132]	; 0x84
    f25c:	eb0a 5c3c 	add.w	ip, sl, ip, ror #20
    f260:	f8cd c084 	str.w	ip, [sp, #132]	; 0x84
    P( local.C, local.D, local.A, local.B,  6, 17, 0xA8304613 );
    f264:	ea89 0b0a 	eor.w	fp, r9, sl
    f268:	ea0c 0b0b 	and.w	fp, ip, fp
    f26c:	ea89 0b0b 	eor.w	fp, r9, fp
    f270:	9904      	ldr	r1, [sp, #16]
    f272:	448b      	add	fp, r1
    f274:	449b      	add	fp, r3
    f276:	4bbb      	ldr	r3, [pc, #748]	; (f564 <mbedtls_internal_md5_process+0x5d8>)
    f278:	445b      	add	r3, fp
    f27a:	9320      	str	r3, [sp, #128]	; 0x80
    f27c:	eb0c 33f3 	add.w	r3, ip, r3, ror #15
    f280:	9320      	str	r3, [sp, #128]	; 0x80
    P( local.B, local.C, local.D, local.A,  7, 22, 0xFD469501 );
    f282:	ea8a 0b0c 	eor.w	fp, sl, ip
    f286:	ea03 0b0b 	and.w	fp, r3, fp
    f28a:	ea8a 0b0b 	eor.w	fp, sl, fp
    f28e:	9f05      	ldr	r7, [sp, #20]
    f290:	44bb      	add	fp, r7
    f292:	44cb      	add	fp, r9
    f294:	f8df 92d0 	ldr.w	r9, [pc, #720]	; f568 <mbedtls_internal_md5_process+0x5dc>
    f298:	44d9      	add	r9, fp
    f29a:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
    f29e:	eb03 29b9 	add.w	r9, r3, r9, ror #10
    f2a2:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
    P( local.A, local.B, local.C, local.D,  8,  7, 0x698098D8 );
    f2a6:	ea8c 0b03 	eor.w	fp, ip, r3
    f2aa:	ea09 0b0b 	and.w	fp, r9, fp
    f2ae:	ea8c 0b0b 	eor.w	fp, ip, fp
    f2b2:	9f06      	ldr	r7, [sp, #24]
    f2b4:	44bb      	add	fp, r7
    f2b6:	44d3      	add	fp, sl
    f2b8:	f8df a2b0 	ldr.w	sl, [pc, #688]	; f56c <mbedtls_internal_md5_process+0x5e0>
    f2bc:	44da      	add	sl, fp
    f2be:	f8cd a078 	str.w	sl, [sp, #120]	; 0x78
    f2c2:	eb09 6a7a 	add.w	sl, r9, sl, ror #25
    f2c6:	f8cd a078 	str.w	sl, [sp, #120]	; 0x78
    P( local.D, local.A, local.B, local.C,  9, 12, 0x8B44F7AF );
    f2ca:	ea83 0b09 	eor.w	fp, r3, r9
    f2ce:	ea0a 0b0b 	and.w	fp, sl, fp
    f2d2:	ea83 0b0b 	eor.w	fp, r3, fp
    f2d6:	9f07      	ldr	r7, [sp, #28]
    f2d8:	44bb      	add	fp, r7
    f2da:	44e3      	add	fp, ip
    f2dc:	f8df c290 	ldr.w	ip, [pc, #656]	; f570 <mbedtls_internal_md5_process+0x5e4>
    f2e0:	44dc      	add	ip, fp
    f2e2:	f8cd c084 	str.w	ip, [sp, #132]	; 0x84
    f2e6:	eb0a 5c3c 	add.w	ip, sl, ip, ror #20
    f2ea:	f8cd c084 	str.w	ip, [sp, #132]	; 0x84
    P( local.C, local.D, local.A, local.B, 10, 17, 0xFFFF5BB1 );
    f2ee:	ea89 0b0a 	eor.w	fp, r9, sl
    f2f2:	ea0c 0b0b 	and.w	fp, ip, fp
    f2f6:	ea89 0b0b 	eor.w	fp, r9, fp
    f2fa:	4483      	add	fp, r0
    f2fc:	445b      	add	r3, fp
    f2fe:	f5a3 4324 	sub.w	r3, r3, #41984	; 0xa400
    f302:	3b4f      	subs	r3, #79	; 0x4f
    f304:	9320      	str	r3, [sp, #128]	; 0x80
    f306:	eb0c 33f3 	add.w	r3, ip, r3, ror #15
    f30a:	9320      	str	r3, [sp, #128]	; 0x80
    P( local.B, local.C, local.D, local.A, 11, 22, 0x895CD7BE );
    f30c:	ea8a 0b0c 	eor.w	fp, sl, ip
    f310:	ea03 0b0b 	and.w	fp, r3, fp
    f314:	ea8a 0b0b 	eor.w	fp, sl, fp
    f318:	9d08      	ldr	r5, [sp, #32]
    f31a:	44ab      	add	fp, r5
    f31c:	44cb      	add	fp, r9
    f31e:	f8df 9254 	ldr.w	r9, [pc, #596]	; f574 <mbedtls_internal_md5_process+0x5e8>
    f322:	44d9      	add	r9, fp
    f324:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
    f328:	eb03 29b9 	add.w	r9, r3, r9, ror #10
    f32c:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
    P( local.A, local.B, local.C, local.D, 12,  7, 0x6B901122 );
    f330:	ea8c 0b03 	eor.w	fp, ip, r3
    f334:	ea09 0b0b 	and.w	fp, r9, fp
    f338:	ea8c 0b0b 	eor.w	fp, ip, fp
    f33c:	44a3      	add	fp, r4
    f33e:	44da      	add	sl, fp
    f340:	f8df b234 	ldr.w	fp, [pc, #564]	; f578 <mbedtls_internal_md5_process+0x5ec>
    f344:	44d3      	add	fp, sl
    f346:	f8cd b078 	str.w	fp, [sp, #120]	; 0x78
    f34a:	eb09 6b7b 	add.w	fp, r9, fp, ror #25
    f34e:	f8cd b078 	str.w	fp, [sp, #120]	; 0x78
    P( local.D, local.A, local.B, local.C, 13, 12, 0xFD987193 );
    f352:	ea83 0a09 	eor.w	sl, r3, r9
    f356:	ea0b 0a0a 	and.w	sl, fp, sl
    f35a:	ea83 0a0a 	eor.w	sl, r3, sl
    f35e:	9d09      	ldr	r5, [sp, #36]	; 0x24
    f360:	44aa      	add	sl, r5
    f362:	44e2      	add	sl, ip
    f364:	f8df c214 	ldr.w	ip, [pc, #532]	; f57c <mbedtls_internal_md5_process+0x5f0>
    f368:	44d4      	add	ip, sl
    f36a:	f8cd c084 	str.w	ip, [sp, #132]	; 0x84
    f36e:	eb0b 5c3c 	add.w	ip, fp, ip, ror #20
    f372:	f8cd c084 	str.w	ip, [sp, #132]	; 0x84
    P( local.C, local.D, local.A, local.B, 14, 17, 0xA679438E );
    f376:	ea89 0a0b 	eor.w	sl, r9, fp
    f37a:	ea0c 0a0a 	and.w	sl, ip, sl
    f37e:	ea89 0a0a 	eor.w	sl, r9, sl
    f382:	44b2      	add	sl, r6
    f384:	4453      	add	r3, sl
    f386:	f8df a1f8 	ldr.w	sl, [pc, #504]	; f580 <mbedtls_internal_md5_process+0x5f4>
    f38a:	449a      	add	sl, r3
    f38c:	f8cd a080 	str.w	sl, [sp, #128]	; 0x80
    f390:	eb0c 3afa 	add.w	sl, ip, sl, ror #15
    f394:	f8cd a080 	str.w	sl, [sp, #128]	; 0x80
    P( local.B, local.C, local.D, local.A, 15, 22, 0x49B40821 );
    f398:	ea8b 030c 	eor.w	r3, fp, ip
    f39c:	ea0a 0303 	and.w	r3, sl, r3
    f3a0:	ea8b 0303 	eor.w	r3, fp, r3
    f3a4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    f3a6:	442b      	add	r3, r5
    f3a8:	444b      	add	r3, r9
    f3aa:	f8df 91d8 	ldr.w	r9, [pc, #472]	; f584 <mbedtls_internal_md5_process+0x5f8>
    f3ae:	4499      	add	r9, r3
    f3b0:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
    f3b4:	eb0a 29b9 	add.w	r9, sl, r9, ror #10
    f3b8:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c

#undef F

#define F(x,y,z) ((y) ^ ((z) & ((x) ^ (y))))

    P( local.A, local.B, local.C, local.D,  1,  5, 0xF61E2562 );
    f3bc:	ea8a 0309 	eor.w	r3, sl, r9
    f3c0:	ea0c 0303 	and.w	r3, ip, r3
    f3c4:	ea8a 0303 	eor.w	r3, sl, r3
    f3c8:	920d      	str	r2, [sp, #52]	; 0x34
    f3ca:	4413      	add	r3, r2
    f3cc:	449b      	add	fp, r3
    f3ce:	4b6e      	ldr	r3, [pc, #440]	; (f588 <mbedtls_internal_md5_process+0x5fc>)
    f3d0:	445b      	add	r3, fp
    f3d2:	931e      	str	r3, [sp, #120]	; 0x78
    f3d4:	eb09 63f3 	add.w	r3, r9, r3, ror #27
    f3d8:	931e      	str	r3, [sp, #120]	; 0x78
    P( local.D, local.A, local.B, local.C,  6,  9, 0xC040B340 );
    f3da:	ea89 0b03 	eor.w	fp, r9, r3
    f3de:	ea0a 0b0b 	and.w	fp, sl, fp
    f3e2:	ea89 0b0b 	eor.w	fp, r9, fp
    f3e6:	448b      	add	fp, r1
    f3e8:	44e3      	add	fp, ip
    f3ea:	f8df c1a0 	ldr.w	ip, [pc, #416]	; f58c <mbedtls_internal_md5_process+0x600>
    f3ee:	44dc      	add	ip, fp
    f3f0:	f8cd c084 	str.w	ip, [sp, #132]	; 0x84
    f3f4:	eb03 5cfc 	add.w	ip, r3, ip, ror #23
    f3f8:	f8cd c084 	str.w	ip, [sp, #132]	; 0x84
    P( local.C, local.D, local.A, local.B, 11, 14, 0x265E5A51 );
    f3fc:	ea83 0b0c 	eor.w	fp, r3, ip
    f400:	ea09 0b0b 	and.w	fp, r9, fp
    f404:	ea83 0b0b 	eor.w	fp, r3, fp
    f408:	9d08      	ldr	r5, [sp, #32]
    f40a:	44ab      	add	fp, r5
    f40c:	44d3      	add	fp, sl
    f40e:	f8df a180 	ldr.w	sl, [pc, #384]	; f590 <mbedtls_internal_md5_process+0x604>
    f412:	44da      	add	sl, fp
    f414:	f8cd a080 	str.w	sl, [sp, #128]	; 0x80
    f418:	eb0c 4aba 	add.w	sl, ip, sl, ror #18
    f41c:	f8cd a080 	str.w	sl, [sp, #128]	; 0x80
    P( local.B, local.C, local.D, local.A,  0, 20, 0xE9B6C7AA );
    f420:	ea8c 0b0a 	eor.w	fp, ip, sl
    f424:	ea03 0b0b 	and.w	fp, r3, fp
    f428:	ea8c 0b0b 	eor.w	fp, ip, fp
    f42c:	9a01      	ldr	r2, [sp, #4]
    f42e:	4493      	add	fp, r2
    f430:	44cb      	add	fp, r9
    f432:	f8df 9160 	ldr.w	r9, [pc, #352]	; f594 <mbedtls_internal_md5_process+0x608>
    f436:	44d9      	add	r9, fp
    f438:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
    f43c:	eb0a 3939 	add.w	r9, sl, r9, ror #12
    f440:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
    P( local.A, local.B, local.C, local.D,  5,  5, 0xD62F105D );
    f444:	ea8a 0b09 	eor.w	fp, sl, r9
    f448:	ea0c 0b0b 	and.w	fp, ip, fp
    f44c:	ea8a 0b0b 	eor.w	fp, sl, fp
    f450:	9a03      	ldr	r2, [sp, #12]
    f452:	4493      	add	fp, r2
    f454:	449b      	add	fp, r3
    f456:	4b50      	ldr	r3, [pc, #320]	; (f598 <mbedtls_internal_md5_process+0x60c>)
    f458:	445b      	add	r3, fp
    f45a:	931e      	str	r3, [sp, #120]	; 0x78
    f45c:	eb09 63f3 	add.w	r3, r9, r3, ror #27
    f460:	931e      	str	r3, [sp, #120]	; 0x78
    P( local.D, local.A, local.B, local.C, 10,  9, 0x02441453 );
    f462:	ea89 0b03 	eor.w	fp, r9, r3
    f466:	ea0a 0b0b 	and.w	fp, sl, fp
    f46a:	ea89 0b0b 	eor.w	fp, r9, fp
    f46e:	4483      	add	fp, r0
    f470:	44e3      	add	fp, ip
    f472:	f8df c128 	ldr.w	ip, [pc, #296]	; f59c <mbedtls_internal_md5_process+0x610>
    f476:	44dc      	add	ip, fp
    f478:	f8cd c084 	str.w	ip, [sp, #132]	; 0x84
    f47c:	eb03 5cfc 	add.w	ip, r3, ip, ror #23
    f480:	f8cd c084 	str.w	ip, [sp, #132]	; 0x84
    P( local.C, local.D, local.A, local.B, 15, 14, 0xD8A1E681 );
    f484:	ea83 0b0c 	eor.w	fp, r3, ip
    f488:	ea09 0b0b 	and.w	fp, r9, fp
    f48c:	ea83 0b0b 	eor.w	fp, r3, fp
    f490:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f492:	4493      	add	fp, r2
    f494:	44d3      	add	fp, sl
    f496:	f8df a108 	ldr.w	sl, [pc, #264]	; f5a0 <mbedtls_internal_md5_process+0x614>
    f49a:	44da      	add	sl, fp
    f49c:	f8cd a080 	str.w	sl, [sp, #128]	; 0x80
    f4a0:	eb0c 4aba 	add.w	sl, ip, sl, ror #18
    f4a4:	f8cd a080 	str.w	sl, [sp, #128]	; 0x80
    P( local.B, local.C, local.D, local.A,  4, 20, 0xE7D3FBC8 );
    f4a8:	ea8c 0b0a 	eor.w	fp, ip, sl
    f4ac:	ea03 0b0b 	and.w	fp, r3, fp
    f4b0:	ea8c 0b0b 	eor.w	fp, ip, fp
    f4b4:	990c      	ldr	r1, [sp, #48]	; 0x30
    f4b6:	448b      	add	fp, r1
    f4b8:	44cb      	add	fp, r9
    f4ba:	f8df 90e8 	ldr.w	r9, [pc, #232]	; f5a4 <mbedtls_internal_md5_process+0x618>
    f4be:	44d9      	add	r9, fp
    f4c0:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
    f4c4:	eb0a 3939 	add.w	r9, sl, r9, ror #12
    f4c8:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
    P( local.A, local.B, local.C, local.D,  9,  5, 0x21E1CDE6 );
    f4cc:	ea8a 0b09 	eor.w	fp, sl, r9
    f4d0:	ea0c 0b0b 	and.w	fp, ip, fp
    f4d4:	ea8a 0b0b 	eor.w	fp, sl, fp
    f4d8:	44bb      	add	fp, r7
    f4da:	449b      	add	fp, r3
    f4dc:	4b32      	ldr	r3, [pc, #200]	; (f5a8 <mbedtls_internal_md5_process+0x61c>)
    f4de:	445b      	add	r3, fp
    f4e0:	931e      	str	r3, [sp, #120]	; 0x78
    f4e2:	eb09 63f3 	add.w	r3, r9, r3, ror #27
    f4e6:	931e      	str	r3, [sp, #120]	; 0x78
    P( local.D, local.A, local.B, local.C, 14,  9, 0xC33707D6 );
    f4e8:	ea89 0b03 	eor.w	fp, r9, r3
    f4ec:	ea0a 0b0b 	and.w	fp, sl, fp
    f4f0:	ea89 0b0b 	eor.w	fp, r9, fp
    f4f4:	44b3      	add	fp, r6
    f4f6:	44e3      	add	fp, ip
    f4f8:	f8df c0b0 	ldr.w	ip, [pc, #176]	; f5ac <mbedtls_internal_md5_process+0x620>
    f4fc:	44dc      	add	ip, fp
    f4fe:	f8cd c084 	str.w	ip, [sp, #132]	; 0x84
    f502:	eb03 5cfc 	add.w	ip, r3, ip, ror #23
    f506:	f8cd c084 	str.w	ip, [sp, #132]	; 0x84
    P( local.C, local.D, local.A, local.B,  3, 14, 0xF4D50D87 );
    f50a:	ea83 0b0c 	eor.w	fp, r3, ip
    f50e:	ea09 0b0b 	and.w	fp, r9, fp
    f512:	ea83 0b0b 	eor.w	fp, r3, fp
    f516:	9902      	ldr	r1, [sp, #8]
    f518:	448b      	add	fp, r1
    f51a:	44d3      	add	fp, sl
    f51c:	f8df a090 	ldr.w	sl, [pc, #144]	; f5b0 <mbedtls_internal_md5_process+0x624>
    f520:	44da      	add	sl, fp
    f522:	f8cd a080 	str.w	sl, [sp, #128]	; 0x80
    f526:	eb0c 4aba 	add.w	sl, ip, sl, ror #18
    f52a:	f8cd a080 	str.w	sl, [sp, #128]	; 0x80
    P( local.B, local.C, local.D, local.A,  8, 20, 0x455A14ED );
    f52e:	ea8c 0b0a 	eor.w	fp, ip, sl
    f532:	ea03 0b0b 	and.w	fp, r3, fp
    f536:	ea8c 0b0b 	eor.w	fp, ip, fp
    f53a:	9906      	ldr	r1, [sp, #24]
    f53c:	448b      	add	fp, r1
    f53e:	44cb      	add	fp, r9
    f540:	f8df 9070 	ldr.w	r9, [pc, #112]	; f5b4 <mbedtls_internal_md5_process+0x628>
    f544:	44d9      	add	r9, fp
    f546:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
    f54a:	e035      	b.n	f5b8 <mbedtls_internal_md5_process+0x62c>
    f54c:	d76aa478 	.word	0xd76aa478
    f550:	e8c7b756 	.word	0xe8c7b756
    f554:	242070db 	.word	0x242070db
    f558:	c1bdceee 	.word	0xc1bdceee
    f55c:	f57c0faf 	.word	0xf57c0faf
    f560:	4787c62a 	.word	0x4787c62a
    f564:	a8304613 	.word	0xa8304613
    f568:	fd469501 	.word	0xfd469501
    f56c:	698098d8 	.word	0x698098d8
    f570:	8b44f7af 	.word	0x8b44f7af
    f574:	895cd7be 	.word	0x895cd7be
    f578:	6b901122 	.word	0x6b901122
    f57c:	fd987193 	.word	0xfd987193
    f580:	a679438e 	.word	0xa679438e
    f584:	49b40821 	.word	0x49b40821
    f588:	f61e2562 	.word	0xf61e2562
    f58c:	c040b340 	.word	0xc040b340
    f590:	265e5a51 	.word	0x265e5a51
    f594:	e9b6c7aa 	.word	0xe9b6c7aa
    f598:	d62f105d 	.word	0xd62f105d
    f59c:	02441453 	.word	0x02441453
    f5a0:	d8a1e681 	.word	0xd8a1e681
    f5a4:	e7d3fbc8 	.word	0xe7d3fbc8
    f5a8:	21e1cde6 	.word	0x21e1cde6
    f5ac:	c33707d6 	.word	0xc33707d6
    f5b0:	f4d50d87 	.word	0xf4d50d87
    f5b4:	455a14ed 	.word	0x455a14ed
    f5b8:	eb0a 3939 	add.w	r9, sl, r9, ror #12
    f5bc:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
    P( local.A, local.B, local.C, local.D, 13,  5, 0xA9E3E905 );
    f5c0:	ea8a 0b09 	eor.w	fp, sl, r9
    f5c4:	ea0c 0b0b 	and.w	fp, ip, fp
    f5c8:	ea8a 0b0b 	eor.w	fp, sl, fp
    f5cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    f5ce:	4493      	add	fp, r2
    f5d0:	449b      	add	fp, r3
    f5d2:	4bdd      	ldr	r3, [pc, #884]	; (f948 <mbedtls_internal_md5_process+0x9bc>)
    f5d4:	445b      	add	r3, fp
    f5d6:	931e      	str	r3, [sp, #120]	; 0x78
    f5d8:	eb09 63f3 	add.w	r3, r9, r3, ror #27
    f5dc:	931e      	str	r3, [sp, #120]	; 0x78
    P( local.D, local.A, local.B, local.C,  2,  9, 0xFCEFA3F8 );
    f5de:	ea89 0b03 	eor.w	fp, r9, r3
    f5e2:	ea0a 0b0b 	and.w	fp, sl, fp
    f5e6:	ea89 0b0b 	eor.w	fp, r9, fp
    f5ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f5ec:	4493      	add	fp, r2
    f5ee:	44e3      	add	fp, ip
    f5f0:	f8df c358 	ldr.w	ip, [pc, #856]	; f94c <mbedtls_internal_md5_process+0x9c0>
    f5f4:	44dc      	add	ip, fp
    f5f6:	f8cd c084 	str.w	ip, [sp, #132]	; 0x84
    f5fa:	eb03 5cfc 	add.w	ip, r3, ip, ror #23
    f5fe:	f8cd c084 	str.w	ip, [sp, #132]	; 0x84
    P( local.C, local.D, local.A, local.B,  7, 14, 0x676F02D9 );
    f602:	ea83 0b0c 	eor.w	fp, r3, ip
    f606:	ea09 0b0b 	and.w	fp, r9, fp
    f60a:	ea83 0b0b 	eor.w	fp, r3, fp
    f60e:	9f05      	ldr	r7, [sp, #20]
    f610:	44bb      	add	fp, r7
    f612:	44d3      	add	fp, sl
    f614:	f8df a338 	ldr.w	sl, [pc, #824]	; f950 <mbedtls_internal_md5_process+0x9c4>
    f618:	44da      	add	sl, fp
    f61a:	f8cd a080 	str.w	sl, [sp, #128]	; 0x80
    f61e:	eb0c 4aba 	add.w	sl, ip, sl, ror #18
    f622:	f8cd a080 	str.w	sl, [sp, #128]	; 0x80
    P( local.B, local.C, local.D, local.A, 12, 20, 0x8D2A4C8A );
    f626:	ea8c 0b0a 	eor.w	fp, ip, sl
    f62a:	ea03 0b0b 	and.w	fp, r3, fp
    f62e:	ea8c 0b0b 	eor.w	fp, ip, fp
    f632:	44a3      	add	fp, r4
    f634:	44cb      	add	fp, r9
    f636:	f8df 931c 	ldr.w	r9, [pc, #796]	; f954 <mbedtls_internal_md5_process+0x9c8>
    f63a:	44d9      	add	r9, fp
    f63c:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
    f640:	eb0a 3939 	add.w	r9, sl, r9, ror #12
    f644:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c

#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))

    P( local.A, local.B, local.C, local.D,  5,  4, 0xFFFA3942 );
    f648:	ea8a 0b09 	eor.w	fp, sl, r9
    f64c:	ea8c 0b0b 	eor.w	fp, ip, fp
    f650:	9a03      	ldr	r2, [sp, #12]
    f652:	4493      	add	fp, r2
    f654:	445b      	add	r3, fp
    f656:	f5a3 23b8 	sub.w	r3, r3, #376832	; 0x5c000
    f65a:	f2a3 63be 	subw	r3, r3, #1726	; 0x6be
    f65e:	931e      	str	r3, [sp, #120]	; 0x78
    f660:	eb09 7333 	add.w	r3, r9, r3, ror #28
    f664:	931e      	str	r3, [sp, #120]	; 0x78
    P( local.D, local.A, local.B, local.C,  8, 11, 0x8771F681 );
    f666:	ea89 0b03 	eor.w	fp, r9, r3
    f66a:	ea8a 0b0b 	eor.w	fp, sl, fp
    f66e:	448b      	add	fp, r1
    f670:	44e3      	add	fp, ip
    f672:	f8df c2e4 	ldr.w	ip, [pc, #740]	; f958 <mbedtls_internal_md5_process+0x9cc>
    f676:	44dc      	add	ip, fp
    f678:	f8cd c084 	str.w	ip, [sp, #132]	; 0x84
    f67c:	eb03 5c7c 	add.w	ip, r3, ip, ror #21
    f680:	f8cd c084 	str.w	ip, [sp, #132]	; 0x84
    P( local.C, local.D, local.A, local.B, 11, 16, 0x6D9D6122 );
    f684:	ea83 0b0c 	eor.w	fp, r3, ip
    f688:	ea89 0b0b 	eor.w	fp, r9, fp
    f68c:	44ab      	add	fp, r5
    f68e:	44d3      	add	fp, sl
    f690:	f8df a2c8 	ldr.w	sl, [pc, #712]	; f95c <mbedtls_internal_md5_process+0x9d0>
    f694:	44da      	add	sl, fp
    f696:	f8cd a080 	str.w	sl, [sp, #128]	; 0x80
    f69a:	eb0c 4a3a 	add.w	sl, ip, sl, ror #16
    f69e:	f8cd a080 	str.w	sl, [sp, #128]	; 0x80
    P( local.B, local.C, local.D, local.A, 14, 23, 0xFDE5380C );
    f6a2:	ea8c 0b0a 	eor.w	fp, ip, sl
    f6a6:	ea83 0b0b 	eor.w	fp, r3, fp
    f6aa:	44b3      	add	fp, r6
    f6ac:	44cb      	add	fp, r9
    f6ae:	f8df 92b0 	ldr.w	r9, [pc, #688]	; f960 <mbedtls_internal_md5_process+0x9d4>
    f6b2:	44d9      	add	r9, fp
    f6b4:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
    f6b8:	eb0a 2979 	add.w	r9, sl, r9, ror #9
    f6bc:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
    P( local.A, local.B, local.C, local.D,  1,  4, 0xA4BEEA44 );
    f6c0:	ea8a 0b09 	eor.w	fp, sl, r9
    f6c4:	ea8c 0b0b 	eor.w	fp, ip, fp
    f6c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    f6ca:	4493      	add	fp, r2
    f6cc:	449b      	add	fp, r3
    f6ce:	4ba5      	ldr	r3, [pc, #660]	; (f964 <mbedtls_internal_md5_process+0x9d8>)
    f6d0:	445b      	add	r3, fp
    f6d2:	931e      	str	r3, [sp, #120]	; 0x78
    f6d4:	eb09 7333 	add.w	r3, r9, r3, ror #28
    f6d8:	931e      	str	r3, [sp, #120]	; 0x78
    P( local.D, local.A, local.B, local.C,  4, 11, 0x4BDECFA9 );
    f6da:	ea89 0b03 	eor.w	fp, r9, r3
    f6de:	ea8a 0b0b 	eor.w	fp, sl, fp
    f6e2:	990c      	ldr	r1, [sp, #48]	; 0x30
    f6e4:	448b      	add	fp, r1
    f6e6:	44dc      	add	ip, fp
    f6e8:	f8df b27c 	ldr.w	fp, [pc, #636]	; f968 <mbedtls_internal_md5_process+0x9dc>
    f6ec:	44e3      	add	fp, ip
    f6ee:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
    f6f2:	eb03 5b7b 	add.w	fp, r3, fp, ror #21
    f6f6:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
    P( local.C, local.D, local.A, local.B,  7, 16, 0xF6BB4B60 );
    f6fa:	ea83 0c0b 	eor.w	ip, r3, fp
    f6fe:	ea89 0c0c 	eor.w	ip, r9, ip
    f702:	9f05      	ldr	r7, [sp, #20]
    f704:	44bc      	add	ip, r7
    f706:	44e2      	add	sl, ip
    f708:	f8df c260 	ldr.w	ip, [pc, #608]	; f96c <mbedtls_internal_md5_process+0x9e0>
    f70c:	44d4      	add	ip, sl
    f70e:	f8cd c080 	str.w	ip, [sp, #128]	; 0x80
    f712:	eb0b 4c3c 	add.w	ip, fp, ip, ror #16
    f716:	f8cd c080 	str.w	ip, [sp, #128]	; 0x80
    P( local.B, local.C, local.D, local.A, 10, 23, 0xBEBFBC70 );
    f71a:	ea8b 0a0c 	eor.w	sl, fp, ip
    f71e:	ea83 0a0a 	eor.w	sl, r3, sl
    f722:	4482      	add	sl, r0
    f724:	44ca      	add	sl, r9
    f726:	f8df 9248 	ldr.w	r9, [pc, #584]	; f970 <mbedtls_internal_md5_process+0x9e4>
    f72a:	44d1      	add	r9, sl
    f72c:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
    f730:	eb0c 2979 	add.w	r9, ip, r9, ror #9
    f734:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
    P( local.A, local.B, local.C, local.D, 13,  4, 0x289B7EC6 );
    f738:	ea8c 0a09 	eor.w	sl, ip, r9
    f73c:	ea8b 0a0a 	eor.w	sl, fp, sl
    f740:	9a09      	ldr	r2, [sp, #36]	; 0x24
    f742:	4492      	add	sl, r2
    f744:	4453      	add	r3, sl
    f746:	f8df a22c 	ldr.w	sl, [pc, #556]	; f974 <mbedtls_internal_md5_process+0x9e8>
    f74a:	449a      	add	sl, r3
    f74c:	f8cd a078 	str.w	sl, [sp, #120]	; 0x78
    f750:	eb09 7a3a 	add.w	sl, r9, sl, ror #28
    f754:	f8cd a078 	str.w	sl, [sp, #120]	; 0x78
    P( local.D, local.A, local.B, local.C,  0, 11, 0xEAA127FA );
    f758:	ea89 030a 	eor.w	r3, r9, sl
    f75c:	ea8c 0303 	eor.w	r3, ip, r3
    f760:	9d01      	ldr	r5, [sp, #4]
    f762:	442b      	add	r3, r5
    f764:	449b      	add	fp, r3
    f766:	4b84      	ldr	r3, [pc, #528]	; (f978 <mbedtls_internal_md5_process+0x9ec>)
    f768:	445b      	add	r3, fp
    f76a:	9321      	str	r3, [sp, #132]	; 0x84
    f76c:	eb0a 5373 	add.w	r3, sl, r3, ror #21
    f770:	9321      	str	r3, [sp, #132]	; 0x84
    P( local.C, local.D, local.A, local.B,  3, 16, 0xD4EF3085 );
    f772:	ea8a 0b03 	eor.w	fp, sl, r3
    f776:	ea89 0b0b 	eor.w	fp, r9, fp
    f77a:	9902      	ldr	r1, [sp, #8]
    f77c:	448b      	add	fp, r1
    f77e:	44dc      	add	ip, fp
    f780:	f8df b1f8 	ldr.w	fp, [pc, #504]	; f97c <mbedtls_internal_md5_process+0x9f0>
    f784:	44e3      	add	fp, ip
    f786:	f8cd b080 	str.w	fp, [sp, #128]	; 0x80
    f78a:	eb03 4b3b 	add.w	fp, r3, fp, ror #16
    f78e:	f8cd b080 	str.w	fp, [sp, #128]	; 0x80
    P( local.B, local.C, local.D, local.A,  6, 23, 0x04881D05 );
    f792:	ea83 0c0b 	eor.w	ip, r3, fp
    f796:	ea8a 0c0c 	eor.w	ip, sl, ip
    f79a:	9904      	ldr	r1, [sp, #16]
    f79c:	448c      	add	ip, r1
    f79e:	44cc      	add	ip, r9
    f7a0:	f8df 91dc 	ldr.w	r9, [pc, #476]	; f980 <mbedtls_internal_md5_process+0x9f4>
    f7a4:	44e1      	add	r9, ip
    f7a6:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
    f7aa:	eb0b 2979 	add.w	r9, fp, r9, ror #9
    f7ae:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
    P( local.A, local.B, local.C, local.D,  9,  4, 0xD9D4D039 );
    f7b2:	ea8b 0c09 	eor.w	ip, fp, r9
    f7b6:	ea83 0c0c 	eor.w	ip, r3, ip
    f7ba:	9f07      	ldr	r7, [sp, #28]
    f7bc:	44bc      	add	ip, r7
    f7be:	44e2      	add	sl, ip
    f7c0:	f8df c1c0 	ldr.w	ip, [pc, #448]	; f984 <mbedtls_internal_md5_process+0x9f8>
    f7c4:	44d4      	add	ip, sl
    f7c6:	f8cd c078 	str.w	ip, [sp, #120]	; 0x78
    f7ca:	eb09 7c3c 	add.w	ip, r9, ip, ror #28
    f7ce:	f8cd c078 	str.w	ip, [sp, #120]	; 0x78
    P( local.D, local.A, local.B, local.C, 12, 11, 0xE6DB99E5 );
    f7d2:	ea89 0a0c 	eor.w	sl, r9, ip
    f7d6:	ea8b 0a0a 	eor.w	sl, fp, sl
    f7da:	44a2      	add	sl, r4
    f7dc:	4453      	add	r3, sl
    f7de:	f8df a1a8 	ldr.w	sl, [pc, #424]	; f988 <mbedtls_internal_md5_process+0x9fc>
    f7e2:	449a      	add	sl, r3
    f7e4:	f8cd a084 	str.w	sl, [sp, #132]	; 0x84
    f7e8:	eb0c 5a7a 	add.w	sl, ip, sl, ror #21
    f7ec:	f8cd a084 	str.w	sl, [sp, #132]	; 0x84
    P( local.C, local.D, local.A, local.B, 15, 16, 0x1FA27CF8 );
    f7f0:	ea8c 030a 	eor.w	r3, ip, sl
    f7f4:	ea89 0303 	eor.w	r3, r9, r3
    f7f8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    f7fa:	442b      	add	r3, r5
    f7fc:	445b      	add	r3, fp
    f7fe:	f8df b18c 	ldr.w	fp, [pc, #396]	; f98c <mbedtls_internal_md5_process+0xa00>
    f802:	449b      	add	fp, r3
    f804:	f8cd b080 	str.w	fp, [sp, #128]	; 0x80
    f808:	eb0a 4b3b 	add.w	fp, sl, fp, ror #16
    f80c:	f8cd b080 	str.w	fp, [sp, #128]	; 0x80
    P( local.B, local.C, local.D, local.A,  2, 23, 0xC4AC5665 );
    f810:	ea8a 030b 	eor.w	r3, sl, fp
    f814:	ea8c 0303 	eor.w	r3, ip, r3
    f818:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f81a:	4413      	add	r3, r2
    f81c:	4499      	add	r9, r3
    f81e:	4b5c      	ldr	r3, [pc, #368]	; (f990 <mbedtls_internal_md5_process+0xa04>)
    f820:	444b      	add	r3, r9
    f822:	931f      	str	r3, [sp, #124]	; 0x7c
    f824:	eb0b 2373 	add.w	r3, fp, r3, ror #9
    f828:	931f      	str	r3, [sp, #124]	; 0x7c

#undef F

#define F(x,y,z) ((y) ^ ((x) | ~(z)))

    P( local.A, local.B, local.C, local.D,  0,  6, 0xF4292244 );
    f82a:	ea63 090a 	orn	r9, r3, sl
    f82e:	ea8b 0909 	eor.w	r9, fp, r9
    f832:	9901      	ldr	r1, [sp, #4]
    f834:	4449      	add	r1, r9
    f836:	448c      	add	ip, r1
    f838:	4956      	ldr	r1, [pc, #344]	; (f994 <mbedtls_internal_md5_process+0xa08>)
    f83a:	4461      	add	r1, ip
    f83c:	911e      	str	r1, [sp, #120]	; 0x78
    f83e:	eb03 61b1 	add.w	r1, r3, r1, ror #26
    f842:	911e      	str	r1, [sp, #120]	; 0x78
    P( local.D, local.A, local.B, local.C,  7, 10, 0x432AFF97 );
    f844:	ea61 0c0b 	orn	ip, r1, fp
    f848:	ea83 0c0c 	eor.w	ip, r3, ip
    f84c:	9f05      	ldr	r7, [sp, #20]
    f84e:	4467      	add	r7, ip
    f850:	eb0a 0c07 	add.w	ip, sl, r7
    f854:	4f50      	ldr	r7, [pc, #320]	; (f998 <mbedtls_internal_md5_process+0xa0c>)
    f856:	4467      	add	r7, ip
    f858:	9721      	str	r7, [sp, #132]	; 0x84
    f85a:	eb01 57b7 	add.w	r7, r1, r7, ror #22
    f85e:	9721      	str	r7, [sp, #132]	; 0x84
    P( local.C, local.D, local.A, local.B, 14, 15, 0xAB9423A7 );
    f860:	ea67 0c03 	orn	ip, r7, r3
    f864:	ea81 0c0c 	eor.w	ip, r1, ip
    f868:	4466      	add	r6, ip
    f86a:	eb0b 0c06 	add.w	ip, fp, r6
    f86e:	4e4b      	ldr	r6, [pc, #300]	; (f99c <mbedtls_internal_md5_process+0xa10>)
    f870:	4466      	add	r6, ip
    f872:	9620      	str	r6, [sp, #128]	; 0x80
    f874:	eb07 4676 	add.w	r6, r7, r6, ror #17
    f878:	9620      	str	r6, [sp, #128]	; 0x80
    P( local.B, local.C, local.D, local.A,  5, 21, 0xFC93A039 );
    f87a:	ea66 0c01 	orn	ip, r6, r1
    f87e:	ea87 0c0c 	eor.w	ip, r7, ip
    f882:	9d03      	ldr	r5, [sp, #12]
    f884:	4465      	add	r5, ip
    f886:	441d      	add	r5, r3
    f888:	4b45      	ldr	r3, [pc, #276]	; (f9a0 <mbedtls_internal_md5_process+0xa14>)
    f88a:	442b      	add	r3, r5
    f88c:	931f      	str	r3, [sp, #124]	; 0x7c
    f88e:	eb06 23f3 	add.w	r3, r6, r3, ror #11
    f892:	931f      	str	r3, [sp, #124]	; 0x7c
    P( local.A, local.B, local.C, local.D, 12,  6, 0x655B59C3 );
    f894:	ea63 0507 	orn	r5, r3, r7
    f898:	4075      	eors	r5, r6
    f89a:	442c      	add	r4, r5
    f89c:	440c      	add	r4, r1
    f89e:	4941      	ldr	r1, [pc, #260]	; (f9a4 <mbedtls_internal_md5_process+0xa18>)
    f8a0:	4421      	add	r1, r4
    f8a2:	911e      	str	r1, [sp, #120]	; 0x78
    f8a4:	eb03 61b1 	add.w	r1, r3, r1, ror #26
    f8a8:	911e      	str	r1, [sp, #120]	; 0x78
    P( local.D, local.A, local.B, local.C,  3, 10, 0x8F0CCC92 );
    f8aa:	ea61 0406 	orn	r4, r1, r6
    f8ae:	405c      	eors	r4, r3
    f8b0:	9a02      	ldr	r2, [sp, #8]
    f8b2:	4422      	add	r2, r4
    f8b4:	18bc      	adds	r4, r7, r2
    f8b6:	4a3c      	ldr	r2, [pc, #240]	; (f9a8 <mbedtls_internal_md5_process+0xa1c>)
    f8b8:	4422      	add	r2, r4
    f8ba:	9221      	str	r2, [sp, #132]	; 0x84
    f8bc:	eb01 52b2 	add.w	r2, r1, r2, ror #22
    f8c0:	9221      	str	r2, [sp, #132]	; 0x84
    P( local.C, local.D, local.A, local.B, 10, 15, 0xFFEFF47D );
    f8c2:	ea62 0403 	orn	r4, r2, r3
    f8c6:	404c      	eors	r4, r1
    f8c8:	4420      	add	r0, r4
    f8ca:	4406      	add	r6, r0
    f8cc:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
    f8d0:	f6a6 3683 	subw	r6, r6, #2947	; 0xb83
    f8d4:	9620      	str	r6, [sp, #128]	; 0x80
    f8d6:	eb02 4676 	add.w	r6, r2, r6, ror #17
    f8da:	9620      	str	r6, [sp, #128]	; 0x80
    P( local.B, local.C, local.D, local.A,  1, 21, 0x85845DD1 );
    f8dc:	ea66 0001 	orn	r0, r6, r1
    f8e0:	4050      	eors	r0, r2
    f8e2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    f8e4:	4428      	add	r0, r5
    f8e6:	4418      	add	r0, r3
    f8e8:	4b30      	ldr	r3, [pc, #192]	; (f9ac <mbedtls_internal_md5_process+0xa20>)
    f8ea:	4403      	add	r3, r0
    f8ec:	931f      	str	r3, [sp, #124]	; 0x7c
    f8ee:	eb06 23f3 	add.w	r3, r6, r3, ror #11
    f8f2:	931f      	str	r3, [sp, #124]	; 0x7c
    P( local.A, local.B, local.C, local.D,  8,  6, 0x6FA87E4F );
    f8f4:	ea63 0002 	orn	r0, r3, r2
    f8f8:	4070      	eors	r0, r6
    f8fa:	9f06      	ldr	r7, [sp, #24]
    f8fc:	4438      	add	r0, r7
    f8fe:	4408      	add	r0, r1
    f900:	492b      	ldr	r1, [pc, #172]	; (f9b0 <mbedtls_internal_md5_process+0xa24>)
    f902:	4401      	add	r1, r0
    f904:	911e      	str	r1, [sp, #120]	; 0x78
    f906:	eb03 61b1 	add.w	r1, r3, r1, ror #26
    f90a:	911e      	str	r1, [sp, #120]	; 0x78
    P( local.D, local.A, local.B, local.C, 15, 10, 0xFE2CE6E0 );
    f90c:	ea61 0006 	orn	r0, r1, r6
    f910:	4058      	eors	r0, r3
    f912:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    f916:	4448      	add	r0, r9
    f918:	4410      	add	r0, r2
    f91a:	4a26      	ldr	r2, [pc, #152]	; (f9b4 <mbedtls_internal_md5_process+0xa28>)
    f91c:	4402      	add	r2, r0
    f91e:	9221      	str	r2, [sp, #132]	; 0x84
    f920:	eb01 52b2 	add.w	r2, r1, r2, ror #22
    f924:	9221      	str	r2, [sp, #132]	; 0x84
    P( local.C, local.D, local.A, local.B,  6, 15, 0xA3014314 );
    f926:	ea62 0003 	orn	r0, r2, r3
    f92a:	4048      	eors	r0, r1
    f92c:	9c04      	ldr	r4, [sp, #16]
    f92e:	4404      	add	r4, r0
    f930:	4434      	add	r4, r6
    f932:	4821      	ldr	r0, [pc, #132]	; (f9b8 <mbedtls_internal_md5_process+0xa2c>)
    f934:	4420      	add	r0, r4
    f936:	9020      	str	r0, [sp, #128]	; 0x80
    f938:	eb02 4070 	add.w	r0, r2, r0, ror #17
    f93c:	9020      	str	r0, [sp, #128]	; 0x80
    P( local.B, local.C, local.D, local.A, 13, 21, 0x4E0811A1 );
    f93e:	ea60 0401 	orn	r4, r0, r1
    f942:	4054      	eors	r4, r2
    f944:	e03a      	b.n	f9bc <mbedtls_internal_md5_process+0xa30>
    f946:	bf00      	nop
    f948:	a9e3e905 	.word	0xa9e3e905
    f94c:	fcefa3f8 	.word	0xfcefa3f8
    f950:	676f02d9 	.word	0x676f02d9
    f954:	8d2a4c8a 	.word	0x8d2a4c8a
    f958:	8771f681 	.word	0x8771f681
    f95c:	6d9d6122 	.word	0x6d9d6122
    f960:	fde5380c 	.word	0xfde5380c
    f964:	a4beea44 	.word	0xa4beea44
    f968:	4bdecfa9 	.word	0x4bdecfa9
    f96c:	f6bb4b60 	.word	0xf6bb4b60
    f970:	bebfbc70 	.word	0xbebfbc70
    f974:	289b7ec6 	.word	0x289b7ec6
    f978:	eaa127fa 	.word	0xeaa127fa
    f97c:	d4ef3085 	.word	0xd4ef3085
    f980:	04881d05 	.word	0x04881d05
    f984:	d9d4d039 	.word	0xd9d4d039
    f988:	e6db99e5 	.word	0xe6db99e5
    f98c:	1fa27cf8 	.word	0x1fa27cf8
    f990:	c4ac5665 	.word	0xc4ac5665
    f994:	f4292244 	.word	0xf4292244
    f998:	432aff97 	.word	0x432aff97
    f99c:	ab9423a7 	.word	0xab9423a7
    f9a0:	fc93a039 	.word	0xfc93a039
    f9a4:	655b59c3 	.word	0x655b59c3
    f9a8:	8f0ccc92 	.word	0x8f0ccc92
    f9ac:	85845dd1 	.word	0x85845dd1
    f9b0:	6fa87e4f 	.word	0x6fa87e4f
    f9b4:	fe2ce6e0 	.word	0xfe2ce6e0
    f9b8:	a3014314 	.word	0xa3014314
    f9bc:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    f9c0:	4464      	add	r4, ip
    f9c2:	4423      	add	r3, r4
    f9c4:	4c28      	ldr	r4, [pc, #160]	; (fa68 <mbedtls_internal_md5_process+0xadc>)
    f9c6:	441c      	add	r4, r3
    f9c8:	941f      	str	r4, [sp, #124]	; 0x7c
    f9ca:	eb00 24f4 	add.w	r4, r0, r4, ror #11
    f9ce:	941f      	str	r4, [sp, #124]	; 0x7c
    P( local.A, local.B, local.C, local.D,  4,  6, 0xF7537E82 );
    f9d0:	ea64 0302 	orn	r3, r4, r2
    f9d4:	4043      	eors	r3, r0
    f9d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    f9d8:	442b      	add	r3, r5
    f9da:	4419      	add	r1, r3
    f9dc:	4b23      	ldr	r3, [pc, #140]	; (fa6c <mbedtls_internal_md5_process+0xae0>)
    f9de:	440b      	add	r3, r1
    f9e0:	931e      	str	r3, [sp, #120]	; 0x78
    f9e2:	eb04 63b3 	add.w	r3, r4, r3, ror #26
    f9e6:	931e      	str	r3, [sp, #120]	; 0x78
    P( local.D, local.A, local.B, local.C, 11, 10, 0xBD3AF235 );
    f9e8:	ea63 0100 	orn	r1, r3, r0
    f9ec:	4061      	eors	r1, r4
    f9ee:	9d08      	ldr	r5, [sp, #32]
    f9f0:	4429      	add	r1, r5
    f9f2:	440a      	add	r2, r1
    f9f4:	491e      	ldr	r1, [pc, #120]	; (fa70 <mbedtls_internal_md5_process+0xae4>)
    f9f6:	4411      	add	r1, r2
    f9f8:	9121      	str	r1, [sp, #132]	; 0x84
    f9fa:	eb03 52b1 	add.w	r2, r3, r1, ror #22
    f9fe:	9221      	str	r2, [sp, #132]	; 0x84
    P( local.C, local.D, local.A, local.B,  2, 15, 0x2AD7D2BB );
    fa00:	ea62 0104 	orn	r1, r2, r4
    fa04:	4059      	eors	r1, r3
    fa06:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
    fa0a:	4459      	add	r1, fp
    fa0c:	4408      	add	r0, r1
    fa0e:	4919      	ldr	r1, [pc, #100]	; (fa74 <mbedtls_internal_md5_process+0xae8>)
    fa10:	4401      	add	r1, r0
    fa12:	9120      	str	r1, [sp, #128]	; 0x80
    fa14:	eb02 4171 	add.w	r1, r2, r1, ror #17
    fa18:	9120      	str	r1, [sp, #128]	; 0x80
    P( local.B, local.C, local.D, local.A,  9, 21, 0xEB86D391 );
    fa1a:	ea61 0003 	orn	r0, r1, r3
    fa1e:	4050      	eors	r0, r2
    fa20:	9f07      	ldr	r7, [sp, #28]
    fa22:	4438      	add	r0, r7
    fa24:	4404      	add	r4, r0
    fa26:	4814      	ldr	r0, [pc, #80]	; (fa78 <mbedtls_internal_md5_process+0xaec>)
    fa28:	4420      	add	r0, r4
    fa2a:	901f      	str	r0, [sp, #124]	; 0x7c
    fa2c:	eb01 20f0 	add.w	r0, r1, r0, ror #11
    fa30:	901f      	str	r0, [sp, #124]	; 0x7c

#undef F

    ctx->state[0] += local.A;
    fa32:	f8de 4008 	ldr.w	r4, [lr, #8]
    fa36:	4423      	add	r3, r4
    fa38:	f8ce 3008 	str.w	r3, [lr, #8]
    ctx->state[1] += local.B;
    fa3c:	4440      	add	r0, r8
    fa3e:	f8ce 000c 	str.w	r0, [lr, #12]
    ctx->state[2] += local.C;
    fa42:	f8de 3010 	ldr.w	r3, [lr, #16]
    fa46:	4419      	add	r1, r3
    fa48:	f8ce 1010 	str.w	r1, [lr, #16]
    ctx->state[3] += local.D;
    fa4c:	f8de 3014 	ldr.w	r3, [lr, #20]
    fa50:	441a      	add	r2, r3
    fa52:	f8ce 2014 	str.w	r2, [lr, #20]

    /* Zeroise variables to clear sensitive data from memory. */
    mbedtls_platform_zeroize( &local, sizeof( local ) );
    fa56:	2150      	movs	r1, #80	; 0x50
    fa58:	a80e      	add	r0, sp, #56	; 0x38
    fa5a:	f004 fa51 	bl	13f00 <mbedtls_platform_zeroize>

    return( 0 );
}
    fa5e:	2000      	movs	r0, #0
    fa60:	b023      	add	sp, #140	; 0x8c
    fa62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fa66:	bf00      	nop
    fa68:	4e0811a1 	.word	0x4e0811a1
    fa6c:	f7537e82 	.word	0xf7537e82
    fa70:	bd3af235 	.word	0xbd3af235
    fa74:	2ad7d2bb 	.word	0x2ad7d2bb
    fa78:	eb86d391 	.word	0xeb86d391

0000fa7c <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
    fa7c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    fa80:	4905      	ldr	r1, [pc, #20]	; (fa98 <__NVIC_SystemReset+0x1c>)
    fa82:	68ca      	ldr	r2, [r1, #12]
    fa84:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    fa88:	4b04      	ldr	r3, [pc, #16]	; (fa9c <__NVIC_SystemReset+0x20>)
    fa8a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    fa8c:	60cb      	str	r3, [r1, #12]
    fa8e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    fa92:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    fa94:	e7fd      	b.n	fa92 <__NVIC_SystemReset+0x16>
    fa96:	bf00      	nop
    fa98:	e000ed00 	.word	0xe000ed00
    fa9c:	05fa0004 	.word	0x05fa0004

0000faa0 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    faa0:	4b02      	ldr	r3, [pc, #8]	; (faac <nvmc_wait+0xc>)
    faa2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    faa6:	2b00      	cmp	r3, #0
    faa8:	d0fa      	beq.n	faa0 <nvmc_wait>
}
    faaa:	4770      	bx	lr
    faac:	4001e000 	.word	0x4001e000

0000fab0 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
    fab0:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    fab2:	4b03      	ldr	r3, [pc, #12]	; (fac0 <nvmc_config+0x10>)
    fab4:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
    fab8:	f7ff fff2 	bl	faa0 <nvmc_wait>
}
    fabc:	bd08      	pop	{r3, pc}
    fabe:	bf00      	nop
    fac0:	4001e000 	.word	0x4001e000

0000fac4 <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    fac4:	4b01      	ldr	r3, [pc, #4]	; (facc <SystemCoreClockUpdate+0x8>)
    fac6:	4a02      	ldr	r2, [pc, #8]	; (fad0 <SystemCoreClockUpdate+0xc>)
    fac8:	601a      	str	r2, [r3, #0]
}
    faca:	4770      	bx	lr
    facc:	200000a4 	.word	0x200000a4
    fad0:	03d09000 	.word	0x03d09000

0000fad4 <SystemInit>:

void SystemInit(void)
{
    fad4:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    fad6:	f00e ffa9 	bl	1ea2c <nrf52_errata_36>
    fada:	b140      	cbz	r0, faee <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    fadc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    fae0:	2200      	movs	r2, #0
    fae2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    fae6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    faea:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    faee:	f00e ffa7 	bl	1ea40 <nrf52_errata_66>
    faf2:	2800      	cmp	r0, #0
    faf4:	d046      	beq.n	fb84 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    faf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    fafa:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    fafe:	4b4f      	ldr	r3, [pc, #316]	; (fc3c <SystemInit+0x168>)
    fb00:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    fb04:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    fb08:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    fb0c:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    fb10:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    fb14:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    fb18:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    fb1c:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    fb20:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    fb24:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    fb28:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    fb2c:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    fb30:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    fb34:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    fb38:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    fb3c:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    fb40:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    fb44:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    fb48:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    fb4c:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    fb50:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    fb54:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    fb58:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    fb5c:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    fb60:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    fb64:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    fb68:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    fb6c:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    fb70:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    fb74:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    fb78:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    fb7c:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    fb80:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    fb84:	f00e ff66 	bl	1ea54 <nrf52_errata_98>
    fb88:	b118      	cbz	r0, fb92 <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    fb8a:	4b2d      	ldr	r3, [pc, #180]	; (fc40 <SystemInit+0x16c>)
    fb8c:	4a2d      	ldr	r2, [pc, #180]	; (fc44 <SystemInit+0x170>)
    fb8e:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    fb92:	f00e ff72 	bl	1ea7a <nrf52_errata_103>
    fb96:	b118      	cbz	r0, fba0 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    fb98:	4b2b      	ldr	r3, [pc, #172]	; (fc48 <SystemInit+0x174>)
    fb9a:	22fb      	movs	r2, #251	; 0xfb
    fb9c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    fba0:	f00e ff7e 	bl	1eaa0 <nrf52_errata_115>
    fba4:	b170      	cbz	r0, fbc4 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    fba6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    fbaa:	f8d1 3ee4 	ldr.w	r3, [r1, #3812]	; 0xee4
    fbae:	f023 030f 	bic.w	r3, r3, #15
    fbb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    fbb6:	f8d2 2258 	ldr.w	r2, [r2, #600]	; 0x258
    fbba:	f002 020f 	and.w	r2, r2, #15
    fbbe:	4313      	orrs	r3, r2
    fbc0:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    fbc4:	f00e ff7f 	bl	1eac6 <nrf52_errata_120>
    fbc8:	b120      	cbz	r0, fbd4 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    fbca:	4b20      	ldr	r3, [pc, #128]	; (fc4c <SystemInit+0x178>)
    fbcc:	f44f 7200 	mov.w	r2, #512	; 0x200
    fbd0:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    fbd4:	f00e ff8a 	bl	1eaec <nrf52_errata_136>
    fbd8:	b160      	cbz	r0, fbf4 <SystemInit+0x120>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    fbda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    fbde:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    fbe2:	f013 0f01 	tst.w	r3, #1
    fbe6:	d005      	beq.n	fbf4 <SystemInit+0x120>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    fbe8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    fbec:	f06f 0201 	mvn.w	r2, #1
    fbf0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    nrf52_handle_approtect();
    fbf4:	f00e ff94 	bl	1eb20 <nrf52_handle_approtect>

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    fbf8:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    fbfc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    fc00:	2b00      	cmp	r3, #0
    fc02:	db08      	blt.n	fc16 <SystemInit+0x142>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    fc04:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    fc08:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    fc0c:	2b00      	cmp	r3, #0
    fc0e:	db02      	blt.n	fc16 <SystemInit+0x142>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
    fc10:	f7ff ff58 	bl	fac4 <SystemCoreClockUpdate>
}
    fc14:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
    fc16:	2001      	movs	r0, #1
    fc18:	f7ff ff4a 	bl	fab0 <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    fc1c:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
    fc20:	2512      	movs	r5, #18
    fc22:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
    fc26:	f7ff ff3b 	bl	faa0 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    fc2a:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
    fc2e:	f7ff ff37 	bl	faa0 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
    fc32:	2000      	movs	r0, #0
    fc34:	f7ff ff3c 	bl	fab0 <nvmc_config>
            NVIC_SystemReset();
    fc38:	f7ff ff20 	bl	fa7c <__NVIC_SystemReset>
    fc3c:	4000c000 	.word	0x4000c000
    fc40:	40005000 	.word	0x40005000
    fc44:	00038148 	.word	0x00038148
    fc48:	4000f000 	.word	0x4000f000
    fc4c:	40029000 	.word	0x40029000

0000fc50 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    fc50:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
    fc52:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    fc54:	fab4 f384 	clz	r3, r4
    fc58:	f1c3 031f 	rsb	r3, r3, #31
    fc5c:	fa5f fc83 	uxtb.w	ip, r3
        if (idx < 0) {
    fc60:	2b00      	cmp	r3, #0
    fc62:	db16      	blt.n	fc92 <nrfx_flag32_alloc+0x42>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    fc64:	2201      	movs	r2, #1
    fc66:	fa02 f303 	lsl.w	r3, r2, r3
    fc6a:	ea24 0303 	bic.w	r3, r4, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    fc6e:	f3bf 8f5b 	dmb	ish
    fc72:	e850 2f00 	ldrex	r2, [r0]
    fc76:	42a2      	cmp	r2, r4
    fc78:	d104      	bne.n	fc84 <nrfx_flag32_alloc+0x34>
    fc7a:	e840 3e00 	strex	lr, r3, [r0]
    fc7e:	f1be 0f00 	cmp.w	lr, #0
    fc82:	d1f6      	bne.n	fc72 <nrfx_flag32_alloc+0x22>
    fc84:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    fc88:	d1e3      	bne.n	fc52 <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
    fc8a:	f881 c000 	strb.w	ip, [r1]

    return NRFX_SUCCESS;
    fc8e:	4802      	ldr	r0, [pc, #8]	; (fc98 <nrfx_flag32_alloc+0x48>)
}
    fc90:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
    fc92:	4802      	ldr	r0, [pc, #8]	; (fc9c <nrfx_flag32_alloc+0x4c>)
    fc94:	e7fc      	b.n	fc90 <nrfx_flag32_alloc+0x40>
    fc96:	bf00      	nop
    fc98:	0bad0000 	.word	0x0bad0000
    fc9c:	0bad0002 	.word	0x0bad0002

0000fca0 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    fca0:	6803      	ldr	r3, [r0, #0]
    fca2:	40cb      	lsrs	r3, r1
    fca4:	f013 0f01 	tst.w	r3, #1
    fca8:	d115      	bne.n	fcd6 <nrfx_flag32_free+0x36>
{
    fcaa:	b500      	push	{lr}
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
    fcac:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    fcae:	2301      	movs	r3, #1
    fcb0:	408b      	lsls	r3, r1
    fcb2:	4313      	orrs	r3, r2
    fcb4:	f3bf 8f5b 	dmb	ish
    fcb8:	e850 cf00 	ldrex	ip, [r0]
    fcbc:	4594      	cmp	ip, r2
    fcbe:	d104      	bne.n	fcca <nrfx_flag32_free+0x2a>
    fcc0:	e840 3e00 	strex	lr, r3, [r0]
    fcc4:	f1be 0f00 	cmp.w	lr, #0
    fcc8:	d1f6      	bne.n	fcb8 <nrfx_flag32_free+0x18>
    fcca:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    fcce:	d1ed      	bne.n	fcac <nrfx_flag32_free+0xc>

    return NRFX_SUCCESS;
    fcd0:	4802      	ldr	r0, [pc, #8]	; (fcdc <nrfx_flag32_free+0x3c>)
}
    fcd2:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_INVALID_PARAM;
    fcd6:	4802      	ldr	r0, [pc, #8]	; (fce0 <nrfx_flag32_free+0x40>)
}
    fcd8:	4770      	bx	lr
    fcda:	bf00      	nop
    fcdc:	0bad0000 	.word	0x0bad0000
    fce0:	0bad0004 	.word	0x0bad0004

0000fce4 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    fce4:	b570      	push	{r4, r5, r6, lr}
    fce6:	b082      	sub	sp, #8
    switch (domain)
    fce8:	4606      	mov	r6, r0
    fcea:	b118      	cbz	r0, fcf4 <clock_stop+0x10>
    fcec:	2801      	cmp	r0, #1
    fcee:	d016      	beq.n	fd1e <clock_stop+0x3a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    fcf0:	b002      	add	sp, #8
    fcf2:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENCLR = mask;
    fcf4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    fcf8:	2202      	movs	r2, #2
    fcfa:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fcfe:	2200      	movs	r2, #0
    fd00:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    fd04:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    fd08:	2201      	movs	r2, #1
    fd0a:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    fd0c:	2301      	movs	r3, #1
    fd0e:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    fd12:	429e      	cmp	r6, r3
    fd14:	d00f      	beq.n	fd36 <clock_stop+0x52>
    fd16:	2500      	movs	r5, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    fd18:	f242 7410 	movw	r4, #10000	; 0x2710
    fd1c:	e013      	b.n	fd46 <clock_stop+0x62>
    p_reg->INTENCLR = mask;
    fd1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    fd22:	2201      	movs	r2, #1
    fd24:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fd28:	2100      	movs	r1, #0
    fd2a:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    fd2e:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    fd32:	605a      	str	r2, [r3, #4]
}
    fd34:	e7ea      	b.n	fd0c <clock_stop+0x28>
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    fd36:	f10d 0507 	add.w	r5, sp, #7
    fd3a:	e7ed      	b.n	fd18 <clock_stop+0x34>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    fd3c:	2001      	movs	r0, #1
    fd3e:	f00e feff 	bl	1eb40 <nrfx_busy_wait>
    fd42:	3c01      	subs	r4, #1
    fd44:	d00c      	beq.n	fd60 <clock_stop+0x7c>
    fd46:	462a      	mov	r2, r5
    fd48:	4631      	mov	r1, r6
    fd4a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    fd4e:	f00e fefb 	bl	1eb48 <nrf_clock_is_running>
    fd52:	b128      	cbz	r0, fd60 <clock_stop+0x7c>
    fd54:	2d00      	cmp	r5, #0
    fd56:	d0f1      	beq.n	fd3c <clock_stop+0x58>
    fd58:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fd5c:	2b01      	cmp	r3, #1
    fd5e:	d0ed      	beq.n	fd3c <clock_stop+0x58>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    fd60:	2e01      	cmp	r6, #1
    fd62:	d1c5      	bne.n	fcf0 <clock_stop+0xc>
            m_clock_cb.hfclk_started = false;
    fd64:	4b01      	ldr	r3, [pc, #4]	; (fd6c <clock_stop+0x88>)
    fd66:	2200      	movs	r2, #0
    fd68:	715a      	strb	r2, [r3, #5]
    fd6a:	e7c1      	b.n	fcf0 <clock_stop+0xc>
    fd6c:	200032cc 	.word	0x200032cc

0000fd70 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    fd70:	4b06      	ldr	r3, [pc, #24]	; (fd8c <nrfx_clock_init+0x1c>)
    fd72:	791b      	ldrb	r3, [r3, #4]
    fd74:	b93b      	cbnz	r3, fd86 <nrfx_clock_init+0x16>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    fd76:	4b05      	ldr	r3, [pc, #20]	; (fd8c <nrfx_clock_init+0x1c>)
    fd78:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    fd7a:	2201      	movs	r2, #1
    fd7c:	711a      	strb	r2, [r3, #4]
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        m_clock_cb.hfclk_started = false;
    fd7e:	2200      	movs	r2, #0
    fd80:	715a      	strb	r2, [r3, #5]
    nrfx_err_t err_code = NRFX_SUCCESS;
    fd82:	4803      	ldr	r0, [pc, #12]	; (fd90 <nrfx_clock_init+0x20>)
    fd84:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    fd86:	4803      	ldr	r0, [pc, #12]	; (fd94 <nrfx_clock_init+0x24>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    fd88:	4770      	bx	lr
    fd8a:	bf00      	nop
    fd8c:	200032cc 	.word	0x200032cc
    fd90:	0bad0000 	.word	0x0bad0000
    fd94:	0bad000c 	.word	0x0bad000c

0000fd98 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    fd98:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    fd9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    fd9e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    fda2:	b18b      	cbz	r3, fdc8 <nrfx_power_clock_irq_handler+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fda4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    fda8:	2200      	movs	r2, #0
    fdaa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    fdae:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    fdb2:	2201      	movs	r2, #1
    fdb4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    fdb8:	4b15      	ldr	r3, [pc, #84]	; (fe10 <nrfx_power_clock_irq_handler+0x78>)
    fdba:	795b      	ldrb	r3, [r3, #5]
    fdbc:	b923      	cbnz	r3, fdc8 <nrfx_power_clock_irq_handler+0x30>
        {
            m_clock_cb.hfclk_started = true;
    fdbe:	4b14      	ldr	r3, [pc, #80]	; (fe10 <nrfx_power_clock_irq_handler+0x78>)
    fdc0:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    fdc2:	681b      	ldr	r3, [r3, #0]
    fdc4:	2000      	movs	r0, #0
    fdc6:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    fdc8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    fdcc:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    fdd0:	b19b      	cbz	r3, fdfa <nrfx_power_clock_irq_handler+0x62>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fdd2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    fdd6:	2200      	movs	r2, #0
    fdd8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    fddc:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    fde0:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    fde4:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    fde8:	f012 0f03 	tst.w	r2, #3
    fdec:	d106      	bne.n	fdfc <nrfx_power_clock_irq_handler+0x64>
    p_reg->LFCLKSRC = (uint32_t)(source);
    fdee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    fdf2:	2201      	movs	r2, #1
    fdf4:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    fdf8:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    fdfa:	bd08      	pop	{r3, pc}
    p_reg->INTENCLR = mask;
    fdfc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    fe00:	2202      	movs	r2, #2
    fe02:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    fe06:	4b02      	ldr	r3, [pc, #8]	; (fe10 <nrfx_power_clock_irq_handler+0x78>)
    fe08:	681b      	ldr	r3, [r3, #0]
    fe0a:	2001      	movs	r0, #1
    fe0c:	4798      	blx	r3
}
    fe0e:	e7f4      	b.n	fdfa <nrfx_power_clock_irq_handler+0x62>
    fe10:	200032cc 	.word	0x200032cc

0000fe14 <nrf_gpio_reconfigure>:
{
    fe14:	b5f0      	push	{r4, r5, r6, r7, lr}
    fe16:	461c      	mov	r4, r3
    fe18:	9f05      	ldr	r7, [sp, #20]
    fe1a:	9e06      	ldr	r6, [sp, #24]
    *p_pin = pin_number & 0x1F;
    fe1c:	f000 0c1f 	and.w	ip, r0, #31
    return pin_number >> 5;
    fe20:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    fe22:	2801      	cmp	r0, #1
    fe24:	d035      	beq.n	fe92 <nrf_gpio_reconfigure+0x7e>
        case 0: return NRF_P0;
    fe26:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    fe2a:	f50c 73e0 	add.w	r3, ip, #448	; 0x1c0
    fe2e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    fe32:	b381      	cbz	r1, fe96 <nrf_gpio_reconfigure+0x82>
    fe34:	2001      	movs	r0, #1
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    fe36:	b382      	cbz	r2, fe9a <nrf_gpio_reconfigure+0x86>
    fe38:	f04f 0e02 	mov.w	lr, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    fe3c:	ea40 000e 	orr.w	r0, r0, lr
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    fe40:	b374      	cbz	r4, fea0 <nrf_gpio_reconfigure+0x8c>
    fe42:	f04f 0e0c 	mov.w	lr, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    fe46:	ea40 000e 	orr.w	r0, r0, lr
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    fe4a:	b367      	cbz	r7, fea6 <nrf_gpio_reconfigure+0x92>
    fe4c:	f44f 6ee0 	mov.w	lr, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    fe50:	ea40 000e 	orr.w	r0, r0, lr
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    fe54:	b356      	cbz	r6, feac <nrf_gpio_reconfigure+0x98>
    fe56:	f44f 3e40 	mov.w	lr, #196608	; 0x30000
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    fe5a:	ea40 000e 	orr.w	r0, r0, lr
    cnf &= ~to_update;
    fe5e:	ea23 0000 	bic.w	r0, r3, r0
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    fe62:	b331      	cbz	r1, feb2 <nrf_gpio_reconfigure+0x9e>
    fe64:	780b      	ldrb	r3, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    fe66:	b332      	cbz	r2, feb6 <nrf_gpio_reconfigure+0xa2>
    fe68:	7812      	ldrb	r2, [r2, #0]
    fe6a:	0052      	lsls	r2, r2, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    fe6c:	4313      	orrs	r3, r2
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    fe6e:	b324      	cbz	r4, feba <nrf_gpio_reconfigure+0xa6>
    fe70:	7822      	ldrb	r2, [r4, #0]
    fe72:	0092      	lsls	r2, r2, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    fe74:	4313      	orrs	r3, r2
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    fe76:	b317      	cbz	r7, febe <nrf_gpio_reconfigure+0xaa>
    fe78:	783a      	ldrb	r2, [r7, #0]
    fe7a:	0212      	lsls	r2, r2, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    fe7c:	4313      	orrs	r3, r2
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    fe7e:	b306      	cbz	r6, fec2 <nrf_gpio_reconfigure+0xae>
    fe80:	7832      	ldrb	r2, [r6, #0]
    fe82:	0412      	lsls	r2, r2, #16
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    fe84:	4313      	orrs	r3, r2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    fe86:	4303      	orrs	r3, r0
    reg->PIN_CNF[pin_number] = cnf;
    fe88:	f50c 7ce0 	add.w	ip, ip, #448	; 0x1c0
    fe8c:	f845 302c 	str.w	r3, [r5, ip, lsl #2]
}
    fe90:	bdf0      	pop	{r4, r5, r6, r7, pc}
        case 1: return NRF_P1;
    fe92:	4d0d      	ldr	r5, [pc, #52]	; (fec8 <nrf_gpio_reconfigure+0xb4>)
    fe94:	e7c9      	b.n	fe2a <nrf_gpio_reconfigure+0x16>
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    fe96:	2000      	movs	r0, #0
    fe98:	e7cd      	b.n	fe36 <nrf_gpio_reconfigure+0x22>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    fe9a:	f04f 0e00 	mov.w	lr, #0
    fe9e:	e7cd      	b.n	fe3c <nrf_gpio_reconfigure+0x28>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    fea0:	f04f 0e00 	mov.w	lr, #0
    fea4:	e7cf      	b.n	fe46 <nrf_gpio_reconfigure+0x32>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    fea6:	f04f 0e00 	mov.w	lr, #0
    feaa:	e7d1      	b.n	fe50 <nrf_gpio_reconfigure+0x3c>
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    feac:	f04f 0e00 	mov.w	lr, #0
    feb0:	e7d3      	b.n	fe5a <nrf_gpio_reconfigure+0x46>
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    feb2:	2300      	movs	r3, #0
    feb4:	e7d7      	b.n	fe66 <nrf_gpio_reconfigure+0x52>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    feb6:	2200      	movs	r2, #0
    feb8:	e7d8      	b.n	fe6c <nrf_gpio_reconfigure+0x58>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    feba:	2200      	movs	r2, #0
    febc:	e7da      	b.n	fe74 <nrf_gpio_reconfigure+0x60>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    febe:	2200      	movs	r2, #0
    fec0:	e7dc      	b.n	fe7c <nrf_gpio_reconfigure+0x68>
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    fec2:	2200      	movs	r2, #0
    fec4:	e7de      	b.n	fe84 <nrf_gpio_reconfigure+0x70>
    fec6:	bf00      	nop
    fec8:	50000300 	.word	0x50000300

0000fecc <nrf_gpio_latches_read_and_clear>:
{
    fecc:	b500      	push	{lr}
    fece:	b083      	sub	sp, #12
    fed0:	4684      	mov	ip, r0
    fed2:	468e      	mov	lr, r1
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    fed4:	4b0d      	ldr	r3, [pc, #52]	; (ff0c <nrf_gpio_latches_read_and_clear+0x40>)
    fed6:	e893 0003 	ldmia.w	r3, {r0, r1}
    feda:	ab02      	add	r3, sp, #8
    fedc:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    fee0:	4663      	mov	r3, ip
    fee2:	e00b      	b.n	fefc <nrf_gpio_latches_read_and_clear+0x30>
        *p_masks = gpio_regs[i]->LATCH;
    fee4:	a902      	add	r1, sp, #8
    fee6:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    feea:	f851 1c08 	ldr.w	r1, [r1, #-8]
    feee:	f8d1 0520 	ldr.w	r0, [r1, #1312]	; 0x520
    fef2:	f842 0b04 	str.w	r0, [r2], #4
        gpio_regs[i]->LATCH = *p_masks;
    fef6:	f8c1 0520 	str.w	r0, [r1, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    fefa:	3301      	adds	r3, #1
    fefc:	eb0c 000e 	add.w	r0, ip, lr
    ff00:	4298      	cmp	r0, r3
    ff02:	d8ef      	bhi.n	fee4 <nrf_gpio_latches_read_and_clear+0x18>
}
    ff04:	b003      	add	sp, #12
    ff06:	f85d fb04 	ldr.w	pc, [sp], #4
    ff0a:	bf00      	nop
    ff0c:	00020af0 	.word	0x00020af0

0000ff10 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    ff10:	3008      	adds	r0, #8
    ff12:	4b03      	ldr	r3, [pc, #12]	; (ff20 <pin_in_use+0x10>)
    ff14:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    ff18:	f000 0001 	and.w	r0, r0, #1
    ff1c:	4770      	bx	lr
    ff1e:	bf00      	nop
    ff20:	200000a8 	.word	0x200000a8

0000ff24 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    ff24:	3008      	adds	r0, #8
    ff26:	4b03      	ldr	r3, [pc, #12]	; (ff34 <pin_in_use_by_te+0x10>)
    ff28:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    ff2c:	f3c0 1040 	ubfx	r0, r0, #5, #1
    ff30:	4770      	bx	lr
    ff32:	bf00      	nop
    ff34:	200000a8 	.word	0x200000a8

0000ff38 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    ff38:	3008      	adds	r0, #8
    ff3a:	4b04      	ldr	r3, [pc, #16]	; (ff4c <pin_has_trigger+0x14>)
    ff3c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    ff40:	f010 001c 	ands.w	r0, r0, #28
    ff44:	bf18      	it	ne
    ff46:	2001      	movne	r0, #1
    ff48:	4770      	bx	lr
    ff4a:	bf00      	nop
    ff4c:	200000a8 	.word	0x200000a8

0000ff50 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    ff50:	3008      	adds	r0, #8
    ff52:	4b03      	ldr	r3, [pc, #12]	; (ff60 <pin_is_output+0x10>)
    ff54:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    ff58:	f3c0 0040 	ubfx	r0, r0, #1, #1
    ff5c:	4770      	bx	lr
    ff5e:	bf00      	nop
    ff60:	200000a8 	.word	0x200000a8

0000ff64 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    ff64:	3008      	adds	r0, #8
    ff66:	4b02      	ldr	r3, [pc, #8]	; (ff70 <pin_te_get+0xc>)
    ff68:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    ff6c:	0b40      	lsrs	r0, r0, #13
    ff6e:	4770      	bx	lr
    ff70:	200000a8 	.word	0x200000a8

0000ff74 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    ff74:	2200      	movs	r2, #0
    ff76:	e004      	b.n	ff82 <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    ff78:	f04f 33ff 	mov.w	r3, #4294967295
    ff7c:	4283      	cmp	r3, r0
    ff7e:	d00f      	beq.n	ffa0 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    ff80:	3201      	adds	r2, #1
    ff82:	2a2f      	cmp	r2, #47	; 0x2f
    ff84:	d80a      	bhi.n	ff9c <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    ff86:	f102 0308 	add.w	r3, r2, #8
    ff8a:	4906      	ldr	r1, [pc, #24]	; (ffa4 <handler_in_use+0x30>)
    ff8c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    ff90:	f413 7f80 	tst.w	r3, #256	; 0x100
    ff94:	d0f0      	beq.n	ff78 <handler_in_use+0x4>
    ff96:	f3c3 2343 	ubfx	r3, r3, #9, #4
    ff9a:	e7ef      	b.n	ff7c <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
    ff9c:	2000      	movs	r0, #0
    ff9e:	4770      	bx	lr
            return true;
    ffa0:	2001      	movs	r0, #1
}
    ffa2:	4770      	bx	lr
    ffa4:	200000a8 	.word	0x200000a8

0000ffa8 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    ffa8:	2300      	movs	r3, #0
    ffaa:	b113      	cbz	r3, ffb2 <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
    ffac:	f04f 30ff 	mov.w	r0, #4294967295
}
    ffb0:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    ffb2:	4a07      	ldr	r2, [pc, #28]	; (ffd0 <find_handler+0x28>)
    ffb4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    ffb8:	4282      	cmp	r2, r0
    ffba:	d001      	beq.n	ffc0 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    ffbc:	3301      	adds	r3, #1
    ffbe:	e7f4      	b.n	ffaa <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    ffc0:	4a03      	ldr	r2, [pc, #12]	; (ffd0 <find_handler+0x28>)
    ffc2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    ffc6:	6852      	ldr	r2, [r2, #4]
    ffc8:	428a      	cmp	r2, r1
    ffca:	d1f7      	bne.n	ffbc <find_handler+0x14>
            return i;
    ffcc:	4618      	mov	r0, r3
    ffce:	4770      	bx	lr
    ffd0:	200000a8 	.word	0x200000a8

0000ffd4 <get_initial_sense>:
    return NRFX_SUCCESS;
}

static inline nrf_gpio_pin_sense_t get_initial_sense(nrfx_gpiote_pin_t pin)
{
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    ffd4:	f100 0208 	add.w	r2, r0, #8
    ffd8:	4b0f      	ldr	r3, [pc, #60]	; (10018 <get_initial_sense+0x44>)
    ffda:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    ffde:	f3c3 0382 	ubfx	r3, r3, #2, #3
    nrf_gpio_pin_sense_t sense;

    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    ffe2:	2b04      	cmp	r3, #4
    ffe4:	d012      	beq.n	1000c <get_initial_sense+0x38>
    {
        sense = NRF_GPIO_PIN_SENSE_LOW;
    }
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    ffe6:	2b05      	cmp	r3, #5
    ffe8:	d012      	beq.n	10010 <get_initial_sense+0x3c>
    *p_pin = pin_number & 0x1F;
    ffea:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    ffee:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    fff0:	2801      	cmp	r0, #1
    fff2:	d009      	beq.n	10008 <get_initial_sense+0x34>
        case 0: return NRF_P0;
    fff4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return p_reg->IN;
    fff8:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    fffc:	40d3      	lsrs	r3, r2
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    }
    else
    {
        /* If edge detection start with sensing opposite state. */
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    fffe:	f013 0f01 	tst.w	r3, #1
   10002:	d007      	beq.n	10014 <get_initial_sense+0x40>
   10004:	2003      	movs	r0, #3
   10006:	4770      	bx	lr
        case 1: return NRF_P1;
   10008:	4b04      	ldr	r3, [pc, #16]	; (1001c <get_initial_sense+0x48>)
   1000a:	e7f5      	b.n	fff8 <get_initial_sense+0x24>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   1000c:	2003      	movs	r0, #3
   1000e:	4770      	bx	lr
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   10010:	2002      	movs	r0, #2
   10012:	4770      	bx	lr
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   10014:	2002      	movs	r0, #2
    }

    return sense;
}
   10016:	4770      	bx	lr
   10018:	200000a8 	.word	0x200000a8
   1001c:	50000300 	.word	0x50000300

00010020 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   10020:	3008      	adds	r0, #8
   10022:	4b06      	ldr	r3, [pc, #24]	; (1003c <channel_handler_get+0x1c>)
   10024:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   10028:	f410 7f80 	tst.w	r0, #256	; 0x100
   1002c:	d004      	beq.n	10038 <channel_handler_get+0x18>
   1002e:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
   10032:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   10036:	4770      	bx	lr
        return NULL;
   10038:	2000      	movs	r0, #0
}
   1003a:	4770      	bx	lr
   1003c:	200000a8 	.word	0x200000a8

00010040 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   10040:	b570      	push	{r4, r5, r6, lr}
   10042:	4604      	mov	r4, r0
   10044:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
   10046:	f7ff ffeb 	bl	10020 <channel_handler_get>

    if (handler)
   1004a:	b120      	cbz	r0, 10056 <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
   1004c:	6806      	ldr	r6, [r0, #0]
   1004e:	6842      	ldr	r2, [r0, #4]
   10050:	4629      	mov	r1, r5
   10052:	4620      	mov	r0, r4
   10054:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
   10056:	4b04      	ldr	r3, [pc, #16]	; (10068 <call_handler+0x28>)
   10058:	689b      	ldr	r3, [r3, #8]
   1005a:	b123      	cbz	r3, 10066 <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1005c:	4a02      	ldr	r2, [pc, #8]	; (10068 <call_handler+0x28>)
   1005e:	68d2      	ldr	r2, [r2, #12]
   10060:	4629      	mov	r1, r5
   10062:	4620      	mov	r0, r4
   10064:	4798      	blx	r3
    }
}
   10066:	bd70      	pop	{r4, r5, r6, pc}
   10068:	200000a8 	.word	0x200000a8

0001006c <next_sense_cond_call_handler>:

static void next_sense_cond_call_handler(nrfx_gpiote_pin_t     pin,
                                         nrfx_gpiote_trigger_t trigger,
                                         nrf_gpio_pin_sense_t  sense)
{
   1006c:	b570      	push	{r4, r5, r6, lr}
   1006e:	4606      	mov	r6, r0
   10070:	460c      	mov	r4, r1
   10072:	4615      	mov	r5, r2
    if (is_level(trigger))
   10074:	4608      	mov	r0, r1
   10076:	f00e fe69 	bl	1ed4c <is_level>
   1007a:	b960      	cbnz	r0, 10096 <next_sense_cond_call_handler+0x2a>
    {
        /* Reconfigure sense to the opposite level, so the internal PINx.DETECT signal
         * can be deasserted. Therefore PORT event can be generated again,
         * unless some other PINx.DETECT signal is still active. */
        nrf_gpio_pin_sense_t next_sense = (sense == NRF_GPIO_PIN_SENSE_HIGH) ?
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1007c:	2d02      	cmp	r5, #2
   1007e:	d028      	beq.n	100d2 <next_sense_cond_call_handler+0x66>
   10080:	2102      	movs	r1, #2

        nrf_gpio_cfg_sense_set(pin, next_sense);
   10082:	4630      	mov	r0, r6
   10084:	f00e fe3a 	bl	1ecfc <nrf_gpio_cfg_sense_set>

        /* Invoke user handler only if the sensed pin level matches its polarity
         * configuration. Call handler unconditionally in case of toggle trigger or
         * level trigger. */
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   10088:	2c03      	cmp	r4, #3
   1008a:	d026      	beq.n	100da <next_sense_cond_call_handler+0x6e>
   1008c:	2d02      	cmp	r5, #2
   1008e:	d022      	beq.n	100d6 <next_sense_cond_call_handler+0x6a>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   10090:	2d03      	cmp	r5, #3
   10092:	d027      	beq.n	100e4 <next_sense_cond_call_handler+0x78>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
        {
            call_handler(pin, trigger);
        }
    }
}
   10094:	bd70      	pop	{r4, r5, r6, pc}
        call_handler(pin, trigger);
   10096:	4621      	mov	r1, r4
   10098:	4630      	mov	r0, r6
   1009a:	f7ff ffd1 	bl	10040 <call_handler>
    *p_pin = pin_number & 0x1F;
   1009e:	f006 031f 	and.w	r3, r6, #31
    return pin_number >> 5;
   100a2:	0972      	lsrs	r2, r6, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   100a4:	2a01      	cmp	r2, #1
   100a6:	d012      	beq.n	100ce <next_sense_cond_call_handler+0x62>
        case 0: return NRF_P0;
   100a8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   100ac:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   100b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   100b4:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
   100b8:	429d      	cmp	r5, r3
   100ba:	d1eb      	bne.n	10094 <next_sense_cond_call_handler+0x28>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   100bc:	2100      	movs	r1, #0
   100be:	4630      	mov	r0, r6
   100c0:	f00e fe1c 	bl	1ecfc <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   100c4:	4629      	mov	r1, r5
   100c6:	4630      	mov	r0, r6
   100c8:	f00e fe18 	bl	1ecfc <nrf_gpio_cfg_sense_set>
   100cc:	e7e2      	b.n	10094 <next_sense_cond_call_handler+0x28>
        case 1: return NRF_P1;
   100ce:	4a07      	ldr	r2, [pc, #28]	; (100ec <next_sense_cond_call_handler+0x80>)
   100d0:	e7ec      	b.n	100ac <next_sense_cond_call_handler+0x40>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   100d2:	2103      	movs	r1, #3
   100d4:	e7d5      	b.n	10082 <next_sense_cond_call_handler+0x16>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   100d6:	2c01      	cmp	r4, #1
   100d8:	d1da      	bne.n	10090 <next_sense_cond_call_handler+0x24>
            call_handler(pin, trigger);
   100da:	4621      	mov	r1, r4
   100dc:	4630      	mov	r0, r6
   100de:	f7ff ffaf 	bl	10040 <call_handler>
}
   100e2:	e7d7      	b.n	10094 <next_sense_cond_call_handler+0x28>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   100e4:	2c02      	cmp	r4, #2
   100e6:	d1d5      	bne.n	10094 <next_sense_cond_call_handler+0x28>
   100e8:	e7f7      	b.n	100da <next_sense_cond_call_handler+0x6e>
   100ea:	bf00      	nop
   100ec:	50000300 	.word	0x50000300

000100f0 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   100f0:	f100 0208 	add.w	r2, r0, #8
   100f4:	4b0e      	ldr	r3, [pc, #56]	; (10130 <release_handler+0x40>)
   100f6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   100fa:	f413 7f80 	tst.w	r3, #256	; 0x100
   100fe:	d016      	beq.n	1012e <release_handler+0x3e>
{
   10100:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   10102:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   10106:	4610      	mov	r0, r2
   10108:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1010c:	4a08      	ldr	r2, [pc, #32]	; (10130 <release_handler+0x40>)
   1010e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
   10112:	4620      	mov	r0, r4
   10114:	f7ff ff2e 	bl	ff74 <handler_in_use>
   10118:	b100      	cbz	r0, 1011c <release_handler+0x2c>
}
   1011a:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
   1011c:	4804      	ldr	r0, [pc, #16]	; (10130 <release_handler+0x40>)
   1011e:	2300      	movs	r3, #0
   10120:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   10124:	4621      	mov	r1, r4
   10126:	3074      	adds	r0, #116	; 0x74
   10128:	f7ff fdba 	bl	fca0 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   1012c:	e7f5      	b.n	1011a <release_handler+0x2a>
   1012e:	4770      	bx	lr
   10130:	200000a8 	.word	0x200000a8

00010134 <pin_handler_trigger_uninit>:
{
   10134:	b510      	push	{r4, lr}
   10136:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
   10138:	f7ff fef4 	bl	ff24 <pin_in_use_by_te>
   1013c:	b140      	cbz	r0, 10150 <pin_handler_trigger_uninit+0x1c>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   1013e:	4620      	mov	r0, r4
   10140:	f7ff ff10 	bl	ff64 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   10144:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   10148:	4b06      	ldr	r3, [pc, #24]	; (10164 <pin_handler_trigger_uninit+0x30>)
   1014a:	2200      	movs	r2, #0
   1014c:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
   10150:	4620      	mov	r0, r4
   10152:	f7ff ffcd 	bl	100f0 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   10156:	3408      	adds	r4, #8
   10158:	4b03      	ldr	r3, [pc, #12]	; (10168 <pin_handler_trigger_uninit+0x34>)
   1015a:	2200      	movs	r2, #0
   1015c:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
   10160:	bd10      	pop	{r4, pc}
   10162:	bf00      	nop
   10164:	40006000 	.word	0x40006000
   10168:	200000a8 	.word	0x200000a8

0001016c <pin_handler_set>:
{
   1016c:	b570      	push	{r4, r5, r6, lr}
   1016e:	b082      	sub	sp, #8
   10170:	4605      	mov	r5, r0
   10172:	460e      	mov	r6, r1
   10174:	4614      	mov	r4, r2
    release_handler(pin);
   10176:	f7ff ffbb 	bl	100f0 <release_handler>
    if (!handler)
   1017a:	b326      	cbz	r6, 101c6 <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
   1017c:	4621      	mov	r1, r4
   1017e:	4630      	mov	r0, r6
   10180:	f7ff ff12 	bl	ffa8 <find_handler>
    if (handler_id < 0)
   10184:	1e03      	subs	r3, r0, #0
   10186:	db13      	blt.n	101b0 <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
   10188:	4910      	ldr	r1, [pc, #64]	; (101cc <pin_handler_set+0x60>)
   1018a:	f841 6033 	str.w	r6, [r1, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   1018e:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
   10192:	6054      	str	r4, [r2, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   10194:	f105 0008 	add.w	r0, r5, #8
   10198:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
   1019c:	025b      	lsls	r3, r3, #9
   1019e:	b29b      	uxth	r3, r3
   101a0:	4313      	orrs	r3, r2
   101a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   101a6:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
    return NRFX_SUCCESS;
   101aa:	4809      	ldr	r0, [pc, #36]	; (101d0 <pin_handler_set+0x64>)
}
   101ac:	b002      	add	sp, #8
   101ae:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   101b0:	f10d 0107 	add.w	r1, sp, #7
   101b4:	4807      	ldr	r0, [pc, #28]	; (101d4 <pin_handler_set+0x68>)
   101b6:	f7ff fd4b 	bl	fc50 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   101ba:	4b05      	ldr	r3, [pc, #20]	; (101d0 <pin_handler_set+0x64>)
   101bc:	4298      	cmp	r0, r3
   101be:	d1f5      	bne.n	101ac <pin_handler_set+0x40>
        handler_id = (int32_t)id;
   101c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   101c4:	e7e0      	b.n	10188 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
   101c6:	4802      	ldr	r0, [pc, #8]	; (101d0 <pin_handler_set+0x64>)
   101c8:	e7f0      	b.n	101ac <pin_handler_set+0x40>
   101ca:	bf00      	nop
   101cc:	200000a8 	.word	0x200000a8
   101d0:	0bad0000 	.word	0x0bad0000
   101d4:	2000011c 	.word	0x2000011c

000101d8 <port_event_handle>:
    }
    return false;
}

static void port_event_handle(void)
{
   101d8:	b570      	push	{r4, r5, r6, lr}
   101da:	b082      	sub	sp, #8
    uint32_t latch[GPIO_COUNT];

    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);
   101dc:	466a      	mov	r2, sp
   101de:	2102      	movs	r1, #2
   101e0:	2000      	movs	r0, #0
   101e2:	f7ff fe73 	bl	fecc <nrf_gpio_latches_read_and_clear>
   101e6:	e040      	b.n	1026a <port_event_handle+0x92>
   101e8:	4e22      	ldr	r6, [pc, #136]	; (10274 <port_event_handle+0x9c>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   101ea:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
   101ee:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);

                nrf_bitmask_bit_clear(pin, latch);
                sense = nrf_gpio_pin_sense_get(pin);

                next_sense_cond_call_handler(pin, trigger, sense);
   101f2:	f3c2 4201 	ubfx	r2, r2, #16, #2
   101f6:	f7ff ff39 	bl	1006c <next_sense_cond_call_handler>
    reg->LATCH = (1 << pin_number);
   101fa:	2301      	movs	r3, #1
   101fc:	40ab      	lsls	r3, r5
   101fe:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
            while (latch[i])
   10202:	ab02      	add	r3, sp, #8
   10204:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   10208:	f853 0c08 	ldr.w	r0, [r3, #-8]
   1020c:	b300      	cbz	r0, 10250 <port_event_handle+0x78>
                uint32_t pin = NRF_CTZ(latch[i]);
   1020e:	fa90 f0a0 	rbit	r0, r0
   10212:	fab0 f080 	clz	r0, r0
                pin += 32 * i;
   10216:	eb00 1044 	add.w	r0, r0, r4, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1021a:	f100 0208 	add.w	r2, r0, #8
   1021e:	4b16      	ldr	r3, [pc, #88]	; (10278 <port_event_handle+0xa0>)
   10220:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
   10224:	f3c1 0182 	ubfx	r1, r1, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   10228:	08c5      	lsrs	r5, r0, #3
    bit = BITMASK_RELBIT_GET(bit);
   1022a:	f000 0607 	and.w	r6, r0, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   1022e:	f81d 2005 	ldrb.w	r2, [sp, r5]
   10232:	2301      	movs	r3, #1
   10234:	40b3      	lsls	r3, r6
   10236:	43db      	mvns	r3, r3
   10238:	b25b      	sxtb	r3, r3
   1023a:	4013      	ands	r3, r2
   1023c:	f80d 3005 	strb.w	r3, [sp, r5]
    *p_pin = pin_number & 0x1F;
   10240:	f000 051f 	and.w	r5, r0, #31
    return pin_number >> 5;
   10244:	0943      	lsrs	r3, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   10246:	2b01      	cmp	r3, #1
   10248:	d0ce      	beq.n	101e8 <port_event_handle+0x10>
        case 0: return NRF_P0;
   1024a:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
   1024e:	e7cc      	b.n	101ea <port_event_handle+0x12>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   10250:	3401      	adds	r4, #1
   10252:	2c01      	cmp	r4, #1
   10254:	d9d5      	bls.n	10202 <port_event_handle+0x2a>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   10256:	4b09      	ldr	r3, [pc, #36]	; (1027c <port_event_handle+0xa4>)
   10258:	2200      	movs	r2, #0
   1025a:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
   1025e:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        }

        /* All pins have been handled, clear PORT, check latch again in case
         * something came between deciding to exit and clearing PORT event. */
        nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
    } while (latch_pending_read_and_check(latch));
   10262:	4668      	mov	r0, sp
   10264:	f00e fd77 	bl	1ed56 <latch_pending_read_and_check>
   10268:	b108      	cbz	r0, 1026e <port_event_handle+0x96>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1026a:	2400      	movs	r4, #0
   1026c:	e7f1      	b.n	10252 <port_event_handle+0x7a>
}
   1026e:	b002      	add	sp, #8
   10270:	bd70      	pop	{r4, r5, r6, pc}
   10272:	bf00      	nop
   10274:	50000300 	.word	0x50000300
   10278:	200000a8 	.word	0x200000a8
   1027c:	40006000 	.word	0x40006000

00010280 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
   10280:	b538      	push	{r3, r4, r5, lr}
   10282:	4604      	mov	r4, r0
    while (mask)
   10284:	e018      	b.n	102b8 <gpiote_evt_handle+0x38>
    {
        uint32_t ch = NRF_CTZ(mask);
   10286:	fa94 f3a4 	rbit	r3, r4
   1028a:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   1028e:	2201      	movs	r2, #1
   10290:	409a      	lsls	r2, r3
   10292:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   10296:	4a0a      	ldr	r2, [pc, #40]	; (102c0 <gpiote_evt_handle+0x40>)
   10298:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   1029c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   102a0:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   102a4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   102a8:	f3c0 4001 	ubfx	r0, r0, #16, #2
   102ac:	f00e fd4c 	bl	1ed48 <gpiote_polarity_to_trigger>
   102b0:	4601      	mov	r1, r0
   102b2:	4628      	mov	r0, r5
   102b4:	f7ff fec4 	bl	10040 <call_handler>
    while (mask)
   102b8:	2c00      	cmp	r4, #0
   102ba:	d1e4      	bne.n	10286 <gpiote_evt_handle+0x6>
    }
}
   102bc:	bd38      	pop	{r3, r4, r5, pc}
   102be:	bf00      	nop
   102c0:	40006000 	.word	0x40006000

000102c4 <nrfx_gpiote_input_configure>:
{
   102c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   102c8:	b084      	sub	sp, #16
   102ca:	4604      	mov	r4, r0
   102cc:	4615      	mov	r5, r2
   102ce:	461e      	mov	r6, r3
    if (p_input_config)
   102d0:	b309      	cbz	r1, 10316 <nrfx_gpiote_input_configure+0x52>
   102d2:	460f      	mov	r7, r1
        if (pin_is_task_output(pin))
   102d4:	f00e fd22 	bl	1ed1c <pin_is_task_output>
   102d8:	2800      	cmp	r0, #0
   102da:	d13f      	bne.n	1035c <nrfx_gpiote_input_configure+0x98>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   102dc:	2300      	movs	r3, #0
   102de:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   102e2:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   102e6:	9301      	str	r3, [sp, #4]
   102e8:	9300      	str	r3, [sp, #0]
   102ea:	463b      	mov	r3, r7
   102ec:	f10d 020f 	add.w	r2, sp, #15
   102f0:	f10d 010e 	add.w	r1, sp, #14
   102f4:	4620      	mov	r0, r4
   102f6:	f7ff fd8d 	bl	fe14 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   102fa:	4a38      	ldr	r2, [pc, #224]	; (103dc <nrfx_gpiote_input_configure+0x118>)
   102fc:	f104 0108 	add.w	r1, r4, #8
   10300:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   10304:	f023 0302 	bic.w	r3, r3, #2
   10308:	b29b      	uxth	r3, r3
   1030a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1030e:	f043 0301 	orr.w	r3, r3, #1
   10312:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   10316:	b1bd      	cbz	r5, 10348 <nrfx_gpiote_input_configure+0x84>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   10318:	782f      	ldrb	r7, [r5, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   1031a:	f8d5 8004 	ldr.w	r8, [r5, #4]
        if (pin_is_output(pin))
   1031e:	4620      	mov	r0, r4
   10320:	f7ff fe16 	bl	ff50 <pin_is_output>
   10324:	b1e0      	cbz	r0, 10360 <nrfx_gpiote_input_configure+0x9c>
            if (use_evt)
   10326:	f1b8 0f00 	cmp.w	r8, #0
   1032a:	d151      	bne.n	103d0 <nrfx_gpiote_input_configure+0x10c>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   1032c:	4a2b      	ldr	r2, [pc, #172]	; (103dc <nrfx_gpiote_input_configure+0x118>)
   1032e:	f104 0108 	add.w	r1, r4, #8
   10332:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   10336:	f023 031c 	bic.w	r3, r3, #28
   1033a:	b29b      	uxth	r3, r3
   1033c:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   10340:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
   10344:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
   10348:	2e00      	cmp	r6, #0
   1034a:	d045      	beq.n	103d8 <nrfx_gpiote_input_configure+0x114>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   1034c:	6872      	ldr	r2, [r6, #4]
   1034e:	6831      	ldr	r1, [r6, #0]
   10350:	4620      	mov	r0, r4
   10352:	f7ff ff0b 	bl	1016c <pin_handler_set>
}
   10356:	b004      	add	sp, #16
   10358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return NRFX_ERROR_INVALID_PARAM;
   1035c:	4820      	ldr	r0, [pc, #128]	; (103e0 <nrfx_gpiote_input_configure+0x11c>)
   1035e:	e7fa      	b.n	10356 <nrfx_gpiote_input_configure+0x92>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   10360:	4a1e      	ldr	r2, [pc, #120]	; (103dc <nrfx_gpiote_input_configure+0x118>)
   10362:	f104 0108 	add.w	r1, r4, #8
   10366:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1036a:	f023 0320 	bic.w	r3, r3, #32
   1036e:	04db      	lsls	r3, r3, #19
   10370:	0cdb      	lsrs	r3, r3, #19
   10372:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            if (use_evt)
   10376:	f1b8 0f00 	cmp.w	r8, #0
   1037a:	d0d7      	beq.n	1032c <nrfx_gpiote_input_configure+0x68>
                if (!edge)
   1037c:	2f03      	cmp	r7, #3
   1037e:	d829      	bhi.n	103d4 <nrfx_gpiote_input_configure+0x110>
                uint8_t ch = *p_trigger_config->p_in_channel;
   10380:	686b      	ldr	r3, [r5, #4]
   10382:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   10384:	b937      	cbnz	r7, 10394 <nrfx_gpiote_input_configure+0xd0>
    p_reg->CONFIG[idx] = 0;
   10386:	f505 75a2 	add.w	r5, r5, #324	; 0x144
   1038a:	4b16      	ldr	r3, [pc, #88]	; (103e4 <nrfx_gpiote_input_configure+0x120>)
   1038c:	2200      	movs	r2, #0
   1038e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   10392:	e7cb      	b.n	1032c <nrfx_gpiote_input_configure+0x68>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
   10394:	4638      	mov	r0, r7
   10396:	f00e fcd8 	bl	1ed4a <gpiote_trigger_to_polarity>
   1039a:	4603      	mov	r3, r0
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1039c:	4811      	ldr	r0, [pc, #68]	; (103e4 <nrfx_gpiote_input_configure+0x120>)
   1039e:	f505 71a2 	add.w	r1, r5, #324	; 0x144
   103a2:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
   103a6:	f022 0203 	bic.w	r2, r2, #3
   103aa:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
                    nrf_gpiote_event_configure(NRF_GPIOTE, ch, pin, polarity);
   103ae:	4622      	mov	r2, r4
   103b0:	4629      	mov	r1, r5
   103b2:	f00e fc6b 	bl	1ec8c <nrf_gpiote_event_configure>
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   103b6:	4a09      	ldr	r2, [pc, #36]	; (103dc <nrfx_gpiote_input_configure+0x118>)
   103b8:	f104 0108 	add.w	r1, r4, #8
   103bc:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   103c0:	036d      	lsls	r5, r5, #13
   103c2:	b2ad      	uxth	r5, r5
   103c4:	432b      	orrs	r3, r5
   103c6:	f043 0320 	orr.w	r3, r3, #32
   103ca:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
   103ce:	e7ad      	b.n	1032c <nrfx_gpiote_input_configure+0x68>
                return NRFX_ERROR_INVALID_PARAM;
   103d0:	4803      	ldr	r0, [pc, #12]	; (103e0 <nrfx_gpiote_input_configure+0x11c>)
   103d2:	e7c0      	b.n	10356 <nrfx_gpiote_input_configure+0x92>
                    return NRFX_ERROR_INVALID_PARAM;
   103d4:	4802      	ldr	r0, [pc, #8]	; (103e0 <nrfx_gpiote_input_configure+0x11c>)
   103d6:	e7be      	b.n	10356 <nrfx_gpiote_input_configure+0x92>
        err = NRFX_SUCCESS;
   103d8:	4803      	ldr	r0, [pc, #12]	; (103e8 <nrfx_gpiote_input_configure+0x124>)
   103da:	e7bc      	b.n	10356 <nrfx_gpiote_input_configure+0x92>
   103dc:	200000a8 	.word	0x200000a8
   103e0:	0bad0004 	.word	0x0bad0004
   103e4:	40006000 	.word	0x40006000
   103e8:	0bad0000 	.word	0x0bad0000

000103ec <nrfx_gpiote_output_configure>:
{
   103ec:	b570      	push	{r4, r5, r6, lr}
   103ee:	b084      	sub	sp, #16
   103f0:	4604      	mov	r4, r0
   103f2:	4615      	mov	r5, r2
    if (p_config)
   103f4:	b329      	cbz	r1, 10442 <nrfx_gpiote_output_configure+0x56>
   103f6:	460e      	mov	r6, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   103f8:	f00e fc9f 	bl	1ed3a <pin_is_input>
   103fc:	b120      	cbz	r0, 10408 <nrfx_gpiote_output_configure+0x1c>
   103fe:	4620      	mov	r0, r4
   10400:	f7ff fd90 	bl	ff24 <pin_in_use_by_te>
   10404:	2800      	cmp	r0, #0
   10406:	d138      	bne.n	1047a <nrfx_gpiote_output_configure+0x8e>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   10408:	4620      	mov	r0, r4
   1040a:	f7ff fd95 	bl	ff38 <pin_has_trigger>
   1040e:	b110      	cbz	r0, 10416 <nrfx_gpiote_output_configure+0x2a>
   10410:	7873      	ldrb	r3, [r6, #1]
   10412:	2b01      	cmp	r3, #1
   10414:	d031      	beq.n	1047a <nrfx_gpiote_output_configure+0x8e>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   10416:	2301      	movs	r3, #1
   10418:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   1041c:	2300      	movs	r3, #0
   1041e:	9301      	str	r3, [sp, #4]
   10420:	9600      	str	r6, [sp, #0]
   10422:	1cb3      	adds	r3, r6, #2
   10424:	1c72      	adds	r2, r6, #1
   10426:	f10d 010f 	add.w	r1, sp, #15
   1042a:	4620      	mov	r0, r4
   1042c:	f7ff fcf2 	bl	fe14 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   10430:	4a1f      	ldr	r2, [pc, #124]	; (104b0 <nrfx_gpiote_output_configure+0xc4>)
   10432:	f104 0108 	add.w	r1, r4, #8
   10436:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1043a:	f043 0303 	orr.w	r3, r3, #3
   1043e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   10442:	b385      	cbz	r5, 104a6 <nrfx_gpiote_output_configure+0xba>
        if (pin_is_input(pin))
   10444:	4620      	mov	r0, r4
   10446:	f00e fc78 	bl	1ed3a <pin_is_input>
   1044a:	bb70      	cbnz	r0, 104aa <nrfx_gpiote_output_configure+0xbe>
        uint32_t ch = p_task_config->task_ch;
   1044c:	782e      	ldrb	r6, [r5, #0]
    p_reg->CONFIG[idx] = 0;
   1044e:	f506 72a2 	add.w	r2, r6, #324	; 0x144
   10452:	4b18      	ldr	r3, [pc, #96]	; (104b4 <nrfx_gpiote_output_configure+0xc8>)
   10454:	2100      	movs	r1, #0
   10456:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   1045a:	4a15      	ldr	r2, [pc, #84]	; (104b0 <nrfx_gpiote_output_configure+0xc4>)
   1045c:	f104 0108 	add.w	r1, r4, #8
   10460:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   10464:	f023 0320 	bic.w	r3, r3, #32
   10468:	04db      	lsls	r3, r3, #19
   1046a:	0cdb      	lsrs	r3, r3, #19
   1046c:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   10470:	786b      	ldrb	r3, [r5, #1]
   10472:	b923      	cbnz	r3, 1047e <nrfx_gpiote_output_configure+0x92>
    return NRFX_SUCCESS;
   10474:	4810      	ldr	r0, [pc, #64]	; (104b8 <nrfx_gpiote_output_configure+0xcc>)
}
   10476:	b004      	add	sp, #16
   10478:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_INVALID_PARAM;
   1047a:	4810      	ldr	r0, [pc, #64]	; (104bc <nrfx_gpiote_output_configure+0xd0>)
   1047c:	e7fb      	b.n	10476 <nrfx_gpiote_output_configure+0x8a>
                                      p_task_config->init_val);
   1047e:	78aa      	ldrb	r2, [r5, #2]
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   10480:	9200      	str	r2, [sp, #0]
   10482:	4622      	mov	r2, r4
   10484:	4631      	mov	r1, r6
   10486:	480b      	ldr	r0, [pc, #44]	; (104b4 <nrfx_gpiote_output_configure+0xc8>)
   10488:	f00e fc19 	bl	1ecbe <nrf_gpiote_task_configure>
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1048c:	4a08      	ldr	r2, [pc, #32]	; (104b0 <nrfx_gpiote_output_configure+0xc4>)
   1048e:	3408      	adds	r4, #8
   10490:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
   10494:	0376      	lsls	r6, r6, #13
   10496:	b2b6      	uxth	r6, r6
   10498:	4333      	orrs	r3, r6
   1049a:	f043 0320 	orr.w	r3, r3, #32
   1049e:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    return NRFX_SUCCESS;
   104a2:	4805      	ldr	r0, [pc, #20]	; (104b8 <nrfx_gpiote_output_configure+0xcc>)
   104a4:	e7e7      	b.n	10476 <nrfx_gpiote_output_configure+0x8a>
   104a6:	4804      	ldr	r0, [pc, #16]	; (104b8 <nrfx_gpiote_output_configure+0xcc>)
   104a8:	e7e5      	b.n	10476 <nrfx_gpiote_output_configure+0x8a>
            return NRFX_ERROR_INVALID_PARAM;
   104aa:	4804      	ldr	r0, [pc, #16]	; (104bc <nrfx_gpiote_output_configure+0xd0>)
   104ac:	e7e3      	b.n	10476 <nrfx_gpiote_output_configure+0x8a>
   104ae:	bf00      	nop
   104b0:	200000a8 	.word	0x200000a8
   104b4:	40006000 	.word	0x40006000
   104b8:	0bad0000 	.word	0x0bad0000
   104bc:	0bad0004 	.word	0x0bad0004

000104c0 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   104c0:	4b01      	ldr	r3, [pc, #4]	; (104c8 <nrfx_gpiote_global_callback_set+0x8>)
   104c2:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
   104c4:	60d9      	str	r1, [r3, #12]
}
   104c6:	4770      	bx	lr
   104c8:	200000a8 	.word	0x200000a8

000104cc <nrfx_gpiote_channel_get>:
{
   104cc:	b538      	push	{r3, r4, r5, lr}
   104ce:	4604      	mov	r4, r0
   104d0:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin))
   104d2:	f7ff fd27 	bl	ff24 <pin_in_use_by_te>
   104d6:	b140      	cbz	r0, 104ea <nrfx_gpiote_channel_get+0x1e>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   104d8:	f104 0008 	add.w	r0, r4, #8
   104dc:	4b04      	ldr	r3, [pc, #16]	; (104f0 <nrfx_gpiote_channel_get+0x24>)
   104de:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
   104e2:	0b5b      	lsrs	r3, r3, #13
   104e4:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
   104e6:	4803      	ldr	r0, [pc, #12]	; (104f4 <nrfx_gpiote_channel_get+0x28>)
}
   104e8:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
   104ea:	4803      	ldr	r0, [pc, #12]	; (104f8 <nrfx_gpiote_channel_get+0x2c>)
   104ec:	e7fc      	b.n	104e8 <nrfx_gpiote_channel_get+0x1c>
   104ee:	bf00      	nop
   104f0:	200000a8 	.word	0x200000a8
   104f4:	0bad0000 	.word	0x0bad0000
   104f8:	0bad0004 	.word	0x0bad0004

000104fc <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   104fc:	4b0f      	ldr	r3, [pc, #60]	; (1053c <nrfx_gpiote_init+0x40>)
   104fe:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   10502:	b10b      	cbz	r3, 10508 <nrfx_gpiote_init+0xc>
        return err_code;
   10504:	480e      	ldr	r0, [pc, #56]	; (10540 <nrfx_gpiote_init+0x44>)
}
   10506:	4770      	bx	lr
{
   10508:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   1050a:	4c0e      	ldr	r4, [pc, #56]	; (10544 <nrfx_gpiote_init+0x48>)
   1050c:	2260      	movs	r2, #96	; 0x60
   1050e:	2100      	movs	r1, #0
   10510:	4620      	mov	r0, r4
   10512:	f00f fc91 	bl	1fe38 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   10516:	2006      	movs	r0, #6
   10518:	f008 fd24 	bl	18f64 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1051c:	4b0a      	ldr	r3, [pc, #40]	; (10548 <nrfx_gpiote_init+0x4c>)
   1051e:	2200      	movs	r2, #0
   10520:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
   10524:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   10528:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1052c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   10530:	2301      	movs	r3, #1
   10532:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   10536:	6663      	str	r3, [r4, #100]	; 0x64
    return err_code;
   10538:	4804      	ldr	r0, [pc, #16]	; (1054c <nrfx_gpiote_init+0x50>)
}
   1053a:	bd10      	pop	{r4, pc}
   1053c:	200000a8 	.word	0x200000a8
   10540:	0bad0005 	.word	0x0bad0005
   10544:	200000b8 	.word	0x200000b8
   10548:	40006000 	.word	0x40006000
   1054c:	0bad0000 	.word	0x0bad0000

00010550 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   10550:	4b03      	ldr	r3, [pc, #12]	; (10560 <nrfx_gpiote_is_init+0x10>)
   10552:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   10556:	3800      	subs	r0, #0
   10558:	bf18      	it	ne
   1055a:	2001      	movne	r0, #1
   1055c:	4770      	bx	lr
   1055e:	bf00      	nop
   10560:	200000a8 	.word	0x200000a8

00010564 <nrfx_gpiote_channel_free>:
{
   10564:	b508      	push	{r3, lr}
   10566:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   10568:	4801      	ldr	r0, [pc, #4]	; (10570 <nrfx_gpiote_channel_free+0xc>)
   1056a:	f7ff fb99 	bl	fca0 <nrfx_flag32_free>
}
   1056e:	bd08      	pop	{r3, pc}
   10570:	20000118 	.word	0x20000118

00010574 <nrfx_gpiote_channel_alloc>:
{
   10574:	b508      	push	{r3, lr}
   10576:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   10578:	4801      	ldr	r0, [pc, #4]	; (10580 <nrfx_gpiote_channel_alloc+0xc>)
   1057a:	f7ff fb69 	bl	fc50 <nrfx_flag32_alloc>
}
   1057e:	bd08      	pop	{r3, pc}
   10580:	20000118 	.word	0x20000118

00010584 <nrfx_gpiote_trigger_enable>:
{
   10584:	b538      	push	{r3, r4, r5, lr}
   10586:	4604      	mov	r4, r0
   10588:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1058a:	f7ff fccb 	bl	ff24 <pin_in_use_by_te>
   1058e:	b300      	cbz	r0, 105d2 <nrfx_gpiote_trigger_enable+0x4e>
   10590:	4620      	mov	r0, r4
   10592:	f00e fbd2 	bl	1ed3a <pin_is_input>
   10596:	b1e0      	cbz	r0, 105d2 <nrfx_gpiote_trigger_enable+0x4e>
        uint8_t ch = pin_te_get(pin);
   10598:	4620      	mov	r0, r4
   1059a:	f7ff fce3 	bl	ff64 <pin_te_get>
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   1059e:	0083      	lsls	r3, r0, #2
   105a0:	f503 7380 	add.w	r3, r3, #256	; 0x100
    return ((uint32_t)p_reg + event);
   105a4:	b29b      	uxth	r3, r3
   105a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   105aa:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   105ae:	2200      	movs	r2, #0
   105b0:	601a      	str	r2, [r3, #0]
   105b2:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   105b4:	4a0b      	ldr	r2, [pc, #44]	; (105e4 <nrfx_gpiote_trigger_enable+0x60>)
   105b6:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   105ba:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   105be:	f043 0301 	orr.w	r3, r3, #1
   105c2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
   105c6:	b15d      	cbz	r5, 105e0 <nrfx_gpiote_trigger_enable+0x5c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   105c8:	2301      	movs	r3, #1
   105ca:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
   105cc:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   105d0:	e006      	b.n	105e0 <nrfx_gpiote_trigger_enable+0x5c>
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   105d2:	4620      	mov	r0, r4
   105d4:	f7ff fcfe 	bl	ffd4 <get_initial_sense>
   105d8:	4601      	mov	r1, r0
   105da:	4620      	mov	r0, r4
   105dc:	f00e fb8e 	bl	1ecfc <nrf_gpio_cfg_sense_set>
}
   105e0:	bd38      	pop	{r3, r4, r5, pc}
   105e2:	bf00      	nop
   105e4:	40006000 	.word	0x40006000

000105e8 <nrfx_gpiote_trigger_disable>:
{
   105e8:	b510      	push	{r4, lr}
   105ea:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   105ec:	f7ff fc9a 	bl	ff24 <pin_in_use_by_te>
   105f0:	b1a0      	cbz	r0, 1061c <nrfx_gpiote_trigger_disable+0x34>
   105f2:	4620      	mov	r0, r4
   105f4:	f00e fba1 	bl	1ed3a <pin_is_input>
   105f8:	b180      	cbz	r0, 1061c <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
   105fa:	4620      	mov	r0, r4
   105fc:	f7ff fcb2 	bl	ff64 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   10600:	2201      	movs	r2, #1
   10602:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
   10604:	4b08      	ldr	r3, [pc, #32]	; (10628 <nrfx_gpiote_trigger_disable+0x40>)
   10606:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1060a:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   1060e:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
   10612:	f022 0203 	bic.w	r2, r2, #3
   10616:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
   1061a:	e003      	b.n	10624 <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1061c:	2100      	movs	r1, #0
   1061e:	4620      	mov	r0, r4
   10620:	f00e fb6c 	bl	1ecfc <nrf_gpio_cfg_sense_set>
}
   10624:	bd10      	pop	{r4, pc}
   10626:	bf00      	nop
   10628:	40006000 	.word	0x40006000

0001062c <nrfx_gpiote_pin_uninit>:
{
   1062c:	b510      	push	{r4, lr}
   1062e:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   10630:	f7ff fc6e 	bl	ff10 <pin_in_use>
   10634:	b908      	cbnz	r0, 1063a <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
   10636:	480c      	ldr	r0, [pc, #48]	; (10668 <nrfx_gpiote_pin_uninit+0x3c>)
}
   10638:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_disable(pin);
   1063a:	4620      	mov	r0, r4
   1063c:	f7ff ffd4 	bl	105e8 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   10640:	4620      	mov	r0, r4
   10642:	f7ff fd77 	bl	10134 <pin_handler_trigger_uninit>
    *p_pin = pin_number & 0x1F;
   10646:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
   1064a:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1064c:	2c01      	cmp	r4, #1
   1064e:	d008      	beq.n	10662 <nrfx_gpiote_pin_uninit+0x36>
        case 0: return NRF_P0;
   10650:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   10654:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   10658:	2102      	movs	r1, #2
   1065a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return NRFX_SUCCESS;
   1065e:	4803      	ldr	r0, [pc, #12]	; (1066c <nrfx_gpiote_pin_uninit+0x40>)
   10660:	e7ea      	b.n	10638 <nrfx_gpiote_pin_uninit+0xc>
        case 1: return NRF_P1;
   10662:	4a03      	ldr	r2, [pc, #12]	; (10670 <nrfx_gpiote_pin_uninit+0x44>)
   10664:	e7f6      	b.n	10654 <nrfx_gpiote_pin_uninit+0x28>
   10666:	bf00      	nop
   10668:	0bad0004 	.word	0x0bad0004
   1066c:	0bad0000 	.word	0x0bad0000
   10670:	50000300 	.word	0x50000300

00010674 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
   10674:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   10676:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
   10678:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1067c:	2100      	movs	r1, #0
    uint32_t status = 0;
   1067e:	460c      	mov	r4, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   10680:	e003      	b.n	1068a <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
   10682:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
   10684:	3304      	adds	r3, #4
   10686:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   10688:	3101      	adds	r1, #1
   1068a:	2907      	cmp	r1, #7
   1068c:	d814      	bhi.n	106b8 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1068e:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   10692:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
   10696:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   10698:	2a00      	cmp	r2, #0
   1069a:	d0f2      	beq.n	10682 <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
   1069c:	4a0c      	ldr	r2, [pc, #48]	; (106d0 <nrfx_gpiote_irq_handler+0x5c>)
   1069e:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   106a2:	4210      	tst	r0, r2
   106a4:	d0ed      	beq.n	10682 <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
   106a6:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   106aa:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   106ae:	2500      	movs	r5, #0
   106b0:	6015      	str	r5, [r2, #0]
   106b2:	6812      	ldr	r2, [r2, #0]
            status |= mask;
   106b4:	4304      	orrs	r4, r0
   106b6:	e7e4      	b.n	10682 <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   106b8:	4b05      	ldr	r3, [pc, #20]	; (106d0 <nrfx_gpiote_irq_handler+0x5c>)
   106ba:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   106be:	b91b      	cbnz	r3, 106c8 <nrfx_gpiote_irq_handler+0x54>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
   106c0:	4620      	mov	r0, r4
   106c2:	f7ff fddd 	bl	10280 <gpiote_evt_handle>
}
   106c6:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
   106c8:	f7ff fd86 	bl	101d8 <port_event_handle>
   106cc:	e7f8      	b.n	106c0 <nrfx_gpiote_irq_handler+0x4c>
   106ce:	bf00      	nop
   106d0:	40006000 	.word	0x40006000

000106d4 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   106d4:	b508      	push	{r3, lr}
   106d6:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   106d8:	4801      	ldr	r0, [pc, #4]	; (106e0 <nrfx_ppi_channel_alloc+0xc>)
   106da:	f7ff fab9 	bl	fc50 <nrfx_flag32_alloc>
}
   106de:	bd08      	pop	{r3, pc}
   106e0:	20000124 	.word	0x20000124

000106e4 <_DoInit>:
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   106e4:	4b12      	ldr	r3, [pc, #72]	; (10730 <_DoInit+0x4c>)
   106e6:	2203      	movs	r2, #3
   106e8:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   106ea:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   106ec:	4911      	ldr	r1, [pc, #68]	; (10734 <_DoInit+0x50>)
   106ee:	6199      	str	r1, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   106f0:	4a11      	ldr	r2, [pc, #68]	; (10738 <_DoInit+0x54>)
   106f2:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   106f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
   106f8:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
   106fa:	2200      	movs	r2, #0
   106fc:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   106fe:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   10700:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
   10702:	6619      	str	r1, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   10704:	490d      	ldr	r1, [pc, #52]	; (1073c <_DoInit+0x58>)
   10706:	6659      	str	r1, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   10708:	2110      	movs	r1, #16
   1070a:	6699      	str	r1, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   1070c:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   1070e:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   10710:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   10712:	4a0b      	ldr	r2, [pc, #44]	; (10740 <_DoInit+0x5c>)
   10714:	6810      	ldr	r0, [r2, #0]
   10716:	f8c3 0007 	str.w	r0, [r3, #7]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   1071a:	4a0a      	ldr	r2, [pc, #40]	; (10744 <_DoInit+0x60>)
   1071c:	e892 0003 	ldmia.w	r2, {r0, r1}
   10720:	6018      	str	r0, [r3, #0]
   10722:	8099      	strh	r1, [r3, #4]
   10724:	0c09      	lsrs	r1, r1, #16
   10726:	7199      	strb	r1, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   10728:	2220      	movs	r2, #32
   1072a:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   1072c:	4770      	bx	lr
   1072e:	bf00      	nop
   10730:	200036e4 	.word	0x200036e4
   10734:	00022408 	.word	0x00022408
   10738:	200032e4 	.word	0x200032e4
   1073c:	200032d4 	.word	0x200032d4
   10740:	00022414 	.word	0x00022414
   10744:	00022418 	.word	0x00022418

00010748 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   10748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1074c:	4604      	mov	r4, r0
   1074e:	460e      	mov	r6, r1
   10750:	4615      	mov	r5, r2
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   10752:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   10756:	4a2d      	ldr	r2, [pc, #180]	; (1080c <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   10758:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   1075c:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   1075e:	6a57      	ldr	r7, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   10760:	42bb      	cmp	r3, r7
   10762:	d84c      	bhi.n	107fe <SEGGER_RTT_WriteSkipNoLock+0xb6>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   10764:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   10768:	4a28      	ldr	r2, [pc, #160]	; (1080c <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   1076a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   1076e:	f8d2 8020 	ldr.w	r8, [r2, #32]
   10772:	eba8 0907 	sub.w	r9, r8, r7
   10776:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
   1077a:	4295      	cmp	r5, r2
   1077c:	d904      	bls.n	10788 <SEGGER_RTT_WriteSkipNoLock+0x40>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
      return 1;
    }
    Avail += RdOff;                                     // Space incl. wrap-around
   1077e:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   10780:	429d      	cmp	r5, r3
   10782:	d917      	bls.n	107b4 <SEGGER_RTT_WriteSkipNoLock+0x6c>
    Avail = RdOff - WrOff - 1u;
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
   10784:	2000      	movs	r0, #0
   10786:	e03f      	b.n	10808 <SEGGER_RTT_WriteSkipNoLock+0xc0>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   10788:	f8df 8080 	ldr.w	r8, [pc, #128]	; 1080c <SEGGER_RTT_WriteSkipNoLock+0xc4>
   1078c:	1c63      	adds	r3, r4, #1
   1078e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   10792:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   10796:	6858      	ldr	r0, [r3, #4]
   10798:	462a      	mov	r2, r5
   1079a:	4631      	mov	r1, r6
   1079c:	4438      	add	r0, r7
   1079e:	f00f fb10 	bl	1fdc2 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
   107a2:	442f      	add	r7, r5
   107a4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   107a8:	eb08 08c4 	add.w	r8, r8, r4, lsl #3
   107ac:	f8c8 7024 	str.w	r7, [r8, #36]	; 0x24
      return 1;
   107b0:	2001      	movs	r0, #1
   107b2:	e029      	b.n	10808 <SEGGER_RTT_WriteSkipNoLock+0xc0>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   107b4:	1c43      	adds	r3, r0, #1
   107b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   107ba:	4a14      	ldr	r2, [pc, #80]	; (1080c <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   107bc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   107c0:	6858      	ldr	r0, [r3, #4]
   107c2:	464a      	mov	r2, r9
   107c4:	4631      	mov	r1, r6
   107c6:	4438      	add	r0, r7
   107c8:	f00f fafb 	bl	1fdc2 <memcpy>
      NumBytes -= Rem;
   107cc:	eba7 0808 	sub.w	r8, r7, r8
      if (NumBytes) {
   107d0:	eb18 0505 	adds.w	r5, r8, r5
   107d4:	d00b      	beq.n	107ee <SEGGER_RTT_WriteSkipNoLock+0xa6>
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
   107d6:	1c63      	adds	r3, r4, #1
   107d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   107dc:	4a0b      	ldr	r2, [pc, #44]	; (1080c <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   107de:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   107e2:	462a      	mov	r2, r5
   107e4:	eb06 0109 	add.w	r1, r6, r9
   107e8:	6858      	ldr	r0, [r3, #4]
   107ea:	f00f faea 	bl	1fdc2 <memcpy>
      pRing->WrOff = NumBytes;
   107ee:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   107f2:	4b06      	ldr	r3, [pc, #24]	; (1080c <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   107f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   107f8:	625d      	str	r5, [r3, #36]	; 0x24
      return 1;
   107fa:	2001      	movs	r0, #1
   107fc:	e004      	b.n	10808 <SEGGER_RTT_WriteSkipNoLock+0xc0>
    Avail = RdOff - WrOff - 1u;
   107fe:	1bdb      	subs	r3, r3, r7
   10800:	3b01      	subs	r3, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   10802:	42ab      	cmp	r3, r5
   10804:	d2c0      	bcs.n	10788 <SEGGER_RTT_WriteSkipNoLock+0x40>
  return 0;     // No space in buffer
   10806:	2000      	movs	r0, #0
}
   10808:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1080c:	200036e4 	.word	0x200036e4

00010810 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   10810:	4b06      	ldr	r3, [pc, #24]	; (1082c <SEGGER_RTT_HasDataUp+0x1c>)
   10812:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   10816:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   1081a:	6a92      	ldr	r2, [r2, #40]	; 0x28
  return pRing->WrOff - v;
   1081c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   10820:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   10824:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   10826:	1a80      	subs	r0, r0, r2
   10828:	4770      	bx	lr
   1082a:	bf00      	nop
   1082c:	200036e4 	.word	0x200036e4

00010830 <zephyr_rtt_mutex_lock>:
}

#ifdef CONFIG_MULTITHREADING

void zephyr_rtt_mutex_lock(void)
{
   10830:	b508      	push	{r3, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   10832:	f04f 32ff 	mov.w	r2, #4294967295
   10836:	f04f 33ff 	mov.w	r3, #4294967295
   1083a:	4802      	ldr	r0, [pc, #8]	; (10844 <zephyr_rtt_mutex_lock+0x14>)
   1083c:	f000 fbe8 	bl	11010 <z_impl_k_mutex_lock>
	k_mutex_lock(&rtt_term_mutex, K_FOREVER);
}
   10840:	bd08      	pop	{r3, pc}
   10842:	bf00      	nop
   10844:	20000500 	.word	0x20000500

00010848 <zephyr_rtt_mutex_unlock>:

void zephyr_rtt_mutex_unlock(void)
{
   10848:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   1084a:	4802      	ldr	r0, [pc, #8]	; (10854 <zephyr_rtt_mutex_unlock+0xc>)
   1084c:	f000 fc64 	bl	11118 <z_impl_k_mutex_unlock>
	k_mutex_unlock(&rtt_term_mutex);
}
   10850:	bd08      	pop	{r3, pc}
   10852:	bf00      	nop
   10854:	20000500 	.word	0x20000500

00010858 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
   10858:	4b03      	ldr	r3, [pc, #12]	; (10868 <z_device_state_init+0x10>)

	while (dev < __device_end) {
   1085a:	e000      	b.n	1085e <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
   1085c:	3318      	adds	r3, #24
	while (dev < __device_end) {
   1085e:	4a03      	ldr	r2, [pc, #12]	; (1086c <z_device_state_init+0x14>)
   10860:	4293      	cmp	r3, r2
   10862:	d3fb      	bcc.n	1085c <z_device_state_init+0x4>
	}
}
   10864:	4770      	bx	lr
   10866:	bf00      	nop
   10868:	000207b4 	.word	0x000207b4
   1086c:	00020874 	.word	0x00020874

00010870 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   10870:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   10872:	4605      	mov	r5, r0
   10874:	b328      	cbz	r0, 108c2 <z_impl_device_get_binding+0x52>
   10876:	7803      	ldrb	r3, [r0, #0]
   10878:	b32b      	cbz	r3, 108c6 <z_impl_device_get_binding+0x56>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
   1087a:	4c14      	ldr	r4, [pc, #80]	; (108cc <z_impl_device_get_binding+0x5c>)
   1087c:	e000      	b.n	10880 <z_impl_device_get_binding+0x10>
   1087e:	3418      	adds	r4, #24
   10880:	4b13      	ldr	r3, [pc, #76]	; (108d0 <z_impl_device_get_binding+0x60>)
   10882:	429c      	cmp	r4, r3
   10884:	d008      	beq.n	10898 <z_impl_device_get_binding+0x28>
		if (z_device_is_ready(dev) && (dev->name == name)) {
   10886:	4620      	mov	r0, r4
   10888:	f00e fa81 	bl	1ed8e <z_device_is_ready>
   1088c:	2800      	cmp	r0, #0
   1088e:	d0f6      	beq.n	1087e <z_impl_device_get_binding+0xe>
   10890:	6823      	ldr	r3, [r4, #0]
   10892:	42ab      	cmp	r3, r5
   10894:	d1f3      	bne.n	1087e <z_impl_device_get_binding+0xe>
   10896:	e012      	b.n	108be <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
   10898:	4c0c      	ldr	r4, [pc, #48]	; (108cc <z_impl_device_get_binding+0x5c>)
   1089a:	e000      	b.n	1089e <z_impl_device_get_binding+0x2e>
   1089c:	3418      	adds	r4, #24
   1089e:	4b0c      	ldr	r3, [pc, #48]	; (108d0 <z_impl_device_get_binding+0x60>)
   108a0:	429c      	cmp	r4, r3
   108a2:	d00b      	beq.n	108bc <z_impl_device_get_binding+0x4c>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   108a4:	4620      	mov	r0, r4
   108a6:	f00e fa72 	bl	1ed8e <z_device_is_ready>
   108aa:	2800      	cmp	r0, #0
   108ac:	d0f6      	beq.n	1089c <z_impl_device_get_binding+0x2c>
   108ae:	6821      	ldr	r1, [r4, #0]
   108b0:	4628      	mov	r0, r5
   108b2:	f7f0 fa73 	bl	d9c <strcmp>
   108b6:	2800      	cmp	r0, #0
   108b8:	d1f0      	bne.n	1089c <z_impl_device_get_binding+0x2c>
   108ba:	e000      	b.n	108be <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	return NULL;
   108bc:	2400      	movs	r4, #0
}
   108be:	4620      	mov	r0, r4
   108c0:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   108c2:	4604      	mov	r4, r0
   108c4:	e7fb      	b.n	108be <z_impl_device_get_binding+0x4e>
   108c6:	2400      	movs	r4, #0
   108c8:	e7f9      	b.n	108be <z_impl_device_get_binding+0x4e>
   108ca:	bf00      	nop
   108cc:	000207b4 	.word	0x000207b4
   108d0:	00020874 	.word	0x00020874

000108d4 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   108d4:	4b01      	ldr	r3, [pc, #4]	; (108dc <z_impl_z_errno+0x8>)
   108d6:	6898      	ldr	r0, [r3, #8]
}
   108d8:	3064      	adds	r0, #100	; 0x64
   108da:	4770      	bx	lr
   108dc:	2000378c 	.word	0x2000378c

000108e0 <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
   108e0:	2804      	cmp	r0, #4
   108e2:	d80c      	bhi.n	108fe <reason_to_str+0x1e>
   108e4:	e8df f000 	tbb	[pc, r0]
   108e8:	07050d03 	.word	0x07050d03
   108ec:	09          	.byte	0x09
   108ed:	00          	.byte	0x00
   108ee:	4806      	ldr	r0, [pc, #24]	; (10908 <reason_to_str+0x28>)
   108f0:	4770      	bx	lr
	case K_ERR_CPU_EXCEPTION:
		return "CPU exception";
	case K_ERR_SPURIOUS_IRQ:
		return "Unhandled interrupt";
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
   108f2:	4806      	ldr	r0, [pc, #24]	; (1090c <reason_to_str+0x2c>)
   108f4:	4770      	bx	lr
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
   108f6:	4806      	ldr	r0, [pc, #24]	; (10910 <reason_to_str+0x30>)
   108f8:	4770      	bx	lr
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
   108fa:	4806      	ldr	r0, [pc, #24]	; (10914 <reason_to_str+0x34>)
   108fc:	4770      	bx	lr
	default:
		return "Unknown error";
   108fe:	4806      	ldr	r0, [pc, #24]	; (10918 <reason_to_str+0x38>)
   10900:	4770      	bx	lr
		return "Unhandled interrupt";
   10902:	4806      	ldr	r0, [pc, #24]	; (1091c <reason_to_str+0x3c>)
	}
}
   10904:	4770      	bx	lr
   10906:	bf00      	nop
   10908:	00022424 	.word	0x00022424
   1090c:	00022448 	.word	0x00022448
   10910:	00022458 	.word	0x00022458
   10914:	00022464 	.word	0x00022464
   10918:	00022474 	.word	0x00022474
   1091c:	00022434 	.word	0x00022434

00010920 <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   10920:	b130      	cbz	r0, 10930 <thread_name_get+0x10>
{
   10922:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   10924:	f00e fb34 	bl	1ef90 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   10928:	b120      	cbz	r0, 10934 <thread_name_get+0x14>
   1092a:	7803      	ldrb	r3, [r0, #0]
   1092c:	b123      	cbz	r3, 10938 <thread_name_get+0x18>
}
   1092e:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
   10930:	4802      	ldr	r0, [pc, #8]	; (1093c <thread_name_get+0x1c>)
}
   10932:	4770      	bx	lr
		thread_name = "unknown";
   10934:	4801      	ldr	r0, [pc, #4]	; (1093c <thread_name_get+0x1c>)
   10936:	e7fa      	b.n	1092e <thread_name_get+0xe>
   10938:	4800      	ldr	r0, [pc, #0]	; (1093c <thread_name_get+0x1c>)
	return thread_name;
   1093a:	e7f8      	b.n	1092e <thread_name_get+0xe>
   1093c:	00022484 	.word	0x00022484

00010940 <k_sys_fatal_error_handler>:
{
   10940:	b510      	push	{r4, lr}
   10942:	b088      	sub	sp, #32
   10944:	4604      	mov	r4, r0
	z_impl_log_panic();
   10946:	f7f3 f917 	bl	3b78 <z_impl_log_panic>
	LOG_ERR("Halting system");
   1094a:	4b14      	ldr	r3, [pc, #80]	; (1099c <k_sys_fatal_error_handler+0x5c>)
   1094c:	9307      	str	r3, [sp, #28]
   1094e:	2302      	movs	r3, #2
   10950:	f88d 3004 	strb.w	r3, [sp, #4]
   10954:	2300      	movs	r3, #0
   10956:	f88d 3005 	strb.w	r3, [sp, #5]
   1095a:	f88d 3006 	strb.w	r3, [sp, #6]
   1095e:	f88d 3007 	strb.w	r3, [sp, #7]
   10962:	9a01      	ldr	r2, [sp, #4]
   10964:	9206      	str	r2, [sp, #24]
   10966:	4619      	mov	r1, r3
   10968:	f363 0100 	bfi	r1, r3, #0, #1
   1096c:	f363 0141 	bfi	r1, r3, #1, #1
   10970:	f363 0182 	bfi	r1, r3, #2, #1
   10974:	f363 01c5 	bfi	r1, r3, #3, #3
   10978:	2201      	movs	r2, #1
   1097a:	f362 1188 	bfi	r1, r2, #6, #3
   1097e:	2208      	movs	r2, #8
   10980:	f362 2152 	bfi	r1, r2, #9, #10
   10984:	f363 41de 	bfi	r1, r3, #19, #12
   10988:	f363 71df 	bfi	r1, r3, #31, #1
   1098c:	aa06      	add	r2, sp, #24
   1098e:	4804      	ldr	r0, [pc, #16]	; (109a0 <k_sys_fatal_error_handler+0x60>)
   10990:	f007 f84c 	bl	17a2c <z_impl_z_log_msg_static_create>
	arch_system_halt(reason);
   10994:	4620      	mov	r0, r4
   10996:	f00e fa0a 	bl	1edae <arch_system_halt>
   1099a:	bf00      	nop
   1099c:	0002248c 	.word	0x0002248c
   109a0:	00020aa0 	.word	0x00020aa0

000109a4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   109a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   109a8:	b089      	sub	sp, #36	; 0x24
   109aa:	af00      	add	r7, sp, #0
   109ac:	4606      	mov	r6, r0
   109ae:	460c      	mov	r4, r1
	__asm__ volatile(
   109b0:	f04f 0320 	mov.w	r3, #32
   109b4:	f3ef 8811 	mrs	r8, BASEPRI
   109b8:	f383 8812 	msr	BASEPRI_MAX, r3
   109bc:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   109c0:	f001 f994 	bl	11cec <z_impl_z_current_get>
   109c4:	4605      	mov	r5, r0
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   109c6:	4630      	mov	r0, r6
   109c8:	f7ff ff8a 	bl	108e0 <reason_to_str>
   109cc:	46e9      	mov	r9, sp
   109ce:	2301      	movs	r3, #1
   109d0:	713b      	strb	r3, [r7, #4]
   109d2:	2303      	movs	r3, #3
   109d4:	717b      	strb	r3, [r7, #5]
   109d6:	b08a      	sub	sp, #40	; 0x28
   109d8:	46ec      	mov	ip, sp
   109da:	f11c 0210 	adds.w	r2, ip, #16
   109de:	d021      	beq.n	10a24 <z_fatal_error+0x80>
   109e0:	f04f 0e16 	mov.w	lr, #22
   109e4:	b152      	cbz	r2, 109fc <z_fatal_error+0x58>
   109e6:	4673      	mov	r3, lr
   109e8:	f1be 0f04 	cmp.w	lr, #4
   109ec:	dd02      	ble.n	109f4 <z_fatal_error+0x50>
   109ee:	4976      	ldr	r1, [pc, #472]	; (10bc8 <z_fatal_error+0x224>)
   109f0:	f8cc 1014 	str.w	r1, [ip, #20]
   109f4:	2b08      	cmp	r3, #8
   109f6:	dd01      	ble.n	109fc <z_fatal_error+0x58>
   109f8:	f8cc 6018 	str.w	r6, [ip, #24]
   109fc:	2301      	movs	r3, #1
   109fe:	703b      	strb	r3, [r7, #0]
   10a00:	2303      	movs	r3, #3
   10a02:	707b      	strb	r3, [r7, #1]
   10a04:	b1da      	cbz	r2, 10a3e <z_fatal_error+0x9a>
   10a06:	4673      	mov	r3, lr
   10a08:	f1be 0f0c 	cmp.w	lr, #12
   10a0c:	dd01      	ble.n	10a12 <z_fatal_error+0x6e>
   10a0e:	f8cc 001c 	str.w	r0, [ip, #28]
   10a12:	2b10      	cmp	r3, #16
   10a14:	dd02      	ble.n	10a1c <z_fatal_error+0x78>
   10a16:	2300      	movs	r3, #0
   10a18:	f8cc 3020 	str.w	r3, [ip, #32]
   10a1c:	f10c 0324 	add.w	r3, ip, #36	; 0x24
   10a20:	2100      	movs	r1, #0
   10a22:	e00a      	b.n	10a3a <z_fatal_error+0x96>
   10a24:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
   10a28:	e7dc      	b.n	109e4 <z_fatal_error+0x40>
   10a2a:	f101 0020 	add.w	r0, r1, #32
   10a2e:	4438      	add	r0, r7
   10a30:	f810 0c20 	ldrb.w	r0, [r0, #-32]
   10a34:	f803 0b01 	strb.w	r0, [r3], #1
   10a38:	3101      	adds	r1, #1
   10a3a:	2901      	cmp	r1, #1
   10a3c:	d9f5      	bls.n	10a2a <z_fatal_error+0x86>
   10a3e:	f1be 0f15 	cmp.w	lr, #21
   10a42:	dd53      	ble.n	10aec <z_fatal_error+0x148>
   10a44:	2316      	movs	r3, #22
   10a46:	b14a      	cbz	r2, 10a5c <z_fatal_error+0xb8>
   10a48:	2105      	movs	r1, #5
   10a4a:	7139      	strb	r1, [r7, #4]
   10a4c:	2100      	movs	r1, #0
   10a4e:	7179      	strb	r1, [r7, #5]
   10a50:	71b9      	strb	r1, [r7, #6]
   10a52:	2101      	movs	r1, #1
   10a54:	71f9      	strb	r1, [r7, #7]
   10a56:	6878      	ldr	r0, [r7, #4]
   10a58:	f8cc 0010 	str.w	r0, [ip, #16]
   10a5c:	2100      	movs	r1, #0
   10a5e:	f36f 0100 	bfc	r1, #0, #1
   10a62:	f36f 0141 	bfc	r1, #1, #1
   10a66:	f36f 0182 	bfc	r1, #2, #1
   10a6a:	f36f 01c5 	bfc	r1, #3, #3
   10a6e:	2001      	movs	r0, #1
   10a70:	f360 1188 	bfi	r1, r0, #6, #3
   10a74:	f3c3 0309 	ubfx	r3, r3, #0, #10
   10a78:	f363 2152 	bfi	r1, r3, #9, #10
   10a7c:	f36f 41de 	bfc	r1, #19, #12
   10a80:	f36f 71df 	bfc	r1, #31, #1
   10a84:	2300      	movs	r3, #0
   10a86:	4851      	ldr	r0, [pc, #324]	; (10bcc <z_fatal_error+0x228>)
   10a88:	f006 ffd0 	bl	17a2c <z_impl_z_log_msg_static_create>
   10a8c:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   10a8e:	b11c      	cbz	r4, 10a98 <z_fatal_error+0xf4>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   10a90:	69e3      	ldr	r3, [r4, #28]
   10a92:	f3c3 0308 	ubfx	r3, r3, #0, #9
   10a96:	bb63      	cbnz	r3, 10af2 <z_fatal_error+0x14e>
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   10a98:	4628      	mov	r0, r5
   10a9a:	f7ff ff41 	bl	10920 <thread_name_get>
   10a9e:	46e9      	mov	r9, sp
   10aa0:	2301      	movs	r3, #1
   10aa2:	713b      	strb	r3, [r7, #4]
   10aa4:	2303      	movs	r3, #3
   10aa6:	717b      	strb	r3, [r7, #5]
   10aa8:	b08a      	sub	sp, #40	; 0x28
   10aaa:	46ec      	mov	ip, sp
   10aac:	f11c 0210 	adds.w	r2, ip, #16
   10ab0:	d042      	beq.n	10b38 <z_fatal_error+0x194>
   10ab2:	f04f 0e12 	mov.w	lr, #18
   10ab6:	b152      	cbz	r2, 10ace <z_fatal_error+0x12a>
   10ab8:	4673      	mov	r3, lr
   10aba:	f1be 0f04 	cmp.w	lr, #4
   10abe:	dd02      	ble.n	10ac6 <z_fatal_error+0x122>
   10ac0:	4943      	ldr	r1, [pc, #268]	; (10bd0 <z_fatal_error+0x22c>)
   10ac2:	f8cc 1014 	str.w	r1, [ip, #20]
   10ac6:	2b08      	cmp	r3, #8
   10ac8:	dd01      	ble.n	10ace <z_fatal_error+0x12a>
   10aca:	f8cc 5018 	str.w	r5, [ip, #24]
   10ace:	2301      	movs	r3, #1
   10ad0:	703b      	strb	r3, [r7, #0]
   10ad2:	2303      	movs	r3, #3
   10ad4:	707b      	strb	r3, [r7, #1]
   10ad6:	2a00      	cmp	r2, #0
   10ad8:	d03b      	beq.n	10b52 <z_fatal_error+0x1ae>
   10ada:	f1be 0f0c 	cmp.w	lr, #12
   10ade:	dd01      	ble.n	10ae4 <z_fatal_error+0x140>
   10ae0:	f8cc 001c 	str.w	r0, [ip, #28]
   10ae4:	f10c 0320 	add.w	r3, ip, #32
   10ae8:	2100      	movs	r1, #0
   10aea:	e030      	b.n	10b4e <z_fatal_error+0x1aa>
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   10aec:	f06f 031b 	mvn.w	r3, #27
   10af0:	e7a9      	b.n	10a46 <z_fatal_error+0xa2>
		LOG_ERR("Fault during interrupt handling\n");
   10af2:	4b38      	ldr	r3, [pc, #224]	; (10bd4 <z_fatal_error+0x230>)
   10af4:	61fb      	str	r3, [r7, #28]
   10af6:	2302      	movs	r3, #2
   10af8:	713b      	strb	r3, [r7, #4]
   10afa:	2300      	movs	r3, #0
   10afc:	717b      	strb	r3, [r7, #5]
   10afe:	71bb      	strb	r3, [r7, #6]
   10b00:	71fb      	strb	r3, [r7, #7]
   10b02:	687a      	ldr	r2, [r7, #4]
   10b04:	61ba      	str	r2, [r7, #24]
   10b06:	4619      	mov	r1, r3
   10b08:	f363 0100 	bfi	r1, r3, #0, #1
   10b0c:	f363 0141 	bfi	r1, r3, #1, #1
   10b10:	f363 0182 	bfi	r1, r3, #2, #1
   10b14:	f363 01c5 	bfi	r1, r3, #3, #3
   10b18:	2201      	movs	r2, #1
   10b1a:	f362 1188 	bfi	r1, r2, #6, #3
   10b1e:	2208      	movs	r2, #8
   10b20:	f362 2152 	bfi	r1, r2, #9, #10
   10b24:	f363 41de 	bfi	r1, r3, #19, #12
   10b28:	f363 71df 	bfi	r1, r3, #31, #1
   10b2c:	f107 0218 	add.w	r2, r7, #24
   10b30:	4826      	ldr	r0, [pc, #152]	; (10bcc <z_fatal_error+0x228>)
   10b32:	f006 ff7b 	bl	17a2c <z_impl_z_log_msg_static_create>
   10b36:	e7af      	b.n	10a98 <z_fatal_error+0xf4>
	LOG_ERR("Current thread: %p (%s)", thread,
   10b38:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
   10b3c:	e7bb      	b.n	10ab6 <z_fatal_error+0x112>
   10b3e:	f101 0020 	add.w	r0, r1, #32
   10b42:	4438      	add	r0, r7
   10b44:	f810 0c20 	ldrb.w	r0, [r0, #-32]
   10b48:	f803 0b01 	strb.w	r0, [r3], #1
   10b4c:	3101      	adds	r1, #1
   10b4e:	2901      	cmp	r1, #1
   10b50:	d9f5      	bls.n	10b3e <z_fatal_error+0x19a>
   10b52:	f1be 0f11 	cmp.w	lr, #17
   10b56:	dd33      	ble.n	10bc0 <z_fatal_error+0x21c>
   10b58:	2312      	movs	r3, #18
   10b5a:	b14a      	cbz	r2, 10b70 <z_fatal_error+0x1cc>
   10b5c:	2104      	movs	r1, #4
   10b5e:	7139      	strb	r1, [r7, #4]
   10b60:	2100      	movs	r1, #0
   10b62:	7179      	strb	r1, [r7, #5]
   10b64:	71b9      	strb	r1, [r7, #6]
   10b66:	2101      	movs	r1, #1
   10b68:	71f9      	strb	r1, [r7, #7]
   10b6a:	6878      	ldr	r0, [r7, #4]
   10b6c:	f8cc 0010 	str.w	r0, [ip, #16]
   10b70:	2100      	movs	r1, #0
   10b72:	f36f 0100 	bfc	r1, #0, #1
   10b76:	f36f 0141 	bfc	r1, #1, #1
   10b7a:	f36f 0182 	bfc	r1, #2, #1
   10b7e:	f36f 01c5 	bfc	r1, #3, #3
   10b82:	2001      	movs	r0, #1
   10b84:	f360 1188 	bfi	r1, r0, #6, #3
   10b88:	f3c3 0309 	ubfx	r3, r3, #0, #10
   10b8c:	f363 2152 	bfi	r1, r3, #9, #10
   10b90:	f36f 41de 	bfc	r1, #19, #12
   10b94:	f36f 71df 	bfc	r1, #31, #1
   10b98:	2300      	movs	r3, #0
   10b9a:	480c      	ldr	r0, [pc, #48]	; (10bcc <z_fatal_error+0x228>)
   10b9c:	f006 ff46 	bl	17a2c <z_impl_z_log_msg_static_create>
   10ba0:	46cd      	mov	sp, r9

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   10ba2:	4621      	mov	r1, r4
   10ba4:	4630      	mov	r0, r6
   10ba6:	f7ff fecb 	bl	10940 <k_sys_fatal_error_handler>
	__asm__ volatile(
   10baa:	f388 8811 	msr	BASEPRI, r8
   10bae:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   10bb2:	4628      	mov	r0, r5
   10bb4:	f7f5 fa08 	bl	5fc8 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   10bb8:	3724      	adds	r7, #36	; 0x24
   10bba:	46bd      	mov	sp, r7
   10bbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LOG_ERR("Current thread: %p (%s)", thread,
   10bc0:	f06f 031b 	mvn.w	r3, #27
   10bc4:	e7c9      	b.n	10b5a <z_fatal_error+0x1b6>
   10bc6:	bf00      	nop
   10bc8:	0002249c 	.word	0x0002249c
   10bcc:	00020aa0 	.word	0x00020aa0
   10bd0:	000224e8 	.word	0x000224e8
   10bd4:	000224c4 	.word	0x000224c4

00010bd8 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
static void z_sys_init_run_level(enum init_level level)
{
   10bd8:	b570      	push	{r4, r5, r6, lr}
   10bda:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   10bdc:	4b11      	ldr	r3, [pc, #68]	; (10c24 <z_sys_init_run_level+0x4c>)
   10bde:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   10be2:	e009      	b.n	10bf8 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
   10be4:	4240      	negs	r0, r0
   10be6:	e017      	b.n	10c18 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
   10be8:	68eb      	ldr	r3, [r5, #12]
   10bea:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
   10bec:	68ea      	ldr	r2, [r5, #12]
   10bee:	7853      	ldrb	r3, [r2, #1]
   10bf0:	f043 0301 	orr.w	r3, r3, #1
   10bf4:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   10bf6:	3408      	adds	r4, #8
   10bf8:	1c73      	adds	r3, r6, #1
   10bfa:	4a0a      	ldr	r2, [pc, #40]	; (10c24 <z_sys_init_run_level+0x4c>)
   10bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c00:	42a3      	cmp	r3, r4
   10c02:	d90d      	bls.n	10c20 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
   10c04:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
   10c06:	6823      	ldr	r3, [r4, #0]
   10c08:	4628      	mov	r0, r5
   10c0a:	4798      	blx	r3
		if (dev != NULL) {
   10c0c:	2d00      	cmp	r5, #0
   10c0e:	d0f2      	beq.n	10bf6 <z_sys_init_run_level+0x1e>
			if (rc != 0) {
   10c10:	2800      	cmp	r0, #0
   10c12:	d0eb      	beq.n	10bec <z_sys_init_run_level+0x14>
				if (rc < 0) {
   10c14:	2800      	cmp	r0, #0
   10c16:	dbe5      	blt.n	10be4 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
   10c18:	28ff      	cmp	r0, #255	; 0xff
   10c1a:	dde5      	ble.n	10be8 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
   10c1c:	20ff      	movs	r0, #255	; 0xff
   10c1e:	e7e3      	b.n	10be8 <z_sys_init_run_level+0x10>
		}
	}
}
   10c20:	bd70      	pop	{r4, r5, r6, pc}
   10c22:	bf00      	nop
   10c24:	00022508 	.word	0x00022508

00010c28 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   10c28:	b510      	push	{r4, lr}
   10c2a:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
   10c2c:	4c10      	ldr	r4, [pc, #64]	; (10c70 <init_idle_thread+0x48>)
   10c2e:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
	k_thread_stack_t *stack = z_idle_stacks[i];
   10c32:	eb00 0c80 	add.w	ip, r0, r0, lsl #2
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   10c36:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   10c3a:	4b0e      	ldr	r3, [pc, #56]	; (10c74 <init_idle_thread+0x4c>)
   10c3c:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
	z_setup_new_thread(thread, stack,
   10c40:	2200      	movs	r2, #0
   10c42:	9205      	str	r2, [sp, #20]
   10c44:	2101      	movs	r1, #1
   10c46:	9104      	str	r1, [sp, #16]
   10c48:	210f      	movs	r1, #15
   10c4a:	9103      	str	r1, [sp, #12]
   10c4c:	9202      	str	r2, [sp, #8]
   10c4e:	9201      	str	r2, [sp, #4]
   10c50:	9300      	str	r3, [sp, #0]
   10c52:	4b09      	ldr	r3, [pc, #36]	; (10c78 <init_idle_thread+0x50>)
   10c54:	f44f 72a0 	mov.w	r2, #320	; 0x140
   10c58:	4908      	ldr	r1, [pc, #32]	; (10c7c <init_idle_thread+0x54>)
   10c5a:	eb01 118c 	add.w	r1, r1, ip, lsl #6
   10c5e:	4620      	mov	r0, r4
   10c60:	f000 f93e 	bl	10ee0 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   10c64:	7b63      	ldrb	r3, [r4, #13]
   10c66:	f023 0304 	bic.w	r3, r3, #4
   10c6a:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   10c6c:	b006      	add	sp, #24
   10c6e:	bd10      	pop	{r4, pc}
   10c70:	20001c90 	.word	0x20001c90
   10c74:	2000378c 	.word	0x2000378c
   10c78:	00010fd5 	.word	0x00010fd5
   10c7c:	20006798 	.word	0x20006798

00010c80 <bg_thread_main>:
{
   10c80:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   10c82:	4b0a      	ldr	r3, [pc, #40]	; (10cac <bg_thread_main+0x2c>)
   10c84:	2201      	movs	r2, #1
   10c86:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   10c88:	2003      	movs	r0, #3
   10c8a:	f7ff ffa5 	bl	10bd8 <z_sys_init_run_level>
	boot_banner();
   10c8e:	f001 fb9d 	bl	123cc <boot_banner>
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   10c92:	2004      	movs	r0, #4
   10c94:	f7ff ffa0 	bl	10bd8 <z_sys_init_run_level>
	z_init_static_threads();
   10c98:	f000 f952 	bl	10f40 <z_init_static_threads>
	main();
   10c9c:	f7f0 ff2e 	bl	1afc <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   10ca0:	4a03      	ldr	r2, [pc, #12]	; (10cb0 <bg_thread_main+0x30>)
   10ca2:	7b13      	ldrb	r3, [r2, #12]
   10ca4:	f023 0301 	bic.w	r3, r3, #1
   10ca8:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   10caa:	bd08      	pop	{r3, pc}
   10cac:	200042b1 	.word	0x200042b1
   10cb0:	20001d10 	.word	0x20001d10

00010cb4 <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
   10cb4:	b508      	push	{r3, lr}
   10cb6:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   10cb8:	4a01      	ldr	r2, [pc, #4]	; (10cc0 <switch_to_main_thread+0xc>)
   10cba:	4802      	ldr	r0, [pc, #8]	; (10cc4 <switch_to_main_thread+0x10>)
   10cbc:	f7f4 f9f8 	bl	50b0 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   10cc0:	00010c81 	.word	0x00010c81
   10cc4:	20001d10 	.word	0x20001d10

00010cc8 <z_bss_zero>:
{
   10cc8:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   10cca:	4803      	ldr	r0, [pc, #12]	; (10cd8 <z_bss_zero+0x10>)
   10ccc:	4a03      	ldr	r2, [pc, #12]	; (10cdc <z_bss_zero+0x14>)
   10cce:	1a12      	subs	r2, r2, r0
   10cd0:	2100      	movs	r1, #0
   10cd2:	f00e f875 	bl	1edc0 <z_early_memset>
}
   10cd6:	bd08      	pop	{r3, pc}
   10cd8:	200006b8 	.word	0x200006b8
   10cdc:	200042b4 	.word	0x200042b4

00010ce0 <z_init_cpu>:
{
   10ce0:	b510      	push	{r4, lr}
   10ce2:	4604      	mov	r4, r0
	init_idle_thread(id);
   10ce4:	f7ff ffa0 	bl	10c28 <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   10ce8:	490a      	ldr	r1, [pc, #40]	; (10d14 <z_init_cpu+0x34>)
   10cea:	eb01 11c4 	add.w	r1, r1, r4, lsl #7
   10cee:	4a0a      	ldr	r2, [pc, #40]	; (10d18 <z_init_cpu+0x38>)
   10cf0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   10cf4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   10cf8:	60d9      	str	r1, [r3, #12]
	_kernel.cpus[id].id = id;
   10cfa:	751c      	strb	r4, [r3, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   10cfc:	4b07      	ldr	r3, [pc, #28]	; (10d1c <z_init_cpu+0x3c>)
   10cfe:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
   10d02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
	_kernel.cpus[id].irq_stack =
   10d06:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   10d0a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
   10d0e:	6053      	str	r3, [r2, #4]
}
   10d10:	bd10      	pop	{r4, pc}
   10d12:	bf00      	nop
   10d14:	20001c90 	.word	0x20001c90
   10d18:	2000378c 	.word	0x2000378c
   10d1c:	20005f98 	.word	0x20005f98

00010d20 <prepare_multithreading>:
{
   10d20:	b570      	push	{r4, r5, r6, lr}
   10d22:	b086      	sub	sp, #24
	z_sched_init();
   10d24:	f000 ff1a 	bl	11b5c <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
   10d28:	4d10      	ldr	r5, [pc, #64]	; (10d6c <prepare_multithreading+0x4c>)
   10d2a:	4b11      	ldr	r3, [pc, #68]	; (10d70 <prepare_multithreading+0x50>)
   10d2c:	61dd      	str	r5, [r3, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   10d2e:	4b11      	ldr	r3, [pc, #68]	; (10d74 <prepare_multithreading+0x54>)
   10d30:	9305      	str	r3, [sp, #20]
   10d32:	2301      	movs	r3, #1
   10d34:	9304      	str	r3, [sp, #16]
   10d36:	2400      	movs	r4, #0
   10d38:	9403      	str	r4, [sp, #12]
   10d3a:	9402      	str	r4, [sp, #8]
   10d3c:	9401      	str	r4, [sp, #4]
   10d3e:	9400      	str	r4, [sp, #0]
   10d40:	4b0d      	ldr	r3, [pc, #52]	; (10d78 <prepare_multithreading+0x58>)
   10d42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   10d46:	490d      	ldr	r1, [pc, #52]	; (10d7c <prepare_multithreading+0x5c>)
   10d48:	4628      	mov	r0, r5
   10d4a:	f000 f8c9 	bl	10ee0 <z_setup_new_thread>
   10d4e:	4606      	mov	r6, r0
   10d50:	7b6b      	ldrb	r3, [r5, #13]
   10d52:	f023 0304 	bic.w	r3, r3, #4
   10d56:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
   10d58:	4628      	mov	r0, r5
   10d5a:	f00e fc25 	bl	1f5a8 <z_ready_thread>
	z_init_cpu(0);
   10d5e:	4620      	mov	r0, r4
   10d60:	f7ff ffbe 	bl	10ce0 <z_init_cpu>
}
   10d64:	4630      	mov	r0, r6
   10d66:	b006      	add	sp, #24
   10d68:	bd70      	pop	{r4, r5, r6, pc}
   10d6a:	bf00      	nop
   10d6c:	20001d10 	.word	0x20001d10
   10d70:	2000378c 	.word	0x2000378c
   10d74:	00022500 	.word	0x00022500
   10d78:	00010c81 	.word	0x00010c81
   10d7c:	200068d8 	.word	0x200068d8

00010d80 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   10d80:	b500      	push	{lr}
   10d82:	b0a1      	sub	sp, #132	; 0x84
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   10d84:	2000      	movs	r0, #0
   10d86:	f7ff ff27 	bl	10bd8 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   10d8a:	4b1f      	ldr	r3, [pc, #124]	; (10e08 <z_cstart+0x88>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   10d8c:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   10d90:	4c1e      	ldr	r4, [pc, #120]	; (10e0c <z_cstart+0x8c>)
   10d92:	6963      	ldr	r3, [r4, #20]
   10d94:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   10d98:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10d9a:	23e0      	movs	r3, #224	; 0xe0
   10d9c:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   10da0:	2500      	movs	r5, #0
   10da2:	77e5      	strb	r5, [r4, #31]
   10da4:	7625      	strb	r5, [r4, #24]
   10da6:	7665      	strb	r5, [r4, #25]
   10da8:	76a5      	strb	r5, [r4, #26]
   10daa:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   10dae:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10db0:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   10db4:	6263      	str	r3, [r4, #36]	; 0x24
   10db6:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   10dba:	f7f5 f871 	bl	5ea0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   10dbe:	f7f3 ff63 	bl	4c88 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   10dc2:	f04f 33ff 	mov.w	r3, #4294967295
   10dc6:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   10dc8:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   10dca:	f7f5 fa13 	bl	61f4 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   10dce:	f7f5 f915 	bl	5ffc <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   10dd2:	f7f2 fe3d 	bl	3a50 <log_core_init>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
   10dd6:	2401      	movs	r4, #1
   10dd8:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   10ddc:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
   10de0:	951a      	str	r5, [sp, #104]	; 0x68
	dummy_thread->stack_info.size = 0U;
   10de2:	951b      	str	r5, [sp, #108]	; 0x6c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
   10de4:	4668      	mov	r0, sp
   10de6:	f001 fad5 	bl	12394 <k_thread_system_pool_assign>

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   10dea:	4b09      	ldr	r3, [pc, #36]	; (10e10 <z_cstart+0x90>)
   10dec:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   10df0:	f7ff fd32 	bl	10858 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   10df4:	4620      	mov	r0, r4
   10df6:	f7ff feef 	bl	10bd8 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   10dfa:	2002      	movs	r0, #2
   10dfc:	f7ff feec 	bl	10bd8 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
   10e00:	f7ff ff8e 	bl	10d20 <prepare_multithreading>
   10e04:	f7ff ff56 	bl	10cb4 <switch_to_main_thread>
   10e08:	20006798 	.word	0x20006798
   10e0c:	e000ed00 	.word	0xe000ed00
   10e10:	2000378c 	.word	0x2000378c

00010e14 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   10e14:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   10e16:	4c06      	ldr	r4, [pc, #24]	; (10e30 <statics_init+0x1c>)
   10e18:	e005      	b.n	10e26 <statics_init+0x12>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   10e1a:	68a2      	ldr	r2, [r4, #8]
   10e1c:	6861      	ldr	r1, [r4, #4]
   10e1e:	4620      	mov	r0, r4
   10e20:	f00d ffd6 	bl	1edd0 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   10e24:	3414      	adds	r4, #20
   10e26:	4b03      	ldr	r3, [pc, #12]	; (10e34 <statics_init+0x20>)
   10e28:	429c      	cmp	r4, r3
   10e2a:	d3f6      	bcc.n	10e1a <statics_init+0x6>
		}
	}
	return 0;
}
   10e2c:	2000      	movs	r0, #0
   10e2e:	bd10      	pop	{r4, pc}
   10e30:	20000424 	.word	0x20000424
   10e34:	20000438 	.word	0x20000438

00010e38 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   10e38:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   10e3a:	4c06      	ldr	r4, [pc, #24]	; (10e54 <init_mem_slab_module+0x1c>)
	int rc = 0;
   10e3c:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   10e3e:	e000      	b.n	10e42 <init_mem_slab_module+0xa>
   10e40:	341c      	adds	r4, #28
   10e42:	4b05      	ldr	r3, [pc, #20]	; (10e58 <init_mem_slab_module+0x20>)
   10e44:	429c      	cmp	r4, r3
   10e46:	d204      	bcs.n	10e52 <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
   10e48:	4620      	mov	r0, r4
   10e4a:	f00e f83c 	bl	1eec6 <create_free_list>
		if (rc < 0) {
   10e4e:	2800      	cmp	r0, #0
   10e50:	daf6      	bge.n	10e40 <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
   10e52:	bd10      	pop	{r4, pc}
   10e54:	200003d0 	.word	0x200003d0
   10e58:	20000424 	.word	0x20000424

00010e5c <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   10e5c:	b530      	push	{r4, r5, lr}
   10e5e:	b083      	sub	sp, #12
   10e60:	460d      	mov	r5, r1
	__asm__ volatile(
   10e62:	f04f 0120 	mov.w	r1, #32
   10e66:	f3ef 8c11 	mrs	ip, BASEPRI
   10e6a:	f381 8812 	msr	BASEPRI_MAX, r1
   10e6e:	f3bf 8f6f 	isb	sy
   10e72:	4661      	mov	r1, ip
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   10e74:	6944      	ldr	r4, [r0, #20]
   10e76:	b164      	cbz	r4, 10e92 <k_mem_slab_alloc+0x36>
		/* take a free block */
		*mem = slab->free_list;
   10e78:	602c      	str	r4, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   10e7a:	6823      	ldr	r3, [r4, #0]
   10e7c:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   10e7e:	6983      	ldr	r3, [r0, #24]
   10e80:	3301      	adds	r3, #1
   10e82:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   10e84:	2000      	movs	r0, #0
	__asm__ volatile(
   10e86:	f381 8811 	msr	BASEPRI, r1
   10e8a:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
   10e8e:	b003      	add	sp, #12
   10e90:	bd30      	pop	{r4, r5, pc}
   10e92:	f100 0e08 	add.w	lr, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   10e96:	ea53 0402 	orrs.w	r4, r3, r2
   10e9a:	d104      	bne.n	10ea6 <k_mem_slab_alloc+0x4a>
		*mem = NULL;
   10e9c:	2300      	movs	r3, #0
   10e9e:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
   10ea0:	f06f 000b 	mvn.w	r0, #11
   10ea4:	e7ef      	b.n	10e86 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   10ea6:	9200      	str	r2, [sp, #0]
   10ea8:	9301      	str	r3, [sp, #4]
   10eaa:	4602      	mov	r2, r0
   10eac:	4670      	mov	r0, lr
   10eae:	f000 fd51 	bl	11954 <z_pend_curr>
		if (result == 0) {
   10eb2:	2800      	cmp	r0, #0
   10eb4:	d1eb      	bne.n	10e8e <k_mem_slab_alloc+0x32>
			*mem = _current->base.swap_data;
   10eb6:	4b02      	ldr	r3, [pc, #8]	; (10ec0 <k_mem_slab_alloc+0x64>)
   10eb8:	689b      	ldr	r3, [r3, #8]
   10eba:	695b      	ldr	r3, [r3, #20]
   10ebc:	602b      	str	r3, [r5, #0]
		return result;
   10ebe:	e7e6      	b.n	10e8e <k_mem_slab_alloc+0x32>
   10ec0:	2000378c 	.word	0x2000378c

00010ec4 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
   10ec4:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   10ec6:	ea53 0102 	orrs.w	r1, r3, r2
   10eca:	d102      	bne.n	10ed2 <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
   10ecc:	f00e f862 	bl	1ef94 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
   10ed0:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   10ed2:	4902      	ldr	r1, [pc, #8]	; (10edc <schedule_new_thread+0x18>)
   10ed4:	3018      	adds	r0, #24
   10ed6:	f001 f803 	bl	11ee0 <z_add_timeout>
   10eda:	e7f9      	b.n	10ed0 <schedule_new_thread+0xc>
   10edc:	0001f5e1 	.word	0x0001f5e1

00010ee0 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   10ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
   10ee2:	b085      	sub	sp, #20
   10ee4:	4604      	mov	r4, r0
   10ee6:	460e      	mov	r6, r1
   10ee8:	4615      	mov	r5, r2
   10eea:	461f      	mov	r7, r3
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   10eec:	f100 0358 	add.w	r3, r0, #88	; 0x58
	list->head = (sys_dnode_t *)list;
   10ef0:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
   10ef2:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
   10ef4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10ef6:	2204      	movs	r2, #4
   10ef8:	990d      	ldr	r1, [sp, #52]	; 0x34
   10efa:	f00e f84f 	bl	1ef9c <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
   10efe:	462a      	mov	r2, r5
   10f00:	4631      	mov	r1, r6
   10f02:	4620      	mov	r0, r4
   10f04:	f00e f832 	bl	1ef6c <setup_thread_stack>
   10f08:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   10f0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10f0c:	9302      	str	r3, [sp, #8]
   10f0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10f10:	9301      	str	r3, [sp, #4]
   10f12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10f14:	9300      	str	r3, [sp, #0]
   10f16:	463b      	mov	r3, r7
   10f18:	4602      	mov	r2, r0
   10f1a:	4631      	mov	r1, r6
   10f1c:	4620      	mov	r0, r4
   10f1e:	f7f4 f8a7 	bl	5070 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
   10f22:	2300      	movs	r3, #0
   10f24:	6563      	str	r3, [r4, #84]	; 0x54
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   10f26:	4b05      	ldr	r3, [pc, #20]	; (10f3c <z_setup_new_thread+0x5c>)
   10f28:	689b      	ldr	r3, [r3, #8]
   10f2a:	b123      	cbz	r3, 10f36 <z_setup_new_thread+0x56>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   10f2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   10f2e:	6763      	str	r3, [r4, #116]	; 0x74
#endif

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
   10f30:	4628      	mov	r0, r5
   10f32:	b005      	add	sp, #20
   10f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
		new_thread->resource_pool = NULL;
   10f36:	6763      	str	r3, [r4, #116]	; 0x74
		return stack_ptr;
   10f38:	e7fa      	b.n	10f30 <z_setup_new_thread+0x50>
   10f3a:	bf00      	nop
   10f3c:	2000378c 	.word	0x2000378c

00010f40 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   10f40:	b530      	push	{r4, r5, lr}
   10f42:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   10f44:	4c21      	ldr	r4, [pc, #132]	; (10fcc <z_init_static_threads+0x8c>)
   10f46:	e014      	b.n	10f72 <z_init_static_threads+0x32>
		z_setup_new_thread(
   10f48:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   10f4a:	9305      	str	r3, [sp, #20]
   10f4c:	6a23      	ldr	r3, [r4, #32]
   10f4e:	9304      	str	r3, [sp, #16]
   10f50:	69e3      	ldr	r3, [r4, #28]
   10f52:	9303      	str	r3, [sp, #12]
   10f54:	69a3      	ldr	r3, [r4, #24]
   10f56:	9302      	str	r3, [sp, #8]
   10f58:	6963      	ldr	r3, [r4, #20]
   10f5a:	9301      	str	r3, [sp, #4]
   10f5c:	6923      	ldr	r3, [r4, #16]
   10f5e:	9300      	str	r3, [sp, #0]
   10f60:	68e3      	ldr	r3, [r4, #12]
   10f62:	68a2      	ldr	r2, [r4, #8]
   10f64:	6861      	ldr	r1, [r4, #4]
   10f66:	6820      	ldr	r0, [r4, #0]
   10f68:	f7ff ffba 	bl	10ee0 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
   10f6c:	6823      	ldr	r3, [r4, #0]
   10f6e:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   10f70:	3430      	adds	r4, #48	; 0x30
   10f72:	4b17      	ldr	r3, [pc, #92]	; (10fd0 <z_init_static_threads+0x90>)
   10f74:	429c      	cmp	r4, r3
   10f76:	d3e7      	bcc.n	10f48 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   10f78:	f000 fb9e 	bl	116b8 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   10f7c:	4c13      	ldr	r4, [pc, #76]	; (10fcc <z_init_static_threads+0x8c>)
   10f7e:	e000      	b.n	10f82 <z_init_static_threads+0x42>
   10f80:	3430      	adds	r4, #48	; 0x30
   10f82:	4b13      	ldr	r3, [pc, #76]	; (10fd0 <z_init_static_threads+0x90>)
   10f84:	429c      	cmp	r4, r3
   10f86:	d21c      	bcs.n	10fc2 <z_init_static_threads+0x82>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   10f88:	6a60      	ldr	r0, [r4, #36]	; 0x24
   10f8a:	f1b0 3fff 	cmp.w	r0, #4294967295
   10f8e:	d0f7      	beq.n	10f80 <z_init_static_threads+0x40>
			schedule_new_thread(thread_data->init_thread,
   10f90:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
   10f92:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   10f96:	17c1      	asrs	r1, r0, #31
   10f98:	03c9      	lsls	r1, r1, #15
   10f9a:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   10f9e:	03c0      	lsls	r0, r0, #15
   10fa0:	f240 33e7 	movw	r3, #999	; 0x3e7
   10fa4:	18c0      	adds	r0, r0, r3
   10fa6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10faa:	f04f 0300 	mov.w	r3, #0
   10fae:	f141 0100 	adc.w	r1, r1, #0
   10fb2:	f7ef fcc3 	bl	93c <__aeabi_uldivmod>
   10fb6:	4602      	mov	r2, r0
   10fb8:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
   10fba:	4628      	mov	r0, r5
   10fbc:	f7ff ff82 	bl	10ec4 <schedule_new_thread>
   10fc0:	e7de      	b.n	10f80 <z_init_static_threads+0x40>
		}
	}
	k_sched_unlock();
   10fc2:	f000 fd7b 	bl	11abc <k_sched_unlock>
}
   10fc6:	b007      	add	sp, #28
   10fc8:	bd30      	pop	{r4, r5, pc}
   10fca:	bf00      	nop
   10fcc:	000209f4 	.word	0x000209f4
   10fd0:	000209f4 	.word	0x000209f4

00010fd4 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   10fd4:	b508      	push	{r3, lr}
   10fd6:	e001      	b.n	10fdc <idle+0x8>
	arch_cpu_idle();
   10fd8:	f7f3 fe5c 	bl	4c94 <arch_cpu_idle>
	__asm__ volatile(
   10fdc:	f04f 0220 	mov.w	r2, #32
   10fe0:	f3ef 8311 	mrs	r3, BASEPRI
   10fe4:	f382 8812 	msr	BASEPRI_MAX, r2
   10fe8:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   10fec:	f00e fc64 	bl	1f8b8 <z_get_next_timeout_expiry>
   10ff0:	4b05      	ldr	r3, [pc, #20]	; (11008 <idle+0x34>)
   10ff2:	6198      	str	r0, [r3, #24]
	return !z_sys_post_kernel;
   10ff4:	4b05      	ldr	r3, [pc, #20]	; (1100c <idle+0x38>)
   10ff6:	781b      	ldrb	r3, [r3, #0]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   10ff8:	2b00      	cmp	r3, #0
   10ffa:	d0ed      	beq.n	10fd8 <idle+0x4>
   10ffc:	f7f3 fc5a 	bl	48b4 <pm_system_suspend>
   11000:	2800      	cmp	r0, #0
   11002:	d1eb      	bne.n	10fdc <idle+0x8>
   11004:	e7e8      	b.n	10fd8 <idle+0x4>
   11006:	bf00      	nop
   11008:	2000378c 	.word	0x2000378c
   1100c:	200042b1 	.word	0x200042b1

00011010 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   11010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11014:	b082      	sub	sp, #8
   11016:	4604      	mov	r4, r0
   11018:	461e      	mov	r6, r3
   1101a:	f04f 0320 	mov.w	r3, #32
   1101e:	f3ef 8511 	mrs	r5, BASEPRI
   11022:	f383 8812 	msr	BASEPRI_MAX, r3
   11026:	f3bf 8f6f 	isb	sy
   1102a:	462b      	mov	r3, r5

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1102c:	68c1      	ldr	r1, [r0, #12]
   1102e:	b999      	cbnz	r1, 11058 <z_impl_k_mutex_lock+0x48>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
   11030:	2900      	cmp	r1, #0
   11032:	d151      	bne.n	110d8 <z_impl_k_mutex_lock+0xc8>
   11034:	4a36      	ldr	r2, [pc, #216]	; (11110 <z_impl_k_mutex_lock+0x100>)
   11036:	6892      	ldr	r2, [r2, #8]
   11038:	f992 200e 	ldrsb.w	r2, [r2, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1103c:	6122      	str	r2, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
   1103e:	3101      	adds	r1, #1
   11040:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
   11042:	4a33      	ldr	r2, [pc, #204]	; (11110 <z_impl_k_mutex_lock+0x100>)
   11044:	6892      	ldr	r2, [r2, #8]
   11046:	60a2      	str	r2, [r4, #8]
	__asm__ volatile(
   11048:	f383 8811 	msr	BASEPRI, r3
   1104c:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
   11050:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   11052:	b002      	add	sp, #8
   11054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11058:	4617      	mov	r7, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1105a:	6880      	ldr	r0, [r0, #8]
   1105c:	4a2c      	ldr	r2, [pc, #176]	; (11110 <z_impl_k_mutex_lock+0x100>)
   1105e:	6892      	ldr	r2, [r2, #8]
   11060:	4290      	cmp	r0, r2
   11062:	d0e5      	beq.n	11030 <z_impl_k_mutex_lock+0x20>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   11064:	ea56 0107 	orrs.w	r1, r6, r7
   11068:	d038      	beq.n	110dc <z_impl_k_mutex_lock+0xcc>
					    mutex->owner->base.prio);
   1106a:	f990 800e 	ldrsb.w	r8, [r0, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1106e:	4641      	mov	r1, r8
   11070:	f992 000e 	ldrsb.w	r0, [r2, #14]
   11074:	f00d ffc5 	bl	1f002 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   11078:	4580      	cmp	r8, r0
   1107a:	dc36      	bgt.n	110ea <z_impl_k_mutex_lock+0xda>
	bool resched = false;
   1107c:	f04f 0800 	mov.w	r8, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   11080:	9700      	str	r7, [sp, #0]
   11082:	9601      	str	r6, [sp, #4]
   11084:	4622      	mov	r2, r4
   11086:	4629      	mov	r1, r5
   11088:	4822      	ldr	r0, [pc, #136]	; (11114 <z_impl_k_mutex_lock+0x104>)
   1108a:	f000 fc63 	bl	11954 <z_pend_curr>
	if (got_mutex == 0) {
   1108e:	2800      	cmp	r0, #0
   11090:	d0df      	beq.n	11052 <z_impl_k_mutex_lock+0x42>
	__asm__ volatile(
   11092:	f04f 0320 	mov.w	r3, #32
   11096:	f3ef 8511 	mrs	r5, BASEPRI
   1109a:	f383 8812 	msr	BASEPRI_MAX, r3
   1109e:	f3bf 8f6f 	isb	sy
   110a2:	462e      	mov	r6, r5
	if (likely(mutex->owner != NULL)) {
   110a4:	68a3      	ldr	r3, [r4, #8]
   110a6:	b343      	cbz	r3, 110fa <z_impl_k_mutex_lock+0xea>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   110a8:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   110aa:	429c      	cmp	r4, r3
   110ac:	d023      	beq.n	110f6 <z_impl_k_mutex_lock+0xe6>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   110ae:	b313      	cbz	r3, 110f6 <z_impl_k_mutex_lock+0xe6>
   110b0:	6921      	ldr	r1, [r4, #16]
   110b2:	f993 000e 	ldrsb.w	r0, [r3, #14]
   110b6:	f00d ffa4 	bl	1f002 <new_prio_for_inheritance>
   110ba:	4601      	mov	r1, r0
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   110bc:	4620      	mov	r0, r4
   110be:	f00d ffab 	bl	1f018 <adjust_owner_prio>
   110c2:	b9e8      	cbnz	r0, 11100 <z_impl_k_mutex_lock+0xf0>
   110c4:	f1b8 0f00 	cmp.w	r8, #0
   110c8:	d11a      	bne.n	11100 <z_impl_k_mutex_lock+0xf0>
	__asm__ volatile(
   110ca:	f386 8811 	msr	BASEPRI, r6
   110ce:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
   110d2:	f06f 000a 	mvn.w	r0, #10
   110d6:	e7bc      	b.n	11052 <z_impl_k_mutex_lock+0x42>
					_current->base.prio :
   110d8:	6922      	ldr	r2, [r4, #16]
   110da:	e7af      	b.n	1103c <z_impl_k_mutex_lock+0x2c>
   110dc:	f385 8811 	msr	BASEPRI, r5
   110e0:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   110e4:	f06f 000f 	mvn.w	r0, #15
   110e8:	e7b3      	b.n	11052 <z_impl_k_mutex_lock+0x42>
		resched = adjust_owner_prio(mutex, new_prio);
   110ea:	4601      	mov	r1, r0
   110ec:	4620      	mov	r0, r4
   110ee:	f00d ff93 	bl	1f018 <adjust_owner_prio>
   110f2:	4680      	mov	r8, r0
   110f4:	e7c4      	b.n	11080 <z_impl_k_mutex_lock+0x70>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   110f6:	6921      	ldr	r1, [r4, #16]
   110f8:	e7e0      	b.n	110bc <z_impl_k_mutex_lock+0xac>
	if (resched) {
   110fa:	f1b8 0f00 	cmp.w	r8, #0
   110fe:	d0e4      	beq.n	110ca <z_impl_k_mutex_lock+0xba>
		z_reschedule(&lock, key);
   11100:	4629      	mov	r1, r5
   11102:	4804      	ldr	r0, [pc, #16]	; (11114 <z_impl_k_mutex_lock+0x104>)
   11104:	f000 fac2 	bl	1168c <z_reschedule>
	return -EAGAIN;
   11108:	f06f 000a 	mvn.w	r0, #10
   1110c:	e7a1      	b.n	11052 <z_impl_k_mutex_lock+0x42>
   1110e:	bf00      	nop
   11110:	2000378c 	.word	0x2000378c
   11114:	200037b4 	.word	0x200037b4

00011118 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   11118:	6883      	ldr	r3, [r0, #8]
   1111a:	b383      	cbz	r3, 1117e <z_impl_k_mutex_unlock+0x66>
{
   1111c:	b570      	push	{r4, r5, r6, lr}
   1111e:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   11120:	4a1a      	ldr	r2, [pc, #104]	; (1118c <z_impl_k_mutex_unlock+0x74>)
   11122:	6892      	ldr	r2, [r2, #8]
   11124:	4293      	cmp	r3, r2
   11126:	d12d      	bne.n	11184 <z_impl_k_mutex_unlock+0x6c>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   11128:	68c3      	ldr	r3, [r0, #12]
   1112a:	2b01      	cmp	r3, #1
   1112c:	d903      	bls.n	11136 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   1112e:	3b01      	subs	r3, #1
   11130:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   11132:	2000      	movs	r0, #0
}
   11134:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   11136:	f04f 0320 	mov.w	r3, #32
   1113a:	f3ef 8511 	mrs	r5, BASEPRI
   1113e:	f383 8812 	msr	BASEPRI_MAX, r3
   11142:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   11146:	6901      	ldr	r1, [r0, #16]
   11148:	f00d ff66 	bl	1f018 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1114c:	4620      	mov	r0, r4
   1114e:	f00e fadf 	bl	1f710 <z_unpend_first_thread>
	mutex->owner = new_owner;
   11152:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   11154:	b160      	cbz	r0, 11170 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
   11156:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1115a:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1115c:	2400      	movs	r4, #0
   1115e:	67c4      	str	r4, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   11160:	f00e fa22 	bl	1f5a8 <z_ready_thread>
		z_reschedule(&lock, key);
   11164:	4629      	mov	r1, r5
   11166:	480a      	ldr	r0, [pc, #40]	; (11190 <z_impl_k_mutex_unlock+0x78>)
   11168:	f000 fa90 	bl	1168c <z_reschedule>
	return 0;
   1116c:	4620      	mov	r0, r4
   1116e:	e7e1      	b.n	11134 <z_impl_k_mutex_unlock+0x1c>
		mutex->lock_count = 0U;
   11170:	2000      	movs	r0, #0
   11172:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   11174:	f385 8811 	msr	BASEPRI, r5
   11178:	f3bf 8f6f 	isb	sy
   1117c:	e7da      	b.n	11134 <z_impl_k_mutex_unlock+0x1c>
		return -EINVAL;
   1117e:	f06f 0015 	mvn.w	r0, #21
}
   11182:	4770      	bx	lr
		return -EPERM;
   11184:	f04f 30ff 	mov.w	r0, #4294967295
   11188:	e7d4      	b.n	11134 <z_impl_k_mutex_unlock+0x1c>
   1118a:	bf00      	nop
   1118c:	2000378c 	.word	0x2000378c
   11190:	200037b4 	.word	0x200037b4

00011194 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   11194:	b510      	push	{r4, lr}
   11196:	b082      	sub	sp, #8
   11198:	4684      	mov	ip, r0
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1119a:	4686      	mov	lr, r0
	__asm__ volatile(
   1119c:	f04f 0020 	mov.w	r0, #32
   111a0:	f3ef 8111 	mrs	r1, BASEPRI
   111a4:	f380 8812 	msr	BASEPRI_MAX, r0
   111a8:	f3bf 8f6f 	isb	sy
   111ac:	460c      	mov	r4, r1
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   111ae:	f85e 0b08 	ldr.w	r0, [lr], #8
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   111b2:	b1a0      	cbz	r0, 111de <z_impl_k_queue_get+0x4a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   111b4:	6803      	ldr	r3, [r0, #0]
   111b6:	f023 0303 	bic.w	r3, r3, #3
	list->head = node;
   111ba:	f8cc 3000 	str.w	r3, [ip]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   111be:	f8dc 2004 	ldr.w	r2, [ip, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   111c2:	4290      	cmp	r0, r2
   111c4:	d008      	beq.n	111d8 <z_impl_k_queue_get+0x44>
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   111c6:	2101      	movs	r1, #1
   111c8:	f00d ffbb 	bl	1f142 <z_queue_node_peek>
	__asm__ volatile(
   111cc:	f384 8811 	msr	BASEPRI, r4
   111d0:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   111d4:	b002      	add	sp, #8
   111d6:	bd10      	pop	{r4, pc}
	list->tail = node;
   111d8:	f8cc 3004 	str.w	r3, [ip, #4]
}
   111dc:	e7f3      	b.n	111c6 <z_impl_k_queue_get+0x32>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   111de:	ea53 0002 	orrs.w	r0, r3, r2
   111e2:	d00a      	beq.n	111fa <z_impl_k_queue_get+0x66>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   111e4:	9200      	str	r2, [sp, #0]
   111e6:	9301      	str	r3, [sp, #4]
   111e8:	4672      	mov	r2, lr
   111ea:	4670      	mov	r0, lr
   111ec:	f000 fbb2 	bl	11954 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   111f0:	b948      	cbnz	r0, 11206 <z_impl_k_queue_get+0x72>
   111f2:	4b06      	ldr	r3, [pc, #24]	; (1120c <z_impl_k_queue_get+0x78>)
   111f4:	689b      	ldr	r3, [r3, #8]
   111f6:	6958      	ldr	r0, [r3, #20]
   111f8:	e7ec      	b.n	111d4 <z_impl_k_queue_get+0x40>
   111fa:	f381 8811 	msr	BASEPRI, r1
   111fe:	f3bf 8f6f 	isb	sy
		return NULL;
   11202:	2000      	movs	r0, #0
   11204:	e7e6      	b.n	111d4 <z_impl_k_queue_get+0x40>
	return (ret != 0) ? NULL : _current->base.swap_data;
   11206:	2000      	movs	r0, #0
   11208:	e7e4      	b.n	111d4 <z_impl_k_queue_get+0x40>
   1120a:	bf00      	nop
   1120c:	2000378c 	.word	0x2000378c

00011210 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   11210:	b538      	push	{r3, r4, r5, lr}
   11212:	4604      	mov	r4, r0
	__asm__ volatile(
   11214:	f04f 0320 	mov.w	r3, #32
   11218:	f3ef 8511 	mrs	r5, BASEPRI
   1121c:	f383 8812 	msr	BASEPRI_MAX, r3
   11220:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   11224:	f00e fa74 	bl	1f710 <z_unpend_first_thread>

	if (thread != NULL) {
   11228:	b140      	cbz	r0, 1123c <z_impl_k_sem_give+0x2c>
   1122a:	2200      	movs	r2, #0
   1122c:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1122e:	f00e f9bb 	bl	1f5a8 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   11232:	4629      	mov	r1, r5
   11234:	4809      	ldr	r0, [pc, #36]	; (1125c <z_impl_k_sem_give+0x4c>)
   11236:	f000 fa29 	bl	1168c <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   1123a:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1123c:	68a3      	ldr	r3, [r4, #8]
   1123e:	68e2      	ldr	r2, [r4, #12]
   11240:	4293      	cmp	r3, r2
   11242:	d008      	beq.n	11256 <z_impl_k_sem_give+0x46>
   11244:	2201      	movs	r2, #1
   11246:	4413      	add	r3, r2
   11248:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1124a:	2102      	movs	r1, #2
   1124c:	f104 0010 	add.w	r0, r4, #16
   11250:	f00e fd75 	bl	1fd3e <z_handle_obj_poll_events>
}
   11254:	e7ed      	b.n	11232 <z_impl_k_sem_give+0x22>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   11256:	2200      	movs	r2, #0
   11258:	e7f5      	b.n	11246 <z_impl_k_sem_give+0x36>
   1125a:	bf00      	nop
   1125c:	200037b4 	.word	0x200037b4

00011260 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   11260:	b510      	push	{r4, lr}
   11262:	b082      	sub	sp, #8
   11264:	f04f 0420 	mov.w	r4, #32
   11268:	f3ef 8111 	mrs	r1, BASEPRI
   1126c:	f384 8812 	msr	BASEPRI_MAX, r4
   11270:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   11274:	6884      	ldr	r4, [r0, #8]
   11276:	b144      	cbz	r4, 1128a <z_impl_k_sem_take+0x2a>
		sem->count--;
   11278:	3c01      	subs	r4, #1
   1127a:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   1127c:	f381 8811 	msr	BASEPRI, r1
   11280:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   11284:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   11286:	b002      	add	sp, #8
   11288:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1128a:	ea53 0402 	orrs.w	r4, r3, r2
   1128e:	d006      	beq.n	1129e <z_impl_k_sem_take+0x3e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   11290:	9200      	str	r2, [sp, #0]
   11292:	9301      	str	r3, [sp, #4]
   11294:	4602      	mov	r2, r0
   11296:	4805      	ldr	r0, [pc, #20]	; (112ac <z_impl_k_sem_take+0x4c>)
   11298:	f000 fb5c 	bl	11954 <z_pend_curr>
	return ret;
   1129c:	e7f3      	b.n	11286 <z_impl_k_sem_take+0x26>
   1129e:	f381 8811 	msr	BASEPRI, r1
   112a2:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   112a6:	f06f 000f 	mvn.w	r0, #15
   112aa:	e7ec      	b.n	11286 <z_impl_k_sem_take+0x26>
   112ac:	200037b4 	.word	0x200037b4

000112b0 <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
   112b0:	b538      	push	{r3, r4, r5, lr}
   112b2:	4604      	mov	r4, r0
	__asm__ volatile(
   112b4:	f04f 0320 	mov.w	r3, #32
   112b8:	f3ef 8511 	mrs	r5, BASEPRI
   112bc:	f383 8812 	msr	BASEPRI_MAX, r3
   112c0:	f3bf 8f6f 	isb	sy
	z_spin_lock_set_owner(l);
#if defined(CONFIG_SPIN_LOCK_TIME_LIMIT) && (CONFIG_SPIN_LOCK_TIME_LIMIT != 0)
	l->lock_time = sys_clock_cycle_get_32();
#endif /* CONFIG_SPIN_LOCK_TIME_LIMIT */
#endif/* CONFIG_SPIN_VALIDATE */
	return k;
   112c4:	e004      	b.n	112d0 <z_impl_k_sem_reset+0x20>
   112c6:	f06f 020a 	mvn.w	r2, #10
   112ca:	67c2      	str	r2, [r0, #124]	; 0x7c
		thread = z_unpend_first_thread(&sem->wait_q);
		if (thread == NULL) {
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
   112cc:	f00e f96c 	bl	1f5a8 <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
   112d0:	4620      	mov	r0, r4
   112d2:	f00e fa1d 	bl	1f710 <z_unpend_first_thread>
		if (thread == NULL) {
   112d6:	2800      	cmp	r0, #0
   112d8:	d1f5      	bne.n	112c6 <z_impl_k_sem_reset+0x16>
	}
	sem->count = 0;
   112da:	2300      	movs	r3, #0
   112dc:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   112de:	2102      	movs	r1, #2
   112e0:	f104 0010 	add.w	r0, r4, #16
   112e4:	f00e fd2b 	bl	1fd3e <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
   112e8:	4629      	mov	r1, r5
   112ea:	4802      	ldr	r0, [pc, #8]	; (112f4 <z_impl_k_sem_reset+0x44>)
   112ec:	f000 f9ce 	bl	1168c <z_reschedule>
}
   112f0:	bd38      	pop	{r3, r4, r5, pc}
   112f2:	bf00      	nop
   112f4:	200037b4 	.word	0x200037b4

000112f8 <queue_submit_locked>:
 * @retval -EBUSY if the submission was rejected (draining, plugged)
 */
static inline int queue_submit_locked(struct k_work_q *queue,
				      struct k_work *work)
{
	if (queue == NULL) {
   112f8:	b370      	cbz	r0, 11358 <queue_submit_locked+0x60>
{
   112fa:	b538      	push	{r3, r4, r5, lr}
   112fc:	460d      	mov	r5, r1
   112fe:	4604      	mov	r4, r0
		return -EINVAL;
	}

	int ret = -EBUSY;
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   11300:	4b1b      	ldr	r3, [pc, #108]	; (11370 <queue_submit_locked+0x78>)
   11302:	689b      	ldr	r3, [r3, #8]
   11304:	4283      	cmp	r3, r0
   11306:	d01b      	beq.n	11340 <queue_submit_locked+0x48>
   11308:	2300      	movs	r3, #0
   1130a:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
   1130c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   11310:	f3c3 0180 	ubfx	r1, r3, #2, #1
   11314:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	 * * -ENODEV if the queue isn't running.
	 * * -EBUSY if draining and not chained
	 * * -EBUSY if plugged and not draining
	 * * otherwise OK
	 */
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   11318:	f013 0f01 	tst.w	r3, #1
   1131c:	d01f      	beq.n	1135e <queue_submit_locked+0x66>
		ret = -ENODEV;
	} else if (draining && !chained) {
   1131e:	b101      	cbz	r1, 11322 <queue_submit_locked+0x2a>
   11320:	b302      	cbz	r2, 11364 <queue_submit_locked+0x6c>
		ret = -EBUSY;
	} else if (plugged && !draining) {
   11322:	b100      	cbz	r0, 11326 <queue_submit_locked+0x2e>
   11324:	b309      	cbz	r1, 1136a <queue_submit_locked+0x72>
	parent->next = child;
   11326:	2300      	movs	r3, #0
   11328:	602b      	str	r3, [r5, #0]
	return list->tail;
   1132a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   1132e:	b173      	cbz	r3, 1134e <queue_submit_locked+0x56>
	parent->next = child;
   11330:	601d      	str	r5, [r3, #0]
	list->tail = node;
   11332:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
		ret = -EBUSY;
	} else {
		sys_slist_append(&queue->pending, &work->node);
		ret = 1;
		(void)notify_queue_locked(queue);
   11336:	4620      	mov	r0, r4
   11338:	f00d ffb6 	bl	1f2a8 <notify_queue_locked>
		ret = 1;
   1133c:	2001      	movs	r0, #1
	}

	return ret;
}
   1133e:	bd38      	pop	{r3, r4, r5, pc}
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   11340:	f00d fe1d 	bl	1ef7e <k_is_in_isr>
   11344:	b908      	cbnz	r0, 1134a <queue_submit_locked+0x52>
   11346:	2301      	movs	r3, #1
   11348:	e7df      	b.n	1130a <queue_submit_locked+0x12>
   1134a:	2300      	movs	r3, #0
   1134c:	e7dd      	b.n	1130a <queue_submit_locked+0x12>
   1134e:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
	list->head = node;
   11352:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
   11356:	e7ee      	b.n	11336 <queue_submit_locked+0x3e>
		return -EINVAL;
   11358:	f06f 0015 	mvn.w	r0, #21
}
   1135c:	4770      	bx	lr
		ret = -ENODEV;
   1135e:	f06f 0012 	mvn.w	r0, #18
   11362:	e7ec      	b.n	1133e <queue_submit_locked+0x46>
		ret = -EBUSY;
   11364:	f06f 000f 	mvn.w	r0, #15
   11368:	e7e9      	b.n	1133e <queue_submit_locked+0x46>
		ret = -EBUSY;
   1136a:	f06f 000f 	mvn.w	r0, #15
   1136e:	e7e6      	b.n	1133e <queue_submit_locked+0x46>
   11370:	2000378c 	.word	0x2000378c

00011374 <finalize_cancel_locked>:
{
   11374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11376:	4606      	mov	r6, r0
	*flagp &= ~BIT(bit);
   11378:	68c3      	ldr	r3, [r0, #12]
   1137a:	f023 0302 	bic.w	r3, r3, #2
   1137e:	60c3      	str	r3, [r0, #12]
	return list->head;
   11380:	4b13      	ldr	r3, [pc, #76]	; (113d0 <finalize_cancel_locked+0x5c>)
   11382:	681d      	ldr	r5, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   11384:	b185      	cbz	r5, 113a8 <finalize_cancel_locked+0x34>
	return node->next;
   11386:	682c      	ldr	r4, [r5, #0]
   11388:	b104      	cbz	r4, 1138c <finalize_cancel_locked+0x18>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1138a:	b10d      	cbz	r5, 11390 <finalize_cancel_locked+0x1c>
   1138c:	2700      	movs	r7, #0
   1138e:	e010      	b.n	113b2 <finalize_cancel_locked+0x3e>
   11390:	462c      	mov	r4, r5
   11392:	e7fb      	b.n	1138c <finalize_cancel_locked+0x18>
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   11394:	462a      	mov	r2, r5
   11396:	4639      	mov	r1, r7
   11398:	480d      	ldr	r0, [pc, #52]	; (113d0 <finalize_cancel_locked+0x5c>)
   1139a:	f00d ff40 	bl	1f21e <sys_slist_remove>
			k_sem_give(&wc->sem);
   1139e:	f105 0008 	add.w	r0, r5, #8
	z_impl_k_sem_give(sem);
   113a2:	f7ff ff35 	bl	11210 <z_impl_k_sem_give>
}
   113a6:	e009      	b.n	113bc <finalize_cancel_locked+0x48>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   113a8:	462c      	mov	r4, r5
   113aa:	e7ef      	b.n	1138c <finalize_cancel_locked+0x18>
   113ac:	4623      	mov	r3, r4
   113ae:	4625      	mov	r5, r4
   113b0:	461c      	mov	r4, r3
   113b2:	b165      	cbz	r5, 113ce <finalize_cancel_locked+0x5a>
		if (wc->work == work) {
   113b4:	686b      	ldr	r3, [r5, #4]
   113b6:	42b3      	cmp	r3, r6
   113b8:	d0ec      	beq.n	11394 <finalize_cancel_locked+0x20>
			prev = &wc->node;
   113ba:	462f      	mov	r7, r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   113bc:	2c00      	cmp	r4, #0
   113be:	d0f5      	beq.n	113ac <finalize_cancel_locked+0x38>
	return node->next;
   113c0:	6823      	ldr	r3, [r4, #0]
   113c2:	2b00      	cmp	r3, #0
   113c4:	d0f3      	beq.n	113ae <finalize_cancel_locked+0x3a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   113c6:	2c00      	cmp	r4, #0
   113c8:	d1f1      	bne.n	113ae <finalize_cancel_locked+0x3a>
   113ca:	4623      	mov	r3, r4
   113cc:	e7ef      	b.n	113ae <finalize_cancel_locked+0x3a>
}
   113ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   113d0:	200037b4 	.word	0x200037b4

000113d4 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   113d4:	b570      	push	{r4, r5, r6, lr}
   113d6:	b084      	sub	sp, #16
   113d8:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
   113da:	e016      	b.n	1140a <work_queue_main+0x36>
	return (*flagp & BIT(bit)) != 0U;
   113dc:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	*flagp &= ~BIT(bit);
   113e0:	f023 0204 	bic.w	r2, r3, #4
   113e4:	f8c5 2098 	str.w	r2, [r5, #152]	; 0x98
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   113e8:	f013 0f04 	tst.w	r3, #4
   113ec:	d15a      	bne.n	114a4 <work_queue_main+0xd0>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   113ee:	2300      	movs	r3, #0
   113f0:	9302      	str	r3, [sp, #8]
   113f2:	f04f 32ff 	mov.w	r2, #4294967295
   113f6:	f04f 33ff 	mov.w	r3, #4294967295
   113fa:	e9cd 2300 	strd	r2, r3, [sp]
   113fe:	f105 0288 	add.w	r2, r5, #136	; 0x88
   11402:	4631      	mov	r1, r6
   11404:	482e      	ldr	r0, [pc, #184]	; (114c0 <work_queue_main+0xec>)
   11406:	f000 fcaf 	bl	11d68 <z_sched_wait>
   1140a:	f04f 0320 	mov.w	r3, #32
   1140e:	f3ef 8611 	mrs	r6, BASEPRI
   11412:	f383 8812 	msr	BASEPRI_MAX, r3
   11416:	f3bf 8f6f 	isb	sy
   1141a:	4632      	mov	r2, r6
	return list->head;
   1141c:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   11420:	2c00      	cmp	r4, #0
   11422:	d0db      	beq.n	113dc <work_queue_main+0x8>
	return node->next;
   11424:	6823      	ldr	r3, [r4, #0]
	list->head = node;
   11426:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
	return list->tail;
   1142a:	f8d5 1084 	ldr.w	r1, [r5, #132]	; 0x84
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1142e:	428c      	cmp	r4, r1
   11430:	d035      	beq.n	1149e <work_queue_main+0xca>
	*flagp |= BIT(bit);
   11432:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   11436:	f043 0302 	orr.w	r3, r3, #2
   1143a:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
   1143e:	68e3      	ldr	r3, [r4, #12]
   11440:	f043 0101 	orr.w	r1, r3, #1
   11444:	60e1      	str	r1, [r4, #12]
	*flagp &= ~BIT(bit);
   11446:	f023 0304 	bic.w	r3, r3, #4
   1144a:	f043 0301 	orr.w	r3, r3, #1
   1144e:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
   11450:	6863      	ldr	r3, [r4, #4]
	__asm__ volatile(
   11452:	f382 8811 	msr	BASEPRI, r2
   11456:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   1145a:	4620      	mov	r0, r4
   1145c:	4798      	blx	r3
	__asm__ volatile(
   1145e:	f04f 0320 	mov.w	r3, #32
   11462:	f3ef 8611 	mrs	r6, BASEPRI
   11466:	f383 8812 	msr	BASEPRI_MAX, r3
   1146a:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   1146e:	68e3      	ldr	r3, [r4, #12]
   11470:	f023 0301 	bic.w	r3, r3, #1
   11474:	60e3      	str	r3, [r4, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   11476:	f013 0f02 	tst.w	r3, #2
   1147a:	d11d      	bne.n	114b8 <work_queue_main+0xe4>
	*flagp &= ~BIT(bit);
   1147c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   11480:	f023 0302 	bic.w	r3, r3, #2
   11484:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
	return (*flagp & BIT(bit)) != 0U;
   11488:	f3c3 2300 	ubfx	r3, r3, #8, #1
	__asm__ volatile(
   1148c:	f386 8811 	msr	BASEPRI, r6
   11490:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   11494:	2b00      	cmp	r3, #0
   11496:	d1b8      	bne.n	1140a <work_queue_main+0x36>
	z_impl_k_yield();
   11498:	f000 fb6c 	bl	11b74 <z_impl_k_yield>
}
   1149c:	e7b5      	b.n	1140a <work_queue_main+0x36>
	list->tail = node;
   1149e:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
		if (node != NULL) {
   114a2:	e7c6      	b.n	11432 <work_queue_main+0x5e>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   114a4:	f105 0490 	add.w	r4, r5, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   114a8:	2200      	movs	r2, #0
   114aa:	2101      	movs	r1, #1
   114ac:	4620      	mov	r0, r4
   114ae:	f00e f965 	bl	1f77c <z_sched_wake>
   114b2:	2800      	cmp	r0, #0
   114b4:	d1f8      	bne.n	114a8 <work_queue_main+0xd4>
   114b6:	e79a      	b.n	113ee <work_queue_main+0x1a>
			finalize_cancel_locked(work);
   114b8:	4620      	mov	r0, r4
   114ba:	f7ff ff5b 	bl	11374 <finalize_cancel_locked>
   114be:	e7dd      	b.n	1147c <work_queue_main+0xa8>
   114c0:	200037bc 	.word	0x200037bc

000114c4 <schedule_for_queue_locked>:
 * @retval 1 to indicate successfully scheduled.
 */
static int schedule_for_queue_locked(struct k_work_q **queuep,
				     struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   114c4:	b508      	push	{r3, lr}
   114c6:	4684      	mov	ip, r0
   114c8:	4608      	mov	r0, r1
	int ret = 1;
	struct k_work *work = &dwork->work;

	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   114ca:	ea53 0102 	orrs.w	r1, r3, r2
   114ce:	d00c      	beq.n	114ea <schedule_for_queue_locked+0x26>
	*flagp |= BIT(bit);
   114d0:	68c1      	ldr	r1, [r0, #12]
   114d2:	f041 0108 	orr.w	r1, r1, #8
   114d6:	60c1      	str	r1, [r0, #12]
		return submit_to_queue_locked(work, queuep);
	}

	flag_set(&work->flags, K_WORK_DELAYED_BIT);
	dwork->queue = *queuep;
   114d8:	f8dc 1000 	ldr.w	r1, [ip]
   114dc:	6281      	str	r1, [r0, #40]	; 0x28

	/* Add timeout */
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   114de:	4905      	ldr	r1, [pc, #20]	; (114f4 <schedule_for_queue_locked+0x30>)
   114e0:	3010      	adds	r0, #16
   114e2:	f000 fcfd 	bl	11ee0 <z_add_timeout>

	return ret;
   114e6:	2001      	movs	r0, #1
}
   114e8:	bd08      	pop	{r3, pc}
		return submit_to_queue_locked(work, queuep);
   114ea:	4661      	mov	r1, ip
   114ec:	f00d fee6 	bl	1f2bc <submit_to_queue_locked>
   114f0:	e7fa      	b.n	114e8 <schedule_for_queue_locked+0x24>
   114f2:	bf00      	nop
   114f4:	0001f31d 	.word	0x0001f31d

000114f8 <k_work_queue_start>:
{
   114f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   114fa:	b089      	sub	sp, #36	; 0x24
   114fc:	4604      	mov	r4, r0
   114fe:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	list->head = NULL;
   11500:	2000      	movs	r0, #0
   11502:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
	list->tail = NULL;
   11506:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
   1150a:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->head = (sys_dnode_t *)list;
   1150e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
	list->tail = (sys_dnode_t *)list;
   11512:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
   11516:	f104 0090 	add.w	r0, r4, #144	; 0x90
	list->head = (sys_dnode_t *)list;
   1151a:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
	list->tail = (sys_dnode_t *)list;
   1151e:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
	if ((cfg != NULL) && cfg->no_yield) {
   11522:	b1fd      	cbz	r5, 11564 <k_work_queue_start+0x6c>
   11524:	7928      	ldrb	r0, [r5, #4]
   11526:	b9f8      	cbnz	r0, 11568 <k_work_queue_start+0x70>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   11528:	2001      	movs	r0, #1
	*flagp = flags;
   1152a:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1152e:	f04f 36ff 	mov.w	r6, #4294967295
   11532:	f04f 37ff 	mov.w	r7, #4294967295
   11536:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1153a:	2000      	movs	r0, #0
   1153c:	9004      	str	r0, [sp, #16]
   1153e:	9303      	str	r3, [sp, #12]
   11540:	9002      	str	r0, [sp, #8]
   11542:	9001      	str	r0, [sp, #4]
   11544:	9400      	str	r4, [sp, #0]
   11546:	4b0a      	ldr	r3, [pc, #40]	; (11570 <k_work_queue_start+0x78>)
   11548:	4620      	mov	r0, r4
   1154a:	f00d fd32 	bl	1efb2 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   1154e:	b125      	cbz	r5, 1155a <k_work_queue_start+0x62>
   11550:	6829      	ldr	r1, [r5, #0]
   11552:	b111      	cbz	r1, 1155a <k_work_queue_start+0x62>
	return z_impl_k_thread_name_set(thread, str);
   11554:	4620      	mov	r0, r4
   11556:	f00d fd18 	bl	1ef8a <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   1155a:	4620      	mov	r0, r4
   1155c:	f00d fd1a 	bl	1ef94 <z_impl_k_thread_start>
}
   11560:	b009      	add	sp, #36	; 0x24
   11562:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t flags = K_WORK_QUEUE_STARTED;
   11564:	2001      	movs	r0, #1
   11566:	e7e0      	b.n	1152a <k_work_queue_start+0x32>
		flags |= K_WORK_QUEUE_NO_YIELD;
   11568:	f240 1001 	movw	r0, #257	; 0x101
   1156c:	e7dd      	b.n	1152a <k_work_queue_start+0x32>
   1156e:	bf00      	nop
   11570:	000113d5 	.word	0x000113d5

00011574 <k_work_schedule>:
	return ret;
}

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   11574:	b508      	push	{r3, lr}
   11576:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   11578:	4801      	ldr	r0, [pc, #4]	; (11580 <k_work_schedule+0xc>)
   1157a:	f00d ff57 	bl	1f42c <k_work_schedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule, dwork, delay, ret);

	return ret;
}
   1157e:	bd08      	pop	{r3, pc}
   11580:	20001d98 	.word	0x20001d98

00011584 <k_work_reschedule>:
	return ret;
}

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   11584:	b508      	push	{r3, lr}
   11586:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   11588:	4801      	ldr	r0, [pc, #4]	; (11590 <k_work_reschedule+0xc>)
   1158a:	f00d ff69 	bl	1f460 <k_work_reschedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule, dwork, delay, ret);

	return ret;
}
   1158e:	bd08      	pop	{r3, pc}
   11590:	20001d98 	.word	0x20001d98

00011594 <sliceable>:


static inline int is_preempt(struct k_thread *thread)
{
	/* explanation in kernel_struct.h */
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   11594:	89c3      	ldrh	r3, [r0, #14]
static inline bool sliceable(struct k_thread *thread)
{
	bool ret = is_preempt(thread)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_idle_thread_object(thread);
   11596:	2b7f      	cmp	r3, #127	; 0x7f
   11598:	d80e      	bhi.n	115b8 <sliceable+0x24>
	uint8_t state = thread->base.thread_state;
   1159a:	7b43      	ldrb	r3, [r0, #13]
		&& !z_is_thread_prevented_from_running(thread)
   1159c:	f013 0f1f 	tst.w	r3, #31
   115a0:	d10c      	bne.n	115bc <sliceable+0x28>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   115a2:	f990 200e 	ldrsb.w	r2, [r0, #14]
   115a6:	4b08      	ldr	r3, [pc, #32]	; (115c8 <sliceable+0x34>)
   115a8:	681b      	ldr	r3, [r3, #0]
   115aa:	429a      	cmp	r2, r3
   115ac:	db08      	blt.n	115c0 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
   115ae:	4b07      	ldr	r3, [pc, #28]	; (115cc <sliceable+0x38>)
   115b0:	4298      	cmp	r0, r3
   115b2:	d007      	beq.n	115c4 <sliceable+0x30>
   115b4:	2001      	movs	r0, #1
   115b6:	4770      	bx	lr
   115b8:	2000      	movs	r0, #0
   115ba:	4770      	bx	lr
   115bc:	2000      	movs	r0, #0
   115be:	4770      	bx	lr
   115c0:	2000      	movs	r0, #0
   115c2:	4770      	bx	lr
   115c4:	2000      	movs	r0, #0
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
   115c6:	4770      	bx	lr
   115c8:	200037c0 	.word	0x200037c0
   115cc:	20001c90 	.word	0x20001c90

000115d0 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   115d0:	f1b3 3fff 	cmp.w	r3, #4294967295
   115d4:	bf08      	it	eq
   115d6:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   115da:	d100      	bne.n	115de <add_thread_timeout+0xe>
   115dc:	4770      	bx	lr
{
   115de:	b508      	push	{r3, lr}
   115e0:	4902      	ldr	r1, [pc, #8]	; (115ec <add_thread_timeout+0x1c>)
   115e2:	3018      	adds	r0, #24
   115e4:	f000 fc7c 	bl	11ee0 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
   115e8:	bd08      	pop	{r3, pc}
   115ea:	bf00      	nop
   115ec:	0001f5e1 	.word	0x0001f5e1

000115f0 <z_reset_time_slice>:
{
   115f0:	b510      	push	{r4, lr}
	int ret = slice_ticks;
   115f2:	4b07      	ldr	r3, [pc, #28]	; (11610 <z_reset_time_slice+0x20>)
   115f4:	681c      	ldr	r4, [r3, #0]
	if (slice_time(curr) != 0) {
   115f6:	b904      	cbnz	r4, 115fa <z_reset_time_slice+0xa>
}
   115f8:	bd10      	pop	{r4, pc}
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   115fa:	f7fd f805 	bl	e608 <sys_clock_elapsed>
   115fe:	4404      	add	r4, r0
   11600:	4b04      	ldr	r3, [pc, #16]	; (11614 <z_reset_time_slice+0x24>)
   11602:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   11604:	2100      	movs	r1, #0
   11606:	4b02      	ldr	r3, [pc, #8]	; (11610 <z_reset_time_slice+0x20>)
   11608:	6818      	ldr	r0, [r3, #0]
   1160a:	f00e f96c 	bl	1f8e6 <z_set_timeout_expiry>
}
   1160e:	e7f3      	b.n	115f8 <z_reset_time_slice+0x8>
   11610:	200037c4 	.word	0x200037c4
   11614:	2000378c 	.word	0x2000378c

00011618 <k_sched_time_slice_set>:
{
   11618:	b570      	push	{r4, r5, r6, lr}
   1161a:	4604      	mov	r4, r0
   1161c:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
   1161e:	2300      	movs	r3, #0
	__asm__ volatile(
   11620:	f04f 0220 	mov.w	r2, #32
   11624:	f3ef 8511 	mrs	r5, BASEPRI
   11628:	f382 8812 	msr	BASEPRI_MAX, r2
   1162c:	f3bf 8f6f 	isb	sy
   11630:	e00e      	b.n	11650 <k_sched_time_slice_set+0x38>
			slice_ticks = MAX(2, slice_ticks);
   11632:	2802      	cmp	r0, #2
   11634:	bfb8      	it	lt
   11636:	2002      	movlt	r0, #2
   11638:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   1163a:	4b11      	ldr	r3, [pc, #68]	; (11680 <k_sched_time_slice_set+0x68>)
   1163c:	601e      	str	r6, [r3, #0]
		z_reset_time_slice(_current);
   1163e:	4b11      	ldr	r3, [pc, #68]	; (11684 <k_sched_time_slice_set+0x6c>)
   11640:	6898      	ldr	r0, [r3, #8]
   11642:	f7ff ffd5 	bl	115f0 <z_reset_time_slice>
	__asm__ volatile(
   11646:	f385 8811 	msr	BASEPRI, r5
   1164a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1164e:	2301      	movs	r3, #1
   11650:	b9a3      	cbnz	r3, 1167c <k_sched_time_slice_set+0x64>
		_current_cpu->slice_ticks = 0;
   11652:	4b0c      	ldr	r3, [pc, #48]	; (11684 <k_sched_time_slice_set+0x6c>)
   11654:	2200      	movs	r2, #0
   11656:	611a      	str	r2, [r3, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
   11658:	0c61      	lsrs	r1, r4, #17
   1165a:	03e0      	lsls	r0, r4, #15
   1165c:	f240 33e7 	movw	r3, #999	; 0x3e7
   11660:	18c0      	adds	r0, r0, r3
   11662:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11666:	f04f 0300 	mov.w	r3, #0
   1166a:	f141 0100 	adc.w	r1, r1, #0
   1166e:	f7ef f965 	bl	93c <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   11672:	4b05      	ldr	r3, [pc, #20]	; (11688 <k_sched_time_slice_set+0x70>)
   11674:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   11676:	2c00      	cmp	r4, #0
   11678:	dcdb      	bgt.n	11632 <k_sched_time_slice_set+0x1a>
   1167a:	e7de      	b.n	1163a <k_sched_time_slice_set+0x22>
}
   1167c:	bd70      	pop	{r4, r5, r6, pc}
   1167e:	bf00      	nop
   11680:	200037c0 	.word	0x200037c0
   11684:	2000378c 	.word	0x2000378c
   11688:	200037c4 	.word	0x200037c4

0001168c <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   1168c:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
   1168e:	460b      	mov	r3, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   11690:	b959      	cbnz	r1, 116aa <z_reschedule+0x1e>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   11692:	f3ef 8205 	mrs	r2, IPSR
   11696:	b942      	cbnz	r2, 116aa <z_reschedule+0x1e>
	new_thread = _kernel.ready_q.cache;
   11698:	4a06      	ldr	r2, [pc, #24]	; (116b4 <z_reschedule+0x28>)
   1169a:	69d0      	ldr	r0, [r2, #28]
	return new_thread != _current;
   1169c:	6892      	ldr	r2, [r2, #8]
	if (resched(key.key) && need_swap()) {
   1169e:	4290      	cmp	r0, r2
   116a0:	d003      	beq.n	116aa <z_reschedule+0x1e>
	ret = arch_swap(key);
   116a2:	4608      	mov	r0, r1
   116a4:	f7f3 fc96 	bl	4fd4 <arch_swap>
		z_swap(lock, key);
   116a8:	e003      	b.n	116b2 <z_reschedule+0x26>
   116aa:	f383 8811 	msr	BASEPRI, r3
   116ae:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   116b2:	bd08      	pop	{r3, pc}
   116b4:	2000378c 	.word	0x2000378c

000116b8 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
   116b8:	2300      	movs	r3, #0
	__asm__ volatile(
   116ba:	f04f 0220 	mov.w	r2, #32
   116be:	f3ef 8111 	mrs	r1, BASEPRI
   116c2:	f382 8812 	msr	BASEPRI_MAX, r2
   116c6:	f3bf 8f6f 	isb	sy
   116ca:	e009      	b.n	116e0 <k_sched_lock+0x28>
	--_current->base.sched_locked;
   116cc:	4b06      	ldr	r3, [pc, #24]	; (116e8 <k_sched_lock+0x30>)
   116ce:	689a      	ldr	r2, [r3, #8]
   116d0:	7bd3      	ldrb	r3, [r2, #15]
   116d2:	3b01      	subs	r3, #1
   116d4:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   116d6:	f381 8811 	msr	BASEPRI, r1
   116da:	f3bf 8f6f 	isb	sy
   116de:	2301      	movs	r3, #1
   116e0:	2b00      	cmp	r3, #0
   116e2:	d0f3      	beq.n	116cc <k_sched_lock+0x14>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   116e4:	4770      	bx	lr
   116e6:	bf00      	nop
   116e8:	2000378c 	.word	0x2000378c

000116ec <update_cache>:
{
   116ec:	b538      	push	{r3, r4, r5, lr}
   116ee:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
   116f0:	4810      	ldr	r0, [pc, #64]	; (11734 <update_cache+0x48>)
   116f2:	f00d ff52 	bl	1f59a <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   116f6:	4605      	mov	r5, r0
   116f8:	b170      	cbz	r0, 11718 <update_cache+0x2c>
	if (preempt_ok != 0) {
   116fa:	b984      	cbnz	r4, 1171e <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
   116fc:	4b0e      	ldr	r3, [pc, #56]	; (11738 <update_cache+0x4c>)
   116fe:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
   11700:	7b5a      	ldrb	r2, [r3, #13]
   11702:	f012 0f1f 	tst.w	r2, #31
   11706:	d10a      	bne.n	1171e <update_cache+0x32>
	return node->next != NULL;
   11708:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1170a:	b942      	cbnz	r2, 1171e <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   1170c:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
   1170e:	2a7f      	cmp	r2, #127	; 0x7f
   11710:	d905      	bls.n	1171e <update_cache+0x32>
		_kernel.ready_q.cache = _current;
   11712:	4a09      	ldr	r2, [pc, #36]	; (11738 <update_cache+0x4c>)
   11714:	61d3      	str	r3, [r2, #28]
   11716:	e00b      	b.n	11730 <update_cache+0x44>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   11718:	4b07      	ldr	r3, [pc, #28]	; (11738 <update_cache+0x4c>)
   1171a:	68dd      	ldr	r5, [r3, #12]
   1171c:	e7ed      	b.n	116fa <update_cache+0xe>
		if (thread != _current) {
   1171e:	4b06      	ldr	r3, [pc, #24]	; (11738 <update_cache+0x4c>)
   11720:	689b      	ldr	r3, [r3, #8]
   11722:	42ab      	cmp	r3, r5
   11724:	d002      	beq.n	1172c <update_cache+0x40>
			z_reset_time_slice(thread);
   11726:	4628      	mov	r0, r5
   11728:	f7ff ff62 	bl	115f0 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1172c:	4b02      	ldr	r3, [pc, #8]	; (11738 <update_cache+0x4c>)
   1172e:	61dd      	str	r5, [r3, #28]
}
   11730:	bd38      	pop	{r3, r4, r5, pc}
   11732:	bf00      	nop
   11734:	200037ac 	.word	0x200037ac
   11738:	2000378c 	.word	0x2000378c

0001173c <move_thread_to_end_of_prio_q>:
{
   1173c:	b538      	push	{r3, r4, r5, lr}
   1173e:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
   11740:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   11742:	f990 300d 	ldrsb.w	r3, [r0, #13]
   11746:	2b00      	cmp	r3, #0
   11748:	db0a      	blt.n	11760 <move_thread_to_end_of_prio_q+0x24>
	thread->base.thread_state |= _THREAD_QUEUED;
   1174a:	7b6b      	ldrb	r3, [r5, #13]
   1174c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   11750:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   11752:	4b1b      	ldr	r3, [pc, #108]	; (117c0 <move_thread_to_end_of_prio_q+0x84>)
   11754:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11758:	429c      	cmp	r4, r3
   1175a:	d110      	bne.n	1177e <move_thread_to_end_of_prio_q+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1175c:	2400      	movs	r4, #0
   1175e:	e00e      	b.n	1177e <move_thread_to_end_of_prio_q+0x42>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   11760:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   11764:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   11766:	4601      	mov	r1, r0
   11768:	4816      	ldr	r0, [pc, #88]	; (117c4 <move_thread_to_end_of_prio_q+0x88>)
   1176a:	f00d fee5 	bl	1f538 <z_priq_dumb_remove>
}
   1176e:	e7ec      	b.n	1174a <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   11770:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
   11772:	606b      	str	r3, [r5, #4]
	node->next = successor;
   11774:	602c      	str	r4, [r5, #0]
	prev->next = node;
   11776:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   11778:	6065      	str	r5, [r4, #4]
}
   1177a:	e017      	b.n	117ac <move_thread_to_end_of_prio_q+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1177c:	2400      	movs	r4, #0
   1177e:	b16c      	cbz	r4, 1179c <move_thread_to_end_of_prio_q+0x60>
		if (z_sched_prio_cmp(thread, t) > 0) {
   11780:	4621      	mov	r1, r4
   11782:	4628      	mov	r0, r5
   11784:	f00d fe9d 	bl	1f4c2 <z_sched_prio_cmp>
   11788:	2800      	cmp	r0, #0
   1178a:	dcf1      	bgt.n	11770 <move_thread_to_end_of_prio_q+0x34>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1178c:	2c00      	cmp	r4, #0
   1178e:	d0f6      	beq.n	1177e <move_thread_to_end_of_prio_q+0x42>
	return (node == list->tail) ? NULL : node->next;
   11790:	4b0b      	ldr	r3, [pc, #44]	; (117c0 <move_thread_to_end_of_prio_q+0x84>)
   11792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   11794:	429c      	cmp	r4, r3
   11796:	d0f1      	beq.n	1177c <move_thread_to_end_of_prio_q+0x40>
   11798:	6824      	ldr	r4, [r4, #0]
   1179a:	e7f0      	b.n	1177e <move_thread_to_end_of_prio_q+0x42>
	sys_dnode_t *const tail = list->tail;
   1179c:	4b08      	ldr	r3, [pc, #32]	; (117c0 <move_thread_to_end_of_prio_q+0x84>)
   1179e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   117a0:	f103 0120 	add.w	r1, r3, #32
   117a4:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   117a6:	606a      	str	r2, [r5, #4]
	tail->next = node;
   117a8:	6015      	str	r5, [r2, #0]
	list->tail = node;
   117aa:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
   117ac:	4b04      	ldr	r3, [pc, #16]	; (117c0 <move_thread_to_end_of_prio_q+0x84>)
   117ae:	6898      	ldr	r0, [r3, #8]
   117b0:	42a8      	cmp	r0, r5
   117b2:	bf14      	ite	ne
   117b4:	2000      	movne	r0, #0
   117b6:	2001      	moveq	r0, #1
   117b8:	f7ff ff98 	bl	116ec <update_cache>
}
   117bc:	bd38      	pop	{r3, r4, r5, pc}
   117be:	bf00      	nop
   117c0:	2000378c 	.word	0x2000378c
   117c4:	200037ac 	.word	0x200037ac

000117c8 <slice_expired_locked>:
{
   117c8:	b538      	push	{r3, r4, r5, lr}
   117ca:	4604      	mov	r4, r0
	struct k_thread *curr = _current;
   117cc:	4b07      	ldr	r3, [pc, #28]	; (117ec <slice_expired_locked+0x24>)
   117ce:	689d      	ldr	r5, [r3, #8]
	uint8_t state = thread->base.thread_state;
   117d0:	7b6b      	ldrb	r3, [r5, #13]
	if (!z_is_thread_prevented_from_running(curr)) {
   117d2:	f013 0f1f 	tst.w	r3, #31
   117d6:	d004      	beq.n	117e2 <slice_expired_locked+0x1a>
	z_reset_time_slice(curr);
   117d8:	4628      	mov	r0, r5
   117da:	f7ff ff09 	bl	115f0 <z_reset_time_slice>
}
   117de:	4620      	mov	r0, r4
   117e0:	bd38      	pop	{r3, r4, r5, pc}
		move_thread_to_end_of_prio_q(curr);
   117e2:	4628      	mov	r0, r5
   117e4:	f7ff ffaa 	bl	1173c <move_thread_to_end_of_prio_q>
   117e8:	e7f6      	b.n	117d8 <slice_expired_locked+0x10>
   117ea:	bf00      	nop
   117ec:	2000378c 	.word	0x2000378c

000117f0 <z_time_slice>:
{
   117f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   117f2:	4605      	mov	r5, r0
	__asm__ volatile(
   117f4:	f04f 0320 	mov.w	r3, #32
   117f8:	f3ef 8611 	mrs	r6, BASEPRI
   117fc:	f383 8812 	msr	BASEPRI_MAX, r3
   11800:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   11804:	4b15      	ldr	r3, [pc, #84]	; (1185c <z_time_slice+0x6c>)
   11806:	6898      	ldr	r0, [r3, #8]
   11808:	4b15      	ldr	r3, [pc, #84]	; (11860 <z_time_slice+0x70>)
   1180a:	681b      	ldr	r3, [r3, #0]
   1180c:	4298      	cmp	r0, r3
   1180e:	d011      	beq.n	11834 <z_time_slice+0x44>
   11810:	4634      	mov	r4, r6
	pending_current = NULL;
   11812:	4b13      	ldr	r3, [pc, #76]	; (11860 <z_time_slice+0x70>)
   11814:	2200      	movs	r2, #0
   11816:	601a      	str	r2, [r3, #0]
	int ret = slice_ticks;
   11818:	4b12      	ldr	r3, [pc, #72]	; (11864 <z_time_slice+0x74>)
   1181a:	681b      	ldr	r3, [r3, #0]
	if (slice_time(_current) && sliceable(_current)) {
   1181c:	b1b3      	cbz	r3, 1184c <z_time_slice+0x5c>
   1181e:	f7ff feb9 	bl	11594 <sliceable>
   11822:	b198      	cbz	r0, 1184c <z_time_slice+0x5c>
		if (ticks >= _current_cpu->slice_ticks) {
   11824:	4b0d      	ldr	r3, [pc, #52]	; (1185c <z_time_slice+0x6c>)
   11826:	691b      	ldr	r3, [r3, #16]
   11828:	42ab      	cmp	r3, r5
   1182a:	dd0a      	ble.n	11842 <z_time_slice+0x52>
			_current_cpu->slice_ticks -= ticks;
   1182c:	1b5b      	subs	r3, r3, r5
   1182e:	4a0b      	ldr	r2, [pc, #44]	; (1185c <z_time_slice+0x6c>)
   11830:	6113      	str	r3, [r2, #16]
   11832:	e00e      	b.n	11852 <z_time_slice+0x62>
		z_reset_time_slice(_current);
   11834:	f7ff fedc 	bl	115f0 <z_reset_time_slice>
	__asm__ volatile(
   11838:	f386 8811 	msr	BASEPRI, r6
   1183c:	f3bf 8f6f 	isb	sy
		return;
   11840:	e00b      	b.n	1185a <z_time_slice+0x6a>
			key = slice_expired_locked(key);
   11842:	4630      	mov	r0, r6
   11844:	f7ff ffc0 	bl	117c8 <slice_expired_locked>
   11848:	4604      	mov	r4, r0
   1184a:	e002      	b.n	11852 <z_time_slice+0x62>
		_current_cpu->slice_ticks = 0;
   1184c:	4b03      	ldr	r3, [pc, #12]	; (1185c <z_time_slice+0x6c>)
   1184e:	2200      	movs	r2, #0
   11850:	611a      	str	r2, [r3, #16]
   11852:	f384 8811 	msr	BASEPRI, r4
   11856:	f3bf 8f6f 	isb	sy
}
   1185a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1185c:	2000378c 	.word	0x2000378c
   11860:	200037bc 	.word	0x200037bc
   11864:	200037c4 	.word	0x200037c4

00011868 <ready_thread>:
	return (thread->base.thread_state & state) != 0U;
   11868:	7b42      	ldrb	r2, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1186a:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1186e:	2b00      	cmp	r3, #0
   11870:	db33      	blt.n	118da <ready_thread+0x72>
{
   11872:	b570      	push	{r4, r5, r6, lr}
   11874:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   11876:	f012 0f1f 	tst.w	r2, #31
   1187a:	d101      	bne.n	11880 <ready_thread+0x18>
	return node->next != NULL;
   1187c:	6986      	ldr	r6, [r0, #24]
   1187e:	b106      	cbz	r6, 11882 <ready_thread+0x1a>
}
   11880:	bd70      	pop	{r4, r5, r6, pc}
	thread->base.thread_state |= _THREAD_QUEUED;
   11882:	f062 027f 	orn	r2, r2, #127	; 0x7f
   11886:	7342      	strb	r2, [r0, #13]
	return list->head == list;
   11888:	4b14      	ldr	r3, [pc, #80]	; (118dc <ready_thread+0x74>)
   1188a:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1188e:	429d      	cmp	r5, r3
   11890:	d108      	bne.n	118a4 <ready_thread+0x3c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   11892:	4635      	mov	r5, r6
   11894:	e006      	b.n	118a4 <ready_thread+0x3c>
	sys_dnode_t *const prev = successor->prev;
   11896:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   11898:	6063      	str	r3, [r4, #4]
	node->next = successor;
   1189a:	6025      	str	r5, [r4, #0]
	prev->next = node;
   1189c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1189e:	606c      	str	r4, [r5, #4]
}
   118a0:	e017      	b.n	118d2 <ready_thread+0x6a>
   118a2:	4635      	mov	r5, r6
   118a4:	b16d      	cbz	r5, 118c2 <ready_thread+0x5a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   118a6:	4629      	mov	r1, r5
   118a8:	4620      	mov	r0, r4
   118aa:	f00d fe0a 	bl	1f4c2 <z_sched_prio_cmp>
   118ae:	2800      	cmp	r0, #0
   118b0:	dcf1      	bgt.n	11896 <ready_thread+0x2e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   118b2:	2d00      	cmp	r5, #0
   118b4:	d0f6      	beq.n	118a4 <ready_thread+0x3c>
	return (node == list->tail) ? NULL : node->next;
   118b6:	4b09      	ldr	r3, [pc, #36]	; (118dc <ready_thread+0x74>)
   118b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   118ba:	429d      	cmp	r5, r3
   118bc:	d0f1      	beq.n	118a2 <ready_thread+0x3a>
   118be:	682d      	ldr	r5, [r5, #0]
   118c0:	e7f0      	b.n	118a4 <ready_thread+0x3c>
	sys_dnode_t *const tail = list->tail;
   118c2:	4b06      	ldr	r3, [pc, #24]	; (118dc <ready_thread+0x74>)
   118c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   118c6:	f103 0120 	add.w	r1, r3, #32
   118ca:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   118cc:	6062      	str	r2, [r4, #4]
	tail->next = node;
   118ce:	6014      	str	r4, [r2, #0]
	list->tail = node;
   118d0:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
   118d2:	2000      	movs	r0, #0
   118d4:	f7ff ff0a 	bl	116ec <update_cache>
}
   118d8:	e7d2      	b.n	11880 <ready_thread+0x18>
   118da:	4770      	bx	lr
   118dc:	2000378c 	.word	0x2000378c

000118e0 <z_sched_start>:
{
   118e0:	b510      	push	{r4, lr}
	__asm__ volatile(
   118e2:	f04f 0320 	mov.w	r3, #32
   118e6:	f3ef 8411 	mrs	r4, BASEPRI
   118ea:	f383 8812 	msr	BASEPRI_MAX, r3
   118ee:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   118f2:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
   118f4:	f013 0f04 	tst.w	r3, #4
   118f8:	d104      	bne.n	11904 <z_sched_start+0x24>
	__asm__ volatile(
   118fa:	f384 8811 	msr	BASEPRI, r4
   118fe:	f3bf 8f6f 	isb	sy
}
   11902:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   11904:	f023 0304 	bic.w	r3, r3, #4
   11908:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
   1190a:	f7ff ffad 	bl	11868 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1190e:	4621      	mov	r1, r4
   11910:	4801      	ldr	r0, [pc, #4]	; (11918 <z_sched_start+0x38>)
   11912:	f7ff febb 	bl	1168c <z_reschedule>
   11916:	e7f4      	b.n	11902 <z_sched_start+0x22>
   11918:	200037c8 	.word	0x200037c8

0001191c <unready_thread>:
{
   1191c:	b510      	push	{r4, lr}
   1191e:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
   11920:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   11922:	f990 300d 	ldrsb.w	r3, [r0, #13]
   11926:	2b00      	cmp	r3, #0
   11928:	db08      	blt.n	1193c <unready_thread+0x20>
	update_cache(thread == _current);
   1192a:	4b08      	ldr	r3, [pc, #32]	; (1194c <unready_thread+0x30>)
   1192c:	6898      	ldr	r0, [r3, #8]
   1192e:	42a0      	cmp	r0, r4
   11930:	bf14      	ite	ne
   11932:	2000      	movne	r0, #0
   11934:	2001      	moveq	r0, #1
   11936:	f7ff fed9 	bl	116ec <update_cache>
}
   1193a:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1193c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   11940:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   11942:	4601      	mov	r1, r0
   11944:	4802      	ldr	r0, [pc, #8]	; (11950 <unready_thread+0x34>)
   11946:	f00d fdf7 	bl	1f538 <z_priq_dumb_remove>
}
   1194a:	e7ee      	b.n	1192a <unready_thread+0xe>
   1194c:	2000378c 	.word	0x2000378c
   11950:	200037ac 	.word	0x200037ac

00011954 <z_pend_curr>:
{
   11954:	b510      	push	{r4, lr}
   11956:	460c      	mov	r4, r1
   11958:	4611      	mov	r1, r2
	pending_current = _current;
   1195a:	480a      	ldr	r0, [pc, #40]	; (11984 <z_pend_curr+0x30>)
   1195c:	6882      	ldr	r2, [r0, #8]
   1195e:	4b0a      	ldr	r3, [pc, #40]	; (11988 <z_pend_curr+0x34>)
   11960:	601a      	str	r2, [r3, #0]
	__asm__ volatile(
   11962:	f04f 0220 	mov.w	r2, #32
   11966:	f3ef 8311 	mrs	r3, BASEPRI
   1196a:	f382 8812 	msr	BASEPRI_MAX, r2
   1196e:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
   11972:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   11976:	6880      	ldr	r0, [r0, #8]
   11978:	f00d fea0 	bl	1f6bc <pend_locked>
   1197c:	4620      	mov	r0, r4
   1197e:	f7f3 fb29 	bl	4fd4 <arch_swap>
}
   11982:	bd10      	pop	{r4, pc}
   11984:	2000378c 	.word	0x2000378c
   11988:	200037bc 	.word	0x200037bc

0001198c <z_set_prio>:
{
   1198c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11990:	4605      	mov	r5, r0
   11992:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
   11994:	2300      	movs	r3, #0
   11996:	f04f 0220 	mov.w	r2, #32
   1199a:	f3ef 8611 	mrs	r6, BASEPRI
   1199e:	f382 8812 	msr	BASEPRI_MAX, r2
   119a2:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
   119a6:	4618      	mov	r0, r3
   119a8:	e029      	b.n	119fe <z_set_prio+0x72>
	sys_dnode_t *const prev = successor->prev;
   119aa:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   119ac:	606b      	str	r3, [r5, #4]
	node->next = successor;
   119ae:	602c      	str	r4, [r5, #0]
	prev->next = node;
   119b0:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   119b2:	6065      	str	r5, [r4, #4]
}
   119b4:	e017      	b.n	119e6 <z_set_prio+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   119b6:	4644      	mov	r4, r8
   119b8:	b16c      	cbz	r4, 119d6 <z_set_prio+0x4a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   119ba:	4621      	mov	r1, r4
   119bc:	4628      	mov	r0, r5
   119be:	f00d fd80 	bl	1f4c2 <z_sched_prio_cmp>
   119c2:	2800      	cmp	r0, #0
   119c4:	dcf1      	bgt.n	119aa <z_set_prio+0x1e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   119c6:	2c00      	cmp	r4, #0
   119c8:	d0f6      	beq.n	119b8 <z_set_prio+0x2c>
	return (node == list->tail) ? NULL : node->next;
   119ca:	4b1d      	ldr	r3, [pc, #116]	; (11a40 <z_set_prio+0xb4>)
   119cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   119ce:	429c      	cmp	r4, r3
   119d0:	d0f1      	beq.n	119b6 <z_set_prio+0x2a>
   119d2:	6824      	ldr	r4, [r4, #0]
   119d4:	e7f0      	b.n	119b8 <z_set_prio+0x2c>
	sys_dnode_t *const tail = list->tail;
   119d6:	4b1a      	ldr	r3, [pc, #104]	; (11a40 <z_set_prio+0xb4>)
   119d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   119da:	f103 0120 	add.w	r1, r3, #32
   119de:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   119e0:	606a      	str	r2, [r5, #4]
	tail->next = node;
   119e2:	6015      	str	r5, [r2, #0]
	list->tail = node;
   119e4:	625d      	str	r5, [r3, #36]	; 0x24
			update_cache(1);
   119e6:	2001      	movs	r0, #1
   119e8:	f7ff fe80 	bl	116ec <update_cache>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   119ec:	2001      	movs	r0, #1
   119ee:	e001      	b.n	119f4 <z_set_prio+0x68>
			thread->base.prio = prio;
   119f0:	73af      	strb	r7, [r5, #14]
   119f2:	2000      	movs	r0, #0
	__asm__ volatile(
   119f4:	f386 8811 	msr	BASEPRI, r6
   119f8:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   119fc:	2301      	movs	r3, #1
   119fe:	b9e3      	cbnz	r3, 11a3a <z_set_prio+0xae>
	uint8_t state = thread->base.thread_state;
   11a00:	7b6b      	ldrb	r3, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   11a02:	f013 0f1f 	tst.w	r3, #31
   11a06:	d1f3      	bne.n	119f0 <z_set_prio+0x64>
	return node->next != NULL;
   11a08:	f8d5 8018 	ldr.w	r8, [r5, #24]
   11a0c:	f1b8 0f00 	cmp.w	r8, #0
   11a10:	d1ee      	bne.n	119f0 <z_set_prio+0x64>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   11a12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   11a16:	736b      	strb	r3, [r5, #13]
	_priq_run_remove(thread_runq(thread), thread);
   11a18:	f8df 9028 	ldr.w	r9, [pc, #40]	; 11a44 <z_set_prio+0xb8>
   11a1c:	4629      	mov	r1, r5
   11a1e:	4648      	mov	r0, r9
   11a20:	f00d fd8a 	bl	1f538 <z_priq_dumb_remove>
				thread->base.prio = prio;
   11a24:	73af      	strb	r7, [r5, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   11a26:	7b6b      	ldrb	r3, [r5, #13]
   11a28:	f063 037f 	orn	r3, r3, #127	; 0x7f
   11a2c:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   11a2e:	f8d9 4000 	ldr.w	r4, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11a32:	454c      	cmp	r4, r9
   11a34:	d1c0      	bne.n	119b8 <z_set_prio+0x2c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   11a36:	4644      	mov	r4, r8
   11a38:	e7be      	b.n	119b8 <z_set_prio+0x2c>
}
   11a3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11a3e:	bf00      	nop
   11a40:	2000378c 	.word	0x2000378c
   11a44:	200037ac 	.word	0x200037ac

00011a48 <z_impl_k_thread_suspend>:
{
   11a48:	b538      	push	{r3, r4, r5, lr}
   11a4a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   11a4c:	3018      	adds	r0, #24
   11a4e:	f00d fefc 	bl	1f84a <z_abort_timeout>
	LOCKED(&sched_spinlock) {
   11a52:	2300      	movs	r3, #0
	__asm__ volatile(
   11a54:	f04f 0220 	mov.w	r2, #32
   11a58:	f3ef 8511 	mrs	r5, BASEPRI
   11a5c:	f382 8812 	msr	BASEPRI_MAX, r2
   11a60:	f3bf 8f6f 	isb	sy
   11a64:	e010      	b.n	11a88 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
   11a66:	7b63      	ldrb	r3, [r4, #13]
   11a68:	f043 0310 	orr.w	r3, r3, #16
   11a6c:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   11a6e:	4b11      	ldr	r3, [pc, #68]	; (11ab4 <z_impl_k_thread_suspend+0x6c>)
   11a70:	6898      	ldr	r0, [r3, #8]
   11a72:	42a0      	cmp	r0, r4
   11a74:	bf14      	ite	ne
   11a76:	2000      	movne	r0, #0
   11a78:	2001      	moveq	r0, #1
   11a7a:	f7ff fe37 	bl	116ec <update_cache>
	__asm__ volatile(
   11a7e:	f385 8811 	msr	BASEPRI, r5
   11a82:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   11a86:	2301      	movs	r3, #1
   11a88:	b963      	cbnz	r3, 11aa4 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
   11a8a:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
   11a8c:	f994 300d 	ldrsb.w	r3, [r4, #13]
   11a90:	2b00      	cmp	r3, #0
   11a92:	dae8      	bge.n	11a66 <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   11a94:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   11a98:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   11a9a:	4621      	mov	r1, r4
   11a9c:	4806      	ldr	r0, [pc, #24]	; (11ab8 <z_impl_k_thread_suspend+0x70>)
   11a9e:	f00d fd4b 	bl	1f538 <z_priq_dumb_remove>
}
   11aa2:	e7e0      	b.n	11a66 <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
   11aa4:	4b03      	ldr	r3, [pc, #12]	; (11ab4 <z_impl_k_thread_suspend+0x6c>)
   11aa6:	689b      	ldr	r3, [r3, #8]
   11aa8:	42a3      	cmp	r3, r4
   11aaa:	d000      	beq.n	11aae <z_impl_k_thread_suspend+0x66>
}
   11aac:	bd38      	pop	{r3, r4, r5, pc}
		z_reschedule_unlocked();
   11aae:	f00d fd37 	bl	1f520 <z_reschedule_unlocked>
}
   11ab2:	e7fb      	b.n	11aac <z_impl_k_thread_suspend+0x64>
   11ab4:	2000378c 	.word	0x2000378c
   11ab8:	200037ac 	.word	0x200037ac

00011abc <k_sched_unlock>:

void k_sched_unlock(void)
{
   11abc:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
   11abe:	2300      	movs	r3, #0
	__asm__ volatile(
   11ac0:	f04f 0220 	mov.w	r2, #32
   11ac4:	f3ef 8411 	mrs	r4, BASEPRI
   11ac8:	f382 8812 	msr	BASEPRI_MAX, r2
   11acc:	f3bf 8f6f 	isb	sy
   11ad0:	e00c      	b.n	11aec <k_sched_unlock+0x30>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
   11ad2:	4b09      	ldr	r3, [pc, #36]	; (11af8 <k_sched_unlock+0x3c>)
   11ad4:	689a      	ldr	r2, [r3, #8]
   11ad6:	7bd3      	ldrb	r3, [r2, #15]
   11ad8:	3301      	adds	r3, #1
   11ada:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   11adc:	2000      	movs	r0, #0
   11ade:	f7ff fe05 	bl	116ec <update_cache>
	__asm__ volatile(
   11ae2:	f384 8811 	msr	BASEPRI, r4
   11ae6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   11aea:	2301      	movs	r3, #1
   11aec:	2b00      	cmp	r3, #0
   11aee:	d0f0      	beq.n	11ad2 <k_sched_unlock+0x16>
	LOG_DBG("scheduler unlocked (%p:%d)",
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
   11af0:	f00d fd16 	bl	1f520 <z_reschedule_unlocked>
}
   11af4:	bd10      	pop	{r4, pc}
   11af6:	bf00      	nop
   11af8:	2000378c 	.word	0x2000378c

00011afc <end_thread>:
static void end_thread(struct k_thread *thread)
{
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
   11afc:	7b43      	ldrb	r3, [r0, #13]
   11afe:	f013 0f08 	tst.w	r3, #8
   11b02:	d127      	bne.n	11b54 <end_thread+0x58>
{
   11b04:	b510      	push	{r4, lr}
   11b06:	4604      	mov	r4, r0
		thread->base.thread_state |= _THREAD_DEAD;
   11b08:	f043 0208 	orr.w	r2, r3, #8
   11b0c:	7342      	strb	r2, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
   11b0e:	f023 0220 	bic.w	r2, r3, #32
   11b12:	f042 0208 	orr.w	r2, r2, #8
   11b16:	7342      	strb	r2, [r0, #13]
		if (z_is_thread_queued(thread)) {
   11b18:	f012 0f80 	tst.w	r2, #128	; 0x80
   11b1c:	d110      	bne.n	11b40 <end_thread+0x44>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
   11b1e:	68a3      	ldr	r3, [r4, #8]
   11b20:	b113      	cbz	r3, 11b28 <end_thread+0x2c>
			unpend_thread_no_timeout(thread);
   11b22:	4620      	mov	r0, r4
   11b24:	f00d fd10 	bl	1f548 <unpend_thread_no_timeout>
   11b28:	f104 0018 	add.w	r0, r4, #24
   11b2c:	f00d fe8d 	bl	1f84a <z_abort_timeout>
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
   11b30:	f104 0058 	add.w	r0, r4, #88	; 0x58
   11b34:	f00d fd83 	bl	1f63e <unpend_all>
		update_cache(1);
   11b38:	2001      	movs	r0, #1
   11b3a:	f7ff fdd7 	bl	116ec <update_cache>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
   11b3e:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   11b40:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   11b44:	f043 0308 	orr.w	r3, r3, #8
   11b48:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   11b4a:	4601      	mov	r1, r0
   11b4c:	4802      	ldr	r0, [pc, #8]	; (11b58 <end_thread+0x5c>)
   11b4e:	f00d fcf3 	bl	1f538 <z_priq_dumb_remove>
}
   11b52:	e7e4      	b.n	11b1e <end_thread+0x22>
   11b54:	4770      	bx	lr
   11b56:	bf00      	nop
   11b58:	200037ac 	.word	0x200037ac

00011b5c <z_sched_init>:
{
   11b5c:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
   11b5e:	4804      	ldr	r0, [pc, #16]	; (11b70 <z_sched_init+0x14>)
   11b60:	f00d fe08 	bl	1f774 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   11b64:	2100      	movs	r1, #0
   11b66:	4608      	mov	r0, r1
   11b68:	f7ff fd56 	bl	11618 <k_sched_time_slice_set>
}
   11b6c:	bd08      	pop	{r3, pc}
   11b6e:	bf00      	nop
   11b70:	200037a8 	.word	0x200037a8

00011b74 <z_impl_k_yield>:
{
   11b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   11b76:	f04f 0320 	mov.w	r3, #32
   11b7a:	f3ef 8611 	mrs	r6, BASEPRI
   11b7e:	f383 8812 	msr	BASEPRI_MAX, r3
   11b82:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
   11b86:	4c1d      	ldr	r4, [pc, #116]	; (11bfc <z_impl_k_yield+0x88>)
   11b88:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   11b8a:	7b4b      	ldrb	r3, [r1, #13]
   11b8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   11b90:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   11b92:	f104 0720 	add.w	r7, r4, #32
   11b96:	4638      	mov	r0, r7
   11b98:	f00d fcce 	bl	1f538 <z_priq_dumb_remove>
	queue_thread(_current);
   11b9c:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   11b9e:	7b6b      	ldrb	r3, [r5, #13]
   11ba0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   11ba4:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   11ba6:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11ba8:	42bc      	cmp	r4, r7
   11baa:	d108      	bne.n	11bbe <z_impl_k_yield+0x4a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   11bac:	2400      	movs	r4, #0
   11bae:	e006      	b.n	11bbe <z_impl_k_yield+0x4a>
	sys_dnode_t *const prev = successor->prev;
   11bb0:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   11bb2:	606b      	str	r3, [r5, #4]
	node->next = successor;
   11bb4:	602c      	str	r4, [r5, #0]
	prev->next = node;
   11bb6:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   11bb8:	6065      	str	r5, [r4, #4]
}
   11bba:	e017      	b.n	11bec <z_impl_k_yield+0x78>
   11bbc:	2400      	movs	r4, #0
   11bbe:	b16c      	cbz	r4, 11bdc <z_impl_k_yield+0x68>
		if (z_sched_prio_cmp(thread, t) > 0) {
   11bc0:	4621      	mov	r1, r4
   11bc2:	4628      	mov	r0, r5
   11bc4:	f00d fc7d 	bl	1f4c2 <z_sched_prio_cmp>
   11bc8:	2800      	cmp	r0, #0
   11bca:	dcf1      	bgt.n	11bb0 <z_impl_k_yield+0x3c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   11bcc:	2c00      	cmp	r4, #0
   11bce:	d0f6      	beq.n	11bbe <z_impl_k_yield+0x4a>
	return (node == list->tail) ? NULL : node->next;
   11bd0:	4b0a      	ldr	r3, [pc, #40]	; (11bfc <z_impl_k_yield+0x88>)
   11bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   11bd4:	429c      	cmp	r4, r3
   11bd6:	d0f1      	beq.n	11bbc <z_impl_k_yield+0x48>
   11bd8:	6824      	ldr	r4, [r4, #0]
   11bda:	e7f0      	b.n	11bbe <z_impl_k_yield+0x4a>
	sys_dnode_t *const tail = list->tail;
   11bdc:	4b07      	ldr	r3, [pc, #28]	; (11bfc <z_impl_k_yield+0x88>)
   11bde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   11be0:	f103 0120 	add.w	r1, r3, #32
   11be4:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   11be6:	606a      	str	r2, [r5, #4]
	tail->next = node;
   11be8:	6015      	str	r5, [r2, #0]
	list->tail = node;
   11bea:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
   11bec:	2001      	movs	r0, #1
   11bee:	f7ff fd7d 	bl	116ec <update_cache>
   11bf2:	4630      	mov	r0, r6
   11bf4:	f7f3 f9ee 	bl	4fd4 <arch_swap>
}
   11bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11bfa:	bf00      	nop
   11bfc:	2000378c 	.word	0x2000378c

00011c00 <z_tick_sleep>:
{
   11c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (ticks == 0) {
   11c04:	ea50 0301 	orrs.w	r3, r0, r1
   11c08:	d038      	beq.n	11c7c <z_tick_sleep+0x7c>
   11c0a:	4604      	mov	r4, r0
   11c0c:	460e      	mov	r6, r1
	if (Z_TICK_ABS(ticks) <= 0) {
   11c0e:	f06f 0301 	mvn.w	r3, #1
   11c12:	1a1b      	subs	r3, r3, r0
   11c14:	f04f 32ff 	mov.w	r2, #4294967295
   11c18:	eb62 0201 	sbc.w	r2, r2, r1
   11c1c:	2b01      	cmp	r3, #1
   11c1e:	f172 0200 	sbcs.w	r2, r2, #0
   11c22:	db2f      	blt.n	11c84 <z_tick_sleep+0x84>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   11c24:	f06f 0501 	mvn.w	r5, #1
   11c28:	1a2d      	subs	r5, r5, r0
   11c2a:	f04f 0320 	mov.w	r3, #32
   11c2e:	f3ef 8811 	mrs	r8, BASEPRI
   11c32:	f383 8812 	msr	BASEPRI_MAX, r3
   11c36:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   11c3a:	4f14      	ldr	r7, [pc, #80]	; (11c8c <z_tick_sleep+0x8c>)
   11c3c:	68b8      	ldr	r0, [r7, #8]
   11c3e:	4b14      	ldr	r3, [pc, #80]	; (11c90 <z_tick_sleep+0x90>)
   11c40:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   11c42:	f7ff fe6b 	bl	1191c <unready_thread>
	z_add_thread_timeout(_current, timeout);
   11c46:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   11c48:	4622      	mov	r2, r4
   11c4a:	4633      	mov	r3, r6
   11c4c:	4911      	ldr	r1, [pc, #68]	; (11c94 <z_tick_sleep+0x94>)
   11c4e:	3018      	adds	r0, #24
   11c50:	f000 f946 	bl	11ee0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   11c54:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   11c56:	7b53      	ldrb	r3, [r2, #13]
   11c58:	f043 0310 	orr.w	r3, r3, #16
   11c5c:	7353      	strb	r3, [r2, #13]
   11c5e:	4640      	mov	r0, r8
   11c60:	f7f3 f9b8 	bl	4fd4 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   11c64:	f00d fe6a 	bl	1f93c <sys_clock_tick_get_32>
   11c68:	1a28      	subs	r0, r5, r0
   11c6a:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   11c6e:	2801      	cmp	r0, #1
   11c70:	f173 0300 	sbcs.w	r3, r3, #0
   11c74:	da00      	bge.n	11c78 <z_tick_sleep+0x78>
	return 0;
   11c76:	2000      	movs	r0, #0
}
   11c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
   11c7c:	f7ff ff7a 	bl	11b74 <z_impl_k_yield>
		return 0;
   11c80:	2000      	movs	r0, #0
   11c82:	e7f9      	b.n	11c78 <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   11c84:	f00d fe5a 	bl	1f93c <sys_clock_tick_get_32>
   11c88:	1905      	adds	r5, r0, r4
   11c8a:	e7ce      	b.n	11c2a <z_tick_sleep+0x2a>
   11c8c:	2000378c 	.word	0x2000378c
   11c90:	200037bc 	.word	0x200037bc
   11c94:	0001f5e1 	.word	0x0001f5e1

00011c98 <z_impl_k_sleep>:
{
   11c98:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   11c9a:	f1b1 3fff 	cmp.w	r1, #4294967295
   11c9e:	bf08      	it	eq
   11ca0:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   11ca4:	d018      	beq.n	11cd8 <z_impl_k_sleep+0x40>
	ticks = z_tick_sleep(ticks);
   11ca6:	f7ff ffab 	bl	11c00 <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
   11caa:	17c2      	asrs	r2, r0, #31
			return ((t * to_hz + off) / from_hz);
   11cac:	0151      	lsls	r1, r2, #5
   11cae:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
   11cb2:	0143      	lsls	r3, r0, #5
   11cb4:	1a1b      	subs	r3, r3, r0
   11cb6:	eb61 0102 	sbc.w	r1, r1, r2
   11cba:	0089      	lsls	r1, r1, #2
   11cbc:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
   11cc0:	009b      	lsls	r3, r3, #2
   11cc2:	181b      	adds	r3, r3, r0
   11cc4:	eb42 0201 	adc.w	r2, r2, r1
   11cc8:	00d2      	lsls	r2, r2, #3
   11cca:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
   11cce:	f3c3 3310 	ubfx	r3, r3, #12, #17
   11cd2:	ea43 4042 	orr.w	r0, r3, r2, lsl #17
}
   11cd6:	bd08      	pop	{r3, pc}
		k_thread_suspend(_current);
   11cd8:	4b03      	ldr	r3, [pc, #12]	; (11ce8 <z_impl_k_sleep+0x50>)
   11cda:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   11cdc:	f7ff feb4 	bl	11a48 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   11ce0:	f04f 30ff 	mov.w	r0, #4294967295
   11ce4:	e7f7      	b.n	11cd6 <z_impl_k_sleep+0x3e>
   11ce6:	bf00      	nop
   11ce8:	2000378c 	.word	0x2000378c

00011cec <z_impl_z_current_get>:
}
   11cec:	4b01      	ldr	r3, [pc, #4]	; (11cf4 <z_impl_z_current_get+0x8>)
   11cee:	6898      	ldr	r0, [r3, #8]
   11cf0:	4770      	bx	lr
   11cf2:	bf00      	nop
   11cf4:	2000378c 	.word	0x2000378c

00011cf8 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
   11cf8:	b570      	push	{r4, r5, r6, lr}
   11cfa:	f04f 0320 	mov.w	r3, #32
   11cfe:	f3ef 8511 	mrs	r5, BASEPRI
   11d02:	f383 8812 	msr	BASEPRI_MAX, r3
   11d06:	f3bf 8f6f 	isb	sy
   11d0a:	462e      	mov	r6, r5
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   11d0c:	7b03      	ldrb	r3, [r0, #12]
   11d0e:	f013 0f01 	tst.w	r3, #1
   11d12:	d109      	bne.n	11d28 <z_thread_abort+0x30>
   11d14:	4604      	mov	r4, r0
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
		return;
	}

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   11d16:	7b43      	ldrb	r3, [r0, #13]
   11d18:	f013 0f08 	tst.w	r3, #8
   11d1c:	d00f      	beq.n	11d3e <z_thread_abort+0x46>
	__asm__ volatile(
   11d1e:	f385 8811 	msr	BASEPRI, r5
   11d22:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		return;
   11d26:	e009      	b.n	11d3c <z_thread_abort+0x44>
   11d28:	f385 8811 	msr	BASEPRI, r5
   11d2c:	f3bf 8f6f 	isb	sy
		k_panic();
   11d30:	4040      	eors	r0, r0
   11d32:	f380 8811 	msr	BASEPRI, r0
   11d36:	f04f 0004 	mov.w	r0, #4
   11d3a:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   11d3c:	bd70      	pop	{r4, r5, r6, pc}
	end_thread(thread);
   11d3e:	f7ff fedd 	bl	11afc <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
   11d42:	4b08      	ldr	r3, [pc, #32]	; (11d64 <z_thread_abort+0x6c>)
   11d44:	689b      	ldr	r3, [r3, #8]
   11d46:	42a3      	cmp	r3, r4
   11d48:	d004      	beq.n	11d54 <z_thread_abort+0x5c>
   11d4a:	f386 8811 	msr	BASEPRI, r6
   11d4e:	f3bf 8f6f 	isb	sy
   11d52:	e7f3      	b.n	11d3c <z_thread_abort+0x44>
   11d54:	f3ef 8305 	mrs	r3, IPSR
   11d58:	2b00      	cmp	r3, #0
   11d5a:	d1f6      	bne.n	11d4a <z_thread_abort+0x52>
   11d5c:	4628      	mov	r0, r5
   11d5e:	f7f3 f939 	bl	4fd4 <arch_swap>
	return ret;
   11d62:	e7f2      	b.n	11d4a <z_thread_abort+0x52>
   11d64:	2000378c 	.word	0x2000378c

00011d68 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   11d68:	e92d 4810 	stmdb	sp!, {r4, fp, lr}
   11d6c:	b083      	sub	sp, #12
   11d6e:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   11d70:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
   11d74:	e9cd bc00 	strd	fp, ip, [sp]
   11d78:	f7ff fdec 	bl	11954 <z_pend_curr>

	if (data != NULL) {
   11d7c:	b11c      	cbz	r4, 11d86 <z_sched_wait+0x1e>
		*data = _current->base.swap_data;
   11d7e:	4b03      	ldr	r3, [pc, #12]	; (11d8c <z_sched_wait+0x24>)
   11d80:	689b      	ldr	r3, [r3, #8]
   11d82:	695b      	ldr	r3, [r3, #20]
   11d84:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   11d86:	b003      	add	sp, #12
   11d88:	e8bd 8810 	ldmia.w	sp!, {r4, fp, pc}
   11d8c:	2000378c 	.word	0x2000378c

00011d90 <z_impl_k_condvar_signal>:
}
#include <syscalls/k_condvar_init_mrsh.c>
#endif

int z_impl_k_condvar_signal(struct k_condvar *condvar)
{
   11d90:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   11d92:	f04f 0320 	mov.w	r3, #32
   11d96:	f3ef 8411 	mrs	r4, BASEPRI
   11d9a:	f383 8812 	msr	BASEPRI_MAX, r3
   11d9e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_condvar, signal, condvar);

	struct k_thread *thread = z_unpend_first_thread(&condvar->wait_q);
   11da2:	f00d fcb5 	bl	1f710 <z_unpend_first_thread>

	if (thread != NULL) {
   11da6:	b148      	cbz	r0, 11dbc <z_impl_k_condvar_signal+0x2c>
   11da8:	2200      	movs	r2, #0
   11daa:	67c2      	str	r2, [r0, #124]	; 0x7c
		SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_condvar, signal, condvar, K_FOREVER);

		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   11dac:	f00d fbfc 	bl	1f5a8 <z_ready_thread>
		z_reschedule(&lock, key);
   11db0:	4621      	mov	r1, r4
   11db2:	4805      	ldr	r0, [pc, #20]	; (11dc8 <z_impl_k_condvar_signal+0x38>)
   11db4:	f7ff fc6a 	bl	1168c <z_reschedule>
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_condvar, signal, condvar, 0);

	return 0;
}
   11db8:	2000      	movs	r0, #0
   11dba:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   11dbc:	f384 8811 	msr	BASEPRI, r4
   11dc0:	f3bf 8f6f 	isb	sy
   11dc4:	e7f8      	b.n	11db8 <z_impl_k_condvar_signal+0x28>
   11dc6:	bf00      	nop
   11dc8:	200037c8 	.word	0x200037c8

00011dcc <z_impl_k_condvar_wait>:
#include <syscalls/k_condvar_broadcast_mrsh.c>
#endif

int z_impl_k_condvar_wait(struct k_condvar *condvar, struct k_mutex *mutex,
			  k_timeout_t timeout)
{
   11dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11dd0:	b082      	sub	sp, #8
   11dd2:	4605      	mov	r5, r0
   11dd4:	460c      	mov	r4, r1
   11dd6:	4617      	mov	r7, r2
   11dd8:	461e      	mov	r6, r3
	__asm__ volatile(
   11dda:	f04f 0320 	mov.w	r3, #32
   11dde:	f3ef 8811 	mrs	r8, BASEPRI
   11de2:	f383 8812 	msr	BASEPRI_MAX, r3
   11de6:	f3bf 8f6f 	isb	sy
	return z_impl_k_mutex_unlock(mutex);
   11dea:	4608      	mov	r0, r1
   11dec:	f7ff f994 	bl	11118 <z_impl_k_mutex_unlock>
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_condvar, wait, condvar);

	key = k_spin_lock(&lock);
	k_mutex_unlock(mutex);

	ret = z_pend_curr(&lock, key, &condvar->wait_q, timeout);
   11df0:	9700      	str	r7, [sp, #0]
   11df2:	9601      	str	r6, [sp, #4]
   11df4:	462a      	mov	r2, r5
   11df6:	4641      	mov	r1, r8
   11df8:	4807      	ldr	r0, [pc, #28]	; (11e18 <z_impl_k_condvar_wait+0x4c>)
   11dfa:	f7ff fdab 	bl	11954 <z_pend_curr>
   11dfe:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   11e00:	f04f 32ff 	mov.w	r2, #4294967295
   11e04:	f04f 33ff 	mov.w	r3, #4294967295
   11e08:	4620      	mov	r0, r4
   11e0a:	f7ff f901 	bl	11010 <z_impl_k_mutex_lock>
	k_mutex_lock(mutex, K_FOREVER);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_condvar, wait, condvar, ret);

	return ret;
}
   11e0e:	4628      	mov	r0, r5
   11e10:	b002      	add	sp, #8
   11e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11e16:	bf00      	nop
   11e18:	200037c8 	.word	0x200037c8

00011e1c <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   11e1c:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   11e1e:	4806      	ldr	r0, [pc, #24]	; (11e38 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   11e20:	4a06      	ldr	r2, [pc, #24]	; (11e3c <z_data_copy+0x20>)
   11e22:	1a12      	subs	r2, r2, r0
   11e24:	4906      	ldr	r1, [pc, #24]	; (11e40 <z_data_copy+0x24>)
   11e26:	f00c ffcf 	bl	1edc8 <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   11e2a:	4a06      	ldr	r2, [pc, #24]	; (11e44 <z_data_copy+0x28>)
   11e2c:	4906      	ldr	r1, [pc, #24]	; (11e48 <z_data_copy+0x2c>)
   11e2e:	4807      	ldr	r0, [pc, #28]	; (11e4c <z_data_copy+0x30>)
   11e30:	f00c ffca 	bl	1edc8 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   11e34:	bd08      	pop	{r3, pc}
   11e36:	bf00      	nop
   11e38:	20000000 	.word	0x20000000
   11e3c:	200006b8 	.word	0x200006b8
   11e40:	00022a04 	.word	0x00022a04
   11e44:	00000000 	.word	0x00000000
   11e48:	00022a04 	.word	0x00022a04
   11e4c:	20000000 	.word	0x20000000

00011e50 <first>:
	return list->head == list;
   11e50:	4b03      	ldr	r3, [pc, #12]	; (11e60 <first+0x10>)
   11e52:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11e54:	4298      	cmp	r0, r3
   11e56:	d000      	beq.n	11e5a <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
   11e58:	4770      	bx	lr
   11e5a:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
   11e5c:	e7fc      	b.n	11e58 <first+0x8>
   11e5e:	bf00      	nop
   11e60:	20000128 	.word	0x20000128

00011e64 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   11e64:	b130      	cbz	r0, 11e74 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
   11e66:	4a04      	ldr	r2, [pc, #16]	; (11e78 <next+0x14>)
   11e68:	6852      	ldr	r2, [r2, #4]
   11e6a:	4290      	cmp	r0, r2
   11e6c:	d001      	beq.n	11e72 <next+0xe>
   11e6e:	6800      	ldr	r0, [r0, #0]
   11e70:	4770      	bx	lr
   11e72:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
   11e74:	4770      	bx	lr
   11e76:	bf00      	nop
   11e78:	20000128 	.word	0x20000128

00011e7c <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
   11e7c:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   11e7e:	4b04      	ldr	r3, [pc, #16]	; (11e90 <elapsed+0x14>)
   11e80:	681b      	ldr	r3, [r3, #0]
   11e82:	b10b      	cbz	r3, 11e88 <elapsed+0xc>
   11e84:	2000      	movs	r0, #0
}
   11e86:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   11e88:	f7fc fbbe 	bl	e608 <sys_clock_elapsed>
   11e8c:	e7fb      	b.n	11e86 <elapsed+0xa>
   11e8e:	bf00      	nop
   11e90:	200037c8 	.word	0x200037c8

00011e94 <next_timeout>:

static int32_t next_timeout(void)
{
   11e94:	b510      	push	{r4, lr}
	struct _timeout *to = first();
   11e96:	f7ff ffdb 	bl	11e50 <first>
   11e9a:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
   11e9c:	f7ff ffee 	bl	11e7c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
   11ea0:	b17c      	cbz	r4, 11ec2 <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   11ea2:	6923      	ldr	r3, [r4, #16]
   11ea4:	6962      	ldr	r2, [r4, #20]
   11ea6:	1a1b      	subs	r3, r3, r0
   11ea8:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   11eac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   11eb0:	f172 0100 	sbcs.w	r1, r2, #0
   11eb4:	da08      	bge.n	11ec8 <next_timeout+0x34>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
   11eb6:	2a00      	cmp	r2, #0
   11eb8:	db01      	blt.n	11ebe <next_timeout+0x2a>
   11eba:	4618      	mov	r0, r3
   11ebc:	e006      	b.n	11ecc <next_timeout+0x38>
   11ebe:	2300      	movs	r3, #0
   11ec0:	e7fb      	b.n	11eba <next_timeout+0x26>
		ret = MAX_WAIT;
   11ec2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   11ec6:	e001      	b.n	11ecc <next_timeout+0x38>
   11ec8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   11ecc:	4b03      	ldr	r3, [pc, #12]	; (11edc <next_timeout+0x48>)
   11ece:	691b      	ldr	r3, [r3, #16]
   11ed0:	b113      	cbz	r3, 11ed8 <next_timeout+0x44>
   11ed2:	4283      	cmp	r3, r0
   11ed4:	da00      	bge.n	11ed8 <next_timeout+0x44>
		ret = _current_cpu->slice_ticks;
   11ed6:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
   11ed8:	bd10      	pop	{r4, pc}
   11eda:	bf00      	nop
   11edc:	2000378c 	.word	0x2000378c

00011ee0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   11ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
   11ee4:	bf08      	it	eq
   11ee6:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   11eea:	d07b      	beq.n	11fe4 <z_add_timeout+0x104>
{
   11eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11ef0:	4604      	mov	r4, r0
   11ef2:	4692      	mov	sl, r2
   11ef4:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   11ef6:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
   11ef8:	2300      	movs	r3, #0
   11efa:	f04f 0220 	mov.w	r2, #32
   11efe:	f3ef 8711 	mrs	r7, BASEPRI
   11f02:	f382 8812 	msr	BASEPRI_MAX, r2
   11f06:	f3bf 8f6f 	isb	sy
   11f0a:	e026      	b.n	11f5a <z_add_timeout+0x7a>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   11f0c:	f11a 0801 	adds.w	r8, sl, #1
   11f10:	f145 0900 	adc.w	r9, r5, #0
   11f14:	f7ff ffb2 	bl	11e7c <elapsed>
   11f18:	eb18 0300 	adds.w	r3, r8, r0
   11f1c:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
   11f20:	6123      	str	r3, [r4, #16]
   11f22:	6160      	str	r0, [r4, #20]
   11f24:	e03b      	b.n	11f9e <z_add_timeout+0xbe>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
   11f26:	1a52      	subs	r2, r2, r1
   11f28:	eb66 0303 	sbc.w	r3, r6, r3
   11f2c:	6102      	str	r2, [r0, #16]
   11f2e:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
   11f30:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
   11f32:	6063      	str	r3, [r4, #4]
	node->next = successor;
   11f34:	6020      	str	r0, [r4, #0]
	prev->next = node;
   11f36:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   11f38:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
   11f3a:	e005      	b.n	11f48 <z_add_timeout+0x68>
	sys_dnode_t *const tail = list->tail;
   11f3c:	4b2a      	ldr	r3, [pc, #168]	; (11fe8 <z_add_timeout+0x108>)
   11f3e:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   11f40:	6023      	str	r3, [r4, #0]
	node->prev = tail;
   11f42:	6062      	str	r2, [r4, #4]
	tail->next = node;
   11f44:	6014      	str	r4, [r2, #0]
	list->tail = node;
   11f46:	605c      	str	r4, [r3, #4]
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   11f48:	f7ff ff82 	bl	11e50 <first>
   11f4c:	4284      	cmp	r4, r0
   11f4e:	d03a      	beq.n	11fc6 <z_add_timeout+0xe6>
	__asm__ volatile(
   11f50:	f387 8811 	msr	BASEPRI, r7
   11f54:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   11f58:	2301      	movs	r3, #1
   11f5a:	2b00      	cmp	r3, #0
   11f5c:	d140      	bne.n	11fe0 <z_add_timeout+0x100>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   11f5e:	4653      	mov	r3, sl
   11f60:	f06f 0101 	mvn.w	r1, #1
   11f64:	ebb1 010a 	subs.w	r1, r1, sl
   11f68:	f04f 30ff 	mov.w	r0, #4294967295
   11f6c:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   11f70:	2a00      	cmp	r2, #0
   11f72:	dbcb      	blt.n	11f0c <z_add_timeout+0x2c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   11f74:	4a1d      	ldr	r2, [pc, #116]	; (11fec <z_add_timeout+0x10c>)
   11f76:	6811      	ldr	r1, [r2, #0]
   11f78:	6852      	ldr	r2, [r2, #4]
   11f7a:	185b      	adds	r3, r3, r1
   11f7c:	eb42 0205 	adc.w	r2, r2, r5
   11f80:	f06f 0101 	mvn.w	r1, #1
   11f84:	1ac9      	subs	r1, r1, r3
   11f86:	eb60 0302 	sbc.w	r3, r0, r2
			to->dticks = MAX(1, ticks);
   11f8a:	4608      	mov	r0, r1
   11f8c:	461a      	mov	r2, r3
   11f8e:	2901      	cmp	r1, #1
   11f90:	f173 0300 	sbcs.w	r3, r3, #0
   11f94:	da01      	bge.n	11f9a <z_add_timeout+0xba>
   11f96:	2001      	movs	r0, #1
   11f98:	2200      	movs	r2, #0
   11f9a:	6120      	str	r0, [r4, #16]
   11f9c:	6162      	str	r2, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
   11f9e:	f7ff ff57 	bl	11e50 <first>
   11fa2:	2800      	cmp	r0, #0
   11fa4:	d0ca      	beq.n	11f3c <z_add_timeout+0x5c>
			if (t->dticks > to->dticks) {
   11fa6:	6902      	ldr	r2, [r0, #16]
   11fa8:	6946      	ldr	r6, [r0, #20]
   11faa:	6921      	ldr	r1, [r4, #16]
   11fac:	6963      	ldr	r3, [r4, #20]
   11fae:	4291      	cmp	r1, r2
   11fb0:	eb73 0e06 	sbcs.w	lr, r3, r6
   11fb4:	dbb7      	blt.n	11f26 <z_add_timeout+0x46>
			to->dticks -= t->dticks;
   11fb6:	1a89      	subs	r1, r1, r2
   11fb8:	eb63 0306 	sbc.w	r3, r3, r6
   11fbc:	6121      	str	r1, [r4, #16]
   11fbe:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
   11fc0:	f7ff ff50 	bl	11e64 <next>
   11fc4:	e7ed      	b.n	11fa2 <z_add_timeout+0xc2>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   11fc6:	f7ff ff65 	bl	11e94 <next_timeout>

			if (next_time == 0 ||
   11fca:	4603      	mov	r3, r0
   11fcc:	b118      	cbz	r0, 11fd6 <z_add_timeout+0xf6>
			    _current_cpu->slice_ticks != next_time) {
   11fce:	4a08      	ldr	r2, [pc, #32]	; (11ff0 <z_add_timeout+0x110>)
   11fd0:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
   11fd2:	4282      	cmp	r2, r0
   11fd4:	d0bc      	beq.n	11f50 <z_add_timeout+0x70>
				sys_clock_set_timeout(next_time, false);
   11fd6:	2100      	movs	r1, #0
   11fd8:	4618      	mov	r0, r3
   11fda:	f7fc fae3 	bl	e5a4 <sys_clock_set_timeout>
   11fde:	e7b7      	b.n	11f50 <z_add_timeout+0x70>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   11fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11fe4:	4770      	bx	lr
   11fe6:	bf00      	nop
   11fe8:	20000128 	.word	0x20000128
   11fec:	20001d90 	.word	0x20001d90
   11ff0:	2000378c 	.word	0x2000378c

00011ff4 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   11ff4:	b570      	push	{r4, r5, r6, lr}
   11ff6:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   11ff8:	f7ff fbfa 	bl	117f0 <z_time_slice>
	__asm__ volatile(
   11ffc:	f04f 0320 	mov.w	r3, #32
   12000:	f3ef 8611 	mrs	r6, BASEPRI
   12004:	f383 8812 	msr	BASEPRI_MAX, r3
   12008:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   1200c:	4b28      	ldr	r3, [pc, #160]	; (120b0 <sys_clock_announce+0xbc>)
   1200e:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   12010:	e021      	b.n	12056 <sys_clock_announce+0x62>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   12012:	4a28      	ldr	r2, [pc, #160]	; (120b4 <sys_clock_announce+0xc0>)
   12014:	6813      	ldr	r3, [r2, #0]
   12016:	6851      	ldr	r1, [r2, #4]
   12018:	195b      	adds	r3, r3, r5
   1201a:	eb41 71e5 	adc.w	r1, r1, r5, asr #31
   1201e:	6013      	str	r3, [r2, #0]
   12020:	6051      	str	r1, [r2, #4]
		t->dticks = 0;
   12022:	2200      	movs	r2, #0
   12024:	2300      	movs	r3, #0
   12026:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   1202a:	4620      	mov	r0, r4
   1202c:	f00d fbd8 	bl	1f7e0 <remove_timeout>
	__asm__ volatile(
   12030:	f386 8811 	msr	BASEPRI, r6
   12034:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
   12038:	68a3      	ldr	r3, [r4, #8]
   1203a:	4620      	mov	r0, r4
   1203c:	4798      	blx	r3
	__asm__ volatile(
   1203e:	f04f 0320 	mov.w	r3, #32
   12042:	f3ef 8611 	mrs	r6, BASEPRI
   12046:	f383 8812 	msr	BASEPRI_MAX, r3
   1204a:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
   1204e:	4a18      	ldr	r2, [pc, #96]	; (120b0 <sys_clock_announce+0xbc>)
   12050:	6813      	ldr	r3, [r2, #0]
   12052:	1b5b      	subs	r3, r3, r5
   12054:	6013      	str	r3, [r2, #0]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   12056:	f7ff fefb 	bl	11e50 <first>
   1205a:	4604      	mov	r4, r0
   1205c:	b138      	cbz	r0, 1206e <sys_clock_announce+0x7a>
   1205e:	6905      	ldr	r5, [r0, #16]
   12060:	6941      	ldr	r1, [r0, #20]
   12062:	4b13      	ldr	r3, [pc, #76]	; (120b0 <sys_clock_announce+0xbc>)
   12064:	681a      	ldr	r2, [r3, #0]
   12066:	17d3      	asrs	r3, r2, #31
   12068:	42aa      	cmp	r2, r5
   1206a:	418b      	sbcs	r3, r1
   1206c:	dad1      	bge.n	12012 <sys_clock_announce+0x1e>
	}

	if (first() != NULL) {
   1206e:	b144      	cbz	r4, 12082 <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
   12070:	6923      	ldr	r3, [r4, #16]
   12072:	6962      	ldr	r2, [r4, #20]
   12074:	490e      	ldr	r1, [pc, #56]	; (120b0 <sys_clock_announce+0xbc>)
   12076:	6809      	ldr	r1, [r1, #0]
   12078:	1a5b      	subs	r3, r3, r1
   1207a:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
   1207e:	6123      	str	r3, [r4, #16]
   12080:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
   12082:	4a0c      	ldr	r2, [pc, #48]	; (120b4 <sys_clock_announce+0xc0>)
   12084:	4d0a      	ldr	r5, [pc, #40]	; (120b0 <sys_clock_announce+0xbc>)
   12086:	6828      	ldr	r0, [r5, #0]
   12088:	6813      	ldr	r3, [r2, #0]
   1208a:	6851      	ldr	r1, [r2, #4]
   1208c:	181b      	adds	r3, r3, r0
   1208e:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
   12092:	6013      	str	r3, [r2, #0]
   12094:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
   12096:	2400      	movs	r4, #0
   12098:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
   1209a:	f7ff fefb 	bl	11e94 <next_timeout>
   1209e:	4621      	mov	r1, r4
   120a0:	f7fc fa80 	bl	e5a4 <sys_clock_set_timeout>
	__asm__ volatile(
   120a4:	f386 8811 	msr	BASEPRI, r6
   120a8:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   120ac:	bd70      	pop	{r4, r5, r6, pc}
   120ae:	bf00      	nop
   120b0:	200037c8 	.word	0x200037c8
   120b4:	20001d90 	.word	0x20001d90

000120b8 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   120b8:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
   120ba:	2200      	movs	r2, #0
	__asm__ volatile(
   120bc:	f04f 0320 	mov.w	r3, #32
   120c0:	f3ef 8411 	mrs	r4, BASEPRI
   120c4:	f383 8812 	msr	BASEPRI_MAX, r3
   120c8:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
   120cc:	4613      	mov	r3, r2
   120ce:	4611      	mov	r1, r2
   120d0:	e00c      	b.n	120ec <sys_clock_tick_get+0x34>
		t = curr_tick + elapsed();
   120d2:	f7ff fed3 	bl	11e7c <elapsed>
   120d6:	4a07      	ldr	r2, [pc, #28]	; (120f4 <sys_clock_tick_get+0x3c>)
   120d8:	6813      	ldr	r3, [r2, #0]
   120da:	6851      	ldr	r1, [r2, #4]
   120dc:	18c3      	adds	r3, r0, r3
   120de:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
	__asm__ volatile(
   120e2:	f384 8811 	msr	BASEPRI, r4
   120e6:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   120ea:	2201      	movs	r2, #1
   120ec:	2a00      	cmp	r2, #0
   120ee:	d0f0      	beq.n	120d2 <sys_clock_tick_get+0x1a>
	}
	return t;
}
   120f0:	4618      	mov	r0, r3
   120f2:	bd10      	pop	{r4, pc}
   120f4:	20001d90 	.word	0x20001d90

000120f8 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   120f8:	b538      	push	{r3, r4, r5, lr}
   120fa:	4604      	mov	r4, r0
	__asm__ volatile(
   120fc:	f04f 0320 	mov.w	r3, #32
   12100:	f3ef 8511 	mrs	r5, BASEPRI
   12104:	f383 8812 	msr	BASEPRI_MAX, r3
   12108:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1210c:	6a82      	ldr	r2, [r0, #40]	; 0x28
   1210e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   12110:	ea52 0103 	orrs.w	r1, r2, r3
   12114:	d005      	beq.n	12122 <z_timer_expiration_handler+0x2a>
   12116:	f1b3 3fff 	cmp.w	r3, #4294967295
   1211a:	bf08      	it	eq
   1211c:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   12120:	d127      	bne.n	12172 <z_timer_expiration_handler+0x7a>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   12122:	6b23      	ldr	r3, [r4, #48]	; 0x30
   12124:	3301      	adds	r3, #1
   12126:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   12128:	6a23      	ldr	r3, [r4, #32]
   1212a:	b173      	cbz	r3, 1214a <z_timer_expiration_handler+0x52>
	__asm__ volatile(
   1212c:	f385 8811 	msr	BASEPRI, r5
   12130:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   12134:	6a23      	ldr	r3, [r4, #32]
   12136:	4620      	mov	r0, r4
   12138:	4798      	blx	r3
	__asm__ volatile(
   1213a:	f04f 0320 	mov.w	r3, #32
   1213e:	f3ef 8511 	mrs	r5, BASEPRI
   12142:	f383 8812 	msr	BASEPRI_MAX, r3
   12146:	f3bf 8f6f 	isb	sy
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1214a:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
   1214e:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   12150:	42a3      	cmp	r3, r4
   12152:	d037      	beq.n	121c4 <z_timer_expiration_handler+0xcc>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   12154:	2c00      	cmp	r4, #0
   12156:	d035      	beq.n	121c4 <z_timer_expiration_handler+0xcc>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
   12158:	4620      	mov	r0, r4
   1215a:	f00d f9bc 	bl	1f4d6 <z_unpend_thread_no_timeout>
   1215e:	2300      	movs	r3, #0
   12160:	67e3      	str	r3, [r4, #124]	; 0x7c
	__asm__ volatile(
   12162:	f385 8811 	msr	BASEPRI, r5
   12166:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
   1216a:	4620      	mov	r0, r4
   1216c:	f00d fa1c 	bl	1f5a8 <z_ready_thread>
}
   12170:	bd38      	pop	{r3, r4, r5, pc}
	return z_impl_k_uptime_ticks();
   12172:	f00d fbe7 	bl	1f944 <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   12176:	3001      	adds	r0, #1
   12178:	f141 0100 	adc.w	r1, r1, #0
   1217c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1217e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   12180:	18c0      	adds	r0, r0, r3
   12182:	eb41 0102 	adc.w	r1, r1, r2
   12186:	2801      	cmp	r0, #1
   12188:	f171 0100 	sbcs.w	r1, r1, #0
   1218c:	da08      	bge.n	121a0 <z_timer_expiration_handler+0xa8>
   1218e:	f06f 0201 	mvn.w	r2, #1
   12192:	f04f 33ff 	mov.w	r3, #4294967295
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   12196:	490e      	ldr	r1, [pc, #56]	; (121d0 <z_timer_expiration_handler+0xd8>)
   12198:	4620      	mov	r0, r4
   1219a:	f7ff fea1 	bl	11ee0 <z_add_timeout>
   1219e:	e7c0      	b.n	12122 <z_timer_expiration_handler+0x2a>
   121a0:	f00d fbd0 	bl	1f944 <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   121a4:	3001      	adds	r0, #1
   121a6:	f141 0300 	adc.w	r3, r1, #0
   121aa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   121ac:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   121ae:	1880      	adds	r0, r0, r2
   121b0:	eb43 0301 	adc.w	r3, r3, r1
   121b4:	f06f 0201 	mvn.w	r2, #1
   121b8:	1a12      	subs	r2, r2, r0
   121ba:	f04f 31ff 	mov.w	r1, #4294967295
   121be:	eb61 0303 	sbc.w	r3, r1, r3
   121c2:	e7e8      	b.n	12196 <z_timer_expiration_handler+0x9e>
   121c4:	f385 8811 	msr	BASEPRI, r5
   121c8:	f3bf 8f6f 	isb	sy
		return;
   121cc:	e7d0      	b.n	12170 <z_timer_expiration_handler+0x78>
   121ce:	bf00      	nop
   121d0:	000120f9 	.word	0x000120f9

000121d4 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   121d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   121d8:	461e      	mov	r6, r3
   121da:	9f06      	ldr	r7, [sp, #24]
   121dc:	f8dd 801c 	ldr.w	r8, [sp, #28]
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   121e0:	f1b3 3fff 	cmp.w	r3, #4294967295
   121e4:	bf08      	it	eq
   121e6:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   121ea:	d02f      	beq.n	1224c <z_impl_k_timer_start+0x78>
   121ec:	4605      	mov	r5, r0
   121ee:	4614      	mov	r4, r2
   121f0:	4613      	mov	r3, r2
   121f2:	4631      	mov	r1, r6
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   121f4:	4640      	mov	r0, r8
   121f6:	f1b8 3fff 	cmp.w	r8, #4294967295
   121fa:	bf08      	it	eq
   121fc:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   12200:	d00d      	beq.n	1221e <z_impl_k_timer_start+0x4a>
   12202:	ea57 0c08 	orrs.w	ip, r7, r8
   12206:	d00a      	beq.n	1221e <z_impl_k_timer_start+0x4a>
	    Z_TICK_ABS(period.ticks) < 0) {
   12208:	f06f 0c01 	mvn.w	ip, #1
   1220c:	ebbc 0c07 	subs.w	ip, ip, r7
   12210:	f04f 3cff 	mov.w	ip, #4294967295
   12214:	eb6c 0c08 	sbc.w	ip, ip, r8
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   12218:	f1bc 0f00 	cmp.w	ip, #0
   1221c:	db18      	blt.n	12250 <z_impl_k_timer_start+0x7c>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   1221e:	f06f 0201 	mvn.w	r2, #1
   12222:	1ad2      	subs	r2, r2, r3
   12224:	f04f 32ff 	mov.w	r2, #4294967295
   12228:	eb62 0201 	sbc.w	r2, r2, r1
   1222c:	2a00      	cmp	r2, #0
   1222e:	db1a      	blt.n	12266 <z_impl_k_timer_start+0x92>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
   12230:	4628      	mov	r0, r5
   12232:	f00d fb0a 	bl	1f84a <z_abort_timeout>
	timer->period = period;
   12236:	62af      	str	r7, [r5, #40]	; 0x28
   12238:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
	timer->status = 0U;
   1223c:	2300      	movs	r3, #0
   1223e:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   12240:	4622      	mov	r2, r4
   12242:	4633      	mov	r3, r6
   12244:	490e      	ldr	r1, [pc, #56]	; (12280 <z_impl_k_timer_start+0xac>)
   12246:	4628      	mov	r0, r5
   12248:	f7ff fe4a 	bl	11ee0 <z_add_timeout>
		     duration);
}
   1224c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		period.ticks = MAX(period.ticks - 1, 1);
   12250:	2f02      	cmp	r7, #2
   12252:	f170 0000 	sbcs.w	r0, r0, #0
   12256:	da02      	bge.n	1225e <z_impl_k_timer_start+0x8a>
   12258:	2702      	movs	r7, #2
   1225a:	f04f 0800 	mov.w	r8, #0
   1225e:	3f01      	subs	r7, #1
   12260:	f148 38ff 	adc.w	r8, r8, #4294967295
   12264:	e7db      	b.n	1221e <z_impl_k_timer_start+0x4a>
		duration.ticks = MAX(duration.ticks - 1, 0);
   12266:	461c      	mov	r4, r3
   12268:	460e      	mov	r6, r1
   1226a:	2b01      	cmp	r3, #1
   1226c:	f171 0100 	sbcs.w	r1, r1, #0
   12270:	da01      	bge.n	12276 <z_impl_k_timer_start+0xa2>
   12272:	2401      	movs	r4, #1
   12274:	2600      	movs	r6, #0
   12276:	3c01      	subs	r4, #1
   12278:	f146 36ff 	adc.w	r6, r6, #4294967295
   1227c:	e7d8      	b.n	12230 <z_impl_k_timer_start+0x5c>
   1227e:	bf00      	nop
   12280:	000120f9 	.word	0x000120f9

00012284 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   12284:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12288:	b083      	sub	sp, #12
   1228a:	4607      	mov	r7, r0
   1228c:	4616      	mov	r6, r2
   1228e:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   12290:	4b28      	ldr	r3, [pc, #160]	; (12334 <z_impl_k_poll+0xb0>)
   12292:	689c      	ldr	r4, [r3, #8]

	poller->is_polling = true;
   12294:	2301      	movs	r3, #1
   12296:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	poller->mode = MODE_POLL;
   1229a:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   1229e:	ea55 0302 	orrs.w	r3, r5, r2
   122a2:	bf0c      	ite	eq
   122a4:	2301      	moveq	r3, #1
   122a6:	2300      	movne	r3, #0
   122a8:	f104 0260 	add.w	r2, r4, #96	; 0x60
   122ac:	f00d fc84 	bl	1fbb8 <register_events>
   122b0:	4680      	mov	r8, r0
	__asm__ volatile(
   122b2:	f04f 0320 	mov.w	r3, #32
   122b6:	f3ef 8111 	mrs	r1, BASEPRI
   122ba:	f383 8812 	msr	BASEPRI_MAX, r3
   122be:	f3bf 8f6f 	isb	sy
   122c2:	4689      	mov	r9, r1
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   122c4:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   122c8:	b30b      	cbz	r3, 1230e <z_impl_k_poll+0x8a>
		SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, 0);

		return 0;
	}

	poller->is_polling = false;
   122ca:	2300      	movs	r3, #0
   122cc:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   122d0:	ea55 0306 	orrs.w	r3, r5, r6
   122d4:	d026      	beq.n	12324 <z_impl_k_poll+0xa0>
		return -EAGAIN;
	}

	static _wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);

	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   122d6:	9600      	str	r6, [sp, #0]
   122d8:	9501      	str	r5, [sp, #4]
   122da:	4a17      	ldr	r2, [pc, #92]	; (12338 <z_impl_k_poll+0xb4>)
   122dc:	4817      	ldr	r0, [pc, #92]	; (1233c <z_impl_k_poll+0xb8>)
   122de:	f7ff fb39 	bl	11954 <z_pend_curr>
   122e2:	4604      	mov	r4, r0
   122e4:	f04f 0320 	mov.w	r3, #32
   122e8:	f3ef 8211 	mrs	r2, BASEPRI
   122ec:	f383 8812 	msr	BASEPRI_MAX, r3
   122f0:	f3bf 8f6f 	isb	sy
   122f4:	4615      	mov	r5, r2
	 * we've already know the return code (-EAGAIN), and even if they are
	 * added to the list of events that occurred, the user has to check the
	 * return code first, which invalidates the whole list of event states.
	 */
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
   122f6:	4641      	mov	r1, r8
   122f8:	4638      	mov	r0, r7
   122fa:	f00d fbd1 	bl	1faa0 <clear_event_registrations>
	__asm__ volatile(
   122fe:	f385 8811 	msr	BASEPRI, r5
   12302:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   12306:	4620      	mov	r0, r4
   12308:	b003      	add	sp, #12
   1230a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		clear_event_registrations(events, events_registered, key);
   1230e:	460a      	mov	r2, r1
   12310:	4601      	mov	r1, r0
   12312:	4638      	mov	r0, r7
   12314:	f00d fbc4 	bl	1faa0 <clear_event_registrations>
   12318:	f389 8811 	msr	BASEPRI, r9
   1231c:	f3bf 8f6f 	isb	sy
		return 0;
   12320:	2400      	movs	r4, #0
   12322:	e7f0      	b.n	12306 <z_impl_k_poll+0x82>
   12324:	f381 8811 	msr	BASEPRI, r1
   12328:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1232c:	f06f 040a 	mvn.w	r4, #10
   12330:	e7e9      	b.n	12306 <z_impl_k_poll+0x82>
   12332:	bf00      	nop
   12334:	2000378c 	.word	0x2000378c
   12338:	20000130 	.word	0x20000130
   1233c:	200037cc 	.word	0x200037cc

00012340 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   12340:	b538      	push	{r3, r4, r5, lr}
   12342:	4603      	mov	r3, r0
	__asm__ volatile(
   12344:	f04f 0220 	mov.w	r2, #32
   12348:	f3ef 8511 	mrs	r5, BASEPRI
   1234c:	f382 8812 	msr	BASEPRI_MAX, r2
   12350:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   12354:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   12356:	2201      	movs	r2, #1
   12358:	6082      	str	r2, [r0, #8]
	return list->head == list;
   1235a:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1235c:	4283      	cmp	r3, r0
   1235e:	d010      	beq.n	12382 <z_impl_k_poll_signal_raise+0x42>
	sys_dnode_t *const prev = node->prev;
   12360:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   12362:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   12364:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   12366:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   12368:	2300      	movs	r3, #0
   1236a:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   1236c:	6043      	str	r3, [r0, #4]
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1236e:	2101      	movs	r1, #1
   12370:	f00d fcab 	bl	1fcca <signal_poll_event>
   12374:	4604      	mov	r4, r0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   12376:	4629      	mov	r1, r5
   12378:	4805      	ldr	r0, [pc, #20]	; (12390 <z_impl_k_poll_signal_raise+0x50>)
   1237a:	f7ff f987 	bl	1168c <z_reschedule>
	return rc;
}
   1237e:	4620      	mov	r0, r4
   12380:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   12382:	f385 8811 	msr	BASEPRI, r5
   12386:	f3bf 8f6f 	isb	sy
		return 0;
   1238a:	2400      	movs	r4, #0
   1238c:	e7f7      	b.n	1237e <z_impl_k_poll_signal_raise+0x3e>
   1238e:	bf00      	nop
   12390:	200037cc 	.word	0x200037cc

00012394 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   12394:	4b01      	ldr	r3, [pc, #4]	; (1239c <k_thread_system_pool_assign+0x8>)
   12396:	6743      	str	r3, [r0, #116]	; 0x74
}
   12398:	4770      	bx	lr
   1239a:	bf00      	nop
   1239c:	20000424 	.word	0x20000424

000123a0 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   123a0:	b538      	push	{r3, r4, r5, lr}
   123a2:	4604      	mov	r4, r0
   123a4:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   123a6:	f00c fdea 	bl	1ef7e <k_is_in_isr>
   123aa:	b940      	cbnz	r0, 123be <z_thread_aligned_alloc+0x1e>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   123ac:	4b05      	ldr	r3, [pc, #20]	; (123c4 <z_thread_aligned_alloc+0x24>)
   123ae:	689b      	ldr	r3, [r3, #8]
   123b0:	6f58      	ldr	r0, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   123b2:	b118      	cbz	r0, 123bc <z_thread_aligned_alloc+0x1c>
		ret = z_heap_aligned_alloc(heap, align, size);
   123b4:	462a      	mov	r2, r5
   123b6:	4621      	mov	r1, r4
   123b8:	f00d fcd0 	bl	1fd5c <z_heap_aligned_alloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   123bc:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
   123be:	4802      	ldr	r0, [pc, #8]	; (123c8 <z_thread_aligned_alloc+0x28>)
   123c0:	e7f8      	b.n	123b4 <z_thread_aligned_alloc+0x14>
   123c2:	bf00      	nop
   123c4:	2000378c 	.word	0x2000378c
   123c8:	20000424 	.word	0x20000424

000123cc <boot_banner>:
#else
#define BANNER_VERSION KERNEL_VERSION_STRING
#endif

void boot_banner(void)
{
   123cc:	b508      	push	{r3, lr}
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   123ce:	4802      	ldr	r0, [pc, #8]	; (123d8 <boot_banner+0xc>)
   123d0:	f004 f9d9 	bl	16786 <printk>
#endif /* CONFIG_BOOT_BANNER */
}
   123d4:	bd08      	pop	{r3, pc}
   123d6:	bf00      	nop
   123d8:	00022524 	.word	0x00022524

000123dc <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   123dc:	b510      	push	{r4, lr}
   123de:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   123e0:	4b08      	ldr	r3, [pc, #32]	; (12404 <k_sys_work_q_init+0x28>)
   123e2:	9302      	str	r3, [sp, #8]
   123e4:	2400      	movs	r4, #0
   123e6:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   123ea:	ab02      	add	r3, sp, #8
   123ec:	9300      	str	r3, [sp, #0]
   123ee:	f04f 33ff 	mov.w	r3, #4294967295
   123f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
   123f6:	4904      	ldr	r1, [pc, #16]	; (12408 <k_sys_work_q_init+0x2c>)
   123f8:	4804      	ldr	r0, [pc, #16]	; (1240c <k_sys_work_q_init+0x30>)
   123fa:	f7ff f87d 	bl	114f8 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   123fe:	4620      	mov	r0, r4
   12400:	b004      	add	sp, #16
   12402:	bd10      	pop	{r4, pc}
   12404:	00022554 	.word	0x00022554
   12408:	2000a8d8 	.word	0x2000a8d8
   1240c:	20001d98 	.word	0x20001d98

00012410 <malloc>:
   12410:	4b02      	ldr	r3, [pc, #8]	; (1241c <malloc+0xc>)
   12412:	4601      	mov	r1, r0
   12414:	6818      	ldr	r0, [r3, #0]
   12416:	f000 b84d 	b.w	124b4 <_malloc_r>
   1241a:	bf00      	nop
   1241c:	20000138 	.word	0x20000138

00012420 <_free_r>:
   12420:	b538      	push	{r3, r4, r5, lr}
   12422:	4605      	mov	r5, r0
   12424:	2900      	cmp	r1, #0
   12426:	d041      	beq.n	124ac <_free_r+0x8c>
   12428:	f851 3c04 	ldr.w	r3, [r1, #-4]
   1242c:	1f0c      	subs	r4, r1, #4
   1242e:	2b00      	cmp	r3, #0
   12430:	bfb8      	it	lt
   12432:	18e4      	addlt	r4, r4, r3
   12434:	f000 fd14 	bl	12e60 <__malloc_lock>
   12438:	4a1d      	ldr	r2, [pc, #116]	; (124b0 <_free_r+0x90>)
   1243a:	6813      	ldr	r3, [r2, #0]
   1243c:	b933      	cbnz	r3, 1244c <_free_r+0x2c>
   1243e:	6063      	str	r3, [r4, #4]
   12440:	6014      	str	r4, [r2, #0]
   12442:	4628      	mov	r0, r5
   12444:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12448:	f000 bd10 	b.w	12e6c <__malloc_unlock>
   1244c:	42a3      	cmp	r3, r4
   1244e:	d908      	bls.n	12462 <_free_r+0x42>
   12450:	6820      	ldr	r0, [r4, #0]
   12452:	1821      	adds	r1, r4, r0
   12454:	428b      	cmp	r3, r1
   12456:	bf01      	itttt	eq
   12458:	6819      	ldreq	r1, [r3, #0]
   1245a:	685b      	ldreq	r3, [r3, #4]
   1245c:	1809      	addeq	r1, r1, r0
   1245e:	6021      	streq	r1, [r4, #0]
   12460:	e7ed      	b.n	1243e <_free_r+0x1e>
   12462:	461a      	mov	r2, r3
   12464:	685b      	ldr	r3, [r3, #4]
   12466:	b10b      	cbz	r3, 1246c <_free_r+0x4c>
   12468:	42a3      	cmp	r3, r4
   1246a:	d9fa      	bls.n	12462 <_free_r+0x42>
   1246c:	6811      	ldr	r1, [r2, #0]
   1246e:	1850      	adds	r0, r2, r1
   12470:	42a0      	cmp	r0, r4
   12472:	d10b      	bne.n	1248c <_free_r+0x6c>
   12474:	6820      	ldr	r0, [r4, #0]
   12476:	4401      	add	r1, r0
   12478:	1850      	adds	r0, r2, r1
   1247a:	4283      	cmp	r3, r0
   1247c:	6011      	str	r1, [r2, #0]
   1247e:	d1e0      	bne.n	12442 <_free_r+0x22>
   12480:	6818      	ldr	r0, [r3, #0]
   12482:	685b      	ldr	r3, [r3, #4]
   12484:	6053      	str	r3, [r2, #4]
   12486:	4408      	add	r0, r1
   12488:	6010      	str	r0, [r2, #0]
   1248a:	e7da      	b.n	12442 <_free_r+0x22>
   1248c:	d902      	bls.n	12494 <_free_r+0x74>
   1248e:	230c      	movs	r3, #12
   12490:	602b      	str	r3, [r5, #0]
   12492:	e7d6      	b.n	12442 <_free_r+0x22>
   12494:	6820      	ldr	r0, [r4, #0]
   12496:	1821      	adds	r1, r4, r0
   12498:	428b      	cmp	r3, r1
   1249a:	bf04      	itt	eq
   1249c:	6819      	ldreq	r1, [r3, #0]
   1249e:	685b      	ldreq	r3, [r3, #4]
   124a0:	6063      	str	r3, [r4, #4]
   124a2:	bf04      	itt	eq
   124a4:	1809      	addeq	r1, r1, r0
   124a6:	6021      	streq	r1, [r4, #0]
   124a8:	6054      	str	r4, [r2, #4]
   124aa:	e7ca      	b.n	12442 <_free_r+0x22>
   124ac:	bd38      	pop	{r3, r4, r5, pc}
   124ae:	bf00      	nop
   124b0:	200037d0 	.word	0x200037d0

000124b4 <_malloc_r>:
   124b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   124b6:	1ccd      	adds	r5, r1, #3
   124b8:	f025 0503 	bic.w	r5, r5, #3
   124bc:	3508      	adds	r5, #8
   124be:	2d0c      	cmp	r5, #12
   124c0:	bf38      	it	cc
   124c2:	250c      	movcc	r5, #12
   124c4:	2d00      	cmp	r5, #0
   124c6:	4606      	mov	r6, r0
   124c8:	db01      	blt.n	124ce <_malloc_r+0x1a>
   124ca:	42a9      	cmp	r1, r5
   124cc:	d903      	bls.n	124d6 <_malloc_r+0x22>
   124ce:	230c      	movs	r3, #12
   124d0:	6033      	str	r3, [r6, #0]
   124d2:	2000      	movs	r0, #0
   124d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   124d6:	f000 fcc3 	bl	12e60 <__malloc_lock>
   124da:	4921      	ldr	r1, [pc, #132]	; (12560 <_malloc_r+0xac>)
   124dc:	680a      	ldr	r2, [r1, #0]
   124de:	4614      	mov	r4, r2
   124e0:	b99c      	cbnz	r4, 1250a <_malloc_r+0x56>
   124e2:	4f20      	ldr	r7, [pc, #128]	; (12564 <_malloc_r+0xb0>)
   124e4:	683b      	ldr	r3, [r7, #0]
   124e6:	b923      	cbnz	r3, 124f2 <_malloc_r+0x3e>
   124e8:	4621      	mov	r1, r4
   124ea:	4630      	mov	r0, r6
   124ec:	f000 fba0 	bl	12c30 <_sbrk_r>
   124f0:	6038      	str	r0, [r7, #0]
   124f2:	4629      	mov	r1, r5
   124f4:	4630      	mov	r0, r6
   124f6:	f000 fb9b 	bl	12c30 <_sbrk_r>
   124fa:	1c43      	adds	r3, r0, #1
   124fc:	d123      	bne.n	12546 <_malloc_r+0x92>
   124fe:	230c      	movs	r3, #12
   12500:	6033      	str	r3, [r6, #0]
   12502:	4630      	mov	r0, r6
   12504:	f000 fcb2 	bl	12e6c <__malloc_unlock>
   12508:	e7e3      	b.n	124d2 <_malloc_r+0x1e>
   1250a:	6823      	ldr	r3, [r4, #0]
   1250c:	1b5b      	subs	r3, r3, r5
   1250e:	d417      	bmi.n	12540 <_malloc_r+0x8c>
   12510:	2b0b      	cmp	r3, #11
   12512:	d903      	bls.n	1251c <_malloc_r+0x68>
   12514:	6023      	str	r3, [r4, #0]
   12516:	441c      	add	r4, r3
   12518:	6025      	str	r5, [r4, #0]
   1251a:	e004      	b.n	12526 <_malloc_r+0x72>
   1251c:	6863      	ldr	r3, [r4, #4]
   1251e:	42a2      	cmp	r2, r4
   12520:	bf0c      	ite	eq
   12522:	600b      	streq	r3, [r1, #0]
   12524:	6053      	strne	r3, [r2, #4]
   12526:	4630      	mov	r0, r6
   12528:	f000 fca0 	bl	12e6c <__malloc_unlock>
   1252c:	f104 000b 	add.w	r0, r4, #11
   12530:	1d23      	adds	r3, r4, #4
   12532:	f020 0007 	bic.w	r0, r0, #7
   12536:	1ac2      	subs	r2, r0, r3
   12538:	bf1c      	itt	ne
   1253a:	1a1b      	subne	r3, r3, r0
   1253c:	50a3      	strne	r3, [r4, r2]
   1253e:	e7c9      	b.n	124d4 <_malloc_r+0x20>
   12540:	4622      	mov	r2, r4
   12542:	6864      	ldr	r4, [r4, #4]
   12544:	e7cc      	b.n	124e0 <_malloc_r+0x2c>
   12546:	1cc4      	adds	r4, r0, #3
   12548:	f024 0403 	bic.w	r4, r4, #3
   1254c:	42a0      	cmp	r0, r4
   1254e:	d0e3      	beq.n	12518 <_malloc_r+0x64>
   12550:	1a21      	subs	r1, r4, r0
   12552:	4630      	mov	r0, r6
   12554:	f000 fb6c 	bl	12c30 <_sbrk_r>
   12558:	3001      	adds	r0, #1
   1255a:	d1dd      	bne.n	12518 <_malloc_r+0x64>
   1255c:	e7cf      	b.n	124fe <_malloc_r+0x4a>
   1255e:	bf00      	nop
   12560:	200037d0 	.word	0x200037d0
   12564:	200037cc 	.word	0x200037cc

00012568 <_printf_float>:
   12568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1256c:	b091      	sub	sp, #68	; 0x44
   1256e:	460c      	mov	r4, r1
   12570:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   12574:	4616      	mov	r6, r2
   12576:	461f      	mov	r7, r3
   12578:	4605      	mov	r5, r0
   1257a:	f000 fc6d 	bl	12e58 <_localeconv_r>
   1257e:	6803      	ldr	r3, [r0, #0]
   12580:	9308      	str	r3, [sp, #32]
   12582:	4618      	mov	r0, r3
   12584:	f7ee fc14 	bl	db0 <strlen>
   12588:	2300      	movs	r3, #0
   1258a:	930e      	str	r3, [sp, #56]	; 0x38
   1258c:	f8d8 3000 	ldr.w	r3, [r8]
   12590:	9009      	str	r0, [sp, #36]	; 0x24
   12592:	3307      	adds	r3, #7
   12594:	f023 0307 	bic.w	r3, r3, #7
   12598:	f103 0208 	add.w	r2, r3, #8
   1259c:	f894 a018 	ldrb.w	sl, [r4, #24]
   125a0:	f8d4 b000 	ldr.w	fp, [r4]
   125a4:	f8c8 2000 	str.w	r2, [r8]
   125a8:	e9d3 8900 	ldrd	r8, r9, [r3]
   125ac:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
   125b0:	930b      	str	r3, [sp, #44]	; 0x2c
   125b2:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   125b6:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
   125ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   125be:	4b9c      	ldr	r3, [pc, #624]	; (12830 <_printf_float+0x2c8>)
   125c0:	f04f 32ff 	mov.w	r2, #4294967295
   125c4:	f7ee fa5c 	bl	a80 <__aeabi_dcmpun>
   125c8:	bb70      	cbnz	r0, 12628 <_printf_float+0xc0>
   125ca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   125ce:	4b98      	ldr	r3, [pc, #608]	; (12830 <_printf_float+0x2c8>)
   125d0:	f04f 32ff 	mov.w	r2, #4294967295
   125d4:	f7ee fa36 	bl	a44 <__aeabi_dcmple>
   125d8:	bb30      	cbnz	r0, 12628 <_printf_float+0xc0>
   125da:	2200      	movs	r2, #0
   125dc:	2300      	movs	r3, #0
   125de:	4640      	mov	r0, r8
   125e0:	4649      	mov	r1, r9
   125e2:	f7ee fa25 	bl	a30 <__aeabi_dcmplt>
   125e6:	b110      	cbz	r0, 125ee <_printf_float+0x86>
   125e8:	232d      	movs	r3, #45	; 0x2d
   125ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   125ee:	4a91      	ldr	r2, [pc, #580]	; (12834 <_printf_float+0x2cc>)
   125f0:	4b91      	ldr	r3, [pc, #580]	; (12838 <_printf_float+0x2d0>)
   125f2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   125f6:	bf94      	ite	ls
   125f8:	4690      	movls	r8, r2
   125fa:	4698      	movhi	r8, r3
   125fc:	2303      	movs	r3, #3
   125fe:	6123      	str	r3, [r4, #16]
   12600:	f02b 0304 	bic.w	r3, fp, #4
   12604:	6023      	str	r3, [r4, #0]
   12606:	f04f 0900 	mov.w	r9, #0
   1260a:	9700      	str	r7, [sp, #0]
   1260c:	4633      	mov	r3, r6
   1260e:	aa0f      	add	r2, sp, #60	; 0x3c
   12610:	4621      	mov	r1, r4
   12612:	4628      	mov	r0, r5
   12614:	f00d fcc7 	bl	1ffa6 <_printf_common>
   12618:	3001      	adds	r0, #1
   1261a:	f040 8099 	bne.w	12750 <_printf_float+0x1e8>
   1261e:	f04f 30ff 	mov.w	r0, #4294967295
   12622:	b011      	add	sp, #68	; 0x44
   12624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12628:	4642      	mov	r2, r8
   1262a:	464b      	mov	r3, r9
   1262c:	4640      	mov	r0, r8
   1262e:	4649      	mov	r1, r9
   12630:	f7ee fa26 	bl	a80 <__aeabi_dcmpun>
   12634:	b140      	cbz	r0, 12648 <_printf_float+0xe0>
   12636:	464b      	mov	r3, r9
   12638:	2b00      	cmp	r3, #0
   1263a:	bfbc      	itt	lt
   1263c:	232d      	movlt	r3, #45	; 0x2d
   1263e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   12642:	4a7e      	ldr	r2, [pc, #504]	; (1283c <_printf_float+0x2d4>)
   12644:	4b7e      	ldr	r3, [pc, #504]	; (12840 <_printf_float+0x2d8>)
   12646:	e7d4      	b.n	125f2 <_printf_float+0x8a>
   12648:	6863      	ldr	r3, [r4, #4]
   1264a:	1c5a      	adds	r2, r3, #1
   1264c:	d129      	bne.n	126a2 <_printf_float+0x13a>
   1264e:	2306      	movs	r3, #6
   12650:	6063      	str	r3, [r4, #4]
   12652:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
   12656:	2200      	movs	r2, #0
   12658:	6023      	str	r3, [r4, #0]
   1265a:	9206      	str	r2, [sp, #24]
   1265c:	aa0e      	add	r2, sp, #56	; 0x38
   1265e:	e9cd a204 	strd	sl, r2, [sp, #16]
   12662:	aa0d      	add	r2, sp, #52	; 0x34
   12664:	9203      	str	r2, [sp, #12]
   12666:	f10d 0233 	add.w	r2, sp, #51	; 0x33
   1266a:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1266e:	6863      	ldr	r3, [r4, #4]
   12670:	9300      	str	r3, [sp, #0]
   12672:	4642      	mov	r2, r8
   12674:	464b      	mov	r3, r9
   12676:	4628      	mov	r0, r5
   12678:	f00d fbf4 	bl	1fe64 <__cvt>
   1267c:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
   12680:	990d      	ldr	r1, [sp, #52]	; 0x34
   12682:	4680      	mov	r8, r0
   12684:	d115      	bne.n	126b2 <_printf_float+0x14a>
   12686:	1ccb      	adds	r3, r1, #3
   12688:	db3b      	blt.n	12702 <_printf_float+0x19a>
   1268a:	6863      	ldr	r3, [r4, #4]
   1268c:	4299      	cmp	r1, r3
   1268e:	dc38      	bgt.n	12702 <_printf_float+0x19a>
   12690:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   12692:	4299      	cmp	r1, r3
   12694:	db55      	blt.n	12742 <_printf_float+0x1da>
   12696:	6823      	ldr	r3, [r4, #0]
   12698:	6121      	str	r1, [r4, #16]
   1269a:	07d8      	lsls	r0, r3, #31
   1269c:	d545      	bpl.n	1272a <_printf_float+0x1c2>
   1269e:	1c4b      	adds	r3, r1, #1
   126a0:	e042      	b.n	12728 <_printf_float+0x1c0>
   126a2:	f00a 02df 	and.w	r2, sl, #223	; 0xdf
   126a6:	2a47      	cmp	r2, #71	; 0x47
   126a8:	d1d3      	bne.n	12652 <_printf_float+0xea>
   126aa:	2b00      	cmp	r3, #0
   126ac:	d1d1      	bne.n	12652 <_printf_float+0xea>
   126ae:	2301      	movs	r3, #1
   126b0:	e7ce      	b.n	12650 <_printf_float+0xe8>
   126b2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   126b6:	d107      	bne.n	126c8 <_printf_float+0x160>
   126b8:	1cc8      	adds	r0, r1, #3
   126ba:	db25      	blt.n	12708 <_printf_float+0x1a0>
   126bc:	6863      	ldr	r3, [r4, #4]
   126be:	428b      	cmp	r3, r1
   126c0:	db22      	blt.n	12708 <_printf_float+0x1a0>
   126c2:	f04f 0a67 	mov.w	sl, #103	; 0x67
   126c6:	e7e3      	b.n	12690 <_printf_float+0x128>
   126c8:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   126cc:	d81f      	bhi.n	1270e <_printf_float+0x1a6>
   126ce:	3901      	subs	r1, #1
   126d0:	4652      	mov	r2, sl
   126d2:	f104 0050 	add.w	r0, r4, #80	; 0x50
   126d6:	910d      	str	r1, [sp, #52]	; 0x34
   126d8:	f00d fc2b 	bl	1ff32 <__exponent>
   126dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   126de:	1813      	adds	r3, r2, r0
   126e0:	2a01      	cmp	r2, #1
   126e2:	4681      	mov	r9, r0
   126e4:	6123      	str	r3, [r4, #16]
   126e6:	dc02      	bgt.n	126ee <_printf_float+0x186>
   126e8:	6822      	ldr	r2, [r4, #0]
   126ea:	07d2      	lsls	r2, r2, #31
   126ec:	d501      	bpl.n	126f2 <_printf_float+0x18a>
   126ee:	3301      	adds	r3, #1
   126f0:	6123      	str	r3, [r4, #16]
   126f2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   126f6:	2b00      	cmp	r3, #0
   126f8:	d087      	beq.n	1260a <_printf_float+0xa2>
   126fa:	232d      	movs	r3, #45	; 0x2d
   126fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   12700:	e783      	b.n	1260a <_printf_float+0xa2>
   12702:	f04f 0a65 	mov.w	sl, #101	; 0x65
   12706:	e7e2      	b.n	126ce <_printf_float+0x166>
   12708:	f04f 0a45 	mov.w	sl, #69	; 0x45
   1270c:	e7df      	b.n	126ce <_printf_float+0x166>
   1270e:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
   12712:	d1bd      	bne.n	12690 <_printf_float+0x128>
   12714:	2900      	cmp	r1, #0
   12716:	6863      	ldr	r3, [r4, #4]
   12718:	dd0b      	ble.n	12732 <_printf_float+0x1ca>
   1271a:	6121      	str	r1, [r4, #16]
   1271c:	b913      	cbnz	r3, 12724 <_printf_float+0x1bc>
   1271e:	6822      	ldr	r2, [r4, #0]
   12720:	07d0      	lsls	r0, r2, #31
   12722:	d502      	bpl.n	1272a <_printf_float+0x1c2>
   12724:	3301      	adds	r3, #1
   12726:	440b      	add	r3, r1
   12728:	6123      	str	r3, [r4, #16]
   1272a:	65a1      	str	r1, [r4, #88]	; 0x58
   1272c:	f04f 0900 	mov.w	r9, #0
   12730:	e7df      	b.n	126f2 <_printf_float+0x18a>
   12732:	b913      	cbnz	r3, 1273a <_printf_float+0x1d2>
   12734:	6822      	ldr	r2, [r4, #0]
   12736:	07d2      	lsls	r2, r2, #31
   12738:	d501      	bpl.n	1273e <_printf_float+0x1d6>
   1273a:	3302      	adds	r3, #2
   1273c:	e7f4      	b.n	12728 <_printf_float+0x1c0>
   1273e:	2301      	movs	r3, #1
   12740:	e7f2      	b.n	12728 <_printf_float+0x1c0>
   12742:	2900      	cmp	r1, #0
   12744:	bfd4      	ite	le
   12746:	f1c1 0202 	rsble	r2, r1, #2
   1274a:	2201      	movgt	r2, #1
   1274c:	4413      	add	r3, r2
   1274e:	e7eb      	b.n	12728 <_printf_float+0x1c0>
   12750:	6823      	ldr	r3, [r4, #0]
   12752:	055a      	lsls	r2, r3, #21
   12754:	d407      	bmi.n	12766 <_printf_float+0x1fe>
   12756:	6923      	ldr	r3, [r4, #16]
   12758:	4642      	mov	r2, r8
   1275a:	4631      	mov	r1, r6
   1275c:	4628      	mov	r0, r5
   1275e:	47b8      	blx	r7
   12760:	3001      	adds	r0, #1
   12762:	d12b      	bne.n	127bc <_printf_float+0x254>
   12764:	e75b      	b.n	1261e <_printf_float+0xb6>
   12766:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   1276a:	f240 80dc 	bls.w	12926 <_printf_float+0x3be>
   1276e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   12772:	2200      	movs	r2, #0
   12774:	2300      	movs	r3, #0
   12776:	f7ee f951 	bl	a1c <__aeabi_dcmpeq>
   1277a:	2800      	cmp	r0, #0
   1277c:	d033      	beq.n	127e6 <_printf_float+0x27e>
   1277e:	4a31      	ldr	r2, [pc, #196]	; (12844 <_printf_float+0x2dc>)
   12780:	2301      	movs	r3, #1
   12782:	4631      	mov	r1, r6
   12784:	4628      	mov	r0, r5
   12786:	47b8      	blx	r7
   12788:	3001      	adds	r0, #1
   1278a:	f43f af48 	beq.w	1261e <_printf_float+0xb6>
   1278e:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	; 0x34
   12792:	4543      	cmp	r3, r8
   12794:	db02      	blt.n	1279c <_printf_float+0x234>
   12796:	6823      	ldr	r3, [r4, #0]
   12798:	07d8      	lsls	r0, r3, #31
   1279a:	d50f      	bpl.n	127bc <_printf_float+0x254>
   1279c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   127a0:	4631      	mov	r1, r6
   127a2:	4628      	mov	r0, r5
   127a4:	47b8      	blx	r7
   127a6:	3001      	adds	r0, #1
   127a8:	f43f af39 	beq.w	1261e <_printf_float+0xb6>
   127ac:	f04f 0900 	mov.w	r9, #0
   127b0:	f108 38ff 	add.w	r8, r8, #4294967295
   127b4:	f104 0a1a 	add.w	sl, r4, #26
   127b8:	45c8      	cmp	r8, r9
   127ba:	dc09      	bgt.n	127d0 <_printf_float+0x268>
   127bc:	6823      	ldr	r3, [r4, #0]
   127be:	079b      	lsls	r3, r3, #30
   127c0:	f100 8102 	bmi.w	129c8 <_printf_float+0x460>
   127c4:	68e0      	ldr	r0, [r4, #12]
   127c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   127c8:	4298      	cmp	r0, r3
   127ca:	bfb8      	it	lt
   127cc:	4618      	movlt	r0, r3
   127ce:	e728      	b.n	12622 <_printf_float+0xba>
   127d0:	2301      	movs	r3, #1
   127d2:	4652      	mov	r2, sl
   127d4:	4631      	mov	r1, r6
   127d6:	4628      	mov	r0, r5
   127d8:	47b8      	blx	r7
   127da:	3001      	adds	r0, #1
   127dc:	f43f af1f 	beq.w	1261e <_printf_float+0xb6>
   127e0:	f109 0901 	add.w	r9, r9, #1
   127e4:	e7e8      	b.n	127b8 <_printf_float+0x250>
   127e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   127e8:	2b00      	cmp	r3, #0
   127ea:	dc38      	bgt.n	1285e <_printf_float+0x2f6>
   127ec:	4a15      	ldr	r2, [pc, #84]	; (12844 <_printf_float+0x2dc>)
   127ee:	2301      	movs	r3, #1
   127f0:	4631      	mov	r1, r6
   127f2:	4628      	mov	r0, r5
   127f4:	47b8      	blx	r7
   127f6:	3001      	adds	r0, #1
   127f8:	f43f af11 	beq.w	1261e <_printf_float+0xb6>
   127fc:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	; 0x34
   12800:	ea59 0303 	orrs.w	r3, r9, r3
   12804:	d102      	bne.n	1280c <_printf_float+0x2a4>
   12806:	6823      	ldr	r3, [r4, #0]
   12808:	07d9      	lsls	r1, r3, #31
   1280a:	d5d7      	bpl.n	127bc <_printf_float+0x254>
   1280c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   12810:	4631      	mov	r1, r6
   12812:	4628      	mov	r0, r5
   12814:	47b8      	blx	r7
   12816:	3001      	adds	r0, #1
   12818:	f43f af01 	beq.w	1261e <_printf_float+0xb6>
   1281c:	f04f 0a00 	mov.w	sl, #0
   12820:	f104 0b1a 	add.w	fp, r4, #26
   12824:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12826:	425b      	negs	r3, r3
   12828:	4553      	cmp	r3, sl
   1282a:	dc0d      	bgt.n	12848 <_printf_float+0x2e0>
   1282c:	464b      	mov	r3, r9
   1282e:	e793      	b.n	12758 <_printf_float+0x1f0>
   12830:	7fefffff 	.word	0x7fefffff
   12834:	00022859 	.word	0x00022859
   12838:	0002285d 	.word	0x0002285d
   1283c:	00022861 	.word	0x00022861
   12840:	00022865 	.word	0x00022865
   12844:	00022869 	.word	0x00022869
   12848:	2301      	movs	r3, #1
   1284a:	465a      	mov	r2, fp
   1284c:	4631      	mov	r1, r6
   1284e:	4628      	mov	r0, r5
   12850:	47b8      	blx	r7
   12852:	3001      	adds	r0, #1
   12854:	f43f aee3 	beq.w	1261e <_printf_float+0xb6>
   12858:	f10a 0a01 	add.w	sl, sl, #1
   1285c:	e7e2      	b.n	12824 <_printf_float+0x2bc>
   1285e:	6da3      	ldr	r3, [r4, #88]	; 0x58
   12860:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   12864:	4553      	cmp	r3, sl
   12866:	bfa8      	it	ge
   12868:	4653      	movge	r3, sl
   1286a:	2b00      	cmp	r3, #0
   1286c:	4699      	mov	r9, r3
   1286e:	dc36      	bgt.n	128de <_printf_float+0x376>
   12870:	f04f 0b00 	mov.w	fp, #0
   12874:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   12878:	f104 021a 	add.w	r2, r4, #26
   1287c:	6da3      	ldr	r3, [r4, #88]	; 0x58
   1287e:	930a      	str	r3, [sp, #40]	; 0x28
   12880:	eba3 0309 	sub.w	r3, r3, r9
   12884:	455b      	cmp	r3, fp
   12886:	dc31      	bgt.n	128ec <_printf_float+0x384>
   12888:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1288a:	459a      	cmp	sl, r3
   1288c:	dc3a      	bgt.n	12904 <_printf_float+0x39c>
   1288e:	6823      	ldr	r3, [r4, #0]
   12890:	07da      	lsls	r2, r3, #31
   12892:	d437      	bmi.n	12904 <_printf_float+0x39c>
   12894:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12896:	ebaa 0903 	sub.w	r9, sl, r3
   1289a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1289c:	ebaa 0303 	sub.w	r3, sl, r3
   128a0:	4599      	cmp	r9, r3
   128a2:	bfa8      	it	ge
   128a4:	4699      	movge	r9, r3
   128a6:	f1b9 0f00 	cmp.w	r9, #0
   128aa:	dc33      	bgt.n	12914 <_printf_float+0x3ac>
   128ac:	f04f 0800 	mov.w	r8, #0
   128b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   128b4:	f104 0b1a 	add.w	fp, r4, #26
   128b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   128ba:	ebaa 0303 	sub.w	r3, sl, r3
   128be:	eba3 0309 	sub.w	r3, r3, r9
   128c2:	4543      	cmp	r3, r8
   128c4:	f77f af7a 	ble.w	127bc <_printf_float+0x254>
   128c8:	2301      	movs	r3, #1
   128ca:	465a      	mov	r2, fp
   128cc:	4631      	mov	r1, r6
   128ce:	4628      	mov	r0, r5
   128d0:	47b8      	blx	r7
   128d2:	3001      	adds	r0, #1
   128d4:	f43f aea3 	beq.w	1261e <_printf_float+0xb6>
   128d8:	f108 0801 	add.w	r8, r8, #1
   128dc:	e7ec      	b.n	128b8 <_printf_float+0x350>
   128de:	4642      	mov	r2, r8
   128e0:	4631      	mov	r1, r6
   128e2:	4628      	mov	r0, r5
   128e4:	47b8      	blx	r7
   128e6:	3001      	adds	r0, #1
   128e8:	d1c2      	bne.n	12870 <_printf_float+0x308>
   128ea:	e698      	b.n	1261e <_printf_float+0xb6>
   128ec:	2301      	movs	r3, #1
   128ee:	4631      	mov	r1, r6
   128f0:	4628      	mov	r0, r5
   128f2:	920a      	str	r2, [sp, #40]	; 0x28
   128f4:	47b8      	blx	r7
   128f6:	3001      	adds	r0, #1
   128f8:	f43f ae91 	beq.w	1261e <_printf_float+0xb6>
   128fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   128fe:	f10b 0b01 	add.w	fp, fp, #1
   12902:	e7bb      	b.n	1287c <_printf_float+0x314>
   12904:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   12908:	4631      	mov	r1, r6
   1290a:	4628      	mov	r0, r5
   1290c:	47b8      	blx	r7
   1290e:	3001      	adds	r0, #1
   12910:	d1c0      	bne.n	12894 <_printf_float+0x32c>
   12912:	e684      	b.n	1261e <_printf_float+0xb6>
   12914:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   12916:	464b      	mov	r3, r9
   12918:	4442      	add	r2, r8
   1291a:	4631      	mov	r1, r6
   1291c:	4628      	mov	r0, r5
   1291e:	47b8      	blx	r7
   12920:	3001      	adds	r0, #1
   12922:	d1c3      	bne.n	128ac <_printf_float+0x344>
   12924:	e67b      	b.n	1261e <_printf_float+0xb6>
   12926:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   1292a:	f1ba 0f01 	cmp.w	sl, #1
   1292e:	dc01      	bgt.n	12934 <_printf_float+0x3cc>
   12930:	07db      	lsls	r3, r3, #31
   12932:	d536      	bpl.n	129a2 <_printf_float+0x43a>
   12934:	2301      	movs	r3, #1
   12936:	4642      	mov	r2, r8
   12938:	4631      	mov	r1, r6
   1293a:	4628      	mov	r0, r5
   1293c:	47b8      	blx	r7
   1293e:	3001      	adds	r0, #1
   12940:	f43f ae6d 	beq.w	1261e <_printf_float+0xb6>
   12944:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   12948:	4631      	mov	r1, r6
   1294a:	4628      	mov	r0, r5
   1294c:	47b8      	blx	r7
   1294e:	3001      	adds	r0, #1
   12950:	f43f ae65 	beq.w	1261e <_printf_float+0xb6>
   12954:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   12958:	2200      	movs	r2, #0
   1295a:	2300      	movs	r3, #0
   1295c:	f10a 3aff 	add.w	sl, sl, #4294967295
   12960:	f7ee f85c 	bl	a1c <__aeabi_dcmpeq>
   12964:	b9c0      	cbnz	r0, 12998 <_printf_float+0x430>
   12966:	4653      	mov	r3, sl
   12968:	f108 0201 	add.w	r2, r8, #1
   1296c:	4631      	mov	r1, r6
   1296e:	4628      	mov	r0, r5
   12970:	47b8      	blx	r7
   12972:	3001      	adds	r0, #1
   12974:	d10c      	bne.n	12990 <_printf_float+0x428>
   12976:	e652      	b.n	1261e <_printf_float+0xb6>
   12978:	2301      	movs	r3, #1
   1297a:	465a      	mov	r2, fp
   1297c:	4631      	mov	r1, r6
   1297e:	4628      	mov	r0, r5
   12980:	47b8      	blx	r7
   12982:	3001      	adds	r0, #1
   12984:	f43f ae4b 	beq.w	1261e <_printf_float+0xb6>
   12988:	f108 0801 	add.w	r8, r8, #1
   1298c:	45d0      	cmp	r8, sl
   1298e:	dbf3      	blt.n	12978 <_printf_float+0x410>
   12990:	464b      	mov	r3, r9
   12992:	f104 0250 	add.w	r2, r4, #80	; 0x50
   12996:	e6e0      	b.n	1275a <_printf_float+0x1f2>
   12998:	f04f 0800 	mov.w	r8, #0
   1299c:	f104 0b1a 	add.w	fp, r4, #26
   129a0:	e7f4      	b.n	1298c <_printf_float+0x424>
   129a2:	2301      	movs	r3, #1
   129a4:	4642      	mov	r2, r8
   129a6:	e7e1      	b.n	1296c <_printf_float+0x404>
   129a8:	2301      	movs	r3, #1
   129aa:	464a      	mov	r2, r9
   129ac:	4631      	mov	r1, r6
   129ae:	4628      	mov	r0, r5
   129b0:	47b8      	blx	r7
   129b2:	3001      	adds	r0, #1
   129b4:	f43f ae33 	beq.w	1261e <_printf_float+0xb6>
   129b8:	f108 0801 	add.w	r8, r8, #1
   129bc:	68e3      	ldr	r3, [r4, #12]
   129be:	990f      	ldr	r1, [sp, #60]	; 0x3c
   129c0:	1a5b      	subs	r3, r3, r1
   129c2:	4543      	cmp	r3, r8
   129c4:	dcf0      	bgt.n	129a8 <_printf_float+0x440>
   129c6:	e6fd      	b.n	127c4 <_printf_float+0x25c>
   129c8:	f04f 0800 	mov.w	r8, #0
   129cc:	f104 0919 	add.w	r9, r4, #25
   129d0:	e7f4      	b.n	129bc <_printf_float+0x454>
   129d2:	bf00      	nop

000129d4 <_printf_i>:
   129d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   129d8:	7e0f      	ldrb	r7, [r1, #24]
   129da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   129dc:	2f78      	cmp	r7, #120	; 0x78
   129de:	4691      	mov	r9, r2
   129e0:	4680      	mov	r8, r0
   129e2:	460c      	mov	r4, r1
   129e4:	469a      	mov	sl, r3
   129e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
   129ea:	d807      	bhi.n	129fc <_printf_i+0x28>
   129ec:	2f62      	cmp	r7, #98	; 0x62
   129ee:	d80a      	bhi.n	12a06 <_printf_i+0x32>
   129f0:	2f00      	cmp	r7, #0
   129f2:	f000 80e0 	beq.w	12bb6 <_printf_i+0x1e2>
   129f6:	2f58      	cmp	r7, #88	; 0x58
   129f8:	f000 80bb 	beq.w	12b72 <_printf_i+0x19e>
   129fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
   12a00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   12a04:	e03a      	b.n	12a7c <_printf_i+0xa8>
   12a06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   12a0a:	2b15      	cmp	r3, #21
   12a0c:	d8f6      	bhi.n	129fc <_printf_i+0x28>
   12a0e:	a101      	add	r1, pc, #4	; (adr r1, 12a14 <_printf_i+0x40>)
   12a10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   12a14:	00012a6d 	.word	0x00012a6d
   12a18:	00012a81 	.word	0x00012a81
   12a1c:	000129fd 	.word	0x000129fd
   12a20:	000129fd 	.word	0x000129fd
   12a24:	000129fd 	.word	0x000129fd
   12a28:	000129fd 	.word	0x000129fd
   12a2c:	00012a81 	.word	0x00012a81
   12a30:	000129fd 	.word	0x000129fd
   12a34:	000129fd 	.word	0x000129fd
   12a38:	000129fd 	.word	0x000129fd
   12a3c:	000129fd 	.word	0x000129fd
   12a40:	00012b9d 	.word	0x00012b9d
   12a44:	00012b11 	.word	0x00012b11
   12a48:	00012b53 	.word	0x00012b53
   12a4c:	000129fd 	.word	0x000129fd
   12a50:	000129fd 	.word	0x000129fd
   12a54:	00012bbf 	.word	0x00012bbf
   12a58:	000129fd 	.word	0x000129fd
   12a5c:	00012b11 	.word	0x00012b11
   12a60:	000129fd 	.word	0x000129fd
   12a64:	000129fd 	.word	0x000129fd
   12a68:	00012b5b 	.word	0x00012b5b
   12a6c:	682b      	ldr	r3, [r5, #0]
   12a6e:	1d1a      	adds	r2, r3, #4
   12a70:	681b      	ldr	r3, [r3, #0]
   12a72:	602a      	str	r2, [r5, #0]
   12a74:	f104 0642 	add.w	r6, r4, #66	; 0x42
   12a78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   12a7c:	2301      	movs	r3, #1
   12a7e:	e0ab      	b.n	12bd8 <_printf_i+0x204>
   12a80:	6823      	ldr	r3, [r4, #0]
   12a82:	6829      	ldr	r1, [r5, #0]
   12a84:	061f      	lsls	r7, r3, #24
   12a86:	f101 0004 	add.w	r0, r1, #4
   12a8a:	6028      	str	r0, [r5, #0]
   12a8c:	d501      	bpl.n	12a92 <_printf_i+0xbe>
   12a8e:	680d      	ldr	r5, [r1, #0]
   12a90:	e003      	b.n	12a9a <_printf_i+0xc6>
   12a92:	065e      	lsls	r6, r3, #25
   12a94:	d5fb      	bpl.n	12a8e <_printf_i+0xba>
   12a96:	f9b1 5000 	ldrsh.w	r5, [r1]
   12a9a:	6861      	ldr	r1, [r4, #4]
   12a9c:	2d00      	cmp	r5, #0
   12a9e:	da7a      	bge.n	12b96 <_printf_i+0x1c2>
   12aa0:	202d      	movs	r0, #45	; 0x2d
   12aa2:	2900      	cmp	r1, #0
   12aa4:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
   12aa8:	60a1      	str	r1, [r4, #8]
   12aaa:	da2d      	bge.n	12b08 <_printf_i+0x134>
   12aac:	485e      	ldr	r0, [pc, #376]	; (12c28 <_printf_i+0x254>)
   12aae:	426d      	negs	r5, r5
   12ab0:	230a      	movs	r3, #10
   12ab2:	4616      	mov	r6, r2
   12ab4:	fbb5 f1f3 	udiv	r1, r5, r3
   12ab8:	fb03 5711 	mls	r7, r3, r1, r5
   12abc:	5dc7      	ldrb	r7, [r0, r7]
   12abe:	f806 7d01 	strb.w	r7, [r6, #-1]!
   12ac2:	462f      	mov	r7, r5
   12ac4:	42bb      	cmp	r3, r7
   12ac6:	460d      	mov	r5, r1
   12ac8:	d9f4      	bls.n	12ab4 <_printf_i+0xe0>
   12aca:	2b08      	cmp	r3, #8
   12acc:	d10b      	bne.n	12ae6 <_printf_i+0x112>
   12ace:	6823      	ldr	r3, [r4, #0]
   12ad0:	07df      	lsls	r7, r3, #31
   12ad2:	d508      	bpl.n	12ae6 <_printf_i+0x112>
   12ad4:	6923      	ldr	r3, [r4, #16]
   12ad6:	6861      	ldr	r1, [r4, #4]
   12ad8:	4299      	cmp	r1, r3
   12ada:	bfde      	ittt	le
   12adc:	2330      	movle	r3, #48	; 0x30
   12ade:	f806 3c01 	strble.w	r3, [r6, #-1]
   12ae2:	f106 36ff 	addle.w	r6, r6, #4294967295
   12ae6:	1b92      	subs	r2, r2, r6
   12ae8:	6122      	str	r2, [r4, #16]
   12aea:	f8cd a000 	str.w	sl, [sp]
   12aee:	464b      	mov	r3, r9
   12af0:	aa03      	add	r2, sp, #12
   12af2:	4621      	mov	r1, r4
   12af4:	4640      	mov	r0, r8
   12af6:	f00d fa56 	bl	1ffa6 <_printf_common>
   12afa:	3001      	adds	r0, #1
   12afc:	d171      	bne.n	12be2 <_printf_i+0x20e>
   12afe:	f04f 30ff 	mov.w	r0, #4294967295
   12b02:	b004      	add	sp, #16
   12b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12b08:	f023 0304 	bic.w	r3, r3, #4
   12b0c:	6023      	str	r3, [r4, #0]
   12b0e:	e7cd      	b.n	12aac <_printf_i+0xd8>
   12b10:	682b      	ldr	r3, [r5, #0]
   12b12:	6820      	ldr	r0, [r4, #0]
   12b14:	1d19      	adds	r1, r3, #4
   12b16:	6029      	str	r1, [r5, #0]
   12b18:	0605      	lsls	r5, r0, #24
   12b1a:	d501      	bpl.n	12b20 <_printf_i+0x14c>
   12b1c:	681d      	ldr	r5, [r3, #0]
   12b1e:	e002      	b.n	12b26 <_printf_i+0x152>
   12b20:	0641      	lsls	r1, r0, #25
   12b22:	d5fb      	bpl.n	12b1c <_printf_i+0x148>
   12b24:	881d      	ldrh	r5, [r3, #0]
   12b26:	4840      	ldr	r0, [pc, #256]	; (12c28 <_printf_i+0x254>)
   12b28:	2f6f      	cmp	r7, #111	; 0x6f
   12b2a:	bf14      	ite	ne
   12b2c:	230a      	movne	r3, #10
   12b2e:	2308      	moveq	r3, #8
   12b30:	2100      	movs	r1, #0
   12b32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   12b36:	6866      	ldr	r6, [r4, #4]
   12b38:	60a6      	str	r6, [r4, #8]
   12b3a:	2e00      	cmp	r6, #0
   12b3c:	dbb9      	blt.n	12ab2 <_printf_i+0xde>
   12b3e:	6821      	ldr	r1, [r4, #0]
   12b40:	f021 0104 	bic.w	r1, r1, #4
   12b44:	6021      	str	r1, [r4, #0]
   12b46:	2d00      	cmp	r5, #0
   12b48:	d1b3      	bne.n	12ab2 <_printf_i+0xde>
   12b4a:	2e00      	cmp	r6, #0
   12b4c:	d1b1      	bne.n	12ab2 <_printf_i+0xde>
   12b4e:	4616      	mov	r6, r2
   12b50:	e7bb      	b.n	12aca <_printf_i+0xf6>
   12b52:	6823      	ldr	r3, [r4, #0]
   12b54:	f043 0320 	orr.w	r3, r3, #32
   12b58:	6023      	str	r3, [r4, #0]
   12b5a:	4834      	ldr	r0, [pc, #208]	; (12c2c <_printf_i+0x258>)
   12b5c:	2778      	movs	r7, #120	; 0x78
   12b5e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   12b62:	6829      	ldr	r1, [r5, #0]
   12b64:	6823      	ldr	r3, [r4, #0]
   12b66:	1d0e      	adds	r6, r1, #4
   12b68:	602e      	str	r6, [r5, #0]
   12b6a:	061e      	lsls	r6, r3, #24
   12b6c:	d503      	bpl.n	12b76 <_printf_i+0x1a2>
   12b6e:	680d      	ldr	r5, [r1, #0]
   12b70:	e004      	b.n	12b7c <_printf_i+0x1a8>
   12b72:	482d      	ldr	r0, [pc, #180]	; (12c28 <_printf_i+0x254>)
   12b74:	e7f3      	b.n	12b5e <_printf_i+0x18a>
   12b76:	065d      	lsls	r5, r3, #25
   12b78:	d5f9      	bpl.n	12b6e <_printf_i+0x19a>
   12b7a:	880d      	ldrh	r5, [r1, #0]
   12b7c:	07d9      	lsls	r1, r3, #31
   12b7e:	bf44      	itt	mi
   12b80:	f043 0320 	orrmi.w	r3, r3, #32
   12b84:	6023      	strmi	r3, [r4, #0]
   12b86:	b10d      	cbz	r5, 12b8c <_printf_i+0x1b8>
   12b88:	2310      	movs	r3, #16
   12b8a:	e7d1      	b.n	12b30 <_printf_i+0x15c>
   12b8c:	6823      	ldr	r3, [r4, #0]
   12b8e:	f023 0320 	bic.w	r3, r3, #32
   12b92:	6023      	str	r3, [r4, #0]
   12b94:	e7f8      	b.n	12b88 <_printf_i+0x1b4>
   12b96:	4824      	ldr	r0, [pc, #144]	; (12c28 <_printf_i+0x254>)
   12b98:	230a      	movs	r3, #10
   12b9a:	e7cc      	b.n	12b36 <_printf_i+0x162>
   12b9c:	682b      	ldr	r3, [r5, #0]
   12b9e:	6826      	ldr	r6, [r4, #0]
   12ba0:	6961      	ldr	r1, [r4, #20]
   12ba2:	1d18      	adds	r0, r3, #4
   12ba4:	6028      	str	r0, [r5, #0]
   12ba6:	0635      	lsls	r5, r6, #24
   12ba8:	681b      	ldr	r3, [r3, #0]
   12baa:	d501      	bpl.n	12bb0 <_printf_i+0x1dc>
   12bac:	6019      	str	r1, [r3, #0]
   12bae:	e002      	b.n	12bb6 <_printf_i+0x1e2>
   12bb0:	0670      	lsls	r0, r6, #25
   12bb2:	d5fb      	bpl.n	12bac <_printf_i+0x1d8>
   12bb4:	8019      	strh	r1, [r3, #0]
   12bb6:	2300      	movs	r3, #0
   12bb8:	6123      	str	r3, [r4, #16]
   12bba:	4616      	mov	r6, r2
   12bbc:	e795      	b.n	12aea <_printf_i+0x116>
   12bbe:	682b      	ldr	r3, [r5, #0]
   12bc0:	1d1a      	adds	r2, r3, #4
   12bc2:	602a      	str	r2, [r5, #0]
   12bc4:	681e      	ldr	r6, [r3, #0]
   12bc6:	6862      	ldr	r2, [r4, #4]
   12bc8:	2100      	movs	r1, #0
   12bca:	4630      	mov	r0, r6
   12bcc:	f7ed fa98 	bl	100 <memchr>
   12bd0:	b108      	cbz	r0, 12bd6 <_printf_i+0x202>
   12bd2:	1b80      	subs	r0, r0, r6
   12bd4:	6060      	str	r0, [r4, #4]
   12bd6:	6863      	ldr	r3, [r4, #4]
   12bd8:	6123      	str	r3, [r4, #16]
   12bda:	2300      	movs	r3, #0
   12bdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   12be0:	e783      	b.n	12aea <_printf_i+0x116>
   12be2:	6923      	ldr	r3, [r4, #16]
   12be4:	4632      	mov	r2, r6
   12be6:	4649      	mov	r1, r9
   12be8:	4640      	mov	r0, r8
   12bea:	47d0      	blx	sl
   12bec:	3001      	adds	r0, #1
   12bee:	d086      	beq.n	12afe <_printf_i+0x12a>
   12bf0:	6823      	ldr	r3, [r4, #0]
   12bf2:	079b      	lsls	r3, r3, #30
   12bf4:	d414      	bmi.n	12c20 <_printf_i+0x24c>
   12bf6:	68e0      	ldr	r0, [r4, #12]
   12bf8:	9b03      	ldr	r3, [sp, #12]
   12bfa:	4298      	cmp	r0, r3
   12bfc:	bfb8      	it	lt
   12bfe:	4618      	movlt	r0, r3
   12c00:	e77f      	b.n	12b02 <_printf_i+0x12e>
   12c02:	2301      	movs	r3, #1
   12c04:	4632      	mov	r2, r6
   12c06:	4649      	mov	r1, r9
   12c08:	4640      	mov	r0, r8
   12c0a:	47d0      	blx	sl
   12c0c:	3001      	adds	r0, #1
   12c0e:	f43f af76 	beq.w	12afe <_printf_i+0x12a>
   12c12:	3501      	adds	r5, #1
   12c14:	68e3      	ldr	r3, [r4, #12]
   12c16:	9903      	ldr	r1, [sp, #12]
   12c18:	1a5b      	subs	r3, r3, r1
   12c1a:	42ab      	cmp	r3, r5
   12c1c:	dcf1      	bgt.n	12c02 <_printf_i+0x22e>
   12c1e:	e7ea      	b.n	12bf6 <_printf_i+0x222>
   12c20:	2500      	movs	r5, #0
   12c22:	f104 0619 	add.w	r6, r4, #25
   12c26:	e7f5      	b.n	12c14 <_printf_i+0x240>
   12c28:	0002286b 	.word	0x0002286b
   12c2c:	0002287c 	.word	0x0002287c

00012c30 <_sbrk_r>:
   12c30:	b538      	push	{r3, r4, r5, lr}
   12c32:	4d06      	ldr	r5, [pc, #24]	; (12c4c <_sbrk_r+0x1c>)
   12c34:	2300      	movs	r3, #0
   12c36:	4604      	mov	r4, r0
   12c38:	4608      	mov	r0, r1
   12c3a:	602b      	str	r3, [r5, #0]
   12c3c:	f7f3 fb3c 	bl	62b8 <_sbrk>
   12c40:	1c43      	adds	r3, r0, #1
   12c42:	d102      	bne.n	12c4a <_sbrk_r+0x1a>
   12c44:	682b      	ldr	r3, [r5, #0]
   12c46:	b103      	cbz	r3, 12c4a <_sbrk_r+0x1a>
   12c48:	6023      	str	r3, [r4, #0]
   12c4a:	bd38      	pop	{r3, r4, r5, pc}
   12c4c:	200037d4 	.word	0x200037d4

00012c50 <_strtol_l.constprop.0>:
   12c50:	2b24      	cmp	r3, #36	; 0x24
   12c52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12c56:	4686      	mov	lr, r0
   12c58:	4690      	mov	r8, r2
   12c5a:	d801      	bhi.n	12c60 <_strtol_l.constprop.0+0x10>
   12c5c:	2b01      	cmp	r3, #1
   12c5e:	d106      	bne.n	12c6e <_strtol_l.constprop.0+0x1e>
   12c60:	f006 fa32 	bl	190c8 <__errno>
   12c64:	2316      	movs	r3, #22
   12c66:	6003      	str	r3, [r0, #0]
   12c68:	2000      	movs	r0, #0
   12c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12c6e:	4836      	ldr	r0, [pc, #216]	; (12d48 <_strtol_l.constprop.0+0xf8>)
   12c70:	460d      	mov	r5, r1
   12c72:	462a      	mov	r2, r5
   12c74:	f815 4b01 	ldrb.w	r4, [r5], #1
   12c78:	5d06      	ldrb	r6, [r0, r4]
   12c7a:	f016 0608 	ands.w	r6, r6, #8
   12c7e:	d1f8      	bne.n	12c72 <_strtol_l.constprop.0+0x22>
   12c80:	2c2d      	cmp	r4, #45	; 0x2d
   12c82:	d124      	bne.n	12cce <_strtol_l.constprop.0+0x7e>
   12c84:	782c      	ldrb	r4, [r5, #0]
   12c86:	2601      	movs	r6, #1
   12c88:	1c95      	adds	r5, r2, #2
   12c8a:	bb2b      	cbnz	r3, 12cd8 <_strtol_l.constprop.0+0x88>
   12c8c:	2c30      	cmp	r4, #48	; 0x30
   12c8e:	d030      	beq.n	12cf2 <_strtol_l.constprop.0+0xa2>
   12c90:	230a      	movs	r3, #10
   12c92:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
   12c96:	f10c 3cff 	add.w	ip, ip, #4294967295
   12c9a:	2200      	movs	r2, #0
   12c9c:	fbbc f9f3 	udiv	r9, ip, r3
   12ca0:	4610      	mov	r0, r2
   12ca2:	fb03 ca19 	mls	sl, r3, r9, ip
   12ca6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
   12caa:	2f09      	cmp	r7, #9
   12cac:	d828      	bhi.n	12d00 <_strtol_l.constprop.0+0xb0>
   12cae:	463c      	mov	r4, r7
   12cb0:	42a3      	cmp	r3, r4
   12cb2:	dd34      	ble.n	12d1e <_strtol_l.constprop.0+0xce>
   12cb4:	1c57      	adds	r7, r2, #1
   12cb6:	d007      	beq.n	12cc8 <_strtol_l.constprop.0+0x78>
   12cb8:	4581      	cmp	r9, r0
   12cba:	d32d      	bcc.n	12d18 <_strtol_l.constprop.0+0xc8>
   12cbc:	d101      	bne.n	12cc2 <_strtol_l.constprop.0+0x72>
   12cbe:	45a2      	cmp	sl, r4
   12cc0:	db2a      	blt.n	12d18 <_strtol_l.constprop.0+0xc8>
   12cc2:	fb00 4003 	mla	r0, r0, r3, r4
   12cc6:	2201      	movs	r2, #1
   12cc8:	f815 4b01 	ldrb.w	r4, [r5], #1
   12ccc:	e7eb      	b.n	12ca6 <_strtol_l.constprop.0+0x56>
   12cce:	2c2b      	cmp	r4, #43	; 0x2b
   12cd0:	bf04      	itt	eq
   12cd2:	782c      	ldrbeq	r4, [r5, #0]
   12cd4:	1c95      	addeq	r5, r2, #2
   12cd6:	e7d8      	b.n	12c8a <_strtol_l.constprop.0+0x3a>
   12cd8:	2b10      	cmp	r3, #16
   12cda:	d1da      	bne.n	12c92 <_strtol_l.constprop.0+0x42>
   12cdc:	2c30      	cmp	r4, #48	; 0x30
   12cde:	d1d8      	bne.n	12c92 <_strtol_l.constprop.0+0x42>
   12ce0:	782a      	ldrb	r2, [r5, #0]
   12ce2:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   12ce6:	2a58      	cmp	r2, #88	; 0x58
   12ce8:	d1d3      	bne.n	12c92 <_strtol_l.constprop.0+0x42>
   12cea:	786c      	ldrb	r4, [r5, #1]
   12cec:	2310      	movs	r3, #16
   12cee:	3502      	adds	r5, #2
   12cf0:	e7cf      	b.n	12c92 <_strtol_l.constprop.0+0x42>
   12cf2:	782b      	ldrb	r3, [r5, #0]
   12cf4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   12cf8:	2b58      	cmp	r3, #88	; 0x58
   12cfa:	d0f6      	beq.n	12cea <_strtol_l.constprop.0+0x9a>
   12cfc:	2308      	movs	r3, #8
   12cfe:	e7c8      	b.n	12c92 <_strtol_l.constprop.0+0x42>
   12d00:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
   12d04:	2f19      	cmp	r7, #25
   12d06:	d801      	bhi.n	12d0c <_strtol_l.constprop.0+0xbc>
   12d08:	3c37      	subs	r4, #55	; 0x37
   12d0a:	e7d1      	b.n	12cb0 <_strtol_l.constprop.0+0x60>
   12d0c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
   12d10:	2f19      	cmp	r7, #25
   12d12:	d804      	bhi.n	12d1e <_strtol_l.constprop.0+0xce>
   12d14:	3c57      	subs	r4, #87	; 0x57
   12d16:	e7cb      	b.n	12cb0 <_strtol_l.constprop.0+0x60>
   12d18:	f04f 32ff 	mov.w	r2, #4294967295
   12d1c:	e7d4      	b.n	12cc8 <_strtol_l.constprop.0+0x78>
   12d1e:	1c53      	adds	r3, r2, #1
   12d20:	d108      	bne.n	12d34 <_strtol_l.constprop.0+0xe4>
   12d22:	2322      	movs	r3, #34	; 0x22
   12d24:	f8ce 3000 	str.w	r3, [lr]
   12d28:	4660      	mov	r0, ip
   12d2a:	f1b8 0f00 	cmp.w	r8, #0
   12d2e:	d09c      	beq.n	12c6a <_strtol_l.constprop.0+0x1a>
   12d30:	1e69      	subs	r1, r5, #1
   12d32:	e006      	b.n	12d42 <_strtol_l.constprop.0+0xf2>
   12d34:	b106      	cbz	r6, 12d38 <_strtol_l.constprop.0+0xe8>
   12d36:	4240      	negs	r0, r0
   12d38:	f1b8 0f00 	cmp.w	r8, #0
   12d3c:	d095      	beq.n	12c6a <_strtol_l.constprop.0+0x1a>
   12d3e:	2a00      	cmp	r2, #0
   12d40:	d1f6      	bne.n	12d30 <_strtol_l.constprop.0+0xe0>
   12d42:	f8c8 1000 	str.w	r1, [r8]
   12d46:	e790      	b.n	12c6a <_strtol_l.constprop.0+0x1a>
   12d48:	00022759 	.word	0x00022759

00012d4c <strtol>:
   12d4c:	4613      	mov	r3, r2
   12d4e:	460a      	mov	r2, r1
   12d50:	4601      	mov	r1, r0
   12d52:	4802      	ldr	r0, [pc, #8]	; (12d5c <strtol+0x10>)
   12d54:	6800      	ldr	r0, [r0, #0]
   12d56:	f7ff bf7b 	b.w	12c50 <_strtol_l.constprop.0>
   12d5a:	bf00      	nop
   12d5c:	20000138 	.word	0x20000138

00012d60 <_strtoul_l.constprop.0>:
   12d60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12d64:	4e36      	ldr	r6, [pc, #216]	; (12e40 <_strtoul_l.constprop.0+0xe0>)
   12d66:	4686      	mov	lr, r0
   12d68:	460d      	mov	r5, r1
   12d6a:	4628      	mov	r0, r5
   12d6c:	f815 4b01 	ldrb.w	r4, [r5], #1
   12d70:	5d37      	ldrb	r7, [r6, r4]
   12d72:	f017 0708 	ands.w	r7, r7, #8
   12d76:	d1f8      	bne.n	12d6a <_strtoul_l.constprop.0+0xa>
   12d78:	2c2d      	cmp	r4, #45	; 0x2d
   12d7a:	d126      	bne.n	12dca <_strtoul_l.constprop.0+0x6a>
   12d7c:	782c      	ldrb	r4, [r5, #0]
   12d7e:	2701      	movs	r7, #1
   12d80:	1c85      	adds	r5, r0, #2
   12d82:	bb3b      	cbnz	r3, 12dd4 <_strtoul_l.constprop.0+0x74>
   12d84:	2c30      	cmp	r4, #48	; 0x30
   12d86:	d032      	beq.n	12dee <_strtoul_l.constprop.0+0x8e>
   12d88:	230a      	movs	r3, #10
   12d8a:	f04f 38ff 	mov.w	r8, #4294967295
   12d8e:	2600      	movs	r6, #0
   12d90:	fbb8 f8f3 	udiv	r8, r8, r3
   12d94:	fb03 f908 	mul.w	r9, r3, r8
   12d98:	ea6f 0909 	mvn.w	r9, r9
   12d9c:	4630      	mov	r0, r6
   12d9e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
   12da2:	f1bc 0f09 	cmp.w	ip, #9
   12da6:	d829      	bhi.n	12dfc <_strtoul_l.constprop.0+0x9c>
   12da8:	4664      	mov	r4, ip
   12daa:	42a3      	cmp	r3, r4
   12dac:	dd37      	ble.n	12e1e <_strtoul_l.constprop.0+0xbe>
   12dae:	f1b6 3fff 	cmp.w	r6, #4294967295
   12db2:	d007      	beq.n	12dc4 <_strtoul_l.constprop.0+0x64>
   12db4:	4580      	cmp	r8, r0
   12db6:	d32f      	bcc.n	12e18 <_strtoul_l.constprop.0+0xb8>
   12db8:	d101      	bne.n	12dbe <_strtoul_l.constprop.0+0x5e>
   12dba:	45a1      	cmp	r9, r4
   12dbc:	db2c      	blt.n	12e18 <_strtoul_l.constprop.0+0xb8>
   12dbe:	fb00 4003 	mla	r0, r0, r3, r4
   12dc2:	2601      	movs	r6, #1
   12dc4:	f815 4b01 	ldrb.w	r4, [r5], #1
   12dc8:	e7e9      	b.n	12d9e <_strtoul_l.constprop.0+0x3e>
   12dca:	2c2b      	cmp	r4, #43	; 0x2b
   12dcc:	bf04      	itt	eq
   12dce:	782c      	ldrbeq	r4, [r5, #0]
   12dd0:	1c85      	addeq	r5, r0, #2
   12dd2:	e7d6      	b.n	12d82 <_strtoul_l.constprop.0+0x22>
   12dd4:	2b10      	cmp	r3, #16
   12dd6:	d1d8      	bne.n	12d8a <_strtoul_l.constprop.0+0x2a>
   12dd8:	2c30      	cmp	r4, #48	; 0x30
   12dda:	d1d6      	bne.n	12d8a <_strtoul_l.constprop.0+0x2a>
   12ddc:	7828      	ldrb	r0, [r5, #0]
   12dde:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   12de2:	2858      	cmp	r0, #88	; 0x58
   12de4:	d1d1      	bne.n	12d8a <_strtoul_l.constprop.0+0x2a>
   12de6:	786c      	ldrb	r4, [r5, #1]
   12de8:	2310      	movs	r3, #16
   12dea:	3502      	adds	r5, #2
   12dec:	e7cd      	b.n	12d8a <_strtoul_l.constprop.0+0x2a>
   12dee:	782b      	ldrb	r3, [r5, #0]
   12df0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   12df4:	2b58      	cmp	r3, #88	; 0x58
   12df6:	d0f6      	beq.n	12de6 <_strtoul_l.constprop.0+0x86>
   12df8:	2308      	movs	r3, #8
   12dfa:	e7c6      	b.n	12d8a <_strtoul_l.constprop.0+0x2a>
   12dfc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
   12e00:	f1bc 0f19 	cmp.w	ip, #25
   12e04:	d801      	bhi.n	12e0a <_strtoul_l.constprop.0+0xaa>
   12e06:	3c37      	subs	r4, #55	; 0x37
   12e08:	e7cf      	b.n	12daa <_strtoul_l.constprop.0+0x4a>
   12e0a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
   12e0e:	f1bc 0f19 	cmp.w	ip, #25
   12e12:	d804      	bhi.n	12e1e <_strtoul_l.constprop.0+0xbe>
   12e14:	3c57      	subs	r4, #87	; 0x57
   12e16:	e7c8      	b.n	12daa <_strtoul_l.constprop.0+0x4a>
   12e18:	f04f 36ff 	mov.w	r6, #4294967295
   12e1c:	e7d2      	b.n	12dc4 <_strtoul_l.constprop.0+0x64>
   12e1e:	1c73      	adds	r3, r6, #1
   12e20:	d106      	bne.n	12e30 <_strtoul_l.constprop.0+0xd0>
   12e22:	2322      	movs	r3, #34	; 0x22
   12e24:	f8ce 3000 	str.w	r3, [lr]
   12e28:	4630      	mov	r0, r6
   12e2a:	b932      	cbnz	r2, 12e3a <_strtoul_l.constprop.0+0xda>
   12e2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12e30:	b107      	cbz	r7, 12e34 <_strtoul_l.constprop.0+0xd4>
   12e32:	4240      	negs	r0, r0
   12e34:	2a00      	cmp	r2, #0
   12e36:	d0f9      	beq.n	12e2c <_strtoul_l.constprop.0+0xcc>
   12e38:	b106      	cbz	r6, 12e3c <_strtoul_l.constprop.0+0xdc>
   12e3a:	1e69      	subs	r1, r5, #1
   12e3c:	6011      	str	r1, [r2, #0]
   12e3e:	e7f5      	b.n	12e2c <_strtoul_l.constprop.0+0xcc>
   12e40:	00022759 	.word	0x00022759

00012e44 <strtoul>:
   12e44:	4613      	mov	r3, r2
   12e46:	460a      	mov	r2, r1
   12e48:	4601      	mov	r1, r0
   12e4a:	4802      	ldr	r0, [pc, #8]	; (12e54 <strtoul+0x10>)
   12e4c:	6800      	ldr	r0, [r0, #0]
   12e4e:	f7ff bf87 	b.w	12d60 <_strtoul_l.constprop.0>
   12e52:	bf00      	nop
   12e54:	20000138 	.word	0x20000138

00012e58 <_localeconv_r>:
   12e58:	4800      	ldr	r0, [pc, #0]	; (12e5c <_localeconv_r+0x4>)
   12e5a:	4770      	bx	lr
   12e5c:	2000028c 	.word	0x2000028c

00012e60 <__malloc_lock>:
   12e60:	4801      	ldr	r0, [pc, #4]	; (12e68 <__malloc_lock+0x8>)
   12e62:	f006 b925 	b.w	190b0 <__retarget_lock_acquire_recursive>
   12e66:	bf00      	nop
   12e68:	20000438 	.word	0x20000438

00012e6c <__malloc_unlock>:
   12e6c:	4801      	ldr	r0, [pc, #4]	; (12e74 <__malloc_unlock+0x8>)
   12e6e:	f006 b927 	b.w	190c0 <__retarget_lock_release_recursive>
   12e72:	bf00      	nop
   12e74:	20000438 	.word	0x20000438

00012e78 <_Balloc>:
   12e78:	b570      	push	{r4, r5, r6, lr}
   12e7a:	6a46      	ldr	r6, [r0, #36]	; 0x24
   12e7c:	4604      	mov	r4, r0
   12e7e:	460d      	mov	r5, r1
   12e80:	b976      	cbnz	r6, 12ea0 <_Balloc+0x28>
   12e82:	2010      	movs	r0, #16
   12e84:	f7ff fac4 	bl	12410 <malloc>
   12e88:	4602      	mov	r2, r0
   12e8a:	6260      	str	r0, [r4, #36]	; 0x24
   12e8c:	b920      	cbnz	r0, 12e98 <_Balloc+0x20>
   12e8e:	4b18      	ldr	r3, [pc, #96]	; (12ef0 <_Balloc+0x78>)
   12e90:	4818      	ldr	r0, [pc, #96]	; (12ef4 <_Balloc+0x7c>)
   12e92:	2166      	movs	r1, #102	; 0x66
   12e94:	f000 fb08 	bl	134a8 <__assert_func>
   12e98:	e9c0 6601 	strd	r6, r6, [r0, #4]
   12e9c:	6006      	str	r6, [r0, #0]
   12e9e:	60c6      	str	r6, [r0, #12]
   12ea0:	6a66      	ldr	r6, [r4, #36]	; 0x24
   12ea2:	68f3      	ldr	r3, [r6, #12]
   12ea4:	b183      	cbz	r3, 12ec8 <_Balloc+0x50>
   12ea6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   12ea8:	68db      	ldr	r3, [r3, #12]
   12eaa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   12eae:	b9b8      	cbnz	r0, 12ee0 <_Balloc+0x68>
   12eb0:	2101      	movs	r1, #1
   12eb2:	fa01 f605 	lsl.w	r6, r1, r5
   12eb6:	1d72      	adds	r2, r6, #5
   12eb8:	0092      	lsls	r2, r2, #2
   12eba:	4620      	mov	r0, r4
   12ebc:	f00c ffc4 	bl	1fe48 <_calloc_r>
   12ec0:	b160      	cbz	r0, 12edc <_Balloc+0x64>
   12ec2:	e9c0 5601 	strd	r5, r6, [r0, #4]
   12ec6:	e00e      	b.n	12ee6 <_Balloc+0x6e>
   12ec8:	2221      	movs	r2, #33	; 0x21
   12eca:	2104      	movs	r1, #4
   12ecc:	4620      	mov	r0, r4
   12ece:	f00c ffbb 	bl	1fe48 <_calloc_r>
   12ed2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   12ed4:	60f0      	str	r0, [r6, #12]
   12ed6:	68db      	ldr	r3, [r3, #12]
   12ed8:	2b00      	cmp	r3, #0
   12eda:	d1e4      	bne.n	12ea6 <_Balloc+0x2e>
   12edc:	2000      	movs	r0, #0
   12ede:	bd70      	pop	{r4, r5, r6, pc}
   12ee0:	6802      	ldr	r2, [r0, #0]
   12ee2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   12ee6:	2300      	movs	r3, #0
   12ee8:	e9c0 3303 	strd	r3, r3, [r0, #12]
   12eec:	e7f7      	b.n	12ede <_Balloc+0x66>
   12eee:	bf00      	nop
   12ef0:	0002289a 	.word	0x0002289a
   12ef4:	00022936 	.word	0x00022936

00012ef8 <_Bfree>:
   12ef8:	b570      	push	{r4, r5, r6, lr}
   12efa:	6a46      	ldr	r6, [r0, #36]	; 0x24
   12efc:	4605      	mov	r5, r0
   12efe:	460c      	mov	r4, r1
   12f00:	b976      	cbnz	r6, 12f20 <_Bfree+0x28>
   12f02:	2010      	movs	r0, #16
   12f04:	f7ff fa84 	bl	12410 <malloc>
   12f08:	4602      	mov	r2, r0
   12f0a:	6268      	str	r0, [r5, #36]	; 0x24
   12f0c:	b920      	cbnz	r0, 12f18 <_Bfree+0x20>
   12f0e:	4b09      	ldr	r3, [pc, #36]	; (12f34 <_Bfree+0x3c>)
   12f10:	4809      	ldr	r0, [pc, #36]	; (12f38 <_Bfree+0x40>)
   12f12:	218a      	movs	r1, #138	; 0x8a
   12f14:	f000 fac8 	bl	134a8 <__assert_func>
   12f18:	e9c0 6601 	strd	r6, r6, [r0, #4]
   12f1c:	6006      	str	r6, [r0, #0]
   12f1e:	60c6      	str	r6, [r0, #12]
   12f20:	b13c      	cbz	r4, 12f32 <_Bfree+0x3a>
   12f22:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   12f24:	6862      	ldr	r2, [r4, #4]
   12f26:	68db      	ldr	r3, [r3, #12]
   12f28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   12f2c:	6021      	str	r1, [r4, #0]
   12f2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   12f32:	bd70      	pop	{r4, r5, r6, pc}
   12f34:	0002289a 	.word	0x0002289a
   12f38:	00022936 	.word	0x00022936

00012f3c <__multadd>:
   12f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12f40:	690d      	ldr	r5, [r1, #16]
   12f42:	4607      	mov	r7, r0
   12f44:	460c      	mov	r4, r1
   12f46:	461e      	mov	r6, r3
   12f48:	f101 0c14 	add.w	ip, r1, #20
   12f4c:	2000      	movs	r0, #0
   12f4e:	f8dc 3000 	ldr.w	r3, [ip]
   12f52:	b299      	uxth	r1, r3
   12f54:	fb02 6101 	mla	r1, r2, r1, r6
   12f58:	0c1e      	lsrs	r6, r3, #16
   12f5a:	0c0b      	lsrs	r3, r1, #16
   12f5c:	fb02 3306 	mla	r3, r2, r6, r3
   12f60:	b289      	uxth	r1, r1
   12f62:	3001      	adds	r0, #1
   12f64:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   12f68:	4285      	cmp	r5, r0
   12f6a:	f84c 1b04 	str.w	r1, [ip], #4
   12f6e:	ea4f 4613 	mov.w	r6, r3, lsr #16
   12f72:	dcec      	bgt.n	12f4e <__multadd+0x12>
   12f74:	b30e      	cbz	r6, 12fba <__multadd+0x7e>
   12f76:	68a3      	ldr	r3, [r4, #8]
   12f78:	42ab      	cmp	r3, r5
   12f7a:	dc19      	bgt.n	12fb0 <__multadd+0x74>
   12f7c:	6861      	ldr	r1, [r4, #4]
   12f7e:	4638      	mov	r0, r7
   12f80:	3101      	adds	r1, #1
   12f82:	f7ff ff79 	bl	12e78 <_Balloc>
   12f86:	4680      	mov	r8, r0
   12f88:	b928      	cbnz	r0, 12f96 <__multadd+0x5a>
   12f8a:	4602      	mov	r2, r0
   12f8c:	4b0c      	ldr	r3, [pc, #48]	; (12fc0 <__multadd+0x84>)
   12f8e:	480d      	ldr	r0, [pc, #52]	; (12fc4 <__multadd+0x88>)
   12f90:	21b5      	movs	r1, #181	; 0xb5
   12f92:	f000 fa89 	bl	134a8 <__assert_func>
   12f96:	6922      	ldr	r2, [r4, #16]
   12f98:	3202      	adds	r2, #2
   12f9a:	f104 010c 	add.w	r1, r4, #12
   12f9e:	0092      	lsls	r2, r2, #2
   12fa0:	300c      	adds	r0, #12
   12fa2:	f00c ff0e 	bl	1fdc2 <memcpy>
   12fa6:	4621      	mov	r1, r4
   12fa8:	4638      	mov	r0, r7
   12faa:	f7ff ffa5 	bl	12ef8 <_Bfree>
   12fae:	4644      	mov	r4, r8
   12fb0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   12fb4:	3501      	adds	r5, #1
   12fb6:	615e      	str	r6, [r3, #20]
   12fb8:	6125      	str	r5, [r4, #16]
   12fba:	4620      	mov	r0, r4
   12fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12fc0:	00022925 	.word	0x00022925
   12fc4:	00022936 	.word	0x00022936

00012fc8 <__i2b>:
   12fc8:	b510      	push	{r4, lr}
   12fca:	460c      	mov	r4, r1
   12fcc:	2101      	movs	r1, #1
   12fce:	f7ff ff53 	bl	12e78 <_Balloc>
   12fd2:	4602      	mov	r2, r0
   12fd4:	b928      	cbnz	r0, 12fe2 <__i2b+0x1a>
   12fd6:	4b05      	ldr	r3, [pc, #20]	; (12fec <__i2b+0x24>)
   12fd8:	4805      	ldr	r0, [pc, #20]	; (12ff0 <__i2b+0x28>)
   12fda:	f44f 71a0 	mov.w	r1, #320	; 0x140
   12fde:	f000 fa63 	bl	134a8 <__assert_func>
   12fe2:	2301      	movs	r3, #1
   12fe4:	6144      	str	r4, [r0, #20]
   12fe6:	6103      	str	r3, [r0, #16]
   12fe8:	bd10      	pop	{r4, pc}
   12fea:	bf00      	nop
   12fec:	00022925 	.word	0x00022925
   12ff0:	00022936 	.word	0x00022936

00012ff4 <__multiply>:
   12ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ff8:	4614      	mov	r4, r2
   12ffa:	690a      	ldr	r2, [r1, #16]
   12ffc:	6923      	ldr	r3, [r4, #16]
   12ffe:	429a      	cmp	r2, r3
   13000:	bfa8      	it	ge
   13002:	4623      	movge	r3, r4
   13004:	460f      	mov	r7, r1
   13006:	bfa4      	itt	ge
   13008:	460c      	movge	r4, r1
   1300a:	461f      	movge	r7, r3
   1300c:	f8d4 a010 	ldr.w	sl, [r4, #16]
   13010:	f8d7 9010 	ldr.w	r9, [r7, #16]
   13014:	68a3      	ldr	r3, [r4, #8]
   13016:	6861      	ldr	r1, [r4, #4]
   13018:	eb0a 0609 	add.w	r6, sl, r9
   1301c:	42b3      	cmp	r3, r6
   1301e:	b085      	sub	sp, #20
   13020:	bfb8      	it	lt
   13022:	3101      	addlt	r1, #1
   13024:	f7ff ff28 	bl	12e78 <_Balloc>
   13028:	b930      	cbnz	r0, 13038 <__multiply+0x44>
   1302a:	4602      	mov	r2, r0
   1302c:	4b44      	ldr	r3, [pc, #272]	; (13140 <__multiply+0x14c>)
   1302e:	4845      	ldr	r0, [pc, #276]	; (13144 <__multiply+0x150>)
   13030:	f240 115d 	movw	r1, #349	; 0x15d
   13034:	f000 fa38 	bl	134a8 <__assert_func>
   13038:	f100 0514 	add.w	r5, r0, #20
   1303c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   13040:	462b      	mov	r3, r5
   13042:	2200      	movs	r2, #0
   13044:	4543      	cmp	r3, r8
   13046:	d321      	bcc.n	1308c <__multiply+0x98>
   13048:	f107 0114 	add.w	r1, r7, #20
   1304c:	f104 0214 	add.w	r2, r4, #20
   13050:	eb02 028a 	add.w	r2, r2, sl, lsl #2
   13054:	eb01 0389 	add.w	r3, r1, r9, lsl #2
   13058:	9302      	str	r3, [sp, #8]
   1305a:	1b13      	subs	r3, r2, r4
   1305c:	3b15      	subs	r3, #21
   1305e:	f023 0303 	bic.w	r3, r3, #3
   13062:	3304      	adds	r3, #4
   13064:	f104 0715 	add.w	r7, r4, #21
   13068:	42ba      	cmp	r2, r7
   1306a:	bf38      	it	cc
   1306c:	2304      	movcc	r3, #4
   1306e:	9301      	str	r3, [sp, #4]
   13070:	9b02      	ldr	r3, [sp, #8]
   13072:	9103      	str	r1, [sp, #12]
   13074:	428b      	cmp	r3, r1
   13076:	d80c      	bhi.n	13092 <__multiply+0x9e>
   13078:	2e00      	cmp	r6, #0
   1307a:	dd03      	ble.n	13084 <__multiply+0x90>
   1307c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   13080:	2b00      	cmp	r3, #0
   13082:	d05a      	beq.n	1313a <__multiply+0x146>
   13084:	6106      	str	r6, [r0, #16]
   13086:	b005      	add	sp, #20
   13088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1308c:	f843 2b04 	str.w	r2, [r3], #4
   13090:	e7d8      	b.n	13044 <__multiply+0x50>
   13092:	f8b1 a000 	ldrh.w	sl, [r1]
   13096:	f1ba 0f00 	cmp.w	sl, #0
   1309a:	d023      	beq.n	130e4 <__multiply+0xf0>
   1309c:	f104 0e14 	add.w	lr, r4, #20
   130a0:	46a9      	mov	r9, r5
   130a2:	f04f 0c00 	mov.w	ip, #0
   130a6:	f85e 7b04 	ldr.w	r7, [lr], #4
   130aa:	f8d9 3000 	ldr.w	r3, [r9]
   130ae:	fa1f fb87 	uxth.w	fp, r7
   130b2:	b29b      	uxth	r3, r3
   130b4:	fb0a 330b 	mla	r3, sl, fp, r3
   130b8:	4463      	add	r3, ip
   130ba:	f8d9 c000 	ldr.w	ip, [r9]
   130be:	0c3f      	lsrs	r7, r7, #16
   130c0:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
   130c4:	fb0a c707 	mla	r7, sl, r7, ip
   130c8:	eb07 4713 	add.w	r7, r7, r3, lsr #16
   130cc:	b29b      	uxth	r3, r3
   130ce:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   130d2:	4572      	cmp	r2, lr
   130d4:	f849 3b04 	str.w	r3, [r9], #4
   130d8:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   130dc:	d8e3      	bhi.n	130a6 <__multiply+0xb2>
   130de:	9b01      	ldr	r3, [sp, #4]
   130e0:	f845 c003 	str.w	ip, [r5, r3]
   130e4:	9b03      	ldr	r3, [sp, #12]
   130e6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   130ea:	3104      	adds	r1, #4
   130ec:	f1b9 0f00 	cmp.w	r9, #0
   130f0:	d021      	beq.n	13136 <__multiply+0x142>
   130f2:	682b      	ldr	r3, [r5, #0]
   130f4:	f104 0c14 	add.w	ip, r4, #20
   130f8:	46ae      	mov	lr, r5
   130fa:	f04f 0a00 	mov.w	sl, #0
   130fe:	f8bc b000 	ldrh.w	fp, [ip]
   13102:	f8be 7002 	ldrh.w	r7, [lr, #2]
   13106:	fb09 770b 	mla	r7, r9, fp, r7
   1310a:	4457      	add	r7, sl
   1310c:	b29b      	uxth	r3, r3
   1310e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   13112:	f84e 3b04 	str.w	r3, [lr], #4
   13116:	f85c 3b04 	ldr.w	r3, [ip], #4
   1311a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   1311e:	f8be 3000 	ldrh.w	r3, [lr]
   13122:	fb09 330a 	mla	r3, r9, sl, r3
   13126:	eb03 4317 	add.w	r3, r3, r7, lsr #16
   1312a:	4562      	cmp	r2, ip
   1312c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   13130:	d8e5      	bhi.n	130fe <__multiply+0x10a>
   13132:	9f01      	ldr	r7, [sp, #4]
   13134:	51eb      	str	r3, [r5, r7]
   13136:	3504      	adds	r5, #4
   13138:	e79a      	b.n	13070 <__multiply+0x7c>
   1313a:	3e01      	subs	r6, #1
   1313c:	e79c      	b.n	13078 <__multiply+0x84>
   1313e:	bf00      	nop
   13140:	00022925 	.word	0x00022925
   13144:	00022936 	.word	0x00022936

00013148 <__pow5mult>:
   13148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1314c:	4615      	mov	r5, r2
   1314e:	f012 0203 	ands.w	r2, r2, #3
   13152:	4607      	mov	r7, r0
   13154:	460e      	mov	r6, r1
   13156:	d007      	beq.n	13168 <__pow5mult+0x20>
   13158:	4c25      	ldr	r4, [pc, #148]	; (131f0 <__pow5mult+0xa8>)
   1315a:	3a01      	subs	r2, #1
   1315c:	2300      	movs	r3, #0
   1315e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   13162:	f7ff feeb 	bl	12f3c <__multadd>
   13166:	4606      	mov	r6, r0
   13168:	10ad      	asrs	r5, r5, #2
   1316a:	d03d      	beq.n	131e8 <__pow5mult+0xa0>
   1316c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   1316e:	b97c      	cbnz	r4, 13190 <__pow5mult+0x48>
   13170:	2010      	movs	r0, #16
   13172:	f7ff f94d 	bl	12410 <malloc>
   13176:	4602      	mov	r2, r0
   13178:	6278      	str	r0, [r7, #36]	; 0x24
   1317a:	b928      	cbnz	r0, 13188 <__pow5mult+0x40>
   1317c:	4b1d      	ldr	r3, [pc, #116]	; (131f4 <__pow5mult+0xac>)
   1317e:	481e      	ldr	r0, [pc, #120]	; (131f8 <__pow5mult+0xb0>)
   13180:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   13184:	f000 f990 	bl	134a8 <__assert_func>
   13188:	e9c0 4401 	strd	r4, r4, [r0, #4]
   1318c:	6004      	str	r4, [r0, #0]
   1318e:	60c4      	str	r4, [r0, #12]
   13190:	f8d7 8024 	ldr.w	r8, [r7, #36]	; 0x24
   13194:	f8d8 4008 	ldr.w	r4, [r8, #8]
   13198:	b94c      	cbnz	r4, 131ae <__pow5mult+0x66>
   1319a:	f240 2171 	movw	r1, #625	; 0x271
   1319e:	4638      	mov	r0, r7
   131a0:	f7ff ff12 	bl	12fc8 <__i2b>
   131a4:	2300      	movs	r3, #0
   131a6:	f8c8 0008 	str.w	r0, [r8, #8]
   131aa:	4604      	mov	r4, r0
   131ac:	6003      	str	r3, [r0, #0]
   131ae:	f04f 0900 	mov.w	r9, #0
   131b2:	07eb      	lsls	r3, r5, #31
   131b4:	d50a      	bpl.n	131cc <__pow5mult+0x84>
   131b6:	4631      	mov	r1, r6
   131b8:	4622      	mov	r2, r4
   131ba:	4638      	mov	r0, r7
   131bc:	f7ff ff1a 	bl	12ff4 <__multiply>
   131c0:	4631      	mov	r1, r6
   131c2:	4680      	mov	r8, r0
   131c4:	4638      	mov	r0, r7
   131c6:	f7ff fe97 	bl	12ef8 <_Bfree>
   131ca:	4646      	mov	r6, r8
   131cc:	106d      	asrs	r5, r5, #1
   131ce:	d00b      	beq.n	131e8 <__pow5mult+0xa0>
   131d0:	6820      	ldr	r0, [r4, #0]
   131d2:	b938      	cbnz	r0, 131e4 <__pow5mult+0x9c>
   131d4:	4622      	mov	r2, r4
   131d6:	4621      	mov	r1, r4
   131d8:	4638      	mov	r0, r7
   131da:	f7ff ff0b 	bl	12ff4 <__multiply>
   131de:	6020      	str	r0, [r4, #0]
   131e0:	f8c0 9000 	str.w	r9, [r0]
   131e4:	4604      	mov	r4, r0
   131e6:	e7e4      	b.n	131b2 <__pow5mult+0x6a>
   131e8:	4630      	mov	r0, r6
   131ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   131ee:	bf00      	nop
   131f0:	00022564 	.word	0x00022564
   131f4:	0002289a 	.word	0x0002289a
   131f8:	00022936 	.word	0x00022936

000131fc <__lshift>:
   131fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13200:	460c      	mov	r4, r1
   13202:	6849      	ldr	r1, [r1, #4]
   13204:	6923      	ldr	r3, [r4, #16]
   13206:	eb03 1862 	add.w	r8, r3, r2, asr #5
   1320a:	68a3      	ldr	r3, [r4, #8]
   1320c:	4607      	mov	r7, r0
   1320e:	4691      	mov	r9, r2
   13210:	ea4f 1a62 	mov.w	sl, r2, asr #5
   13214:	f108 0601 	add.w	r6, r8, #1
   13218:	42b3      	cmp	r3, r6
   1321a:	db0b      	blt.n	13234 <__lshift+0x38>
   1321c:	4638      	mov	r0, r7
   1321e:	f7ff fe2b 	bl	12e78 <_Balloc>
   13222:	4605      	mov	r5, r0
   13224:	b948      	cbnz	r0, 1323a <__lshift+0x3e>
   13226:	4602      	mov	r2, r0
   13228:	4b28      	ldr	r3, [pc, #160]	; (132cc <__lshift+0xd0>)
   1322a:	4829      	ldr	r0, [pc, #164]	; (132d0 <__lshift+0xd4>)
   1322c:	f240 11d9 	movw	r1, #473	; 0x1d9
   13230:	f000 f93a 	bl	134a8 <__assert_func>
   13234:	3101      	adds	r1, #1
   13236:	005b      	lsls	r3, r3, #1
   13238:	e7ee      	b.n	13218 <__lshift+0x1c>
   1323a:	2300      	movs	r3, #0
   1323c:	f100 0114 	add.w	r1, r0, #20
   13240:	f100 0210 	add.w	r2, r0, #16
   13244:	4618      	mov	r0, r3
   13246:	4553      	cmp	r3, sl
   13248:	db33      	blt.n	132b2 <__lshift+0xb6>
   1324a:	6920      	ldr	r0, [r4, #16]
   1324c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   13250:	f104 0314 	add.w	r3, r4, #20
   13254:	f019 091f 	ands.w	r9, r9, #31
   13258:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   1325c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   13260:	d02b      	beq.n	132ba <__lshift+0xbe>
   13262:	f1c9 0e20 	rsb	lr, r9, #32
   13266:	468a      	mov	sl, r1
   13268:	2200      	movs	r2, #0
   1326a:	6818      	ldr	r0, [r3, #0]
   1326c:	fa00 f009 	lsl.w	r0, r0, r9
   13270:	4310      	orrs	r0, r2
   13272:	f84a 0b04 	str.w	r0, [sl], #4
   13276:	f853 2b04 	ldr.w	r2, [r3], #4
   1327a:	459c      	cmp	ip, r3
   1327c:	fa22 f20e 	lsr.w	r2, r2, lr
   13280:	d8f3      	bhi.n	1326a <__lshift+0x6e>
   13282:	ebac 0304 	sub.w	r3, ip, r4
   13286:	3b15      	subs	r3, #21
   13288:	f023 0303 	bic.w	r3, r3, #3
   1328c:	3304      	adds	r3, #4
   1328e:	f104 0015 	add.w	r0, r4, #21
   13292:	4584      	cmp	ip, r0
   13294:	bf38      	it	cc
   13296:	2304      	movcc	r3, #4
   13298:	50ca      	str	r2, [r1, r3]
   1329a:	b10a      	cbz	r2, 132a0 <__lshift+0xa4>
   1329c:	f108 0602 	add.w	r6, r8, #2
   132a0:	3e01      	subs	r6, #1
   132a2:	4638      	mov	r0, r7
   132a4:	612e      	str	r6, [r5, #16]
   132a6:	4621      	mov	r1, r4
   132a8:	f7ff fe26 	bl	12ef8 <_Bfree>
   132ac:	4628      	mov	r0, r5
   132ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   132b2:	f842 0f04 	str.w	r0, [r2, #4]!
   132b6:	3301      	adds	r3, #1
   132b8:	e7c5      	b.n	13246 <__lshift+0x4a>
   132ba:	3904      	subs	r1, #4
   132bc:	f853 2b04 	ldr.w	r2, [r3], #4
   132c0:	f841 2f04 	str.w	r2, [r1, #4]!
   132c4:	459c      	cmp	ip, r3
   132c6:	d8f9      	bhi.n	132bc <__lshift+0xc0>
   132c8:	e7ea      	b.n	132a0 <__lshift+0xa4>
   132ca:	bf00      	nop
   132cc:	00022925 	.word	0x00022925
   132d0:	00022936 	.word	0x00022936

000132d4 <__mdiff>:
   132d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   132d8:	4689      	mov	r9, r1
   132da:	4606      	mov	r6, r0
   132dc:	4611      	mov	r1, r2
   132de:	4648      	mov	r0, r9
   132e0:	4614      	mov	r4, r2
   132e2:	f00d f85a 	bl	2039a <__mcmp>
   132e6:	1e05      	subs	r5, r0, #0
   132e8:	d112      	bne.n	13310 <__mdiff+0x3c>
   132ea:	4629      	mov	r1, r5
   132ec:	4630      	mov	r0, r6
   132ee:	f7ff fdc3 	bl	12e78 <_Balloc>
   132f2:	4602      	mov	r2, r0
   132f4:	b928      	cbnz	r0, 13302 <__mdiff+0x2e>
   132f6:	4b3e      	ldr	r3, [pc, #248]	; (133f0 <__mdiff+0x11c>)
   132f8:	f240 2132 	movw	r1, #562	; 0x232
   132fc:	483d      	ldr	r0, [pc, #244]	; (133f4 <__mdiff+0x120>)
   132fe:	f000 f8d3 	bl	134a8 <__assert_func>
   13302:	2301      	movs	r3, #1
   13304:	e9c0 3504 	strd	r3, r5, [r0, #16]
   13308:	4610      	mov	r0, r2
   1330a:	b003      	add	sp, #12
   1330c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13310:	bfbc      	itt	lt
   13312:	464b      	movlt	r3, r9
   13314:	46a1      	movlt	r9, r4
   13316:	4630      	mov	r0, r6
   13318:	f8d9 1004 	ldr.w	r1, [r9, #4]
   1331c:	bfba      	itte	lt
   1331e:	461c      	movlt	r4, r3
   13320:	2501      	movlt	r5, #1
   13322:	2500      	movge	r5, #0
   13324:	f7ff fda8 	bl	12e78 <_Balloc>
   13328:	4602      	mov	r2, r0
   1332a:	b918      	cbnz	r0, 13334 <__mdiff+0x60>
   1332c:	4b30      	ldr	r3, [pc, #192]	; (133f0 <__mdiff+0x11c>)
   1332e:	f44f 7110 	mov.w	r1, #576	; 0x240
   13332:	e7e3      	b.n	132fc <__mdiff+0x28>
   13334:	f8d9 7010 	ldr.w	r7, [r9, #16]
   13338:	6926      	ldr	r6, [r4, #16]
   1333a:	60c5      	str	r5, [r0, #12]
   1333c:	f109 0310 	add.w	r3, r9, #16
   13340:	f109 0514 	add.w	r5, r9, #20
   13344:	f104 0e14 	add.w	lr, r4, #20
   13348:	f100 0b14 	add.w	fp, r0, #20
   1334c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
   13350:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
   13354:	9301      	str	r3, [sp, #4]
   13356:	46d9      	mov	r9, fp
   13358:	f04f 0c00 	mov.w	ip, #0
   1335c:	9b01      	ldr	r3, [sp, #4]
   1335e:	f85e 0b04 	ldr.w	r0, [lr], #4
   13362:	f853 af04 	ldr.w	sl, [r3, #4]!
   13366:	9301      	str	r3, [sp, #4]
   13368:	b281      	uxth	r1, r0
   1336a:	fa1f f38a 	uxth.w	r3, sl
   1336e:	1a5b      	subs	r3, r3, r1
   13370:	0c00      	lsrs	r0, r0, #16
   13372:	4463      	add	r3, ip
   13374:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
   13378:	eb00 4023 	add.w	r0, r0, r3, asr #16
   1337c:	b29b      	uxth	r3, r3
   1337e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   13382:	4576      	cmp	r6, lr
   13384:	f849 3b04 	str.w	r3, [r9], #4
   13388:	ea4f 4c20 	mov.w	ip, r0, asr #16
   1338c:	d8e6      	bhi.n	1335c <__mdiff+0x88>
   1338e:	1b33      	subs	r3, r6, r4
   13390:	3b15      	subs	r3, #21
   13392:	f023 0303 	bic.w	r3, r3, #3
   13396:	3415      	adds	r4, #21
   13398:	3304      	adds	r3, #4
   1339a:	42a6      	cmp	r6, r4
   1339c:	bf38      	it	cc
   1339e:	2304      	movcc	r3, #4
   133a0:	441d      	add	r5, r3
   133a2:	445b      	add	r3, fp
   133a4:	461e      	mov	r6, r3
   133a6:	462c      	mov	r4, r5
   133a8:	4544      	cmp	r4, r8
   133aa:	d30e      	bcc.n	133ca <__mdiff+0xf6>
   133ac:	f108 0103 	add.w	r1, r8, #3
   133b0:	1b49      	subs	r1, r1, r5
   133b2:	f021 0103 	bic.w	r1, r1, #3
   133b6:	3d03      	subs	r5, #3
   133b8:	45a8      	cmp	r8, r5
   133ba:	bf38      	it	cc
   133bc:	2100      	movcc	r1, #0
   133be:	440b      	add	r3, r1
   133c0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   133c4:	b191      	cbz	r1, 133ec <__mdiff+0x118>
   133c6:	6117      	str	r7, [r2, #16]
   133c8:	e79e      	b.n	13308 <__mdiff+0x34>
   133ca:	f854 1b04 	ldr.w	r1, [r4], #4
   133ce:	46e6      	mov	lr, ip
   133d0:	0c08      	lsrs	r0, r1, #16
   133d2:	fa1c fc81 	uxtah	ip, ip, r1
   133d6:	4471      	add	r1, lr
   133d8:	eb00 402c 	add.w	r0, r0, ip, asr #16
   133dc:	b289      	uxth	r1, r1
   133de:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   133e2:	f846 1b04 	str.w	r1, [r6], #4
   133e6:	ea4f 4c20 	mov.w	ip, r0, asr #16
   133ea:	e7dd      	b.n	133a8 <__mdiff+0xd4>
   133ec:	3f01      	subs	r7, #1
   133ee:	e7e7      	b.n	133c0 <__mdiff+0xec>
   133f0:	00022925 	.word	0x00022925
   133f4:	00022936 	.word	0x00022936

000133f8 <__d2b>:
   133f8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   133fc:	2101      	movs	r1, #1
   133fe:	9e08      	ldr	r6, [sp, #32]
   13400:	4690      	mov	r8, r2
   13402:	4699      	mov	r9, r3
   13404:	f7ff fd38 	bl	12e78 <_Balloc>
   13408:	4604      	mov	r4, r0
   1340a:	b930      	cbnz	r0, 1341a <__d2b+0x22>
   1340c:	4602      	mov	r2, r0
   1340e:	4b24      	ldr	r3, [pc, #144]	; (134a0 <__d2b+0xa8>)
   13410:	4824      	ldr	r0, [pc, #144]	; (134a4 <__d2b+0xac>)
   13412:	f240 310a 	movw	r1, #778	; 0x30a
   13416:	f000 f847 	bl	134a8 <__assert_func>
   1341a:	f3c9 550a 	ubfx	r5, r9, #20, #11
   1341e:	f3c9 0313 	ubfx	r3, r9, #0, #20
   13422:	b10d      	cbz	r5, 13428 <__d2b+0x30>
   13424:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   13428:	9301      	str	r3, [sp, #4]
   1342a:	f1b8 0300 	subs.w	r3, r8, #0
   1342e:	d024      	beq.n	1347a <__d2b+0x82>
   13430:	4668      	mov	r0, sp
   13432:	9300      	str	r3, [sp, #0]
   13434:	f00c ff84 	bl	20340 <__lo0bits>
   13438:	e9dd 1200 	ldrd	r1, r2, [sp]
   1343c:	b1d8      	cbz	r0, 13476 <__d2b+0x7e>
   1343e:	f1c0 0320 	rsb	r3, r0, #32
   13442:	fa02 f303 	lsl.w	r3, r2, r3
   13446:	430b      	orrs	r3, r1
   13448:	40c2      	lsrs	r2, r0
   1344a:	6163      	str	r3, [r4, #20]
   1344c:	9201      	str	r2, [sp, #4]
   1344e:	9b01      	ldr	r3, [sp, #4]
   13450:	61a3      	str	r3, [r4, #24]
   13452:	2b00      	cmp	r3, #0
   13454:	bf0c      	ite	eq
   13456:	2201      	moveq	r2, #1
   13458:	2202      	movne	r2, #2
   1345a:	6122      	str	r2, [r4, #16]
   1345c:	b1ad      	cbz	r5, 1348a <__d2b+0x92>
   1345e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   13462:	4405      	add	r5, r0
   13464:	6035      	str	r5, [r6, #0]
   13466:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   1346a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1346c:	6018      	str	r0, [r3, #0]
   1346e:	4620      	mov	r0, r4
   13470:	b002      	add	sp, #8
   13472:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   13476:	6161      	str	r1, [r4, #20]
   13478:	e7e9      	b.n	1344e <__d2b+0x56>
   1347a:	a801      	add	r0, sp, #4
   1347c:	f00c ff60 	bl	20340 <__lo0bits>
   13480:	9b01      	ldr	r3, [sp, #4]
   13482:	6163      	str	r3, [r4, #20]
   13484:	3020      	adds	r0, #32
   13486:	2201      	movs	r2, #1
   13488:	e7e7      	b.n	1345a <__d2b+0x62>
   1348a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   1348e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   13492:	6030      	str	r0, [r6, #0]
   13494:	6918      	ldr	r0, [r3, #16]
   13496:	f00c ff31 	bl	202fc <__hi0bits>
   1349a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   1349e:	e7e4      	b.n	1346a <__d2b+0x72>
   134a0:	00022925 	.word	0x00022925
   134a4:	00022936 	.word	0x00022936

000134a8 <__assert_func>:
   134a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   134aa:	4614      	mov	r4, r2
   134ac:	461a      	mov	r2, r3
   134ae:	4b09      	ldr	r3, [pc, #36]	; (134d4 <__assert_func+0x2c>)
   134b0:	681b      	ldr	r3, [r3, #0]
   134b2:	4605      	mov	r5, r0
   134b4:	68d8      	ldr	r0, [r3, #12]
   134b6:	b954      	cbnz	r4, 134ce <__assert_func+0x26>
   134b8:	4b07      	ldr	r3, [pc, #28]	; (134d8 <__assert_func+0x30>)
   134ba:	461c      	mov	r4, r3
   134bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
   134c0:	9100      	str	r1, [sp, #0]
   134c2:	462b      	mov	r3, r5
   134c4:	4905      	ldr	r1, [pc, #20]	; (134dc <__assert_func+0x34>)
   134c6:	f000 f80d 	bl	134e4 <fiprintf>
   134ca:	f00c ffc7 	bl	2045c <abort>
   134ce:	4b04      	ldr	r3, [pc, #16]	; (134e0 <__assert_func+0x38>)
   134d0:	e7f4      	b.n	134bc <__assert_func+0x14>
   134d2:	bf00      	nop
   134d4:	20000138 	.word	0x20000138
   134d8:	000229e6 	.word	0x000229e6
   134dc:	000229b8 	.word	0x000229b8
   134e0:	000229ab 	.word	0x000229ab

000134e4 <fiprintf>:
   134e4:	b40e      	push	{r1, r2, r3}
   134e6:	b503      	push	{r0, r1, lr}
   134e8:	4601      	mov	r1, r0
   134ea:	ab03      	add	r3, sp, #12
   134ec:	4805      	ldr	r0, [pc, #20]	; (13504 <fiprintf+0x20>)
   134ee:	f853 2b04 	ldr.w	r2, [r3], #4
   134f2:	6800      	ldr	r0, [r0, #0]
   134f4:	9301      	str	r3, [sp, #4]
   134f6:	f000 f807 	bl	13508 <_vfiprintf_r>
   134fa:	b002      	add	sp, #8
   134fc:	f85d eb04 	ldr.w	lr, [sp], #4
   13500:	b003      	add	sp, #12
   13502:	4770      	bx	lr
   13504:	20000138 	.word	0x20000138

00013508 <_vfiprintf_r>:
   13508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1350c:	460d      	mov	r5, r1
   1350e:	b09d      	sub	sp, #116	; 0x74
   13510:	4614      	mov	r4, r2
   13512:	4698      	mov	r8, r3
   13514:	4606      	mov	r6, r0
   13516:	b118      	cbz	r0, 13520 <_vfiprintf_r+0x18>
   13518:	6983      	ldr	r3, [r0, #24]
   1351a:	b90b      	cbnz	r3, 13520 <_vfiprintf_r+0x18>
   1351c:	f000 fa5c 	bl	139d8 <__sinit>
   13520:	4b87      	ldr	r3, [pc, #540]	; (13740 <_vfiprintf_r+0x238>)
   13522:	429d      	cmp	r5, r3
   13524:	d11b      	bne.n	1355e <_vfiprintf_r+0x56>
   13526:	6875      	ldr	r5, [r6, #4]
   13528:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   1352a:	07d9      	lsls	r1, r3, #31
   1352c:	d405      	bmi.n	1353a <_vfiprintf_r+0x32>
   1352e:	89ab      	ldrh	r3, [r5, #12]
   13530:	059a      	lsls	r2, r3, #22
   13532:	d402      	bmi.n	1353a <_vfiprintf_r+0x32>
   13534:	6da8      	ldr	r0, [r5, #88]	; 0x58
   13536:	f005 fdbb 	bl	190b0 <__retarget_lock_acquire_recursive>
   1353a:	89ab      	ldrh	r3, [r5, #12]
   1353c:	071b      	lsls	r3, r3, #28
   1353e:	d501      	bpl.n	13544 <_vfiprintf_r+0x3c>
   13540:	692b      	ldr	r3, [r5, #16]
   13542:	b9eb      	cbnz	r3, 13580 <_vfiprintf_r+0x78>
   13544:	4629      	mov	r1, r5
   13546:	4630      	mov	r0, r6
   13548:	f000 f95c 	bl	13804 <__swsetup_r>
   1354c:	b1c0      	cbz	r0, 13580 <_vfiprintf_r+0x78>
   1354e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   13550:	07dc      	lsls	r4, r3, #31
   13552:	d50e      	bpl.n	13572 <_vfiprintf_r+0x6a>
   13554:	f04f 30ff 	mov.w	r0, #4294967295
   13558:	b01d      	add	sp, #116	; 0x74
   1355a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1355e:	4b79      	ldr	r3, [pc, #484]	; (13744 <_vfiprintf_r+0x23c>)
   13560:	429d      	cmp	r5, r3
   13562:	d101      	bne.n	13568 <_vfiprintf_r+0x60>
   13564:	68b5      	ldr	r5, [r6, #8]
   13566:	e7df      	b.n	13528 <_vfiprintf_r+0x20>
   13568:	4b77      	ldr	r3, [pc, #476]	; (13748 <_vfiprintf_r+0x240>)
   1356a:	429d      	cmp	r5, r3
   1356c:	bf08      	it	eq
   1356e:	68f5      	ldreq	r5, [r6, #12]
   13570:	e7da      	b.n	13528 <_vfiprintf_r+0x20>
   13572:	89ab      	ldrh	r3, [r5, #12]
   13574:	0598      	lsls	r0, r3, #22
   13576:	d4ed      	bmi.n	13554 <_vfiprintf_r+0x4c>
   13578:	6da8      	ldr	r0, [r5, #88]	; 0x58
   1357a:	f005 fda1 	bl	190c0 <__retarget_lock_release_recursive>
   1357e:	e7e9      	b.n	13554 <_vfiprintf_r+0x4c>
   13580:	2300      	movs	r3, #0
   13582:	9309      	str	r3, [sp, #36]	; 0x24
   13584:	2320      	movs	r3, #32
   13586:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   1358a:	f8cd 800c 	str.w	r8, [sp, #12]
   1358e:	2330      	movs	r3, #48	; 0x30
   13590:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 1374c <_vfiprintf_r+0x244>
   13594:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   13598:	f04f 0901 	mov.w	r9, #1
   1359c:	4623      	mov	r3, r4
   1359e:	469a      	mov	sl, r3
   135a0:	f813 2b01 	ldrb.w	r2, [r3], #1
   135a4:	b10a      	cbz	r2, 135aa <_vfiprintf_r+0xa2>
   135a6:	2a25      	cmp	r2, #37	; 0x25
   135a8:	d1f9      	bne.n	1359e <_vfiprintf_r+0x96>
   135aa:	ebba 0b04 	subs.w	fp, sl, r4
   135ae:	d00b      	beq.n	135c8 <_vfiprintf_r+0xc0>
   135b0:	465b      	mov	r3, fp
   135b2:	4622      	mov	r2, r4
   135b4:	4629      	mov	r1, r5
   135b6:	4630      	mov	r0, r6
   135b8:	f00c ff31 	bl	2041e <__sfputs_r>
   135bc:	3001      	adds	r0, #1
   135be:	f000 80a6 	beq.w	1370e <_vfiprintf_r+0x206>
   135c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   135c4:	445a      	add	r2, fp
   135c6:	9209      	str	r2, [sp, #36]	; 0x24
   135c8:	f89a 3000 	ldrb.w	r3, [sl]
   135cc:	2b00      	cmp	r3, #0
   135ce:	f000 809e 	beq.w	1370e <_vfiprintf_r+0x206>
   135d2:	2300      	movs	r3, #0
   135d4:	f04f 32ff 	mov.w	r2, #4294967295
   135d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
   135dc:	f10a 0a01 	add.w	sl, sl, #1
   135e0:	9304      	str	r3, [sp, #16]
   135e2:	9307      	str	r3, [sp, #28]
   135e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   135e8:	931a      	str	r3, [sp, #104]	; 0x68
   135ea:	4654      	mov	r4, sl
   135ec:	4857      	ldr	r0, [pc, #348]	; (1374c <_vfiprintf_r+0x244>)
   135ee:	f814 1b01 	ldrb.w	r1, [r4], #1
   135f2:	2205      	movs	r2, #5
   135f4:	f7ec fd84 	bl	100 <memchr>
   135f8:	9b04      	ldr	r3, [sp, #16]
   135fa:	b9d0      	cbnz	r0, 13632 <_vfiprintf_r+0x12a>
   135fc:	06d9      	lsls	r1, r3, #27
   135fe:	bf44      	itt	mi
   13600:	2220      	movmi	r2, #32
   13602:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   13606:	071a      	lsls	r2, r3, #28
   13608:	bf44      	itt	mi
   1360a:	222b      	movmi	r2, #43	; 0x2b
   1360c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   13610:	f89a 2000 	ldrb.w	r2, [sl]
   13614:	2a2a      	cmp	r2, #42	; 0x2a
   13616:	d014      	beq.n	13642 <_vfiprintf_r+0x13a>
   13618:	9a07      	ldr	r2, [sp, #28]
   1361a:	4654      	mov	r4, sl
   1361c:	2000      	movs	r0, #0
   1361e:	f04f 0c0a 	mov.w	ip, #10
   13622:	4621      	mov	r1, r4
   13624:	f811 3b01 	ldrb.w	r3, [r1], #1
   13628:	3b30      	subs	r3, #48	; 0x30
   1362a:	2b09      	cmp	r3, #9
   1362c:	d94a      	bls.n	136c4 <_vfiprintf_r+0x1bc>
   1362e:	b970      	cbnz	r0, 1364e <_vfiprintf_r+0x146>
   13630:	e014      	b.n	1365c <_vfiprintf_r+0x154>
   13632:	eba0 0008 	sub.w	r0, r0, r8
   13636:	fa09 f000 	lsl.w	r0, r9, r0
   1363a:	4318      	orrs	r0, r3
   1363c:	9004      	str	r0, [sp, #16]
   1363e:	46a2      	mov	sl, r4
   13640:	e7d3      	b.n	135ea <_vfiprintf_r+0xe2>
   13642:	9a03      	ldr	r2, [sp, #12]
   13644:	1d11      	adds	r1, r2, #4
   13646:	6812      	ldr	r2, [r2, #0]
   13648:	9103      	str	r1, [sp, #12]
   1364a:	2a00      	cmp	r2, #0
   1364c:	db01      	blt.n	13652 <_vfiprintf_r+0x14a>
   1364e:	9207      	str	r2, [sp, #28]
   13650:	e004      	b.n	1365c <_vfiprintf_r+0x154>
   13652:	4252      	negs	r2, r2
   13654:	f043 0302 	orr.w	r3, r3, #2
   13658:	9207      	str	r2, [sp, #28]
   1365a:	9304      	str	r3, [sp, #16]
   1365c:	7823      	ldrb	r3, [r4, #0]
   1365e:	2b2e      	cmp	r3, #46	; 0x2e
   13660:	d10a      	bne.n	13678 <_vfiprintf_r+0x170>
   13662:	7863      	ldrb	r3, [r4, #1]
   13664:	2b2a      	cmp	r3, #42	; 0x2a
   13666:	d132      	bne.n	136ce <_vfiprintf_r+0x1c6>
   13668:	9b03      	ldr	r3, [sp, #12]
   1366a:	1d1a      	adds	r2, r3, #4
   1366c:	681b      	ldr	r3, [r3, #0]
   1366e:	9203      	str	r2, [sp, #12]
   13670:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
   13674:	3402      	adds	r4, #2
   13676:	9305      	str	r3, [sp, #20]
   13678:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 13750 <_vfiprintf_r+0x248>
   1367c:	7821      	ldrb	r1, [r4, #0]
   1367e:	2203      	movs	r2, #3
   13680:	4650      	mov	r0, sl
   13682:	f7ec fd3d 	bl	100 <memchr>
   13686:	b138      	cbz	r0, 13698 <_vfiprintf_r+0x190>
   13688:	9b04      	ldr	r3, [sp, #16]
   1368a:	eba0 000a 	sub.w	r0, r0, sl
   1368e:	2240      	movs	r2, #64	; 0x40
   13690:	4082      	lsls	r2, r0
   13692:	4313      	orrs	r3, r2
   13694:	3401      	adds	r4, #1
   13696:	9304      	str	r3, [sp, #16]
   13698:	f814 1b01 	ldrb.w	r1, [r4], #1
   1369c:	482d      	ldr	r0, [pc, #180]	; (13754 <_vfiprintf_r+0x24c>)
   1369e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   136a2:	2206      	movs	r2, #6
   136a4:	f7ec fd2c 	bl	100 <memchr>
   136a8:	2800      	cmp	r0, #0
   136aa:	d03f      	beq.n	1372c <_vfiprintf_r+0x224>
   136ac:	4b2a      	ldr	r3, [pc, #168]	; (13758 <_vfiprintf_r+0x250>)
   136ae:	bb1b      	cbnz	r3, 136f8 <_vfiprintf_r+0x1f0>
   136b0:	9b03      	ldr	r3, [sp, #12]
   136b2:	3307      	adds	r3, #7
   136b4:	f023 0307 	bic.w	r3, r3, #7
   136b8:	3308      	adds	r3, #8
   136ba:	9303      	str	r3, [sp, #12]
   136bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   136be:	443b      	add	r3, r7
   136c0:	9309      	str	r3, [sp, #36]	; 0x24
   136c2:	e76b      	b.n	1359c <_vfiprintf_r+0x94>
   136c4:	fb0c 3202 	mla	r2, ip, r2, r3
   136c8:	460c      	mov	r4, r1
   136ca:	2001      	movs	r0, #1
   136cc:	e7a9      	b.n	13622 <_vfiprintf_r+0x11a>
   136ce:	2300      	movs	r3, #0
   136d0:	3401      	adds	r4, #1
   136d2:	9305      	str	r3, [sp, #20]
   136d4:	4619      	mov	r1, r3
   136d6:	f04f 0c0a 	mov.w	ip, #10
   136da:	4620      	mov	r0, r4
   136dc:	f810 2b01 	ldrb.w	r2, [r0], #1
   136e0:	3a30      	subs	r2, #48	; 0x30
   136e2:	2a09      	cmp	r2, #9
   136e4:	d903      	bls.n	136ee <_vfiprintf_r+0x1e6>
   136e6:	2b00      	cmp	r3, #0
   136e8:	d0c6      	beq.n	13678 <_vfiprintf_r+0x170>
   136ea:	9105      	str	r1, [sp, #20]
   136ec:	e7c4      	b.n	13678 <_vfiprintf_r+0x170>
   136ee:	fb0c 2101 	mla	r1, ip, r1, r2
   136f2:	4604      	mov	r4, r0
   136f4:	2301      	movs	r3, #1
   136f6:	e7f0      	b.n	136da <_vfiprintf_r+0x1d2>
   136f8:	ab03      	add	r3, sp, #12
   136fa:	9300      	str	r3, [sp, #0]
   136fc:	462a      	mov	r2, r5
   136fe:	4b17      	ldr	r3, [pc, #92]	; (1375c <_vfiprintf_r+0x254>)
   13700:	a904      	add	r1, sp, #16
   13702:	4630      	mov	r0, r6
   13704:	f7fe ff30 	bl	12568 <_printf_float>
   13708:	4607      	mov	r7, r0
   1370a:	1c78      	adds	r0, r7, #1
   1370c:	d1d6      	bne.n	136bc <_vfiprintf_r+0x1b4>
   1370e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   13710:	07d9      	lsls	r1, r3, #31
   13712:	d405      	bmi.n	13720 <_vfiprintf_r+0x218>
   13714:	89ab      	ldrh	r3, [r5, #12]
   13716:	059a      	lsls	r2, r3, #22
   13718:	d402      	bmi.n	13720 <_vfiprintf_r+0x218>
   1371a:	6da8      	ldr	r0, [r5, #88]	; 0x58
   1371c:	f005 fcd0 	bl	190c0 <__retarget_lock_release_recursive>
   13720:	89ab      	ldrh	r3, [r5, #12]
   13722:	065b      	lsls	r3, r3, #25
   13724:	f53f af16 	bmi.w	13554 <_vfiprintf_r+0x4c>
   13728:	9809      	ldr	r0, [sp, #36]	; 0x24
   1372a:	e715      	b.n	13558 <_vfiprintf_r+0x50>
   1372c:	ab03      	add	r3, sp, #12
   1372e:	9300      	str	r3, [sp, #0]
   13730:	462a      	mov	r2, r5
   13732:	4b0a      	ldr	r3, [pc, #40]	; (1375c <_vfiprintf_r+0x254>)
   13734:	a904      	add	r1, sp, #16
   13736:	4630      	mov	r0, r6
   13738:	f7ff f94c 	bl	129d4 <_printf_i>
   1373c:	e7e4      	b.n	13708 <_vfiprintf_r+0x200>
   1373e:	bf00      	nop
   13740:	000225b0 	.word	0x000225b0
   13744:	00022590 	.word	0x00022590
   13748:	00022570 	.word	0x00022570
   1374c:	000229f1 	.word	0x000229f1
   13750:	000229f7 	.word	0x000229f7
   13754:	000229fb 	.word	0x000229fb
   13758:	00012569 	.word	0x00012569
   1375c:	0002041f 	.word	0x0002041f

00013760 <__swbuf_r>:
   13760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13762:	460e      	mov	r6, r1
   13764:	4614      	mov	r4, r2
   13766:	4605      	mov	r5, r0
   13768:	b118      	cbz	r0, 13772 <__swbuf_r+0x12>
   1376a:	6983      	ldr	r3, [r0, #24]
   1376c:	b90b      	cbnz	r3, 13772 <__swbuf_r+0x12>
   1376e:	f000 f933 	bl	139d8 <__sinit>
   13772:	4b21      	ldr	r3, [pc, #132]	; (137f8 <__swbuf_r+0x98>)
   13774:	429c      	cmp	r4, r3
   13776:	d110      	bne.n	1379a <__swbuf_r+0x3a>
   13778:	686c      	ldr	r4, [r5, #4]
   1377a:	69a3      	ldr	r3, [r4, #24]
   1377c:	60a3      	str	r3, [r4, #8]
   1377e:	89a3      	ldrh	r3, [r4, #12]
   13780:	071a      	lsls	r2, r3, #28
   13782:	d501      	bpl.n	13788 <__swbuf_r+0x28>
   13784:	6923      	ldr	r3, [r4, #16]
   13786:	b993      	cbnz	r3, 137ae <__swbuf_r+0x4e>
   13788:	4621      	mov	r1, r4
   1378a:	4628      	mov	r0, r5
   1378c:	f000 f83a 	bl	13804 <__swsetup_r>
   13790:	b168      	cbz	r0, 137ae <__swbuf_r+0x4e>
   13792:	f04f 37ff 	mov.w	r7, #4294967295
   13796:	4638      	mov	r0, r7
   13798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1379a:	4b18      	ldr	r3, [pc, #96]	; (137fc <__swbuf_r+0x9c>)
   1379c:	429c      	cmp	r4, r3
   1379e:	d101      	bne.n	137a4 <__swbuf_r+0x44>
   137a0:	68ac      	ldr	r4, [r5, #8]
   137a2:	e7ea      	b.n	1377a <__swbuf_r+0x1a>
   137a4:	4b16      	ldr	r3, [pc, #88]	; (13800 <__swbuf_r+0xa0>)
   137a6:	429c      	cmp	r4, r3
   137a8:	bf08      	it	eq
   137aa:	68ec      	ldreq	r4, [r5, #12]
   137ac:	e7e5      	b.n	1377a <__swbuf_r+0x1a>
   137ae:	6923      	ldr	r3, [r4, #16]
   137b0:	6820      	ldr	r0, [r4, #0]
   137b2:	1ac0      	subs	r0, r0, r3
   137b4:	6963      	ldr	r3, [r4, #20]
   137b6:	b2f6      	uxtb	r6, r6
   137b8:	4283      	cmp	r3, r0
   137ba:	4637      	mov	r7, r6
   137bc:	dc05      	bgt.n	137ca <__swbuf_r+0x6a>
   137be:	4621      	mov	r1, r4
   137c0:	4628      	mov	r0, r5
   137c2:	f000 f88b 	bl	138dc <_fflush_r>
   137c6:	2800      	cmp	r0, #0
   137c8:	d1e3      	bne.n	13792 <__swbuf_r+0x32>
   137ca:	68a3      	ldr	r3, [r4, #8]
   137cc:	3b01      	subs	r3, #1
   137ce:	60a3      	str	r3, [r4, #8]
   137d0:	6823      	ldr	r3, [r4, #0]
   137d2:	1c5a      	adds	r2, r3, #1
   137d4:	6022      	str	r2, [r4, #0]
   137d6:	701e      	strb	r6, [r3, #0]
   137d8:	6963      	ldr	r3, [r4, #20]
   137da:	3001      	adds	r0, #1
   137dc:	4283      	cmp	r3, r0
   137de:	d004      	beq.n	137ea <__swbuf_r+0x8a>
   137e0:	89a3      	ldrh	r3, [r4, #12]
   137e2:	07db      	lsls	r3, r3, #31
   137e4:	d5d7      	bpl.n	13796 <__swbuf_r+0x36>
   137e6:	2e0a      	cmp	r6, #10
   137e8:	d1d5      	bne.n	13796 <__swbuf_r+0x36>
   137ea:	4621      	mov	r1, r4
   137ec:	4628      	mov	r0, r5
   137ee:	f000 f875 	bl	138dc <_fflush_r>
   137f2:	2800      	cmp	r0, #0
   137f4:	d0cf      	beq.n	13796 <__swbuf_r+0x36>
   137f6:	e7cc      	b.n	13792 <__swbuf_r+0x32>
   137f8:	000225b0 	.word	0x000225b0
   137fc:	00022590 	.word	0x00022590
   13800:	00022570 	.word	0x00022570

00013804 <__swsetup_r>:
   13804:	4b31      	ldr	r3, [pc, #196]	; (138cc <__swsetup_r+0xc8>)
   13806:	b570      	push	{r4, r5, r6, lr}
   13808:	681d      	ldr	r5, [r3, #0]
   1380a:	4606      	mov	r6, r0
   1380c:	460c      	mov	r4, r1
   1380e:	b125      	cbz	r5, 1381a <__swsetup_r+0x16>
   13810:	69ab      	ldr	r3, [r5, #24]
   13812:	b913      	cbnz	r3, 1381a <__swsetup_r+0x16>
   13814:	4628      	mov	r0, r5
   13816:	f000 f8df 	bl	139d8 <__sinit>
   1381a:	4b2d      	ldr	r3, [pc, #180]	; (138d0 <__swsetup_r+0xcc>)
   1381c:	429c      	cmp	r4, r3
   1381e:	d10e      	bne.n	1383e <__swsetup_r+0x3a>
   13820:	686c      	ldr	r4, [r5, #4]
   13822:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13826:	071a      	lsls	r2, r3, #28
   13828:	d42c      	bmi.n	13884 <__swsetup_r+0x80>
   1382a:	06dd      	lsls	r5, r3, #27
   1382c:	d411      	bmi.n	13852 <__swsetup_r+0x4e>
   1382e:	2209      	movs	r2, #9
   13830:	6032      	str	r2, [r6, #0]
   13832:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13836:	81a3      	strh	r3, [r4, #12]
   13838:	f04f 30ff 	mov.w	r0, #4294967295
   1383c:	e03d      	b.n	138ba <__swsetup_r+0xb6>
   1383e:	4b25      	ldr	r3, [pc, #148]	; (138d4 <__swsetup_r+0xd0>)
   13840:	429c      	cmp	r4, r3
   13842:	d101      	bne.n	13848 <__swsetup_r+0x44>
   13844:	68ac      	ldr	r4, [r5, #8]
   13846:	e7ec      	b.n	13822 <__swsetup_r+0x1e>
   13848:	4b23      	ldr	r3, [pc, #140]	; (138d8 <__swsetup_r+0xd4>)
   1384a:	429c      	cmp	r4, r3
   1384c:	bf08      	it	eq
   1384e:	68ec      	ldreq	r4, [r5, #12]
   13850:	e7e7      	b.n	13822 <__swsetup_r+0x1e>
   13852:	0758      	lsls	r0, r3, #29
   13854:	d512      	bpl.n	1387c <__swsetup_r+0x78>
   13856:	6b61      	ldr	r1, [r4, #52]	; 0x34
   13858:	b141      	cbz	r1, 1386c <__swsetup_r+0x68>
   1385a:	f104 0344 	add.w	r3, r4, #68	; 0x44
   1385e:	4299      	cmp	r1, r3
   13860:	d002      	beq.n	13868 <__swsetup_r+0x64>
   13862:	4630      	mov	r0, r6
   13864:	f7fe fddc 	bl	12420 <_free_r>
   13868:	2300      	movs	r3, #0
   1386a:	6363      	str	r3, [r4, #52]	; 0x34
   1386c:	89a3      	ldrh	r3, [r4, #12]
   1386e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   13872:	81a3      	strh	r3, [r4, #12]
   13874:	2300      	movs	r3, #0
   13876:	6063      	str	r3, [r4, #4]
   13878:	6923      	ldr	r3, [r4, #16]
   1387a:	6023      	str	r3, [r4, #0]
   1387c:	89a3      	ldrh	r3, [r4, #12]
   1387e:	f043 0308 	orr.w	r3, r3, #8
   13882:	81a3      	strh	r3, [r4, #12]
   13884:	6923      	ldr	r3, [r4, #16]
   13886:	b94b      	cbnz	r3, 1389c <__swsetup_r+0x98>
   13888:	89a3      	ldrh	r3, [r4, #12]
   1388a:	f403 7320 	and.w	r3, r3, #640	; 0x280
   1388e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   13892:	d003      	beq.n	1389c <__swsetup_r+0x98>
   13894:	4621      	mov	r1, r4
   13896:	4630      	mov	r0, r6
   13898:	f000 f91c 	bl	13ad4 <__smakebuf_r>
   1389c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   138a0:	f013 0201 	ands.w	r2, r3, #1
   138a4:	d00a      	beq.n	138bc <__swsetup_r+0xb8>
   138a6:	2200      	movs	r2, #0
   138a8:	60a2      	str	r2, [r4, #8]
   138aa:	6962      	ldr	r2, [r4, #20]
   138ac:	4252      	negs	r2, r2
   138ae:	61a2      	str	r2, [r4, #24]
   138b0:	6922      	ldr	r2, [r4, #16]
   138b2:	b942      	cbnz	r2, 138c6 <__swsetup_r+0xc2>
   138b4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
   138b8:	d1bb      	bne.n	13832 <__swsetup_r+0x2e>
   138ba:	bd70      	pop	{r4, r5, r6, pc}
   138bc:	0799      	lsls	r1, r3, #30
   138be:	bf58      	it	pl
   138c0:	6962      	ldrpl	r2, [r4, #20]
   138c2:	60a2      	str	r2, [r4, #8]
   138c4:	e7f4      	b.n	138b0 <__swsetup_r+0xac>
   138c6:	2000      	movs	r0, #0
   138c8:	e7f7      	b.n	138ba <__swsetup_r+0xb6>
   138ca:	bf00      	nop
   138cc:	20000138 	.word	0x20000138
   138d0:	000225b0 	.word	0x000225b0
   138d4:	00022590 	.word	0x00022590
   138d8:	00022570 	.word	0x00022570

000138dc <_fflush_r>:
   138dc:	b538      	push	{r3, r4, r5, lr}
   138de:	690b      	ldr	r3, [r1, #16]
   138e0:	4605      	mov	r5, r0
   138e2:	460c      	mov	r4, r1
   138e4:	b913      	cbnz	r3, 138ec <_fflush_r+0x10>
   138e6:	2500      	movs	r5, #0
   138e8:	4628      	mov	r0, r5
   138ea:	bd38      	pop	{r3, r4, r5, pc}
   138ec:	b118      	cbz	r0, 138f6 <_fflush_r+0x1a>
   138ee:	6983      	ldr	r3, [r0, #24]
   138f0:	b90b      	cbnz	r3, 138f6 <_fflush_r+0x1a>
   138f2:	f000 f871 	bl	139d8 <__sinit>
   138f6:	4b14      	ldr	r3, [pc, #80]	; (13948 <_fflush_r+0x6c>)
   138f8:	429c      	cmp	r4, r3
   138fa:	d11b      	bne.n	13934 <_fflush_r+0x58>
   138fc:	686c      	ldr	r4, [r5, #4]
   138fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13902:	2b00      	cmp	r3, #0
   13904:	d0ef      	beq.n	138e6 <_fflush_r+0xa>
   13906:	6e62      	ldr	r2, [r4, #100]	; 0x64
   13908:	07d0      	lsls	r0, r2, #31
   1390a:	d404      	bmi.n	13916 <_fflush_r+0x3a>
   1390c:	0599      	lsls	r1, r3, #22
   1390e:	d402      	bmi.n	13916 <_fflush_r+0x3a>
   13910:	6da0      	ldr	r0, [r4, #88]	; 0x58
   13912:	f005 fbcd 	bl	190b0 <__retarget_lock_acquire_recursive>
   13916:	4628      	mov	r0, r5
   13918:	4621      	mov	r1, r4
   1391a:	f00c fda6 	bl	2046a <__sflush_r>
   1391e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   13920:	07da      	lsls	r2, r3, #31
   13922:	4605      	mov	r5, r0
   13924:	d4e0      	bmi.n	138e8 <_fflush_r+0xc>
   13926:	89a3      	ldrh	r3, [r4, #12]
   13928:	059b      	lsls	r3, r3, #22
   1392a:	d4dd      	bmi.n	138e8 <_fflush_r+0xc>
   1392c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1392e:	f005 fbc7 	bl	190c0 <__retarget_lock_release_recursive>
   13932:	e7d9      	b.n	138e8 <_fflush_r+0xc>
   13934:	4b05      	ldr	r3, [pc, #20]	; (1394c <_fflush_r+0x70>)
   13936:	429c      	cmp	r4, r3
   13938:	d101      	bne.n	1393e <_fflush_r+0x62>
   1393a:	68ac      	ldr	r4, [r5, #8]
   1393c:	e7df      	b.n	138fe <_fflush_r+0x22>
   1393e:	4b04      	ldr	r3, [pc, #16]	; (13950 <_fflush_r+0x74>)
   13940:	429c      	cmp	r4, r3
   13942:	bf08      	it	eq
   13944:	68ec      	ldreq	r4, [r5, #12]
   13946:	e7da      	b.n	138fe <_fflush_r+0x22>
   13948:	000225b0 	.word	0x000225b0
   1394c:	00022590 	.word	0x00022590
   13950:	00022570 	.word	0x00022570

00013954 <std>:
   13954:	2300      	movs	r3, #0
   13956:	b510      	push	{r4, lr}
   13958:	4604      	mov	r4, r0
   1395a:	e9c0 3300 	strd	r3, r3, [r0]
   1395e:	e9c0 3304 	strd	r3, r3, [r0, #16]
   13962:	6083      	str	r3, [r0, #8]
   13964:	8181      	strh	r1, [r0, #12]
   13966:	6643      	str	r3, [r0, #100]	; 0x64
   13968:	81c2      	strh	r2, [r0, #14]
   1396a:	6183      	str	r3, [r0, #24]
   1396c:	4619      	mov	r1, r3
   1396e:	2208      	movs	r2, #8
   13970:	305c      	adds	r0, #92	; 0x5c
   13972:	f00c fa61 	bl	1fe38 <memset>
   13976:	4b05      	ldr	r3, [pc, #20]	; (1398c <std+0x38>)
   13978:	6263      	str	r3, [r4, #36]	; 0x24
   1397a:	4b05      	ldr	r3, [pc, #20]	; (13990 <std+0x3c>)
   1397c:	62a3      	str	r3, [r4, #40]	; 0x28
   1397e:	4b05      	ldr	r3, [pc, #20]	; (13994 <std+0x40>)
   13980:	62e3      	str	r3, [r4, #44]	; 0x2c
   13982:	4b05      	ldr	r3, [pc, #20]	; (13998 <std+0x44>)
   13984:	6224      	str	r4, [r4, #32]
   13986:	6323      	str	r3, [r4, #48]	; 0x30
   13988:	bd10      	pop	{r4, pc}
   1398a:	bf00      	nop
   1398c:	00020675 	.word	0x00020675
   13990:	00020697 	.word	0x00020697
   13994:	000206cf 	.word	0x000206cf
   13998:	000206f3 	.word	0x000206f3

0001399c <_cleanup_r>:
   1399c:	4901      	ldr	r1, [pc, #4]	; (139a4 <_cleanup_r+0x8>)
   1399e:	f00c bdfa 	b.w	20596 <_fwalk_reent>
   139a2:	bf00      	nop
   139a4:	000138dd 	.word	0x000138dd

000139a8 <__sfp_lock_acquire>:
   139a8:	4801      	ldr	r0, [pc, #4]	; (139b0 <__sfp_lock_acquire+0x8>)
   139aa:	f005 bb81 	b.w	190b0 <__retarget_lock_acquire_recursive>
   139ae:	bf00      	nop
   139b0:	2000044c 	.word	0x2000044c

000139b4 <__sfp_lock_release>:
   139b4:	4801      	ldr	r0, [pc, #4]	; (139bc <__sfp_lock_release+0x8>)
   139b6:	f005 bb83 	b.w	190c0 <__retarget_lock_release_recursive>
   139ba:	bf00      	nop
   139bc:	2000044c 	.word	0x2000044c

000139c0 <__sinit_lock_acquire>:
   139c0:	4801      	ldr	r0, [pc, #4]	; (139c8 <__sinit_lock_acquire+0x8>)
   139c2:	f005 bb75 	b.w	190b0 <__retarget_lock_acquire_recursive>
   139c6:	bf00      	nop
   139c8:	20000460 	.word	0x20000460

000139cc <__sinit_lock_release>:
   139cc:	4801      	ldr	r0, [pc, #4]	; (139d4 <__sinit_lock_release+0x8>)
   139ce:	f005 bb77 	b.w	190c0 <__retarget_lock_release_recursive>
   139d2:	bf00      	nop
   139d4:	20000460 	.word	0x20000460

000139d8 <__sinit>:
   139d8:	b510      	push	{r4, lr}
   139da:	4604      	mov	r4, r0
   139dc:	f7ff fff0 	bl	139c0 <__sinit_lock_acquire>
   139e0:	69a3      	ldr	r3, [r4, #24]
   139e2:	b11b      	cbz	r3, 139ec <__sinit+0x14>
   139e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   139e8:	f7ff bff0 	b.w	139cc <__sinit_lock_release>
   139ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   139f0:	6523      	str	r3, [r4, #80]	; 0x50
   139f2:	4b13      	ldr	r3, [pc, #76]	; (13a40 <__sinit+0x68>)
   139f4:	4a13      	ldr	r2, [pc, #76]	; (13a44 <__sinit+0x6c>)
   139f6:	681b      	ldr	r3, [r3, #0]
   139f8:	62a2      	str	r2, [r4, #40]	; 0x28
   139fa:	42a3      	cmp	r3, r4
   139fc:	bf04      	itt	eq
   139fe:	2301      	moveq	r3, #1
   13a00:	61a3      	streq	r3, [r4, #24]
   13a02:	4620      	mov	r0, r4
   13a04:	f000 f820 	bl	13a48 <__sfp>
   13a08:	6060      	str	r0, [r4, #4]
   13a0a:	4620      	mov	r0, r4
   13a0c:	f000 f81c 	bl	13a48 <__sfp>
   13a10:	60a0      	str	r0, [r4, #8]
   13a12:	4620      	mov	r0, r4
   13a14:	f000 f818 	bl	13a48 <__sfp>
   13a18:	2200      	movs	r2, #0
   13a1a:	60e0      	str	r0, [r4, #12]
   13a1c:	2104      	movs	r1, #4
   13a1e:	6860      	ldr	r0, [r4, #4]
   13a20:	f7ff ff98 	bl	13954 <std>
   13a24:	68a0      	ldr	r0, [r4, #8]
   13a26:	2201      	movs	r2, #1
   13a28:	2109      	movs	r1, #9
   13a2a:	f7ff ff93 	bl	13954 <std>
   13a2e:	68e0      	ldr	r0, [r4, #12]
   13a30:	2202      	movs	r2, #2
   13a32:	2112      	movs	r1, #18
   13a34:	f7ff ff8e 	bl	13954 <std>
   13a38:	2301      	movs	r3, #1
   13a3a:	61a3      	str	r3, [r4, #24]
   13a3c:	e7d2      	b.n	139e4 <__sinit+0xc>
   13a3e:	bf00      	nop
   13a40:	00022560 	.word	0x00022560
   13a44:	0001399d 	.word	0x0001399d

00013a48 <__sfp>:
   13a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13a4a:	4607      	mov	r7, r0
   13a4c:	f7ff ffac 	bl	139a8 <__sfp_lock_acquire>
   13a50:	4b1e      	ldr	r3, [pc, #120]	; (13acc <__sfp+0x84>)
   13a52:	681e      	ldr	r6, [r3, #0]
   13a54:	69b3      	ldr	r3, [r6, #24]
   13a56:	b913      	cbnz	r3, 13a5e <__sfp+0x16>
   13a58:	4630      	mov	r0, r6
   13a5a:	f7ff ffbd 	bl	139d8 <__sinit>
   13a5e:	3648      	adds	r6, #72	; 0x48
   13a60:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   13a64:	3b01      	subs	r3, #1
   13a66:	d503      	bpl.n	13a70 <__sfp+0x28>
   13a68:	6833      	ldr	r3, [r6, #0]
   13a6a:	b30b      	cbz	r3, 13ab0 <__sfp+0x68>
   13a6c:	6836      	ldr	r6, [r6, #0]
   13a6e:	e7f7      	b.n	13a60 <__sfp+0x18>
   13a70:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   13a74:	b9d5      	cbnz	r5, 13aac <__sfp+0x64>
   13a76:	4b16      	ldr	r3, [pc, #88]	; (13ad0 <__sfp+0x88>)
   13a78:	60e3      	str	r3, [r4, #12]
   13a7a:	f104 0058 	add.w	r0, r4, #88	; 0x58
   13a7e:	6665      	str	r5, [r4, #100]	; 0x64
   13a80:	f005 fb0d 	bl	1909e <__retarget_lock_init_recursive>
   13a84:	f7ff ff96 	bl	139b4 <__sfp_lock_release>
   13a88:	e9c4 5501 	strd	r5, r5, [r4, #4]
   13a8c:	e9c4 5504 	strd	r5, r5, [r4, #16]
   13a90:	6025      	str	r5, [r4, #0]
   13a92:	61a5      	str	r5, [r4, #24]
   13a94:	2208      	movs	r2, #8
   13a96:	4629      	mov	r1, r5
   13a98:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   13a9c:	f00c f9cc 	bl	1fe38 <memset>
   13aa0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   13aa4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   13aa8:	4620      	mov	r0, r4
   13aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13aac:	3468      	adds	r4, #104	; 0x68
   13aae:	e7d9      	b.n	13a64 <__sfp+0x1c>
   13ab0:	2104      	movs	r1, #4
   13ab2:	4638      	mov	r0, r7
   13ab4:	f00c fd59 	bl	2056a <__sfmoreglue>
   13ab8:	4604      	mov	r4, r0
   13aba:	6030      	str	r0, [r6, #0]
   13abc:	2800      	cmp	r0, #0
   13abe:	d1d5      	bne.n	13a6c <__sfp+0x24>
   13ac0:	f7ff ff78 	bl	139b4 <__sfp_lock_release>
   13ac4:	230c      	movs	r3, #12
   13ac6:	603b      	str	r3, [r7, #0]
   13ac8:	e7ee      	b.n	13aa8 <__sfp+0x60>
   13aca:	bf00      	nop
   13acc:	00022560 	.word	0x00022560
   13ad0:	ffff0001 	.word	0xffff0001

00013ad4 <__smakebuf_r>:
   13ad4:	898b      	ldrh	r3, [r1, #12]
   13ad6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13ad8:	079d      	lsls	r5, r3, #30
   13ada:	4606      	mov	r6, r0
   13adc:	460c      	mov	r4, r1
   13ade:	d507      	bpl.n	13af0 <__smakebuf_r+0x1c>
   13ae0:	f104 0347 	add.w	r3, r4, #71	; 0x47
   13ae4:	6023      	str	r3, [r4, #0]
   13ae6:	6123      	str	r3, [r4, #16]
   13ae8:	2301      	movs	r3, #1
   13aea:	6163      	str	r3, [r4, #20]
   13aec:	b003      	add	sp, #12
   13aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13af0:	ab01      	add	r3, sp, #4
   13af2:	466a      	mov	r2, sp
   13af4:	f00c fd6e 	bl	205d4 <__swhatbuf_r>
   13af8:	9f00      	ldr	r7, [sp, #0]
   13afa:	4605      	mov	r5, r0
   13afc:	4639      	mov	r1, r7
   13afe:	4630      	mov	r0, r6
   13b00:	f7fe fcd8 	bl	124b4 <_malloc_r>
   13b04:	b948      	cbnz	r0, 13b1a <__smakebuf_r+0x46>
   13b06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13b0a:	059a      	lsls	r2, r3, #22
   13b0c:	d4ee      	bmi.n	13aec <__smakebuf_r+0x18>
   13b0e:	f023 0303 	bic.w	r3, r3, #3
   13b12:	f043 0302 	orr.w	r3, r3, #2
   13b16:	81a3      	strh	r3, [r4, #12]
   13b18:	e7e2      	b.n	13ae0 <__smakebuf_r+0xc>
   13b1a:	4b0d      	ldr	r3, [pc, #52]	; (13b50 <__smakebuf_r+0x7c>)
   13b1c:	62b3      	str	r3, [r6, #40]	; 0x28
   13b1e:	89a3      	ldrh	r3, [r4, #12]
   13b20:	6020      	str	r0, [r4, #0]
   13b22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   13b26:	81a3      	strh	r3, [r4, #12]
   13b28:	9b01      	ldr	r3, [sp, #4]
   13b2a:	e9c4 0704 	strd	r0, r7, [r4, #16]
   13b2e:	b15b      	cbz	r3, 13b48 <__smakebuf_r+0x74>
   13b30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   13b34:	4630      	mov	r0, r6
   13b36:	f000 f85b 	bl	13bf0 <_isatty_r>
   13b3a:	b128      	cbz	r0, 13b48 <__smakebuf_r+0x74>
   13b3c:	89a3      	ldrh	r3, [r4, #12]
   13b3e:	f023 0303 	bic.w	r3, r3, #3
   13b42:	f043 0301 	orr.w	r3, r3, #1
   13b46:	81a3      	strh	r3, [r4, #12]
   13b48:	89a3      	ldrh	r3, [r4, #12]
   13b4a:	431d      	orrs	r5, r3
   13b4c:	81a5      	strh	r5, [r4, #12]
   13b4e:	e7cd      	b.n	13aec <__smakebuf_r+0x18>
   13b50:	0001399d 	.word	0x0001399d

00013b54 <raise>:
   13b54:	4b02      	ldr	r3, [pc, #8]	; (13b60 <raise+0xc>)
   13b56:	4601      	mov	r1, r0
   13b58:	6818      	ldr	r0, [r3, #0]
   13b5a:	f00c bd61 	b.w	20620 <_raise_r>
   13b5e:	bf00      	nop
   13b60:	20000138 	.word	0x20000138

00013b64 <_kill_r>:
   13b64:	b538      	push	{r3, r4, r5, lr}
   13b66:	4d07      	ldr	r5, [pc, #28]	; (13b84 <_kill_r+0x20>)
   13b68:	2300      	movs	r3, #0
   13b6a:	4604      	mov	r4, r0
   13b6c:	4608      	mov	r0, r1
   13b6e:	4611      	mov	r1, r2
   13b70:	602b      	str	r3, [r5, #0]
   13b72:	f005 fa8b 	bl	1908c <_kill>
   13b76:	1c43      	adds	r3, r0, #1
   13b78:	d102      	bne.n	13b80 <_kill_r+0x1c>
   13b7a:	682b      	ldr	r3, [r5, #0]
   13b7c:	b103      	cbz	r3, 13b80 <_kill_r+0x1c>
   13b7e:	6023      	str	r3, [r4, #0]
   13b80:	bd38      	pop	{r3, r4, r5, pc}
   13b82:	bf00      	nop
   13b84:	200037d4 	.word	0x200037d4

00013b88 <_write_r>:
   13b88:	b538      	push	{r3, r4, r5, lr}
   13b8a:	4d07      	ldr	r5, [pc, #28]	; (13ba8 <_write_r+0x20>)
   13b8c:	4604      	mov	r4, r0
   13b8e:	4608      	mov	r0, r1
   13b90:	4611      	mov	r1, r2
   13b92:	2200      	movs	r2, #0
   13b94:	602a      	str	r2, [r5, #0]
   13b96:	461a      	mov	r2, r3
   13b98:	f005 fa68 	bl	1906c <_write>
   13b9c:	1c43      	adds	r3, r0, #1
   13b9e:	d102      	bne.n	13ba6 <_write_r+0x1e>
   13ba0:	682b      	ldr	r3, [r5, #0]
   13ba2:	b103      	cbz	r3, 13ba6 <_write_r+0x1e>
   13ba4:	6023      	str	r3, [r4, #0]
   13ba6:	bd38      	pop	{r3, r4, r5, pc}
   13ba8:	200037d4 	.word	0x200037d4

00013bac <_close_r>:
   13bac:	b538      	push	{r3, r4, r5, lr}
   13bae:	4d06      	ldr	r5, [pc, #24]	; (13bc8 <_close_r+0x1c>)
   13bb0:	2300      	movs	r3, #0
   13bb2:	4604      	mov	r4, r0
   13bb4:	4608      	mov	r0, r1
   13bb6:	602b      	str	r3, [r5, #0]
   13bb8:	f005 fa5e 	bl	19078 <_close>
   13bbc:	1c43      	adds	r3, r0, #1
   13bbe:	d102      	bne.n	13bc6 <_close_r+0x1a>
   13bc0:	682b      	ldr	r3, [r5, #0]
   13bc2:	b103      	cbz	r3, 13bc6 <_close_r+0x1a>
   13bc4:	6023      	str	r3, [r4, #0]
   13bc6:	bd38      	pop	{r3, r4, r5, pc}
   13bc8:	200037d4 	.word	0x200037d4

00013bcc <_fstat_r>:
   13bcc:	b538      	push	{r3, r4, r5, lr}
   13bce:	4d07      	ldr	r5, [pc, #28]	; (13bec <_fstat_r+0x20>)
   13bd0:	2300      	movs	r3, #0
   13bd2:	4604      	mov	r4, r0
   13bd4:	4608      	mov	r0, r1
   13bd6:	4611      	mov	r1, r2
   13bd8:	602b      	str	r3, [r5, #0]
   13bda:	f005 fa5b 	bl	19094 <_fstat>
   13bde:	1c43      	adds	r3, r0, #1
   13be0:	d102      	bne.n	13be8 <_fstat_r+0x1c>
   13be2:	682b      	ldr	r3, [r5, #0]
   13be4:	b103      	cbz	r3, 13be8 <_fstat_r+0x1c>
   13be6:	6023      	str	r3, [r4, #0]
   13be8:	bd38      	pop	{r3, r4, r5, pc}
   13bea:	bf00      	nop
   13bec:	200037d4 	.word	0x200037d4

00013bf0 <_isatty_r>:
   13bf0:	b538      	push	{r3, r4, r5, lr}
   13bf2:	4d06      	ldr	r5, [pc, #24]	; (13c0c <_isatty_r+0x1c>)
   13bf4:	2300      	movs	r3, #0
   13bf6:	4604      	mov	r4, r0
   13bf8:	4608      	mov	r0, r1
   13bfa:	602b      	str	r3, [r5, #0]
   13bfc:	f005 fa41 	bl	19082 <_isatty>
   13c00:	1c43      	adds	r3, r0, #1
   13c02:	d102      	bne.n	13c0a <_isatty_r+0x1a>
   13c04:	682b      	ldr	r3, [r5, #0]
   13c06:	b103      	cbz	r3, 13c0a <_isatty_r+0x1a>
   13c08:	6023      	str	r3, [r4, #0]
   13c0a:	bd38      	pop	{r3, r4, r5, pc}
   13c0c:	200037d4 	.word	0x200037d4

00013c10 <_lseek_r>:
   13c10:	b538      	push	{r3, r4, r5, lr}
   13c12:	4d07      	ldr	r5, [pc, #28]	; (13c30 <_lseek_r+0x20>)
   13c14:	4604      	mov	r4, r0
   13c16:	4608      	mov	r0, r1
   13c18:	4611      	mov	r1, r2
   13c1a:	2200      	movs	r2, #0
   13c1c:	602a      	str	r2, [r5, #0]
   13c1e:	461a      	mov	r2, r3
   13c20:	f005 fa2d 	bl	1907e <_lseek>
   13c24:	1c43      	adds	r3, r0, #1
   13c26:	d102      	bne.n	13c2e <_lseek_r+0x1e>
   13c28:	682b      	ldr	r3, [r5, #0]
   13c2a:	b103      	cbz	r3, 13c2e <_lseek_r+0x1e>
   13c2c:	6023      	str	r3, [r4, #0]
   13c2e:	bd38      	pop	{r3, r4, r5, pc}
   13c30:	200037d4 	.word	0x200037d4

00013c34 <_read_r>:
   13c34:	b538      	push	{r3, r4, r5, lr}
   13c36:	4d07      	ldr	r5, [pc, #28]	; (13c54 <_read_r+0x20>)
   13c38:	4604      	mov	r4, r0
   13c3a:	4608      	mov	r0, r1
   13c3c:	4611      	mov	r1, r2
   13c3e:	2200      	movs	r2, #0
   13c40:	602a      	str	r2, [r5, #0]
   13c42:	461a      	mov	r2, r3
   13c44:	f005 fa0c 	bl	19060 <_read>
   13c48:	1c43      	adds	r3, r0, #1
   13c4a:	d102      	bne.n	13c52 <_read_r+0x1e>
   13c4c:	682b      	ldr	r3, [r5, #0]
   13c4e:	b103      	cbz	r3, 13c52 <_read_r+0x1e>
   13c50:	6023      	str	r3, [r4, #0]
   13c52:	bd38      	pop	{r3, r4, r5, pc}
   13c54:	200037d4 	.word	0x200037d4

00013c58 <nrf_cc3xx_platform_init>:
   13c58:	b510      	push	{r4, lr}
   13c5a:	4c0c      	ldr	r4, [pc, #48]	; (13c8c <nrf_cc3xx_platform_init+0x34>)
   13c5c:	6823      	ldr	r3, [r4, #0]
   13c5e:	b113      	cbz	r3, 13c66 <nrf_cc3xx_platform_init+0xe>
   13c60:	4b0b      	ldr	r3, [pc, #44]	; (13c90 <nrf_cc3xx_platform_init+0x38>)
   13c62:	681b      	ldr	r3, [r3, #0]
   13c64:	b92b      	cbnz	r3, 13c72 <nrf_cc3xx_platform_init+0x1a>
   13c66:	f000 fe99 	bl	1499c <CC_LibInit>
   13c6a:	b930      	cbnz	r0, 13c7a <nrf_cc3xx_platform_init+0x22>
   13c6c:	4b08      	ldr	r3, [pc, #32]	; (13c90 <nrf_cc3xx_platform_init+0x38>)
   13c6e:	2201      	movs	r2, #1
   13c70:	601a      	str	r2, [r3, #0]
   13c72:	2301      	movs	r3, #1
   13c74:	6023      	str	r3, [r4, #0]
   13c76:	2000      	movs	r0, #0
   13c78:	bd10      	pop	{r4, pc}
   13c7a:	3801      	subs	r0, #1
   13c7c:	2806      	cmp	r0, #6
   13c7e:	d901      	bls.n	13c84 <nrf_cc3xx_platform_init+0x2c>
   13c80:	4804      	ldr	r0, [pc, #16]	; (13c94 <nrf_cc3xx_platform_init+0x3c>)
   13c82:	bd10      	pop	{r4, pc}
   13c84:	4b04      	ldr	r3, [pc, #16]	; (13c98 <nrf_cc3xx_platform_init+0x40>)
   13c86:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   13c8a:	bd10      	pop	{r4, pc}
   13c8c:	200037d8 	.word	0x200037d8
   13c90:	200037dc 	.word	0x200037dc
   13c94:	ffff8ffe 	.word	0xffff8ffe
   13c98:	000225d0 	.word	0x000225d0

00013c9c <nrf_cc3xx_platform_abort>:
   13c9c:	f3bf 8f4f 	dsb	sy
   13ca0:	4905      	ldr	r1, [pc, #20]	; (13cb8 <nrf_cc3xx_platform_abort+0x1c>)
   13ca2:	4b06      	ldr	r3, [pc, #24]	; (13cbc <nrf_cc3xx_platform_abort+0x20>)
   13ca4:	68ca      	ldr	r2, [r1, #12]
   13ca6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   13caa:	4313      	orrs	r3, r2
   13cac:	60cb      	str	r3, [r1, #12]
   13cae:	f3bf 8f4f 	dsb	sy
   13cb2:	bf00      	nop
   13cb4:	e7fd      	b.n	13cb2 <nrf_cc3xx_platform_abort+0x16>
   13cb6:	bf00      	nop
   13cb8:	e000ed00 	.word	0xe000ed00
   13cbc:	05fa0004 	.word	0x05fa0004

00013cc0 <CC_PalAbort>:
   13cc0:	b410      	push	{r4}
   13cc2:	4b09      	ldr	r3, [pc, #36]	; (13ce8 <CC_PalAbort+0x28>)
   13cc4:	4909      	ldr	r1, [pc, #36]	; (13cec <CC_PalAbort+0x2c>)
   13cc6:	4c0a      	ldr	r4, [pc, #40]	; (13cf0 <CC_PalAbort+0x30>)
   13cc8:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
   13ccc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   13cd0:	6849      	ldr	r1, [r1, #4]
   13cd2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   13cd6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   13cda:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   13cde:	2300      	movs	r3, #0
   13ce0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   13ce4:	bc10      	pop	{r4}
   13ce6:	4708      	bx	r1
   13ce8:	5002b000 	.word	0x5002b000
   13cec:	20000308 	.word	0x20000308
   13cf0:	5002a000 	.word	0x5002a000

00013cf4 <nrf_cc3xx_platform_set_abort>:
   13cf4:	e9d0 1200 	ldrd	r1, r2, [r0]
   13cf8:	4b01      	ldr	r3, [pc, #4]	; (13d00 <nrf_cc3xx_platform_set_abort+0xc>)
   13cfa:	e9c3 1200 	strd	r1, r2, [r3]
   13cfe:	4770      	bx	lr
   13d00:	20000308 	.word	0x20000308

00013d04 <nrf_cc3xx_platform_ctr_drbg_init>:
   13d04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13d08:	4c14      	ldr	r4, [pc, #80]	; (13d5c <nrf_cc3xx_platform_ctr_drbg_init+0x58>)
   13d0a:	4e15      	ldr	r6, [pc, #84]	; (13d60 <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
   13d0c:	2800      	cmp	r0, #0
   13d0e:	bf18      	it	ne
   13d10:	4604      	movne	r4, r0
   13d12:	b083      	sub	sp, #12
   13d14:	6823      	ldr	r3, [r4, #0]
   13d16:	42b3      	cmp	r3, r6
   13d18:	d01c      	beq.n	13d54 <nrf_cc3xx_platform_ctr_drbg_init+0x50>
   13d1a:	460d      	mov	r5, r1
   13d1c:	4620      	mov	r0, r4
   13d1e:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
   13d22:	f104 0904 	add.w	r9, r4, #4
   13d26:	4617      	mov	r7, r2
   13d28:	f504 788e 	add.w	r8, r4, #284	; 0x11c
   13d2c:	f000 f8e8 	bl	13f00 <mbedtls_platform_zeroize>
   13d30:	4648      	mov	r0, r9
   13d32:	f000 fd1d 	bl	14770 <cc_mbedtls_entropy_init>
   13d36:	4640      	mov	r0, r8
   13d38:	f000 fb4a 	bl	143d0 <cc_mbedtls_ctr_drbg_init>
   13d3c:	4909      	ldr	r1, [pc, #36]	; (13d64 <nrf_cc3xx_platform_ctr_drbg_init+0x60>)
   13d3e:	9700      	str	r7, [sp, #0]
   13d40:	462b      	mov	r3, r5
   13d42:	464a      	mov	r2, r9
   13d44:	4640      	mov	r0, r8
   13d46:	f000 fb59 	bl	143fc <cc_mbedtls_ctr_drbg_seed>
   13d4a:	b900      	cbnz	r0, 13d4e <nrf_cc3xx_platform_ctr_drbg_init+0x4a>
   13d4c:	6026      	str	r6, [r4, #0]
   13d4e:	b003      	add	sp, #12
   13d50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13d54:	2000      	movs	r0, #0
   13d56:	b003      	add	sp, #12
   13d58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13d5c:	200037e0 	.word	0x200037e0
   13d60:	5ac9bca5 	.word	0x5ac9bca5
   13d64:	000147f9 	.word	0x000147f9

00013d68 <nrf_cc3xx_platform_ctr_drbg_get>:
   13d68:	b570      	push	{r4, r5, r6, lr}
   13d6a:	4d0d      	ldr	r5, [pc, #52]	; (13da0 <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
   13d6c:	2800      	cmp	r0, #0
   13d6e:	bf18      	it	ne
   13d70:	4605      	movne	r5, r0
   13d72:	461e      	mov	r6, r3
   13d74:	6828      	ldr	r0, [r5, #0]
   13d76:	4b0b      	ldr	r3, [pc, #44]	; (13da4 <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
   13d78:	4298      	cmp	r0, r3
   13d7a:	b082      	sub	sp, #8
   13d7c:	d10d      	bne.n	13d9a <nrf_cc3xx_platform_ctr_drbg_get+0x32>
   13d7e:	f505 708e 	add.w	r0, r5, #284	; 0x11c
   13d82:	2500      	movs	r5, #0
   13d84:	9500      	str	r5, [sp, #0]
   13d86:	462b      	mov	r3, r5
   13d88:	4614      	mov	r4, r2
   13d8a:	f000 fb85 	bl	14498 <cc_mbedtls_ctr_drbg_random_with_add>
   13d8e:	2800      	cmp	r0, #0
   13d90:	bf18      	it	ne
   13d92:	462c      	movne	r4, r5
   13d94:	6034      	str	r4, [r6, #0]
   13d96:	b002      	add	sp, #8
   13d98:	bd70      	pop	{r4, r5, r6, pc}
   13d9a:	4803      	ldr	r0, [pc, #12]	; (13da8 <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
   13d9c:	e7fb      	b.n	13d96 <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
   13d9e:	bf00      	nop
   13da0:	200037e0 	.word	0x200037e0
   13da4:	5ac9bca5 	.word	0x5ac9bca5
   13da8:	ffff8fe8 	.word	0xffff8fe8

00013dac <mutex_free>:
   13dac:	b510      	push	{r4, lr}
   13dae:	4604      	mov	r4, r0
   13db0:	b150      	cbz	r0, 13dc8 <mutex_free+0x1c>
   13db2:	6863      	ldr	r3, [r4, #4]
   13db4:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   13db8:	d005      	beq.n	13dc6 <mutex_free+0x1a>
   13dba:	4a06      	ldr	r2, [pc, #24]	; (13dd4 <mutex_free+0x28>)
   13dbc:	4293      	cmp	r3, r2
   13dbe:	d002      	beq.n	13dc6 <mutex_free+0x1a>
   13dc0:	2300      	movs	r3, #0
   13dc2:	6023      	str	r3, [r4, #0]
   13dc4:	6062      	str	r2, [r4, #4]
   13dc6:	bd10      	pop	{r4, pc}
   13dc8:	4b03      	ldr	r3, [pc, #12]	; (13dd8 <mutex_free+0x2c>)
   13dca:	4804      	ldr	r0, [pc, #16]	; (13ddc <mutex_free+0x30>)
   13dcc:	685b      	ldr	r3, [r3, #4]
   13dce:	4798      	blx	r3
   13dd0:	e7ef      	b.n	13db2 <mutex_free+0x6>
   13dd2:	bf00      	nop
   13dd4:	a95c5f2c 	.word	0xa95c5f2c
   13dd8:	20000308 	.word	0x20000308
   13ddc:	000225ec 	.word	0x000225ec

00013de0 <mutex_lock>:
   13de0:	b1c8      	cbz	r0, 13e16 <mutex_lock+0x36>
   13de2:	6843      	ldr	r3, [r0, #4]
   13de4:	4a0d      	ldr	r2, [pc, #52]	; (13e1c <mutex_lock+0x3c>)
   13de6:	4293      	cmp	r3, r2
   13de8:	d013      	beq.n	13e12 <mutex_lock+0x32>
   13dea:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   13dee:	d00e      	beq.n	13e0e <mutex_lock+0x2e>
   13df0:	2301      	movs	r3, #1
   13df2:	e850 2f00 	ldrex	r2, [r0]
   13df6:	4619      	mov	r1, r3
   13df8:	e840 1c00 	strex	ip, r1, [r0]
   13dfc:	f09c 0f00 	teq	ip, #0
   13e00:	d1f7      	bne.n	13df2 <mutex_lock+0x12>
   13e02:	2a01      	cmp	r2, #1
   13e04:	d0f5      	beq.n	13df2 <mutex_lock+0x12>
   13e06:	f3bf 8f5f 	dmb	sy
   13e0a:	2000      	movs	r0, #0
   13e0c:	4770      	bx	lr
   13e0e:	4804      	ldr	r0, [pc, #16]	; (13e20 <mutex_lock+0x40>)
   13e10:	4770      	bx	lr
   13e12:	4804      	ldr	r0, [pc, #16]	; (13e24 <mutex_lock+0x44>)
   13e14:	4770      	bx	lr
   13e16:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   13e1a:	4770      	bx	lr
   13e1c:	a95c5f2c 	.word	0xa95c5f2c
   13e20:	ffff8fe9 	.word	0xffff8fe9
   13e24:	ffff8fea 	.word	0xffff8fea

00013e28 <mutex_unlock>:
   13e28:	b180      	cbz	r0, 13e4c <mutex_unlock+0x24>
   13e2a:	6843      	ldr	r3, [r0, #4]
   13e2c:	4a09      	ldr	r2, [pc, #36]	; (13e54 <mutex_unlock+0x2c>)
   13e2e:	4293      	cmp	r3, r2
   13e30:	d00a      	beq.n	13e48 <mutex_unlock+0x20>
   13e32:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   13e36:	d005      	beq.n	13e44 <mutex_unlock+0x1c>
   13e38:	f3bf 8f5f 	dmb	sy
   13e3c:	2300      	movs	r3, #0
   13e3e:	6003      	str	r3, [r0, #0]
   13e40:	4618      	mov	r0, r3
   13e42:	4770      	bx	lr
   13e44:	4804      	ldr	r0, [pc, #16]	; (13e58 <mutex_unlock+0x30>)
   13e46:	4770      	bx	lr
   13e48:	4804      	ldr	r0, [pc, #16]	; (13e5c <mutex_unlock+0x34>)
   13e4a:	4770      	bx	lr
   13e4c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   13e50:	4770      	bx	lr
   13e52:	bf00      	nop
   13e54:	a95c5f2c 	.word	0xa95c5f2c
   13e58:	ffff8fe9 	.word	0xffff8fe9
   13e5c:	ffff8fea 	.word	0xffff8fea

00013e60 <mutex_init>:
   13e60:	b510      	push	{r4, lr}
   13e62:	4604      	mov	r4, r0
   13e64:	b120      	cbz	r0, 13e70 <mutex_init+0x10>
   13e66:	4b04      	ldr	r3, [pc, #16]	; (13e78 <mutex_init+0x18>)
   13e68:	6063      	str	r3, [r4, #4]
   13e6a:	2200      	movs	r2, #0
   13e6c:	6022      	str	r2, [r4, #0]
   13e6e:	bd10      	pop	{r4, pc}
   13e70:	4802      	ldr	r0, [pc, #8]	; (13e7c <mutex_init+0x1c>)
   13e72:	f7ff ff25 	bl	13cc0 <CC_PalAbort>
   13e76:	e7f6      	b.n	13e66 <mutex_init+0x6>
   13e78:	3a00003a 	.word	0x3a00003a
   13e7c:	00022614 	.word	0x00022614

00013e80 <nrf_cc3xx_platform_set_mutexes>:
   13e80:	b570      	push	{r4, r5, r6, lr}
   13e82:	e9d0 2300 	ldrd	r2, r3, [r0]
   13e86:	4c15      	ldr	r4, [pc, #84]	; (13edc <nrf_cc3xx_platform_set_mutexes+0x5c>)
   13e88:	4d15      	ldr	r5, [pc, #84]	; (13ee0 <nrf_cc3xx_platform_set_mutexes+0x60>)
   13e8a:	6063      	str	r3, [r4, #4]
   13e8c:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
   13e90:	e9c4 3002 	strd	r3, r0, [r4, #8]
   13e94:	6022      	str	r2, [r4, #0]
   13e96:	4b13      	ldr	r3, [pc, #76]	; (13ee4 <nrf_cc3xx_platform_set_mutexes+0x64>)
   13e98:	6808      	ldr	r0, [r1, #0]
   13e9a:	6018      	str	r0, [r3, #0]
   13e9c:	6848      	ldr	r0, [r1, #4]
   13e9e:	6058      	str	r0, [r3, #4]
   13ea0:	6888      	ldr	r0, [r1, #8]
   13ea2:	6098      	str	r0, [r3, #8]
   13ea4:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
   13ea8:	60d8      	str	r0, [r3, #12]
   13eaa:	6119      	str	r1, [r3, #16]
   13eac:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   13eb0:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   13eb4:	d010      	beq.n	13ed8 <nrf_cc3xx_platform_set_mutexes+0x58>
   13eb6:	490c      	ldr	r1, [pc, #48]	; (13ee8 <nrf_cc3xx_platform_set_mutexes+0x68>)
   13eb8:	f8c5 11bc 	str.w	r1, [r5, #444]	; 0x1bc
   13ebc:	2300      	movs	r3, #0
   13ebe:	e9c5 3145 	strd	r3, r1, [r5, #276]	; 0x114
   13ec2:	f505 708a 	add.w	r0, r5, #276	; 0x114
   13ec6:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
   13eca:	4790      	blx	r2
   13ecc:	6823      	ldr	r3, [r4, #0]
   13ece:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
   13ed2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   13ed6:	4718      	bx	r3
   13ed8:	bd70      	pop	{r4, r5, r6, pc}
   13eda:	bf00      	nop
   13edc:	20000318 	.word	0x20000318
   13ee0:	200037e0 	.word	0x200037e0
   13ee4:	20000328 	.word	0x20000328
   13ee8:	a95c5f2c 	.word	0xa95c5f2c

00013eec <mbedtls_zeroize_internal>:
   13eec:	b138      	cbz	r0, 13efe <mbedtls_zeroize_internal+0x12>
   13eee:	b131      	cbz	r1, 13efe <mbedtls_zeroize_internal+0x12>
   13ef0:	4401      	add	r1, r0
   13ef2:	2200      	movs	r2, #0
   13ef4:	4603      	mov	r3, r0
   13ef6:	3001      	adds	r0, #1
   13ef8:	4281      	cmp	r1, r0
   13efa:	701a      	strb	r2, [r3, #0]
   13efc:	d1fa      	bne.n	13ef4 <mbedtls_zeroize_internal+0x8>
   13efe:	4770      	bx	lr

00013f00 <mbedtls_platform_zeroize>:
   13f00:	b138      	cbz	r0, 13f12 <mbedtls_platform_zeroize+0x12>
   13f02:	b131      	cbz	r1, 13f12 <mbedtls_platform_zeroize+0x12>
   13f04:	4401      	add	r1, r0
   13f06:	2200      	movs	r2, #0
   13f08:	4603      	mov	r3, r0
   13f0a:	3001      	adds	r0, #1
   13f0c:	4288      	cmp	r0, r1
   13f0e:	701a      	strb	r2, [r3, #0]
   13f10:	d1fa      	bne.n	13f08 <mbedtls_platform_zeroize+0x8>
   13f12:	4770      	bx	lr

00013f14 <block_cipher_df>:
   13f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f18:	b0b7      	sub	sp, #220	; 0xdc
   13f1a:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   13f1e:	9005      	str	r0, [sp, #20]
   13f20:	f200 8147 	bhi.w	141b2 <block_cipher_df+0x29e>
   13f24:	4614      	mov	r4, r2
   13f26:	460d      	mov	r5, r1
   13f28:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   13f2c:	2100      	movs	r1, #0
   13f2e:	48a2      	ldr	r0, [pc, #648]	; (141b8 <block_cipher_df+0x2a4>)
   13f30:	f00b ff82 	bl	1fe38 <memset>
   13f34:	a819      	add	r0, sp, #100	; 0x64
   13f36:	f001 f9cf 	bl	152d8 <cc_mbedtls_aes_init>
   13f3a:	489f      	ldr	r0, [pc, #636]	; (141b8 <block_cipher_df+0x2a4>)
   13f3c:	2300      	movs	r3, #0
   13f3e:	8203      	strh	r3, [r0, #16]
   13f40:	ba63      	rev16	r3, r4
   13f42:	8243      	strh	r3, [r0, #18]
   13f44:	2320      	movs	r3, #32
   13f46:	4629      	mov	r1, r5
   13f48:	75c3      	strb	r3, [r0, #23]
   13f4a:	4605      	mov	r5, r0
   13f4c:	4622      	mov	r2, r4
   13f4e:	3018      	adds	r0, #24
   13f50:	f00b ff37 	bl	1fdc2 <memcpy>
   13f54:	462b      	mov	r3, r5
   13f56:	4423      	add	r3, r4
   13f58:	2280      	movs	r2, #128	; 0x80
   13f5a:	761a      	strb	r2, [r3, #24]
   13f5c:	4b97      	ldr	r3, [pc, #604]	; (141bc <block_cipher_df+0x2a8>)
   13f5e:	930d      	str	r3, [sp, #52]	; 0x34
   13f60:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   13f64:	930e      	str	r3, [sp, #56]	; 0x38
   13f66:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   13f6a:	930f      	str	r3, [sp, #60]	; 0x3c
   13f6c:	a90d      	add	r1, sp, #52	; 0x34
   13f6e:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   13f72:	a819      	add	r0, sp, #100	; 0x64
   13f74:	9310      	str	r3, [sp, #64]	; 0x40
   13f76:	f001 f9c5 	bl	15304 <cc_mbedtls_aes_setkey_enc>
   13f7a:	4605      	mov	r5, r0
   13f7c:	2800      	cmp	r0, #0
   13f7e:	f040 80f4 	bne.w	1416a <block_cipher_df+0x256>
   13f82:	f104 0319 	add.w	r3, r4, #25
   13f86:	9306      	str	r3, [sp, #24]
   13f88:	f10d 0820 	add.w	r8, sp, #32
   13f8c:	ab11      	add	r3, sp, #68	; 0x44
   13f8e:	9304      	str	r3, [sp, #16]
   13f90:	9307      	str	r3, [sp, #28]
   13f92:	46c1      	mov	r9, r8
   13f94:	2210      	movs	r2, #16
   13f96:	2100      	movs	r1, #0
   13f98:	4648      	mov	r0, r9
   13f9a:	f00b ff4d 	bl	1fe38 <memset>
   13f9e:	f8df a220 	ldr.w	sl, [pc, #544]	; 141c0 <block_cipher_df+0x2ac>
   13fa2:	9b06      	ldr	r3, [sp, #24]
   13fa4:	9300      	str	r3, [sp, #0]
   13fa6:	f8cd 900c 	str.w	r9, [sp, #12]
   13faa:	f81a 0c08 	ldrb.w	r0, [sl, #-8]
   13fae:	f81a 3c07 	ldrb.w	r3, [sl, #-7]
   13fb2:	f81a 2c10 	ldrb.w	r2, [sl, #-16]
   13fb6:	f89d 5020 	ldrb.w	r5, [sp, #32]
   13fba:	f89d e028 	ldrb.w	lr, [sp, #40]	; 0x28
   13fbe:	f89d c029 	ldrb.w	ip, [sp, #41]	; 0x29
   13fc2:	f81a 6c04 	ldrb.w	r6, [sl, #-4]
   13fc6:	f81a 1c0c 	ldrb.w	r1, [sl, #-12]
   13fca:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
   13fce:	f89d b02c 	ldrb.w	fp, [sp, #44]	; 0x2c
   13fd2:	f89d 702d 	ldrb.w	r7, [sp, #45]	; 0x2d
   13fd6:	406a      	eors	r2, r5
   13fd8:	ea8e 0e00 	eor.w	lr, lr, r0
   13fdc:	9d00      	ldr	r5, [sp, #0]
   13fde:	f89d 002a 	ldrb.w	r0, [sp, #42]	; 0x2a
   13fe2:	9202      	str	r2, [sp, #8]
   13fe4:	ea8c 0c03 	eor.w	ip, ip, r3
   13fe8:	f81a 3c06 	ldrb.w	r3, [sl, #-6]
   13fec:	f81a 2c0f 	ldrb.w	r2, [sl, #-15]
   13ff0:	2d10      	cmp	r5, #16
   13ff2:	ea80 0003 	eor.w	r0, r0, r3
   13ff6:	462b      	mov	r3, r5
   13ff8:	bf8c      	ite	hi
   13ffa:	3b10      	subhi	r3, #16
   13ffc:	1b6b      	subls	r3, r5, r5
   13ffe:	9300      	str	r3, [sp, #0]
   14000:	f89d 5021 	ldrb.w	r5, [sp, #33]	; 0x21
   14004:	f81a 3c03 	ldrb.w	r3, [sl, #-3]
   14008:	f81a 9c0e 	ldrb.w	r9, [sl, #-14]
   1400c:	f81a 8c0a 	ldrb.w	r8, [sl, #-10]
   14010:	4061      	eors	r1, r4
   14012:	405f      	eors	r7, r3
   14014:	2400      	movs	r4, #0
   14016:	406a      	eors	r2, r5
   14018:	ea8b 0b06 	eor.w	fp, fp, r6
   1401c:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
   14020:	f81a 6c02 	ldrb.w	r6, [sl, #-2]
   14024:	f81a 3c0b 	ldrb.w	r3, [sl, #-11]
   14028:	9601      	str	r6, [sp, #4]
   1402a:	4626      	mov	r6, r4
   1402c:	406b      	eors	r3, r5
   1402e:	f36b 0607 	bfi	r6, fp, #0, #8
   14032:	4625      	mov	r5, r4
   14034:	f367 260f 	bfi	r6, r7, #8, #8
   14038:	462f      	mov	r7, r5
   1403a:	f361 0707 	bfi	r7, r1, #0, #8
   1403e:	9902      	ldr	r1, [sp, #8]
   14040:	f361 0507 	bfi	r5, r1, #0, #8
   14044:	f362 250f 	bfi	r5, r2, #8, #8
   14048:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   1404c:	f81a 1c0d 	ldrb.w	r1, [sl, #-13]
   14050:	f363 270f 	bfi	r7, r3, #8, #8
   14054:	ea82 0909 	eor.w	r9, r2, r9
   14058:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   1405c:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   14060:	ea83 0808 	eor.w	r8, r3, r8
   14064:	404a      	eors	r2, r1
   14066:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   1406a:	f81a 1c09 	ldrb.w	r1, [sl, #-9]
   1406e:	f36e 0407 	bfi	r4, lr, #0, #8
   14072:	404b      	eors	r3, r1
   14074:	f368 4717 	bfi	r7, r8, #16, #8
   14078:	f36c 240f 	bfi	r4, ip, #8, #8
   1407c:	f363 671f 	bfi	r7, r3, #24, #8
   14080:	9b03      	ldr	r3, [sp, #12]
   14082:	f89d c02e 	ldrb.w	ip, [sp, #46]	; 0x2e
   14086:	f8dd e004 	ldr.w	lr, [sp, #4]
   1408a:	f81a 8c01 	ldrb.w	r8, [sl, #-1]
   1408e:	ea8c 0c0e 	eor.w	ip, ip, lr
   14092:	f36c 4617 	bfi	r6, ip, #16, #8
   14096:	f89d c02f 	ldrb.w	ip, [sp, #47]	; 0x2f
   1409a:	f81a ec05 	ldrb.w	lr, [sl, #-5]
   1409e:	ea8c 0c08 	eor.w	ip, ip, r8
   140a2:	f36c 661f 	bfi	r6, ip, #24, #8
   140a6:	f369 4517 	bfi	r5, r9, #16, #8
   140aa:	f89d c02b 	ldrb.w	ip, [sp, #43]	; 0x2b
   140ae:	960b      	str	r6, [sp, #44]	; 0x2c
   140b0:	f362 651f 	bfi	r5, r2, #24, #8
   140b4:	f360 4417 	bfi	r4, r0, #16, #8
   140b8:	9508      	str	r5, [sp, #32]
   140ba:	ea8c 050e 	eor.w	r5, ip, lr
   140be:	f365 641f 	bfi	r4, r5, #24, #8
   140c2:	461a      	mov	r2, r3
   140c4:	2101      	movs	r1, #1
   140c6:	a819      	add	r0, sp, #100	; 0x64
   140c8:	f10a 0a10 	add.w	sl, sl, #16
   140cc:	e9cd 7409 	strd	r7, r4, [sp, #36]	; 0x24
   140d0:	f001 f932 	bl	15338 <cc_mbedtls_aes_crypt_ecb>
   140d4:	2800      	cmp	r0, #0
   140d6:	d168      	bne.n	141aa <block_cipher_df+0x296>
   140d8:	9b00      	ldr	r3, [sp, #0]
   140da:	2b00      	cmp	r3, #0
   140dc:	f47f af65 	bne.w	13faa <block_cipher_df+0x96>
   140e0:	9c07      	ldr	r4, [sp, #28]
   140e2:	f8dd 900c 	ldr.w	r9, [sp, #12]
   140e6:	4620      	mov	r0, r4
   140e8:	2210      	movs	r2, #16
   140ea:	3410      	adds	r4, #16
   140ec:	4649      	mov	r1, r9
   140ee:	9407      	str	r4, [sp, #28]
   140f0:	f00b fe67 	bl	1fdc2 <memcpy>
   140f4:	4a30      	ldr	r2, [pc, #192]	; (141b8 <block_cipher_df+0x2a4>)
   140f6:	78d3      	ldrb	r3, [r2, #3]
   140f8:	3301      	adds	r3, #1
   140fa:	70d3      	strb	r3, [r2, #3]
   140fc:	ab19      	add	r3, sp, #100	; 0x64
   140fe:	429c      	cmp	r4, r3
   14100:	f47f af48 	bne.w	13f94 <block_cipher_df+0x80>
   14104:	9904      	ldr	r1, [sp, #16]
   14106:	2280      	movs	r2, #128	; 0x80
   14108:	4618      	mov	r0, r3
   1410a:	f001 f8fb 	bl	15304 <cc_mbedtls_aes_setkey_enc>
   1410e:	46c8      	mov	r8, r9
   14110:	4605      	mov	r5, r0
   14112:	bb70      	cbnz	r0, 14172 <block_cipher_df+0x25e>
   14114:	9c05      	ldr	r4, [sp, #20]
   14116:	f104 0620 	add.w	r6, r4, #32
   1411a:	ab15      	add	r3, sp, #84	; 0x54
   1411c:	461a      	mov	r2, r3
   1411e:	2101      	movs	r1, #1
   14120:	a819      	add	r0, sp, #100	; 0x64
   14122:	f001 f909 	bl	15338 <cc_mbedtls_aes_crypt_ecb>
   14126:	2210      	movs	r2, #16
   14128:	4605      	mov	r5, r0
   1412a:	bb10      	cbnz	r0, 14172 <block_cipher_df+0x25e>
   1412c:	4620      	mov	r0, r4
   1412e:	a915      	add	r1, sp, #84	; 0x54
   14130:	3410      	adds	r4, #16
   14132:	f00b fe46 	bl	1fdc2 <memcpy>
   14136:	42b4      	cmp	r4, r6
   14138:	d1ef      	bne.n	1411a <block_cipher_df+0x206>
   1413a:	a819      	add	r0, sp, #100	; 0x64
   1413c:	f001 f8dc 	bl	152f8 <cc_mbedtls_aes_free>
   14140:	481d      	ldr	r0, [pc, #116]	; (141b8 <block_cipher_df+0x2a4>)
   14142:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   14146:	f7ff fedb 	bl	13f00 <mbedtls_platform_zeroize>
   1414a:	9804      	ldr	r0, [sp, #16]
   1414c:	2120      	movs	r1, #32
   1414e:	f7ff fed7 	bl	13f00 <mbedtls_platform_zeroize>
   14152:	a80d      	add	r0, sp, #52	; 0x34
   14154:	2110      	movs	r1, #16
   14156:	f7ff fed3 	bl	13f00 <mbedtls_platform_zeroize>
   1415a:	4640      	mov	r0, r8
   1415c:	2110      	movs	r1, #16
   1415e:	f7ff fecf 	bl	13f00 <mbedtls_platform_zeroize>
   14162:	4628      	mov	r0, r5
   14164:	b037      	add	sp, #220	; 0xdc
   14166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1416a:	ab11      	add	r3, sp, #68	; 0x44
   1416c:	9304      	str	r3, [sp, #16]
   1416e:	f10d 0820 	add.w	r8, sp, #32
   14172:	a819      	add	r0, sp, #100	; 0x64
   14174:	f001 f8c0 	bl	152f8 <cc_mbedtls_aes_free>
   14178:	480f      	ldr	r0, [pc, #60]	; (141b8 <block_cipher_df+0x2a4>)
   1417a:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   1417e:	f7ff febf 	bl	13f00 <mbedtls_platform_zeroize>
   14182:	9804      	ldr	r0, [sp, #16]
   14184:	2120      	movs	r1, #32
   14186:	f7ff febb 	bl	13f00 <mbedtls_platform_zeroize>
   1418a:	a80d      	add	r0, sp, #52	; 0x34
   1418c:	2110      	movs	r1, #16
   1418e:	f7ff feb7 	bl	13f00 <mbedtls_platform_zeroize>
   14192:	4640      	mov	r0, r8
   14194:	2110      	movs	r1, #16
   14196:	f7ff feb3 	bl	13f00 <mbedtls_platform_zeroize>
   1419a:	9805      	ldr	r0, [sp, #20]
   1419c:	2120      	movs	r1, #32
   1419e:	f7ff feaf 	bl	13f00 <mbedtls_platform_zeroize>
   141a2:	4628      	mov	r0, r5
   141a4:	b037      	add	sp, #220	; 0xdc
   141a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   141aa:	f8dd 800c 	ldr.w	r8, [sp, #12]
   141ae:	4605      	mov	r5, r0
   141b0:	e7df      	b.n	14172 <block_cipher_df+0x25e>
   141b2:	f06f 0537 	mvn.w	r5, #55	; 0x37
   141b6:	e7f4      	b.n	141a2 <block_cipher_df+0x28e>
   141b8:	200039b0 	.word	0x200039b0
   141bc:	03020100 	.word	0x03020100
   141c0:	200039c0 	.word	0x200039c0

000141c4 <ctr_drbg_update_internal>:
   141c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   141c8:	b088      	sub	sp, #32
   141ca:	4604      	mov	r4, r0
   141cc:	460d      	mov	r5, r1
   141ce:	2220      	movs	r2, #32
   141d0:	2100      	movs	r1, #0
   141d2:	4668      	mov	r0, sp
   141d4:	f00b fe30 	bl	1fe38 <memset>
   141d8:	f104 0620 	add.w	r6, r4, #32
   141dc:	466f      	mov	r7, sp
   141de:	7be2      	ldrb	r2, [r4, #15]
   141e0:	3201      	adds	r2, #1
   141e2:	b2d2      	uxtb	r2, r2
   141e4:	73e2      	strb	r2, [r4, #15]
   141e6:	2a00      	cmp	r2, #0
   141e8:	d14d      	bne.n	14286 <ctr_drbg_update_internal+0xc2>
   141ea:	7ba2      	ldrb	r2, [r4, #14]
   141ec:	3201      	adds	r2, #1
   141ee:	b2d2      	uxtb	r2, r2
   141f0:	73a2      	strb	r2, [r4, #14]
   141f2:	2a00      	cmp	r2, #0
   141f4:	d147      	bne.n	14286 <ctr_drbg_update_internal+0xc2>
   141f6:	7b63      	ldrb	r3, [r4, #13]
   141f8:	3301      	adds	r3, #1
   141fa:	b2db      	uxtb	r3, r3
   141fc:	7363      	strb	r3, [r4, #13]
   141fe:	2b00      	cmp	r3, #0
   14200:	d141      	bne.n	14286 <ctr_drbg_update_internal+0xc2>
   14202:	7b23      	ldrb	r3, [r4, #12]
   14204:	3301      	adds	r3, #1
   14206:	b2db      	uxtb	r3, r3
   14208:	7323      	strb	r3, [r4, #12]
   1420a:	2b00      	cmp	r3, #0
   1420c:	d13b      	bne.n	14286 <ctr_drbg_update_internal+0xc2>
   1420e:	7ae3      	ldrb	r3, [r4, #11]
   14210:	3301      	adds	r3, #1
   14212:	b2db      	uxtb	r3, r3
   14214:	72e3      	strb	r3, [r4, #11]
   14216:	2b00      	cmp	r3, #0
   14218:	d135      	bne.n	14286 <ctr_drbg_update_internal+0xc2>
   1421a:	7aa3      	ldrb	r3, [r4, #10]
   1421c:	3301      	adds	r3, #1
   1421e:	b2db      	uxtb	r3, r3
   14220:	72a3      	strb	r3, [r4, #10]
   14222:	2b00      	cmp	r3, #0
   14224:	d12f      	bne.n	14286 <ctr_drbg_update_internal+0xc2>
   14226:	7a63      	ldrb	r3, [r4, #9]
   14228:	3301      	adds	r3, #1
   1422a:	b2db      	uxtb	r3, r3
   1422c:	7263      	strb	r3, [r4, #9]
   1422e:	bb53      	cbnz	r3, 14286 <ctr_drbg_update_internal+0xc2>
   14230:	7a23      	ldrb	r3, [r4, #8]
   14232:	3301      	adds	r3, #1
   14234:	b2db      	uxtb	r3, r3
   14236:	7223      	strb	r3, [r4, #8]
   14238:	bb2b      	cbnz	r3, 14286 <ctr_drbg_update_internal+0xc2>
   1423a:	79e3      	ldrb	r3, [r4, #7]
   1423c:	3301      	adds	r3, #1
   1423e:	b2db      	uxtb	r3, r3
   14240:	71e3      	strb	r3, [r4, #7]
   14242:	bb03      	cbnz	r3, 14286 <ctr_drbg_update_internal+0xc2>
   14244:	79a3      	ldrb	r3, [r4, #6]
   14246:	3301      	adds	r3, #1
   14248:	b2db      	uxtb	r3, r3
   1424a:	71a3      	strb	r3, [r4, #6]
   1424c:	b9db      	cbnz	r3, 14286 <ctr_drbg_update_internal+0xc2>
   1424e:	7963      	ldrb	r3, [r4, #5]
   14250:	3301      	adds	r3, #1
   14252:	b2db      	uxtb	r3, r3
   14254:	7163      	strb	r3, [r4, #5]
   14256:	b9b3      	cbnz	r3, 14286 <ctr_drbg_update_internal+0xc2>
   14258:	7923      	ldrb	r3, [r4, #4]
   1425a:	3301      	adds	r3, #1
   1425c:	b2db      	uxtb	r3, r3
   1425e:	7123      	strb	r3, [r4, #4]
   14260:	b98b      	cbnz	r3, 14286 <ctr_drbg_update_internal+0xc2>
   14262:	78e3      	ldrb	r3, [r4, #3]
   14264:	3301      	adds	r3, #1
   14266:	b2db      	uxtb	r3, r3
   14268:	70e3      	strb	r3, [r4, #3]
   1426a:	b963      	cbnz	r3, 14286 <ctr_drbg_update_internal+0xc2>
   1426c:	78a3      	ldrb	r3, [r4, #2]
   1426e:	3301      	adds	r3, #1
   14270:	b2db      	uxtb	r3, r3
   14272:	70a3      	strb	r3, [r4, #2]
   14274:	b93b      	cbnz	r3, 14286 <ctr_drbg_update_internal+0xc2>
   14276:	7863      	ldrb	r3, [r4, #1]
   14278:	3301      	adds	r3, #1
   1427a:	b2db      	uxtb	r3, r3
   1427c:	7063      	strb	r3, [r4, #1]
   1427e:	b913      	cbnz	r3, 14286 <ctr_drbg_update_internal+0xc2>
   14280:	7823      	ldrb	r3, [r4, #0]
   14282:	3301      	adds	r3, #1
   14284:	7023      	strb	r3, [r4, #0]
   14286:	463b      	mov	r3, r7
   14288:	4622      	mov	r2, r4
   1428a:	2101      	movs	r1, #1
   1428c:	4630      	mov	r0, r6
   1428e:	f001 f853 	bl	15338 <cc_mbedtls_aes_crypt_ecb>
   14292:	4680      	mov	r8, r0
   14294:	bb50      	cbnz	r0, 142ec <ctr_drbg_update_internal+0x128>
   14296:	3710      	adds	r7, #16
   14298:	ab08      	add	r3, sp, #32
   1429a:	429f      	cmp	r7, r3
   1429c:	d19f      	bne.n	141de <ctr_drbg_update_internal+0x1a>
   1429e:	9a00      	ldr	r2, [sp, #0]
   142a0:	682b      	ldr	r3, [r5, #0]
   142a2:	9906      	ldr	r1, [sp, #24]
   142a4:	4053      	eors	r3, r2
   142a6:	9300      	str	r3, [sp, #0]
   142a8:	9a01      	ldr	r2, [sp, #4]
   142aa:	686b      	ldr	r3, [r5, #4]
   142ac:	4053      	eors	r3, r2
   142ae:	9301      	str	r3, [sp, #4]
   142b0:	9a02      	ldr	r2, [sp, #8]
   142b2:	68ab      	ldr	r3, [r5, #8]
   142b4:	4053      	eors	r3, r2
   142b6:	9302      	str	r3, [sp, #8]
   142b8:	9a03      	ldr	r2, [sp, #12]
   142ba:	68eb      	ldr	r3, [r5, #12]
   142bc:	4053      	eors	r3, r2
   142be:	9303      	str	r3, [sp, #12]
   142c0:	9a04      	ldr	r2, [sp, #16]
   142c2:	692b      	ldr	r3, [r5, #16]
   142c4:	4053      	eors	r3, r2
   142c6:	9304      	str	r3, [sp, #16]
   142c8:	9a05      	ldr	r2, [sp, #20]
   142ca:	696b      	ldr	r3, [r5, #20]
   142cc:	4053      	eors	r3, r2
   142ce:	69aa      	ldr	r2, [r5, #24]
   142d0:	9305      	str	r3, [sp, #20]
   142d2:	404a      	eors	r2, r1
   142d4:	69eb      	ldr	r3, [r5, #28]
   142d6:	9206      	str	r2, [sp, #24]
   142d8:	9a07      	ldr	r2, [sp, #28]
   142da:	4630      	mov	r0, r6
   142dc:	4053      	eors	r3, r2
   142de:	4669      	mov	r1, sp
   142e0:	2280      	movs	r2, #128	; 0x80
   142e2:	9307      	str	r3, [sp, #28]
   142e4:	f001 f80e 	bl	15304 <cc_mbedtls_aes_setkey_enc>
   142e8:	4680      	mov	r8, r0
   142ea:	b138      	cbz	r0, 142fc <ctr_drbg_update_internal+0x138>
   142ec:	4668      	mov	r0, sp
   142ee:	2120      	movs	r1, #32
   142f0:	f7ff fe06 	bl	13f00 <mbedtls_platform_zeroize>
   142f4:	4640      	mov	r0, r8
   142f6:	b008      	add	sp, #32
   142f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   142fc:	2210      	movs	r2, #16
   142fe:	eb0d 0102 	add.w	r1, sp, r2
   14302:	4620      	mov	r0, r4
   14304:	f00b fd5d 	bl	1fdc2 <memcpy>
   14308:	e7f0      	b.n	142ec <ctr_drbg_update_internal+0x128>
   1430a:	bf00      	nop

0001430c <mbedtls_ctr_drbg_reseed_internal>:
   1430c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14310:	4604      	mov	r4, r0
   14312:	6980      	ldr	r0, [r0, #24]
   14314:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
   14318:	d852      	bhi.n	143c0 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   1431a:	461d      	mov	r5, r3
   1431c:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
   14320:	42ab      	cmp	r3, r5
   14322:	d34d      	bcc.n	143c0 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   14324:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
   14328:	1a18      	subs	r0, r3, r0
   1432a:	4290      	cmp	r0, r2
   1432c:	4616      	mov	r6, r2
   1432e:	d347      	bcc.n	143c0 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   14330:	f8df 9098 	ldr.w	r9, [pc, #152]	; 143cc <mbedtls_ctr_drbg_reseed_internal+0xc0>
   14334:	f44f 72c0 	mov.w	r2, #384	; 0x180
   14338:	460f      	mov	r7, r1
   1433a:	4648      	mov	r0, r9
   1433c:	2100      	movs	r1, #0
   1433e:	f00b fd7b 	bl	1fe38 <memset>
   14342:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   14346:	69a2      	ldr	r2, [r4, #24]
   14348:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   1434c:	4649      	mov	r1, r9
   1434e:	4798      	blx	r3
   14350:	2800      	cmp	r0, #0
   14352:	d138      	bne.n	143c6 <mbedtls_ctr_drbg_reseed_internal+0xba>
   14354:	f8d4 8018 	ldr.w	r8, [r4, #24]
   14358:	b13d      	cbz	r5, 1436a <mbedtls_ctr_drbg_reseed_internal+0x5e>
   1435a:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   1435e:	462a      	mov	r2, r5
   14360:	eb09 0108 	add.w	r1, r9, r8
   14364:	4798      	blx	r3
   14366:	bb70      	cbnz	r0, 143c6 <mbedtls_ctr_drbg_reseed_internal+0xba>
   14368:	44a8      	add	r8, r5
   1436a:	b107      	cbz	r7, 1436e <mbedtls_ctr_drbg_reseed_internal+0x62>
   1436c:	b9c6      	cbnz	r6, 143a0 <mbedtls_ctr_drbg_reseed_internal+0x94>
   1436e:	4917      	ldr	r1, [pc, #92]	; (143cc <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   14370:	4642      	mov	r2, r8
   14372:	4608      	mov	r0, r1
   14374:	f7ff fdce 	bl	13f14 <block_cipher_df>
   14378:	4605      	mov	r5, r0
   1437a:	b138      	cbz	r0, 1438c <mbedtls_ctr_drbg_reseed_internal+0x80>
   1437c:	4813      	ldr	r0, [pc, #76]	; (143cc <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1437e:	f44f 71c0 	mov.w	r1, #384	; 0x180
   14382:	f7ff fdbd 	bl	13f00 <mbedtls_platform_zeroize>
   14386:	4628      	mov	r0, r5
   14388:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1438c:	490f      	ldr	r1, [pc, #60]	; (143cc <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1438e:	4620      	mov	r0, r4
   14390:	f7ff ff18 	bl	141c4 <ctr_drbg_update_internal>
   14394:	4605      	mov	r5, r0
   14396:	2800      	cmp	r0, #0
   14398:	d1f0      	bne.n	1437c <mbedtls_ctr_drbg_reseed_internal+0x70>
   1439a:	2301      	movs	r3, #1
   1439c:	6123      	str	r3, [r4, #16]
   1439e:	e7ed      	b.n	1437c <mbedtls_ctr_drbg_reseed_internal+0x70>
   143a0:	eb09 0008 	add.w	r0, r9, r8
   143a4:	4639      	mov	r1, r7
   143a6:	4632      	mov	r2, r6
   143a8:	f00b fd0b 	bl	1fdc2 <memcpy>
   143ac:	4907      	ldr	r1, [pc, #28]	; (143cc <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   143ae:	44b0      	add	r8, r6
   143b0:	4642      	mov	r2, r8
   143b2:	4608      	mov	r0, r1
   143b4:	f7ff fdae 	bl	13f14 <block_cipher_df>
   143b8:	4605      	mov	r5, r0
   143ba:	2800      	cmp	r0, #0
   143bc:	d1de      	bne.n	1437c <mbedtls_ctr_drbg_reseed_internal+0x70>
   143be:	e7e5      	b.n	1438c <mbedtls_ctr_drbg_reseed_internal+0x80>
   143c0:	f06f 0537 	mvn.w	r5, #55	; 0x37
   143c4:	e7df      	b.n	14386 <mbedtls_ctr_drbg_reseed_internal+0x7a>
   143c6:	f06f 0533 	mvn.w	r5, #51	; 0x33
   143ca:	e7dc      	b.n	14386 <mbedtls_ctr_drbg_reseed_internal+0x7a>
   143cc:	20003b50 	.word	0x20003b50

000143d0 <cc_mbedtls_ctr_drbg_init>:
   143d0:	b510      	push	{r4, lr}
   143d2:	22a4      	movs	r2, #164	; 0xa4
   143d4:	4604      	mov	r4, r0
   143d6:	2100      	movs	r1, #0
   143d8:	f00b fd2e 	bl	1fe38 <memset>
   143dc:	4b06      	ldr	r3, [pc, #24]	; (143f8 <cc_mbedtls_ctr_drbg_init+0x28>)
   143de:	f04f 31ff 	mov.w	r1, #4294967295
   143e2:	f64f 72f0 	movw	r2, #65520	; 0xfff0
   143e6:	6121      	str	r1, [r4, #16]
   143e8:	61e2      	str	r2, [r4, #28]
   143ea:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   143ee:	681b      	ldr	r3, [r3, #0]
   143f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   143f4:	4718      	bx	r3
   143f6:	bf00      	nop
   143f8:	2000036c 	.word	0x2000036c

000143fc <cc_mbedtls_ctr_drbg_seed>:
   143fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14400:	b085      	sub	sp, #20
   14402:	4605      	mov	r5, r0
   14404:	460f      	mov	r7, r1
   14406:	4616      	mov	r6, r2
   14408:	2100      	movs	r1, #0
   1440a:	2210      	movs	r2, #16
   1440c:	4668      	mov	r0, sp
   1440e:	4699      	mov	r9, r3
   14410:	f00b fd12 	bl	1fe38 <memset>
   14414:	4b1e      	ldr	r3, [pc, #120]	; (14490 <cc_mbedtls_ctr_drbg_seed+0x94>)
   14416:	f105 089c 	add.w	r8, r5, #156	; 0x9c
   1441a:	681b      	ldr	r3, [r3, #0]
   1441c:	4640      	mov	r0, r8
   1441e:	4798      	blx	r3
   14420:	b120      	cbz	r0, 1442c <cc_mbedtls_ctr_drbg_seed+0x30>
   14422:	4604      	mov	r4, r0
   14424:	4620      	mov	r0, r4
   14426:	b005      	add	sp, #20
   14428:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1442c:	f105 0420 	add.w	r4, r5, #32
   14430:	4620      	mov	r0, r4
   14432:	f000 ff51 	bl	152d8 <cc_mbedtls_aes_init>
   14436:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
   1443a:	69ae      	ldr	r6, [r5, #24]
   1443c:	692b      	ldr	r3, [r5, #16]
   1443e:	b9ee      	cbnz	r6, 1447c <cc_mbedtls_ctr_drbg_seed+0x80>
   14440:	2220      	movs	r2, #32
   14442:	2b00      	cmp	r3, #0
   14444:	61aa      	str	r2, [r5, #24]
   14446:	db20      	blt.n	1448a <cc_mbedtls_ctr_drbg_seed+0x8e>
   14448:	461e      	mov	r6, r3
   1444a:	4620      	mov	r0, r4
   1444c:	4669      	mov	r1, sp
   1444e:	2280      	movs	r2, #128	; 0x80
   14450:	f000 ff58 	bl	15304 <cc_mbedtls_aes_setkey_enc>
   14454:	4604      	mov	r4, r0
   14456:	b930      	cbnz	r0, 14466 <cc_mbedtls_ctr_drbg_seed+0x6a>
   14458:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1445a:	4633      	mov	r3, r6
   1445c:	4649      	mov	r1, r9
   1445e:	4628      	mov	r0, r5
   14460:	f7ff ff54 	bl	1430c <mbedtls_ctr_drbg_reseed_internal>
   14464:	4604      	mov	r4, r0
   14466:	4b0b      	ldr	r3, [pc, #44]	; (14494 <cc_mbedtls_ctr_drbg_seed+0x98>)
   14468:	4640      	mov	r0, r8
   1446a:	681b      	ldr	r3, [r3, #0]
   1446c:	4798      	blx	r3
   1446e:	2800      	cmp	r0, #0
   14470:	bf18      	it	ne
   14472:	4604      	movne	r4, r0
   14474:	4620      	mov	r0, r4
   14476:	b005      	add	sp, #20
   14478:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1447c:	2b00      	cmp	r3, #0
   1447e:	dae3      	bge.n	14448 <cc_mbedtls_ctr_drbg_seed+0x4c>
   14480:	2e17      	cmp	r6, #23
   14482:	d802      	bhi.n	1448a <cc_mbedtls_ctr_drbg_seed+0x8e>
   14484:	3601      	adds	r6, #1
   14486:	0876      	lsrs	r6, r6, #1
   14488:	e7df      	b.n	1444a <cc_mbedtls_ctr_drbg_seed+0x4e>
   1448a:	2600      	movs	r6, #0
   1448c:	e7dd      	b.n	1444a <cc_mbedtls_ctr_drbg_seed+0x4e>
   1448e:	bf00      	nop
   14490:	20000370 	.word	0x20000370
   14494:	20000374 	.word	0x20000374

00014498 <cc_mbedtls_ctr_drbg_random_with_add>:
   14498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1449c:	b08d      	sub	sp, #52	; 0x34
   1449e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   144a2:	9f16      	ldr	r7, [sp, #88]	; 0x58
   144a4:	f200 80e3 	bhi.w	1466e <cc_mbedtls_ctr_drbg_random_with_add+0x1d6>
   144a8:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   144ac:	f200 80dc 	bhi.w	14668 <cc_mbedtls_ctr_drbg_random_with_add+0x1d0>
   144b0:	4604      	mov	r4, r0
   144b2:	4615      	mov	r5, r2
   144b4:	460e      	mov	r6, r1
   144b6:	2220      	movs	r2, #32
   144b8:	2100      	movs	r1, #0
   144ba:	a804      	add	r0, sp, #16
   144bc:	4698      	mov	r8, r3
   144be:	f00b fcbb 	bl	1fe38 <memset>
   144c2:	4b6c      	ldr	r3, [pc, #432]	; (14674 <cc_mbedtls_ctr_drbg_random_with_add+0x1dc>)
   144c4:	f104 099c 	add.w	r9, r4, #156	; 0x9c
   144c8:	681b      	ldr	r3, [r3, #0]
   144ca:	4648      	mov	r0, r9
   144cc:	4798      	blx	r3
   144ce:	4683      	mov	fp, r0
   144d0:	2800      	cmp	r0, #0
   144d2:	f040 8092 	bne.w	145fa <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   144d6:	6922      	ldr	r2, [r4, #16]
   144d8:	69e3      	ldr	r3, [r4, #28]
   144da:	429a      	cmp	r2, r3
   144dc:	f300 8091 	bgt.w	14602 <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   144e0:	6963      	ldr	r3, [r4, #20]
   144e2:	2b00      	cmp	r3, #0
   144e4:	f040 808d 	bne.w	14602 <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   144e8:	2f00      	cmp	r7, #0
   144ea:	f040 80a9 	bne.w	14640 <cc_mbedtls_ctr_drbg_random_with_add+0x1a8>
   144ee:	f8df a188 	ldr.w	sl, [pc, #392]	; 14678 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   144f2:	466f      	mov	r7, sp
   144f4:	2d00      	cmp	r5, #0
   144f6:	f000 8098 	beq.w	1462a <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   144fa:	f104 0820 	add.w	r8, r4, #32
   144fe:	466f      	mov	r7, sp
   14500:	e00e      	b.n	14520 <cc_mbedtls_ctr_drbg_random_with_add+0x88>
   14502:	2d10      	cmp	r5, #16
   14504:	46ab      	mov	fp, r5
   14506:	bf28      	it	cs
   14508:	f04f 0b10 	movcs.w	fp, #16
   1450c:	4630      	mov	r0, r6
   1450e:	465a      	mov	r2, fp
   14510:	4639      	mov	r1, r7
   14512:	f00b fc56 	bl	1fdc2 <memcpy>
   14516:	ebb5 050b 	subs.w	r5, r5, fp
   1451a:	445e      	add	r6, fp
   1451c:	f000 8085 	beq.w	1462a <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   14520:	7be3      	ldrb	r3, [r4, #15]
   14522:	3301      	adds	r3, #1
   14524:	b2db      	uxtb	r3, r3
   14526:	73e3      	strb	r3, [r4, #15]
   14528:	2b00      	cmp	r3, #0
   1452a:	d14d      	bne.n	145c8 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1452c:	7ba3      	ldrb	r3, [r4, #14]
   1452e:	3301      	adds	r3, #1
   14530:	b2db      	uxtb	r3, r3
   14532:	73a3      	strb	r3, [r4, #14]
   14534:	2b00      	cmp	r3, #0
   14536:	d147      	bne.n	145c8 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   14538:	7b63      	ldrb	r3, [r4, #13]
   1453a:	3301      	adds	r3, #1
   1453c:	b2db      	uxtb	r3, r3
   1453e:	7363      	strb	r3, [r4, #13]
   14540:	2b00      	cmp	r3, #0
   14542:	d141      	bne.n	145c8 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   14544:	7b23      	ldrb	r3, [r4, #12]
   14546:	3301      	adds	r3, #1
   14548:	b2db      	uxtb	r3, r3
   1454a:	7323      	strb	r3, [r4, #12]
   1454c:	2b00      	cmp	r3, #0
   1454e:	d13b      	bne.n	145c8 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   14550:	7ae3      	ldrb	r3, [r4, #11]
   14552:	3301      	adds	r3, #1
   14554:	b2db      	uxtb	r3, r3
   14556:	72e3      	strb	r3, [r4, #11]
   14558:	2b00      	cmp	r3, #0
   1455a:	d135      	bne.n	145c8 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1455c:	7aa3      	ldrb	r3, [r4, #10]
   1455e:	3301      	adds	r3, #1
   14560:	b2db      	uxtb	r3, r3
   14562:	72a3      	strb	r3, [r4, #10]
   14564:	2b00      	cmp	r3, #0
   14566:	d12f      	bne.n	145c8 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   14568:	7a63      	ldrb	r3, [r4, #9]
   1456a:	3301      	adds	r3, #1
   1456c:	b2db      	uxtb	r3, r3
   1456e:	7263      	strb	r3, [r4, #9]
   14570:	bb53      	cbnz	r3, 145c8 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   14572:	7a23      	ldrb	r3, [r4, #8]
   14574:	3301      	adds	r3, #1
   14576:	b2db      	uxtb	r3, r3
   14578:	7223      	strb	r3, [r4, #8]
   1457a:	bb2b      	cbnz	r3, 145c8 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1457c:	79e3      	ldrb	r3, [r4, #7]
   1457e:	3301      	adds	r3, #1
   14580:	b2db      	uxtb	r3, r3
   14582:	71e3      	strb	r3, [r4, #7]
   14584:	bb03      	cbnz	r3, 145c8 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   14586:	79a3      	ldrb	r3, [r4, #6]
   14588:	3301      	adds	r3, #1
   1458a:	b2db      	uxtb	r3, r3
   1458c:	71a3      	strb	r3, [r4, #6]
   1458e:	b9db      	cbnz	r3, 145c8 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   14590:	7963      	ldrb	r3, [r4, #5]
   14592:	3301      	adds	r3, #1
   14594:	b2db      	uxtb	r3, r3
   14596:	7163      	strb	r3, [r4, #5]
   14598:	b9b3      	cbnz	r3, 145c8 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1459a:	7923      	ldrb	r3, [r4, #4]
   1459c:	3301      	adds	r3, #1
   1459e:	b2db      	uxtb	r3, r3
   145a0:	7123      	strb	r3, [r4, #4]
   145a2:	b98b      	cbnz	r3, 145c8 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   145a4:	78e3      	ldrb	r3, [r4, #3]
   145a6:	3301      	adds	r3, #1
   145a8:	b2db      	uxtb	r3, r3
   145aa:	70e3      	strb	r3, [r4, #3]
   145ac:	b963      	cbnz	r3, 145c8 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   145ae:	78a3      	ldrb	r3, [r4, #2]
   145b0:	3301      	adds	r3, #1
   145b2:	b2db      	uxtb	r3, r3
   145b4:	70a3      	strb	r3, [r4, #2]
   145b6:	b93b      	cbnz	r3, 145c8 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   145b8:	7863      	ldrb	r3, [r4, #1]
   145ba:	3301      	adds	r3, #1
   145bc:	b2db      	uxtb	r3, r3
   145be:	7063      	strb	r3, [r4, #1]
   145c0:	b913      	cbnz	r3, 145c8 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   145c2:	7823      	ldrb	r3, [r4, #0]
   145c4:	3301      	adds	r3, #1
   145c6:	7023      	strb	r3, [r4, #0]
   145c8:	463b      	mov	r3, r7
   145ca:	4622      	mov	r2, r4
   145cc:	2101      	movs	r1, #1
   145ce:	4640      	mov	r0, r8
   145d0:	f000 feb2 	bl	15338 <cc_mbedtls_aes_crypt_ecb>
   145d4:	4683      	mov	fp, r0
   145d6:	2800      	cmp	r0, #0
   145d8:	d093      	beq.n	14502 <cc_mbedtls_ctr_drbg_random_with_add+0x6a>
   145da:	f8da 3000 	ldr.w	r3, [sl]
   145de:	4648      	mov	r0, r9
   145e0:	4798      	blx	r3
   145e2:	2120      	movs	r1, #32
   145e4:	4603      	mov	r3, r0
   145e6:	a804      	add	r0, sp, #16
   145e8:	2b00      	cmp	r3, #0
   145ea:	bf18      	it	ne
   145ec:	469b      	movne	fp, r3
   145ee:	f7ff fc87 	bl	13f00 <mbedtls_platform_zeroize>
   145f2:	2110      	movs	r1, #16
   145f4:	4638      	mov	r0, r7
   145f6:	f7ff fc83 	bl	13f00 <mbedtls_platform_zeroize>
   145fa:	4658      	mov	r0, fp
   145fc:	b00d      	add	sp, #52	; 0x34
   145fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14602:	463a      	mov	r2, r7
   14604:	4641      	mov	r1, r8
   14606:	2300      	movs	r3, #0
   14608:	4620      	mov	r0, r4
   1460a:	f7ff fe7f 	bl	1430c <mbedtls_ctr_drbg_reseed_internal>
   1460e:	f8df a068 	ldr.w	sl, [pc, #104]	; 14678 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   14612:	2800      	cmp	r0, #0
   14614:	f43f af6d 	beq.w	144f2 <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   14618:	f8da 3000 	ldr.w	r3, [sl]
   1461c:	4648      	mov	r0, r9
   1461e:	4798      	blx	r3
   14620:	4683      	mov	fp, r0
   14622:	2800      	cmp	r0, #0
   14624:	f43f af65 	beq.w	144f2 <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   14628:	e7e7      	b.n	145fa <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   1462a:	a904      	add	r1, sp, #16
   1462c:	4620      	mov	r0, r4
   1462e:	f7ff fdc9 	bl	141c4 <ctr_drbg_update_internal>
   14632:	4683      	mov	fp, r0
   14634:	2800      	cmp	r0, #0
   14636:	d1d0      	bne.n	145da <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   14638:	6923      	ldr	r3, [r4, #16]
   1463a:	3301      	adds	r3, #1
   1463c:	6123      	str	r3, [r4, #16]
   1463e:	e7cc      	b.n	145da <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   14640:	463a      	mov	r2, r7
   14642:	4641      	mov	r1, r8
   14644:	a804      	add	r0, sp, #16
   14646:	f7ff fc65 	bl	13f14 <block_cipher_df>
   1464a:	4683      	mov	fp, r0
   1464c:	b118      	cbz	r0, 14656 <cc_mbedtls_ctr_drbg_random_with_add+0x1be>
   1464e:	f8df a028 	ldr.w	sl, [pc, #40]	; 14678 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   14652:	466f      	mov	r7, sp
   14654:	e7c1      	b.n	145da <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   14656:	a904      	add	r1, sp, #16
   14658:	4620      	mov	r0, r4
   1465a:	f7ff fdb3 	bl	141c4 <ctr_drbg_update_internal>
   1465e:	4683      	mov	fp, r0
   14660:	2800      	cmp	r0, #0
   14662:	f43f af44 	beq.w	144ee <cc_mbedtls_ctr_drbg_random_with_add+0x56>
   14666:	e7f2      	b.n	1464e <cc_mbedtls_ctr_drbg_random_with_add+0x1b6>
   14668:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   1466c:	e7c5      	b.n	145fa <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   1466e:	f06f 0b35 	mvn.w	fp, #53	; 0x35
   14672:	e7c2      	b.n	145fa <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   14674:	20000370 	.word	0x20000370
   14678:	20000374 	.word	0x20000374

0001467c <entropy_update>:
   1467c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14680:	2b20      	cmp	r3, #32
   14682:	b08b      	sub	sp, #44	; 0x2c
   14684:	461d      	mov	r5, r3
   14686:	4606      	mov	r6, r0
   14688:	4688      	mov	r8, r1
   1468a:	4691      	mov	r9, r2
   1468c:	d826      	bhi.n	146dc <entropy_update+0x60>
   1468e:	b2db      	uxtb	r3, r3
   14690:	af02      	add	r7, sp, #8
   14692:	f88d 8004 	strb.w	r8, [sp, #4]
   14696:	46b0      	mov	r8, r6
   14698:	f88d 3005 	strb.w	r3, [sp, #5]
   1469c:	f858 1b04 	ldr.w	r1, [r8], #4
   146a0:	b921      	cbnz	r1, 146ac <entropy_update+0x30>
   146a2:	4640      	mov	r0, r8
   146a4:	f000 fe8c 	bl	153c0 <cc_mbedtls_sha256_starts>
   146a8:	4604      	mov	r4, r0
   146aa:	b940      	cbnz	r0, 146be <entropy_update+0x42>
   146ac:	2301      	movs	r3, #1
   146ae:	6033      	str	r3, [r6, #0]
   146b0:	2202      	movs	r2, #2
   146b2:	a901      	add	r1, sp, #4
   146b4:	4640      	mov	r0, r8
   146b6:	f000 fe97 	bl	153e8 <cc_mbedtls_sha256_update>
   146ba:	4604      	mov	r4, r0
   146bc:	b138      	cbz	r0, 146ce <entropy_update+0x52>
   146be:	4638      	mov	r0, r7
   146c0:	2120      	movs	r1, #32
   146c2:	f7ff fc1d 	bl	13f00 <mbedtls_platform_zeroize>
   146c6:	4620      	mov	r0, r4
   146c8:	b00b      	add	sp, #44	; 0x2c
   146ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   146ce:	462a      	mov	r2, r5
   146d0:	4649      	mov	r1, r9
   146d2:	4640      	mov	r0, r8
   146d4:	f000 fe88 	bl	153e8 <cc_mbedtls_sha256_update>
   146d8:	4604      	mov	r4, r0
   146da:	e7f0      	b.n	146be <entropy_update+0x42>
   146dc:	af02      	add	r7, sp, #8
   146de:	4619      	mov	r1, r3
   146e0:	4610      	mov	r0, r2
   146e2:	2300      	movs	r3, #0
   146e4:	463a      	mov	r2, r7
   146e6:	f001 f807 	bl	156f8 <cc_mbedtls_sha256>
   146ea:	4604      	mov	r4, r0
   146ec:	2800      	cmp	r0, #0
   146ee:	d1e6      	bne.n	146be <entropy_update+0x42>
   146f0:	2320      	movs	r3, #32
   146f2:	46b9      	mov	r9, r7
   146f4:	461d      	mov	r5, r3
   146f6:	e7cc      	b.n	14692 <entropy_update+0x16>

000146f8 <entropy_gather_internal.part.0>:
   146f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   146fa:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
   146fe:	b0a7      	sub	sp, #156	; 0x9c
   14700:	2b00      	cmp	r3, #0
   14702:	bfd8      	it	le
   14704:	ae02      	addle	r6, sp, #8
   14706:	dd2c      	ble.n	14762 <entropy_gather_internal.part.0+0x6a>
   14708:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
   1470c:	4605      	mov	r5, r0
   1470e:	2300      	movs	r3, #0
   14710:	ae02      	add	r6, sp, #8
   14712:	9301      	str	r3, [sp, #4]
   14714:	f1a4 0701 	sub.w	r7, r4, #1
   14718:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
   1471c:	f8d5 40fc 	ldr.w	r4, [r5, #252]	; 0xfc
   14720:	ab01      	add	r3, sp, #4
   14722:	2290      	movs	r2, #144	; 0x90
   14724:	4631      	mov	r1, r6
   14726:	47a0      	blx	r4
   14728:	fab7 f787 	clz	r7, r7
   1472c:	097f      	lsrs	r7, r7, #5
   1472e:	4604      	mov	r4, r0
   14730:	b910      	cbnz	r0, 14738 <entropy_gather_internal.part.0+0x40>
   14732:	9b01      	ldr	r3, [sp, #4]
   14734:	b93b      	cbnz	r3, 14746 <entropy_gather_internal.part.0+0x4e>
   14736:	b1a7      	cbz	r7, 14762 <entropy_gather_internal.part.0+0x6a>
   14738:	4630      	mov	r0, r6
   1473a:	2190      	movs	r1, #144	; 0x90
   1473c:	f7ff fbe0 	bl	13f00 <mbedtls_platform_zeroize>
   14740:	4620      	mov	r0, r4
   14742:	b027      	add	sp, #156	; 0x9c
   14744:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14746:	4601      	mov	r1, r0
   14748:	4632      	mov	r2, r6
   1474a:	4628      	mov	r0, r5
   1474c:	f7ff ff96 	bl	1467c <entropy_update>
   14750:	b950      	cbnz	r0, 14768 <entropy_gather_internal.part.0+0x70>
   14752:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
   14756:	9a01      	ldr	r2, [sp, #4]
   14758:	4413      	add	r3, r2
   1475a:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
   1475e:	2f00      	cmp	r7, #0
   14760:	d1ea      	bne.n	14738 <entropy_gather_internal.part.0+0x40>
   14762:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   14766:	e7e7      	b.n	14738 <entropy_gather_internal.part.0+0x40>
   14768:	4604      	mov	r4, r0
   1476a:	4620      	mov	r0, r4
   1476c:	b027      	add	sp, #156	; 0x9c
   1476e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00014770 <cc_mbedtls_entropy_init>:
   14770:	b570      	push	{r4, r5, r6, lr}
   14772:	2500      	movs	r5, #0
   14774:	4604      	mov	r4, r0
   14776:	f504 7688 	add.w	r6, r4, #272	; 0x110
   1477a:	2214      	movs	r2, #20
   1477c:	4629      	mov	r1, r5
   1477e:	f8c0 50f8 	str.w	r5, [r0, #248]	; 0xf8
   14782:	30fc      	adds	r0, #252	; 0xfc
   14784:	f00b fb58 	bl	1fe38 <memset>
   14788:	2208      	movs	r2, #8
   1478a:	4629      	mov	r1, r5
   1478c:	4630      	mov	r0, r6
   1478e:	f00b fb53 	bl	1fe38 <memset>
   14792:	4b15      	ldr	r3, [pc, #84]	; (147e8 <cc_mbedtls_entropy_init+0x78>)
   14794:	4630      	mov	r0, r6
   14796:	681b      	ldr	r3, [r3, #0]
   14798:	4798      	blx	r3
   1479a:	4620      	mov	r0, r4
   1479c:	f840 5b04 	str.w	r5, [r0], #4
   147a0:	f000 fdf4 	bl	1538c <cc_mbedtls_sha256_init>
   147a4:	4b11      	ldr	r3, [pc, #68]	; (147ec <cc_mbedtls_entropy_init+0x7c>)
   147a6:	4630      	mov	r0, r6
   147a8:	681b      	ldr	r3, [r3, #0]
   147aa:	4798      	blx	r3
   147ac:	b9d8      	cbnz	r0, 147e6 <cc_mbedtls_entropy_init+0x76>
   147ae:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   147b2:	42ab      	cmp	r3, r5
   147b4:	dc11      	bgt.n	147da <cc_mbedtls_entropy_init+0x6a>
   147b6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   147ba:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   147be:	2120      	movs	r1, #32
   147c0:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
   147c4:	2101      	movs	r1, #1
   147c6:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
   147ca:	3301      	adds	r3, #1
   147cc:	4908      	ldr	r1, [pc, #32]	; (147f0 <cc_mbedtls_entropy_init+0x80>)
   147ce:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
   147d2:	f8c2 10fc 	str.w	r1, [r2, #252]	; 0xfc
   147d6:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
   147da:	4b06      	ldr	r3, [pc, #24]	; (147f4 <cc_mbedtls_entropy_init+0x84>)
   147dc:	4630      	mov	r0, r6
   147de:	681b      	ldr	r3, [r3, #0]
   147e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   147e4:	4718      	bx	r3
   147e6:	bd70      	pop	{r4, r5, r6, pc}
   147e8:	2000036c 	.word	0x2000036c
   147ec:	20000370 	.word	0x20000370
   147f0:	000151dd 	.word	0x000151dd
   147f4:	20000374 	.word	0x20000374

000147f8 <cc_mbedtls_entropy_func>:
   147f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   147fc:	2a20      	cmp	r2, #32
   147fe:	b088      	sub	sp, #32
   14800:	d876      	bhi.n	148f0 <cc_mbedtls_entropy_func+0xf8>
   14802:	4b3d      	ldr	r3, [pc, #244]	; (148f8 <cc_mbedtls_entropy_func+0x100>)
   14804:	f500 7988 	add.w	r9, r0, #272	; 0x110
   14808:	681b      	ldr	r3, [r3, #0]
   1480a:	4604      	mov	r4, r0
   1480c:	4648      	mov	r0, r9
   1480e:	4617      	mov	r7, r2
   14810:	4688      	mov	r8, r1
   14812:	4798      	blx	r3
   14814:	4605      	mov	r5, r0
   14816:	bba0      	cbnz	r0, 14882 <cc_mbedtls_entropy_func+0x8a>
   14818:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   1481c:	f240 1601 	movw	r6, #257	; 0x101
   14820:	e001      	b.n	14826 <cc_mbedtls_entropy_func+0x2e>
   14822:	3e01      	subs	r6, #1
   14824:	d060      	beq.n	148e8 <cc_mbedtls_entropy_func+0xf0>
   14826:	4620      	mov	r0, r4
   14828:	b37b      	cbz	r3, 1488a <cc_mbedtls_entropy_func+0x92>
   1482a:	f7ff ff65 	bl	146f8 <entropy_gather_internal.part.0>
   1482e:	4605      	mov	r5, r0
   14830:	bb68      	cbnz	r0, 1488e <cc_mbedtls_entropy_func+0x96>
   14832:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   14836:	2b00      	cmp	r3, #0
   14838:	ddf3      	ble.n	14822 <cc_mbedtls_entropy_func+0x2a>
   1483a:	e9d4 0241 	ldrd	r0, r2, [r4, #260]	; 0x104
   1483e:	4290      	cmp	r0, r2
   14840:	d3ef      	bcc.n	14822 <cc_mbedtls_entropy_func+0x2a>
   14842:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   14846:	2a01      	cmp	r2, #1
   14848:	d1eb      	bne.n	14822 <cc_mbedtls_entropy_func+0x2a>
   1484a:	281f      	cmp	r0, #31
   1484c:	d9e9      	bls.n	14822 <cc_mbedtls_entropy_func+0x2a>
   1484e:	466e      	mov	r6, sp
   14850:	4629      	mov	r1, r5
   14852:	2220      	movs	r2, #32
   14854:	4630      	mov	r0, r6
   14856:	f104 0a04 	add.w	sl, r4, #4
   1485a:	f00b faed 	bl	1fe38 <memset>
   1485e:	4631      	mov	r1, r6
   14860:	4650      	mov	r0, sl
   14862:	f000 fdeb 	bl	1543c <cc_mbedtls_sha256_finish>
   14866:	4605      	mov	r5, r0
   14868:	b198      	cbz	r0, 14892 <cc_mbedtls_entropy_func+0x9a>
   1486a:	2120      	movs	r1, #32
   1486c:	4630      	mov	r0, r6
   1486e:	f7ff fb47 	bl	13f00 <mbedtls_platform_zeroize>
   14872:	4b22      	ldr	r3, [pc, #136]	; (148fc <cc_mbedtls_entropy_func+0x104>)
   14874:	4648      	mov	r0, r9
   14876:	681b      	ldr	r3, [r3, #0]
   14878:	4798      	blx	r3
   1487a:	2800      	cmp	r0, #0
   1487c:	bf18      	it	ne
   1487e:	f06f 051d 	mvnne.w	r5, #29
   14882:	4628      	mov	r0, r5
   14884:	b008      	add	sp, #32
   14886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1488a:	f06f 053f 	mvn.w	r5, #63	; 0x3f
   1488e:	466e      	mov	r6, sp
   14890:	e7eb      	b.n	1486a <cc_mbedtls_entropy_func+0x72>
   14892:	4650      	mov	r0, sl
   14894:	f000 fd8e 	bl	153b4 <cc_mbedtls_sha256_free>
   14898:	4650      	mov	r0, sl
   1489a:	f000 fd77 	bl	1538c <cc_mbedtls_sha256_init>
   1489e:	4629      	mov	r1, r5
   148a0:	4650      	mov	r0, sl
   148a2:	f000 fd8d 	bl	153c0 <cc_mbedtls_sha256_starts>
   148a6:	4605      	mov	r5, r0
   148a8:	2800      	cmp	r0, #0
   148aa:	d1de      	bne.n	1486a <cc_mbedtls_entropy_func+0x72>
   148ac:	4650      	mov	r0, sl
   148ae:	2220      	movs	r2, #32
   148b0:	4631      	mov	r1, r6
   148b2:	f000 fd99 	bl	153e8 <cc_mbedtls_sha256_update>
   148b6:	4605      	mov	r5, r0
   148b8:	2800      	cmp	r0, #0
   148ba:	d1d6      	bne.n	1486a <cc_mbedtls_entropy_func+0x72>
   148bc:	4603      	mov	r3, r0
   148be:	4632      	mov	r2, r6
   148c0:	2120      	movs	r1, #32
   148c2:	4630      	mov	r0, r6
   148c4:	f000 ff18 	bl	156f8 <cc_mbedtls_sha256>
   148c8:	4605      	mov	r5, r0
   148ca:	2800      	cmp	r0, #0
   148cc:	d1cd      	bne.n	1486a <cc_mbedtls_entropy_func+0x72>
   148ce:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   148d2:	2b00      	cmp	r3, #0
   148d4:	bfc4      	itt	gt
   148d6:	2300      	movgt	r3, #0
   148d8:	f8c4 3104 	strgt.w	r3, [r4, #260]	; 0x104
   148dc:	463a      	mov	r2, r7
   148de:	4640      	mov	r0, r8
   148e0:	4631      	mov	r1, r6
   148e2:	f00b fa6e 	bl	1fdc2 <memcpy>
   148e6:	e7c0      	b.n	1486a <cc_mbedtls_entropy_func+0x72>
   148e8:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   148ec:	466e      	mov	r6, sp
   148ee:	e7bc      	b.n	1486a <cc_mbedtls_entropy_func+0x72>
   148f0:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   148f4:	e7c5      	b.n	14882 <cc_mbedtls_entropy_func+0x8a>
   148f6:	bf00      	nop
   148f8:	20000370 	.word	0x20000370
   148fc:	20000374 	.word	0x20000374

00014900 <RndStartupTest.constprop.0>:
   14900:	b530      	push	{r4, r5, lr}
   14902:	b08d      	sub	sp, #52	; 0x34
   14904:	2100      	movs	r1, #0
   14906:	2228      	movs	r2, #40	; 0x28
   14908:	a802      	add	r0, sp, #8
   1490a:	9101      	str	r1, [sp, #4]
   1490c:	f00b fa94 	bl	1fe38 <memset>
   14910:	a802      	add	r0, sp, #8
   14912:	f000 ff19 	bl	15748 <RNG_PLAT_SetUserRngParameters>
   14916:	4604      	mov	r4, r0
   14918:	b110      	cbz	r0, 14920 <RndStartupTest.constprop.0+0x20>
   1491a:	4620      	mov	r0, r4
   1491c:	b00d      	add	sp, #52	; 0x34
   1491e:	bd30      	pop	{r4, r5, pc}
   14920:	4d18      	ldr	r5, [pc, #96]	; (14984 <RndStartupTest.constprop.0+0x84>)
   14922:	f04f 31ff 	mov.w	r1, #4294967295
   14926:	6828      	ldr	r0, [r5, #0]
   14928:	f000 f946 	bl	14bb8 <CC_PalMutexLock>
   1492c:	4604      	mov	r4, r0
   1492e:	b9c0      	cbnz	r0, 14962 <RndStartupTest.constprop.0+0x62>
   14930:	2000      	movs	r0, #0
   14932:	f000 f971 	bl	14c18 <CC_PalPowerSaveModeSelect>
   14936:	bb00      	cbnz	r0, 1497a <RndStartupTest.constprop.0+0x7a>
   14938:	4a13      	ldr	r2, [pc, #76]	; (14988 <RndStartupTest.constprop.0+0x88>)
   1493a:	a902      	add	r1, sp, #8
   1493c:	a801      	add	r0, sp, #4
   1493e:	f000 fc3f 	bl	151c0 <LLF_RND_RunTrngStartupTest>
   14942:	4604      	mov	r4, r0
   14944:	2001      	movs	r0, #1
   14946:	f000 f967 	bl	14c18 <CC_PalPowerSaveModeSelect>
   1494a:	b990      	cbnz	r0, 14972 <RndStartupTest.constprop.0+0x72>
   1494c:	6828      	ldr	r0, [r5, #0]
   1494e:	f000 f93b 	bl	14bc8 <CC_PalMutexUnlock>
   14952:	2800      	cmp	r0, #0
   14954:	d0e1      	beq.n	1491a <RndStartupTest.constprop.0+0x1a>
   14956:	480d      	ldr	r0, [pc, #52]	; (1498c <RndStartupTest.constprop.0+0x8c>)
   14958:	f7ff f9b2 	bl	13cc0 <CC_PalAbort>
   1495c:	4620      	mov	r0, r4
   1495e:	b00d      	add	sp, #52	; 0x34
   14960:	bd30      	pop	{r4, r5, pc}
   14962:	480b      	ldr	r0, [pc, #44]	; (14990 <RndStartupTest.constprop.0+0x90>)
   14964:	f7ff f9ac 	bl	13cc0 <CC_PalAbort>
   14968:	2c01      	cmp	r4, #1
   1496a:	bf08      	it	eq
   1496c:	2405      	moveq	r4, #5
   1496e:	d0ed      	beq.n	1494c <RndStartupTest.constprop.0+0x4c>
   14970:	e7de      	b.n	14930 <RndStartupTest.constprop.0+0x30>
   14972:	4808      	ldr	r0, [pc, #32]	; (14994 <RndStartupTest.constprop.0+0x94>)
   14974:	f7ff f9a4 	bl	13cc0 <CC_PalAbort>
   14978:	e7e8      	b.n	1494c <RndStartupTest.constprop.0+0x4c>
   1497a:	4807      	ldr	r0, [pc, #28]	; (14998 <RndStartupTest.constprop.0+0x98>)
   1497c:	f7ff f9a0 	bl	13cc0 <CC_PalAbort>
   14980:	e7da      	b.n	14938 <RndStartupTest.constprop.0+0x38>
   14982:	bf00      	nop
   14984:	20000368 	.word	0x20000368
   14988:	20003d3c 	.word	0x20003d3c
   1498c:	00022690 	.word	0x00022690
   14990:	00022638 	.word	0x00022638
   14994:	00022670 	.word	0x00022670
   14998:	00022650 	.word	0x00022650

0001499c <CC_LibInit>:
   1499c:	b530      	push	{r4, r5, lr}
   1499e:	b083      	sub	sp, #12
   149a0:	f000 f85c 	bl	14a5c <CC_HalInit>
   149a4:	b128      	cbz	r0, 149b2 <CC_LibInit+0x16>
   149a6:	f000 f8ab 	bl	14b00 <CC_PalTerminate>
   149aa:	2403      	movs	r4, #3
   149ac:	4620      	mov	r0, r4
   149ae:	b003      	add	sp, #12
   149b0:	bd30      	pop	{r4, r5, pc}
   149b2:	f000 f877 	bl	14aa4 <CC_PalInit>
   149b6:	b9d8      	cbnz	r0, 149f0 <CC_LibInit+0x54>
   149b8:	f000 f92e 	bl	14c18 <CC_PalPowerSaveModeSelect>
   149bc:	b9e0      	cbnz	r0, 149f8 <CC_LibInit+0x5c>
   149be:	4c22      	ldr	r4, [pc, #136]	; (14a48 <CC_LibInit+0xac>)
   149c0:	f8d4 3928 	ldr.w	r3, [r4, #2344]	; 0x928
   149c4:	0e1b      	lsrs	r3, r3, #24
   149c6:	2bf0      	cmp	r3, #240	; 0xf0
   149c8:	d10a      	bne.n	149e0 <CC_LibInit+0x44>
   149ca:	f8d4 2a24 	ldr.w	r2, [r4, #2596]	; 0xa24
   149ce:	4b1f      	ldr	r3, [pc, #124]	; (14a4c <CC_LibInit+0xb0>)
   149d0:	429a      	cmp	r2, r3
   149d2:	d031      	beq.n	14a38 <CC_LibInit+0x9c>
   149d4:	f000 f844 	bl	14a60 <CC_HalTerminate>
   149d8:	2407      	movs	r4, #7
   149da:	f000 f891 	bl	14b00 <CC_PalTerminate>
   149de:	e7e5      	b.n	149ac <CC_LibInit+0x10>
   149e0:	f000 f83e 	bl	14a60 <CC_HalTerminate>
   149e4:	f000 f88c 	bl	14b00 <CC_PalTerminate>
   149e8:	2406      	movs	r4, #6
   149ea:	4620      	mov	r0, r4
   149ec:	b003      	add	sp, #12
   149ee:	bd30      	pop	{r4, r5, pc}
   149f0:	2404      	movs	r4, #4
   149f2:	4620      	mov	r0, r4
   149f4:	b003      	add	sp, #12
   149f6:	bd30      	pop	{r4, r5, pc}
   149f8:	f000 f832 	bl	14a60 <CC_HalTerminate>
   149fc:	f000 f880 	bl	14b00 <CC_PalTerminate>
   14a00:	f7ff ff7e 	bl	14900 <RndStartupTest.constprop.0>
   14a04:	4604      	mov	r4, r0
   14a06:	b998      	cbnz	r0, 14a30 <CC_LibInit+0x94>
   14a08:	4d11      	ldr	r5, [pc, #68]	; (14a50 <CC_LibInit+0xb4>)
   14a0a:	682b      	ldr	r3, [r5, #0]
   14a0c:	2b00      	cmp	r3, #0
   14a0e:	d1cd      	bne.n	149ac <CC_LibInit+0x10>
   14a10:	4602      	mov	r2, r0
   14a12:	4601      	mov	r1, r0
   14a14:	f7ff f976 	bl	13d04 <nrf_cc3xx_platform_ctr_drbg_init>
   14a18:	b950      	cbnz	r0, 14a30 <CC_LibInit+0x94>
   14a1a:	490e      	ldr	r1, [pc, #56]	; (14a54 <CC_LibInit+0xb8>)
   14a1c:	ab01      	add	r3, sp, #4
   14a1e:	2268      	movs	r2, #104	; 0x68
   14a20:	f7ff f9a2 	bl	13d68 <nrf_cc3xx_platform_ctr_drbg_get>
   14a24:	b920      	cbnz	r0, 14a30 <CC_LibInit+0x94>
   14a26:	4b0c      	ldr	r3, [pc, #48]	; (14a58 <CC_LibInit+0xbc>)
   14a28:	602b      	str	r3, [r5, #0]
   14a2a:	4620      	mov	r0, r4
   14a2c:	b003      	add	sp, #12
   14a2e:	bd30      	pop	{r4, r5, pc}
   14a30:	2405      	movs	r4, #5
   14a32:	4620      	mov	r0, r4
   14a34:	b003      	add	sp, #12
   14a36:	bd30      	pop	{r4, r5, pc}
   14a38:	2001      	movs	r0, #1
   14a3a:	f000 f8ed 	bl	14c18 <CC_PalPowerSaveModeSelect>
   14a3e:	2800      	cmp	r0, #0
   14a40:	d1da      	bne.n	149f8 <CC_LibInit+0x5c>
   14a42:	f8c4 0a0c 	str.w	r0, [r4, #2572]	; 0xa0c
   14a46:	e7db      	b.n	14a00 <CC_LibInit+0x64>
   14a48:	5002b000 	.word	0x5002b000
   14a4c:	20e00000 	.word	0x20e00000
   14a50:	20003d38 	.word	0x20003d38
   14a54:	20003cd0 	.word	0x20003cd0
   14a58:	5a5aea5a 	.word	0x5a5aea5a

00014a5c <CC_HalInit>:
   14a5c:	2000      	movs	r0, #0
   14a5e:	4770      	bx	lr

00014a60 <CC_HalTerminate>:
   14a60:	2000      	movs	r0, #0
   14a62:	4770      	bx	lr

00014a64 <CC_HalClearInterruptBit>:
   14a64:	0543      	lsls	r3, r0, #21
   14a66:	d504      	bpl.n	14a72 <CC_HalClearInterruptBit+0xe>
   14a68:	4b04      	ldr	r3, [pc, #16]	; (14a7c <CC_HalClearInterruptBit+0x18>)
   14a6a:	f04f 32ff 	mov.w	r2, #4294967295
   14a6e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   14a72:	4b02      	ldr	r3, [pc, #8]	; (14a7c <CC_HalClearInterruptBit+0x18>)
   14a74:	f8c3 0a08 	str.w	r0, [r3, #2568]	; 0xa08
   14a78:	4770      	bx	lr
   14a7a:	bf00      	nop
   14a7c:	5002b000 	.word	0x5002b000

00014a80 <CC_HalMaskInterrupt>:
   14a80:	4b01      	ldr	r3, [pc, #4]	; (14a88 <CC_HalMaskInterrupt+0x8>)
   14a82:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
   14a86:	4770      	bx	lr
   14a88:	5002b000 	.word	0x5002b000

00014a8c <CC_HalWaitInterrupt>:
   14a8c:	b108      	cbz	r0, 14a92 <CC_HalWaitInterrupt+0x6>
   14a8e:	f000 b86b 	b.w	14b68 <CC_PalWaitInterrupt>
   14a92:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   14a96:	4770      	bx	lr

00014a98 <CC_HalWaitInterruptRND>:
   14a98:	b108      	cbz	r0, 14a9e <CC_HalWaitInterruptRND+0x6>
   14a9a:	f000 b84f 	b.w	14b3c <CC_PalWaitInterruptRND>
   14a9e:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   14aa2:	4770      	bx	lr

00014aa4 <CC_PalInit>:
   14aa4:	b510      	push	{r4, lr}
   14aa6:	4811      	ldr	r0, [pc, #68]	; (14aec <CC_PalInit+0x48>)
   14aa8:	f000 f872 	bl	14b90 <CC_PalMutexCreate>
   14aac:	b100      	cbz	r0, 14ab0 <CC_PalInit+0xc>
   14aae:	bd10      	pop	{r4, pc}
   14ab0:	480f      	ldr	r0, [pc, #60]	; (14af0 <CC_PalInit+0x4c>)
   14ab2:	f000 f86d 	bl	14b90 <CC_PalMutexCreate>
   14ab6:	2800      	cmp	r0, #0
   14ab8:	d1f9      	bne.n	14aae <CC_PalInit+0xa>
   14aba:	4c0e      	ldr	r4, [pc, #56]	; (14af4 <CC_PalInit+0x50>)
   14abc:	4620      	mov	r0, r4
   14abe:	f000 f867 	bl	14b90 <CC_PalMutexCreate>
   14ac2:	2800      	cmp	r0, #0
   14ac4:	d1f3      	bne.n	14aae <CC_PalInit+0xa>
   14ac6:	4b0c      	ldr	r3, [pc, #48]	; (14af8 <CC_PalInit+0x54>)
   14ac8:	480c      	ldr	r0, [pc, #48]	; (14afc <CC_PalInit+0x58>)
   14aca:	601c      	str	r4, [r3, #0]
   14acc:	f000 f860 	bl	14b90 <CC_PalMutexCreate>
   14ad0:	4601      	mov	r1, r0
   14ad2:	2800      	cmp	r0, #0
   14ad4:	d1eb      	bne.n	14aae <CC_PalInit+0xa>
   14ad6:	f000 f82d 	bl	14b34 <CC_PalDmaInit>
   14ada:	4604      	mov	r4, r0
   14adc:	b108      	cbz	r0, 14ae2 <CC_PalInit+0x3e>
   14ade:	4620      	mov	r0, r4
   14ae0:	bd10      	pop	{r4, pc}
   14ae2:	f000 f87b 	bl	14bdc <CC_PalPowerSaveModeInit>
   14ae6:	4620      	mov	r0, r4
   14ae8:	e7fa      	b.n	14ae0 <CC_PalInit+0x3c>
   14aea:	bf00      	nop
   14aec:	20000364 	.word	0x20000364
   14af0:	20000358 	.word	0x20000358
   14af4:	20000360 	.word	0x20000360
   14af8:	20000368 	.word	0x20000368
   14afc:	2000035c 	.word	0x2000035c

00014b00 <CC_PalTerminate>:
   14b00:	b508      	push	{r3, lr}
   14b02:	4808      	ldr	r0, [pc, #32]	; (14b24 <CC_PalTerminate+0x24>)
   14b04:	f000 f84e 	bl	14ba4 <CC_PalMutexDestroy>
   14b08:	4807      	ldr	r0, [pc, #28]	; (14b28 <CC_PalTerminate+0x28>)
   14b0a:	f000 f84b 	bl	14ba4 <CC_PalMutexDestroy>
   14b0e:	4807      	ldr	r0, [pc, #28]	; (14b2c <CC_PalTerminate+0x2c>)
   14b10:	f000 f848 	bl	14ba4 <CC_PalMutexDestroy>
   14b14:	4806      	ldr	r0, [pc, #24]	; (14b30 <CC_PalTerminate+0x30>)
   14b16:	f000 f845 	bl	14ba4 <CC_PalMutexDestroy>
   14b1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   14b1e:	f000 b80b 	b.w	14b38 <CC_PalDmaTerminate>
   14b22:	bf00      	nop
   14b24:	20000364 	.word	0x20000364
   14b28:	20000358 	.word	0x20000358
   14b2c:	20000360 	.word	0x20000360
   14b30:	2000035c 	.word	0x2000035c

00014b34 <CC_PalDmaInit>:
   14b34:	2000      	movs	r0, #0
   14b36:	4770      	bx	lr

00014b38 <CC_PalDmaTerminate>:
   14b38:	4770      	bx	lr
   14b3a:	bf00      	nop

00014b3c <CC_PalWaitInterruptRND>:
   14b3c:	b410      	push	{r4}
   14b3e:	4c09      	ldr	r4, [pc, #36]	; (14b64 <CC_PalWaitInterruptRND+0x28>)
   14b40:	4602      	mov	r2, r0
   14b42:	f8d4 3a00 	ldr.w	r3, [r4, #2560]	; 0xa00
   14b46:	4213      	tst	r3, r2
   14b48:	d0fb      	beq.n	14b42 <CC_PalWaitInterruptRND+0x6>
   14b4a:	b121      	cbz	r1, 14b56 <CC_PalWaitInterruptRND+0x1a>
   14b4c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   14b50:	600b      	str	r3, [r1, #0]
   14b52:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   14b56:	4b03      	ldr	r3, [pc, #12]	; (14b64 <CC_PalWaitInterruptRND+0x28>)
   14b58:	f8c3 2a08 	str.w	r2, [r3, #2568]	; 0xa08
   14b5c:	2000      	movs	r0, #0
   14b5e:	bc10      	pop	{r4}
   14b60:	4770      	bx	lr
   14b62:	bf00      	nop
   14b64:	5002b000 	.word	0x5002b000

00014b68 <CC_PalWaitInterrupt>:
   14b68:	4a04      	ldr	r2, [pc, #16]	; (14b7c <CC_PalWaitInterrupt+0x14>)
   14b6a:	f8d2 3a00 	ldr.w	r3, [r2, #2560]	; 0xa00
   14b6e:	4218      	tst	r0, r3
   14b70:	d0fb      	beq.n	14b6a <CC_PalWaitInterrupt+0x2>
   14b72:	f8c2 0a08 	str.w	r0, [r2, #2568]	; 0xa08
   14b76:	2000      	movs	r0, #0
   14b78:	4770      	bx	lr
   14b7a:	bf00      	nop
   14b7c:	5002b000 	.word	0x5002b000

00014b80 <CC_PalMemCopyPlat>:
   14b80:	f00b b940 	b.w	1fe04 <memmove>

00014b84 <CC_PalMemSetPlat>:
   14b84:	f00b b958 	b.w	1fe38 <memset>

00014b88 <CC_PalMemSetZeroPlat>:
   14b88:	460a      	mov	r2, r1
   14b8a:	2100      	movs	r1, #0
   14b8c:	f00b b954 	b.w	1fe38 <memset>

00014b90 <CC_PalMutexCreate>:
   14b90:	b508      	push	{r3, lr}
   14b92:	4b03      	ldr	r3, [pc, #12]	; (14ba0 <CC_PalMutexCreate+0x10>)
   14b94:	6802      	ldr	r2, [r0, #0]
   14b96:	681b      	ldr	r3, [r3, #0]
   14b98:	6810      	ldr	r0, [r2, #0]
   14b9a:	4798      	blx	r3
   14b9c:	2000      	movs	r0, #0
   14b9e:	bd08      	pop	{r3, pc}
   14ba0:	20000318 	.word	0x20000318

00014ba4 <CC_PalMutexDestroy>:
   14ba4:	b508      	push	{r3, lr}
   14ba6:	4b03      	ldr	r3, [pc, #12]	; (14bb4 <CC_PalMutexDestroy+0x10>)
   14ba8:	6802      	ldr	r2, [r0, #0]
   14baa:	685b      	ldr	r3, [r3, #4]
   14bac:	6810      	ldr	r0, [r2, #0]
   14bae:	4798      	blx	r3
   14bb0:	2000      	movs	r0, #0
   14bb2:	bd08      	pop	{r3, pc}
   14bb4:	20000318 	.word	0x20000318

00014bb8 <CC_PalMutexLock>:
   14bb8:	4b02      	ldr	r3, [pc, #8]	; (14bc4 <CC_PalMutexLock+0xc>)
   14bba:	6802      	ldr	r2, [r0, #0]
   14bbc:	689b      	ldr	r3, [r3, #8]
   14bbe:	6810      	ldr	r0, [r2, #0]
   14bc0:	4718      	bx	r3
   14bc2:	bf00      	nop
   14bc4:	20000318 	.word	0x20000318

00014bc8 <CC_PalMutexUnlock>:
   14bc8:	b508      	push	{r3, lr}
   14bca:	4b03      	ldr	r3, [pc, #12]	; (14bd8 <CC_PalMutexUnlock+0x10>)
   14bcc:	6802      	ldr	r2, [r0, #0]
   14bce:	68db      	ldr	r3, [r3, #12]
   14bd0:	6810      	ldr	r0, [r2, #0]
   14bd2:	4798      	blx	r3
   14bd4:	2000      	movs	r0, #0
   14bd6:	bd08      	pop	{r3, pc}
   14bd8:	20000318 	.word	0x20000318

00014bdc <CC_PalPowerSaveModeInit>:
   14bdc:	b570      	push	{r4, r5, r6, lr}
   14bde:	4c09      	ldr	r4, [pc, #36]	; (14c04 <CC_PalPowerSaveModeInit+0x28>)
   14be0:	4d09      	ldr	r5, [pc, #36]	; (14c08 <CC_PalPowerSaveModeInit+0x2c>)
   14be2:	6920      	ldr	r0, [r4, #16]
   14be4:	68ab      	ldr	r3, [r5, #8]
   14be6:	4798      	blx	r3
   14be8:	b118      	cbz	r0, 14bf2 <CC_PalPowerSaveModeInit+0x16>
   14bea:	4b08      	ldr	r3, [pc, #32]	; (14c0c <CC_PalPowerSaveModeInit+0x30>)
   14bec:	4808      	ldr	r0, [pc, #32]	; (14c10 <CC_PalPowerSaveModeInit+0x34>)
   14bee:	685b      	ldr	r3, [r3, #4]
   14bf0:	4798      	blx	r3
   14bf2:	4a08      	ldr	r2, [pc, #32]	; (14c14 <CC_PalPowerSaveModeInit+0x38>)
   14bf4:	68eb      	ldr	r3, [r5, #12]
   14bf6:	6920      	ldr	r0, [r4, #16]
   14bf8:	2100      	movs	r1, #0
   14bfa:	6011      	str	r1, [r2, #0]
   14bfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   14c00:	4718      	bx	r3
   14c02:	bf00      	nop
   14c04:	20000328 	.word	0x20000328
   14c08:	20000318 	.word	0x20000318
   14c0c:	20000308 	.word	0x20000308
   14c10:	000226a8 	.word	0x000226a8
   14c14:	20003f5c 	.word	0x20003f5c

00014c18 <CC_PalPowerSaveModeSelect>:
   14c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14c1a:	4d1a      	ldr	r5, [pc, #104]	; (14c84 <CC_PalPowerSaveModeSelect+0x6c>)
   14c1c:	4e1a      	ldr	r6, [pc, #104]	; (14c88 <CC_PalPowerSaveModeSelect+0x70>)
   14c1e:	4604      	mov	r4, r0
   14c20:	68b2      	ldr	r2, [r6, #8]
   14c22:	6928      	ldr	r0, [r5, #16]
   14c24:	4790      	blx	r2
   14c26:	b9e8      	cbnz	r0, 14c64 <CC_PalPowerSaveModeSelect+0x4c>
   14c28:	4f18      	ldr	r7, [pc, #96]	; (14c8c <CC_PalPowerSaveModeSelect+0x74>)
   14c2a:	683b      	ldr	r3, [r7, #0]
   14c2c:	b14c      	cbz	r4, 14c42 <CC_PalPowerSaveModeSelect+0x2a>
   14c2e:	b1a3      	cbz	r3, 14c5a <CC_PalPowerSaveModeSelect+0x42>
   14c30:	2b01      	cmp	r3, #1
   14c32:	d019      	beq.n	14c68 <CC_PalPowerSaveModeSelect+0x50>
   14c34:	3b01      	subs	r3, #1
   14c36:	603b      	str	r3, [r7, #0]
   14c38:	6928      	ldr	r0, [r5, #16]
   14c3a:	68f3      	ldr	r3, [r6, #12]
   14c3c:	4798      	blx	r3
   14c3e:	2000      	movs	r0, #0
   14c40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14c42:	b943      	cbnz	r3, 14c56 <CC_PalPowerSaveModeSelect+0x3e>
   14c44:	4a12      	ldr	r2, [pc, #72]	; (14c90 <CC_PalPowerSaveModeSelect+0x78>)
   14c46:	2101      	movs	r1, #1
   14c48:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
   14c4c:	4911      	ldr	r1, [pc, #68]	; (14c94 <CC_PalPowerSaveModeSelect+0x7c>)
   14c4e:	f8d1 2910 	ldr.w	r2, [r1, #2320]	; 0x910
   14c52:	2a00      	cmp	r2, #0
   14c54:	d1fb      	bne.n	14c4e <CC_PalPowerSaveModeSelect+0x36>
   14c56:	3301      	adds	r3, #1
   14c58:	603b      	str	r3, [r7, #0]
   14c5a:	68f3      	ldr	r3, [r6, #12]
   14c5c:	6928      	ldr	r0, [r5, #16]
   14c5e:	4798      	blx	r3
   14c60:	2000      	movs	r0, #0
   14c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14c64:	480c      	ldr	r0, [pc, #48]	; (14c98 <CC_PalPowerSaveModeSelect+0x80>)
   14c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14c68:	4a0a      	ldr	r2, [pc, #40]	; (14c94 <CC_PalPowerSaveModeSelect+0x7c>)
   14c6a:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   14c6e:	2b00      	cmp	r3, #0
   14c70:	d1fb      	bne.n	14c6a <CC_PalPowerSaveModeSelect+0x52>
   14c72:	4a07      	ldr	r2, [pc, #28]	; (14c90 <CC_PalPowerSaveModeSelect+0x78>)
   14c74:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   14c78:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   14c7c:	f7ff ff00 	bl	14a80 <CC_HalMaskInterrupt>
   14c80:	683b      	ldr	r3, [r7, #0]
   14c82:	e7d7      	b.n	14c34 <CC_PalPowerSaveModeSelect+0x1c>
   14c84:	20000328 	.word	0x20000328
   14c88:	20000318 	.word	0x20000318
   14c8c:	20003f5c 	.word	0x20003f5c
   14c90:	5002a000 	.word	0x5002a000
   14c94:	5002b000 	.word	0x5002b000
   14c98:	ffff8fe9 	.word	0xffff8fe9

00014c9c <mutex_init>:
   14c9c:	4b01      	ldr	r3, [pc, #4]	; (14ca4 <mutex_init+0x8>)
   14c9e:	681b      	ldr	r3, [r3, #0]
   14ca0:	4718      	bx	r3
   14ca2:	bf00      	nop
   14ca4:	20000318 	.word	0x20000318

00014ca8 <mutex_lock>:
   14ca8:	4b01      	ldr	r3, [pc, #4]	; (14cb0 <mutex_lock+0x8>)
   14caa:	689b      	ldr	r3, [r3, #8]
   14cac:	4718      	bx	r3
   14cae:	bf00      	nop
   14cb0:	20000318 	.word	0x20000318

00014cb4 <mutex_unlock>:
   14cb4:	4b01      	ldr	r3, [pc, #4]	; (14cbc <mutex_unlock+0x8>)
   14cb6:	68db      	ldr	r3, [r3, #12]
   14cb8:	4718      	bx	r3
   14cba:	bf00      	nop
   14cbc:	20000318 	.word	0x20000318

00014cc0 <startTrngHW>:
   14cc0:	2800      	cmp	r0, #0
   14cc2:	f000 8084 	beq.w	14dce <startTrngHW+0x10e>
   14cc6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14cca:	460c      	mov	r4, r1
   14ccc:	b083      	sub	sp, #12
   14cce:	2900      	cmp	r1, #0
   14cd0:	d078      	beq.n	14dc4 <startTrngHW+0x104>
   14cd2:	461d      	mov	r5, r3
   14cd4:	2b00      	cmp	r3, #0
   14cd6:	d075      	beq.n	14dc4 <startTrngHW+0x104>
   14cd8:	4607      	mov	r7, r0
   14cda:	b11a      	cbz	r2, 14ce4 <startTrngHW+0x24>
   14cdc:	2201      	movs	r2, #1
   14cde:	2300      	movs	r3, #0
   14ce0:	602a      	str	r2, [r5, #0]
   14ce2:	6003      	str	r3, [r0, #0]
   14ce4:	682b      	ldr	r3, [r5, #0]
   14ce6:	2b00      	cmp	r3, #0
   14ce8:	d067      	beq.n	14dba <startTrngHW+0xfa>
   14cea:	4629      	mov	r1, r5
   14cec:	4620      	mov	r0, r4
   14cee:	f000 fde9 	bl	158c4 <LLF_RND_GetFastestRosc>
   14cf2:	4603      	mov	r3, r0
   14cf4:	2800      	cmp	r0, #0
   14cf6:	d161      	bne.n	14dbc <startTrngHW+0xfc>
   14cf8:	6828      	ldr	r0, [r5, #0]
   14cfa:	4621      	mov	r1, r4
   14cfc:	f000 fdc4 	bl	15888 <LLF_RND_GetRoscSampleCnt>
   14d00:	4603      	mov	r3, r0
   14d02:	2800      	cmp	r0, #0
   14d04:	d15a      	bne.n	14dbc <startTrngHW+0xfc>
   14d06:	682a      	ldr	r2, [r5, #0]
   14d08:	2a08      	cmp	r2, #8
   14d0a:	d072      	beq.n	14df2 <startTrngHW+0x132>
   14d0c:	2a04      	cmp	r2, #4
   14d0e:	d073      	beq.n	14df8 <startTrngHW+0x138>
   14d10:	f1a2 0802 	sub.w	r8, r2, #2
   14d14:	fab8 f888 	clz	r8, r8
   14d18:	ea4f 1858 	mov.w	r8, r8, lsr #5
   14d1c:	4e38      	ldr	r6, [pc, #224]	; (14e00 <startTrngHW+0x140>)
   14d1e:	2001      	movs	r0, #1
   14d20:	f8c6 01c4 	str.w	r0, [r6, #452]	; 0x1c4
   14d24:	f8c6 0140 	str.w	r0, [r6, #320]	; 0x140
   14d28:	f8c6 01c4 	str.w	r0, [r6, #452]	; 0x1c4
   14d2c:	6a62      	ldr	r2, [r4, #36]	; 0x24
   14d2e:	f8c6 2130 	str.w	r2, [r6, #304]	; 0x130
   14d32:	f8d6 1130 	ldr.w	r1, [r6, #304]	; 0x130
   14d36:	428a      	cmp	r2, r1
   14d38:	d1f6      	bne.n	14d28 <startTrngHW+0x68>
   14d3a:	f04f 0900 	mov.w	r9, #0
   14d3e:	9301      	str	r3, [sp, #4]
   14d40:	f04f 30ff 	mov.w	r0, #4294967295
   14d44:	f8c6 912c 	str.w	r9, [r6, #300]	; 0x12c
   14d48:	f7ff fe8c 	bl	14a64 <CC_HalClearInterruptBit>
   14d4c:	f06f 021b 	mvn.w	r2, #27
   14d50:	f8c6 2100 	str.w	r2, [r6, #256]	; 0x100
   14d54:	4648      	mov	r0, r9
   14d56:	f7ff fe93 	bl	14a80 <CC_HalMaskInterrupt>
   14d5a:	f8c6 810c 	str.w	r8, [r6, #268]	; 0x10c
   14d5e:	f8d6 0a04 	ldr.w	r0, [r6, #2564]	; 0xa04
   14d62:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   14d66:	f7ff fe8b 	bl	14a80 <CC_HalMaskInterrupt>
   14d6a:	220a      	movs	r2, #10
   14d6c:	f8c6 2138 	str.w	r2, [r6, #312]	; 0x138
   14d70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14d72:	2b01      	cmp	r3, #1
   14d74:	9b01      	ldr	r3, [sp, #4]
   14d76:	d02d      	beq.n	14dd4 <startTrngHW+0x114>
   14d78:	6922      	ldr	r2, [r4, #16]
   14d7a:	4922      	ldr	r1, [pc, #136]	; (14e04 <startTrngHW+0x144>)
   14d7c:	fba1 1202 	umull	r1, r2, r1, r2
   14d80:	0912      	lsrs	r2, r2, #4
   14d82:	6a61      	ldr	r1, [r4, #36]	; 0x24
   14d84:	fb01 f202 	mul.w	r2, r1, r2
   14d88:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   14d8c:	491c      	ldr	r1, [pc, #112]	; (14e00 <startTrngHW+0x140>)
   14d8e:	03d2      	lsls	r2, r2, #15
   14d90:	0992      	lsrs	r2, r2, #6
   14d92:	f8c1 21d8 	str.w	r2, [r1, #472]	; 0x1d8
   14d96:	2201      	movs	r2, #1
   14d98:	f8c1 212c 	str.w	r2, [r1, #300]	; 0x12c
   14d9c:	683a      	ldr	r2, [r7, #0]
   14d9e:	6829      	ldr	r1, [r5, #0]
   14da0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   14da4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
   14da8:	603a      	str	r2, [r7, #0]
   14daa:	6829      	ldr	r1, [r5, #0]
   14dac:	4618      	mov	r0, r3
   14dae:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   14db2:	603a      	str	r2, [r7, #0]
   14db4:	b003      	add	sp, #12
   14db6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14dba:	4b13      	ldr	r3, [pc, #76]	; (14e08 <startTrngHW+0x148>)
   14dbc:	4618      	mov	r0, r3
   14dbe:	b003      	add	sp, #12
   14dc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14dc4:	4b11      	ldr	r3, [pc, #68]	; (14e0c <startTrngHW+0x14c>)
   14dc6:	4618      	mov	r0, r3
   14dc8:	b003      	add	sp, #12
   14dca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14dce:	4b0f      	ldr	r3, [pc, #60]	; (14e0c <startTrngHW+0x14c>)
   14dd0:	4618      	mov	r0, r3
   14dd2:	4770      	bx	lr
   14dd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   14dd8:	f8d2 1c0c 	ldr.w	r1, [r2, #3084]	; 0xc0c
   14ddc:	3101      	adds	r1, #1
   14dde:	d006      	beq.n	14dee <startTrngHW+0x12e>
   14de0:	f8d2 2c0c 	ldr.w	r2, [r2, #3084]	; 0xc0c
   14de4:	4907      	ldr	r1, [pc, #28]	; (14e04 <startTrngHW+0x144>)
   14de6:	fba1 1202 	umull	r1, r2, r1, r2
   14dea:	0912      	lsrs	r2, r2, #4
   14dec:	e7c9      	b.n	14d82 <startTrngHW+0xc2>
   14dee:	2216      	movs	r2, #22
   14df0:	e7c7      	b.n	14d82 <startTrngHW+0xc2>
   14df2:	f04f 0803 	mov.w	r8, #3
   14df6:	e791      	b.n	14d1c <startTrngHW+0x5c>
   14df8:	f04f 0802 	mov.w	r8, #2
   14dfc:	e78e      	b.n	14d1c <startTrngHW+0x5c>
   14dfe:	bf00      	nop
   14e00:	5002b000 	.word	0x5002b000
   14e04:	aaaaaaab 	.word	0xaaaaaaab
   14e08:	00f10c31 	.word	0x00f10c31
   14e0c:	00f10c35 	.word	0x00f10c35

00014e10 <LLF_RND_RepetitionCounterTest.part.0>:
   14e10:	b570      	push	{r4, r5, r6, lr}
   14e12:	00c9      	lsls	r1, r1, #3
   14e14:	2400      	movs	r4, #0
   14e16:	1e4e      	subs	r6, r1, #1
   14e18:	f04f 0c01 	mov.w	ip, #1
   14e1c:	4625      	mov	r5, r4
   14e1e:	46a6      	mov	lr, r4
   14e20:	e008      	b.n	14e34 <LLF_RND_RepetitionCounterTest.part.0+0x24>
   14e22:	459e      	cmp	lr, r3
   14e24:	d015      	beq.n	14e52 <LLF_RND_RepetitionCounterTest.part.0+0x42>
   14e26:	2501      	movs	r5, #1
   14e28:	45b4      	cmp	ip, r6
   14e2a:	d817      	bhi.n	14e5c <LLF_RND_RepetitionCounterTest.part.0+0x4c>
   14e2c:	3401      	adds	r4, #1
   14e2e:	f10c 0c01 	add.w	ip, ip, #1
   14e32:	469e      	mov	lr, r3
   14e34:	0963      	lsrs	r3, r4, #5
   14e36:	f004 011f 	and.w	r1, r4, #31
   14e3a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   14e3e:	291f      	cmp	r1, #31
   14e40:	fa23 f301 	lsr.w	r3, r3, r1
   14e44:	bf18      	it	ne
   14e46:	f003 0301 	andne.w	r3, r3, #1
   14e4a:	2c00      	cmp	r4, #0
   14e4c:	d1e9      	bne.n	14e22 <LLF_RND_RepetitionCounterTest.part.0+0x12>
   14e4e:	2501      	movs	r5, #1
   14e50:	e7ec      	b.n	14e2c <LLF_RND_RepetitionCounterTest.part.0+0x1c>
   14e52:	3501      	adds	r5, #1
   14e54:	4295      	cmp	r5, r2
   14e56:	d1e7      	bne.n	14e28 <LLF_RND_RepetitionCounterTest.part.0+0x18>
   14e58:	4801      	ldr	r0, [pc, #4]	; (14e60 <LLF_RND_RepetitionCounterTest.part.0+0x50>)
   14e5a:	bd70      	pop	{r4, r5, r6, pc}
   14e5c:	2000      	movs	r0, #0
   14e5e:	bd70      	pop	{r4, r5, r6, pc}
   14e60:	00f10c36 	.word	0x00f10c36

00014e64 <LLF_RND_AdaptiveProportionTest>:
   14e64:	2800      	cmp	r0, #0
   14e66:	d03f      	beq.n	14ee8 <LLF_RND_AdaptiveProportionTest+0x84>
   14e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14e6c:	1e4c      	subs	r4, r1, #1
   14e6e:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   14e72:	d228      	bcs.n	14ec6 <LLF_RND_AdaptiveProportionTest+0x62>
   14e74:	b33b      	cbz	r3, 14ec6 <LLF_RND_AdaptiveProportionTest+0x62>
   14e76:	b332      	cbz	r2, 14ec6 <LLF_RND_AdaptiveProportionTest+0x62>
   14e78:	f04f 0e00 	mov.w	lr, #0
   14e7c:	00cf      	lsls	r7, r1, #3
   14e7e:	4676      	mov	r6, lr
   14e80:	4675      	mov	r5, lr
   14e82:	4674      	mov	r4, lr
   14e84:	f103 38ff 	add.w	r8, r3, #4294967295
   14e88:	0961      	lsrs	r1, r4, #5
   14e8a:	f004 0c1f 	and.w	ip, r4, #31
   14e8e:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   14e92:	f1bc 0f1f 	cmp.w	ip, #31
   14e96:	fa21 f10c 	lsr.w	r1, r1, ip
   14e9a:	bf18      	it	ne
   14e9c:	f001 0101 	andne.w	r1, r1, #1
   14ea0:	b1a4      	cbz	r4, 14ecc <LLF_RND_AdaptiveProportionTest+0x68>
   14ea2:	42ab      	cmp	r3, r5
   14ea4:	d018      	beq.n	14ed8 <LLF_RND_AdaptiveProportionTest+0x74>
   14ea6:	428e      	cmp	r6, r1
   14ea8:	bf08      	it	eq
   14eaa:	f10e 0e01 	addeq.w	lr, lr, #1
   14eae:	45a8      	cmp	r8, r5
   14eb0:	d015      	beq.n	14ede <LLF_RND_AdaptiveProportionTest+0x7a>
   14eb2:	3501      	adds	r5, #1
   14eb4:	4631      	mov	r1, r6
   14eb6:	3401      	adds	r4, #1
   14eb8:	42bc      	cmp	r4, r7
   14eba:	d001      	beq.n	14ec0 <LLF_RND_AdaptiveProportionTest+0x5c>
   14ebc:	460e      	mov	r6, r1
   14ebe:	e7e3      	b.n	14e88 <LLF_RND_AdaptiveProportionTest+0x24>
   14ec0:	2000      	movs	r0, #0
   14ec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14ec6:	4809      	ldr	r0, [pc, #36]	; (14eec <LLF_RND_AdaptiveProportionTest+0x88>)
   14ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14ecc:	f04f 0e01 	mov.w	lr, #1
   14ed0:	4674      	mov	r4, lr
   14ed2:	4675      	mov	r5, lr
   14ed4:	460e      	mov	r6, r1
   14ed6:	e7d7      	b.n	14e88 <LLF_RND_AdaptiveProportionTest+0x24>
   14ed8:	2501      	movs	r5, #1
   14eda:	46ae      	mov	lr, r5
   14edc:	e7eb      	b.n	14eb6 <LLF_RND_AdaptiveProportionTest+0x52>
   14ede:	4572      	cmp	r2, lr
   14ee0:	d3f1      	bcc.n	14ec6 <LLF_RND_AdaptiveProportionTest+0x62>
   14ee2:	4631      	mov	r1, r6
   14ee4:	461d      	mov	r5, r3
   14ee6:	e7e6      	b.n	14eb6 <LLF_RND_AdaptiveProportionTest+0x52>
   14ee8:	4800      	ldr	r0, [pc, #0]	; (14eec <LLF_RND_AdaptiveProportionTest+0x88>)
   14eea:	4770      	bx	lr
   14eec:	00f10c37 	.word	0x00f10c37

00014ef0 <getTrngSource>:
   14ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ef4:	b091      	sub	sp, #68	; 0x44
   14ef6:	460d      	mov	r5, r1
   14ef8:	e9dd 411b 	ldrd	r4, r1, [sp, #108]	; 0x6c
   14efc:	4681      	mov	r9, r0
   14efe:	2900      	cmp	r1, #0
   14f00:	d14c      	bne.n	14f9c <getTrngSource+0xac>
   14f02:	6928      	ldr	r0, [r5, #16]
   14f04:	9006      	str	r0, [sp, #24]
   14f06:	981a      	ldr	r0, [sp, #104]	; 0x68
   14f08:	601c      	str	r4, [r3, #0]
   14f0a:	2300      	movs	r3, #0
   14f0c:	6003      	str	r3, [r0, #0]
   14f0e:	2a00      	cmp	r2, #0
   14f10:	f000 8124 	beq.w	1515c <getTrngSource+0x26c>
   14f14:	4b9d      	ldr	r3, [pc, #628]	; (1518c <getTrngSource+0x29c>)
   14f16:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   14f18:	f8d3 1138 	ldr.w	r1, [r3, #312]	; 0x138
   14f1c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   14f20:	429a      	cmp	r2, r3
   14f22:	d147      	bne.n	14fb4 <getTrngSource+0xc4>
   14f24:	290a      	cmp	r1, #10
   14f26:	d145      	bne.n	14fb4 <getTrngSource+0xc4>
   14f28:	f899 3003 	ldrb.w	r3, [r9, #3]
   14f2c:	9308      	str	r3, [sp, #32]
   14f2e:	f104 0308 	add.w	r3, r4, #8
   14f32:	9a06      	ldr	r2, [sp, #24]
   14f34:	9307      	str	r3, [sp, #28]
   14f36:	4b96      	ldr	r3, [pc, #600]	; (15190 <getTrngSource+0x2a0>)
   14f38:	4c94      	ldr	r4, [pc, #592]	; (1518c <getTrngSource+0x29c>)
   14f3a:	fba3 1302 	umull	r1, r3, r3, r2
   14f3e:	089b      	lsrs	r3, r3, #2
   14f40:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   14f44:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
   14f48:	9303      	str	r3, [sp, #12]
   14f4a:	2304      	movs	r3, #4
   14f4c:	9305      	str	r3, [sp, #20]
   14f4e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   14f50:	9e06      	ldr	r6, [sp, #24]
   14f52:	601e      	str	r6, [r3, #0]
   14f54:	2e00      	cmp	r6, #0
   14f56:	d033      	beq.n	14fc0 <getTrngSource+0xd0>
   14f58:	f8dd 801c 	ldr.w	r8, [sp, #28]
   14f5c:	2700      	movs	r7, #0
   14f5e:	f04f 0a01 	mov.w	sl, #1
   14f62:	f000 fcbf 	bl	158e4 <LLF_RND_TurnOffTrng>
   14f66:	2300      	movs	r3, #0
   14f68:	9309      	str	r3, [sp, #36]	; 0x24
   14f6a:	f1b9 0f00 	cmp.w	r9, #0
   14f6e:	f000 80df 	beq.w	15130 <getTrngSource+0x240>
   14f72:	2d00      	cmp	r5, #0
   14f74:	f000 80dc 	beq.w	15130 <getTrngSource+0x240>
   14f78:	9b08      	ldr	r3, [sp, #32]
   14f7a:	b1eb      	cbz	r3, 14fb8 <getTrngSource+0xc8>
   14f7c:	a908      	add	r1, sp, #32
   14f7e:	4628      	mov	r0, r5
   14f80:	f000 fca0 	bl	158c4 <LLF_RND_GetFastestRosc>
   14f84:	2800      	cmp	r0, #0
   14f86:	d03e      	beq.n	15006 <getTrngSource+0x116>
   14f88:	4b82      	ldr	r3, [pc, #520]	; (15194 <getTrngSource+0x2a4>)
   14f8a:	4298      	cmp	r0, r3
   14f8c:	d118      	bne.n	14fc0 <getTrngSource+0xd0>
   14f8e:	9003      	str	r0, [sp, #12]
   14f90:	f000 fca8 	bl	158e4 <LLF_RND_TurnOffTrng>
   14f94:	9803      	ldr	r0, [sp, #12]
   14f96:	b011      	add	sp, #68	; 0x44
   14f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f9c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   14fa0:	f8d0 6c0c 	ldr.w	r6, [r0, #3084]	; 0xc0c
   14fa4:	3601      	adds	r6, #1
   14fa6:	bf14      	ite	ne
   14fa8:	f8d0 0c0c 	ldrne.w	r0, [r0, #3084]	; 0xc0c
   14fac:	f44f 7004 	moveq.w	r0, #528	; 0x210
   14fb0:	9006      	str	r0, [sp, #24]
   14fb2:	e7a8      	b.n	14f06 <getTrngSource+0x16>
   14fb4:	4878      	ldr	r0, [pc, #480]	; (15198 <getTrngSource+0x2a8>)
   14fb6:	e7ea      	b.n	14f8e <getTrngSource+0x9e>
   14fb8:	4878      	ldr	r0, [pc, #480]	; (1519c <getTrngSource+0x2ac>)
   14fba:	4b76      	ldr	r3, [pc, #472]	; (15194 <getTrngSource+0x2a4>)
   14fbc:	4298      	cmp	r0, r3
   14fbe:	d0e6      	beq.n	14f8e <getTrngSource+0x9e>
   14fc0:	9b08      	ldr	r3, [sp, #32]
   14fc2:	2b08      	cmp	r3, #8
   14fc4:	f000 80c8 	beq.w	15158 <getTrngSource+0x268>
   14fc8:	005b      	lsls	r3, r3, #1
   14fca:	2200      	movs	r2, #0
   14fcc:	9308      	str	r3, [sp, #32]
   14fce:	9200      	str	r2, [sp, #0]
   14fd0:	ab08      	add	r3, sp, #32
   14fd2:	4629      	mov	r1, r5
   14fd4:	4648      	mov	r0, r9
   14fd6:	f7ff fe73 	bl	14cc0 <startTrngHW>
   14fda:	4b70      	ldr	r3, [pc, #448]	; (1519c <getTrngSource+0x2ac>)
   14fdc:	4298      	cmp	r0, r3
   14fde:	f000 80b7 	beq.w	15150 <getTrngSource+0x260>
   14fe2:	2800      	cmp	r0, #0
   14fe4:	d1d3      	bne.n	14f8e <getTrngSource+0x9e>
   14fe6:	f8d9 2000 	ldr.w	r2, [r9]
   14fea:	0a13      	lsrs	r3, r2, #8
   14fec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   14ff0:	4313      	orrs	r3, r2
   14ff2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   14ff6:	f8c9 3000 	str.w	r3, [r9]
   14ffa:	9b05      	ldr	r3, [sp, #20]
   14ffc:	3b01      	subs	r3, #1
   14ffe:	9305      	str	r3, [sp, #20]
   15000:	d1a5      	bne.n	14f4e <getTrngSource+0x5e>
   15002:	2000      	movs	r0, #0
   15004:	e7c3      	b.n	14f8e <getTrngSource+0x9e>
   15006:	9808      	ldr	r0, [sp, #32]
   15008:	4629      	mov	r1, r5
   1500a:	f000 fc3d 	bl	15888 <LLF_RND_GetRoscSampleCnt>
   1500e:	2800      	cmp	r0, #0
   15010:	d1ba      	bne.n	14f88 <getTrngSource+0x98>
   15012:	9b08      	ldr	r3, [sp, #32]
   15014:	2b08      	cmp	r3, #8
   15016:	f000 8095 	beq.w	15144 <getTrngSource+0x254>
   1501a:	2b04      	cmp	r3, #4
   1501c:	f000 8095 	beq.w	1514a <getTrngSource+0x25a>
   15020:	f1a3 0302 	sub.w	r3, r3, #2
   15024:	fab3 f383 	clz	r3, r3
   15028:	095b      	lsrs	r3, r3, #5
   1502a:	9304      	str	r3, [sp, #16]
   1502c:	f8c4 a1c4 	str.w	sl, [r4, #452]	; 0x1c4
   15030:	f8c4 a140 	str.w	sl, [r4, #320]	; 0x140
   15034:	f8c4 a1c4 	str.w	sl, [r4, #452]	; 0x1c4
   15038:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1503a:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
   1503e:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
   15042:	4293      	cmp	r3, r2
   15044:	d1f6      	bne.n	15034 <getTrngSource+0x144>
   15046:	f04f 0b00 	mov.w	fp, #0
   1504a:	f8c4 b12c 	str.w	fp, [r4, #300]	; 0x12c
   1504e:	f04f 30ff 	mov.w	r0, #4294967295
   15052:	f7ff fd07 	bl	14a64 <CC_HalClearInterruptBit>
   15056:	f06f 031b 	mvn.w	r3, #27
   1505a:	4658      	mov	r0, fp
   1505c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   15060:	f7ff fd0e 	bl	14a80 <CC_HalMaskInterrupt>
   15064:	9b04      	ldr	r3, [sp, #16]
   15066:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
   1506a:	f8d4 0a04 	ldr.w	r0, [r4, #2564]	; 0xa04
   1506e:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   15072:	f7ff fd05 	bl	14a80 <CC_HalMaskInterrupt>
   15076:	230a      	movs	r3, #10
   15078:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
   1507c:	692b      	ldr	r3, [r5, #16]
   1507e:	f1ab 3b55 	sub.w	fp, fp, #1431655765	; 0x55555555
   15082:	fbab 2303 	umull	r2, r3, fp, r3
   15086:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   15088:	091b      	lsrs	r3, r3, #4
   1508a:	fb02 f303 	mul.w	r3, r2, r3
   1508e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   15092:	03db      	lsls	r3, r3, #15
   15094:	099b      	lsrs	r3, r3, #6
   15096:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
   1509a:	f8c4 a12c 	str.w	sl, [r4, #300]	; 0x12c
   1509e:	9908      	ldr	r1, [sp, #32]
   150a0:	f8d9 2000 	ldr.w	r2, [r9]
   150a4:	020b      	lsls	r3, r1, #8
   150a6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   150aa:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   150ae:	4313      	orrs	r3, r2
   150b0:	f8c9 3000 	str.w	r3, [r9]
   150b4:	a809      	add	r0, sp, #36	; 0x24
   150b6:	f000 fbd7 	bl	15868 <LLF_RND_WaitRngInterrupt>
   150ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
   150bc:	f003 031a 	and.w	r3, r3, #26
   150c0:	4303      	orrs	r3, r0
   150c2:	f47f af7d 	bne.w	14fc0 <getTrngSource+0xd0>
   150c6:	fbab 3b06 	umull	r3, fp, fp, r6
   150ca:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   150ce:	930a      	str	r3, [sp, #40]	; 0x28
   150d0:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
   150d4:	930b      	str	r3, [sp, #44]	; 0x2c
   150d6:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   150da:	930c      	str	r3, [sp, #48]	; 0x30
   150dc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   150e0:	930d      	str	r3, [sp, #52]	; 0x34
   150e2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   150e6:	930e      	str	r3, [sp, #56]	; 0x38
   150e8:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   150ec:	930f      	str	r3, [sp, #60]	; 0x3c
   150ee:	ebb7 0f9b 	cmp.w	r7, fp, lsr #2
   150f2:	d101      	bne.n	150f8 <getTrngSource+0x208>
   150f4:	9b03      	ldr	r3, [sp, #12]
   150f6:	b9eb      	cbnz	r3, 15134 <getTrngSource+0x244>
   150f8:	4640      	mov	r0, r8
   150fa:	2218      	movs	r2, #24
   150fc:	a90a      	add	r1, sp, #40	; 0x28
   150fe:	3e18      	subs	r6, #24
   15100:	f108 0818 	add.w	r8, r8, #24
   15104:	f7ff fd3c 	bl	14b80 <CC_PalMemCopyPlat>
   15108:	3701      	adds	r7, #1
   1510a:	2e00      	cmp	r6, #0
   1510c:	f47f af29 	bne.w	14f62 <getTrngSource+0x72>
   15110:	9b06      	ldr	r3, [sp, #24]
   15112:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
   15116:	d836      	bhi.n	15186 <getTrngSource+0x296>
   15118:	9e07      	ldr	r6, [sp, #28]
   1511a:	696a      	ldr	r2, [r5, #20]
   1511c:	4619      	mov	r1, r3
   1511e:	4630      	mov	r0, r6
   15120:	461f      	mov	r7, r3
   15122:	f7ff fe75 	bl	14e10 <LLF_RND_RepetitionCounterTest.part.0>
   15126:	b320      	cbz	r0, 15172 <getTrngSource+0x282>
   15128:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1512a:	2300      	movs	r3, #0
   1512c:	6013      	str	r3, [r2, #0]
   1512e:	e72b      	b.n	14f88 <getTrngSource+0x98>
   15130:	481b      	ldr	r0, [pc, #108]	; (151a0 <getTrngSource+0x2b0>)
   15132:	e729      	b.n	14f88 <getTrngSource+0x98>
   15134:	4640      	mov	r0, r8
   15136:	461a      	mov	r2, r3
   15138:	a90a      	add	r1, sp, #40	; 0x28
   1513a:	1af6      	subs	r6, r6, r3
   1513c:	4498      	add	r8, r3
   1513e:	f7ff fd1f 	bl	14b80 <CC_PalMemCopyPlat>
   15142:	e7e1      	b.n	15108 <getTrngSource+0x218>
   15144:	2303      	movs	r3, #3
   15146:	9304      	str	r3, [sp, #16]
   15148:	e770      	b.n	1502c <getTrngSource+0x13c>
   1514a:	2302      	movs	r3, #2
   1514c:	9304      	str	r3, [sp, #16]
   1514e:	e76d      	b.n	1502c <getTrngSource+0x13c>
   15150:	6a2b      	ldr	r3, [r5, #32]
   15152:	2b00      	cmp	r3, #0
   15154:	f43f af1b 	beq.w	14f8e <getTrngSource+0x9e>
   15158:	4812      	ldr	r0, [pc, #72]	; (151a4 <getTrngSource+0x2b4>)
   1515a:	e718      	b.n	14f8e <getTrngSource+0x9e>
   1515c:	9100      	str	r1, [sp, #0]
   1515e:	ab08      	add	r3, sp, #32
   15160:	2201      	movs	r2, #1
   15162:	4629      	mov	r1, r5
   15164:	4648      	mov	r0, r9
   15166:	f7ff fdab 	bl	14cc0 <startTrngHW>
   1516a:	2800      	cmp	r0, #0
   1516c:	f43f aedf 	beq.w	14f2e <getTrngSource+0x3e>
   15170:	e70d      	b.n	14f8e <getTrngSource+0x9e>
   15172:	69aa      	ldr	r2, [r5, #24]
   15174:	f44f 6380 	mov.w	r3, #1024	; 0x400
   15178:	4639      	mov	r1, r7
   1517a:	4630      	mov	r0, r6
   1517c:	f7ff fe72 	bl	14e64 <LLF_RND_AdaptiveProportionTest>
   15180:	2800      	cmp	r0, #0
   15182:	d1d1      	bne.n	15128 <getTrngSource+0x238>
   15184:	e73d      	b.n	15002 <getTrngSource+0x112>
   15186:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   15188:	601e      	str	r6, [r3, #0]
   1518a:	e719      	b.n	14fc0 <getTrngSource+0xd0>
   1518c:	5002b000 	.word	0x5002b000
   15190:	aaaaaaab 	.word	0xaaaaaaab
   15194:	00f10c02 	.word	0x00f10c02
   15198:	00f10c30 	.word	0x00f10c30
   1519c:	00f10c31 	.word	0x00f10c31
   151a0:	00f10c35 	.word	0x00f10c35
   151a4:	00f10c32 	.word	0x00f10c32

000151a8 <LLF_RND_GetTrngSource>:
   151a8:	b410      	push	{r4}
   151aa:	e9dd 3401 	ldrd	r3, r4, [sp, #4]
   151ae:	9401      	str	r4, [sp, #4]
   151b0:	9c03      	ldr	r4, [sp, #12]
   151b2:	9402      	str	r4, [sp, #8]
   151b4:	2400      	movs	r4, #0
   151b6:	9403      	str	r4, [sp, #12]
   151b8:	bc10      	pop	{r4}
   151ba:	f7ff be99 	b.w	14ef0 <getTrngSource>
   151be:	bf00      	nop

000151c0 <LLF_RND_RunTrngStartupTest>:
   151c0:	b510      	push	{r4, lr}
   151c2:	b086      	sub	sp, #24
   151c4:	ab05      	add	r3, sp, #20
   151c6:	2401      	movs	r4, #1
   151c8:	e9cd 2401 	strd	r2, r4, [sp, #4]
   151cc:	9300      	str	r3, [sp, #0]
   151ce:	2200      	movs	r2, #0
   151d0:	ab04      	add	r3, sp, #16
   151d2:	f7ff fe8d 	bl	14ef0 <getTrngSource>
   151d6:	b006      	add	sp, #24
   151d8:	bd10      	pop	{r4, pc}
   151da:	bf00      	nop

000151dc <mbedtls_hardware_poll>:
   151dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   151de:	b089      	sub	sp, #36	; 0x24
   151e0:	9205      	str	r2, [sp, #20]
   151e2:	2900      	cmp	r1, #0
   151e4:	d064      	beq.n	152b0 <mbedtls_hardware_poll+0xd4>
   151e6:	461c      	mov	r4, r3
   151e8:	2b00      	cmp	r3, #0
   151ea:	d061      	beq.n	152b0 <mbedtls_hardware_poll+0xd4>
   151ec:	4615      	mov	r5, r2
   151ee:	2a00      	cmp	r2, #0
   151f0:	d05e      	beq.n	152b0 <mbedtls_hardware_poll+0xd4>
   151f2:	4f31      	ldr	r7, [pc, #196]	; (152b8 <mbedtls_hardware_poll+0xdc>)
   151f4:	460e      	mov	r6, r1
   151f6:	6838      	ldr	r0, [r7, #0]
   151f8:	f04f 31ff 	mov.w	r1, #4294967295
   151fc:	f7ff fcdc 	bl	14bb8 <CC_PalMutexLock>
   15200:	2800      	cmp	r0, #0
   15202:	d14b      	bne.n	1529c <mbedtls_hardware_poll+0xc0>
   15204:	2000      	movs	r0, #0
   15206:	f7ff fd07 	bl	14c18 <CC_PalPowerSaveModeSelect>
   1520a:	2800      	cmp	r0, #0
   1520c:	d142      	bne.n	15294 <mbedtls_hardware_poll+0xb8>
   1520e:	482b      	ldr	r0, [pc, #172]	; (152bc <mbedtls_hardware_poll+0xe0>)
   15210:	f000 fa9a 	bl	15748 <RNG_PLAT_SetUserRngParameters>
   15214:	b1d8      	cbz	r0, 1524e <mbedtls_hardware_poll+0x72>
   15216:	2001      	movs	r0, #1
   15218:	f04f 36ff 	mov.w	r6, #4294967295
   1521c:	f7ff fcfc 	bl	14c18 <CC_PalPowerSaveModeSelect>
   15220:	2800      	cmp	r0, #0
   15222:	d133      	bne.n	1528c <mbedtls_hardware_poll+0xb0>
   15224:	4826      	ldr	r0, [pc, #152]	; (152c0 <mbedtls_hardware_poll+0xe4>)
   15226:	f44f 7108 	mov.w	r1, #544	; 0x220
   1522a:	f7fe fe5f 	bl	13eec <mbedtls_zeroize_internal>
   1522e:	4825      	ldr	r0, [pc, #148]	; (152c4 <mbedtls_hardware_poll+0xe8>)
   15230:	2104      	movs	r1, #4
   15232:	f7fe fe5b 	bl	13eec <mbedtls_zeroize_internal>
   15236:	4821      	ldr	r0, [pc, #132]	; (152bc <mbedtls_hardware_poll+0xe0>)
   15238:	2128      	movs	r1, #40	; 0x28
   1523a:	f7fe fe57 	bl	13eec <mbedtls_zeroize_internal>
   1523e:	6838      	ldr	r0, [r7, #0]
   15240:	f7ff fcc2 	bl	14bc8 <CC_PalMutexUnlock>
   15244:	2800      	cmp	r0, #0
   15246:	d12d      	bne.n	152a4 <mbedtls_hardware_poll+0xc8>
   15248:	4630      	mov	r0, r6
   1524a:	b009      	add	sp, #36	; 0x24
   1524c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1524e:	4b1c      	ldr	r3, [pc, #112]	; (152c0 <mbedtls_hardware_poll+0xe4>)
   15250:	9302      	str	r3, [sp, #8]
   15252:	ab07      	add	r3, sp, #28
   15254:	9003      	str	r0, [sp, #12]
   15256:	4602      	mov	r2, r0
   15258:	9300      	str	r3, [sp, #0]
   1525a:	4918      	ldr	r1, [pc, #96]	; (152bc <mbedtls_hardware_poll+0xe0>)
   1525c:	4819      	ldr	r0, [pc, #100]	; (152c4 <mbedtls_hardware_poll+0xe8>)
   1525e:	9401      	str	r4, [sp, #4]
   15260:	ab05      	add	r3, sp, #20
   15262:	f7ff ffa1 	bl	151a8 <LLF_RND_GetTrngSource>
   15266:	4603      	mov	r3, r0
   15268:	2800      	cmp	r0, #0
   1526a:	d1d4      	bne.n	15216 <mbedtls_hardware_poll+0x3a>
   1526c:	6822      	ldr	r2, [r4, #0]
   1526e:	42aa      	cmp	r2, r5
   15270:	d3d1      	bcc.n	15216 <mbedtls_hardware_poll+0x3a>
   15272:	9907      	ldr	r1, [sp, #28]
   15274:	4630      	mov	r0, r6
   15276:	3108      	adds	r1, #8
   15278:	462a      	mov	r2, r5
   1527a:	461e      	mov	r6, r3
   1527c:	f7ff fc80 	bl	14b80 <CC_PalMemCopyPlat>
   15280:	6025      	str	r5, [r4, #0]
   15282:	2001      	movs	r0, #1
   15284:	f7ff fcc8 	bl	14c18 <CC_PalPowerSaveModeSelect>
   15288:	2800      	cmp	r0, #0
   1528a:	d0cb      	beq.n	15224 <mbedtls_hardware_poll+0x48>
   1528c:	480e      	ldr	r0, [pc, #56]	; (152c8 <mbedtls_hardware_poll+0xec>)
   1528e:	f7fe fd17 	bl	13cc0 <CC_PalAbort>
   15292:	e7c7      	b.n	15224 <mbedtls_hardware_poll+0x48>
   15294:	480d      	ldr	r0, [pc, #52]	; (152cc <mbedtls_hardware_poll+0xf0>)
   15296:	f7fe fd13 	bl	13cc0 <CC_PalAbort>
   1529a:	e7b8      	b.n	1520e <mbedtls_hardware_poll+0x32>
   1529c:	480c      	ldr	r0, [pc, #48]	; (152d0 <mbedtls_hardware_poll+0xf4>)
   1529e:	f7fe fd0f 	bl	13cc0 <CC_PalAbort>
   152a2:	e7af      	b.n	15204 <mbedtls_hardware_poll+0x28>
   152a4:	480b      	ldr	r0, [pc, #44]	; (152d4 <mbedtls_hardware_poll+0xf8>)
   152a6:	f7fe fd0b 	bl	13cc0 <CC_PalAbort>
   152aa:	4630      	mov	r0, r6
   152ac:	b009      	add	sp, #36	; 0x24
   152ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   152b0:	f04f 36ff 	mov.w	r6, #4294967295
   152b4:	e7c8      	b.n	15248 <mbedtls_hardware_poll+0x6c>
   152b6:	bf00      	nop
   152b8:	20000368 	.word	0x20000368
   152bc:	20004184 	.word	0x20004184
   152c0:	20003f64 	.word	0x20003f64
   152c4:	20003f60 	.word	0x20003f60
   152c8:	00022670 	.word	0x00022670
   152cc:	00022650 	.word	0x00022650
   152d0:	00022638 	.word	0x00022638
   152d4:	000226c8 	.word	0x000226c8

000152d8 <cc_mbedtls_aes_init>:
   152d8:	b510      	push	{r4, lr}
   152da:	4604      	mov	r4, r0
   152dc:	b130      	cbz	r0, 152ec <cc_mbedtls_aes_init+0x14>
   152de:	2200      	movs	r2, #0
   152e0:	2301      	movs	r3, #1
   152e2:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
   152e6:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
   152ea:	bd10      	pop	{r4, pc}
   152ec:	4801      	ldr	r0, [pc, #4]	; (152f4 <cc_mbedtls_aes_init+0x1c>)
   152ee:	f7fe fce7 	bl	13cc0 <CC_PalAbort>
   152f2:	e7f4      	b.n	152de <cc_mbedtls_aes_init+0x6>
   152f4:	000226e0 	.word	0x000226e0

000152f8 <cc_mbedtls_aes_free>:
   152f8:	b118      	cbz	r0, 15302 <cc_mbedtls_aes_free+0xa>
   152fa:	2274      	movs	r2, #116	; 0x74
   152fc:	2100      	movs	r1, #0
   152fe:	f7ff bc41 	b.w	14b84 <CC_PalMemSetPlat>
   15302:	4770      	bx	lr

00015304 <cc_mbedtls_aes_setkey_enc>:
   15304:	b190      	cbz	r0, 1532c <cc_mbedtls_aes_setkey_enc+0x28>
   15306:	b1a1      	cbz	r1, 15332 <cc_mbedtls_aes_setkey_enc+0x2e>
   15308:	b510      	push	{r4, lr}
   1530a:	2a80      	cmp	r2, #128	; 0x80
   1530c:	f04f 0400 	mov.w	r4, #0
   15310:	6384      	str	r4, [r0, #56]	; 0x38
   15312:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
   15316:	d106      	bne.n	15326 <cc_mbedtls_aes_setkey_enc+0x22>
   15318:	2210      	movs	r2, #16
   1531a:	6304      	str	r4, [r0, #48]	; 0x30
   1531c:	4410      	add	r0, r2
   1531e:	f7ff fc2f 	bl	14b80 <CC_PalMemCopyPlat>
   15322:	4620      	mov	r0, r4
   15324:	bd10      	pop	{r4, pc}
   15326:	f06f 001f 	mvn.w	r0, #31
   1532a:	bd10      	pop	{r4, pc}
   1532c:	f06f 0021 	mvn.w	r0, #33	; 0x21
   15330:	4770      	bx	lr
   15332:	f06f 001f 	mvn.w	r0, #31
   15336:	4770      	bx	lr

00015338 <cc_mbedtls_aes_crypt_ecb>:
   15338:	b328      	cbz	r0, 15386 <cc_mbedtls_aes_crypt_ecb+0x4e>
   1533a:	b322      	cbz	r2, 15386 <cc_mbedtls_aes_crypt_ecb+0x4e>
   1533c:	b31b      	cbz	r3, 15386 <cc_mbedtls_aes_crypt_ecb+0x4e>
   1533e:	2901      	cmp	r1, #1
   15340:	d821      	bhi.n	15386 <cc_mbedtls_aes_crypt_ecb+0x4e>
   15342:	b570      	push	{r4, r5, r6, lr}
   15344:	4604      	mov	r4, r0
   15346:	6b81      	ldr	r1, [r0, #56]	; 0x38
   15348:	b086      	sub	sp, #24
   1534a:	d017      	beq.n	1537c <cc_mbedtls_aes_crypt_ecb+0x44>
   1534c:	2901      	cmp	r1, #1
   1534e:	d117      	bne.n	15380 <cc_mbedtls_aes_crypt_ecb+0x48>
   15350:	2510      	movs	r5, #16
   15352:	2100      	movs	r1, #0
   15354:	eb0d 0605 	add.w	r6, sp, r5
   15358:	6361      	str	r1, [r4, #52]	; 0x34
   1535a:	4610      	mov	r0, r2
   1535c:	9500      	str	r5, [sp, #0]
   1535e:	9601      	str	r6, [sp, #4]
   15360:	aa02      	add	r2, sp, #8
   15362:	4629      	mov	r1, r5
   15364:	f000 faca 	bl	158fc <SetDataBuffersInfo>
   15368:	b950      	cbnz	r0, 15380 <cc_mbedtls_aes_crypt_ecb+0x48>
   1536a:	462b      	mov	r3, r5
   1536c:	4632      	mov	r2, r6
   1536e:	a902      	add	r1, sp, #8
   15370:	4620      	mov	r0, r4
   15372:	f000 fd4b 	bl	15e0c <ProcessAesDrv>
   15376:	b918      	cbnz	r0, 15380 <cc_mbedtls_aes_crypt_ecb+0x48>
   15378:	b006      	add	sp, #24
   1537a:	bd70      	pop	{r4, r5, r6, pc}
   1537c:	2900      	cmp	r1, #0
   1537e:	d0e7      	beq.n	15350 <cc_mbedtls_aes_crypt_ecb+0x18>
   15380:	f06f 0021 	mvn.w	r0, #33	; 0x21
   15384:	e7f8      	b.n	15378 <cc_mbedtls_aes_crypt_ecb+0x40>
   15386:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1538a:	4770      	bx	lr

0001538c <cc_mbedtls_sha256_init>:
   1538c:	b510      	push	{r4, lr}
   1538e:	4604      	mov	r4, r0
   15390:	b128      	cbz	r0, 1539e <cc_mbedtls_sha256_init+0x12>
   15392:	4620      	mov	r0, r4
   15394:	21f4      	movs	r1, #244	; 0xf4
   15396:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1539a:	f7ff bbf5 	b.w	14b88 <CC_PalMemSetZeroPlat>
   1539e:	4804      	ldr	r0, [pc, #16]	; (153b0 <cc_mbedtls_sha256_init+0x24>)
   153a0:	f7fe fc8e 	bl	13cc0 <CC_PalAbort>
   153a4:	4620      	mov	r0, r4
   153a6:	21f4      	movs	r1, #244	; 0xf4
   153a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   153ac:	f7ff bbec 	b.w	14b88 <CC_PalMemSetZeroPlat>
   153b0:	000226f4 	.word	0x000226f4

000153b4 <cc_mbedtls_sha256_free>:
   153b4:	b110      	cbz	r0, 153bc <cc_mbedtls_sha256_free+0x8>
   153b6:	21f4      	movs	r1, #244	; 0xf4
   153b8:	f7fe bd98 	b.w	13eec <mbedtls_zeroize_internal>
   153bc:	4770      	bx	lr
   153be:	bf00      	nop

000153c0 <cc_mbedtls_sha256_starts>:
   153c0:	b508      	push	{r3, lr}
   153c2:	b161      	cbz	r1, 153de <cc_mbedtls_sha256_starts+0x1e>
   153c4:	2901      	cmp	r1, #1
   153c6:	d107      	bne.n	153d8 <cc_mbedtls_sha256_starts+0x18>
   153c8:	2102      	movs	r1, #2
   153ca:	f000 f85b 	bl	15484 <mbedtls_sha_starts_internal>
   153ce:	2800      	cmp	r0, #0
   153d0:	bf18      	it	ne
   153d2:	f06f 0036 	mvnne.w	r0, #54	; 0x36
   153d6:	bd08      	pop	{r3, pc}
   153d8:	f06f 0036 	mvn.w	r0, #54	; 0x36
   153dc:	bd08      	pop	{r3, pc}
   153de:	2101      	movs	r1, #1
   153e0:	f000 f850 	bl	15484 <mbedtls_sha_starts_internal>
   153e4:	e7f3      	b.n	153ce <cc_mbedtls_sha256_starts+0xe>
   153e6:	bf00      	nop

000153e8 <cc_mbedtls_sha256_update>:
   153e8:	b530      	push	{r4, r5, lr}
   153ea:	4605      	mov	r5, r0
   153ec:	1888      	adds	r0, r1, r2
   153ee:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
   153f2:	b0a1      	sub	sp, #132	; 0x84
   153f4:	460b      	mov	r3, r1
   153f6:	4614      	mov	r4, r2
   153f8:	d801      	bhi.n	153fe <cc_mbedtls_sha256_update+0x16>
   153fa:	2a80      	cmp	r2, #128	; 0x80
   153fc:	d90c      	bls.n	15418 <cc_mbedtls_sha256_update+0x30>
   153fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   15402:	d917      	bls.n	15434 <cc_mbedtls_sha256_update+0x4c>
   15404:	4622      	mov	r2, r4
   15406:	4619      	mov	r1, r3
   15408:	4628      	mov	r0, r5
   1540a:	f000 f87d 	bl	15508 <mbedtls_sha_update_internal>
   1540e:	4604      	mov	r4, r0
   15410:	b984      	cbnz	r4, 15434 <cc_mbedtls_sha256_update+0x4c>
   15412:	4620      	mov	r0, r4
   15414:	b021      	add	sp, #132	; 0x84
   15416:	bd30      	pop	{r4, r5, pc}
   15418:	4668      	mov	r0, sp
   1541a:	f7ff fbb1 	bl	14b80 <CC_PalMemCopyPlat>
   1541e:	4622      	mov	r2, r4
   15420:	4669      	mov	r1, sp
   15422:	4628      	mov	r0, r5
   15424:	f000 f870 	bl	15508 <mbedtls_sha_update_internal>
   15428:	2180      	movs	r1, #128	; 0x80
   1542a:	4604      	mov	r4, r0
   1542c:	4668      	mov	r0, sp
   1542e:	f7ff fbab 	bl	14b88 <CC_PalMemSetZeroPlat>
   15432:	e7ed      	b.n	15410 <cc_mbedtls_sha256_update+0x28>
   15434:	f06f 0436 	mvn.w	r4, #54	; 0x36
   15438:	e7eb      	b.n	15412 <cc_mbedtls_sha256_update+0x2a>
   1543a:	bf00      	nop

0001543c <cc_mbedtls_sha256_finish>:
   1543c:	b570      	push	{r4, r5, r6, lr}
   1543e:	b1e8      	cbz	r0, 1547c <cc_mbedtls_sha256_finish+0x40>
   15440:	460e      	mov	r6, r1
   15442:	b1d9      	cbz	r1, 1547c <cc_mbedtls_sha256_finish+0x40>
   15444:	4604      	mov	r4, r0
   15446:	f000 f831 	bl	154ac <mbedtls_sha_finish_internal>
   1544a:	4605      	mov	r5, r0
   1544c:	b9b0      	cbnz	r0, 1547c <cc_mbedtls_sha256_finish+0x40>
   1544e:	6823      	ldr	r3, [r4, #0]
   15450:	2b01      	cmp	r3, #1
   15452:	d00b      	beq.n	1546c <cc_mbedtls_sha256_finish+0x30>
   15454:	2b02      	cmp	r3, #2
   15456:	d001      	beq.n	1545c <cc_mbedtls_sha256_finish+0x20>
   15458:	4628      	mov	r0, r5
   1545a:	bd70      	pop	{r4, r5, r6, pc}
   1545c:	221c      	movs	r2, #28
   1545e:	f104 0108 	add.w	r1, r4, #8
   15462:	4630      	mov	r0, r6
   15464:	f7ff fb8c 	bl	14b80 <CC_PalMemCopyPlat>
   15468:	4628      	mov	r0, r5
   1546a:	bd70      	pop	{r4, r5, r6, pc}
   1546c:	2220      	movs	r2, #32
   1546e:	f104 0108 	add.w	r1, r4, #8
   15472:	4630      	mov	r0, r6
   15474:	f7ff fb84 	bl	14b80 <CC_PalMemCopyPlat>
   15478:	4628      	mov	r0, r5
   1547a:	bd70      	pop	{r4, r5, r6, pc}
   1547c:	f06f 0536 	mvn.w	r5, #54	; 0x36
   15480:	e7ea      	b.n	15458 <cc_mbedtls_sha256_finish+0x1c>
   15482:	bf00      	nop

00015484 <mbedtls_sha_starts_internal>:
   15484:	b178      	cbz	r0, 154a6 <mbedtls_sha_starts_internal+0x22>
   15486:	b538      	push	{r3, r4, r5, lr}
   15488:	4604      	mov	r4, r0
   1548a:	460d      	mov	r5, r1
   1548c:	21f0      	movs	r1, #240	; 0xf0
   1548e:	f7ff fb7b 	bl	14b88 <CC_PalMemSetZeroPlat>
   15492:	2340      	movs	r3, #64	; 0x40
   15494:	6025      	str	r5, [r4, #0]
   15496:	65e3      	str	r3, [r4, #92]	; 0x5c
   15498:	4620      	mov	r0, r4
   1549a:	f000 fa63 	bl	15964 <InitHashDrv>
   1549e:	3800      	subs	r0, #0
   154a0:	bf18      	it	ne
   154a2:	2001      	movne	r0, #1
   154a4:	bd38      	pop	{r3, r4, r5, pc}
   154a6:	2001      	movs	r0, #1
   154a8:	4770      	bx	lr
   154aa:	bf00      	nop

000154ac <mbedtls_sha_finish_internal>:
   154ac:	b570      	push	{r4, r5, r6, lr}
   154ae:	6e05      	ldr	r5, [r0, #96]	; 0x60
   154b0:	b0a4      	sub	sp, #144	; 0x90
   154b2:	4604      	mov	r4, r0
   154b4:	ae04      	add	r6, sp, #16
   154b6:	b9e5      	cbnz	r5, 154f2 <mbedtls_sha_finish_internal+0x46>
   154b8:	2201      	movs	r2, #1
   154ba:	2300      	movs	r3, #0
   154bc:	6062      	str	r2, [r4, #4]
   154be:	4630      	mov	r0, r6
   154c0:	e9cd 3300 	strd	r3, r3, [sp]
   154c4:	aa02      	add	r2, sp, #8
   154c6:	4629      	mov	r1, r5
   154c8:	f000 fa18 	bl	158fc <SetDataBuffersInfo>
   154cc:	b110      	cbz	r0, 154d4 <mbedtls_sha_finish_internal+0x28>
   154ce:	2001      	movs	r0, #1
   154d0:	b024      	add	sp, #144	; 0x90
   154d2:	bd70      	pop	{r4, r5, r6, pc}
   154d4:	462a      	mov	r2, r5
   154d6:	a902      	add	r1, sp, #8
   154d8:	4620      	mov	r0, r4
   154da:	f000 fa6d 	bl	159b8 <ProcessHashDrv>
   154de:	2800      	cmp	r0, #0
   154e0:	d1f5      	bne.n	154ce <mbedtls_sha_finish_internal+0x22>
   154e2:	4620      	mov	r0, r4
   154e4:	f000 fb7e 	bl	15be4 <FinishHashDrv>
   154e8:	2800      	cmp	r0, #0
   154ea:	d1f0      	bne.n	154ce <mbedtls_sha_finish_internal+0x22>
   154ec:	6620      	str	r0, [r4, #96]	; 0x60
   154ee:	b024      	add	sp, #144	; 0x90
   154f0:	bd70      	pop	{r4, r5, r6, pc}
   154f2:	2d80      	cmp	r5, #128	; 0x80
   154f4:	462a      	mov	r2, r5
   154f6:	f100 0164 	add.w	r1, r0, #100	; 0x64
   154fa:	bf28      	it	cs
   154fc:	2280      	movcs	r2, #128	; 0x80
   154fe:	4630      	mov	r0, r6
   15500:	f7ff fb3e 	bl	14b80 <CC_PalMemCopyPlat>
   15504:	6e25      	ldr	r5, [r4, #96]	; 0x60
   15506:	e7d7      	b.n	154b8 <mbedtls_sha_finish_internal+0xc>

00015508 <mbedtls_sha_update_internal>:
   15508:	2800      	cmp	r0, #0
   1550a:	f000 80cd 	beq.w	156a8 <mbedtls_sha_update_internal+0x1a0>
   1550e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15512:	4615      	mov	r5, r2
   15514:	b0a5      	sub	sp, #148	; 0x94
   15516:	2a00      	cmp	r2, #0
   15518:	f000 80b4 	beq.w	15684 <mbedtls_sha_update_internal+0x17c>
   1551c:	460f      	mov	r7, r1
   1551e:	2900      	cmp	r1, #0
   15520:	f000 80ac 	beq.w	1567c <mbedtls_sha_update_internal+0x174>
   15524:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   15528:	4606      	mov	r6, r0
   1552a:	6e00      	ldr	r0, [r0, #96]	; 0x60
   1552c:	d37d      	bcc.n	1562a <mbedtls_sha_update_internal+0x122>
   1552e:	f64f 78ff 	movw	r8, #65535	; 0xffff
   15532:	f106 0964 	add.w	r9, r6, #100	; 0x64
   15536:	e014      	b.n	15562 <mbedtls_sha_update_internal+0x5a>
   15538:	4283      	cmp	r3, r0
   1553a:	46ba      	mov	sl, r7
   1553c:	f64f 74ff 	movw	r4, #65535	; 0xffff
   15540:	d029      	beq.n	15596 <mbedtls_sha_update_internal+0x8e>
   15542:	fbb4 fbf3 	udiv	fp, r4, r3
   15546:	fb03 fb0b 	mul.w	fp, r3, fp
   1554a:	f1bb 0f00 	cmp.w	fp, #0
   1554e:	d144      	bne.n	155da <mbedtls_sha_update_internal+0xd2>
   15550:	f5a5 457f 	sub.w	r5, r5, #65280	; 0xff00
   15554:	4447      	add	r7, r8
   15556:	3dff      	subs	r5, #255	; 0xff
   15558:	2c00      	cmp	r4, #0
   1555a:	d159      	bne.n	15610 <mbedtls_sha_update_internal+0x108>
   1555c:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   15560:	d363      	bcc.n	1562a <mbedtls_sha_update_internal+0x122>
   15562:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   15564:	1a1c      	subs	r4, r3, r0
   15566:	fbb4 f2f3 	udiv	r2, r4, r3
   1556a:	fb03 4412 	mls	r4, r3, r2, r4
   1556e:	2c00      	cmp	r4, #0
   15570:	d0e2      	beq.n	15538 <mbedtls_sha_update_internal+0x30>
   15572:	4544      	cmp	r4, r8
   15574:	bf28      	it	cs
   15576:	4644      	movcs	r4, r8
   15578:	4622      	mov	r2, r4
   1557a:	4448      	add	r0, r9
   1557c:	4639      	mov	r1, r7
   1557e:	f7ff faff 	bl	14b80 <CC_PalMemCopyPlat>
   15582:	6e30      	ldr	r0, [r6, #96]	; 0x60
   15584:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   15586:	4420      	add	r0, r4
   15588:	4283      	cmp	r3, r0
   1558a:	eb07 0a04 	add.w	sl, r7, r4
   1558e:	6630      	str	r0, [r6, #96]	; 0x60
   15590:	eba8 0404 	sub.w	r4, r8, r4
   15594:	d1d5      	bne.n	15542 <mbedtls_sha_update_internal+0x3a>
   15596:	2b80      	cmp	r3, #128	; 0x80
   15598:	bf28      	it	cs
   1559a:	2380      	movcs	r3, #128	; 0x80
   1559c:	461a      	mov	r2, r3
   1559e:	4649      	mov	r1, r9
   155a0:	a804      	add	r0, sp, #16
   155a2:	f7ff faed 	bl	14b80 <CC_PalMemCopyPlat>
   155a6:	2300      	movs	r3, #0
   155a8:	e9cd 3300 	strd	r3, r3, [sp]
   155ac:	aa02      	add	r2, sp, #8
   155ae:	6df1      	ldr	r1, [r6, #92]	; 0x5c
   155b0:	a804      	add	r0, sp, #16
   155b2:	f000 f9a3 	bl	158fc <SetDataBuffersInfo>
   155b6:	2800      	cmp	r0, #0
   155b8:	d160      	bne.n	1567c <mbedtls_sha_update_internal+0x174>
   155ba:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   155bc:	a902      	add	r1, sp, #8
   155be:	4630      	mov	r0, r6
   155c0:	f000 f9fa 	bl	159b8 <ProcessHashDrv>
   155c4:	2800      	cmp	r0, #0
   155c6:	d159      	bne.n	1567c <mbedtls_sha_update_internal+0x174>
   155c8:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   155ca:	fbb4 fbf3 	udiv	fp, r4, r3
   155ce:	fb03 fb0b 	mul.w	fp, r3, fp
   155d2:	6630      	str	r0, [r6, #96]	; 0x60
   155d4:	f1bb 0f00 	cmp.w	fp, #0
   155d8:	d0ba      	beq.n	15550 <mbedtls_sha_update_internal+0x48>
   155da:	2300      	movs	r3, #0
   155dc:	e9cd 3300 	strd	r3, r3, [sp]
   155e0:	aa02      	add	r2, sp, #8
   155e2:	4659      	mov	r1, fp
   155e4:	4650      	mov	r0, sl
   155e6:	f000 f989 	bl	158fc <SetDataBuffersInfo>
   155ea:	2800      	cmp	r0, #0
   155ec:	d146      	bne.n	1567c <mbedtls_sha_update_internal+0x174>
   155ee:	a902      	add	r1, sp, #8
   155f0:	465a      	mov	r2, fp
   155f2:	4630      	mov	r0, r6
   155f4:	f000 f9e0 	bl	159b8 <ProcessHashDrv>
   155f8:	2800      	cmp	r0, #0
   155fa:	d13f      	bne.n	1567c <mbedtls_sha_update_internal+0x174>
   155fc:	f5a5 457f 	sub.w	r5, r5, #65280	; 0xff00
   15600:	eba4 040b 	sub.w	r4, r4, fp
   15604:	6e30      	ldr	r0, [r6, #96]	; 0x60
   15606:	44da      	add	sl, fp
   15608:	4447      	add	r7, r8
   1560a:	3dff      	subs	r5, #255	; 0xff
   1560c:	2c00      	cmp	r4, #0
   1560e:	d0a5      	beq.n	1555c <mbedtls_sha_update_internal+0x54>
   15610:	3019      	adds	r0, #25
   15612:	4651      	mov	r1, sl
   15614:	eb06 0080 	add.w	r0, r6, r0, lsl #2
   15618:	4622      	mov	r2, r4
   1561a:	f7ff fab1 	bl	14b80 <CC_PalMemCopyPlat>
   1561e:	6e30      	ldr	r0, [r6, #96]	; 0x60
   15620:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   15624:	4420      	add	r0, r4
   15626:	6630      	str	r0, [r6, #96]	; 0x60
   15628:	d29b      	bcs.n	15562 <mbedtls_sha_update_internal+0x5a>
   1562a:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   1562c:	1a14      	subs	r4, r2, r0
   1562e:	fbb4 f3f2 	udiv	r3, r4, r2
   15632:	fb02 4413 	mls	r4, r2, r3, r4
   15636:	42ac      	cmp	r4, r5
   15638:	bf28      	it	cs
   1563a:	462c      	movcs	r4, r5
   1563c:	bb34      	cbnz	r4, 1568c <mbedtls_sha_update_internal+0x184>
   1563e:	4290      	cmp	r0, r2
   15640:	d034      	beq.n	156ac <mbedtls_sha_update_internal+0x1a4>
   15642:	fbb5 f4f2 	udiv	r4, r5, r2
   15646:	fb02 f404 	mul.w	r4, r2, r4
   1564a:	b96c      	cbnz	r4, 15668 <mbedtls_sha_update_internal+0x160>
   1564c:	b1d5      	cbz	r5, 15684 <mbedtls_sha_update_internal+0x17c>
   1564e:	6e33      	ldr	r3, [r6, #96]	; 0x60
   15650:	3319      	adds	r3, #25
   15652:	eb06 0083 	add.w	r0, r6, r3, lsl #2
   15656:	462a      	mov	r2, r5
   15658:	4639      	mov	r1, r7
   1565a:	f7ff fa91 	bl	14b80 <CC_PalMemCopyPlat>
   1565e:	6e33      	ldr	r3, [r6, #96]	; 0x60
   15660:	442b      	add	r3, r5
   15662:	2000      	movs	r0, #0
   15664:	6633      	str	r3, [r6, #96]	; 0x60
   15666:	e00a      	b.n	1567e <mbedtls_sha_update_internal+0x176>
   15668:	2300      	movs	r3, #0
   1566a:	e9cd 3300 	strd	r3, r3, [sp]
   1566e:	aa02      	add	r2, sp, #8
   15670:	4621      	mov	r1, r4
   15672:	4638      	mov	r0, r7
   15674:	f000 f942 	bl	158fc <SetDataBuffersInfo>
   15678:	2800      	cmp	r0, #0
   1567a:	d033      	beq.n	156e4 <mbedtls_sha_update_internal+0x1dc>
   1567c:	2001      	movs	r0, #1
   1567e:	b025      	add	sp, #148	; 0x94
   15680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15684:	4628      	mov	r0, r5
   15686:	b025      	add	sp, #148	; 0x94
   15688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1568c:	f106 0364 	add.w	r3, r6, #100	; 0x64
   15690:	4639      	mov	r1, r7
   15692:	4622      	mov	r2, r4
   15694:	4418      	add	r0, r3
   15696:	f7ff fa73 	bl	14b80 <CC_PalMemCopyPlat>
   1569a:	6e30      	ldr	r0, [r6, #96]	; 0x60
   1569c:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   1569e:	4420      	add	r0, r4
   156a0:	1b2d      	subs	r5, r5, r4
   156a2:	4427      	add	r7, r4
   156a4:	6630      	str	r0, [r6, #96]	; 0x60
   156a6:	e7ca      	b.n	1563e <mbedtls_sha_update_internal+0x136>
   156a8:	2001      	movs	r0, #1
   156aa:	4770      	bx	lr
   156ac:	2a80      	cmp	r2, #128	; 0x80
   156ae:	bf28      	it	cs
   156b0:	2280      	movcs	r2, #128	; 0x80
   156b2:	f106 0164 	add.w	r1, r6, #100	; 0x64
   156b6:	a804      	add	r0, sp, #16
   156b8:	f7ff fa62 	bl	14b80 <CC_PalMemCopyPlat>
   156bc:	2300      	movs	r3, #0
   156be:	e9cd 3300 	strd	r3, r3, [sp]
   156c2:	a804      	add	r0, sp, #16
   156c4:	6df1      	ldr	r1, [r6, #92]	; 0x5c
   156c6:	aa02      	add	r2, sp, #8
   156c8:	f000 f918 	bl	158fc <SetDataBuffersInfo>
   156cc:	2800      	cmp	r0, #0
   156ce:	d1d5      	bne.n	1567c <mbedtls_sha_update_internal+0x174>
   156d0:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   156d2:	a902      	add	r1, sp, #8
   156d4:	4630      	mov	r0, r6
   156d6:	f000 f96f 	bl	159b8 <ProcessHashDrv>
   156da:	2800      	cmp	r0, #0
   156dc:	d1ce      	bne.n	1567c <mbedtls_sha_update_internal+0x174>
   156de:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   156e0:	6630      	str	r0, [r6, #96]	; 0x60
   156e2:	e7ae      	b.n	15642 <mbedtls_sha_update_internal+0x13a>
   156e4:	a902      	add	r1, sp, #8
   156e6:	4622      	mov	r2, r4
   156e8:	4630      	mov	r0, r6
   156ea:	f000 f965 	bl	159b8 <ProcessHashDrv>
   156ee:	2800      	cmp	r0, #0
   156f0:	d1c4      	bne.n	1567c <mbedtls_sha_update_internal+0x174>
   156f2:	4427      	add	r7, r4
   156f4:	1b2d      	subs	r5, r5, r4
   156f6:	e7a9      	b.n	1564c <mbedtls_sha_update_internal+0x144>

000156f8 <cc_mbedtls_sha256>:
   156f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   156fa:	461c      	mov	r4, r3
   156fc:	4605      	mov	r5, r0
   156fe:	4811      	ldr	r0, [pc, #68]	; (15744 <cc_mbedtls_sha256+0x4c>)
   15700:	460e      	mov	r6, r1
   15702:	4617      	mov	r7, r2
   15704:	f7ff fe42 	bl	1538c <cc_mbedtls_sha256_init>
   15708:	4621      	mov	r1, r4
   1570a:	480e      	ldr	r0, [pc, #56]	; (15744 <cc_mbedtls_sha256+0x4c>)
   1570c:	f7ff fe58 	bl	153c0 <cc_mbedtls_sha256_starts>
   15710:	4604      	mov	r4, r0
   15712:	b120      	cbz	r0, 1571e <cc_mbedtls_sha256+0x26>
   15714:	480b      	ldr	r0, [pc, #44]	; (15744 <cc_mbedtls_sha256+0x4c>)
   15716:	f7ff fe4d 	bl	153b4 <cc_mbedtls_sha256_free>
   1571a:	4620      	mov	r0, r4
   1571c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1571e:	4809      	ldr	r0, [pc, #36]	; (15744 <cc_mbedtls_sha256+0x4c>)
   15720:	4632      	mov	r2, r6
   15722:	4629      	mov	r1, r5
   15724:	f7ff fe60 	bl	153e8 <cc_mbedtls_sha256_update>
   15728:	4604      	mov	r4, r0
   1572a:	2800      	cmp	r0, #0
   1572c:	d1f2      	bne.n	15714 <cc_mbedtls_sha256+0x1c>
   1572e:	4639      	mov	r1, r7
   15730:	4804      	ldr	r0, [pc, #16]	; (15744 <cc_mbedtls_sha256+0x4c>)
   15732:	f7ff fe83 	bl	1543c <cc_mbedtls_sha256_finish>
   15736:	4604      	mov	r4, r0
   15738:	4802      	ldr	r0, [pc, #8]	; (15744 <cc_mbedtls_sha256+0x4c>)
   1573a:	f7ff fe3b 	bl	153b4 <cc_mbedtls_sha256_free>
   1573e:	4620      	mov	r0, r4
   15740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15742:	bf00      	nop
   15744:	200041ac 	.word	0x200041ac

00015748 <RNG_PLAT_SetUserRngParameters>:
   15748:	b530      	push	{r4, r5, lr}
   1574a:	b083      	sub	sp, #12
   1574c:	231c      	movs	r3, #28
   1574e:	a901      	add	r1, sp, #4
   15750:	4604      	mov	r4, r0
   15752:	9301      	str	r3, [sp, #4]
   15754:	f000 f834 	bl	157c0 <CC_PalTrngParamGet>
   15758:	4605      	mov	r5, r0
   1575a:	b938      	cbnz	r0, 1576c <RNG_PLAT_SetUserRngParameters+0x24>
   1575c:	9b01      	ldr	r3, [sp, #4]
   1575e:	2b1c      	cmp	r3, #28
   15760:	d007      	beq.n	15772 <RNG_PLAT_SetUserRngParameters+0x2a>
   15762:	4d15      	ldr	r5, [pc, #84]	; (157b8 <RNG_PLAT_SetUserRngParameters+0x70>)
   15764:	211c      	movs	r1, #28
   15766:	4620      	mov	r0, r4
   15768:	f7ff fa0e 	bl	14b88 <CC_PalMemSetZeroPlat>
   1576c:	4628      	mov	r0, r5
   1576e:	b003      	add	sp, #12
   15770:	bd30      	pop	{r4, r5, pc}
   15772:	e9d4 3200 	ldrd	r3, r2, [r4]
   15776:	2101      	movs	r1, #1
   15778:	3b00      	subs	r3, #0
   1577a:	61e1      	str	r1, [r4, #28]
   1577c:	bf18      	it	ne
   1577e:	2301      	movne	r3, #1
   15780:	b10a      	cbz	r2, 15786 <RNG_PLAT_SetUserRngParameters+0x3e>
   15782:	f043 0302 	orr.w	r3, r3, #2
   15786:	68a2      	ldr	r2, [r4, #8]
   15788:	b932      	cbnz	r2, 15798 <RNG_PLAT_SetUserRngParameters+0x50>
   1578a:	68e2      	ldr	r2, [r4, #12]
   1578c:	b942      	cbnz	r2, 157a0 <RNG_PLAT_SetUserRngParameters+0x58>
   1578e:	e9c4 3208 	strd	r3, r2, [r4, #32]
   15792:	b97b      	cbnz	r3, 157b4 <RNG_PLAT_SetUserRngParameters+0x6c>
   15794:	4d09      	ldr	r5, [pc, #36]	; (157bc <RNG_PLAT_SetUserRngParameters+0x74>)
   15796:	e7e5      	b.n	15764 <RNG_PLAT_SetUserRngParameters+0x1c>
   15798:	68e2      	ldr	r2, [r4, #12]
   1579a:	f043 0304 	orr.w	r3, r3, #4
   1579e:	b13a      	cbz	r2, 157b0 <RNG_PLAT_SetUserRngParameters+0x68>
   157a0:	f043 0308 	orr.w	r3, r3, #8
   157a4:	2200      	movs	r2, #0
   157a6:	4628      	mov	r0, r5
   157a8:	e9c4 3208 	strd	r3, r2, [r4, #32]
   157ac:	b003      	add	sp, #12
   157ae:	bd30      	pop	{r4, r5, pc}
   157b0:	e9c4 3208 	strd	r3, r2, [r4, #32]
   157b4:	4615      	mov	r5, r2
   157b6:	e7d9      	b.n	1576c <RNG_PLAT_SetUserRngParameters+0x24>
   157b8:	00f00c37 	.word	0x00f00c37
   157bc:	00f00c0e 	.word	0x00f00c0e

000157c0 <CC_PalTrngParamGet>:
   157c0:	b118      	cbz	r0, 157ca <CC_PalTrngParamGet+0xa>
   157c2:	b111      	cbz	r1, 157ca <CC_PalTrngParamGet+0xa>
   157c4:	680b      	ldr	r3, [r1, #0]
   157c6:	2b1c      	cmp	r3, #28
   157c8:	d001      	beq.n	157ce <CC_PalTrngParamGet+0xe>
   157ca:	2001      	movs	r0, #1
   157cc:	4770      	bx	lr
   157ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   157d2:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   157d6:	3201      	adds	r2, #1
   157d8:	bf14      	ite	ne
   157da:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
   157de:	f241 225c 	movweq	r2, #4700	; 0x125c
   157e2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   157e6:	6002      	str	r2, [r0, #0]
   157e8:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   157ec:	3201      	adds	r2, #1
   157ee:	bf14      	ite	ne
   157f0:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
   157f4:	f641 1264 	movweq	r2, #6500	; 0x1964
   157f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   157fc:	6042      	str	r2, [r0, #4]
   157fe:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   15802:	3201      	adds	r2, #1
   15804:	bf14      	ite	ne
   15806:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
   1580a:	f640 62d8 	movweq	r2, #3800	; 0xed8
   1580e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   15812:	6082      	str	r2, [r0, #8]
   15814:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   15818:	3201      	adds	r2, #1
   1581a:	bf14      	ite	ne
   1581c:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
   15820:	f241 3288 	movweq	r2, #5000	; 0x1388
   15824:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   15828:	60c2      	str	r2, [r0, #12]
   1582a:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   1582e:	3201      	adds	r2, #1
   15830:	bf14      	ite	ne
   15832:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
   15836:	2290      	moveq	r2, #144	; 0x90
   15838:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1583c:	6102      	str	r2, [r0, #16]
   1583e:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   15842:	3201      	adds	r2, #1
   15844:	bf14      	ite	ne
   15846:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
   1584a:	2251      	moveq	r2, #81	; 0x51
   1584c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   15850:	6142      	str	r2, [r0, #20]
   15852:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   15856:	3201      	adds	r2, #1
   15858:	bf14      	ite	ne
   1585a:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
   1585e:	f240 3337 	movweq	r3, #823	; 0x337
   15862:	6183      	str	r3, [r0, #24]
   15864:	2000      	movs	r0, #0
   15866:	4770      	bx	lr

00015868 <LLF_RND_WaitRngInterrupt>:
   15868:	b508      	push	{r3, lr}
   1586a:	4601      	mov	r1, r0
   1586c:	f44f 6080 	mov.w	r0, #1024	; 0x400
   15870:	f7ff f912 	bl	14a98 <CC_HalWaitInterruptRND>
   15874:	4b03      	ldr	r3, [pc, #12]	; (15884 <LLF_RND_WaitRngInterrupt+0x1c>)
   15876:	2200      	movs	r2, #0
   15878:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
   1587c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   15880:	bd08      	pop	{r3, pc}
   15882:	bf00      	nop
   15884:	5002b000 	.word	0x5002b000

00015888 <LLF_RND_GetRoscSampleCnt>:
   15888:	3801      	subs	r0, #1
   1588a:	2807      	cmp	r0, #7
   1588c:	d805      	bhi.n	1589a <LLF_RND_GetRoscSampleCnt+0x12>
   1588e:	e8df f000 	tbb	[pc, r0]
   15892:	0e12      	.short	0x0e12
   15894:	04040a04 	.word	0x04040a04
   15898:	0604      	.short	0x0604
   1589a:	4809      	ldr	r0, [pc, #36]	; (158c0 <LLF_RND_GetRoscSampleCnt+0x38>)
   1589c:	4770      	bx	lr
   1589e:	68cb      	ldr	r3, [r1, #12]
   158a0:	624b      	str	r3, [r1, #36]	; 0x24
   158a2:	2000      	movs	r0, #0
   158a4:	4770      	bx	lr
   158a6:	688b      	ldr	r3, [r1, #8]
   158a8:	624b      	str	r3, [r1, #36]	; 0x24
   158aa:	2000      	movs	r0, #0
   158ac:	4770      	bx	lr
   158ae:	684b      	ldr	r3, [r1, #4]
   158b0:	624b      	str	r3, [r1, #36]	; 0x24
   158b2:	2000      	movs	r0, #0
   158b4:	4770      	bx	lr
   158b6:	680b      	ldr	r3, [r1, #0]
   158b8:	624b      	str	r3, [r1, #36]	; 0x24
   158ba:	2000      	movs	r0, #0
   158bc:	4770      	bx	lr
   158be:	bf00      	nop
   158c0:	00f10c31 	.word	0x00f10c31

000158c4 <LLF_RND_GetFastestRosc>:
   158c4:	680b      	ldr	r3, [r1, #0]
   158c6:	e002      	b.n	158ce <LLF_RND_GetFastestRosc+0xa>
   158c8:	2b08      	cmp	r3, #8
   158ca:	600b      	str	r3, [r1, #0]
   158cc:	d806      	bhi.n	158dc <LLF_RND_GetFastestRosc+0x18>
   158ce:	6a02      	ldr	r2, [r0, #32]
   158d0:	4213      	tst	r3, r2
   158d2:	ea4f 0343 	mov.w	r3, r3, lsl #1
   158d6:	d0f7      	beq.n	158c8 <LLF_RND_GetFastestRosc+0x4>
   158d8:	2000      	movs	r0, #0
   158da:	4770      	bx	lr
   158dc:	4800      	ldr	r0, [pc, #0]	; (158e0 <LLF_RND_GetFastestRosc+0x1c>)
   158de:	4770      	bx	lr
   158e0:	00f10c31 	.word	0x00f10c31

000158e4 <LLF_RND_TurnOffTrng>:
   158e4:	4b04      	ldr	r3, [pc, #16]	; (158f8 <LLF_RND_TurnOffTrng+0x14>)
   158e6:	2200      	movs	r2, #0
   158e8:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   158ec:	f44f 6080 	mov.w	r0, #1024	; 0x400
   158f0:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
   158f4:	f7ff b8b6 	b.w	14a64 <CC_HalClearInterruptBit>
   158f8:	5002b000 	.word	0x5002b000

000158fc <SetDataBuffersInfo>:
   158fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   158fe:	b083      	sub	sp, #12
   15900:	461d      	mov	r5, r3
   15902:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   15906:	f04f 0300 	mov.w	r3, #0
   1590a:	f88d 3007 	strb.w	r3, [sp, #7]
   1590e:	d324      	bcc.n	1595a <SetDataBuffersInfo+0x5e>
   15910:	468c      	mov	ip, r1
   15912:	4484      	add	ip, r0
   15914:	f1bc 4f80 	cmp.w	ip, #1073741824	; 0x40000000
   15918:	4604      	mov	r4, r0
   1591a:	d81e      	bhi.n	1595a <SetDataBuffersInfo+0x5e>
   1591c:	4617      	mov	r7, r2
   1591e:	f10d 0307 	add.w	r3, sp, #7
   15922:	2201      	movs	r2, #1
   15924:	f000 fe68 	bl	165f8 <CC_PalDataBufferAttrGet>
   15928:	4606      	mov	r6, r0
   1592a:	b9b0      	cbnz	r0, 1595a <SetDataBuffersInfo+0x5e>
   1592c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1592e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15932:	603c      	str	r4, [r7, #0]
   15934:	713b      	strb	r3, [r7, #4]
   15936:	b192      	cbz	r2, 1595e <SetDataBuffersInfo+0x62>
   15938:	b14d      	cbz	r5, 1594e <SetDataBuffersInfo+0x52>
   1593a:	4602      	mov	r2, r0
   1593c:	9908      	ldr	r1, [sp, #32]
   1593e:	f10d 0307 	add.w	r3, sp, #7
   15942:	4628      	mov	r0, r5
   15944:	f000 fe58 	bl	165f8 <CC_PalDataBufferAttrGet>
   15948:	b938      	cbnz	r0, 1595a <SetDataBuffersInfo+0x5e>
   1594a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1594e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   15950:	4630      	mov	r0, r6
   15952:	6015      	str	r5, [r2, #0]
   15954:	7113      	strb	r3, [r2, #4]
   15956:	b003      	add	sp, #12
   15958:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1595a:	f44f 0675 	mov.w	r6, #16056320	; 0xf50000
   1595e:	4630      	mov	r0, r6
   15960:	b003      	add	sp, #12
   15962:	bdf0      	pop	{r4, r5, r6, r7, pc}

00015964 <InitHashDrv>:
   15964:	b1e8      	cbz	r0, 159a2 <InitHashDrv+0x3e>
   15966:	b510      	push	{r4, lr}
   15968:	6804      	ldr	r4, [r0, #0]
   1596a:	2c01      	cmp	r4, #1
   1596c:	d004      	beq.n	15978 <InitHashDrv+0x14>
   1596e:	2c02      	cmp	r4, #2
   15970:	d010      	beq.n	15994 <InitHashDrv+0x30>
   15972:	b144      	cbz	r4, 15986 <InitHashDrv+0x22>
   15974:	480c      	ldr	r0, [pc, #48]	; (159a8 <InitHashDrv+0x44>)
   15976:	bd10      	pop	{r4, pc}
   15978:	490c      	ldr	r1, [pc, #48]	; (159ac <InitHashDrv+0x48>)
   1597a:	2220      	movs	r2, #32
   1597c:	3008      	adds	r0, #8
   1597e:	f7ff f8ff 	bl	14b80 <CC_PalMemCopyPlat>
   15982:	2000      	movs	r0, #0
   15984:	bd10      	pop	{r4, pc}
   15986:	490a      	ldr	r1, [pc, #40]	; (159b0 <InitHashDrv+0x4c>)
   15988:	2214      	movs	r2, #20
   1598a:	3008      	adds	r0, #8
   1598c:	f7ff f8f8 	bl	14b80 <CC_PalMemCopyPlat>
   15990:	4620      	mov	r0, r4
   15992:	bd10      	pop	{r4, pc}
   15994:	4907      	ldr	r1, [pc, #28]	; (159b4 <InitHashDrv+0x50>)
   15996:	2220      	movs	r2, #32
   15998:	3008      	adds	r0, #8
   1599a:	f7ff f8f1 	bl	14b80 <CC_PalMemCopyPlat>
   1599e:	2000      	movs	r0, #0
   159a0:	bd10      	pop	{r4, pc}
   159a2:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   159a6:	4770      	bx	lr
   159a8:	00f30001 	.word	0x00f30001
   159ac:	00022738 	.word	0x00022738
   159b0:	00022704 	.word	0x00022704
   159b4:	00022718 	.word	0x00022718

000159b8 <ProcessHashDrv>:
   159b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   159bc:	2900      	cmp	r1, #0
   159be:	f000 80f9 	beq.w	15bb4 <ProcessHashDrv+0x1fc>
   159c2:	4604      	mov	r4, r0
   159c4:	2800      	cmp	r0, #0
   159c6:	f000 80f9 	beq.w	15bbc <ProcessHashDrv+0x204>
   159ca:	6803      	ldr	r3, [r0, #0]
   159cc:	4690      	mov	r8, r2
   159ce:	460f      	mov	r7, r1
   159d0:	2b00      	cmp	r3, #0
   159d2:	f000 80c3 	beq.w	15b5c <ProcessHashDrv+0x1a4>
   159d6:	3b01      	subs	r3, #1
   159d8:	2b01      	cmp	r3, #1
   159da:	f200 80d7 	bhi.w	15b8c <ProcessHashDrv+0x1d4>
   159de:	4879      	ldr	r0, [pc, #484]	; (15bc4 <ProcessHashDrv+0x20c>)
   159e0:	f04f 31ff 	mov.w	r1, #4294967295
   159e4:	f04f 0902 	mov.w	r9, #2
   159e8:	f7ff f8e6 	bl	14bb8 <CC_PalMutexLock>
   159ec:	2800      	cmp	r0, #0
   159ee:	f040 80bf 	bne.w	15b70 <ProcessHashDrv+0x1b8>
   159f2:	2000      	movs	r0, #0
   159f4:	f7ff f910 	bl	14c18 <CC_PalPowerSaveModeSelect>
   159f8:	4606      	mov	r6, r0
   159fa:	2800      	cmp	r0, #0
   159fc:	f040 80c2 	bne.w	15b84 <ProcessHashDrv+0x1cc>
   15a00:	4a71      	ldr	r2, [pc, #452]	; (15bc8 <ProcessHashDrv+0x210>)
   15a02:	f8d2 391c 	ldr.w	r3, [r2, #2332]	; 0x91c
   15a06:	2b00      	cmp	r3, #0
   15a08:	d1fb      	bne.n	15a02 <ProcessHashDrv+0x4a>
   15a0a:	4d6f      	ldr	r5, [pc, #444]	; (15bc8 <ProcessHashDrv+0x210>)
   15a0c:	f8d5 3c20 	ldr.w	r3, [r5, #3104]	; 0xc20
   15a10:	2b00      	cmp	r3, #0
   15a12:	d1fb      	bne.n	15a0c <ProcessHashDrv+0x54>
   15a14:	f04f 30ff 	mov.w	r0, #4294967295
   15a18:	f7ff f824 	bl	14a64 <CC_HalClearInterruptBit>
   15a1c:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   15a20:	f020 0040 	bic.w	r0, r0, #64	; 0x40
   15a24:	f7ff f82c 	bl	14a80 <CC_HalMaskInterrupt>
   15a28:	2301      	movs	r3, #1
   15a2a:	2207      	movs	r2, #7
   15a2c:	f8c5 3818 	str.w	r3, [r5, #2072]	; 0x818
   15a30:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
   15a34:	f8c5 37c4 	str.w	r3, [r5, #1988]	; 0x7c4
   15a38:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   15a3a:	f8c5 37cc 	str.w	r3, [r5, #1996]	; 0x7cc
   15a3e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   15a40:	f8c5 37d0 	str.w	r3, [r5, #2000]	; 0x7d0
   15a44:	f8c5 97c0 	str.w	r9, [r5, #1984]	; 0x7c0
   15a48:	6823      	ldr	r3, [r4, #0]
   15a4a:	b15b      	cbz	r3, 15a64 <ProcessHashDrv+0xac>
   15a4c:	3b01      	subs	r3, #1
   15a4e:	2b01      	cmp	r3, #1
   15a50:	d818      	bhi.n	15a84 <ProcessHashDrv+0xcc>
   15a52:	6a63      	ldr	r3, [r4, #36]	; 0x24
   15a54:	f8c5 365c 	str.w	r3, [r5, #1628]	; 0x65c
   15a58:	6a23      	ldr	r3, [r4, #32]
   15a5a:	f8c5 3658 	str.w	r3, [r5, #1624]	; 0x658
   15a5e:	69e3      	ldr	r3, [r4, #28]
   15a60:	f8c5 3654 	str.w	r3, [r5, #1620]	; 0x654
   15a64:	4b58      	ldr	r3, [pc, #352]	; (15bc8 <ProcessHashDrv+0x210>)
   15a66:	69a2      	ldr	r2, [r4, #24]
   15a68:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
   15a6c:	6962      	ldr	r2, [r4, #20]
   15a6e:	f8c3 264c 	str.w	r2, [r3, #1612]	; 0x64c
   15a72:	6922      	ldr	r2, [r4, #16]
   15a74:	f8c3 2648 	str.w	r2, [r3, #1608]	; 0x648
   15a78:	68e2      	ldr	r2, [r4, #12]
   15a7a:	f8c3 2644 	str.w	r2, [r3, #1604]	; 0x644
   15a7e:	68a2      	ldr	r2, [r4, #8]
   15a80:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
   15a84:	4a50      	ldr	r2, [pc, #320]	; (15bc8 <ProcessHashDrv+0x210>)
   15a86:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   15a8a:	2b00      	cmp	r3, #0
   15a8c:	d1fb      	bne.n	15a86 <ProcessHashDrv+0xce>
   15a8e:	f1b8 0f00 	cmp.w	r8, #0
   15a92:	d05f      	beq.n	15b54 <ProcessHashDrv+0x19c>
   15a94:	6863      	ldr	r3, [r4, #4]
   15a96:	2b01      	cmp	r3, #1
   15a98:	bf08      	it	eq
   15a9a:	f8c2 3684 	streq.w	r3, [r2, #1668]	; 0x684
   15a9e:	4b4a      	ldr	r3, [pc, #296]	; (15bc8 <ProcessHashDrv+0x210>)
   15aa0:	683a      	ldr	r2, [r7, #0]
   15aa2:	f8c3 2c28 	str.w	r2, [r3, #3112]	; 0xc28
   15aa6:	2040      	movs	r0, #64	; 0x40
   15aa8:	f8c3 8c2c 	str.w	r8, [r3, #3116]	; 0xc2c
   15aac:	f7fe ffee 	bl	14a8c <CC_HalWaitInterrupt>
   15ab0:	4606      	mov	r6, r0
   15ab2:	4a45      	ldr	r2, [pc, #276]	; (15bc8 <ProcessHashDrv+0x210>)
   15ab4:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   15ab8:	2b00      	cmp	r3, #0
   15aba:	d1fb      	bne.n	15ab4 <ProcessHashDrv+0xfc>
   15abc:	4a42      	ldr	r2, [pc, #264]	; (15bc8 <ProcessHashDrv+0x210>)
   15abe:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   15ac2:	2b00      	cmp	r3, #0
   15ac4:	d1fb      	bne.n	15abe <ProcessHashDrv+0x106>
   15ac6:	6823      	ldr	r3, [r4, #0]
   15ac8:	b15b      	cbz	r3, 15ae2 <ProcessHashDrv+0x12a>
   15aca:	3b01      	subs	r3, #1
   15acc:	2b01      	cmp	r3, #1
   15ace:	d818      	bhi.n	15b02 <ProcessHashDrv+0x14a>
   15ad0:	f8d2 365c 	ldr.w	r3, [r2, #1628]	; 0x65c
   15ad4:	6263      	str	r3, [r4, #36]	; 0x24
   15ad6:	f8d2 3658 	ldr.w	r3, [r2, #1624]	; 0x658
   15ada:	6223      	str	r3, [r4, #32]
   15adc:	f8d2 3654 	ldr.w	r3, [r2, #1620]	; 0x654
   15ae0:	61e3      	str	r3, [r4, #28]
   15ae2:	4b39      	ldr	r3, [pc, #228]	; (15bc8 <ProcessHashDrv+0x210>)
   15ae4:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   15ae8:	61a2      	str	r2, [r4, #24]
   15aea:	f8d3 264c 	ldr.w	r2, [r3, #1612]	; 0x64c
   15aee:	6162      	str	r2, [r4, #20]
   15af0:	f8d3 2648 	ldr.w	r2, [r3, #1608]	; 0x648
   15af4:	6122      	str	r2, [r4, #16]
   15af6:	f8d3 2644 	ldr.w	r2, [r3, #1604]	; 0x644
   15afa:	60e2      	str	r2, [r4, #12]
   15afc:	f8d3 3640 	ldr.w	r3, [r3, #1600]	; 0x640
   15b00:	60a3      	str	r3, [r4, #8]
   15b02:	4a31      	ldr	r2, [pc, #196]	; (15bc8 <ProcessHashDrv+0x210>)
   15b04:	f8d2 17cc 	ldr.w	r1, [r2, #1996]	; 0x7cc
   15b08:	64a1      	str	r1, [r4, #72]	; 0x48
   15b0a:	f8d2 17d0 	ldr.w	r1, [r2, #2000]	; 0x7d0
   15b0e:	64e1      	str	r1, [r4, #76]	; 0x4c
   15b10:	2300      	movs	r3, #0
   15b12:	2101      	movs	r1, #1
   15b14:	f8c2 17c4 	str.w	r1, [r2, #1988]	; 0x7c4
   15b18:	f8c2 3684 	str.w	r3, [r2, #1668]	; 0x684
   15b1c:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   15b20:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   15b24:	2b00      	cmp	r3, #0
   15b26:	d1fb      	bne.n	15b20 <ProcessHashDrv+0x168>
   15b28:	f8c2 3818 	str.w	r3, [r2, #2072]	; 0x818
   15b2c:	2e00      	cmp	r6, #0
   15b2e:	d13b      	bne.n	15ba8 <ProcessHashDrv+0x1f0>
   15b30:	4b25      	ldr	r3, [pc, #148]	; (15bc8 <ProcessHashDrv+0x210>)
   15b32:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   15b36:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   15b3a:	f7fe ffa1 	bl	14a80 <CC_HalMaskInterrupt>
   15b3e:	2001      	movs	r0, #1
   15b40:	f7ff f86a 	bl	14c18 <CC_PalPowerSaveModeSelect>
   15b44:	bb60      	cbnz	r0, 15ba0 <ProcessHashDrv+0x1e8>
   15b46:	481f      	ldr	r0, [pc, #124]	; (15bc4 <ProcessHashDrv+0x20c>)
   15b48:	f7ff f83e 	bl	14bc8 <CC_PalMutexUnlock>
   15b4c:	bb10      	cbnz	r0, 15b94 <ProcessHashDrv+0x1dc>
   15b4e:	4630      	mov	r0, r6
   15b50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   15b54:	2304      	movs	r3, #4
   15b56:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   15b5a:	e7aa      	b.n	15ab2 <ProcessHashDrv+0xfa>
   15b5c:	4819      	ldr	r0, [pc, #100]	; (15bc4 <ProcessHashDrv+0x20c>)
   15b5e:	f04f 31ff 	mov.w	r1, #4294967295
   15b62:	f04f 0901 	mov.w	r9, #1
   15b66:	f7ff f827 	bl	14bb8 <CC_PalMutexLock>
   15b6a:	2800      	cmp	r0, #0
   15b6c:	f43f af41 	beq.w	159f2 <ProcessHashDrv+0x3a>
   15b70:	4816      	ldr	r0, [pc, #88]	; (15bcc <ProcessHashDrv+0x214>)
   15b72:	f7fe f8a5 	bl	13cc0 <CC_PalAbort>
   15b76:	2000      	movs	r0, #0
   15b78:	f7ff f84e 	bl	14c18 <CC_PalPowerSaveModeSelect>
   15b7c:	4606      	mov	r6, r0
   15b7e:	2800      	cmp	r0, #0
   15b80:	f43f af3e 	beq.w	15a00 <ProcessHashDrv+0x48>
   15b84:	4812      	ldr	r0, [pc, #72]	; (15bd0 <ProcessHashDrv+0x218>)
   15b86:	f7fe f89b 	bl	13cc0 <CC_PalAbort>
   15b8a:	e739      	b.n	15a00 <ProcessHashDrv+0x48>
   15b8c:	4e11      	ldr	r6, [pc, #68]	; (15bd4 <ProcessHashDrv+0x21c>)
   15b8e:	4630      	mov	r0, r6
   15b90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   15b94:	4810      	ldr	r0, [pc, #64]	; (15bd8 <ProcessHashDrv+0x220>)
   15b96:	f7fe f893 	bl	13cc0 <CC_PalAbort>
   15b9a:	4630      	mov	r0, r6
   15b9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   15ba0:	480e      	ldr	r0, [pc, #56]	; (15bdc <ProcessHashDrv+0x224>)
   15ba2:	f7fe f88d 	bl	13cc0 <CC_PalAbort>
   15ba6:	e7ce      	b.n	15b46 <ProcessHashDrv+0x18e>
   15ba8:	2110      	movs	r1, #16
   15baa:	f104 0008 	add.w	r0, r4, #8
   15bae:	f7fe ffeb 	bl	14b88 <CC_PalMemSetZeroPlat>
   15bb2:	e7bd      	b.n	15b30 <ProcessHashDrv+0x178>
   15bb4:	4e0a      	ldr	r6, [pc, #40]	; (15be0 <ProcessHashDrv+0x228>)
   15bb6:	4630      	mov	r0, r6
   15bb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   15bbc:	f44f 0673 	mov.w	r6, #15925248	; 0xf30000
   15bc0:	e7c5      	b.n	15b4e <ProcessHashDrv+0x196>
   15bc2:	bf00      	nop
   15bc4:	20000364 	.word	0x20000364
   15bc8:	5002b000 	.word	0x5002b000
   15bcc:	00022638 	.word	0x00022638
   15bd0:	00022650 	.word	0x00022650
   15bd4:	00f30001 	.word	0x00f30001
   15bd8:	00022690 	.word	0x00022690
   15bdc:	00022670 	.word	0x00022670
   15be0:	00f30003 	.word	0x00f30003

00015be4 <FinishHashDrv>:
   15be4:	b398      	cbz	r0, 15c4e <FinishHashDrv+0x6a>
   15be6:	b470      	push	{r4, r5, r6}
   15be8:	e9d0 4102 	ldrd	r4, r1, [r0, #8]
   15bec:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
   15bf0:	ba26      	rev	r6, r4
   15bf2:	ba0d      	rev	r5, r1
   15bf4:	ba14      	rev	r4, r2
   15bf6:	ba19      	rev	r1, r3
   15bf8:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
   15bfc:	ba12      	rev	r2, r2
   15bfe:	e9c0 4104 	strd	r4, r1, [r0, #16]
   15c02:	6182      	str	r2, [r0, #24]
   15c04:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
   15c08:	e9c0 6502 	strd	r6, r5, [r0, #8]
   15c0c:	ba1b      	rev	r3, r3
   15c0e:	ba25      	rev	r5, r4
   15c10:	e9c0 3507 	strd	r3, r5, [r0, #28]
   15c14:	ba14      	rev	r4, r2
   15c16:	e9d0 230b 	ldrd	r2, r3, [r0, #44]	; 0x2c
   15c1a:	6a81      	ldr	r1, [r0, #40]	; 0x28
   15c1c:	ba12      	rev	r2, r2
   15c1e:	ba09      	rev	r1, r1
   15c20:	e9c0 4109 	strd	r4, r1, [r0, #36]	; 0x24
   15c24:	62c2      	str	r2, [r0, #44]	; 0x2c
   15c26:	e9d0 420d 	ldrd	r4, r2, [r0, #52]	; 0x34
   15c2a:	ba1b      	rev	r3, r3
   15c2c:	ba25      	rev	r5, r4
   15c2e:	e9c0 350c 	strd	r3, r5, [r0, #48]	; 0x30
   15c32:	ba14      	rev	r4, r2
   15c34:	e9d0 2310 	ldrd	r2, r3, [r0, #64]	; 0x40
   15c38:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
   15c3a:	ba12      	rev	r2, r2
   15c3c:	ba09      	rev	r1, r1
   15c3e:	ba1b      	rev	r3, r3
   15c40:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
   15c44:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
   15c48:	2000      	movs	r0, #0
   15c4a:	bc70      	pop	{r4, r5, r6}
   15c4c:	4770      	bx	lr
   15c4e:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   15c52:	4770      	bx	lr

00015c54 <LoadAesKey>:
   15c54:	2800      	cmp	r0, #0
   15c56:	d046      	beq.n	15ce6 <LoadAesKey+0x92>
   15c58:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   15c5c:	2b00      	cmp	r3, #0
   15c5e:	d033      	beq.n	15cc8 <LoadAesKey+0x74>
   15c60:	2b03      	cmp	r3, #3
   15c62:	b510      	push	{r4, lr}
   15c64:	d013      	beq.n	15c8e <LoadAesKey+0x3a>
   15c66:	4821      	ldr	r0, [pc, #132]	; (15cec <LoadAesKey+0x98>)
   15c68:	4c21      	ldr	r4, [pc, #132]	; (15cf0 <LoadAesKey+0x9c>)
   15c6a:	6822      	ldr	r2, [r4, #0]
   15c6c:	4b21      	ldr	r3, [pc, #132]	; (15cf4 <LoadAesKey+0xa0>)
   15c6e:	6812      	ldr	r2, [r2, #0]
   15c70:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   15c74:	6822      	ldr	r2, [r4, #0]
   15c76:	6852      	ldr	r2, [r2, #4]
   15c78:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   15c7c:	6822      	ldr	r2, [r4, #0]
   15c7e:	6892      	ldr	r2, [r2, #8]
   15c80:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   15c84:	6822      	ldr	r2, [r4, #0]
   15c86:	68d2      	ldr	r2, [r2, #12]
   15c88:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   15c8c:	bd10      	pop	{r4, pc}
   15c8e:	6b01      	ldr	r1, [r0, #48]	; 0x30
   15c90:	6c00      	ldr	r0, [r0, #64]	; 0x40
   15c92:	4c17      	ldr	r4, [pc, #92]	; (15cf0 <LoadAesKey+0x9c>)
   15c94:	f000 fbac 	bl	163f0 <kmu_validate_kdr_slot_and_size>
   15c98:	2800      	cmp	r0, #0
   15c9a:	d1e6      	bne.n	15c6a <LoadAesKey+0x16>
   15c9c:	6822      	ldr	r2, [r4, #0]
   15c9e:	4b15      	ldr	r3, [pc, #84]	; (15cf4 <LoadAesKey+0xa0>)
   15ca0:	6812      	ldr	r2, [r2, #0]
   15ca2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   15ca6:	6822      	ldr	r2, [r4, #0]
   15ca8:	6852      	ldr	r2, [r2, #4]
   15caa:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   15cae:	6822      	ldr	r2, [r4, #0]
   15cb0:	6892      	ldr	r2, [r2, #8]
   15cb2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   15cb6:	6822      	ldr	r2, [r4, #0]
   15cb8:	68d2      	ldr	r2, [r2, #12]
   15cba:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   15cbe:	f000 fba3 	bl	16408 <kmu_use_kdr_key>
   15cc2:	2800      	cmp	r0, #0
   15cc4:	d1d1      	bne.n	15c6a <LoadAesKey+0x16>
   15cc6:	bd10      	pop	{r4, pc}
   15cc8:	4a0a      	ldr	r2, [pc, #40]	; (15cf4 <LoadAesKey+0xa0>)
   15cca:	6901      	ldr	r1, [r0, #16]
   15ccc:	f8c2 1400 	str.w	r1, [r2, #1024]	; 0x400
   15cd0:	6941      	ldr	r1, [r0, #20]
   15cd2:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
   15cd6:	6981      	ldr	r1, [r0, #24]
   15cd8:	f8c2 1408 	str.w	r1, [r2, #1032]	; 0x408
   15cdc:	69c1      	ldr	r1, [r0, #28]
   15cde:	f8c2 140c 	str.w	r1, [r2, #1036]	; 0x40c
   15ce2:	4618      	mov	r0, r3
   15ce4:	4770      	bx	lr
   15ce6:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
   15cea:	4770      	bx	lr
   15cec:	00f10009 	.word	0x00f10009
   15cf0:	20000354 	.word	0x20000354
   15cf4:	5002b000 	.word	0x5002b000

00015cf8 <InitAes.part.0>:
   15cf8:	4a37      	ldr	r2, [pc, #220]	; (15dd8 <InitAes.part.0+0xe0>)
   15cfa:	b538      	push	{r3, r4, r5, lr}
   15cfc:	4604      	mov	r4, r0
   15cfe:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   15d02:	2b00      	cmp	r3, #0
   15d04:	d1fb      	bne.n	15cfe <InitAes.part.0+0x6>
   15d06:	4a34      	ldr	r2, [pc, #208]	; (15dd8 <InitAes.part.0+0xe0>)
   15d08:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   15d0c:	2b00      	cmp	r3, #0
   15d0e:	d1fb      	bne.n	15d08 <InitAes.part.0+0x10>
   15d10:	4a31      	ldr	r2, [pc, #196]	; (15dd8 <InitAes.part.0+0xe0>)
   15d12:	f8d2 3d20 	ldr.w	r3, [r2, #3360]	; 0xd20
   15d16:	2b00      	cmp	r3, #0
   15d18:	d1fb      	bne.n	15d12 <InitAes.part.0+0x1a>
   15d1a:	4a2f      	ldr	r2, [pc, #188]	; (15dd8 <InitAes.part.0+0xe0>)
   15d1c:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   15d20:	2b00      	cmp	r3, #0
   15d22:	d1fb      	bne.n	15d1c <InitAes.part.0+0x24>
   15d24:	4a2c      	ldr	r2, [pc, #176]	; (15dd8 <InitAes.part.0+0xe0>)
   15d26:	f8d2 3d38 	ldr.w	r3, [r2, #3384]	; 0xd38
   15d2a:	2b00      	cmp	r3, #0
   15d2c:	d1fb      	bne.n	15d26 <InitAes.part.0+0x2e>
   15d2e:	4d2a      	ldr	r5, [pc, #168]	; (15dd8 <InitAes.part.0+0xe0>)
   15d30:	f8d5 3c38 	ldr.w	r3, [r5, #3128]	; 0xc38
   15d34:	2b00      	cmp	r3, #0
   15d36:	d1fb      	bne.n	15d30 <InitAes.part.0+0x38>
   15d38:	f04f 30ff 	mov.w	r0, #4294967295
   15d3c:	f7fe fe92 	bl	14a64 <CC_HalClearInterruptBit>
   15d40:	6b63      	ldr	r3, [r4, #52]	; 0x34
   15d42:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   15d46:	f023 0304 	bic.w	r3, r3, #4
   15d4a:	2b03      	cmp	r3, #3
   15d4c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   15d4e:	d039      	beq.n	15dc4 <InitAes.part.0+0xcc>
   15d50:	2b01      	cmp	r3, #1
   15d52:	bf0c      	ite	eq
   15d54:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
   15d58:	f020 0020 	bicne.w	r0, r0, #32
   15d5c:	f7fe fe90 	bl	14a80 <CC_HalMaskInterrupt>
   15d60:	4a1d      	ldr	r2, [pc, #116]	; (15dd8 <InitAes.part.0+0xe0>)
   15d62:	2301      	movs	r3, #1
   15d64:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
   15d68:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   15d6c:	2b00      	cmp	r3, #0
   15d6e:	d1fb      	bne.n	15d68 <InitAes.part.0+0x70>
   15d70:	4a19      	ldr	r2, [pc, #100]	; (15dd8 <InitAes.part.0+0xe0>)
   15d72:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   15d76:	2b00      	cmp	r3, #0
   15d78:	d1fb      	bne.n	15d72 <InitAes.part.0+0x7a>
   15d7a:	4917      	ldr	r1, [pc, #92]	; (15dd8 <InitAes.part.0+0xe0>)
   15d7c:	f8c2 34bc 	str.w	r3, [r2, #1212]	; 0x4bc
   15d80:	f8d1 3910 	ldr.w	r3, [r1, #2320]	; 0x910
   15d84:	2b00      	cmp	r3, #0
   15d86:	d1fb      	bne.n	15d80 <InitAes.part.0+0x88>
   15d88:	4a13      	ldr	r2, [pc, #76]	; (15dd8 <InitAes.part.0+0xe0>)
   15d8a:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   15d8e:	2b00      	cmp	r3, #0
   15d90:	d1fb      	bne.n	15d8a <InitAes.part.0+0x92>
   15d92:	6b62      	ldr	r2, [r4, #52]	; 0x34
   15d94:	f022 0104 	bic.w	r1, r2, #4
   15d98:	2903      	cmp	r1, #3
   15d9a:	bf18      	it	ne
   15d9c:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
   15d9e:	490e      	ldr	r1, [pc, #56]	; (15dd8 <InitAes.part.0+0xe0>)
   15da0:	ea4f 0282 	mov.w	r2, r2, lsl #2
   15da4:	bf18      	it	ne
   15da6:	f003 0301 	andne.w	r3, r3, #1
   15daa:	f002 021c 	and.w	r2, r2, #28
   15dae:	4313      	orrs	r3, r2
   15db0:	f8c1 34c0 	str.w	r3, [r1, #1216]	; 0x4c0
   15db4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   15db6:	2b07      	cmp	r3, #7
   15db8:	bf04      	itt	eq
   15dba:	2301      	moveq	r3, #1
   15dbc:	f8c1 347c 	streq.w	r3, [r1, #1148]	; 0x47c
   15dc0:	2000      	movs	r0, #0
   15dc2:	bd38      	pop	{r3, r4, r5, pc}
   15dc4:	2b01      	cmp	r3, #1
   15dc6:	bf0c      	ite	eq
   15dc8:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
   15dcc:	f020 0010 	bicne.w	r0, r0, #16
   15dd0:	f7fe fe56 	bl	14a80 <CC_HalMaskInterrupt>
   15dd4:	e7c4      	b.n	15d60 <InitAes.part.0+0x68>
   15dd6:	bf00      	nop
   15dd8:	5002b000 	.word	0x5002b000

00015ddc <write_invalid_key>:
   15ddc:	4a09      	ldr	r2, [pc, #36]	; (15e04 <write_invalid_key+0x28>)
   15dde:	4b0a      	ldr	r3, [pc, #40]	; (15e08 <write_invalid_key+0x2c>)
   15de0:	6811      	ldr	r1, [r2, #0]
   15de2:	6809      	ldr	r1, [r1, #0]
   15de4:	f8c3 1400 	str.w	r1, [r3, #1024]	; 0x400
   15de8:	6811      	ldr	r1, [r2, #0]
   15dea:	6849      	ldr	r1, [r1, #4]
   15dec:	f8c3 1404 	str.w	r1, [r3, #1028]	; 0x404
   15df0:	6811      	ldr	r1, [r2, #0]
   15df2:	6889      	ldr	r1, [r1, #8]
   15df4:	f8c3 1408 	str.w	r1, [r3, #1032]	; 0x408
   15df8:	6812      	ldr	r2, [r2, #0]
   15dfa:	68d2      	ldr	r2, [r2, #12]
   15dfc:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   15e00:	4770      	bx	lr
   15e02:	bf00      	nop
   15e04:	20000354 	.word	0x20000354
   15e08:	5002b000 	.word	0x5002b000

00015e0c <ProcessAesDrv>:
   15e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e10:	b085      	sub	sp, #20
   15e12:	2900      	cmp	r1, #0
   15e14:	f000 80a3 	beq.w	15f5e <ProcessAesDrv+0x152>
   15e18:	4690      	mov	r8, r2
   15e1a:	2a00      	cmp	r2, #0
   15e1c:	f000 809f 	beq.w	15f5e <ProcessAesDrv+0x152>
   15e20:	4605      	mov	r5, r0
   15e22:	2800      	cmp	r0, #0
   15e24:	f000 813c 	beq.w	160a0 <ProcessAesDrv+0x294>
   15e28:	4699      	mov	r9, r3
   15e2a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   15e2c:	460e      	mov	r6, r1
   15e2e:	2b00      	cmp	r3, #0
   15e30:	d151      	bne.n	15ed6 <ProcessAesDrv+0xca>
   15e32:	f5b9 5f80 	cmp.w	r9, #4096	; 0x1000
   15e36:	d253      	bcs.n	15ee0 <ProcessAesDrv+0xd4>
   15e38:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   15e3c:	2b04      	cmp	r3, #4
   15e3e:	f000 8112 	beq.w	16066 <ProcessAesDrv+0x25a>
   15e42:	2700      	movs	r7, #0
   15e44:	48a6      	ldr	r0, [pc, #664]	; (160e0 <ProcessAesDrv+0x2d4>)
   15e46:	f04f 31ff 	mov.w	r1, #4294967295
   15e4a:	f7fe feb5 	bl	14bb8 <CC_PalMutexLock>
   15e4e:	2800      	cmp	r0, #0
   15e50:	f040 80e8 	bne.w	16024 <ProcessAesDrv+0x218>
   15e54:	2000      	movs	r0, #0
   15e56:	f7fe fedf 	bl	14c18 <CC_PalPowerSaveModeSelect>
   15e5a:	2800      	cmp	r0, #0
   15e5c:	f040 80eb 	bne.w	16036 <ProcessAesDrv+0x22a>
   15e60:	48a0      	ldr	r0, [pc, #640]	; (160e4 <ProcessAesDrv+0x2d8>)
   15e62:	2301      	movs	r3, #1
   15e64:	f8c0 3810 	str.w	r3, [r0, #2064]	; 0x810
   15e68:	f8d0 4910 	ldr.w	r4, [r0, #2320]	; 0x910
   15e6c:	2c00      	cmp	r4, #0
   15e6e:	d1fb      	bne.n	15e68 <ProcessAesDrv+0x5c>
   15e70:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   15e72:	2b03      	cmp	r3, #3
   15e74:	dc39      	bgt.n	15eea <ProcessAesDrv+0xde>
   15e76:	2b00      	cmp	r3, #0
   15e78:	da3a      	bge.n	15ef0 <ProcessAesDrv+0xe4>
   15e7a:	4c9b      	ldr	r4, [pc, #620]	; (160e8 <ProcessAesDrv+0x2dc>)
   15e7c:	4a99      	ldr	r2, [pc, #612]	; (160e4 <ProcessAesDrv+0x2d8>)
   15e7e:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   15e82:	2b00      	cmp	r3, #0
   15e84:	d1fb      	bne.n	15e7e <ProcessAesDrv+0x72>
   15e86:	2f00      	cmp	r7, #0
   15e88:	f040 80e4 	bne.w	16054 <ProcessAesDrv+0x248>
   15e8c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   15e8e:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   15e90:	f023 0304 	bic.w	r3, r3, #4
   15e94:	2b03      	cmp	r3, #3
   15e96:	4b93      	ldr	r3, [pc, #588]	; (160e4 <ProcessAesDrv+0x2d8>)
   15e98:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   15e9c:	d056      	beq.n	15f4c <ProcessAesDrv+0x140>
   15e9e:	2a01      	cmp	r2, #1
   15ea0:	bf0c      	ite	eq
   15ea2:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
   15ea6:	f040 0020 	orrne.w	r0, r0, #32
   15eaa:	f7fe fde9 	bl	14a80 <CC_HalMaskInterrupt>
   15eae:	4b8d      	ldr	r3, [pc, #564]	; (160e4 <ProcessAesDrv+0x2d8>)
   15eb0:	2200      	movs	r2, #0
   15eb2:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
   15eb6:	2001      	movs	r0, #1
   15eb8:	f7fe feae 	bl	14c18 <CC_PalPowerSaveModeSelect>
   15ebc:	2800      	cmp	r0, #0
   15ebe:	f040 80c5 	bne.w	1604c <ProcessAesDrv+0x240>
   15ec2:	4887      	ldr	r0, [pc, #540]	; (160e0 <ProcessAesDrv+0x2d4>)
   15ec4:	f7fe fe80 	bl	14bc8 <CC_PalMutexUnlock>
   15ec8:	2800      	cmp	r0, #0
   15eca:	f040 80b8 	bne.w	1603e <ProcessAesDrv+0x232>
   15ece:	4620      	mov	r0, r4
   15ed0:	b005      	add	sp, #20
   15ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ed6:	2b01      	cmp	r3, #1
   15ed8:	d1ae      	bne.n	15e38 <ProcessAesDrv+0x2c>
   15eda:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
   15ede:	d3ab      	bcc.n	15e38 <ProcessAesDrv+0x2c>
   15ee0:	4c82      	ldr	r4, [pc, #520]	; (160ec <ProcessAesDrv+0x2e0>)
   15ee2:	4620      	mov	r0, r4
   15ee4:	b005      	add	sp, #20
   15ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15eea:	3b06      	subs	r3, #6
   15eec:	2b01      	cmp	r3, #1
   15eee:	d8c4      	bhi.n	15e7a <ProcessAesDrv+0x6e>
   15ef0:	6bab      	ldr	r3, [r5, #56]	; 0x38
   15ef2:	2b01      	cmp	r3, #1
   15ef4:	f200 80d2 	bhi.w	1609c <ProcessAesDrv+0x290>
   15ef8:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   15efa:	2b01      	cmp	r3, #1
   15efc:	d834      	bhi.n	15f68 <ProcessAesDrv+0x15c>
   15efe:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   15f00:	2b01      	cmp	r3, #1
   15f02:	f200 8122 	bhi.w	1614a <ProcessAesDrv+0x33e>
   15f06:	4628      	mov	r0, r5
   15f08:	f7ff fef6 	bl	15cf8 <InitAes.part.0>
   15f0c:	4604      	mov	r4, r0
   15f0e:	2800      	cmp	r0, #0
   15f10:	d1b4      	bne.n	15e7c <ProcessAesDrv+0x70>
   15f12:	4628      	mov	r0, r5
   15f14:	f7ff fe9e 	bl	15c54 <LoadAesKey>
   15f18:	4604      	mov	r4, r0
   15f1a:	2800      	cmp	r0, #0
   15f1c:	d1ae      	bne.n	15e7c <ProcessAesDrv+0x70>
   15f1e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   15f20:	2b07      	cmp	r3, #7
   15f22:	d8aa      	bhi.n	15e7a <ProcessAesDrv+0x6e>
   15f24:	a201      	add	r2, pc, #4	; (adr r2, 15f2c <ProcessAesDrv+0x120>)
   15f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   15f2a:	bf00      	nop
   15f2c:	00015f89 	.word	0x00015f89
   15f30:	00015f6d 	.word	0x00015f6d
   15f34:	00016111 	.word	0x00016111
   15f38:	00015f6d 	.word	0x00015f6d
   15f3c:	00015e7b 	.word	0x00015e7b
   15f40:	00015e7b 	.word	0x00015e7b
   15f44:	00016111 	.word	0x00016111
   15f48:	00015f6d 	.word	0x00015f6d
   15f4c:	2a01      	cmp	r2, #1
   15f4e:	bf0c      	ite	eq
   15f50:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
   15f54:	f040 0010 	orrne.w	r0, r0, #16
   15f58:	f7fe fd92 	bl	14a80 <CC_HalMaskInterrupt>
   15f5c:	e7a7      	b.n	15eae <ProcessAesDrv+0xa2>
   15f5e:	4c64      	ldr	r4, [pc, #400]	; (160f0 <ProcessAesDrv+0x2e4>)
   15f60:	4620      	mov	r0, r4
   15f62:	b005      	add	sp, #20
   15f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f68:	4c62      	ldr	r4, [pc, #392]	; (160f4 <ProcessAesDrv+0x2e8>)
   15f6a:	e787      	b.n	15e7c <ProcessAesDrv+0x70>
   15f6c:	4b5d      	ldr	r3, [pc, #372]	; (160e4 <ProcessAesDrv+0x2d8>)
   15f6e:	682a      	ldr	r2, [r5, #0]
   15f70:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   15f74:	686a      	ldr	r2, [r5, #4]
   15f76:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   15f7a:	68aa      	ldr	r2, [r5, #8]
   15f7c:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   15f80:	68ea      	ldr	r2, [r5, #12]
   15f82:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   15f86:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   15f88:	6832      	ldr	r2, [r6, #0]
   15f8a:	f023 0304 	bic.w	r3, r3, #4
   15f8e:	2b03      	cmp	r3, #3
   15f90:	d00d      	beq.n	15fae <ProcessAesDrv+0x1a2>
   15f92:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   15f94:	f8d8 1000 	ldr.w	r1, [r8]
   15f98:	2b01      	cmp	r3, #1
   15f9a:	4b52      	ldr	r3, [pc, #328]	; (160e4 <ProcessAesDrv+0x2d8>)
   15f9c:	bf0b      	itete	eq
   15f9e:	f8c3 1d28 	streq.w	r1, [r3, #3368]	; 0xd28
   15fa2:	f8c3 1d30 	strne.w	r1, [r3, #3376]	; 0xd30
   15fa6:	f8c3 9d2c 	streq.w	r9, [r3, #3372]	; 0xd2c
   15faa:	f8c3 9d34 	strne.w	r9, [r3, #3380]	; 0xd34
   15fae:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   15fb0:	2b01      	cmp	r3, #1
   15fb2:	4b4c      	ldr	r3, [pc, #304]	; (160e4 <ProcessAesDrv+0x2d8>)
   15fb4:	bf0b      	itete	eq
   15fb6:	f8c3 2c28 	streq.w	r2, [r3, #3112]	; 0xc28
   15fba:	f8c3 2c30 	strne.w	r2, [r3, #3120]	; 0xc30
   15fbe:	f8c3 9c2c 	streq.w	r9, [r3, #3116]	; 0xc2c
   15fc2:	f8c3 9c34 	strne.w	r9, [r3, #3124]	; 0xc34
   15fc6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   15fc8:	f023 0304 	bic.w	r3, r3, #4
   15fcc:	2b03      	cmp	r3, #3
   15fce:	d06a      	beq.n	160a6 <ProcessAesDrv+0x29a>
   15fd0:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   15fd2:	2b01      	cmp	r3, #1
   15fd4:	bf0c      	ite	eq
   15fd6:	2080      	moveq	r0, #128	; 0x80
   15fd8:	2020      	movne	r0, #32
   15fda:	f7fe fd57 	bl	14a8c <CC_HalWaitInterrupt>
   15fde:	4604      	mov	r4, r0
   15fe0:	2800      	cmp	r0, #0
   15fe2:	f47f af4b 	bne.w	15e7c <ProcessAesDrv+0x70>
   15fe6:	4b3f      	ldr	r3, [pc, #252]	; (160e4 <ProcessAesDrv+0x2d8>)
   15fe8:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
   15fec:	2c00      	cmp	r4, #0
   15fee:	d1fb      	bne.n	15fe8 <ProcessAesDrv+0x1dc>
   15ff0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   15ff2:	3b01      	subs	r3, #1
   15ff4:	2b06      	cmp	r3, #6
   15ff6:	d812      	bhi.n	1601e <ProcessAesDrv+0x212>
   15ff8:	e8df f003 	tbb	[pc, r3]
   15ffc:	11049904 	.word	0x11049904
   16000:	9911      	.short	0x9911
   16002:	04          	.byte	0x04
   16003:	00          	.byte	0x00
   16004:	4b37      	ldr	r3, [pc, #220]	; (160e4 <ProcessAesDrv+0x2d8>)
   16006:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   1600a:	602a      	str	r2, [r5, #0]
   1600c:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   16010:	606a      	str	r2, [r5, #4]
   16012:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   16016:	60aa      	str	r2, [r5, #8]
   16018:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   1601c:	60eb      	str	r3, [r5, #12]
   1601e:	2301      	movs	r3, #1
   16020:	65ab      	str	r3, [r5, #88]	; 0x58
   16022:	e72b      	b.n	15e7c <ProcessAesDrv+0x70>
   16024:	4834      	ldr	r0, [pc, #208]	; (160f8 <ProcessAesDrv+0x2ec>)
   16026:	f7fd fe4b 	bl	13cc0 <CC_PalAbort>
   1602a:	2000      	movs	r0, #0
   1602c:	f7fe fdf4 	bl	14c18 <CC_PalPowerSaveModeSelect>
   16030:	2800      	cmp	r0, #0
   16032:	f43f af15 	beq.w	15e60 <ProcessAesDrv+0x54>
   16036:	4831      	ldr	r0, [pc, #196]	; (160fc <ProcessAesDrv+0x2f0>)
   16038:	f7fd fe42 	bl	13cc0 <CC_PalAbort>
   1603c:	e710      	b.n	15e60 <ProcessAesDrv+0x54>
   1603e:	4830      	ldr	r0, [pc, #192]	; (16100 <ProcessAesDrv+0x2f4>)
   16040:	f7fd fe3e 	bl	13cc0 <CC_PalAbort>
   16044:	4620      	mov	r0, r4
   16046:	b005      	add	sp, #20
   16048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1604c:	482d      	ldr	r0, [pc, #180]	; (16104 <ProcessAesDrv+0x2f8>)
   1604e:	f7fd fe37 	bl	13cc0 <CC_PalAbort>
   16052:	e736      	b.n	15ec2 <ProcessAesDrv+0xb6>
   16054:	2304      	movs	r3, #4
   16056:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   1605a:	2120      	movs	r1, #32
   1605c:	f105 0010 	add.w	r0, r5, #16
   16060:	f7fe fd92 	bl	14b88 <CC_PalMemSetZeroPlat>
   16064:	e712      	b.n	15e8c <ProcessAesDrv+0x80>
   16066:	6b29      	ldr	r1, [r5, #48]	; 0x30
   16068:	6c28      	ldr	r0, [r5, #64]	; 0x40
   1606a:	f000 f9b5 	bl	163d8 <kmu_validate_slot_and_size>
   1606e:	b998      	cbnz	r0, 16098 <ProcessAesDrv+0x28c>
   16070:	4f25      	ldr	r7, [pc, #148]	; (16108 <ProcessAesDrv+0x2fc>)
   16072:	4c1c      	ldr	r4, [pc, #112]	; (160e4 <ProcessAesDrv+0x2d8>)
   16074:	683b      	ldr	r3, [r7, #0]
   16076:	681b      	ldr	r3, [r3, #0]
   16078:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   1607c:	683b      	ldr	r3, [r7, #0]
   1607e:	685b      	ldr	r3, [r3, #4]
   16080:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   16084:	683b      	ldr	r3, [r7, #0]
   16086:	689b      	ldr	r3, [r3, #8]
   16088:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   1608c:	683b      	ldr	r3, [r7, #0]
   1608e:	68db      	ldr	r3, [r3, #12]
   16090:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   16094:	6b29      	ldr	r1, [r5, #48]	; 0x30
   16096:	b161      	cbz	r1, 160b2 <ProcessAesDrv+0x2a6>
   16098:	2701      	movs	r7, #1
   1609a:	e6d3      	b.n	15e44 <ProcessAesDrv+0x38>
   1609c:	4c1b      	ldr	r4, [pc, #108]	; (1610c <ProcessAesDrv+0x300>)
   1609e:	e6ed      	b.n	15e7c <ProcessAesDrv+0x70>
   160a0:	f44f 0471 	mov.w	r4, #15794176	; 0xf10000
   160a4:	e713      	b.n	15ece <ProcessAesDrv+0xc2>
   160a6:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   160a8:	2b01      	cmp	r3, #1
   160aa:	bf0c      	ite	eq
   160ac:	2040      	moveq	r0, #64	; 0x40
   160ae:	2010      	movne	r0, #16
   160b0:	e793      	b.n	15fda <ProcessAesDrv+0x1ce>
   160b2:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   160b4:	9301      	str	r3, [sp, #4]
   160b6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   160b8:	9300      	str	r3, [sp, #0]
   160ba:	f105 0a10 	add.w	sl, r5, #16
   160be:	f04f 0b10 	mov.w	fp, #16
   160c2:	f8cd a008 	str.w	sl, [sp, #8]
   160c6:	f8cd b00c 	str.w	fp, [sp, #12]
   160ca:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
   160ce:	6c28      	ldr	r0, [r5, #64]	; 0x40
   160d0:	f000 f9a4 	bl	1641c <kmu_derive_cmac>
   160d4:	2800      	cmp	r0, #0
   160d6:	d13a      	bne.n	1614e <ProcessAesDrv+0x342>
   160d8:	2300      	movs	r3, #0
   160da:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   160de:	e7db      	b.n	16098 <ProcessAesDrv+0x28c>
   160e0:	20000364 	.word	0x20000364
   160e4:	5002b000 	.word	0x5002b000
   160e8:	00f10001 	.word	0x00f10001
   160ec:	00f10005 	.word	0x00f10005
   160f0:	00f1000b 	.word	0x00f1000b
   160f4:	00f10003 	.word	0x00f10003
   160f8:	00022638 	.word	0x00022638
   160fc:	00022650 	.word	0x00022650
   16100:	00022690 	.word	0x00022690
   16104:	00022670 	.word	0x00022670
   16108:	20000354 	.word	0x20000354
   1610c:	00f10002 	.word	0x00f10002
   16110:	4b19      	ldr	r3, [pc, #100]	; (16178 <ProcessAesDrv+0x36c>)
   16112:	682a      	ldr	r2, [r5, #0]
   16114:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   16118:	686a      	ldr	r2, [r5, #4]
   1611a:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   1611e:	68aa      	ldr	r2, [r5, #8]
   16120:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   16124:	68ea      	ldr	r2, [r5, #12]
   16126:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   1612a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1612c:	e72c      	b.n	15f88 <ProcessAesDrv+0x17c>
   1612e:	4b12      	ldr	r3, [pc, #72]	; (16178 <ProcessAesDrv+0x36c>)
   16130:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   16134:	602a      	str	r2, [r5, #0]
   16136:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   1613a:	606a      	str	r2, [r5, #4]
   1613c:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   16140:	60aa      	str	r2, [r5, #8]
   16142:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   16146:	60eb      	str	r3, [r5, #12]
   16148:	e769      	b.n	1601e <ProcessAesDrv+0x212>
   1614a:	4c0c      	ldr	r4, [pc, #48]	; (1617c <ProcessAesDrv+0x370>)
   1614c:	e696      	b.n	15e7c <ProcessAesDrv+0x70>
   1614e:	683b      	ldr	r3, [r7, #0]
   16150:	681b      	ldr	r3, [r3, #0]
   16152:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   16156:	683b      	ldr	r3, [r7, #0]
   16158:	685b      	ldr	r3, [r3, #4]
   1615a:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   1615e:	683b      	ldr	r3, [r7, #0]
   16160:	689b      	ldr	r3, [r3, #8]
   16162:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   16166:	683b      	ldr	r3, [r7, #0]
   16168:	68db      	ldr	r3, [r3, #12]
   1616a:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   1616e:	4659      	mov	r1, fp
   16170:	4650      	mov	r0, sl
   16172:	f7fe fd09 	bl	14b88 <CC_PalMemSetZeroPlat>
   16176:	e7af      	b.n	160d8 <ProcessAesDrv+0x2cc>
   16178:	5002b000 	.word	0x5002b000
   1617c:	00f10004 	.word	0x00f10004

00016180 <FinishAesDrv>:
   16180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16184:	b301      	cbz	r1, 161c8 <FinishAesDrv+0x48>
   16186:	b1fa      	cbz	r2, 161c8 <FinishAesDrv+0x48>
   16188:	4604      	mov	r4, r0
   1618a:	2800      	cmp	r0, #0
   1618c:	d07c      	beq.n	16288 <FinishAesDrv+0x108>
   1618e:	461d      	mov	r5, r3
   16190:	6b43      	ldr	r3, [r0, #52]	; 0x34
   16192:	2b07      	cmp	r3, #7
   16194:	460e      	mov	r6, r1
   16196:	d01b      	beq.n	161d0 <FinishAesDrv+0x50>
   16198:	b95d      	cbnz	r5, 161b2 <FinishAesDrv+0x32>
   1619a:	2b03      	cmp	r3, #3
   1619c:	d110      	bne.n	161c0 <FinishAesDrv+0x40>
   1619e:	6d83      	ldr	r3, [r0, #88]	; 0x58
   161a0:	b973      	cbnz	r3, 161c0 <FinishAesDrv+0x40>
   161a2:	f100 0364 	add.w	r3, r0, #100	; 0x64
   161a6:	e9c0 5519 	strd	r5, r5, [r0, #100]	; 0x64
   161aa:	e9c0 551b 	strd	r5, r5, [r0, #108]	; 0x6c
   161ae:	600b      	str	r3, [r1, #0]
   161b0:	2510      	movs	r5, #16
   161b2:	462b      	mov	r3, r5
   161b4:	4631      	mov	r1, r6
   161b6:	4620      	mov	r0, r4
   161b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   161bc:	f7ff be26 	b.w	15e0c <ProcessAesDrv>
   161c0:	462f      	mov	r7, r5
   161c2:	4638      	mov	r0, r7
   161c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   161c8:	4f77      	ldr	r7, [pc, #476]	; (163a8 <FinishAesDrv+0x228>)
   161ca:	4638      	mov	r0, r7
   161cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   161d0:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   161d2:	2b00      	cmp	r3, #0
   161d4:	d15b      	bne.n	1628e <FinishAesDrv+0x10e>
   161d6:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   161da:	d25d      	bcs.n	16298 <FinishAesDrv+0x118>
   161dc:	b915      	cbnz	r5, 161e4 <FinishAesDrv+0x64>
   161de:	6da3      	ldr	r3, [r4, #88]	; 0x58
   161e0:	2b00      	cmp	r3, #0
   161e2:	d159      	bne.n	16298 <FinishAesDrv+0x118>
   161e4:	4871      	ldr	r0, [pc, #452]	; (163ac <FinishAesDrv+0x22c>)
   161e6:	f04f 31ff 	mov.w	r1, #4294967295
   161ea:	f7fe fce5 	bl	14bb8 <CC_PalMutexLock>
   161ee:	2800      	cmp	r0, #0
   161f0:	f040 80b8 	bne.w	16364 <FinishAesDrv+0x1e4>
   161f4:	2000      	movs	r0, #0
   161f6:	f7fe fd0f 	bl	14c18 <CC_PalPowerSaveModeSelect>
   161fa:	2800      	cmp	r0, #0
   161fc:	f040 80ae 	bne.w	1635c <FinishAesDrv+0x1dc>
   16200:	4a6b      	ldr	r2, [pc, #428]	; (163b0 <FinishAesDrv+0x230>)
   16202:	2301      	movs	r3, #1
   16204:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   16208:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1620c:	2b00      	cmp	r3, #0
   1620e:	d1fb      	bne.n	16208 <FinishAesDrv+0x88>
   16210:	6b63      	ldr	r3, [r4, #52]	; 0x34
   16212:	2b03      	cmp	r3, #3
   16214:	dd20      	ble.n	16258 <FinishAesDrv+0xd8>
   16216:	3b06      	subs	r3, #6
   16218:	2b01      	cmp	r3, #1
   1621a:	d81f      	bhi.n	1625c <FinishAesDrv+0xdc>
   1621c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1621e:	2b01      	cmp	r3, #1
   16220:	d83c      	bhi.n	1629c <FinishAesDrv+0x11c>
   16222:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   16224:	2b01      	cmp	r3, #1
   16226:	f200 80a5 	bhi.w	16374 <FinishAesDrv+0x1f4>
   1622a:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1622c:	2b01      	cmp	r3, #1
   1622e:	f200 80a3 	bhi.w	16378 <FinishAesDrv+0x1f8>
   16232:	4620      	mov	r0, r4
   16234:	f7ff fd60 	bl	15cf8 <InitAes.part.0>
   16238:	4607      	mov	r7, r0
   1623a:	b980      	cbnz	r0, 1625e <FinishAesDrv+0xde>
   1623c:	4620      	mov	r0, r4
   1623e:	f7ff fd09 	bl	15c54 <LoadAesKey>
   16242:	4607      	mov	r7, r0
   16244:	b958      	cbnz	r0, 1625e <FinishAesDrv+0xde>
   16246:	6b63      	ldr	r3, [r4, #52]	; 0x34
   16248:	2b07      	cmp	r3, #7
   1624a:	d807      	bhi.n	1625c <FinishAesDrv+0xdc>
   1624c:	e8df f003 	tbb	[pc, r3]
   16250:	285c2835 	.word	0x285c2835
   16254:	285c0606 	.word	0x285c0606
   16258:	2b00      	cmp	r3, #0
   1625a:	dadf      	bge.n	1621c <FinishAesDrv+0x9c>
   1625c:	4f55      	ldr	r7, [pc, #340]	; (163b4 <FinishAesDrv+0x234>)
   1625e:	4a54      	ldr	r2, [pc, #336]	; (163b0 <FinishAesDrv+0x230>)
   16260:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   16264:	2b00      	cmp	r3, #0
   16266:	d1fb      	bne.n	16260 <FinishAesDrv+0xe0>
   16268:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   1626c:	2001      	movs	r0, #1
   1626e:	f7fe fcd3 	bl	14c18 <CC_PalPowerSaveModeSelect>
   16272:	2800      	cmp	r0, #0
   16274:	d17a      	bne.n	1636c <FinishAesDrv+0x1ec>
   16276:	484d      	ldr	r0, [pc, #308]	; (163ac <FinishAesDrv+0x22c>)
   16278:	f7fe fca6 	bl	14bc8 <CC_PalMutexUnlock>
   1627c:	2800      	cmp	r0, #0
   1627e:	d0a0      	beq.n	161c2 <FinishAesDrv+0x42>
   16280:	484d      	ldr	r0, [pc, #308]	; (163b8 <FinishAesDrv+0x238>)
   16282:	f7fd fd1d 	bl	13cc0 <CC_PalAbort>
   16286:	e79c      	b.n	161c2 <FinishAesDrv+0x42>
   16288:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
   1628c:	e799      	b.n	161c2 <FinishAesDrv+0x42>
   1628e:	2b01      	cmp	r3, #1
   16290:	d1a4      	bne.n	161dc <FinishAesDrv+0x5c>
   16292:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   16296:	d3a1      	bcc.n	161dc <FinishAesDrv+0x5c>
   16298:	4f48      	ldr	r7, [pc, #288]	; (163bc <FinishAesDrv+0x23c>)
   1629a:	e792      	b.n	161c2 <FinishAesDrv+0x42>
   1629c:	4f48      	ldr	r7, [pc, #288]	; (163c0 <FinishAesDrv+0x240>)
   1629e:	e7de      	b.n	1625e <FinishAesDrv+0xde>
   162a0:	4b43      	ldr	r3, [pc, #268]	; (163b0 <FinishAesDrv+0x230>)
   162a2:	6822      	ldr	r2, [r4, #0]
   162a4:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   162a8:	6862      	ldr	r2, [r4, #4]
   162aa:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   162ae:	68a2      	ldr	r2, [r4, #8]
   162b0:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   162b4:	68e2      	ldr	r2, [r4, #12]
   162b6:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   162ba:	4b3d      	ldr	r3, [pc, #244]	; (163b0 <FinishAesDrv+0x230>)
   162bc:	2201      	movs	r2, #1
   162be:	f8c3 247c 	str.w	r2, [r3, #1148]	; 0x47c
   162c2:	f8c3 54bc 	str.w	r5, [r3, #1212]	; 0x4bc
   162c6:	2d00      	cmp	r5, #0
   162c8:	d158      	bne.n	1637c <FinishAesDrv+0x1fc>
   162ca:	6da1      	ldr	r1, [r4, #88]	; 0x58
   162cc:	b909      	cbnz	r1, 162d2 <FinishAesDrv+0x152>
   162ce:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
   162d2:	4b37      	ldr	r3, [pc, #220]	; (163b0 <FinishAesDrv+0x230>)
   162d4:	f8d3 7910 	ldr.w	r7, [r3, #2320]	; 0x910
   162d8:	2f00      	cmp	r7, #0
   162da:	d1fb      	bne.n	162d4 <FinishAesDrv+0x154>
   162dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   162de:	3b01      	subs	r3, #1
   162e0:	2b06      	cmp	r3, #6
   162e2:	d8bc      	bhi.n	1625e <FinishAesDrv+0xde>
   162e4:	a201      	add	r2, pc, #4	; (adr r2, 162ec <FinishAesDrv+0x16c>)
   162e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   162ea:	bf00      	nop
   162ec:	00016325 	.word	0x00016325
   162f0:	00016341 	.word	0x00016341
   162f4:	00016325 	.word	0x00016325
   162f8:	0001625f 	.word	0x0001625f
   162fc:	0001625f 	.word	0x0001625f
   16300:	00016341 	.word	0x00016341
   16304:	00016325 	.word	0x00016325
   16308:	4b29      	ldr	r3, [pc, #164]	; (163b0 <FinishAesDrv+0x230>)
   1630a:	6822      	ldr	r2, [r4, #0]
   1630c:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   16310:	6862      	ldr	r2, [r4, #4]
   16312:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   16316:	68a2      	ldr	r2, [r4, #8]
   16318:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   1631c:	68e2      	ldr	r2, [r4, #12]
   1631e:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   16322:	e7ca      	b.n	162ba <FinishAesDrv+0x13a>
   16324:	4b22      	ldr	r3, [pc, #136]	; (163b0 <FinishAesDrv+0x230>)
   16326:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   1632a:	6022      	str	r2, [r4, #0]
   1632c:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   16330:	6062      	str	r2, [r4, #4]
   16332:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   16336:	60a2      	str	r2, [r4, #8]
   16338:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   1633c:	60e3      	str	r3, [r4, #12]
   1633e:	e78e      	b.n	1625e <FinishAesDrv+0xde>
   16340:	4b1b      	ldr	r3, [pc, #108]	; (163b0 <FinishAesDrv+0x230>)
   16342:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   16346:	6022      	str	r2, [r4, #0]
   16348:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   1634c:	6062      	str	r2, [r4, #4]
   1634e:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   16352:	60a2      	str	r2, [r4, #8]
   16354:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   16358:	60e3      	str	r3, [r4, #12]
   1635a:	e780      	b.n	1625e <FinishAesDrv+0xde>
   1635c:	4819      	ldr	r0, [pc, #100]	; (163c4 <FinishAesDrv+0x244>)
   1635e:	f7fd fcaf 	bl	13cc0 <CC_PalAbort>
   16362:	e74d      	b.n	16200 <FinishAesDrv+0x80>
   16364:	4818      	ldr	r0, [pc, #96]	; (163c8 <FinishAesDrv+0x248>)
   16366:	f7fd fcab 	bl	13cc0 <CC_PalAbort>
   1636a:	e743      	b.n	161f4 <FinishAesDrv+0x74>
   1636c:	4817      	ldr	r0, [pc, #92]	; (163cc <FinishAesDrv+0x24c>)
   1636e:	f7fd fca7 	bl	13cc0 <CC_PalAbort>
   16372:	e780      	b.n	16276 <FinishAesDrv+0xf6>
   16374:	4f16      	ldr	r7, [pc, #88]	; (163d0 <FinishAesDrv+0x250>)
   16376:	e772      	b.n	1625e <FinishAesDrv+0xde>
   16378:	4f16      	ldr	r7, [pc, #88]	; (163d4 <FinishAesDrv+0x254>)
   1637a:	e770      	b.n	1625e <FinishAesDrv+0xde>
   1637c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
   1637e:	6832      	ldr	r2, [r6, #0]
   16380:	2901      	cmp	r1, #1
   16382:	d00a      	beq.n	1639a <FinishAesDrv+0x21a>
   16384:	f8c3 2c30 	str.w	r2, [r3, #3120]	; 0xc30
   16388:	2010      	movs	r0, #16
   1638a:	f8c3 5c34 	str.w	r5, [r3, #3124]	; 0xc34
   1638e:	f7fe fb7d 	bl	14a8c <CC_HalWaitInterrupt>
   16392:	4607      	mov	r7, r0
   16394:	2800      	cmp	r0, #0
   16396:	d09c      	beq.n	162d2 <FinishAesDrv+0x152>
   16398:	e761      	b.n	1625e <FinishAesDrv+0xde>
   1639a:	f8c3 2c28 	str.w	r2, [r3, #3112]	; 0xc28
   1639e:	2040      	movs	r0, #64	; 0x40
   163a0:	f8c3 5c2c 	str.w	r5, [r3, #3116]	; 0xc2c
   163a4:	e7f3      	b.n	1638e <FinishAesDrv+0x20e>
   163a6:	bf00      	nop
   163a8:	00f1000b 	.word	0x00f1000b
   163ac:	20000364 	.word	0x20000364
   163b0:	5002b000 	.word	0x5002b000
   163b4:	00f10001 	.word	0x00f10001
   163b8:	00022690 	.word	0x00022690
   163bc:	00f10005 	.word	0x00f10005
   163c0:	00f10002 	.word	0x00f10002
   163c4:	00022650 	.word	0x00022650
   163c8:	00022638 	.word	0x00022638
   163cc:	00022670 	.word	0x00022670
   163d0:	00f10003 	.word	0x00f10003
   163d4:	00f10004 	.word	0x00f10004

000163d8 <kmu_validate_slot_and_size>:
   163d8:	b921      	cbnz	r1, 163e4 <kmu_validate_slot_and_size+0xc>
   163da:	4b03      	ldr	r3, [pc, #12]	; (163e8 <kmu_validate_slot_and_size+0x10>)
   163dc:	2800      	cmp	r0, #0
   163de:	bf18      	it	ne
   163e0:	4618      	movne	r0, r3
   163e2:	4770      	bx	lr
   163e4:	4801      	ldr	r0, [pc, #4]	; (163ec <kmu_validate_slot_and_size+0x14>)
   163e6:	4770      	bx	lr
   163e8:	00f70001 	.word	0x00f70001
   163ec:	00f70003 	.word	0x00f70003

000163f0 <kmu_validate_kdr_slot_and_size>:
   163f0:	b921      	cbnz	r1, 163fc <kmu_validate_kdr_slot_and_size+0xc>
   163f2:	4b03      	ldr	r3, [pc, #12]	; (16400 <kmu_validate_kdr_slot_and_size+0x10>)
   163f4:	2800      	cmp	r0, #0
   163f6:	bf18      	it	ne
   163f8:	4618      	movne	r0, r3
   163fa:	4770      	bx	lr
   163fc:	4801      	ldr	r0, [pc, #4]	; (16404 <kmu_validate_kdr_slot_and_size+0x14>)
   163fe:	4770      	bx	lr
   16400:	00f70001 	.word	0x00f70001
   16404:	00f70003 	.word	0x00f70003

00016408 <kmu_use_kdr_key>:
   16408:	4b03      	ldr	r3, [pc, #12]	; (16418 <kmu_use_kdr_key+0x10>)
   1640a:	2000      	movs	r0, #0
   1640c:	2201      	movs	r2, #1
   1640e:	f8c3 0a38 	str.w	r0, [r3, #2616]	; 0xa38
   16412:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   16416:	4770      	bx	lr
   16418:	5002b000 	.word	0x5002b000

0001641c <kmu_derive_cmac>:
   1641c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16420:	b0cc      	sub	sp, #304	; 0x130
   16422:	2400      	movs	r4, #0
   16424:	9d57      	ldr	r5, [sp, #348]	; 0x15c
   16426:	f8dd 8158 	ldr.w	r8, [sp, #344]	; 0x158
   1642a:	4682      	mov	sl, r0
   1642c:	4689      	mov	r9, r1
   1642e:	4616      	mov	r6, r2
   16430:	4621      	mov	r1, r4
   16432:	2274      	movs	r2, #116	; 0x74
   16434:	a80e      	add	r0, sp, #56	; 0x38
   16436:	461f      	mov	r7, r3
   16438:	f009 fcfe 	bl	1fe38 <memset>
   1643c:	2280      	movs	r2, #128	; 0x80
   1643e:	4621      	mov	r1, r4
   16440:	a82c      	add	r0, sp, #176	; 0xb0
   16442:	942b      	str	r4, [sp, #172]	; 0xac
   16444:	f009 fcf8 	bl	1fe38 <memset>
   16448:	2384      	movs	r3, #132	; 0x84
   1644a:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   1644e:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
   16452:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
   16456:	9305      	str	r3, [sp, #20]
   16458:	d863      	bhi.n	16522 <kmu_derive_cmac+0x106>
   1645a:	f7ff fcbf 	bl	15ddc <write_invalid_key>
   1645e:	ab05      	add	r3, sp, #20
   16460:	4630      	mov	r0, r6
   16462:	ae2b      	add	r6, sp, #172	; 0xac
   16464:	9301      	str	r3, [sp, #4]
   16466:	9502      	str	r5, [sp, #8]
   16468:	e9dd 2354 	ldrd	r2, r3, [sp, #336]	; 0x150
   1646c:	4639      	mov	r1, r7
   1646e:	9600      	str	r6, [sp, #0]
   16470:	f000 f862 	bl	16538 <UtilCmacBuildDataForDerivation>
   16474:	2800      	cmp	r0, #0
   16476:	d14f      	bne.n	16518 <kmu_derive_cmac+0xfc>
   16478:	2303      	movs	r3, #3
   1647a:	f88d 3013 	strb.w	r3, [sp, #19]
   1647e:	f89d 3013 	ldrb.w	r3, [sp, #19]
   16482:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
   16486:	2307      	movs	r3, #7
   16488:	2200      	movs	r2, #0
   1648a:	901c      	str	r0, [sp, #112]	; 0x70
   1648c:	2110      	movs	r1, #16
   1648e:	a80e      	add	r0, sp, #56	; 0x38
   16490:	931b      	str	r3, [sp, #108]	; 0x6c
   16492:	2401      	movs	r4, #1
   16494:	2301      	movs	r3, #1
   16496:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
   1649a:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
   1649e:	f8cd a078 	str.w	sl, [sp, #120]	; 0x78
   164a2:	9426      	str	r4, [sp, #152]	; 0x98
   164a4:	f10d 0920 	add.w	r9, sp, #32
   164a8:	f7fe fb6e 	bl	14b88 <CC_PalMemSetZeroPlat>
   164ac:	2210      	movs	r2, #16
   164ae:	9200      	str	r2, [sp, #0]
   164b0:	9905      	ldr	r1, [sp, #20]
   164b2:	f8cd 9004 	str.w	r9, [sp, #4]
   164b6:	ab0a      	add	r3, sp, #40	; 0x28
   164b8:	4630      	mov	r0, r6
   164ba:	aa06      	add	r2, sp, #24
   164bc:	f7ff fa1e 	bl	158fc <SetDataBuffersInfo>
   164c0:	4607      	mov	r7, r0
   164c2:	b170      	cbz	r0, 164e2 <kmu_derive_cmac+0xc6>
   164c4:	e01d      	b.n	16502 <kmu_derive_cmac+0xe6>
   164c6:	a90e      	add	r1, sp, #56	; 0x38
   164c8:	eb08 0007 	add.w	r0, r8, r7
   164cc:	f7fe fb58 	bl	14b80 <CC_PalMemCopyPlat>
   164d0:	2110      	movs	r1, #16
   164d2:	a80e      	add	r0, sp, #56	; 0x38
   164d4:	f7fe fb58 	bl	14b88 <CC_PalMemSetZeroPlat>
   164d8:	3401      	adds	r4, #1
   164da:	1bad      	subs	r5, r5, r6
   164dc:	4437      	add	r7, r6
   164de:	b2e4      	uxtb	r4, r4
   164e0:	d024      	beq.n	1652c <kmu_derive_cmac+0x110>
   164e2:	2d10      	cmp	r5, #16
   164e4:	464a      	mov	r2, r9
   164e6:	9b05      	ldr	r3, [sp, #20]
   164e8:	f88d 40ac 	strb.w	r4, [sp, #172]	; 0xac
   164ec:	a906      	add	r1, sp, #24
   164ee:	a80e      	add	r0, sp, #56	; 0x38
   164f0:	462e      	mov	r6, r5
   164f2:	bf28      	it	cs
   164f4:	2610      	movcs	r6, #16
   164f6:	f7ff fe43 	bl	16180 <FinishAesDrv>
   164fa:	4632      	mov	r2, r6
   164fc:	2800      	cmp	r0, #0
   164fe:	d0e2      	beq.n	164c6 <kmu_derive_cmac+0xaa>
   16500:	4607      	mov	r7, r0
   16502:	a80e      	add	r0, sp, #56	; 0x38
   16504:	2274      	movs	r2, #116	; 0x74
   16506:	2100      	movs	r1, #0
   16508:	f7fe fb3c 	bl	14b84 <CC_PalMemSetPlat>
   1650c:	f7ff fc66 	bl	15ddc <write_invalid_key>
   16510:	4638      	mov	r0, r7
   16512:	b04c      	add	sp, #304	; 0x130
   16514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16518:	4f05      	ldr	r7, [pc, #20]	; (16530 <kmu_derive_cmac+0x114>)
   1651a:	4638      	mov	r0, r7
   1651c:	b04c      	add	sp, #304	; 0x130
   1651e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16522:	4f04      	ldr	r7, [pc, #16]	; (16534 <kmu_derive_cmac+0x118>)
   16524:	4638      	mov	r0, r7
   16526:	b04c      	add	sp, #304	; 0x130
   16528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1652c:	462f      	mov	r7, r5
   1652e:	e7e8      	b.n	16502 <kmu_derive_cmac+0xe6>
   16530:	00f1000e 	.word	0x00f1000e
   16534:	00f1000f 	.word	0x00f1000f

00016538 <UtilCmacBuildDataForDerivation>:
   16538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1653c:	b082      	sub	sp, #8
   1653e:	461e      	mov	r6, r3
   16540:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   16542:	2300      	movs	r3, #0
   16544:	f5b4 6f7f 	cmp.w	r4, #4080	; 0xff0
   16548:	9301      	str	r3, [sp, #4]
   1654a:	d83e      	bhi.n	165ca <UtilCmacBuildDataForDerivation+0x92>
   1654c:	00e4      	lsls	r4, r4, #3
   1654e:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   16552:	4617      	mov	r7, r2
   16554:	f101 32ff 	add.w	r2, r1, #4294967295
   16558:	bf34      	ite	cc
   1655a:	2303      	movcc	r3, #3
   1655c:	2304      	movcs	r3, #4
   1655e:	2a3f      	cmp	r2, #63	; 0x3f
   16560:	460d      	mov	r5, r1
   16562:	9300      	str	r3, [sp, #0]
   16564:	d831      	bhi.n	165ca <UtilCmacBuildDataForDerivation+0x92>
   16566:	b380      	cbz	r0, 165ca <UtilCmacBuildDataForDerivation+0x92>
   16568:	b116      	cbz	r6, 16570 <UtilCmacBuildDataForDerivation+0x38>
   1656a:	b377      	cbz	r7, 165ca <UtilCmacBuildDataForDerivation+0x92>
   1656c:	2e40      	cmp	r6, #64	; 0x40
   1656e:	d82c      	bhi.n	165ca <UtilCmacBuildDataForDerivation+0x92>
   16570:	9a08      	ldr	r2, [sp, #32]
   16572:	b352      	cbz	r2, 165ca <UtilCmacBuildDataForDerivation+0x92>
   16574:	9a09      	ldr	r2, [sp, #36]	; 0x24
   16576:	6811      	ldr	r1, [r2, #0]
   16578:	b339      	cbz	r1, 165ca <UtilCmacBuildDataForDerivation+0x92>
   1657a:	19aa      	adds	r2, r5, r6
   1657c:	4413      	add	r3, r2
   1657e:	4299      	cmp	r1, r3
   16580:	d323      	bcc.n	165ca <UtilCmacBuildDataForDerivation+0x92>
   16582:	9b08      	ldr	r3, [sp, #32]
   16584:	4601      	mov	r1, r0
   16586:	462a      	mov	r2, r5
   16588:	1c58      	adds	r0, r3, #1
   1658a:	f7fe faf9 	bl	14b80 <CC_PalMemCopyPlat>
   1658e:	9b08      	ldr	r3, [sp, #32]
   16590:	f105 0802 	add.w	r8, r5, #2
   16594:	441d      	add	r5, r3
   16596:	2300      	movs	r3, #0
   16598:	706b      	strb	r3, [r5, #1]
   1659a:	bb0e      	cbnz	r6, 165e0 <UtilCmacBuildDataForDerivation+0xa8>
   1659c:	9b08      	ldr	r3, [sp, #32]
   1659e:	9400      	str	r4, [sp, #0]
   165a0:	2cff      	cmp	r4, #255	; 0xff
   165a2:	eb03 0008 	add.w	r0, r3, r8
   165a6:	d914      	bls.n	165d2 <UtilCmacBuildDataForDerivation+0x9a>
   165a8:	0223      	lsls	r3, r4, #8
   165aa:	b29b      	uxth	r3, r3
   165ac:	ea43 2414 	orr.w	r4, r3, r4, lsr #8
   165b0:	2202      	movs	r2, #2
   165b2:	a901      	add	r1, sp, #4
   165b4:	9401      	str	r4, [sp, #4]
   165b6:	f7fe fae3 	bl	14b80 <CC_PalMemCopyPlat>
   165ba:	f108 0302 	add.w	r3, r8, #2
   165be:	9a09      	ldr	r2, [sp, #36]	; 0x24
   165c0:	2000      	movs	r0, #0
   165c2:	6013      	str	r3, [r2, #0]
   165c4:	b002      	add	sp, #8
   165c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   165ca:	480a      	ldr	r0, [pc, #40]	; (165f4 <UtilCmacBuildDataForDerivation+0xbc>)
   165cc:	b002      	add	sp, #8
   165ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   165d2:	2201      	movs	r2, #1
   165d4:	4669      	mov	r1, sp
   165d6:	f7fe fad3 	bl	14b80 <CC_PalMemCopyPlat>
   165da:	f108 0301 	add.w	r3, r8, #1
   165de:	e7ee      	b.n	165be <UtilCmacBuildDataForDerivation+0x86>
   165e0:	9b08      	ldr	r3, [sp, #32]
   165e2:	4632      	mov	r2, r6
   165e4:	eb03 0008 	add.w	r0, r3, r8
   165e8:	4639      	mov	r1, r7
   165ea:	f7fe fac9 	bl	14b80 <CC_PalMemCopyPlat>
   165ee:	44b0      	add	r8, r6
   165f0:	e7d4      	b.n	1659c <UtilCmacBuildDataForDerivation+0x64>
   165f2:	bf00      	nop
   165f4:	80000006 	.word	0x80000006

000165f8 <CC_PalDataBufferAttrGet>:
   165f8:	2000      	movs	r0, #0
   165fa:	7018      	strb	r0, [r3, #0]
   165fc:	4770      	bx	lr
   165fe:	bf00      	nop

00016600 <cbprintf_via_va_list>:
{
   16600:	b510      	push	{r4, lr}
   16602:	460c      	mov	r4, r1
   16604:	4611      	mov	r1, r2
   16606:	461a      	mov	r2, r3
	return formatter(out, ctx, fmt, u.ap);
   16608:	9b02      	ldr	r3, [sp, #8]
   1660a:	47a0      	blx	r4
}
   1660c:	bd10      	pop	{r4, pc}

0001660e <is_fmt_spec>:
	return (c >= 64) && (c <= 122);
   1660e:	3840      	subs	r0, #64	; 0x40
   16610:	b2c0      	uxtb	r0, r0
}
   16612:	283a      	cmp	r0, #58	; 0x3a
   16614:	bf8c      	ite	hi
   16616:	2000      	movhi	r0, #0
   16618:	2001      	movls	r0, #1
   1661a:	4770      	bx	lr

0001661c <get_package_len>:
{
   1661c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1661e:	4606      	mov	r6, r0
	args_size = buf[0] * sizeof(int);
   16620:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
   16622:	7845      	ldrb	r5, [r0, #1]
	ros_nbr   = buf[2];
   16624:	7884      	ldrb	r4, [r0, #2]
	buf += ros_nbr;
   16626:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   1662a:	4404      	add	r4, r0
	for (int i = 0; i < s_nbr; i++) {
   1662c:	2700      	movs	r7, #0
   1662e:	e006      	b.n	1663e <get_package_len+0x22>
		buf++;
   16630:	3401      	adds	r4, #1
		buf += strlen((const char *)buf) + 1;
   16632:	4620      	mov	r0, r4
   16634:	f7ea fbbc 	bl	db0 <strlen>
   16638:	3001      	adds	r0, #1
   1663a:	4404      	add	r4, r0
	for (int i = 0; i < s_nbr; i++) {
   1663c:	3701      	adds	r7, #1
   1663e:	42af      	cmp	r7, r5
   16640:	d3f6      	bcc.n	16630 <get_package_len+0x14>
}
   16642:	1ba0      	subs	r0, r4, r6
   16644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00016646 <append_string>:
{
   16646:	b570      	push	{r4, r5, r6, lr}
   16648:	4614      	mov	r4, r2
	if (cb == NULL) {
   1664a:	b138      	cbz	r0, 1665c <append_string+0x16>
   1664c:	460d      	mov	r5, r1
   1664e:	4619      	mov	r1, r3
   16650:	4606      	mov	r6, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
   16652:	b143      	cbz	r3, 16666 <append_string+0x20>
	return cb(str, strl, ctx);
   16654:	462a      	mov	r2, r5
   16656:	4620      	mov	r0, r4
   16658:	47b0      	blx	r6
}
   1665a:	bd70      	pop	{r4, r5, r6, pc}
		return 1 + strlen(str);
   1665c:	4610      	mov	r0, r2
   1665e:	f7ea fba7 	bl	db0 <strlen>
   16662:	3001      	adds	r0, #1
   16664:	e7f9      	b.n	1665a <append_string+0x14>
	strl = strl > 0 ? strl : strlen(str) + 1;
   16666:	4610      	mov	r0, r2
   16668:	f7ea fba2 	bl	db0 <strlen>
   1666c:	b283      	uxth	r3, r0
   1666e:	3301      	adds	r3, #1
   16670:	b299      	uxth	r1, r3
   16672:	e7ef      	b.n	16654 <append_string+0xe>

00016674 <cbpprintf_external>:
	if (buf == NULL) {
   16674:	b35b      	cbz	r3, 166ce <cbpprintf_external+0x5a>
{
   16676:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1667a:	b082      	sub	sp, #8
   1667c:	4607      	mov	r7, r0
   1667e:	4688      	mov	r8, r1
   16680:	4691      	mov	r9, r2
   16682:	461d      	mov	r5, r3
	args_size = hdr->hdr.desc.len * sizeof(int);
   16684:	781a      	ldrb	r2, [r3, #0]
	s_nbr     = hdr->hdr.desc.str_cnt;
   16686:	785e      	ldrb	r6, [r3, #1]
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   16688:	789c      	ldrb	r4, [r3, #2]
	rws_nbr   = hdr->hdr.desc.rw_str_cnt;
   1668a:	78db      	ldrb	r3, [r3, #3]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   1668c:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   16690:	eb04 0443 	add.w	r4, r4, r3, lsl #1
   16694:	442c      	add	r4, r5
	for (i = 0; i < s_nbr; i++) {
   16696:	f04f 0a00 	mov.w	sl, #0
   1669a:	e00a      	b.n	166b2 <cbpprintf_external+0x3e>
		s_idx = *(uint8_t *)s++;
   1669c:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
   166a0:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
   166a4:	4620      	mov	r0, r4
   166a6:	f7ea fb83 	bl	db0 <strlen>
   166aa:	3001      	adds	r0, #1
   166ac:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   166ae:	f10a 0a01 	add.w	sl, sl, #1
   166b2:	45b2      	cmp	sl, r6
   166b4:	d3f2      	bcc.n	1669c <cbpprintf_external+0x28>
	buf += sizeof(*hdr);
   166b6:	f105 0308 	add.w	r3, r5, #8
	return cbprintf_via_va_list(out, formatter, ctx, hdr->fmt, buf);
   166ba:	9300      	str	r3, [sp, #0]
   166bc:	686b      	ldr	r3, [r5, #4]
   166be:	464a      	mov	r2, r9
   166c0:	4641      	mov	r1, r8
   166c2:	4638      	mov	r0, r7
   166c4:	f7ff ff9c 	bl	16600 <cbprintf_via_va_list>
}
   166c8:	b002      	add	sp, #8
   166ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EINVAL;
   166ce:	f06f 0015 	mvn.w	r0, #21
}
   166d2:	4770      	bx	lr

000166d4 <is_ptr>:
{
   166d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   166d8:	4604      	mov	r4, r0
   166da:	4688      	mov	r8, r1
	int cnt = 0;
   166dc:	2700      	movs	r7, #0
	bool mod = false;
   166de:	463e      	mov	r6, r7
	while ((c = *fmt++) != '\0') {
   166e0:	e007      	b.n	166f2 <is_ptr+0x1e>
				if (c == 'p') {
   166e2:	2d70      	cmp	r5, #112	; 0x70
   166e4:	d018      	beq.n	16718 <is_ptr+0x44>
				} else if (is_fmt_spec(c)) {
   166e6:	4628      	mov	r0, r5
   166e8:	f7ff ff91 	bl	1660e <is_fmt_spec>
   166ec:	b9b8      	cbnz	r0, 1671e <is_ptr+0x4a>
		if (c == '%') {
   166ee:	2d25      	cmp	r5, #37	; 0x25
   166f0:	d00e      	beq.n	16710 <is_ptr+0x3c>
	while ((c = *fmt++) != '\0') {
   166f2:	f814 5b01 	ldrb.w	r5, [r4], #1
   166f6:	b175      	cbz	r5, 16716 <is_ptr+0x42>
		if (mod) {
   166f8:	2e00      	cmp	r6, #0
   166fa:	d0f8      	beq.n	166ee <is_ptr+0x1a>
			if (cnt == n) {
   166fc:	4547      	cmp	r7, r8
   166fe:	d0f0      	beq.n	166e2 <is_ptr+0xe>
			} else if (is_fmt_spec(c)) {
   16700:	4628      	mov	r0, r5
   16702:	f7ff ff84 	bl	1660e <is_fmt_spec>
   16706:	2800      	cmp	r0, #0
   16708:	d0f1      	beq.n	166ee <is_ptr+0x1a>
				cnt++;
   1670a:	3701      	adds	r7, #1
				mod = false;
   1670c:	2600      	movs	r6, #0
   1670e:	e7ee      	b.n	166ee <is_ptr+0x1a>
			mod = !mod;
   16710:	f086 0601 	eor.w	r6, r6, #1
   16714:	e7ed      	b.n	166f2 <is_ptr+0x1e>
	return false;
   16716:	2600      	movs	r6, #0
}
   16718:	4630      	mov	r0, r6
   1671a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					return false;
   1671e:	2600      	movs	r6, #0
   16720:	e7fa      	b.n	16718 <is_ptr+0x44>

00016722 <z_fdtable_call_ioctl>:
 * @param request ioctl request number
 * @param ... Variadic arguments to ioctl
 */
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
				       unsigned long request, ...)
{
   16722:	b40c      	push	{r2, r3}
   16724:	b500      	push	{lr}
   16726:	b083      	sub	sp, #12
   16728:	4603      	mov	r3, r0
   1672a:	4608      	mov	r0, r1
   1672c:	aa04      	add	r2, sp, #16
   1672e:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list args;
	int res;

	va_start(args, request);
   16732:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   16734:	68db      	ldr	r3, [r3, #12]
   16736:	4798      	blx	r3
	va_end(args);

	return res;
}
   16738:	b003      	add	sp, #12
   1673a:	f85d eb04 	ldr.w	lr, [sp], #4
   1673e:	b002      	add	sp, #8
   16740:	4770      	bx	lr

00016742 <z_free_fd>:

void z_free_fd(int fd)
{
   16742:	b508      	push	{r3, lr}
	/* Assumes fd was already bounds-checked. */
	(void)z_fd_unref(fd);
   16744:	f7ec faec 	bl	2d20 <z_fd_unref>
}
   16748:	bd08      	pop	{r3, pc}

0001674a <arch_printk_char_out>:
}
   1674a:	2000      	movs	r0, #0
   1674c:	4770      	bx	lr

0001674e <str_out>:
{
   1674e:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   16750:	680c      	ldr	r4, [r1, #0]
   16752:	b154      	cbz	r4, 1676a <str_out+0x1c>
   16754:	688a      	ldr	r2, [r1, #8]
   16756:	684b      	ldr	r3, [r1, #4]
   16758:	429a      	cmp	r2, r3
   1675a:	da06      	bge.n	1676a <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
   1675c:	3b01      	subs	r3, #1
   1675e:	429a      	cmp	r2, r3
   16760:	d008      	beq.n	16774 <str_out+0x26>
		ctx->str[ctx->count++] = c;
   16762:	1c53      	adds	r3, r2, #1
   16764:	608b      	str	r3, [r1, #8]
   16766:	54a0      	strb	r0, [r4, r2]
   16768:	e002      	b.n	16770 <str_out+0x22>
		ctx->count++;
   1676a:	688b      	ldr	r3, [r1, #8]
   1676c:	3301      	adds	r3, #1
   1676e:	608b      	str	r3, [r1, #8]
}
   16770:	bc10      	pop	{r4}
   16772:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
   16774:	1c53      	adds	r3, r2, #1
   16776:	608b      	str	r3, [r1, #8]
   16778:	2300      	movs	r3, #0
   1677a:	54a3      	strb	r3, [r4, r2]
   1677c:	e7f8      	b.n	16770 <str_out+0x22>

0001677e <vprintk>:
{
   1677e:	b508      	push	{r3, lr}
		z_log_vprintk(fmt, ap);
   16780:	f001 f906 	bl	17990 <z_log_vprintk>
}
   16784:	bd08      	pop	{r3, pc}

00016786 <printk>:
{
   16786:	b40f      	push	{r0, r1, r2, r3}
   16788:	b500      	push	{lr}
   1678a:	b083      	sub	sp, #12
   1678c:	a904      	add	r1, sp, #16
   1678e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   16792:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   16794:	f7ff fff3 	bl	1677e <vprintk>
}
   16798:	b003      	add	sp, #12
   1679a:	f85d eb04 	ldr.w	lr, [sp], #4
   1679e:	b004      	add	sp, #16
   167a0:	4770      	bx	lr

000167a2 <snprintk>:
{
   167a2:	b40c      	push	{r2, r3}
   167a4:	b500      	push	{lr}
   167a6:	b083      	sub	sp, #12
   167a8:	ab04      	add	r3, sp, #16
   167aa:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   167ae:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   167b0:	f7ec fb58 	bl	2e64 <vsnprintk>
}
   167b4:	b003      	add	sp, #12
   167b6:	f85d eb04 	ldr.w	lr, [sp], #4
   167ba:	b002      	add	sp, #8
   167bc:	4770      	bx	lr

000167be <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   167be:	b508      	push	{r3, lr}
   167c0:	4604      	mov	r4, r0
   167c2:	4608      	mov	r0, r1
   167c4:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   167c6:	461a      	mov	r2, r3
   167c8:	47a0      	blx	r4
	return z_impl_z_current_get();
   167ca:	f7fb fa8f 	bl	11cec <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   167ce:	f7ef fbfb 	bl	5fc8 <z_impl_k_thread_abort>

000167d2 <chunk_mem>:
#endif

static void *chunk_mem(struct z_heap *h, chunkid_t c)
{
	chunk_unit_t *buf = chunk_buf(h);
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   167d2:	00c9      	lsls	r1, r1, #3
   167d4:	3104      	adds	r1, #4

	CHECK(!(((uintptr_t)ret) & (big_heap(h) ? 7 : 3)));

	return ret;
}
   167d6:	4408      	add	r0, r1
   167d8:	4770      	bx	lr

000167da <free_list_remove_bidx>:

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   167da:	ea4f 0cc1 	mov.w	ip, r1, lsl #3

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   167de:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   167e2:	88db      	ldrh	r3, [r3, #6]

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & BIT(bidx));

	if (next_free_chunk(h, c) == c) {
   167e4:	4299      	cmp	r1, r3
   167e6:	d00c      	beq.n	16802 <free_list_remove_bidx+0x28>
   167e8:	4484      	add	ip, r0
   167ea:	f8bc 1004 	ldrh.w	r1, [ip, #4]
		b->next = 0;
	} else {
		chunkid_t first = prev_free_chunk(h, c),
			  second = next_free_chunk(h, c);

		b->next = second;
   167ee:	3204      	adds	r2, #4
   167f0:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   167f4:	00ca      	lsls	r2, r1, #3
	if (big_heap(h)) {
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   167f6:	3206      	adds	r2, #6
   167f8:	5283      	strh	r3, [r0, r2]
	void *cmem = &buf[c];
   167fa:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   167fc:	3304      	adds	r3, #4
   167fe:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes -= chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
   16800:	4770      	bx	lr
		h->avail_buckets &= ~BIT(bidx);
   16802:	68c3      	ldr	r3, [r0, #12]
   16804:	2101      	movs	r1, #1
   16806:	4091      	lsls	r1, r2
   16808:	ea23 0301 	bic.w	r3, r3, r1
   1680c:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   1680e:	3204      	adds	r2, #4
   16810:	2300      	movs	r3, #0
   16812:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
   16816:	4770      	bx	lr

00016818 <free_list_add_bidx>:
		free_list_remove_bidx(h, c, bidx);
	}
}

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
   16818:	b510      	push	{r4, lr}
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
   1681a:	1d13      	adds	r3, r2, #4
   1681c:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   16820:	b974      	cbnz	r4, 16840 <free_list_add_bidx+0x28>
		CHECK((h->avail_buckets & BIT(bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= BIT(bidx);
   16822:	68c3      	ldr	r3, [r0, #12]
   16824:	2401      	movs	r4, #1
   16826:	4094      	lsls	r4, r2
   16828:	4323      	orrs	r3, r4
   1682a:	60c3      	str	r3, [r0, #12]
		b->next = c;
   1682c:	3204      	adds	r2, #4
   1682e:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
   16832:	00cb      	lsls	r3, r1, #3
		((uint16_t *)cmem)[f] = val;
   16834:	1d1a      	adds	r2, r3, #4
   16836:	b289      	uxth	r1, r1
   16838:	5281      	strh	r1, [r0, r2]
   1683a:	3306      	adds	r3, #6
   1683c:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
   1683e:	bd10      	pop	{r4, pc}
	void *cmem = &buf[c];
   16840:	00e2      	lsls	r2, r4, #3
		return ((uint16_t *)cmem)[f];
   16842:	3204      	adds	r2, #4
   16844:	5a83      	ldrh	r3, [r0, r2]
	void *cmem = &buf[c];
   16846:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
		((uint16_t *)cmem)[f] = val;
   1684a:	f10c 0e04 	add.w	lr, ip, #4
   1684e:	f820 300e 	strh.w	r3, [r0, lr]
   16852:	f10c 0c06 	add.w	ip, ip, #6
   16856:	f820 400c 	strh.w	r4, [r0, ip]
	void *cmem = &buf[c];
   1685a:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   1685c:	3306      	adds	r3, #6
   1685e:	b289      	uxth	r1, r1
   16860:	52c1      	strh	r1, [r0, r3]
   16862:	5281      	strh	r1, [r0, r2]
   16864:	e7eb      	b.n	1683e <free_list_add_bidx+0x26>

00016866 <split_chunks>:

/* Splits a chunk "lc" into a left chunk and a right chunk at "rc".
 * Leaves both chunks marked "free"
 */
static void split_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   16866:	b500      	push	{lr}
	void *cmem = &buf[c];
   16868:	00cb      	lsls	r3, r1, #3
		return ((uint16_t *)cmem)[f];
   1686a:	3302      	adds	r3, #2
   1686c:	f830 e003 	ldrh.w	lr, [r0, r3]
	CHECK(rc > lc);
	CHECK(rc - lc < chunk_size(h, lc));

	chunksz_t sz0 = chunk_size(h, lc);
	chunksz_t lsz = rc - lc;
   16870:	eba2 0c01 	sub.w	ip, r2, r1
	chunksz_t rsz = sz0 - lsz;
   16874:	1a89      	subs	r1, r1, r2
   16876:	eb01 015e 	add.w	r1, r1, lr, lsr #1
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1687a:	ea4f 0e4c 	mov.w	lr, ip, lsl #1
		((uint16_t *)cmem)[f] = val;
   1687e:	f820 e003 	strh.w	lr, [r0, r3]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   16882:	ea4f 0e41 	mov.w	lr, r1, lsl #1
	void *cmem = &buf[c];
   16886:	00d3      	lsls	r3, r2, #3
		((uint16_t *)cmem)[f] = val;
   16888:	3302      	adds	r3, #2
   1688a:	f820 e003 	strh.w	lr, [r0, r3]
   1688e:	f820 c032 	strh.w	ip, [r0, r2, lsl #3]
		return ((uint16_t *)cmem)[f];
   16892:	5ac3      	ldrh	r3, [r0, r3]
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
   16894:	eb02 0253 	add.w	r2, r2, r3, lsr #1
		((uint16_t *)cmem)[f] = val;
   16898:	f820 1032 	strh.w	r1, [r0, r2, lsl #3]

	set_chunk_size(h, lc, lsz);
	set_chunk_size(h, rc, rsz);
	set_left_chunk_size(h, rc, lsz);
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}
   1689c:	f85d fb04 	ldr.w	pc, [sp], #4

000168a0 <merge_chunks>:

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   168a0:	b500      	push	{lr}
	void *cmem = &buf[c];
   168a2:	00c9      	lsls	r1, r1, #3
		return ((uint16_t *)cmem)[f];
   168a4:	3102      	adds	r1, #2
   168a6:	f830 e001 	ldrh.w	lr, [r0, r1]
	void *cmem = &buf[c];
   168aa:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
		return ((uint16_t *)cmem)[f];
   168ae:	f10c 0c02 	add.w	ip, ip, #2
   168b2:	f830 300c 	ldrh.w	r3, [r0, ip]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   168b6:	085b      	lsrs	r3, r3, #1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   168b8:	eb03 035e 	add.w	r3, r3, lr, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   168bc:	ea4f 0e43 	mov.w	lr, r3, lsl #1
		((uint16_t *)cmem)[f] = val;
   168c0:	f820 e001 	strh.w	lr, [r0, r1]
		return ((uint16_t *)cmem)[f];
   168c4:	f830 100c 	ldrh.w	r1, [r0, ip]
	return c + chunk_size(h, c);
   168c8:	eb02 0251 	add.w	r2, r2, r1, lsr #1
		((uint16_t *)cmem)[f] = val;
   168cc:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]

	set_chunk_size(h, lc, newsz);
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   168d0:	f85d fb04 	ldr.w	pc, [sp], #4

000168d4 <mem_to_chunkid>:
 * boundary.
 */
static chunkid_t mem_to_chunkid(struct z_heap *h, void *p)
{
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   168d4:	3904      	subs	r1, #4
   168d6:	1a08      	subs	r0, r1, r0
}
   168d8:	08c0      	lsrs	r0, r0, #3
   168da:	4770      	bx	lr

000168dc <free_list_remove>:
{
   168dc:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
   168de:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   168e2:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   168e4:	0852      	lsrs	r2, r2, #1
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   168e6:	fab2 f282 	clz	r2, r2
		free_list_remove_bidx(h, c, bidx);
   168ea:	f1c2 021f 	rsb	r2, r2, #31
   168ee:	f7ff ff74 	bl	167da <free_list_remove_bidx>
}
   168f2:	bd08      	pop	{r3, pc}

000168f4 <free_list_add>:
{
   168f4:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
   168f6:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   168fa:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   168fc:	0852      	lsrs	r2, r2, #1
	return 31 - __builtin_clz(usable_sz);
   168fe:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
   16902:	f1c2 021f 	rsb	r2, r2, #31
   16906:	f7ff ff87 	bl	16818 <free_list_add_bidx>
}
   1690a:	bd08      	pop	{r3, pc}

0001690c <free_chunk>:
{
   1690c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1690e:	4604      	mov	r4, r0
   16910:	460d      	mov	r5, r1
	void *cmem = &buf[c];
   16912:	00ce      	lsls	r6, r1, #3
		return ((uint16_t *)cmem)[f];
   16914:	1cb7      	adds	r7, r6, #2
   16916:	5bc1      	ldrh	r1, [r0, r7]
	return c + chunk_size(h, c);
   16918:	eb05 0151 	add.w	r1, r5, r1, lsr #1
		return ((uint16_t *)cmem)[f];
   1691c:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   16920:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   16922:	f013 0f01 	tst.w	r3, #1
   16926:	d00c      	beq.n	16942 <free_chunk+0x36>
   16928:	5ba1      	ldrh	r1, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   1692a:	1a69      	subs	r1, r5, r1
		return ((uint16_t *)cmem)[f];
   1692c:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
   16930:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   16932:	f013 0f01 	tst.w	r3, #1
   16936:	d00e      	beq.n	16956 <free_chunk+0x4a>
	free_list_add(h, c);
   16938:	4629      	mov	r1, r5
   1693a:	4620      	mov	r0, r4
   1693c:	f7ff ffda 	bl	168f4 <free_list_add>
}
   16940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		free_list_remove(h, right_chunk(h, c));
   16942:	f7ff ffcb 	bl	168dc <free_list_remove>
   16946:	5be2      	ldrh	r2, [r4, r7]
		merge_chunks(h, c, right_chunk(h, c));
   16948:	eb05 0252 	add.w	r2, r5, r2, lsr #1
   1694c:	4629      	mov	r1, r5
   1694e:	4620      	mov	r0, r4
   16950:	f7ff ffa6 	bl	168a0 <merge_chunks>
   16954:	e7e8      	b.n	16928 <free_chunk+0x1c>
		free_list_remove(h, left_chunk(h, c));
   16956:	4620      	mov	r0, r4
   16958:	f7ff ffc0 	bl	168dc <free_list_remove>
   1695c:	5ba1      	ldrh	r1, [r4, r6]
		merge_chunks(h, left_chunk(h, c), c);
   1695e:	462a      	mov	r2, r5
   16960:	1a69      	subs	r1, r5, r1
   16962:	4620      	mov	r0, r4
   16964:	f7ff ff9c 	bl	168a0 <merge_chunks>
   16968:	5ba3      	ldrh	r3, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   1696a:	1aed      	subs	r5, r5, r3
   1696c:	e7e4      	b.n	16938 <free_chunk+0x2c>

0001696e <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   1696e:	b570      	push	{r4, r5, r6, lr}
	return 31 - __builtin_clz(usable_sz);
   16970:	fab1 f381 	clz	r3, r1
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   16974:	f1c3 0423 	rsb	r4, r3, #35	; 0x23
   16978:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
   1697c:	b1cd      	cbz	r5, 169b2 <alloc_chunk+0x44>
   1697e:	f1c3 021f 	rsb	r2, r3, #31
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
   16982:	f04f 0e03 	mov.w	lr, #3
		do {
			chunkid_t c = b->next;
   16986:	1d14      	adds	r4, r2, #4
   16988:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
	void *cmem = &buf[c];
   1698c:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
		return ((uint16_t *)cmem)[f];
   16990:	eb00 06c4 	add.w	r6, r0, r4, lsl #3
   16994:	8876      	ldrh	r6, [r6, #2]
			if (chunk_size(h, c) >= sz) {
   16996:	ebb1 0f56 	cmp.w	r1, r6, lsr #1
   1699a:	d914      	bls.n	169c6 <alloc_chunk+0x58>
   1699c:	4484      	add	ip, r0
   1699e:	f8bc 4006 	ldrh.w	r4, [ip, #6]
				free_list_remove_bidx(h, c, bi);
				return c;
			}
			b->next = next_free_chunk(h, c);
   169a2:	1d16      	adds	r6, r2, #4
   169a4:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
			CHECK(b->next != 0);
		} while (--i && b->next != first);
   169a8:	f1be 0e01 	subs.w	lr, lr, #1
   169ac:	d001      	beq.n	169b2 <alloc_chunk+0x44>
   169ae:	42a5      	cmp	r5, r4
   169b0:	d1e9      	bne.n	16986 <alloc_chunk+0x18>
	}

	/* Otherwise pick the smallest non-empty bucket guaranteed to
	 * fit and use that unconditionally.
	 */
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   169b2:	68c4      	ldr	r4, [r0, #12]
   169b4:	f1c3 0220 	rsb	r2, r3, #32
   169b8:	2301      	movs	r3, #1
   169ba:	4093      	lsls	r3, r2
   169bc:	425b      	negs	r3, r3

	if (bmask != 0U) {
   169be:	401c      	ands	r4, r3
   169c0:	d105      	bne.n	169ce <alloc_chunk+0x60>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   169c2:	4620      	mov	r0, r4
   169c4:	bd70      	pop	{r4, r5, r6, pc}
				free_list_remove_bidx(h, c, bi);
   169c6:	4621      	mov	r1, r4
   169c8:	f7ff ff07 	bl	167da <free_list_remove_bidx>
				return c;
   169cc:	e7f9      	b.n	169c2 <alloc_chunk+0x54>
		int minbucket = __builtin_ctz(bmask);
   169ce:	fa94 f2a4 	rbit	r2, r4
   169d2:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   169d6:	1d13      	adds	r3, r2, #4
   169d8:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   169dc:	4621      	mov	r1, r4
   169de:	f7ff fefc 	bl	167da <free_list_remove_bidx>
		return c;
   169e2:	e7ee      	b.n	169c2 <alloc_chunk+0x54>

000169e4 <sys_heap_free>:
	if (mem == NULL) {
   169e4:	b179      	cbz	r1, 16a06 <sys_heap_free+0x22>
{
   169e6:	b510      	push	{r4, lr}
	struct z_heap *h = heap->heap;
   169e8:	6804      	ldr	r4, [r0, #0]
	chunkid_t c = mem_to_chunkid(h, mem);
   169ea:	4620      	mov	r0, r4
   169ec:	f7ff ff72 	bl	168d4 <mem_to_chunkid>
   169f0:	4601      	mov	r1, r0
	void *cmem = &buf[c];
   169f2:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   169f6:	8853      	ldrh	r3, [r2, #2]
   169f8:	f023 0301 	bic.w	r3, r3, #1
   169fc:	8053      	strh	r3, [r2, #2]
	free_chunk(h, c);
   169fe:	4620      	mov	r0, r4
   16a00:	f7ff ff84 	bl	1690c <free_chunk>
}
   16a04:	bd10      	pop	{r4, pc}
   16a06:	4770      	bx	lr

00016a08 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   16a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct z_heap *h = heap->heap;
   16a0a:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   16a0c:	b341      	cbz	r1, 16a60 <sys_heap_alloc+0x58>
   16a0e:	460b      	mov	r3, r1
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   16a10:	68aa      	ldr	r2, [r5, #8]
   16a12:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
   16a16:	d925      	bls.n	16a64 <sys_heap_alloc+0x5c>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   16a18:	330b      	adds	r3, #11
   16a1a:	08dc      	lsrs	r4, r3, #3
		return NULL;
	}

	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
	chunkid_t c = alloc_chunk(h, chunk_sz);
   16a1c:	4621      	mov	r1, r4
   16a1e:	4628      	mov	r0, r5
   16a20:	f7ff ffa5 	bl	1696e <alloc_chunk>
	if (c == 0U) {
   16a24:	4607      	mov	r7, r0
   16a26:	b1f8      	cbz	r0, 16a68 <sys_heap_alloc+0x60>
	void *cmem = &buf[c];
   16a28:	00c6      	lsls	r6, r0, #3
		return ((uint16_t *)cmem)[f];
   16a2a:	eb05 03c0 	add.w	r3, r5, r0, lsl #3
   16a2e:	885b      	ldrh	r3, [r3, #2]
		return NULL;
	}

	/* Split off remainder if any */
	if (chunk_size(h, c) > chunk_sz) {
   16a30:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
   16a34:	d309      	bcc.n	16a4a <sys_heap_alloc+0x42>
	void *cmem = &buf[c];
   16a36:	19ab      	adds	r3, r5, r6
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   16a38:	885a      	ldrh	r2, [r3, #2]
   16a3a:	f042 0201 	orr.w	r2, r2, #1
   16a3e:	805a      	strh	r2, [r3, #2]
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);

	mem = chunk_mem(h, c);
   16a40:	4639      	mov	r1, r7
   16a42:	4628      	mov	r0, r5
   16a44:	f7ff fec5 	bl	167d2 <chunk_mem>
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   16a48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		split_chunks(h, c, c + chunk_sz);
   16a4a:	4404      	add	r4, r0
   16a4c:	4622      	mov	r2, r4
   16a4e:	4601      	mov	r1, r0
   16a50:	4628      	mov	r0, r5
   16a52:	f7ff ff08 	bl	16866 <split_chunks>
		free_list_add(h, c + chunk_sz);
   16a56:	4621      	mov	r1, r4
   16a58:	4628      	mov	r0, r5
   16a5a:	f7ff ff4b 	bl	168f4 <free_list_add>
   16a5e:	e7ea      	b.n	16a36 <sys_heap_alloc+0x2e>
		return NULL;
   16a60:	2000      	movs	r0, #0
   16a62:	e7f1      	b.n	16a48 <sys_heap_alloc+0x40>
   16a64:	2000      	movs	r0, #0
   16a66:	e7ef      	b.n	16a48 <sys_heap_alloc+0x40>
		return NULL;
   16a68:	2000      	movs	r0, #0
   16a6a:	e7ed      	b.n	16a48 <sys_heap_alloc+0x40>

00016a6c <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   16a6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16a70:	4615      	mov	r5, r2
	struct z_heap *h = heap->heap;
   16a72:	6806      	ldr	r6, [r0, #0]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   16a74:	424b      	negs	r3, r1
   16a76:	400b      	ands	r3, r1
	if (align != rew) {
   16a78:	f101 39ff 	add.w	r9, r1, #4294967295
   16a7c:	ea19 0901 	ands.w	r9, r9, r1
   16a80:	d004      	beq.n	16a8c <sys_heap_aligned_alloc+0x20>
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   16a82:	2b03      	cmp	r3, #3
   16a84:	d847      	bhi.n	16b16 <sys_heap_aligned_alloc+0xaa>
		align -= rew;
   16a86:	464c      	mov	r4, r9
	rew = align & -align;
   16a88:	4699      	mov	r9, r3
   16a8a:	e003      	b.n	16a94 <sys_heap_aligned_alloc+0x28>
   16a8c:	460c      	mov	r4, r1
	} else {
		if (align <= chunk_header_bytes(h)) {
   16a8e:	2904      	cmp	r1, #4
   16a90:	d93c      	bls.n	16b0c <sys_heap_aligned_alloc+0xa0>
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
   16a92:	2304      	movs	r3, #4
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   16a94:	2d00      	cmp	r5, #0
   16a96:	d056      	beq.n	16b46 <sys_heap_aligned_alloc+0xda>
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   16a98:	68b2      	ldr	r2, [r6, #8]
   16a9a:	ebb2 0fd5 	cmp.w	r2, r5, lsr #3
   16a9e:	d955      	bls.n	16b4c <sys_heap_aligned_alloc+0xe0>
	/*
	 * Find a free block that is guaranteed to fit.
	 * We over-allocate to account for alignment and then free
	 * the extra allocations afterwards.
	 */
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   16aa0:	1961      	adds	r1, r4, r5
   16aa2:	1ac9      	subs	r1, r1, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   16aa4:	310b      	adds	r1, #11
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   16aa6:	08c9      	lsrs	r1, r1, #3
   16aa8:	4630      	mov	r0, r6
   16aaa:	f7ff ff60 	bl	1696e <alloc_chunk>

	if (c0 == 0) {
   16aae:	4607      	mov	r7, r0
   16ab0:	2800      	cmp	r0, #0
   16ab2:	d04e      	beq.n	16b52 <sys_heap_aligned_alloc+0xe6>
		return NULL;
	}
	uint8_t *mem = chunk_mem(h, c0);
   16ab4:	4601      	mov	r1, r0
   16ab6:	4630      	mov	r0, r6
   16ab8:	f7ff fe8b 	bl	167d2 <chunk_mem>

	/* Align allocated memory */
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   16abc:	eb00 0809 	add.w	r8, r0, r9
   16ac0:	44a0      	add	r8, r4
   16ac2:	f108 38ff 	add.w	r8, r8, #4294967295
   16ac6:	4264      	negs	r4, r4
   16ac8:	ea08 0804 	and.w	r8, r8, r4
   16acc:	eba8 0809 	sub.w	r8, r8, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   16ad0:	eb08 0405 	add.w	r4, r8, r5
   16ad4:	3407      	adds	r4, #7
   16ad6:	f024 0407 	bic.w	r4, r4, #7

	/* Get corresponding chunks */
	chunkid_t c = mem_to_chunkid(h, mem);
   16ada:	4641      	mov	r1, r8
   16adc:	4630      	mov	r0, r6
   16ade:	f7ff fef9 	bl	168d4 <mem_to_chunkid>
   16ae2:	4605      	mov	r5, r0
	chunkid_t c_end = end - chunk_buf(h);
   16ae4:	1ba4      	subs	r4, r4, r6
   16ae6:	10e4      	asrs	r4, r4, #3
	CHECK(c >= c0 && c  < c_end && c_end <= c0 + padded_sz);

	/* Split and free unused prefix */
	if (c > c0) {
   16ae8:	4287      	cmp	r7, r0
   16aea:	d318      	bcc.n	16b1e <sys_heap_aligned_alloc+0xb2>
	void *cmem = &buf[c];
   16aec:	00ef      	lsls	r7, r5, #3
		return ((uint16_t *)cmem)[f];
   16aee:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
   16af2:	885b      	ldrh	r3, [r3, #2]
	return c + chunk_size(h, c);
   16af4:	eb05 0353 	add.w	r3, r5, r3, lsr #1
		split_chunks(h, c0, c);
		free_list_add(h, c0);
	}

	/* Split and free unused suffix */
	if (right_chunk(h, c) > c_end) {
   16af8:	429c      	cmp	r4, r3
   16afa:	d31a      	bcc.n	16b32 <sys_heap_aligned_alloc+0xc6>
	void *cmem = &buf[c];
   16afc:	443e      	add	r6, r7
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   16afe:	8873      	ldrh	r3, [r6, #2]
   16b00:	f043 0301 	orr.w	r3, r3, #1
   16b04:	8073      	strh	r3, [r6, #2]
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   16b06:	4640      	mov	r0, r8
   16b08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return sys_heap_alloc(heap, bytes);
   16b0c:	4611      	mov	r1, r2
   16b0e:	f7ff ff7b 	bl	16a08 <sys_heap_alloc>
   16b12:	4680      	mov	r8, r0
   16b14:	e7f7      	b.n	16b06 <sys_heap_aligned_alloc+0x9a>
		align -= rew;
   16b16:	464c      	mov	r4, r9
	rew = align & -align;
   16b18:	4699      	mov	r9, r3
		gap = MIN(rew, chunk_header_bytes(h));
   16b1a:	2304      	movs	r3, #4
   16b1c:	e7ba      	b.n	16a94 <sys_heap_aligned_alloc+0x28>
		split_chunks(h, c0, c);
   16b1e:	4602      	mov	r2, r0
   16b20:	4639      	mov	r1, r7
   16b22:	4630      	mov	r0, r6
   16b24:	f7ff fe9f 	bl	16866 <split_chunks>
		free_list_add(h, c0);
   16b28:	4639      	mov	r1, r7
   16b2a:	4630      	mov	r0, r6
   16b2c:	f7ff fee2 	bl	168f4 <free_list_add>
   16b30:	e7dc      	b.n	16aec <sys_heap_aligned_alloc+0x80>
		split_chunks(h, c, c_end);
   16b32:	4622      	mov	r2, r4
   16b34:	4629      	mov	r1, r5
   16b36:	4630      	mov	r0, r6
   16b38:	f7ff fe95 	bl	16866 <split_chunks>
		free_list_add(h, c_end);
   16b3c:	4621      	mov	r1, r4
   16b3e:	4630      	mov	r0, r6
   16b40:	f7ff fed8 	bl	168f4 <free_list_add>
   16b44:	e7da      	b.n	16afc <sys_heap_aligned_alloc+0x90>
		return NULL;
   16b46:	f04f 0800 	mov.w	r8, #0
   16b4a:	e7dc      	b.n	16b06 <sys_heap_aligned_alloc+0x9a>
   16b4c:	f04f 0800 	mov.w	r8, #0
   16b50:	e7d9      	b.n	16b06 <sys_heap_aligned_alloc+0x9a>
		return NULL;
   16b52:	f04f 0800 	mov.w	r8, #0
   16b56:	e7d6      	b.n	16b06 <sys_heap_aligned_alloc+0x9a>

00016b58 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   16b58:	b570      	push	{r4, r5, r6, lr}
   16b5a:	4603      	mov	r3, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   16b5c:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   16b5e:	1dc8      	adds	r0, r1, #7
   16b60:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   16b64:	440a      	add	r2, r1
   16b66:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   16b6a:	1a12      	subs	r2, r2, r0
   16b6c:	08d5      	lsrs	r5, r2, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   16b6e:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
   16b70:	6085      	str	r5, [r0, #8]
	h->avail_buckets = 0;
   16b72:	2300      	movs	r3, #0
   16b74:	60c3      	str	r3, [r0, #12]
	return 31 - __builtin_clz(usable_sz);
   16b76:	fab5 f185 	clz	r1, r5
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   16b7a:	f1c1 0e20 	rsb	lr, r1, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   16b7e:	f1c1 0124 	rsb	r1, r1, #36	; 0x24
   16b82:	0089      	lsls	r1, r1, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   16b84:	1dce      	adds	r6, r1, #7
   16b86:	08f1      	lsrs	r1, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   16b88:	e005      	b.n	16b96 <sys_heap_init+0x3e>
		h->buckets[i].next = 0;
   16b8a:	f103 0c04 	add.w	ip, r3, #4
   16b8e:	2400      	movs	r4, #0
   16b90:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
   16b94:	3301      	adds	r3, #1
   16b96:	4573      	cmp	r3, lr
   16b98:	dbf7      	blt.n	16b8a <sys_heap_init+0x32>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   16b9a:	004c      	lsls	r4, r1, #1
		((uint16_t *)cmem)[f] = val;
   16b9c:	b2a4      	uxth	r4, r4
   16b9e:	8044      	strh	r4, [r0, #2]
   16ba0:	f04f 0c00 	mov.w	ip, #0
   16ba4:	f8a0 c000 	strh.w	ip, [r0]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   16ba8:	f044 0401 	orr.w	r4, r4, #1
   16bac:	8044      	strh	r4, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   16bae:	1a6b      	subs	r3, r5, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   16bb0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
	void *cmem = &buf[c];
   16bb4:	f026 0407 	bic.w	r4, r6, #7
		((uint16_t *)cmem)[f] = val;
   16bb8:	1ca5      	adds	r5, r4, #2
   16bba:	f820 e005 	strh.w	lr, [r0, r5]
   16bbe:	5301      	strh	r1, [r0, r4]
	void *cmem = &buf[c];
   16bc0:	f022 0407 	bic.w	r4, r2, #7
		((uint16_t *)cmem)[f] = val;
   16bc4:	1c95      	adds	r5, r2, #2
   16bc6:	f820 c005 	strh.w	ip, [r0, r5]
   16bca:	4402      	add	r2, r0
   16bcc:	5303      	strh	r3, [r0, r4]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   16bce:	8853      	ldrh	r3, [r2, #2]
   16bd0:	f043 0301 	orr.w	r3, r3, #1
   16bd4:	8053      	strh	r3, [r2, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   16bd6:	f7ff fe8d 	bl	168f4 <free_list_add>
}
   16bda:	bd70      	pop	{r4, r5, r6, pc}

00016bdc <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
   16bdc:	f001 0107 	and.w	r1, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   16be0:	8b03      	ldrh	r3, [r0, #24]
   16be2:	f023 0307 	bic.w	r3, r3, #7
   16be6:	430b      	orrs	r3, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   16be8:	8303      	strh	r3, [r0, #24]
}
   16bea:	4770      	bx	lr

00016bec <notify_monitors>:
{
   16bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16bf0:	4606      	mov	r6, r0
   16bf2:	460f      	mov	r7, r1
   16bf4:	4690      	mov	r8, r2
	return list->head;
   16bf6:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   16bf8:	b121      	cbz	r1, 16c04 <notify_monitors+0x18>
	return node->next;
   16bfa:	680c      	ldr	r4, [r1, #0]
   16bfc:	b13c      	cbz	r4, 16c0e <notify_monitors+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   16bfe:	b931      	cbnz	r1, 16c0e <notify_monitors+0x22>
   16c00:	460c      	mov	r4, r1
   16c02:	e004      	b.n	16c0e <notify_monitors+0x22>
   16c04:	460c      	mov	r4, r1
   16c06:	e002      	b.n	16c0e <notify_monitors+0x22>
   16c08:	4623      	mov	r3, r4
   16c0a:	4621      	mov	r1, r4
   16c0c:	461c      	mov	r4, r3
   16c0e:	b169      	cbz	r1, 16c2c <notify_monitors+0x40>
		mon->callback(mgr, mon, state, res);
   16c10:	684d      	ldr	r5, [r1, #4]
   16c12:	4643      	mov	r3, r8
   16c14:	463a      	mov	r2, r7
   16c16:	4630      	mov	r0, r6
   16c18:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   16c1a:	2c00      	cmp	r4, #0
   16c1c:	d0f4      	beq.n	16c08 <notify_monitors+0x1c>
	return node->next;
   16c1e:	6823      	ldr	r3, [r4, #0]
   16c20:	2b00      	cmp	r3, #0
   16c22:	d0f2      	beq.n	16c0a <notify_monitors+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   16c24:	2c00      	cmp	r4, #0
   16c26:	d1f0      	bne.n	16c0a <notify_monitors+0x1e>
   16c28:	4623      	mov	r3, r4
   16c2a:	e7ee      	b.n	16c0a <notify_monitors+0x1e>
}
   16c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00016c30 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   16c30:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   16c32:	f013 0307 	ands.w	r3, r3, #7
   16c36:	d103      	bne.n	16c40 <process_recheck+0x10>
	return list->head;
   16c38:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
   16c3a:	b10a      	cbz	r2, 16c40 <process_recheck+0x10>
		evt = EVT_START;
   16c3c:	2003      	movs	r0, #3
   16c3e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   16c40:	2b02      	cmp	r3, #2
   16c42:	d003      	beq.n	16c4c <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
   16c44:	2b01      	cmp	r3, #1
   16c46:	d006      	beq.n	16c56 <process_recheck+0x26>
	int evt = EVT_NOP;
   16c48:	2000      	movs	r0, #0
   16c4a:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
   16c4c:	8b42      	ldrh	r2, [r0, #26]
   16c4e:	2a00      	cmp	r2, #0
   16c50:	d1f8      	bne.n	16c44 <process_recheck+0x14>
		evt = EVT_STOP;
   16c52:	2004      	movs	r0, #4
   16c54:	4770      	bx	lr
   16c56:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
   16c58:	b10b      	cbz	r3, 16c5e <process_recheck+0x2e>
		evt = EVT_RESET;
   16c5a:	2005      	movs	r0, #5
}
   16c5c:	4770      	bx	lr
	int evt = EVT_NOP;
   16c5e:	2000      	movs	r0, #0
   16c60:	4770      	bx	lr

00016c62 <process_complete>:
{
   16c62:	b510      	push	{r4, lr}
   16c64:	4604      	mov	r4, r0
   16c66:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   16c68:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
   16c6a:	2a00      	cmp	r2, #0
   16c6c:	db07      	blt.n	16c7e <process_complete+0x1c>
   16c6e:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   16c72:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   16c74:	2a01      	cmp	r2, #1
   16c76:	d90e      	bls.n	16c96 <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
   16c78:	2b04      	cmp	r3, #4
   16c7a:	d036      	beq.n	16cea <process_complete+0x88>
}
   16c7c:	bd10      	pop	{r4, pc}
		*clients = mgr->clients;
   16c7e:	e9d0 0100 	ldrd	r0, r1, [r0]
   16c82:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
   16c86:	2300      	movs	r3, #0
   16c88:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
   16c8a:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
   16c8c:	2101      	movs	r1, #1
   16c8e:	4620      	mov	r0, r4
   16c90:	f7ff ffa4 	bl	16bdc <set_state>
   16c94:	e7f2      	b.n	16c7c <process_complete+0x1a>
		*clients = mgr->clients;
   16c96:	e9d0 0100 	ldrd	r0, r1, [r0]
   16c9a:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
   16c9e:	2200      	movs	r2, #0
   16ca0:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
   16ca2:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
   16ca4:	2b06      	cmp	r3, #6
   16ca6:	d11b      	bne.n	16ce0 <process_complete+0x7e>
	return list->head;
   16ca8:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   16cac:	b153      	cbz	r3, 16cc4 <process_complete+0x62>
				mgr->refs += 1U;
   16cae:	8b62      	ldrh	r2, [r4, #26]
   16cb0:	3201      	adds	r2, #1
   16cb2:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   16cb4:	461a      	mov	r2, r3
	return node->next;
   16cb6:	681b      	ldr	r3, [r3, #0]
   16cb8:	2b00      	cmp	r3, #0
   16cba:	d0f7      	beq.n	16cac <process_complete+0x4a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   16cbc:	2a00      	cmp	r2, #0
   16cbe:	d1f5      	bne.n	16cac <process_complete+0x4a>
   16cc0:	4613      	mov	r3, r2
   16cc2:	e7f3      	b.n	16cac <process_complete+0x4a>
			set_state(mgr, ONOFF_STATE_ON);
   16cc4:	2102      	movs	r1, #2
   16cc6:	4620      	mov	r0, r4
   16cc8:	f7ff ff88 	bl	16bdc <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   16ccc:	4620      	mov	r0, r4
   16cce:	f7ff ffaf 	bl	16c30 <process_recheck>
   16cd2:	2800      	cmp	r0, #0
   16cd4:	d0d2      	beq.n	16c7c <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   16cd6:	8b23      	ldrh	r3, [r4, #24]
   16cd8:	f043 0320 	orr.w	r3, r3, #32
   16cdc:	8323      	strh	r3, [r4, #24]
   16cde:	e7cd      	b.n	16c7c <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
   16ce0:	2100      	movs	r1, #0
   16ce2:	4620      	mov	r0, r4
   16ce4:	f7ff ff7a 	bl	16bdc <set_state>
   16ce8:	e7f0      	b.n	16ccc <process_complete+0x6a>
		set_state(mgr, ONOFF_STATE_OFF);
   16cea:	2100      	movs	r1, #0
   16cec:	f7ff ff76 	bl	16bdc <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   16cf0:	4620      	mov	r0, r4
   16cf2:	f7ff ff9d 	bl	16c30 <process_recheck>
   16cf6:	2800      	cmp	r0, #0
   16cf8:	d0c0      	beq.n	16c7c <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   16cfa:	8b23      	ldrh	r3, [r4, #24]
   16cfc:	f043 0320 	orr.w	r3, r3, #32
   16d00:	8323      	strh	r3, [r4, #24]
}
   16d02:	e7bb      	b.n	16c7c <process_complete+0x1a>

00016d04 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
   16d04:	b150      	cbz	r0, 16d1c <validate_args+0x18>
{
   16d06:	b510      	push	{r4, lr}
   16d08:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   16d0a:	b151      	cbz	r1, 16d22 <validate_args+0x1e>
	int rv = sys_notify_validate(&cli->notify);
   16d0c:	1d08      	adds	r0, r1, #4
   16d0e:	f000 f8c4 	bl	16e9a <sys_notify_validate>
	if ((rv == 0)
   16d12:	b910      	cbnz	r0, 16d1a <validate_args+0x16>
	    && ((cli->notify.flags
   16d14:	68a3      	ldr	r3, [r4, #8]
   16d16:	2b03      	cmp	r3, #3
   16d18:	d806      	bhi.n	16d28 <validate_args+0x24>
}
   16d1a:	bd10      	pop	{r4, pc}
		return -EINVAL;
   16d1c:	f06f 0015 	mvn.w	r0, #21
}
   16d20:	4770      	bx	lr
		return -EINVAL;
   16d22:	f06f 0015 	mvn.w	r0, #21
   16d26:	e7f8      	b.n	16d1a <validate_args+0x16>
		rv = -EINVAL;
   16d28:	f06f 0015 	mvn.w	r0, #21
   16d2c:	e7f5      	b.n	16d1a <validate_args+0x16>

00016d2e <notify_one>:
{
   16d2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16d32:	4607      	mov	r7, r0
   16d34:	460c      	mov	r4, r1
   16d36:	4616      	mov	r6, r2
   16d38:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   16d3a:	4619      	mov	r1, r3
   16d3c:	1d20      	adds	r0, r4, #4
   16d3e:	f000 f8cb 	bl	16ed8 <sys_notify_finalize>
	if (cb) {
   16d42:	b128      	cbz	r0, 16d50 <notify_one+0x22>
   16d44:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
   16d46:	462b      	mov	r3, r5
   16d48:	4632      	mov	r2, r6
   16d4a:	4621      	mov	r1, r4
   16d4c:	4638      	mov	r0, r7
   16d4e:	47c0      	blx	r8
}
   16d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00016d54 <notify_all>:
{
   16d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16d58:	4680      	mov	r8, r0
   16d5a:	460c      	mov	r4, r1
   16d5c:	4617      	mov	r7, r2
   16d5e:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
   16d60:	e004      	b.n	16d6c <notify_all+0x18>
		notify_one(mgr, cli, state, res);
   16d62:	4633      	mov	r3, r6
   16d64:	463a      	mov	r2, r7
   16d66:	4640      	mov	r0, r8
   16d68:	f7ff ffe1 	bl	16d2e <notify_one>
	return list->head;
   16d6c:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
   16d6e:	b131      	cbz	r1, 16d7e <notify_all+0x2a>
	return node->next;
   16d70:	680d      	ldr	r5, [r1, #0]
	list->head = node;
   16d72:	6025      	str	r5, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   16d74:	6863      	ldr	r3, [r4, #4]
   16d76:	428b      	cmp	r3, r1
   16d78:	d1f3      	bne.n	16d62 <notify_all+0xe>
	list->tail = node;
   16d7a:	6065      	str	r5, [r4, #4]
}
   16d7c:	e7f1      	b.n	16d62 <notify_all+0xe>
}
   16d7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00016d82 <transition_complete>:
{
   16d82:	b508      	push	{r3, lr}
	__asm__ volatile(
   16d84:	f04f 0c20 	mov.w	ip, #32
   16d88:	f3ef 8211 	mrs	r2, BASEPRI
   16d8c:	f38c 8812 	msr	BASEPRI_MAX, ip
   16d90:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   16d94:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
   16d96:	2101      	movs	r1, #1
   16d98:	f7ec f87c 	bl	2e94 <process_event>
}
   16d9c:	bd08      	pop	{r3, pc}

00016d9e <onoff_manager_init>:
	if ((mgr == NULL)
   16d9e:	4603      	mov	r3, r0
   16da0:	b170      	cbz	r0, 16dc0 <onoff_manager_init+0x22>
	    || (transitions == NULL)
   16da2:	b181      	cbz	r1, 16dc6 <onoff_manager_init+0x28>
	    || (transitions->start == NULL)
   16da4:	680a      	ldr	r2, [r1, #0]
   16da6:	b18a      	cbz	r2, 16dcc <onoff_manager_init+0x2e>
	    || (transitions->stop == NULL)) {
   16da8:	684a      	ldr	r2, [r1, #4]
   16daa:	b192      	cbz	r2, 16dd2 <onoff_manager_init+0x34>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   16dac:	2000      	movs	r0, #0
   16dae:	6018      	str	r0, [r3, #0]
   16db0:	6058      	str	r0, [r3, #4]
   16db2:	6098      	str	r0, [r3, #8]
   16db4:	60d8      	str	r0, [r3, #12]
   16db6:	6118      	str	r0, [r3, #16]
   16db8:	6158      	str	r0, [r3, #20]
   16dba:	6198      	str	r0, [r3, #24]
   16dbc:	6119      	str	r1, [r3, #16]
	return 0;
   16dbe:	4770      	bx	lr
		return -EINVAL;
   16dc0:	f06f 0015 	mvn.w	r0, #21
   16dc4:	4770      	bx	lr
   16dc6:	f06f 0015 	mvn.w	r0, #21
   16dca:	4770      	bx	lr
   16dcc:	f06f 0015 	mvn.w	r0, #21
   16dd0:	4770      	bx	lr
   16dd2:	f06f 0015 	mvn.w	r0, #21
}
   16dd6:	4770      	bx	lr

00016dd8 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   16dd8:	b570      	push	{r4, r5, r6, lr}
   16dda:	4605      	mov	r5, r0
   16ddc:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   16dde:	f7ff ff91 	bl	16d04 <validate_args>

	if (rv < 0) {
   16de2:	1e04      	subs	r4, r0, #0
   16de4:	db30      	blt.n	16e48 <onoff_request+0x70>
   16de6:	f04f 0320 	mov.w	r3, #32
   16dea:	f3ef 8211 	mrs	r2, BASEPRI
   16dee:	f383 8812 	msr	BASEPRI_MAX, r3
   16df2:	f3bf 8f6f 	isb	sy
   16df6:	4696      	mov	lr, r2
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   16df8:	f8b5 c018 	ldrh.w	ip, [r5, #24]
   16dfc:	f00c 0c07 	and.w	ip, ip, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   16e00:	8b6b      	ldrh	r3, [r5, #26]
   16e02:	f64f 71ff 	movw	r1, #65535	; 0xffff
   16e06:	428b      	cmp	r3, r1
   16e08:	d02c      	beq.n	16e64 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
   16e0a:	4664      	mov	r4, ip
	if (state == ONOFF_STATE_ON) {
   16e0c:	f1bc 0f02 	cmp.w	ip, #2
   16e10:	d008      	beq.n	16e24 <onoff_request+0x4c>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
   16e12:	f1bc 0f06 	cmp.w	ip, #6
   16e16:	d819      	bhi.n	16e4c <onoff_request+0x74>
   16e18:	e8df f00c 	tbb	[pc, ip]
   16e1c:	1818181e 	.word	0x1818181e
   16e20:	2a1e      	.short	0x2a1e
   16e22:	1e          	.byte	0x1e
   16e23:	00          	.byte	0x00
		mgr->refs += 1U;
   16e24:	3301      	adds	r3, #1
   16e26:	836b      	strh	r3, [r5, #26]
		notify = true;
   16e28:	2301      	movs	r3, #1
	bool start = false;             /* trigger a start transition */
   16e2a:	2100      	movs	r1, #0
	bool add_client = false;        /* add client to pending list */
   16e2c:	4608      	mov	r0, r1
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
	}

out:
	if (add_client) {
   16e2e:	b128      	cbz	r0, 16e3c <onoff_request+0x64>
	parent->next = child;
   16e30:	2000      	movs	r0, #0
   16e32:	6030      	str	r0, [r6, #0]
	return list->tail;
   16e34:	6868      	ldr	r0, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   16e36:	b308      	cbz	r0, 16e7c <onoff_request+0xa4>
	parent->next = child;
   16e38:	6006      	str	r6, [r0, #0]
	list->tail = node;
   16e3a:	606e      	str	r6, [r5, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
   16e3c:	bb09      	cbnz	r1, 16e82 <onoff_request+0xaa>
	__asm__ volatile(
   16e3e:	f38e 8811 	msr	BASEPRI, lr
   16e42:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   16e46:	bb0b      	cbnz	r3, 16e8c <onoff_request+0xb4>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   16e48:	4620      	mov	r0, r4
   16e4a:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   16e4c:	f06f 0404 	mvn.w	r4, #4
   16e50:	2300      	movs	r3, #0
   16e52:	4619      	mov	r1, r3
   16e54:	4618      	mov	r0, r3
   16e56:	e7ea      	b.n	16e2e <onoff_request+0x56>
		start = (state == ONOFF_STATE_OFF);
   16e58:	fabc f18c 	clz	r1, ip
   16e5c:	0949      	lsrs	r1, r1, #5
	bool notify = false;            /* do client notification */
   16e5e:	2300      	movs	r3, #0
		add_client = true;
   16e60:	2001      	movs	r0, #1
   16e62:	e7e4      	b.n	16e2e <onoff_request+0x56>
		rv = -EAGAIN;
   16e64:	f06f 040a 	mvn.w	r4, #10
	bool notify = false;            /* do client notification */
   16e68:	2300      	movs	r3, #0
	bool start = false;             /* trigger a start transition */
   16e6a:	4619      	mov	r1, r3
	bool add_client = false;        /* add client to pending list */
   16e6c:	4618      	mov	r0, r3
   16e6e:	e7de      	b.n	16e2e <onoff_request+0x56>
	if (state == ONOFF_STATE_ON) {
   16e70:	f06f 0485 	mvn.w	r4, #133	; 0x85
   16e74:	2300      	movs	r3, #0
   16e76:	4619      	mov	r1, r3
   16e78:	4618      	mov	r0, r3
   16e7a:	e7d8      	b.n	16e2e <onoff_request+0x56>
   16e7c:	606e      	str	r6, [r5, #4]
	list->head = node;
   16e7e:	602e      	str	r6, [r5, #0]
}
   16e80:	e7dc      	b.n	16e3c <onoff_request+0x64>
		process_event(mgr, EVT_RECHECK, key);
   16e82:	2102      	movs	r1, #2
   16e84:	4628      	mov	r0, r5
   16e86:	f7ec f805 	bl	2e94 <process_event>
   16e8a:	e7dd      	b.n	16e48 <onoff_request+0x70>
			notify_one(mgr, cli, state, 0);
   16e8c:	2300      	movs	r3, #0
   16e8e:	4662      	mov	r2, ip
   16e90:	4631      	mov	r1, r6
   16e92:	4628      	mov	r0, r5
   16e94:	f7ff ff4b 	bl	16d2e <notify_one>
   16e98:	e7d6      	b.n	16e48 <onoff_request+0x70>

00016e9a <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   16e9a:	4602      	mov	r2, r0
   16e9c:	b1b0      	cbz	r0, 16ecc <sys_notify_validate+0x32>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   16e9e:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   16ea0:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   16ea4:	2b02      	cmp	r3, #2
   16ea6:	d00b      	beq.n	16ec0 <sys_notify_validate+0x26>
   16ea8:	2b03      	cmp	r3, #3
   16eaa:	d004      	beq.n	16eb6 <sys_notify_validate+0x1c>
   16eac:	2b01      	cmp	r3, #1
   16eae:	d004      	beq.n	16eba <sys_notify_validate+0x20>
   16eb0:	f06f 0015 	mvn.w	r0, #21
   16eb4:	4770      	bx	lr
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   16eb6:	6803      	ldr	r3, [r0, #0]
   16eb8:	b15b      	cbz	r3, 16ed2 <sys_notify_validate+0x38>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   16eba:	2000      	movs	r0, #0
   16ebc:	6090      	str	r0, [r2, #8]
   16ebe:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   16ec0:	6803      	ldr	r3, [r0, #0]
   16ec2:	2b00      	cmp	r3, #0
   16ec4:	d1f9      	bne.n	16eba <sys_notify_validate+0x20>
			rv = -EINVAL;
   16ec6:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   16eca:	4770      	bx	lr
		return -EINVAL;
   16ecc:	f06f 0015 	mvn.w	r0, #21
   16ed0:	4770      	bx	lr
			rv = -EINVAL;
   16ed2:	f06f 0015 	mvn.w	r0, #21
   16ed6:	4770      	bx	lr

00016ed8 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   16ed8:	b510      	push	{r4, lr}
   16eda:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   16edc:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   16ede:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   16ee2:	6081      	str	r1, [r0, #8]
	switch (method) {
   16ee4:	2a02      	cmp	r2, #2
   16ee6:	d004      	beq.n	16ef2 <sys_notify_finalize+0x1a>
   16ee8:	2a03      	cmp	r2, #3
   16eea:	d105      	bne.n	16ef8 <sys_notify_finalize+0x20>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   16eec:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   16eee:	2000      	movs	r0, #0
		break;
   16ef0:	e004      	b.n	16efc <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
   16ef2:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   16ef4:	2400      	movs	r4, #0
		break;
   16ef6:	e001      	b.n	16efc <sys_notify_finalize+0x24>
	switch (method) {
   16ef8:	2400      	movs	r4, #0
   16efa:	4620      	mov	r0, r4
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   16efc:	2200      	movs	r2, #0
   16efe:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   16f00:	b108      	cbz	r0, 16f06 <sys_notify_finalize+0x2e>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   16f02:	f7fb fa1d 	bl	12340 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   16f06:	4620      	mov	r0, r4
   16f08:	bd10      	pop	{r4, pc}

00016f0a <extract_width>:
{
   16f0a:	b530      	push	{r4, r5, lr}
   16f0c:	b083      	sub	sp, #12
   16f0e:	4604      	mov	r4, r0
   16f10:	9101      	str	r1, [sp, #4]
	conv->width_present = true;
   16f12:	7803      	ldrb	r3, [r0, #0]
   16f14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   16f18:	7003      	strb	r3, [r0, #0]
	if (*sp == '*') {
   16f1a:	460d      	mov	r5, r1
   16f1c:	780b      	ldrb	r3, [r1, #0]
   16f1e:	2b2a      	cmp	r3, #42	; 0x2a
   16f20:	d018      	beq.n	16f54 <extract_width+0x4a>
	size_t width = extract_decimal(&sp);
   16f22:	a801      	add	r0, sp, #4
   16f24:	f7ec f86c 	bl	3000 <extract_decimal>
	if (sp != wp) {
   16f28:	9b01      	ldr	r3, [sp, #4]
   16f2a:	429d      	cmp	r5, r3
   16f2c:	d00f      	beq.n	16f4e <extract_width+0x44>
		conv->width_present = true;
   16f2e:	7823      	ldrb	r3, [r4, #0]
   16f30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   16f34:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
   16f36:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
   16f38:	b2db      	uxtb	r3, r3
   16f3a:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
   16f3e:	2800      	cmp	r0, #0
   16f40:	db10      	blt.n	16f64 <extract_width+0x5a>
   16f42:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
   16f44:	4313      	orrs	r3, r2
   16f46:	7822      	ldrb	r2, [r4, #0]
   16f48:	f363 0241 	bfi	r2, r3, #1, #1
   16f4c:	7022      	strb	r2, [r4, #0]
	return sp;
   16f4e:	9801      	ldr	r0, [sp, #4]
}
   16f50:	b003      	add	sp, #12
   16f52:	bd30      	pop	{r4, r5, pc}
		conv->width_star = true;
   16f54:	7843      	ldrb	r3, [r0, #1]
   16f56:	f043 0301 	orr.w	r3, r3, #1
   16f5a:	7043      	strb	r3, [r0, #1]
		return ++sp;
   16f5c:	4608      	mov	r0, r1
   16f5e:	3001      	adds	r0, #1
   16f60:	9001      	str	r0, [sp, #4]
   16f62:	e7f5      	b.n	16f50 <extract_width+0x46>
				      || (width != (size_t)conv->width_value));
   16f64:	2201      	movs	r2, #1
   16f66:	e7ed      	b.n	16f44 <extract_width+0x3a>

00016f68 <extract_prec>:
{
   16f68:	b510      	push	{r4, lr}
   16f6a:	b082      	sub	sp, #8
   16f6c:	9101      	str	r1, [sp, #4]
	conv->prec_present = (*sp == '.');
   16f6e:	780b      	ldrb	r3, [r1, #0]
   16f70:	2b2e      	cmp	r3, #46	; 0x2e
   16f72:	bf14      	ite	ne
   16f74:	2300      	movne	r3, #0
   16f76:	2301      	moveq	r3, #1
   16f78:	7842      	ldrb	r2, [r0, #1]
   16f7a:	f363 0241 	bfi	r2, r3, #1, #1
   16f7e:	7042      	strb	r2, [r0, #1]
	if (!conv->prec_present) {
   16f80:	b1c3      	cbz	r3, 16fb4 <extract_prec+0x4c>
   16f82:	4604      	mov	r4, r0
	++sp;
   16f84:	9b01      	ldr	r3, [sp, #4]
   16f86:	1c5a      	adds	r2, r3, #1
   16f88:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
   16f8a:	785b      	ldrb	r3, [r3, #1]
   16f8c:	2b2a      	cmp	r3, #42	; 0x2a
   16f8e:	d013      	beq.n	16fb8 <extract_prec+0x50>
	size_t prec = extract_decimal(&sp);
   16f90:	a801      	add	r0, sp, #4
   16f92:	f7ec f835 	bl	3000 <extract_decimal>
	conv->prec_value = prec;
   16f96:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
   16f98:	7823      	ldrb	r3, [r4, #0]
   16f9a:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
   16f9e:	2800      	cmp	r0, #0
   16fa0:	db12      	blt.n	16fc8 <extract_prec+0x60>
   16fa2:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
   16fa4:	4313      	orrs	r3, r2
   16fa6:	7822      	ldrb	r2, [r4, #0]
   16fa8:	f363 0241 	bfi	r2, r3, #1, #1
   16fac:	7022      	strb	r2, [r4, #0]
	return sp;
   16fae:	9801      	ldr	r0, [sp, #4]
}
   16fb0:	b002      	add	sp, #8
   16fb2:	bd10      	pop	{r4, pc}
		return sp;
   16fb4:	4608      	mov	r0, r1
   16fb6:	e7fb      	b.n	16fb0 <extract_prec+0x48>
		conv->prec_star = true;
   16fb8:	7843      	ldrb	r3, [r0, #1]
   16fba:	f043 0304 	orr.w	r3, r3, #4
   16fbe:	7043      	strb	r3, [r0, #1]
		return ++sp;
   16fc0:	4610      	mov	r0, r2
   16fc2:	3001      	adds	r0, #1
   16fc4:	9001      	str	r0, [sp, #4]
   16fc6:	e7f3      	b.n	16fb0 <extract_prec+0x48>
			      || (prec != (size_t)conv->prec_value));
   16fc8:	2201      	movs	r2, #1
   16fca:	e7eb      	b.n	16fa4 <extract_prec+0x3c>

00016fcc <extract_length>:
{
   16fcc:	4602      	mov	r2, r0
	switch (*sp) {
   16fce:	780b      	ldrb	r3, [r1, #0]
   16fd0:	3b4c      	subs	r3, #76	; 0x4c
   16fd2:	2b2e      	cmp	r3, #46	; 0x2e
   16fd4:	d85b      	bhi.n	1708e <extract_length+0xc2>
   16fd6:	e8df f003 	tbb	[pc, r3]
   16fda:	5a4f      	.short	0x5a4f
   16fdc:	5a5a5a5a 	.word	0x5a5a5a5a
   16fe0:	5a5a5a5a 	.word	0x5a5a5a5a
   16fe4:	5a5a5a5a 	.word	0x5a5a5a5a
   16fe8:	5a5a5a5a 	.word	0x5a5a5a5a
   16fec:	5a5a5a5a 	.word	0x5a5a5a5a
   16ff0:	5a5a5a5a 	.word	0x5a5a5a5a
   16ff4:	5a185a5a 	.word	0x5a185a5a
   16ff8:	5a295a3a 	.word	0x5a295a3a
   16ffc:	5a5a5a5a 	.word	0x5a5a5a5a
   17000:	5a485a5a 	.word	0x5a485a5a
   17004:	5a5a5a5a 	.word	0x5a5a5a5a
   17008:	41          	.byte	0x41
   17009:	00          	.byte	0x00
		if (*++sp == 'h') {
   1700a:	1c48      	adds	r0, r1, #1
   1700c:	784b      	ldrb	r3, [r1, #1]
   1700e:	2b68      	cmp	r3, #104	; 0x68
   17010:	d005      	beq.n	1701e <extract_length+0x52>
			conv->length_mod = LENGTH_H;
   17012:	7853      	ldrb	r3, [r2, #1]
   17014:	2102      	movs	r1, #2
   17016:	f361 03c6 	bfi	r3, r1, #3, #4
   1701a:	7053      	strb	r3, [r2, #1]
   1701c:	4770      	bx	lr
			conv->length_mod = LENGTH_HH;
   1701e:	7853      	ldrb	r3, [r2, #1]
   17020:	2001      	movs	r0, #1
   17022:	f360 03c6 	bfi	r3, r0, #3, #4
   17026:	7053      	strb	r3, [r2, #1]
			++sp;
   17028:	1c88      	adds	r0, r1, #2
   1702a:	4770      	bx	lr
		if (*++sp == 'l') {
   1702c:	1c48      	adds	r0, r1, #1
   1702e:	784b      	ldrb	r3, [r1, #1]
   17030:	2b6c      	cmp	r3, #108	; 0x6c
   17032:	d005      	beq.n	17040 <extract_length+0x74>
			conv->length_mod = LENGTH_L;
   17034:	7853      	ldrb	r3, [r2, #1]
   17036:	2103      	movs	r1, #3
   17038:	f361 03c6 	bfi	r3, r1, #3, #4
   1703c:	7053      	strb	r3, [r2, #1]
   1703e:	4770      	bx	lr
			conv->length_mod = LENGTH_LL;
   17040:	7853      	ldrb	r3, [r2, #1]
   17042:	2004      	movs	r0, #4
   17044:	f360 03c6 	bfi	r3, r0, #3, #4
   17048:	7053      	strb	r3, [r2, #1]
			++sp;
   1704a:	1c88      	adds	r0, r1, #2
   1704c:	4770      	bx	lr
		conv->length_mod = LENGTH_J;
   1704e:	7853      	ldrb	r3, [r2, #1]
   17050:	2005      	movs	r0, #5
   17052:	f360 03c6 	bfi	r3, r0, #3, #4
   17056:	7053      	strb	r3, [r2, #1]
		++sp;
   17058:	1c48      	adds	r0, r1, #1
		break;
   1705a:	4770      	bx	lr
		conv->length_mod = LENGTH_Z;
   1705c:	7853      	ldrb	r3, [r2, #1]
   1705e:	2006      	movs	r0, #6
   17060:	f360 03c6 	bfi	r3, r0, #3, #4
   17064:	7053      	strb	r3, [r2, #1]
		++sp;
   17066:	1c48      	adds	r0, r1, #1
		break;
   17068:	4770      	bx	lr
		conv->length_mod = LENGTH_T;
   1706a:	7853      	ldrb	r3, [r2, #1]
   1706c:	2007      	movs	r0, #7
   1706e:	f360 03c6 	bfi	r3, r0, #3, #4
   17072:	7053      	strb	r3, [r2, #1]
		++sp;
   17074:	1c48      	adds	r0, r1, #1
		break;
   17076:	4770      	bx	lr
		conv->length_mod = LENGTH_UPPER_L;
   17078:	7853      	ldrb	r3, [r2, #1]
   1707a:	2008      	movs	r0, #8
   1707c:	f360 03c6 	bfi	r3, r0, #3, #4
   17080:	7053      	strb	r3, [r2, #1]
		++sp;
   17082:	1c48      	adds	r0, r1, #1
		conv->unsupported = true;
   17084:	7813      	ldrb	r3, [r2, #0]
   17086:	f043 0302 	orr.w	r3, r3, #2
   1708a:	7013      	strb	r3, [r2, #0]
		break;
   1708c:	4770      	bx	lr
		conv->length_mod = LENGTH_NONE;
   1708e:	7853      	ldrb	r3, [r2, #1]
   17090:	f36f 03c6 	bfc	r3, #3, #4
   17094:	7053      	strb	r3, [r2, #1]
		break;
   17096:	4608      	mov	r0, r1
}
   17098:	4770      	bx	lr

0001709a <extract_specifier>:
{
   1709a:	b500      	push	{lr}
   1709c:	4602      	mov	r2, r0
	conv->specifier = *sp++;
   1709e:	4608      	mov	r0, r1
   170a0:	f810 3b01 	ldrb.w	r3, [r0], #1
   170a4:	70d3      	strb	r3, [r2, #3]
	switch (conv->specifier) {
   170a6:	2b78      	cmp	r3, #120	; 0x78
   170a8:	d817      	bhi.n	170da <extract_specifier+0x40>
   170aa:	2b6e      	cmp	r3, #110	; 0x6e
   170ac:	d229      	bcs.n	17102 <extract_specifier+0x68>
   170ae:	2b69      	cmp	r3, #105	; 0x69
   170b0:	d813      	bhi.n	170da <extract_specifier+0x40>
   170b2:	2b58      	cmp	r3, #88	; 0x58
   170b4:	d317      	bcc.n	170e6 <extract_specifier+0x4c>
   170b6:	f1a3 0c58 	sub.w	ip, r3, #88	; 0x58
   170ba:	fa5f fc8c 	uxtb.w	ip, ip
   170be:	2101      	movs	r1, #1
   170c0:	fa01 f10c 	lsl.w	r1, r1, ip
   170c4:	f411 4f62 	tst.w	r1, #57856	; 0xe200
   170c8:	d114      	bne.n	170f4 <extract_specifier+0x5a>
   170ca:	f640 0c01 	movw	ip, #2049	; 0x801
   170ce:	ea11 0f0c 	tst.w	r1, ip
   170d2:	d155      	bne.n	17180 <extract_specifier+0xe6>
   170d4:	f411 3f04 	tst.w	r1, #135168	; 0x21000
   170d8:	d13a      	bne.n	17150 <extract_specifier+0xb6>
		conv->invalid = true;
   170da:	7813      	ldrb	r3, [r2, #0]
   170dc:	f043 0301 	orr.w	r3, r3, #1
   170e0:	7013      	strb	r3, [r2, #0]
	bool unsupported = false;
   170e2:	2100      	movs	r1, #0
		break;
   170e4:	e042      	b.n	1716c <extract_specifier+0xd2>
	switch (conv->specifier) {
   170e6:	2b41      	cmp	r3, #65	; 0x41
   170e8:	d004      	beq.n	170f4 <extract_specifier+0x5a>
   170ea:	d3f6      	bcc.n	170da <extract_specifier+0x40>
   170ec:	3b45      	subs	r3, #69	; 0x45
   170ee:	b2db      	uxtb	r3, r3
   170f0:	2b02      	cmp	r3, #2
   170f2:	d8f2      	bhi.n	170da <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_FP;
   170f4:	7893      	ldrb	r3, [r2, #2]
   170f6:	2104      	movs	r1, #4
   170f8:	f361 0302 	bfi	r3, r1, #0, #3
   170fc:	7093      	strb	r3, [r2, #2]
			unsupported = true;
   170fe:	2101      	movs	r1, #1
			break;
   17100:	e034      	b.n	1716c <extract_specifier+0xd2>
	switch (conv->specifier) {
   17102:	f1a3 016e 	sub.w	r1, r3, #110	; 0x6e
   17106:	b2c9      	uxtb	r1, r1
   17108:	f04f 0c01 	mov.w	ip, #1
   1710c:	fa0c fc01 	lsl.w	ip, ip, r1
   17110:	f240 4182 	movw	r1, #1154	; 0x482
   17114:	ea1c 0f01 	tst.w	ip, r1
   17118:	bf14      	ite	ne
   1711a:	f04f 0e01 	movne.w	lr, #1
   1711e:	f04f 0e00 	moveq.w	lr, #0
   17122:	d12d      	bne.n	17180 <extract_specifier+0xe6>
   17124:	f01c 0f24 	tst.w	ip, #36	; 0x24
   17128:	bf14      	ite	ne
   1712a:	2101      	movne	r1, #1
   1712c:	2100      	moveq	r1, #0
   1712e:	d139      	bne.n	171a4 <extract_specifier+0x10a>
   17130:	f01c 0c01 	ands.w	ip, ip, #1
   17134:	d0d1      	beq.n	170da <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_PTR;
   17136:	7893      	ldrb	r3, [r2, #2]
   17138:	f04f 0e03 	mov.w	lr, #3
   1713c:	f36e 0302 	bfi	r3, lr, #0, #3
   17140:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
   17142:	7853      	ldrb	r3, [r2, #1]
   17144:	f003 0378 	and.w	r3, r3, #120	; 0x78
   17148:	2b40      	cmp	r3, #64	; 0x40
   1714a:	d10f      	bne.n	1716c <extract_specifier+0xd2>
			unsupported = true;
   1714c:	4661      	mov	r1, ip
   1714e:	e00d      	b.n	1716c <extract_specifier+0xd2>
		conv->specifier_cat = SPECIFIER_SINT;
   17150:	7891      	ldrb	r1, [r2, #2]
   17152:	f04f 0c01 	mov.w	ip, #1
   17156:	f36c 0102 	bfi	r1, ip, #0, #3
   1715a:	7091      	strb	r1, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
   1715c:	7851      	ldrb	r1, [r2, #1]
   1715e:	f001 0178 	and.w	r1, r1, #120	; 0x78
   17162:	2940      	cmp	r1, #64	; 0x40
   17164:	d013      	beq.n	1718e <extract_specifier+0xf4>
		if (conv->specifier == 'c') {
   17166:	2b63      	cmp	r3, #99	; 0x63
   17168:	d018      	beq.n	1719c <extract_specifier+0x102>
	bool unsupported = false;
   1716a:	2100      	movs	r1, #0
	conv->unsupported |= unsupported;
   1716c:	7813      	ldrb	r3, [r2, #0]
   1716e:	f3c3 0c40 	ubfx	ip, r3, #1, #1
   17172:	ea41 010c 	orr.w	r1, r1, ip
   17176:	f361 0341 	bfi	r3, r1, #1, #1
   1717a:	7013      	strb	r3, [r2, #0]
}
   1717c:	f85d fb04 	ldr.w	pc, [sp], #4
		conv->specifier_cat = SPECIFIER_UINT;
   17180:	7891      	ldrb	r1, [r2, #2]
   17182:	f04f 0c02 	mov.w	ip, #2
   17186:	f36c 0102 	bfi	r1, ip, #0, #3
   1718a:	7091      	strb	r1, [r2, #2]
   1718c:	e7e6      	b.n	1715c <extract_specifier+0xc2>
			conv->invalid = true;
   1718e:	f892 c000 	ldrb.w	ip, [r2]
   17192:	f04c 0c01 	orr.w	ip, ip, #1
   17196:	f882 c000 	strb.w	ip, [r2]
   1719a:	e7e4      	b.n	17166 <extract_specifier+0xcc>
			unsupported = (conv->length_mod != LENGTH_NONE);
   1719c:	3900      	subs	r1, #0
   1719e:	bf18      	it	ne
   171a0:	2101      	movne	r1, #1
   171a2:	e7e3      	b.n	1716c <extract_specifier+0xd2>
		conv->specifier_cat = SPECIFIER_PTR;
   171a4:	7893      	ldrb	r3, [r2, #2]
   171a6:	f04f 0c03 	mov.w	ip, #3
   171aa:	f36c 0302 	bfi	r3, ip, #0, #3
   171ae:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod != LENGTH_NONE) {
   171b0:	7853      	ldrb	r3, [r2, #1]
   171b2:	f013 0f78 	tst.w	r3, #120	; 0x78
   171b6:	d1d9      	bne.n	1716c <extract_specifier+0xd2>
	bool unsupported = false;
   171b8:	4671      	mov	r1, lr
   171ba:	e7d7      	b.n	1716c <extract_specifier+0xd2>

000171bc <extract_conversion>:
{
   171bc:	b510      	push	{r4, lr}
   171be:	4604      	mov	r4, r0
   171c0:	4608      	mov	r0, r1
	*conv = (struct conversion) {
   171c2:	2300      	movs	r3, #0
   171c4:	6023      	str	r3, [r4, #0]
   171c6:	6063      	str	r3, [r4, #4]
   171c8:	60a3      	str	r3, [r4, #8]
	if (*sp == '%') {
   171ca:	784b      	ldrb	r3, [r1, #1]
   171cc:	2b25      	cmp	r3, #37	; 0x25
   171ce:	d014      	beq.n	171fa <extract_conversion+0x3e>
   171d0:	3101      	adds	r1, #1
	sp = extract_flags(conv, sp);
   171d2:	4620      	mov	r0, r4
   171d4:	f7eb ff2a 	bl	302c <extract_flags>
   171d8:	4601      	mov	r1, r0
	sp = extract_width(conv, sp);
   171da:	4620      	mov	r0, r4
   171dc:	f7ff fe95 	bl	16f0a <extract_width>
   171e0:	4601      	mov	r1, r0
	sp = extract_prec(conv, sp);
   171e2:	4620      	mov	r0, r4
   171e4:	f7ff fec0 	bl	16f68 <extract_prec>
   171e8:	4601      	mov	r1, r0
	sp = extract_length(conv, sp);
   171ea:	4620      	mov	r0, r4
   171ec:	f7ff feee 	bl	16fcc <extract_length>
   171f0:	4601      	mov	r1, r0
	sp = extract_specifier(conv, sp);
   171f2:	4620      	mov	r0, r4
   171f4:	f7ff ff51 	bl	1709a <extract_specifier>
}
   171f8:	bd10      	pop	{r4, pc}
		conv->specifier = *sp++;
   171fa:	3002      	adds	r0, #2
   171fc:	70e3      	strb	r3, [r4, #3]
		return sp;
   171fe:	e7fb      	b.n	171f8 <extract_conversion+0x3c>

00017200 <conversion_radix>:
	switch (specifier) {
   17200:	286f      	cmp	r0, #111	; 0x6f
   17202:	d00c      	beq.n	1721e <conversion_radix+0x1e>
   17204:	d905      	bls.n	17212 <conversion_radix+0x12>
   17206:	2870      	cmp	r0, #112	; 0x70
   17208:	d00b      	beq.n	17222 <conversion_radix+0x22>
   1720a:	2878      	cmp	r0, #120	; 0x78
   1720c:	d10b      	bne.n	17226 <conversion_radix+0x26>
		return 16;
   1720e:	2010      	movs	r0, #16
   17210:	4770      	bx	lr
	switch (specifier) {
   17212:	2858      	cmp	r0, #88	; 0x58
   17214:	d001      	beq.n	1721a <conversion_radix+0x1a>
   17216:	200a      	movs	r0, #10
   17218:	4770      	bx	lr
		return 16;
   1721a:	2010      	movs	r0, #16
   1721c:	4770      	bx	lr
		return 8;
   1721e:	2008      	movs	r0, #8
   17220:	4770      	bx	lr
		return 16;
   17222:	2010      	movs	r0, #16
   17224:	4770      	bx	lr
	switch (specifier) {
   17226:	200a      	movs	r0, #10
}
   17228:	4770      	bx	lr

0001722a <store_count>:
	switch ((enum length_mod_enum)conv->length_mod) {
   1722a:	7843      	ldrb	r3, [r0, #1]
   1722c:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   17230:	2b07      	cmp	r3, #7
   17232:	d818      	bhi.n	17266 <store_count+0x3c>
   17234:	e8df f003 	tbb	[pc, r3]
   17238:	0a080604 	.word	0x0a080604
   1723c:	1614100c 	.word	0x1614100c
		*(int *)dp = count;
   17240:	600a      	str	r2, [r1, #0]
		break;
   17242:	4770      	bx	lr
		*(signed char *)dp = (signed char)count;
   17244:	700a      	strb	r2, [r1, #0]
		break;
   17246:	4770      	bx	lr
		*(short *)dp = (short)count;
   17248:	800a      	strh	r2, [r1, #0]
		break;
   1724a:	4770      	bx	lr
		*(long *)dp = (long)count;
   1724c:	600a      	str	r2, [r1, #0]
		break;
   1724e:	4770      	bx	lr
		*(long long *)dp = (long long)count;
   17250:	17d3      	asrs	r3, r2, #31
   17252:	600a      	str	r2, [r1, #0]
   17254:	604b      	str	r3, [r1, #4]
		break;
   17256:	4770      	bx	lr
		*(intmax_t *)dp = (intmax_t)count;
   17258:	17d3      	asrs	r3, r2, #31
   1725a:	600a      	str	r2, [r1, #0]
   1725c:	604b      	str	r3, [r1, #4]
		break;
   1725e:	4770      	bx	lr
		*(size_t *)dp = (size_t)count;
   17260:	600a      	str	r2, [r1, #0]
		break;
   17262:	4770      	bx	lr
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   17264:	600a      	str	r2, [r1, #0]
}
   17266:	4770      	bx	lr

00017268 <outs>:
{
   17268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1726c:	4607      	mov	r7, r0
   1726e:	460e      	mov	r6, r1
   17270:	4614      	mov	r4, r2
   17272:	4698      	mov	r8, r3
	size_t count = 0;
   17274:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   17276:	e006      	b.n	17286 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
   17278:	4631      	mov	r1, r6
   1727a:	f814 0b01 	ldrb.w	r0, [r4], #1
   1727e:	47b8      	blx	r7
		if (rc < 0) {
   17280:	2800      	cmp	r0, #0
   17282:	db09      	blt.n	17298 <outs+0x30>
		++count;
   17284:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   17286:	4544      	cmp	r4, r8
   17288:	d3f6      	bcc.n	17278 <outs+0x10>
   1728a:	f1b8 0f00 	cmp.w	r8, #0
   1728e:	d102      	bne.n	17296 <outs+0x2e>
   17290:	7823      	ldrb	r3, [r4, #0]
   17292:	2b00      	cmp	r3, #0
   17294:	d1f0      	bne.n	17278 <outs+0x10>
	return (int)count;
   17296:	4628      	mov	r0, r5
}
   17298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001729c <ring_buf_put_claim>:

#include <zephyr/sys/ring_buffer.h>
#include <string.h>

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
   1729c:	b470      	push	{r4, r5, r6}
   1729e:	4603      	mov	r3, r0
	uint32_t free_space, wrap_size;
	int32_t base;

	base = buf->put_base;
   172a0:	68c6      	ldr	r6, [r0, #12]
	wrap_size = buf->put_head - base;
   172a2:	6845      	ldr	r5, [r0, #4]
   172a4:	1ba8      	subs	r0, r5, r6
	if (unlikely(wrap_size >= buf->size)) {
   172a6:	69dc      	ldr	r4, [r3, #28]
   172a8:	4284      	cmp	r4, r0
   172aa:	d915      	bls.n	172d8 <ring_buf_put_claim+0x3c>
		/* put_base is not yet adjusted */
		wrap_size -= buf->size;
		base += buf->size;
	}
	wrap_size = buf->size - wrap_size;
   172ac:	1a20      	subs	r0, r4, r0
 *
 * @return Ring buffer free space (in bytes).
 */
static inline uint32_t ring_buf_space_get(struct ring_buf *buf)
{
	return buf->size - (buf->put_head - buf->get_tail);
   172ae:	f8d3 c014 	ldr.w	ip, [r3, #20]
   172b2:	eba5 0c0c 	sub.w	ip, r5, ip
   172b6:	eba4 040c 	sub.w	r4, r4, ip

	free_space = ring_buf_space_get(buf);
	size = MIN(size, free_space);
   172ba:	42a2      	cmp	r2, r4
   172bc:	bf28      	it	cs
   172be:	4622      	movcs	r2, r4
	size = MIN(size, wrap_size);
   172c0:	4290      	cmp	r0, r2
   172c2:	bf28      	it	cs
   172c4:	4610      	movcs	r0, r2

	*data = &buf->buffer[buf->put_head - base];
   172c6:	681a      	ldr	r2, [r3, #0]
   172c8:	1bad      	subs	r5, r5, r6
   172ca:	442a      	add	r2, r5
   172cc:	600a      	str	r2, [r1, #0]
	buf->put_head += size;
   172ce:	685a      	ldr	r2, [r3, #4]
   172d0:	4402      	add	r2, r0
   172d2:	605a      	str	r2, [r3, #4]

	return size;
}
   172d4:	bc70      	pop	{r4, r5, r6}
   172d6:	4770      	bx	lr
		wrap_size -= buf->size;
   172d8:	1b00      	subs	r0, r0, r4
		base += buf->size;
   172da:	4426      	add	r6, r4
   172dc:	e7e6      	b.n	172ac <ring_buf_put_claim+0x10>

000172de <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
   172de:	b430      	push	{r4, r5}
	uint32_t finish_space, wrap_size;

	finish_space = buf->put_head - buf->put_tail;
   172e0:	6844      	ldr	r4, [r0, #4]
   172e2:	6883      	ldr	r3, [r0, #8]
   172e4:	1ae4      	subs	r4, r4, r3
	if (unlikely(size > finish_space)) {
   172e6:	428c      	cmp	r4, r1
   172e8:	bf2c      	ite	cs
   172ea:	2400      	movcs	r4, #0
   172ec:	2401      	movcc	r4, #1
   172ee:	b98c      	cbnz	r4, 17314 <ring_buf_put_finish+0x36>
   172f0:	4602      	mov	r2, r0
		return -EINVAL;
	}

	buf->put_tail += size;
   172f2:	4419      	add	r1, r3
   172f4:	6081      	str	r1, [r0, #8]
	buf->put_head = buf->put_tail;
   172f6:	6041      	str	r1, [r0, #4]

	wrap_size = buf->put_tail - buf->put_base;
   172f8:	68c5      	ldr	r5, [r0, #12]
   172fa:	1b49      	subs	r1, r1, r5
	if (unlikely(wrap_size >= buf->size)) {
   172fc:	69c3      	ldr	r3, [r0, #28]
   172fe:	428b      	cmp	r3, r1
   17300:	bf8c      	ite	hi
   17302:	2000      	movhi	r0, #0
   17304:	2001      	movls	r0, #1
   17306:	b908      	cbnz	r0, 1730c <ring_buf_put_finish+0x2e>
		/* we wrapped: adjust put_base */
		buf->put_base += buf->size;
	}

	return 0;
}
   17308:	bc30      	pop	{r4, r5}
   1730a:	4770      	bx	lr
		buf->put_base += buf->size;
   1730c:	442b      	add	r3, r5
   1730e:	60d3      	str	r3, [r2, #12]
	return 0;
   17310:	4620      	mov	r0, r4
   17312:	e7f9      	b.n	17308 <ring_buf_put_finish+0x2a>
		return -EINVAL;
   17314:	f06f 0015 	mvn.w	r0, #21
   17318:	e7f6      	b.n	17308 <ring_buf_put_finish+0x2a>

0001731a <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
   1731a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1731e:	b082      	sub	sp, #8
   17320:	4680      	mov	r8, r0
   17322:	460e      	mov	r6, r1
   17324:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
   17326:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
   17328:	462a      	mov	r2, r5
   1732a:	a901      	add	r1, sp, #4
   1732c:	4640      	mov	r0, r8
   1732e:	f7ff ffb5 	bl	1729c <ring_buf_put_claim>
   17332:	4604      	mov	r4, r0
   17334:	4602      	mov	r2, r0
   17336:	4631      	mov	r1, r6
   17338:	9801      	ldr	r0, [sp, #4]
   1733a:	f008 fd42 	bl	1fdc2 <memcpy>
		memcpy(dst, data, partial_size);
		total_size += partial_size;
   1733e:	4427      	add	r7, r4
		size -= partial_size;
		data += partial_size;
   17340:	4426      	add	r6, r4
	} while (size && partial_size);
   17342:	1b2d      	subs	r5, r5, r4
   17344:	d001      	beq.n	1734a <ring_buf_put+0x30>
   17346:	2c00      	cmp	r4, #0
   17348:	d1ee      	bne.n	17328 <ring_buf_put+0xe>

	err = ring_buf_put_finish(buf, total_size);
   1734a:	4639      	mov	r1, r7
   1734c:	4640      	mov	r0, r8
   1734e:	f7ff ffc6 	bl	172de <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);
	ARG_UNUSED(err);

	return total_size;
}
   17352:	4638      	mov	r0, r7
   17354:	b002      	add	sp, #8
   17356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001735a <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
   1735a:	b470      	push	{r4, r5, r6}
   1735c:	4603      	mov	r3, r0
	uint32_t available_size, wrap_size;
	int32_t base;

	base = buf->get_base;
   1735e:	6986      	ldr	r6, [r0, #24]
	wrap_size = buf->get_head - base;
   17360:	6905      	ldr	r5, [r0, #16]
   17362:	1ba8      	subs	r0, r5, r6
	if (unlikely(wrap_size >= buf->size)) {
   17364:	69dc      	ldr	r4, [r3, #28]
   17366:	4284      	cmp	r4, r0
   17368:	d911      	bls.n	1738e <ring_buf_get_claim+0x34>
		/* get_base is not yet adjusted */
		wrap_size -= buf->size;
		base += buf->size;
	}
	wrap_size = buf->size - wrap_size;
   1736a:	1a20      	subs	r0, r4, r0
 *
 * @return Ring buffer space used (in bytes).
 */
static inline uint32_t ring_buf_size_get(struct ring_buf *buf)
{
	return buf->put_tail - buf->get_head;
   1736c:	689c      	ldr	r4, [r3, #8]
   1736e:	1b64      	subs	r4, r4, r5

	available_size = ring_buf_size_get(buf);
	size = MIN(size, available_size);
   17370:	42a2      	cmp	r2, r4
   17372:	bf28      	it	cs
   17374:	4622      	movcs	r2, r4
	size = MIN(size, wrap_size);
   17376:	4290      	cmp	r0, r2
   17378:	bf28      	it	cs
   1737a:	4610      	movcs	r0, r2

	*data = &buf->buffer[buf->get_head - base];
   1737c:	681a      	ldr	r2, [r3, #0]
   1737e:	1bad      	subs	r5, r5, r6
   17380:	442a      	add	r2, r5
   17382:	600a      	str	r2, [r1, #0]
	buf->get_head += size;
   17384:	691a      	ldr	r2, [r3, #16]
   17386:	4402      	add	r2, r0
   17388:	611a      	str	r2, [r3, #16]

	return size;
}
   1738a:	bc70      	pop	{r4, r5, r6}
   1738c:	4770      	bx	lr
		wrap_size -= buf->size;
   1738e:	1b00      	subs	r0, r0, r4
		base += buf->size;
   17390:	4426      	add	r6, r4
   17392:	e7ea      	b.n	1736a <ring_buf_get_claim+0x10>

00017394 <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
   17394:	b430      	push	{r4, r5}
	uint32_t finish_space, wrap_size;

	finish_space = buf->get_head - buf->get_tail;
   17396:	6904      	ldr	r4, [r0, #16]
   17398:	6943      	ldr	r3, [r0, #20]
   1739a:	1ae4      	subs	r4, r4, r3
	if (unlikely(size > finish_space)) {
   1739c:	428c      	cmp	r4, r1
   1739e:	bf2c      	ite	cs
   173a0:	2400      	movcs	r4, #0
   173a2:	2401      	movcc	r4, #1
   173a4:	b98c      	cbnz	r4, 173ca <ring_buf_get_finish+0x36>
   173a6:	4602      	mov	r2, r0
		return -EINVAL;
	}

	buf->get_tail += size;
   173a8:	4419      	add	r1, r3
   173aa:	6141      	str	r1, [r0, #20]
	buf->get_head = buf->get_tail;
   173ac:	6101      	str	r1, [r0, #16]

	wrap_size = buf->get_tail - buf->get_base;
   173ae:	6985      	ldr	r5, [r0, #24]
   173b0:	1b49      	subs	r1, r1, r5
	if (unlikely(wrap_size >= buf->size)) {
   173b2:	69c3      	ldr	r3, [r0, #28]
   173b4:	428b      	cmp	r3, r1
   173b6:	bf8c      	ite	hi
   173b8:	2000      	movhi	r0, #0
   173ba:	2001      	movls	r0, #1
   173bc:	b908      	cbnz	r0, 173c2 <ring_buf_get_finish+0x2e>
		/* we wrapped: adjust get_base */
		buf->get_base += buf->size;
	}

	return 0;
}
   173be:	bc30      	pop	{r4, r5}
   173c0:	4770      	bx	lr
		buf->get_base += buf->size;
   173c2:	442b      	add	r3, r5
   173c4:	6193      	str	r3, [r2, #24]
	return 0;
   173c6:	4620      	mov	r0, r4
   173c8:	e7f9      	b.n	173be <ring_buf_get_finish+0x2a>
		return -EINVAL;
   173ca:	f06f 0015 	mvn.w	r0, #21
   173ce:	e7f6      	b.n	173be <ring_buf_get_finish+0x2a>

000173d0 <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
   173d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   173d4:	b082      	sub	sp, #8
   173d6:	4680      	mov	r8, r0
   173d8:	460e      	mov	r6, r1
   173da:	4615      	mov	r5, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
   173dc:	2700      	movs	r7, #0
   173de:	e009      	b.n	173f4 <ring_buf_get+0x24>
   173e0:	4602      	mov	r2, r0
   173e2:	9901      	ldr	r1, [sp, #4]
   173e4:	4630      	mov	r0, r6
   173e6:	f008 fcec 	bl	1fdc2 <memcpy>

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
		if (data) {
			memcpy(data, src, partial_size);
			data += partial_size;
   173ea:	4426      	add	r6, r4
		}
		total_size += partial_size;
   173ec:	4427      	add	r7, r4
		size -= partial_size;
	} while (size && partial_size);
   173ee:	1b2d      	subs	r5, r5, r4
   173f0:	d009      	beq.n	17406 <ring_buf_get+0x36>
   173f2:	b144      	cbz	r4, 17406 <ring_buf_get+0x36>
		partial_size = ring_buf_get_claim(buf, &src, size);
   173f4:	462a      	mov	r2, r5
   173f6:	a901      	add	r1, sp, #4
   173f8:	4640      	mov	r0, r8
   173fa:	f7ff ffae 	bl	1735a <ring_buf_get_claim>
   173fe:	4604      	mov	r4, r0
		if (data) {
   17400:	2e00      	cmp	r6, #0
   17402:	d1ed      	bne.n	173e0 <ring_buf_get+0x10>
   17404:	e7f2      	b.n	173ec <ring_buf_get+0x1c>

	err = ring_buf_get_finish(buf, total_size);
   17406:	4639      	mov	r1, r7
   17408:	4640      	mov	r0, r8
   1740a:	f7ff ffc3 	bl	17394 <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);
	ARG_UNUSED(err);

	return total_size;
}
   1740e:	4638      	mov	r0, r7
   17410:	b002      	add	sp, #8
   17412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00017416 <free_space>:
	ARG_UNUSED(err);
}

static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   17416:	68c3      	ldr	r3, [r0, #12]
   17418:	6802      	ldr	r2, [r0, #0]
   1741a:	4293      	cmp	r3, r2
   1741c:	d805      	bhi.n	1742a <free_space+0x14>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;

		return false;
	} else if (!buffer->rd_idx) {
   1741e:	b14b      	cbz	r3, 17434 <free_space+0x1e>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
		return false;
	}

	*res = buffer->size - buffer->tmp_wr_idx;
   17420:	6a03      	ldr	r3, [r0, #32]
   17422:	1a9b      	subs	r3, r3, r2
   17424:	600b      	str	r3, [r1, #0]

	return true;
   17426:	2001      	movs	r0, #1
}
   17428:	4770      	bx	lr
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
   1742a:	1a9b      	subs	r3, r3, r2
   1742c:	3b01      	subs	r3, #1
   1742e:	600b      	str	r3, [r1, #0]
		return false;
   17430:	2000      	movs	r0, #0
   17432:	4770      	bx	lr
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   17434:	6a03      	ldr	r3, [r0, #32]
   17436:	1a9b      	subs	r3, r3, r2
   17438:	3b01      	subs	r3, #1
   1743a:	600b      	str	r3, [r1, #0]
		return false;
   1743c:	2000      	movs	r0, #0
   1743e:	4770      	bx	lr

00017440 <get_usage>:

	return true;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
   17440:	b510      	push	{r4, lr}
   17442:	b082      	sub	sp, #8
   17444:	4604      	mov	r4, r0
	uint32_t f;

	if (free_space(buffer, &f)) {
   17446:	a901      	add	r1, sp, #4
   17448:	f7ff ffe5 	bl	17416 <free_space>
   1744c:	b120      	cbz	r0, 17458 <get_usage+0x18>
		f += (buffer->rd_idx - 1);
   1744e:	68e3      	ldr	r3, [r4, #12]
   17450:	9a01      	ldr	r2, [sp, #4]
   17452:	4413      	add	r3, r2
   17454:	3b01      	subs	r3, #1
   17456:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
   17458:	6a20      	ldr	r0, [r4, #32]
   1745a:	9b01      	ldr	r3, [sp, #4]
   1745c:	1ac0      	subs	r0, r0, r3
}
   1745e:	3801      	subs	r0, #1
   17460:	b002      	add	sp, #8
   17462:	bd10      	pop	{r4, pc}

00017464 <max_utilization_update>:

static inline void max_utilization_update(struct mpsc_pbuf_buffer *buffer)
{
   17464:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   17466:	6903      	ldr	r3, [r0, #16]
   17468:	f013 0f04 	tst.w	r3, #4
   1746c:	d100      	bne.n	17470 <max_utilization_update+0xc>
		return;
	}

	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
}
   1746e:	bd38      	pop	{r3, r4, r5, pc}
   17470:	4604      	mov	r4, r0
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   17472:	6a45      	ldr	r5, [r0, #36]	; 0x24
   17474:	f7ff ffe4 	bl	17440 <get_usage>
   17478:	4285      	cmp	r5, r0
   1747a:	d902      	bls.n	17482 <max_utilization_update+0x1e>
   1747c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   1747e:	6260      	str	r0, [r4, #36]	; 0x24
   17480:	e7f5      	b.n	1746e <max_utilization_update+0xa>
   17482:	4620      	mov	r0, r4
   17484:	f7ff ffdc 	bl	17440 <get_usage>
   17488:	e7f9      	b.n	1747e <max_utilization_update+0x1a>

0001748a <add_skip_item>:

	return 0;
}

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
   1748a:	b410      	push	{r4}
	union mpsc_pbuf_generic skip = {
   1748c:	2300      	movs	r3, #0
   1748e:	f36f 0300 	bfc	r3, #0, #1
   17492:	f043 0302 	orr.w	r3, r3, #2
   17496:	f361 039f 	bfi	r3, r1, #2, #30
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   1749a:	69c2      	ldr	r2, [r0, #28]
   1749c:	6804      	ldr	r4, [r0, #0]
   1749e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   174a2:	6803      	ldr	r3, [r0, #0]
	uint32_t i = idx + val;
   174a4:	440b      	add	r3, r1
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   174a6:	6902      	ldr	r2, [r0, #16]
   174a8:	f012 0201 	ands.w	r2, r2, #1
   174ac:	d104      	bne.n	174b8 <add_skip_item+0x2e>
	return (i >= buffer->size) ? i - buffer->size : i;
   174ae:	6a04      	ldr	r4, [r0, #32]
   174b0:	42a3      	cmp	r3, r4
   174b2:	d304      	bcc.n	174be <add_skip_item+0x34>
   174b4:	1b1b      	subs	r3, r3, r4
   174b6:	e002      	b.n	174be <add_skip_item+0x34>
		return i & (buffer->size - 1);
   174b8:	6a04      	ldr	r4, [r0, #32]
   174ba:	3c01      	subs	r4, #1
   174bc:	4023      	ands	r3, r4
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   174be:	6003      	str	r3, [r0, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   174c0:	6843      	ldr	r3, [r0, #4]
	uint32_t i = idx + val;
   174c2:	4419      	add	r1, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   174c4:	b922      	cbnz	r2, 174d0 <add_skip_item+0x46>
	return (i >= buffer->size) ? i - buffer->size : i;
   174c6:	6a03      	ldr	r3, [r0, #32]
   174c8:	4299      	cmp	r1, r3
   174ca:	d304      	bcc.n	174d6 <add_skip_item+0x4c>
   174cc:	1ac9      	subs	r1, r1, r3
   174ce:	e002      	b.n	174d6 <add_skip_item+0x4c>
		return i & (buffer->size - 1);
   174d0:	6a03      	ldr	r3, [r0, #32]
   174d2:	3b01      	subs	r3, #1
   174d4:	4019      	ands	r1, r3
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   174d6:	6041      	str	r1, [r0, #4]
}
   174d8:	bc10      	pop	{r4}
   174da:	4770      	bx	lr

000174dc <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
   174dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   174e0:	b083      	sub	sp, #12
   174e2:	4604      	mov	r4, r0
   174e4:	9101      	str	r1, [sp, #4]
   174e6:	4615      	mov	r5, r2
   174e8:	461e      	mov	r6, r3
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
   174ea:	2300      	movs	r3, #0
   174ec:	7033      	strb	r3, [r6, #0]
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   174ee:	f8d0 801c 	ldr.w	r8, [r0, #28]
   174f2:	f8d0 900c 	ldr.w	r9, [r0, #12]
   174f6:	eb08 0a89 	add.w	sl, r8, r9, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   174fa:	f818 3029 	ldrb.w	r3, [r8, r9, lsl #2]
   174fe:	f003 0303 	and.w	r3, r3, #3
   17502:	2b02      	cmp	r3, #2
   17504:	d012      	beq.n	1752c <drop_item_locked+0x50>
	return 0;
   17506:	f04f 0b00 	mov.w	fp, #0
	skip_wlen = get_skip(item);

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
   1750a:	69a3      	ldr	r3, [r4, #24]
   1750c:	4650      	mov	r0, sl
   1750e:	4798      	blx	r3
   17510:	4607      	mov	r7, r0
	if (skip_wlen) {
   17512:	f1bb 0f00 	cmp.w	fp, #0
   17516:	d152      	bne.n	175be <drop_item_locked+0xe2>
		allow_drop = true;
	} else if (allow_drop) {
   17518:	2d00      	cmp	r5, #0
   1751a:	d05d      	beq.n	175d8 <drop_item_locked+0xfc>
		if (item->hdr.busy) {
   1751c:	f818 3029 	ldrb.w	r3, [r8, r9, lsl #2]
   17520:	f013 0f02 	tst.w	r3, #2
   17524:	d10a      	bne.n	1753c <drop_item_locked+0x60>
			} else {
				rd_wlen += buffer->get_wlen(item);
				*user_packet = true;
			}
		} else {
			*user_packet = true;
   17526:	2301      	movs	r3, #1
   17528:	7033      	strb	r3, [r6, #0]
   1752a:	e049      	b.n	175c0 <drop_item_locked+0xe4>
		return item->skip.len;
   1752c:	f858 3029 	ldr.w	r3, [r8, r9, lsl #2]
	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
   17530:	ea5f 0b93 	movs.w	fp, r3, lsr #2
   17534:	d0e9      	beq.n	1750a <drop_item_locked+0x2e>
		return item->skip.len;
   17536:	465f      	mov	r7, fp
		allow_drop = true;
   17538:	2501      	movs	r5, #1
   1753a:	e041      	b.n	175c0 <drop_item_locked+0xe4>
			add_skip_item(buffer, free_wlen + 1);
   1753c:	9901      	ldr	r1, [sp, #4]
   1753e:	3101      	adds	r1, #1
   17540:	4620      	mov	r0, r4
   17542:	f7ff ffa2 	bl	1748a <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   17546:	6863      	ldr	r3, [r4, #4]
	uint32_t i = idx + val;
   17548:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   1754a:	6922      	ldr	r2, [r4, #16]
   1754c:	f012 0201 	ands.w	r2, r2, #1
   17550:	d104      	bne.n	1755c <drop_item_locked+0x80>
	return (i >= buffer->size) ? i - buffer->size : i;
   17552:	6a21      	ldr	r1, [r4, #32]
   17554:	428b      	cmp	r3, r1
   17556:	d304      	bcc.n	17562 <drop_item_locked+0x86>
   17558:	1a5b      	subs	r3, r3, r1
   1755a:	e002      	b.n	17562 <drop_item_locked+0x86>
		return i & (buffer->size - 1);
   1755c:	6a21      	ldr	r1, [r4, #32]
   1755e:	3901      	subs	r1, #1
   17560:	400b      	ands	r3, r1
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   17562:	6063      	str	r3, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   17564:	6823      	ldr	r3, [r4, #0]
	uint32_t i = idx + val;
   17566:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   17568:	b922      	cbnz	r2, 17574 <drop_item_locked+0x98>
	return (i >= buffer->size) ? i - buffer->size : i;
   1756a:	6a21      	ldr	r1, [r4, #32]
   1756c:	428b      	cmp	r3, r1
   1756e:	d304      	bcc.n	1757a <drop_item_locked+0x9e>
   17570:	1a5b      	subs	r3, r3, r1
   17572:	e002      	b.n	1757a <drop_item_locked+0x9e>
		return i & (buffer->size - 1);
   17574:	6a21      	ldr	r1, [r4, #32]
   17576:	3901      	subs	r1, #1
   17578:	400b      	ands	r3, r1
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   1757a:	6023      	str	r3, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   1757c:	68e3      	ldr	r3, [r4, #12]
	uint32_t i = idx + val;
   1757e:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   17580:	b922      	cbnz	r2, 1758c <drop_item_locked+0xb0>
	return (i >= buffer->size) ? i - buffer->size : i;
   17582:	6a22      	ldr	r2, [r4, #32]
   17584:	4293      	cmp	r3, r2
   17586:	d304      	bcc.n	17592 <drop_item_locked+0xb6>
   17588:	1a9b      	subs	r3, r3, r2
   1758a:	e002      	b.n	17592 <drop_item_locked+0xb6>
		return i & (buffer->size - 1);
   1758c:	6a22      	ldr	r2, [r4, #32]
   1758e:	3a01      	subs	r2, #1
   17590:	4013      	ands	r3, r2
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   17592:	69e1      	ldr	r1, [r4, #28]
   17594:	eb01 0a83 	add.w	sl, r1, r3, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   17598:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
   1759c:	f002 0203 	and.w	r2, r2, #3
   175a0:	2a02      	cmp	r2, #2
   175a2:	d006      	beq.n	175b2 <drop_item_locked+0xd6>
				rd_wlen += buffer->get_wlen(item);
   175a4:	69a3      	ldr	r3, [r4, #24]
   175a6:	4650      	mov	r0, sl
   175a8:	4798      	blx	r3
   175aa:	4407      	add	r7, r0
				*user_packet = true;
   175ac:	2301      	movs	r3, #1
   175ae:	7033      	strb	r3, [r6, #0]
   175b0:	e006      	b.n	175c0 <drop_item_locked+0xe4>
		return item->skip.len;
   175b2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
			if (skip_wlen) {
   175b6:	089b      	lsrs	r3, r3, #2
   175b8:	d0f4      	beq.n	175a4 <drop_item_locked+0xc8>
				rd_wlen += skip_wlen;
   175ba:	441f      	add	r7, r3
   175bc:	e000      	b.n	175c0 <drop_item_locked+0xe4>
		allow_drop = true;
   175be:	2501      	movs	r5, #1
		}
	} else {
		item = NULL;
	}

	if (allow_drop) {
   175c0:	b195      	cbz	r5, 175e8 <drop_item_locked+0x10c>
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   175c2:	68e3      	ldr	r3, [r4, #12]
	uint32_t i = idx + val;
   175c4:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   175c6:	6922      	ldr	r2, [r4, #16]
   175c8:	f012 0f01 	tst.w	r2, #1
   175cc:	d107      	bne.n	175de <drop_item_locked+0x102>
	return (i >= buffer->size) ? i - buffer->size : i;
   175ce:	6a22      	ldr	r2, [r4, #32]
   175d0:	4293      	cmp	r3, r2
   175d2:	d307      	bcc.n	175e4 <drop_item_locked+0x108>
   175d4:	1a9b      	subs	r3, r3, r2
   175d6:	e005      	b.n	175e4 <drop_item_locked+0x108>
		item = NULL;
   175d8:	f04f 0a00 	mov.w	sl, #0
   175dc:	e7f0      	b.n	175c0 <drop_item_locked+0xe4>
		return i & (buffer->size - 1);
   175de:	6a22      	ldr	r2, [r4, #32]
   175e0:	3a01      	subs	r2, #1
   175e2:	4013      	ands	r3, r2
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   175e4:	60e3      	str	r3, [r4, #12]
		buffer->tmp_rd_idx = buffer->rd_idx;
   175e6:	60a3      	str	r3, [r4, #8]
	}

	return item;
}
   175e8:	4650      	mov	r0, sl
   175ea:	b003      	add	sp, #12
   175ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000175f0 <mpsc_pbuf_init>:
{
   175f0:	b508      	push	{r3, lr}
__ssp_bos_icheck3(memset, void *, int)
   175f2:	2300      	movs	r3, #0
   175f4:	6003      	str	r3, [r0, #0]
   175f6:	6043      	str	r3, [r0, #4]
   175f8:	6083      	str	r3, [r0, #8]
   175fa:	60c3      	str	r3, [r0, #12]
   175fc:	6103      	str	r3, [r0, #16]
   175fe:	6143      	str	r3, [r0, #20]
   17600:	6183      	str	r3, [r0, #24]
	buffer->get_wlen = cfg->get_wlen;
   17602:	68ca      	ldr	r2, [r1, #12]
   17604:	6182      	str	r2, [r0, #24]
	buffer->notify_drop = cfg->notify_drop;
   17606:	688a      	ldr	r2, [r1, #8]
   17608:	6142      	str	r2, [r0, #20]
	buffer->buf = cfg->buf;
   1760a:	680a      	ldr	r2, [r1, #0]
   1760c:	61c2      	str	r2, [r0, #28]
	buffer->size = cfg->size;
   1760e:	684a      	ldr	r2, [r1, #4]
   17610:	6202      	str	r2, [r0, #32]
	buffer->max_usage = 0;
   17612:	6243      	str	r3, [r0, #36]	; 0x24
	buffer->flags = cfg->flags;
   17614:	690b      	ldr	r3, [r1, #16]
   17616:	6103      	str	r3, [r0, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
   17618:	b12a      	cbz	r2, 17626 <mpsc_pbuf_init+0x36>
   1761a:	1e51      	subs	r1, r2, #1
   1761c:	420a      	tst	r2, r1
   1761e:	d102      	bne.n	17626 <mpsc_pbuf_init+0x36>
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
   17620:	f043 0301 	orr.w	r3, r3, #1
   17624:	6103      	str	r3, [r0, #16]
	err = k_sem_init(&buffer->sem, 0, 1);
   17626:	3028      	adds	r0, #40	; 0x28
	return z_impl_k_sem_init(sem, initial_count, limit);
   17628:	2201      	movs	r2, #1
   1762a:	2100      	movs	r1, #0
   1762c:	f007 fde4 	bl	1f1f8 <z_impl_k_sem_init>
}
   17630:	bd08      	pop	{r3, pc}

00017632 <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
   17632:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17636:	b085      	sub	sp, #20
   17638:	469a      	mov	sl, r3
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
   1763a:	6a03      	ldr	r3, [r0, #32]
   1763c:	3b01      	subs	r3, #1
   1763e:	428b      	cmp	r3, r1
   17640:	d37f      	bcc.n	17742 <mpsc_pbuf_alloc+0x110>
   17642:	4605      	mov	r5, r0
   17644:	460f      	mov	r7, r1
   17646:	4691      	mov	r9, r2
	union mpsc_pbuf_generic *dropped_item = NULL;
   17648:	f04f 0800 	mov.w	r8, #0
	union mpsc_pbuf_generic *item = NULL;
   1764c:	46c3      	mov	fp, r8
   1764e:	e019      	b.n	17684 <mpsc_pbuf_alloc+0x52>
		return i & (buffer->size - 1);
   17650:	6a2a      	ldr	r2, [r5, #32]
   17652:	3a01      	subs	r2, #1
   17654:	4013      	ands	r3, r2
		if (free_wlen >= wlen) {
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
			item->hdr.valid = 0;
			item->hdr.busy = 0;
			buffer->tmp_wr_idx = idx_inc(buffer,
   17656:	602b      	str	r3, [r5, #0]
		cont = false;
   17658:	2400      	movs	r4, #0
   1765a:	f386 8811 	msr	BASEPRI, r6
   1765e:	f3bf 8f6f 	isb	sy
			cont = dropped_item != NULL;
		}

		k_spin_unlock(&buffer->lock, key);

		if (cont && dropped_item && valid_drop) {
   17662:	b16c      	cbz	r4, 17680 <mpsc_pbuf_alloc+0x4e>
   17664:	f1b8 0f00 	cmp.w	r8, #0
   17668:	d00a      	beq.n	17680 <mpsc_pbuf_alloc+0x4e>
   1766a:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1766e:	b13b      	cbz	r3, 17680 <mpsc_pbuf_alloc+0x4e>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
   17670:	696b      	ldr	r3, [r5, #20]
   17672:	2b00      	cmp	r3, #0
   17674:	d062      	beq.n	1773c <mpsc_pbuf_alloc+0x10a>
				buffer->notify_drop(buffer, dropped_item);
   17676:	4641      	mov	r1, r8
   17678:	4628      	mov	r0, r5
   1767a:	4798      	blx	r3
			}
			dropped_item = NULL;
   1767c:	f04f 0800 	mov.w	r8, #0
		}
	} while (cont);
   17680:	2c00      	cmp	r4, #0
   17682:	d060      	beq.n	17746 <mpsc_pbuf_alloc+0x114>
	__asm__ volatile(
   17684:	f04f 0320 	mov.w	r3, #32
   17688:	f3ef 8611 	mrs	r6, BASEPRI
   1768c:	f383 8812 	msr	BASEPRI_MAX, r3
   17690:	f3bf 8f6f 	isb	sy
   17694:	9601      	str	r6, [sp, #4]
		wrap = free_space(buffer, &free_wlen);
   17696:	a903      	add	r1, sp, #12
   17698:	4628      	mov	r0, r5
   1769a:	f7ff febc 	bl	17416 <free_space>
   1769e:	4604      	mov	r4, r0
		if (free_wlen >= wlen) {
   176a0:	9903      	ldr	r1, [sp, #12]
   176a2:	42b9      	cmp	r1, r7
   176a4:	d319      	bcc.n	176da <mpsc_pbuf_alloc+0xa8>
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
   176a6:	69eb      	ldr	r3, [r5, #28]
   176a8:	682a      	ldr	r2, [r5, #0]
			item =
   176aa:	eb03 0b82 	add.w	fp, r3, r2, lsl #2
			item->hdr.valid = 0;
   176ae:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
   176b2:	f36f 0100 	bfc	r1, #0, #1
   176b6:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			item->hdr.busy = 0;
   176ba:	b2c9      	uxtb	r1, r1
   176bc:	f36f 0141 	bfc	r1, #1, #1
   176c0:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
   176c4:	682b      	ldr	r3, [r5, #0]
	uint32_t i = idx + val;
   176c6:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   176c8:	692a      	ldr	r2, [r5, #16]
   176ca:	f012 0f01 	tst.w	r2, #1
   176ce:	d1bf      	bne.n	17650 <mpsc_pbuf_alloc+0x1e>
	return (i >= buffer->size) ? i - buffer->size : i;
   176d0:	6a2a      	ldr	r2, [r5, #32]
   176d2:	4293      	cmp	r3, r2
   176d4:	d3bf      	bcc.n	17656 <mpsc_pbuf_alloc+0x24>
   176d6:	1a9b      	subs	r3, r3, r2
   176d8:	e7bd      	b.n	17656 <mpsc_pbuf_alloc+0x24>
		} else if (wrap) {
   176da:	b9a0      	cbnz	r0, 17706 <mpsc_pbuf_alloc+0xd4>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   176dc:	ea5a 0309 	orrs.w	r3, sl, r9
   176e0:	d003      	beq.n	176ea <mpsc_pbuf_alloc+0xb8>
			   !k_is_in_isr()) {
   176e2:	f007 fc4c 	bl	1ef7e <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   176e6:	4604      	mov	r4, r0
   176e8:	b188      	cbz	r0, 1770e <mpsc_pbuf_alloc+0xdc>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
   176ea:	692a      	ldr	r2, [r5, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
   176ec:	f10d 030b 	add.w	r3, sp, #11
   176f0:	f3c2 0240 	ubfx	r2, r2, #1, #1
   176f4:	9903      	ldr	r1, [sp, #12]
   176f6:	4628      	mov	r0, r5
   176f8:	f7ff fef0 	bl	174dc <drop_item_locked>
			cont = dropped_item != NULL;
   176fc:	4680      	mov	r8, r0
   176fe:	1e04      	subs	r4, r0, #0
   17700:	bf18      	it	ne
   17702:	2401      	movne	r4, #1
   17704:	e7a9      	b.n	1765a <mpsc_pbuf_alloc+0x28>
			add_skip_item(buffer, free_wlen);
   17706:	4628      	mov	r0, r5
   17708:	f7ff febf 	bl	1748a <add_skip_item>
			cont = true;
   1770c:	e7a5      	b.n	1765a <mpsc_pbuf_alloc+0x28>
	__asm__ volatile(
   1770e:	9b01      	ldr	r3, [sp, #4]
   17710:	f383 8811 	msr	BASEPRI, r3
   17714:	f3bf 8f6f 	isb	sy
			err = k_sem_take(&buffer->sem, timeout);
   17718:	f105 0028 	add.w	r0, r5, #40	; 0x28
	return z_impl_k_sem_take(sem, timeout);
   1771c:	464a      	mov	r2, r9
   1771e:	4653      	mov	r3, sl
   17720:	f7f9 fd9e 	bl	11260 <z_impl_k_sem_take>
	__asm__ volatile(
   17724:	f04f 0320 	mov.w	r3, #32
   17728:	f3ef 8611 	mrs	r6, BASEPRI
   1772c:	f383 8812 	msr	BASEPRI_MAX, r3
   17730:	f3bf 8f6f 	isb	sy
			if (err == 0) {
   17734:	2800      	cmp	r0, #0
   17736:	d190      	bne.n	1765a <mpsc_pbuf_alloc+0x28>
				cont = true;
   17738:	2401      	movs	r4, #1
   1773a:	e78e      	b.n	1765a <mpsc_pbuf_alloc+0x28>
			dropped_item = NULL;
   1773c:	f04f 0800 	mov.w	r8, #0
   17740:	e79e      	b.n	17680 <mpsc_pbuf_alloc+0x4e>
		return NULL;
   17742:	f04f 0b00 	mov.w	fp, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
   17746:	4658      	mov	r0, fp
   17748:	b005      	add	sp, #20
   1774a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001774e <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
   1774e:	b570      	push	{r4, r5, r6, lr}
   17750:	4604      	mov	r4, r0
   17752:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   17754:	6983      	ldr	r3, [r0, #24]
   17756:	4608      	mov	r0, r1
   17758:	4798      	blx	r3
   1775a:	f04f 0320 	mov.w	r3, #32
   1775e:	f3ef 8611 	mrs	r6, BASEPRI
   17762:	f383 8812 	msr	BASEPRI_MAX, r3
   17766:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
   1776a:	782b      	ldrb	r3, [r5, #0]
   1776c:	f043 0301 	orr.w	r3, r3, #1
   17770:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   17772:	6863      	ldr	r3, [r4, #4]
	uint32_t i = idx + val;
   17774:	4418      	add	r0, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   17776:	6923      	ldr	r3, [r4, #16]
   17778:	f013 0f01 	tst.w	r3, #1
   1777c:	d104      	bne.n	17788 <mpsc_pbuf_commit+0x3a>
	return (i >= buffer->size) ? i - buffer->size : i;
   1777e:	6a23      	ldr	r3, [r4, #32]
   17780:	4298      	cmp	r0, r3
   17782:	d304      	bcc.n	1778e <mpsc_pbuf_commit+0x40>
   17784:	1ac0      	subs	r0, r0, r3
   17786:	e002      	b.n	1778e <mpsc_pbuf_commit+0x40>
		return i & (buffer->size - 1);
   17788:	6a23      	ldr	r3, [r4, #32]
   1778a:	3b01      	subs	r3, #1
   1778c:	4018      	ands	r0, r3
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   1778e:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
   17790:	4620      	mov	r0, r4
   17792:	f7ff fe67 	bl	17464 <max_utilization_update>
	__asm__ volatile(
   17796:	f386 8811 	msr	BASEPRI, r6
   1779a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
   1779e:	bd70      	pop	{r4, r5, r6, pc}

000177a0 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
   177a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   177a2:	4604      	mov	r4, r0
   177a4:	e039      	b.n	1781a <mpsc_pbuf_claim+0x7a>
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   177a6:	1a9b      	subs	r3, r3, r2
		return false;
   177a8:	e045      	b.n	17836 <mpsc_pbuf_claim+0x96>
		return item->skip.len;
   177aa:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
		if (!a || is_invalid(item)) {
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
   177ae:	0880      	lsrs	r0, r0, #2
   177b0:	d157      	bne.n	17862 <mpsc_pbuf_claim+0xc2>
   177b2:	e04d      	b.n	17850 <mpsc_pbuf_claim+0xb0>
		return i & (buffer->size - 1);
   177b4:	6a21      	ldr	r1, [r4, #32]
   177b6:	3901      	subs	r1, #1
   177b8:	400b      	ands	r3, r1
				uint32_t inc =
					skip ? skip : buffer->get_wlen(item);

				buffer->tmp_rd_idx =
   177ba:	60a3      	str	r3, [r4, #8]
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
				buffer->rd_idx =
					idx_inc(buffer, buffer->rd_idx, inc);
   177bc:	68e3      	ldr	r3, [r4, #12]
	uint32_t i = idx + val;
   177be:	4403      	add	r3, r0
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   177c0:	b922      	cbnz	r2, 177cc <mpsc_pbuf_claim+0x2c>
	return (i >= buffer->size) ? i - buffer->size : i;
   177c2:	6a22      	ldr	r2, [r4, #32]
   177c4:	4293      	cmp	r3, r2
   177c6:	d304      	bcc.n	177d2 <mpsc_pbuf_claim+0x32>
   177c8:	1a9b      	subs	r3, r3, r2
   177ca:	e002      	b.n	177d2 <mpsc_pbuf_claim+0x32>
		return i & (buffer->size - 1);
   177cc:	6a22      	ldr	r2, [r4, #32]
   177ce:	3a01      	subs	r2, #1
   177d0:	4013      	ands	r3, r2
				buffer->rd_idx =
   177d2:	60e3      	str	r3, [r4, #12]
				cont = true;
   177d4:	2301      	movs	r3, #1
			if (skip || !is_valid(item)) {
   177d6:	e01b      	b.n	17810 <mpsc_pbuf_claim+0x70>
			} else {
				item->hdr.busy = 1;
   177d8:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
   177dc:	f043 0302 	orr.w	r3, r3, #2
   177e0:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
   177e4:	68a7      	ldr	r7, [r4, #8]
						buffer->get_wlen(item));
   177e6:	69a3      	ldr	r3, [r4, #24]
					idx_inc(buffer, buffer->tmp_rd_idx,
   177e8:	4630      	mov	r0, r6
   177ea:	4798      	blx	r3
	uint32_t i = idx + val;
   177ec:	4438      	add	r0, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   177ee:	6923      	ldr	r3, [r4, #16]
   177f0:	f013 0f01 	tst.w	r3, #1
   177f4:	d104      	bne.n	17800 <mpsc_pbuf_claim+0x60>
	return (i >= buffer->size) ? i - buffer->size : i;
   177f6:	6a23      	ldr	r3, [r4, #32]
   177f8:	4298      	cmp	r0, r3
   177fa:	d304      	bcc.n	17806 <mpsc_pbuf_claim+0x66>
   177fc:	1ac0      	subs	r0, r0, r3
   177fe:	e002      	b.n	17806 <mpsc_pbuf_claim+0x66>
		return i & (buffer->size - 1);
   17800:	6a23      	ldr	r3, [r4, #32]
   17802:	3b01      	subs	r3, #1
   17804:	4018      	ands	r0, r3
				buffer->tmp_rd_idx =
   17806:	60a0      	str	r0, [r4, #8]
		cont = false;
   17808:	2300      	movs	r3, #0
   1780a:	e001      	b.n	17810 <mpsc_pbuf_claim+0x70>
   1780c:	2300      	movs	r3, #0
			item = NULL;
   1780e:	461e      	mov	r6, r3
   17810:	f385 8811 	msr	BASEPRI, r5
   17814:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
   17818:	b38b      	cbz	r3, 1787e <mpsc_pbuf_claim+0xde>
	__asm__ volatile(
   1781a:	f04f 0320 	mov.w	r3, #32
   1781e:	f3ef 8511 	mrs	r5, BASEPRI
   17822:	f383 8812 	msr	BASEPRI_MAX, r3
   17826:	f3bf 8f6f 	isb	sy
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   1782a:	68a2      	ldr	r2, [r4, #8]
   1782c:	6863      	ldr	r3, [r4, #4]
   1782e:	429a      	cmp	r2, r3
   17830:	d9b9      	bls.n	177a6 <mpsc_pbuf_claim+0x6>
	*res = buffer->size - buffer->tmp_rd_idx;
   17832:	6a23      	ldr	r3, [r4, #32]
   17834:	1a9b      	subs	r3, r3, r2
			&buffer->buf[buffer->tmp_rd_idx];
   17836:	69e1      	ldr	r1, [r4, #28]
		item = (union mpsc_pbuf_generic *)
   17838:	eb01 0682 	add.w	r6, r1, r2, lsl #2
		if (!a || is_invalid(item)) {
   1783c:	2b00      	cmp	r3, #0
   1783e:	d0e5      	beq.n	1780c <mpsc_pbuf_claim+0x6c>
	return !item->hdr.valid && !item->hdr.busy;
   17840:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
		if (!a || is_invalid(item)) {
   17844:	f013 0303 	ands.w	r3, r3, #3
   17848:	d016      	beq.n	17878 <mpsc_pbuf_claim+0xd8>
	if (item->hdr.busy && !item->hdr.valid) {
   1784a:	2b02      	cmp	r3, #2
   1784c:	d0ad      	beq.n	177aa <mpsc_pbuf_claim+0xa>
	return 0;
   1784e:	2000      	movs	r0, #0
	return item->hdr.valid;
   17850:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
			if (skip || !is_valid(item)) {
   17854:	f013 0f01 	tst.w	r3, #1
   17858:	d1be      	bne.n	177d8 <mpsc_pbuf_claim+0x38>
					skip ? skip : buffer->get_wlen(item);
   1785a:	b910      	cbnz	r0, 17862 <mpsc_pbuf_claim+0xc2>
   1785c:	69a3      	ldr	r3, [r4, #24]
   1785e:	4630      	mov	r0, r6
   17860:	4798      	blx	r3
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
   17862:	68a3      	ldr	r3, [r4, #8]
	uint32_t i = idx + val;
   17864:	4403      	add	r3, r0
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   17866:	6922      	ldr	r2, [r4, #16]
   17868:	f012 0201 	ands.w	r2, r2, #1
   1786c:	d1a2      	bne.n	177b4 <mpsc_pbuf_claim+0x14>
	return (i >= buffer->size) ? i - buffer->size : i;
   1786e:	6a21      	ldr	r1, [r4, #32]
   17870:	428b      	cmp	r3, r1
   17872:	d3a2      	bcc.n	177ba <mpsc_pbuf_claim+0x1a>
   17874:	1a5b      	subs	r3, r3, r1
   17876:	e7a0      	b.n	177ba <mpsc_pbuf_claim+0x1a>
		cont = false;
   17878:	2300      	movs	r3, #0
			item = NULL;
   1787a:	461e      	mov	r6, r3
   1787c:	e7c8      	b.n	17810 <mpsc_pbuf_claim+0x70>

	return item;
}
   1787e:	4630      	mov	r0, r6
   17880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00017882 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
   17882:	b538      	push	{r3, r4, r5, lr}
   17884:	4604      	mov	r4, r0
   17886:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   17888:	6983      	ldr	r3, [r0, #24]
   1788a:	4608      	mov	r0, r1
   1788c:	4798      	blx	r3
   1788e:	f04f 0220 	mov.w	r2, #32
   17892:	f3ef 8311 	mrs	r3, BASEPRI
   17896:	f382 8812 	msr	BASEPRI_MAX, r2
   1789a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
   1789e:	782a      	ldrb	r2, [r5, #0]
   178a0:	f36f 0200 	bfc	r2, #0, #1
   178a4:	702a      	strb	r2, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   178a6:	6922      	ldr	r2, [r4, #16]
   178a8:	f012 0f02 	tst.w	r2, #2
   178ac:	d00a      	beq.n	178c4 <mpsc_pbuf_free+0x42>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
   178ae:	69e2      	ldr	r2, [r4, #28]
   178b0:	68e1      	ldr	r1, [r4, #12]
   178b2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   178b6:	42aa      	cmp	r2, r5
   178b8:	d004      	beq.n	178c4 <mpsc_pbuf_free+0x42>
		witem->hdr.busy = 0;
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
	} else {
		witem->skip.len = wlen;
   178ba:	682a      	ldr	r2, [r5, #0]
   178bc:	f360 029f 	bfi	r2, r0, #2, #30
   178c0:	602a      	str	r2, [r5, #0]
   178c2:	e012      	b.n	178ea <mpsc_pbuf_free+0x68>
		witem->hdr.busy = 0;
   178c4:	782a      	ldrb	r2, [r5, #0]
   178c6:	f36f 0241 	bfc	r2, #1, #1
   178ca:	702a      	strb	r2, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   178cc:	68e2      	ldr	r2, [r4, #12]
	uint32_t i = idx + val;
   178ce:	4402      	add	r2, r0
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   178d0:	6921      	ldr	r1, [r4, #16]
   178d2:	f011 0f01 	tst.w	r1, #1
   178d6:	d104      	bne.n	178e2 <mpsc_pbuf_free+0x60>
	return (i >= buffer->size) ? i - buffer->size : i;
   178d8:	6a21      	ldr	r1, [r4, #32]
   178da:	428a      	cmp	r2, r1
   178dc:	d304      	bcc.n	178e8 <mpsc_pbuf_free+0x66>
   178de:	1a52      	subs	r2, r2, r1
   178e0:	e002      	b.n	178e8 <mpsc_pbuf_free+0x66>
		return i & (buffer->size - 1);
   178e2:	6a21      	ldr	r1, [r4, #32]
   178e4:	3901      	subs	r1, #1
   178e6:	400a      	ands	r2, r1
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   178e8:	60e2      	str	r2, [r4, #12]
	__asm__ volatile(
   178ea:	f383 8811 	msr	BASEPRI, r3
   178ee:	f3bf 8f6f 	isb	sy
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
   178f2:	f104 0028 	add.w	r0, r4, #40	; 0x28
	z_impl_k_sem_give(sem);
   178f6:	f7f9 fc8b 	bl	11210 <z_impl_k_sem_give>
}
   178fa:	bd38      	pop	{r3, r4, r5, pc}

000178fc <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   178fc:	6883      	ldr	r3, [r0, #8]
   178fe:	6842      	ldr	r2, [r0, #4]
   17900:	4293      	cmp	r3, r2
   17902:	d905      	bls.n	17910 <mpsc_pbuf_is_pending+0x14>
	*res = buffer->size - buffer->tmp_rd_idx;
   17904:	6a00      	ldr	r0, [r0, #32]
   17906:	1ac0      	subs	r0, r0, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   17908:	3800      	subs	r0, #0
   1790a:	bf18      	it	ne
   1790c:	2001      	movne	r0, #1
   1790e:	4770      	bx	lr
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   17910:	1ad0      	subs	r0, r2, r3
		return false;
   17912:	e7f9      	b.n	17908 <mpsc_pbuf_is_pending+0xc>

00017914 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_EXPERIMENTAL, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   17914:	4770      	bx	lr

00017916 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
   17916:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   17918:	f013 0f04 	tst.w	r3, #4
   1791c:	d001      	beq.n	17922 <log_msg_generic_get_wlen+0xc>
	return 0;
   1791e:	2000      	movs	r0, #0
}
   17920:	4770      	bx	lr
		return log_msg_get_total_wlen(msg->hdr.desc);
   17922:	6803      	ldr	r3, [r0, #0]
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   17924:	f3c3 2049 	ubfx	r0, r3, #9, #10
   17928:	f3c3 43cb 	ubfx	r3, r3, #19, #12
   1792c:	4418      	add	r0, r3
   1792e:	3017      	adds	r0, #23
   17930:	f020 0007 	bic.w	r0, r0, #7
   17934:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
   17936:	4770      	bx	lr

00017938 <dummy_timestamp>:
}
   17938:	2000      	movs	r0, #0
   1793a:	4770      	bx	lr

0001793c <msg_filter_check>:
}
   1793c:	2001      	movs	r0, #1
   1793e:	4770      	bx	lr

00017940 <default_get_timestamp>:
{
   17940:	b508      	push	{r3, lr}
   17942:	f006 fecd 	bl	1e6e0 <sys_clock_cycle_get_32>
}
   17946:	bd08      	pop	{r3, pc}

00017948 <k_msleep>:
{
   17948:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   1794a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   1794e:	17c1      	asrs	r1, r0, #31
   17950:	03c9      	lsls	r1, r1, #15
   17952:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   17956:	03c0      	lsls	r0, r0, #15
   17958:	f240 33e7 	movw	r3, #999	; 0x3e7
   1795c:	18c0      	adds	r0, r0, r3
   1795e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17962:	f04f 0300 	mov.w	r3, #0
   17966:	f141 0100 	adc.w	r1, r1, #0
   1796a:	f7e8 ffe7 	bl	93c <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   1796e:	f7fa f993 	bl	11c98 <z_impl_k_sleep>
}
   17972:	bd08      	pop	{r3, pc}

00017974 <msg_alloc>:
{
   17974:	b508      	push	{r3, lr}
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
   17976:	2200      	movs	r2, #0
   17978:	2300      	movs	r3, #0
   1797a:	f7ff fe5a 	bl	17632 <mpsc_pbuf_alloc>
}
   1797e:	bd08      	pop	{r3, pc}

00017980 <msg_free>:
{
   17980:	b508      	push	{r3, lr}
	mpsc_pbuf_free(buffer, &msg->buf);
   17982:	f7ff ff7e 	bl	17882 <mpsc_pbuf_free>
}
   17986:	bd08      	pop	{r3, pc}

00017988 <msg_pending>:
{
   17988:	b508      	push	{r3, lr}
	return mpsc_pbuf_is_pending(buffer);
   1798a:	f7ff ffb7 	bl	178fc <mpsc_pbuf_is_pending>
}
   1798e:	bd08      	pop	{r3, pc}

00017990 <z_log_vprintk>:
{
   17990:	b500      	push	{lr}
   17992:	b085      	sub	sp, #20
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
   17994:	9103      	str	r1, [sp, #12]
   17996:	9002      	str	r0, [sp, #8]
   17998:	2000      	movs	r0, #0
   1799a:	9001      	str	r0, [sp, #4]
   1799c:	9000      	str	r0, [sp, #0]
   1799e:	4603      	mov	r3, r0
   179a0:	4602      	mov	r2, r0
   179a2:	4601      	mov	r1, r0
   179a4:	f000 f88b 	bl	17abe <z_impl_z_log_msg_runtime_vcreate>
}
   179a8:	b005      	add	sp, #20
   179aa:	f85d fb04 	ldr.w	pc, [sp], #4

000179ae <z_log_notify_drop>:
 */
bool z_log_msg_pending(void);

static inline void z_log_notify_drop(const struct mpsc_pbuf_buffer *buffer,
				     const union mpsc_pbuf_generic *item)
{
   179ae:	b508      	push	{r3, lr}
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
   179b0:	2001      	movs	r0, #1
   179b2:	f7eb ffe7 	bl	3984 <z_log_dropped>
}
   179b6:	bd08      	pop	{r3, pc}

000179b8 <z_log_msg_claim>:
{
   179b8:	b508      	push	{r3, lr}
	return z_log_msg_local_claim();
   179ba:	f7ec f865 	bl	3a88 <z_log_msg_local_claim>
}
   179be:	bd08      	pop	{r3, pc}

000179c0 <msg_commit>:
{
   179c0:	b508      	push	{r3, lr}
	mpsc_pbuf_commit(buffer, &m->buf);
   179c2:	f7ff fec4 	bl	1774e <mpsc_pbuf_commit>
	z_log_msg_post_finalize();
   179c6:	f7ec f8fd 	bl	3bc4 <z_log_msg_post_finalize>
}
   179ca:	bd08      	pop	{r3, pc}

000179cc <z_log_get_tag>:
}
   179cc:	2000      	movs	r0, #0
   179ce:	4770      	bx	lr

000179d0 <z_cbprintf_cpy>:
{
   179d0:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
   179d2:	6853      	ldr	r3, [r2, #4]
   179d4:	6896      	ldr	r6, [r2, #8]
   179d6:	1b9b      	subs	r3, r3, r6
   179d8:	428b      	cmp	r3, r1
   179da:	d30c      	bcc.n	179f6 <z_cbprintf_cpy+0x26>
   179dc:	460c      	mov	r4, r1
   179de:	4615      	mov	r5, r2
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
   179e0:	6813      	ldr	r3, [r2, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   179e2:	460a      	mov	r2, r1
   179e4:	4601      	mov	r1, r0
   179e6:	1998      	adds	r0, r3, r6
   179e8:	f008 f9eb 	bl	1fdc2 <memcpy>
	desc->off += len;
   179ec:	68ab      	ldr	r3, [r5, #8]
   179ee:	4423      	add	r3, r4
   179f0:	60ab      	str	r3, [r5, #8]
	return len;
   179f2:	4620      	mov	r0, r4
}
   179f4:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
   179f6:	f06f 001b 	mvn.w	r0, #27
   179fa:	e7fb      	b.n	179f4 <z_cbprintf_cpy+0x24>

000179fc <z_log_msg_finalize>:
	!(IS_ENABLED(CONFIG_LOG_FRONTEND) && \
	 (IS_ENABLED(CONFIG_LOG_FRONTEND_ONLY) || log_backend_count_get() == 0))

void z_log_msg_finalize(struct log_msg *msg, const void *source,
			 const struct log_msg_desc desc, const void *data)
{
   179fc:	b570      	push	{r4, r5, r6, lr}
	if (!msg) {
   179fe:	b190      	cbz	r0, 17a26 <z_log_msg_finalize+0x2a>
   17a00:	460e      	mov	r6, r1
   17a02:	4614      	mov	r4, r2
   17a04:	4619      	mov	r1, r3
   17a06:	4605      	mov	r5, r0
		z_log_dropped(false);

		return;
	}

	if (data) {
   17a08:	b13b      	cbz	r3, 17a1a <z_log_msg_finalize+0x1e>
		uint8_t *d = msg->data + desc.package_len;
   17a0a:	3010      	adds	r0, #16
   17a0c:	f3c2 2349 	ubfx	r3, r2, #9, #10
   17a10:	f3c2 42cb 	ubfx	r2, r2, #19, #12
   17a14:	4418      	add	r0, r3
   17a16:	f008 f9d4 	bl	1fdc2 <memcpy>

		memcpy(d, data, desc.data_len);
	}

	msg->hdr.desc = desc;
   17a1a:	602c      	str	r4, [r5, #0]
	msg->hdr.source = source;
   17a1c:	606e      	str	r6, [r5, #4]
	z_log_msg_commit(msg);
   17a1e:	4628      	mov	r0, r5
   17a20:	f7ec f914 	bl	3c4c <z_log_msg_commit>
}
   17a24:	bd70      	pop	{r4, r5, r6, pc}
		z_log_dropped(false);
   17a26:	f7eb ffad 	bl	3984 <z_log_dropped>
		return;
   17a2a:	e7fb      	b.n	17a24 <z_log_msg_finalize+0x28>

00017a2c <z_impl_z_log_msg_static_create>:

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
   17a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17a30:	b08a      	sub	sp, #40	; 0x28
   17a32:	4605      	mov	r5, r0
   17a34:	461e      	mov	r6, r3

	if (!BACKENDS_IN_USE()) {
		return;
	}

	struct log_msg_desc out_desc = desc;
   17a36:	460f      	mov	r7, r1
	int inlen = desc.package_len;
   17a38:	f3c1 2449 	ubfx	r4, r1, #9, #10
	struct log_msg *msg;

	if (inlen > 0) {
   17a3c:	b364      	cbz	r4, 17a98 <z_impl_z_log_msg_static_create+0x6c>
   17a3e:	4690      	mov	r8, r2
	struct z_cbprintf_buf_desc buf_desc = {
   17a40:	2200      	movs	r2, #0
   17a42:	9207      	str	r2, [sp, #28]
   17a44:	9208      	str	r2, [sp, #32]
   17a46:	9209      	str	r2, [sp, #36]	; 0x24
	return cbprintf_package_convert(in_packaged, in_len,
   17a48:	2304      	movs	r3, #4
   17a4a:	9302      	str	r3, [sp, #8]
   17a4c:	ab05      	add	r3, sp, #20
   17a4e:	9301      	str	r3, [sp, #4]
   17a50:	230a      	movs	r3, #10
   17a52:	9300      	str	r3, [sp, #0]
   17a54:	ab07      	add	r3, sp, #28
   17a56:	4621      	mov	r1, r4
   17a58:	4640      	mov	r0, r8
   17a5a:	f7ea fec1 	bl	27e0 <cbprintf_package_convert>
					    strl, ARRAY_SIZE(strl));

		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
   17a5e:	f360 2752 	bfi	r7, r0, #9, #10
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   17a62:	f3c0 0909 	ubfx	r9, r0, #0, #10
   17a66:	f3c7 41cb 	ubfx	r1, r7, #19, #12
   17a6a:	4449      	add	r1, r9
   17a6c:	3117      	adds	r1, #23
   17a6e:	f021 0107 	bic.w	r1, r1, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   17a72:	0888      	lsrs	r0, r1, #2
   17a74:	f7ec f800 	bl	3a78 <z_log_msg_alloc>
		if (msg) {
   17a78:	4682      	mov	sl, r0
   17a7a:	b1b8      	cbz	r0, 17aac <z_impl_z_log_msg_static_create+0x80>
			len = cbprintf_package_copy(package, inlen,
   17a7c:	2304      	movs	r3, #4
   17a7e:	9302      	str	r3, [sp, #8]
   17a80:	ab05      	add	r3, sp, #20
   17a82:	9301      	str	r3, [sp, #4]
   17a84:	230a      	movs	r3, #10
   17a86:	9300      	str	r3, [sp, #0]
   17a88:	464b      	mov	r3, r9
   17a8a:	f100 0210 	add.w	r2, r0, #16
   17a8e:	4621      	mov	r1, r4
   17a90:	4640      	mov	r0, r8
   17a92:	f7ec f951 	bl	3d38 <cbprintf_package_copy>
						    msg->data, out_desc.package_len,
						    flags, strl, ARRAY_SIZE(strl));
			__ASSERT_NO_MSG(len >= 0);
   17a96:	e009      	b.n	17aac <z_impl_z_log_msg_static_create+0x80>
   17a98:	f3c1 41cb 	ubfx	r1, r1, #19, #12
   17a9c:	440c      	add	r4, r1
   17a9e:	3417      	adds	r4, #23
   17aa0:	f024 0407 	bic.w	r4, r4, #7
		}
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   17aa4:	08a0      	lsrs	r0, r4, #2
   17aa6:	f7eb ffe7 	bl	3a78 <z_log_msg_alloc>
   17aaa:	4682      	mov	sl, r0
	}

	z_log_msg_finalize(msg, source, out_desc, data);
   17aac:	4633      	mov	r3, r6
   17aae:	463a      	mov	r2, r7
   17ab0:	4629      	mov	r1, r5
   17ab2:	4650      	mov	r0, sl
   17ab4:	f7ff ffa2 	bl	179fc <z_log_msg_finalize>
}
   17ab8:	b00a      	add	sp, #40	; 0x28
   17aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00017abe <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
   17abe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ac2:	b085      	sub	sp, #20
   17ac4:	4681      	mov	r9, r0
   17ac6:	460d      	mov	r5, r1
   17ac8:	4690      	mov	r8, r2
   17aca:	461e      	mov	r6, r3
   17acc:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
   17ad0:	9f10      	ldr	r7, [sp, #64]	; 0x40
	int plen;

	if (fmt) {
   17ad2:	b3b7      	cbz	r7, 17b42 <z_impl_z_log_msg_runtime_vcreate+0x84>
		va_list ap2;

		va_copy(ap2, ap);
   17ad4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   17ad6:	9303      	str	r3, [sp, #12]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
   17ad8:	9300      	str	r3, [sp, #0]
   17ada:	463b      	mov	r3, r7
   17adc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   17ade:	2110      	movs	r1, #16
   17ae0:	2000      	movs	r0, #0
   17ae2:	f7ea fc2b 	bl	233c <cbvprintf_package>
		va_end(ap2);
	} else {
		plen = 0;
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   17ae6:	4682      	mov	sl, r0
   17ae8:	eb00 030b 	add.w	r3, r0, fp
   17aec:	3317      	adds	r3, #23
   17aee:	f023 0307 	bic.w	r3, r3, #7
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
   17af2:	2400      	movs	r4, #0
   17af4:	f36f 0400 	bfc	r4, #0, #1
   17af8:	f36f 0441 	bfc	r4, #1, #1
   17afc:	f36f 0482 	bfc	r4, #2, #1
   17b00:	f369 04c5 	bfi	r4, r9, #3, #3
   17b04:	f368 1488 	bfi	r4, r8, #6, #3
   17b08:	f360 2452 	bfi	r4, r0, #9, #10
   17b0c:	f36b 44de 	bfi	r4, fp, #19, #12
   17b10:	f36f 74df 	bfc	r4, #31, #1
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg_alloc(msg_wlen);
   17b14:	0898      	lsrs	r0, r3, #2
   17b16:	f7eb ffaf 	bl	3a78 <z_log_msg_alloc>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
   17b1a:	4680      	mov	r8, r0
   17b1c:	b140      	cbz	r0, 17b30 <z_impl_z_log_msg_runtime_vcreate+0x72>
   17b1e:	3010      	adds	r0, #16
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
   17b20:	b137      	cbz	r7, 17b30 <z_impl_z_log_msg_runtime_vcreate+0x72>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
   17b22:	9b11      	ldr	r3, [sp, #68]	; 0x44
   17b24:	9300      	str	r3, [sp, #0]
   17b26:	463b      	mov	r3, r7
   17b28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   17b2a:	4651      	mov	r1, sl
   17b2c:	f7ea fc06 	bl	233c <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
   17b30:	4633      	mov	r3, r6
   17b32:	4622      	mov	r2, r4
   17b34:	4629      	mov	r1, r5
   17b36:	4640      	mov	r0, r8
   17b38:	f7ff ff60 	bl	179fc <z_log_msg_finalize>
	}
}
   17b3c:	b005      	add	sp, #20
   17b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		plen = 0;
   17b42:	2000      	movs	r0, #0
   17b44:	e7cf      	b.n	17ae6 <z_impl_z_log_msg_runtime_vcreate+0x28>

00017b46 <buffer_write>:
{
   17b46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17b48:	4607      	mov	r7, r0
   17b4a:	460d      	mov	r5, r1
   17b4c:	4614      	mov	r4, r2
   17b4e:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
   17b50:	4632      	mov	r2, r6
   17b52:	4621      	mov	r1, r4
   17b54:	4628      	mov	r0, r5
   17b56:	47b8      	blx	r7
		buf += processed;
   17b58:	4405      	add	r5, r0
	} while (len != 0);
   17b5a:	1a24      	subs	r4, r4, r0
   17b5c:	d1f8      	bne.n	17b50 <buffer_write+0xa>
}
   17b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00017b60 <cbvprintf>:
{
   17b60:	b510      	push	{r4, lr}
   17b62:	b082      	sub	sp, #8
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   17b64:	2400      	movs	r4, #0
   17b66:	9400      	str	r4, [sp, #0]
   17b68:	f7eb fb18 	bl	319c <z_cbvprintf_impl>
}
   17b6c:	b002      	add	sp, #8
   17b6e:	bd10      	pop	{r4, pc}

00017b70 <color_prefix>:
{
   17b70:	b508      	push	{r3, lr}
   17b72:	4613      	mov	r3, r2
	color_print(output, color, true, level);
   17b74:	2201      	movs	r2, #1
   17b76:	f7ec f951 	bl	3e1c <color_print>
}
   17b7a:	bd08      	pop	{r3, pc}

00017b7c <color_postfix>:
{
   17b7c:	b508      	push	{r3, lr}
   17b7e:	4613      	mov	r3, r2
	color_print(output, color, false, level);
   17b80:	2200      	movs	r2, #0
   17b82:	f7ec f94b 	bl	3e1c <color_print>
}
   17b86:	bd08      	pop	{r3, pc}

00017b88 <postfix_print>:
{
   17b88:	b538      	push	{r3, r4, r5, lr}
   17b8a:	4605      	mov	r5, r0
   17b8c:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
   17b8e:	f001 0101 	and.w	r1, r1, #1
   17b92:	f7ff fff3 	bl	17b7c <color_postfix>
	newline_print(output, flags);
   17b96:	4621      	mov	r1, r4
   17b98:	4628      	mov	r0, r5
   17b9a:	f7ec f9c5 	bl	3f28 <newline_print>
}
   17b9e:	bd38      	pop	{r3, r4, r5, pc}

00017ba0 <log_msg_hexdump>:
{
   17ba0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17ba4:	b083      	sub	sp, #12
   17ba6:	4680      	mov	r8, r0
   17ba8:	460e      	mov	r6, r1
   17baa:	4615      	mov	r5, r2
   17bac:	461f      	mov	r7, r3
   17bae:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   17bb2:	462c      	mov	r4, r5
   17bb4:	2d10      	cmp	r5, #16
   17bb6:	bf28      	it	cs
   17bb8:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
   17bba:	f8cd 9000 	str.w	r9, [sp]
   17bbe:	463b      	mov	r3, r7
   17bc0:	4622      	mov	r2, r4
   17bc2:	4631      	mov	r1, r6
   17bc4:	4640      	mov	r0, r8
   17bc6:	f7ec f9c3 	bl	3f50 <hexdump_line_print>
		data += length;
   17bca:	4426      	add	r6, r4
	} while (len);
   17bcc:	1b2d      	subs	r5, r5, r4
   17bce:	d1f0      	bne.n	17bb2 <log_msg_hexdump+0x12>
}
   17bd0:	b003      	add	sp, #12
   17bd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00017bd6 <log_output_flush>:
{
   17bd6:	b510      	push	{r4, lr}
   17bd8:	4604      	mov	r4, r0
		     output->control_block->offset,
   17bda:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   17bdc:	6853      	ldr	r3, [r2, #4]
   17bde:	6812      	ldr	r2, [r2, #0]
   17be0:	6881      	ldr	r1, [r0, #8]
   17be2:	6800      	ldr	r0, [r0, #0]
   17be4:	f7ff ffaf 	bl	17b46 <buffer_write>
	output->control_block->offset = 0;
   17be8:	6863      	ldr	r3, [r4, #4]
   17bea:	2200      	movs	r2, #0
   17bec:	601a      	str	r2, [r3, #0]
}
   17bee:	bd10      	pop	{r4, pc}

00017bf0 <out_func>:
{
   17bf0:	b538      	push	{r3, r4, r5, lr}
   17bf2:	4605      	mov	r5, r0
   17bf4:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   17bf6:	684b      	ldr	r3, [r1, #4]
   17bf8:	681a      	ldr	r2, [r3, #0]
   17bfa:	68cb      	ldr	r3, [r1, #12]
   17bfc:	429a      	cmp	r2, r3
   17bfe:	d00f      	beq.n	17c20 <out_func+0x30>
	idx = atomic_inc(&out_ctx->control_block->offset);
   17c00:	6863      	ldr	r3, [r4, #4]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   17c02:	f3bf 8f5b 	dmb	ish
   17c06:	e853 2f00 	ldrex	r2, [r3]
   17c0a:	1c51      	adds	r1, r2, #1
   17c0c:	e843 1000 	strex	r0, r1, [r3]
   17c10:	2800      	cmp	r0, #0
   17c12:	d1f8      	bne.n	17c06 <out_func+0x16>
   17c14:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   17c18:	68a3      	ldr	r3, [r4, #8]
   17c1a:	549d      	strb	r5, [r3, r2]
}
   17c1c:	2000      	movs	r0, #0
   17c1e:	bd38      	pop	{r3, r4, r5, pc}
		log_output_flush(out_ctx);
   17c20:	4608      	mov	r0, r1
   17c22:	f7ff ffd8 	bl	17bd6 <log_output_flush>
   17c26:	e7eb      	b.n	17c00 <out_func+0x10>

00017c28 <cr_out_func>:
{
   17c28:	b538      	push	{r3, r4, r5, lr}
   17c2a:	4604      	mov	r4, r0
   17c2c:	460d      	mov	r5, r1
	if (c == '\n') {
   17c2e:	280a      	cmp	r0, #10
   17c30:	d005      	beq.n	17c3e <cr_out_func+0x16>
	out_func(c, ctx);
   17c32:	4629      	mov	r1, r5
   17c34:	4620      	mov	r0, r4
   17c36:	f7ff ffdb 	bl	17bf0 <out_func>
}
   17c3a:	2000      	movs	r0, #0
   17c3c:	bd38      	pop	{r3, r4, r5, pc}
		out_func((int)'\r', ctx);
   17c3e:	200d      	movs	r0, #13
   17c40:	f7ff ffd6 	bl	17bf0 <out_func>
   17c44:	e7f5      	b.n	17c32 <cr_out_func+0xa>

00017c46 <k_msleep>:
{
   17c46:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   17c48:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   17c4c:	17c1      	asrs	r1, r0, #31
   17c4e:	03c9      	lsls	r1, r1, #15
   17c50:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   17c54:	03c0      	lsls	r0, r0, #15
   17c56:	f240 33e7 	movw	r3, #999	; 0x3e7
   17c5a:	18c0      	adds	r0, r0, r3
   17c5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17c60:	f04f 0300 	mov.w	r3, #0
   17c64:	f141 0100 	adc.w	r1, r1, #0
   17c68:	f7e8 fe68 	bl	93c <__aeabi_uldivmod>
   17c6c:	f7fa f814 	bl	11c98 <z_impl_k_sleep>
}
   17c70:	bd08      	pop	{r3, pc}

00017c72 <log_backend_uart_init>:
}
   17c72:	4770      	bx	lr

00017c74 <zsock_poll_update_ctx>:
				 struct zsock_pollfd *pfd,
				 struct k_poll_event **pev)
{
	ARG_UNUSED(ctx);

	if (pfd->events & ZSOCK_POLLIN) {
   17c74:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   17c78:	f013 0f01 	tst.w	r3, #1
   17c7c:	d010      	beq.n	17ca0 <zsock_poll_update_ctx+0x2c>
		if ((*pev)->state != K_POLL_STATE_NOT_READY || sock_is_eof(ctx)) {
   17c7e:	6813      	ldr	r3, [r2, #0]
   17c80:	68db      	ldr	r3, [r3, #12]
   17c82:	f413 1ffe 	tst.w	r3, #2080768	; 0x1fc000
   17c86:	d103      	bne.n	17c90 <zsock_poll_update_ctx+0x1c>
   17c88:	6d83      	ldr	r3, [r0, #88]	; 0x58
   17c8a:	f013 0f01 	tst.w	r3, #1
   17c8e:	d004      	beq.n	17c9a <zsock_poll_update_ctx+0x26>
			pfd->revents |= ZSOCK_POLLIN;
   17c90:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
   17c94:	f043 0301 	orr.w	r3, r3, #1
   17c98:	80cb      	strh	r3, [r1, #6]
		}
		(*pev)++;
   17c9a:	6813      	ldr	r3, [r2, #0]
   17c9c:	3314      	adds	r3, #20
   17c9e:	6013      	str	r3, [r2, #0]
	}
	if (pfd->events & ZSOCK_POLLOUT) {
   17ca0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   17ca4:	f013 0f04 	tst.w	r3, #4
   17ca8:	d00a      	beq.n	17cc0 <zsock_poll_update_ctx+0x4c>
	return (enum net_sock_type)((context->flags & NET_CONTEXT_TYPE) >> 6);
   17caa:	f8b0 3088 	ldrh.w	r3, [r0, #136]	; 0x88
   17cae:	f3c3 1381 	ubfx	r3, r3, #6, #2
		if (IS_ENABLED(CONFIG_NET_NATIVE_TCP) &&
   17cb2:	2b01      	cmp	r3, #1
   17cb4:	d018      	beq.n	17ce8 <zsock_poll_update_ctx+0x74>
			    !sock_is_eof(ctx)) {
				pfd->revents |= ZSOCK_POLLOUT;
			}
			(*pev)++;
		} else {
			pfd->revents |= ZSOCK_POLLOUT;
   17cb6:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
   17cba:	f043 0304 	orr.w	r3, r3, #4
   17cbe:	80cb      	strh	r3, [r1, #6]
   17cc0:	6d83      	ldr	r3, [r0, #88]	; 0x58
		}
	}

	if (sock_is_error(ctx)) {
   17cc2:	f013 0f04 	tst.w	r3, #4
   17cc6:	d004      	beq.n	17cd2 <zsock_poll_update_ctx+0x5e>
		pfd->revents |= ZSOCK_POLLERR;
   17cc8:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
   17ccc:	f043 0308 	orr.w	r3, r3, #8
   17cd0:	80cb      	strh	r3, [r1, #6]
   17cd2:	6d83      	ldr	r3, [r0, #88]	; 0x58
	}

	if (sock_is_eof(ctx)) {
   17cd4:	f013 0f01 	tst.w	r3, #1
   17cd8:	d004      	beq.n	17ce4 <zsock_poll_update_ctx+0x70>
		pfd->revents |= ZSOCK_POLLHUP;
   17cda:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
   17cde:	f043 0310 	orr.w	r3, r3, #16
   17ce2:	80cb      	strh	r3, [r1, #6]
	}

	return 0;
}
   17ce4:	2000      	movs	r0, #0
   17ce6:	4770      	bx	lr
			if ((*pev)->state != K_POLL_STATE_NOT_READY &&
   17ce8:	6813      	ldr	r3, [r2, #0]
   17cea:	68db      	ldr	r3, [r3, #12]
   17cec:	f413 1ffe 	tst.w	r3, #2080768	; 0x1fc000
   17cf0:	d008      	beq.n	17d04 <zsock_poll_update_ctx+0x90>
   17cf2:	6d83      	ldr	r3, [r0, #88]	; 0x58
   17cf4:	f013 0f01 	tst.w	r3, #1
   17cf8:	d104      	bne.n	17d04 <zsock_poll_update_ctx+0x90>
				pfd->revents |= ZSOCK_POLLOUT;
   17cfa:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
   17cfe:	f043 0304 	orr.w	r3, r3, #4
   17d02:	80cb      	strh	r3, [r1, #6]
			(*pev)++;
   17d04:	6813      	ldr	r3, [r2, #0]
   17d06:	3314      	adds	r3, #20
   17d08:	6013      	str	r3, [r2, #0]
   17d0a:	e7d9      	b.n	17cc0 <zsock_poll_update_ctx+0x4c>

00017d0c <zsock_ctx_set_lock>:
	return zsock_sendto_ctx(obj, buffer, count, 0, NULL, 0);
}

static void zsock_ctx_set_lock(struct net_context *ctx, struct k_mutex *lock)
{
	ctx->cond.lock = lock;
   17d0c:	67c1      	str	r1, [r0, #124]	; 0x7c
}
   17d0e:	4770      	bx	lr

00017d10 <inet_is_supported>:
};

#if defined(CONFIG_NET_NATIVE)
static bool inet_is_supported(int family, int type, int proto)
{
	if (family != AF_INET && family != AF_INET6) {
   17d10:	3801      	subs	r0, #1
   17d12:	2801      	cmp	r0, #1
   17d14:	d801      	bhi.n	17d1a <inet_is_supported+0xa>
		return false;
	}

	return true;
   17d16:	2001      	movs	r0, #1
   17d18:	4770      	bx	lr
		return false;
   17d1a:	2000      	movs	r0, #0
}
   17d1c:	4770      	bx	lr

00017d1e <zsock_poll_prepare_ctx>:
{
   17d1e:	b570      	push	{r4, r5, r6, lr}
   17d20:	4605      	mov	r5, r0
   17d22:	4614      	mov	r4, r2
	if (pfd->events & ZSOCK_POLLIN) {
   17d24:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
   17d28:	f012 0f01 	tst.w	r2, #1
   17d2c:	d017      	beq.n	17d5e <zsock_poll_prepare_ctx+0x40>
		if (*pev == pev_end) {
   17d2e:	6822      	ldr	r2, [r4, #0]
   17d30:	429a      	cmp	r2, r3
   17d32:	d042      	beq.n	17dba <zsock_poll_prepare_ctx+0x9c>
		(*pev)->obj = &ctx->recv_q;
   17d34:	305c      	adds	r0, #92	; 0x5c
   17d36:	6110      	str	r0, [r2, #16]
		(*pev)->type = K_POLL_TYPE_FIFO_DATA_AVAILABLE;
   17d38:	6822      	ldr	r2, [r4, #0]
   17d3a:	7b50      	ldrb	r0, [r2, #13]
   17d3c:	2604      	movs	r6, #4
   17d3e:	f366 0005 	bfi	r0, r6, #0, #6
   17d42:	7350      	strb	r0, [r2, #13]
		(*pev)->mode = K_POLL_MODE_NOTIFY_ONLY;
   17d44:	6822      	ldr	r2, [r4, #0]
   17d46:	7b90      	ldrb	r0, [r2, #14]
   17d48:	f36f 1045 	bfc	r0, #5, #1
   17d4c:	7390      	strb	r0, [r2, #14]
		(*pev)->state = K_POLL_STATE_NOT_READY;
   17d4e:	6822      	ldr	r2, [r4, #0]
   17d50:	68d0      	ldr	r0, [r2, #12]
   17d52:	f36f 3094 	bfc	r0, #14, #7
   17d56:	60d0      	str	r0, [r2, #12]
		(*pev)++;
   17d58:	6822      	ldr	r2, [r4, #0]
   17d5a:	3214      	adds	r2, #20
   17d5c:	6022      	str	r2, [r4, #0]
	if (pfd->events & ZSOCK_POLLOUT) {
   17d5e:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
   17d62:	f012 0f04 	tst.w	r2, #4
   17d66:	d01f      	beq.n	17da8 <zsock_poll_prepare_ctx+0x8a>
   17d68:	f8b5 2088 	ldrh.w	r2, [r5, #136]	; 0x88
   17d6c:	f3c2 1281 	ubfx	r2, r2, #6, #2
		if (IS_ENABLED(CONFIG_NET_NATIVE_TCP) &&
   17d70:	2a01      	cmp	r2, #1
   17d72:	d125      	bne.n	17dc0 <zsock_poll_prepare_ctx+0xa2>
			if (*pev == pev_end) {
   17d74:	6826      	ldr	r6, [r4, #0]
   17d76:	429e      	cmp	r6, r3
   17d78:	d025      	beq.n	17dc6 <zsock_poll_prepare_ctx+0xa8>
			(*pev)->obj = net_tcp_tx_sem_get(ctx);
   17d7a:	4628      	mov	r0, r5
   17d7c:	f005 f891 	bl	1cea2 <net_tcp_tx_sem_get>
   17d80:	6130      	str	r0, [r6, #16]
			(*pev)->type = K_POLL_TYPE_SEM_AVAILABLE;
   17d82:	6823      	ldr	r3, [r4, #0]
   17d84:	7b5a      	ldrb	r2, [r3, #13]
   17d86:	2102      	movs	r1, #2
   17d88:	f361 0205 	bfi	r2, r1, #0, #6
   17d8c:	735a      	strb	r2, [r3, #13]
			(*pev)->mode = K_POLL_MODE_NOTIFY_ONLY;
   17d8e:	6823      	ldr	r3, [r4, #0]
   17d90:	7b9a      	ldrb	r2, [r3, #14]
   17d92:	f36f 1245 	bfc	r2, #5, #1
   17d96:	739a      	strb	r2, [r3, #14]
			(*pev)->state = K_POLL_STATE_NOT_READY;
   17d98:	6823      	ldr	r3, [r4, #0]
   17d9a:	68da      	ldr	r2, [r3, #12]
   17d9c:	f36f 3294 	bfc	r2, #14, #7
   17da0:	60da      	str	r2, [r3, #12]
			(*pev)++;
   17da2:	6823      	ldr	r3, [r4, #0]
   17da4:	3314      	adds	r3, #20
   17da6:	6023      	str	r3, [r4, #0]
   17da8:	6dab      	ldr	r3, [r5, #88]	; 0x58
	if (sock_is_eof(ctx) || sock_is_error(ctx)) {
   17daa:	f013 0f01 	tst.w	r3, #1
   17dae:	d10d      	bne.n	17dcc <zsock_poll_prepare_ctx+0xae>
   17db0:	f013 0f04 	tst.w	r3, #4
   17db4:	d10d      	bne.n	17dd2 <zsock_poll_prepare_ctx+0xb4>
	return 0;
   17db6:	2000      	movs	r0, #0
}
   17db8:	bd70      	pop	{r4, r5, r6, pc}
			return -ENOMEM;
   17dba:	f06f 000b 	mvn.w	r0, #11
   17dbe:	e7fb      	b.n	17db8 <zsock_poll_prepare_ctx+0x9a>
			return -EALREADY;
   17dc0:	f06f 0077 	mvn.w	r0, #119	; 0x77
   17dc4:	e7f8      	b.n	17db8 <zsock_poll_prepare_ctx+0x9a>
				return -ENOMEM;
   17dc6:	f06f 000b 	mvn.w	r0, #11
   17dca:	e7f5      	b.n	17db8 <zsock_poll_prepare_ctx+0x9a>
		return -EALREADY;
   17dcc:	f06f 0077 	mvn.w	r0, #119	; 0x77
   17dd0:	e7f2      	b.n	17db8 <zsock_poll_prepare_ctx+0x9a>
   17dd2:	f06f 0077 	mvn.w	r0, #119	; 0x77
   17dd6:	e7ef      	b.n	17db8 <zsock_poll_prepare_ctx+0x9a>

00017dd8 <sock_ioctl_vmeth>:
{
   17dd8:	b500      	push	{lr}
   17dda:	b083      	sub	sp, #12
   17ddc:	4684      	mov	ip, r0
   17dde:	9201      	str	r2, [sp, #4]
	switch (request) {
   17de0:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
   17de4:	d030      	beq.n	17e48 <sock_ioctl_vmeth+0x70>
   17de6:	d90f      	bls.n	17e08 <sock_ioctl_vmeth+0x30>
   17de8:	f240 1303 	movw	r3, #259	; 0x103
   17dec:	4299      	cmp	r1, r3
   17dee:	d03d      	beq.n	17e6c <sock_ioctl_vmeth+0x94>
   17df0:	f240 1305 	movw	r3, #261	; 0x105
   17df4:	4299      	cmp	r1, r3
   17df6:	d144      	bne.n	17e82 <sock_ioctl_vmeth+0xaa>
		lock = va_arg(args, struct k_mutex *);
   17df8:	9b01      	ldr	r3, [sp, #4]
   17dfa:	1d1a      	adds	r2, r3, #4
   17dfc:	9201      	str	r2, [sp, #4]
		zsock_ctx_set_lock(obj, lock);
   17dfe:	6819      	ldr	r1, [r3, #0]
   17e00:	f7ff ff84 	bl	17d0c <zsock_ctx_set_lock>
		return 0;
   17e04:	2000      	movs	r0, #0
   17e06:	e02e      	b.n	17e66 <sock_ioctl_vmeth+0x8e>
	switch (request) {
   17e08:	2903      	cmp	r1, #3
   17e0a:	d010      	beq.n	17e2e <sock_ioctl_vmeth+0x56>
   17e0c:	2904      	cmp	r1, #4
   17e0e:	d138      	bne.n	17e82 <sock_ioctl_vmeth+0xaa>
		flags = va_arg(args, int);
   17e10:	9b01      	ldr	r3, [sp, #4]
   17e12:	1d1a      	adds	r2, r3, #4
   17e14:	9201      	str	r2, [sp, #4]
   17e16:	6818      	ldr	r0, [r3, #0]
		if (flags & O_NONBLOCK) {
   17e18:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
   17e1c:	d00d      	beq.n	17e3a <sock_ioctl_vmeth+0x62>
	uintptr_t val = POINTER_TO_UINT(ctx->socket_data);
   17e1e:	f8dc 3058 	ldr.w	r3, [ip, #88]	; 0x58
	val = (val & ~mask) | flag;
   17e22:	f043 0302 	orr.w	r3, r3, #2
	(ctx)->socket_data = UINT_TO_POINTER(val);
   17e26:	f8cc 3058 	str.w	r3, [ip, #88]	; 0x58
		return 0;
   17e2a:	2000      	movs	r0, #0
}
   17e2c:	e01b      	b.n	17e66 <sock_ioctl_vmeth+0x8e>
	return POINTER_TO_UINT(ctx->socket_data) & mask;
   17e2e:	6d83      	ldr	r3, [r0, #88]	; 0x58
		if (sock_is_nonblock(obj)) {
   17e30:	f013 0f02 	tst.w	r3, #2
   17e34:	d12c      	bne.n	17e90 <sock_ioctl_vmeth+0xb8>
		return 0;
   17e36:	2000      	movs	r0, #0
   17e38:	e015      	b.n	17e66 <sock_ioctl_vmeth+0x8e>
	uintptr_t val = POINTER_TO_UINT(ctx->socket_data);
   17e3a:	f8dc 3058 	ldr.w	r3, [ip, #88]	; 0x58
	val = (val & ~mask) | flag;
   17e3e:	f023 0302 	bic.w	r3, r3, #2
	(ctx)->socket_data = UINT_TO_POINTER(val);
   17e42:	f8cc 3058 	str.w	r3, [ip, #88]	; 0x58
}
   17e46:	e00e      	b.n	17e66 <sock_ioctl_vmeth+0x8e>
		pfd = va_arg(args, struct zsock_pollfd *);
   17e48:	9a01      	ldr	r2, [sp, #4]
   17e4a:	1d10      	adds	r0, r2, #4
   17e4c:	9001      	str	r0, [sp, #4]
   17e4e:	6811      	ldr	r1, [r2, #0]
		pev = va_arg(args, struct k_poll_event **);
   17e50:	f102 0308 	add.w	r3, r2, #8
   17e54:	9301      	str	r3, [sp, #4]
   17e56:	6852      	ldr	r2, [r2, #4]
		pev_end = va_arg(args, struct k_poll_event *);
   17e58:	f100 0308 	add.w	r3, r0, #8
   17e5c:	9301      	str	r3, [sp, #4]
		return zsock_poll_prepare_ctx(obj, pfd, pev, pev_end);
   17e5e:	6843      	ldr	r3, [r0, #4]
   17e60:	4660      	mov	r0, ip
   17e62:	f7ff ff5c 	bl	17d1e <zsock_poll_prepare_ctx>
}
   17e66:	b003      	add	sp, #12
   17e68:	f85d fb04 	ldr.w	pc, [sp], #4
		pfd = va_arg(args, struct zsock_pollfd *);
   17e6c:	9a01      	ldr	r2, [sp, #4]
   17e6e:	1d13      	adds	r3, r2, #4
   17e70:	9301      	str	r3, [sp, #4]
   17e72:	6811      	ldr	r1, [r2, #0]
		pev = va_arg(args, struct k_poll_event **);
   17e74:	f102 0308 	add.w	r3, r2, #8
   17e78:	9301      	str	r3, [sp, #4]
		return zsock_poll_update_ctx(obj, pfd, pev);
   17e7a:	6852      	ldr	r2, [r2, #4]
   17e7c:	f7ff fefa 	bl	17c74 <zsock_poll_update_ctx>
   17e80:	e7f1      	b.n	17e66 <sock_ioctl_vmeth+0x8e>
		errno = EOPNOTSUPP;
   17e82:	f001 f921 	bl	190c8 <__errno>
   17e86:	235f      	movs	r3, #95	; 0x5f
   17e88:	6003      	str	r3, [r0, #0]
		return -1;
   17e8a:	f04f 30ff 	mov.w	r0, #4294967295
   17e8e:	e7ea      	b.n	17e66 <sock_ioctl_vmeth+0x8e>
		    return O_NONBLOCK;
   17e90:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   17e94:	e7e7      	b.n	17e66 <sock_ioctl_vmeth+0x8e>

00017e96 <zsock_flush_queue>:
{
   17e96:	b570      	push	{r4, r5, r6, lr}
   17e98:	4605      	mov	r5, r0
		((context->flags >> NET_CONTEXT_STATE_SHIFT) &
   17e9a:	f8b0 6088 	ldrh.w	r6, [r0, #136]	; 0x88
	return (enum net_context_state)
   17e9e:	f3c6 0641 	ubfx	r6, r6, #1, #2
	while ((p = k_fifo_get(&ctx->recv_q, K_NO_WAIT)) != NULL) {
   17ea2:	e002      	b.n	17eaa <zsock_flush_queue+0x14>
			net_context_put(p);
   17ea4:	4618      	mov	r0, r3
   17ea6:	f7ef fbbb 	bl	7620 <net_context_put>
	while ((p = k_fifo_get(&ctx->recv_q, K_NO_WAIT)) != NULL) {
   17eaa:	f105 045c 	add.w	r4, r5, #92	; 0x5c
	return z_impl_k_queue_get(queue, timeout);
   17eae:	2200      	movs	r2, #0
   17eb0:	2300      	movs	r3, #0
   17eb2:	4620      	mov	r0, r4
   17eb4:	f7f9 f96e 	bl	11194 <z_impl_k_queue_get>
   17eb8:	4603      	mov	r3, r0
   17eba:	b128      	cbz	r0, 17ec8 <zsock_flush_queue+0x32>
		if (is_listen) {
   17ebc:	2e03      	cmp	r6, #3
   17ebe:	d0f1      	beq.n	17ea4 <zsock_flush_queue+0xe>
			net_pkt_unref(p);
   17ec0:	4618      	mov	r0, r3
   17ec2:	f003 f8f5 	bl	1b0b0 <net_pkt_unref>
   17ec6:	e7f0      	b.n	17eaa <zsock_flush_queue+0x14>
	z_impl_k_queue_cancel_wait(queue);
   17ec8:	4620      	mov	r0, r4
   17eca:	f007 f955 	bl	1f178 <z_impl_k_queue_cancel_wait>
}
   17ece:	bd70      	pop	{r4, r5, r6, pc}

00017ed0 <zsock_received_cb>:
{
   17ed0:	b570      	push	{r4, r5, r6, lr}
   17ed2:	4604      	mov	r4, r0
   17ed4:	460d      	mov	r5, r1
   17ed6:	9e04      	ldr	r6, [sp, #16]
	if (ctx->cond.lock) {
   17ed8:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
   17eda:	b128      	cbz	r0, 17ee8 <zsock_received_cb+0x18>
	return z_impl_k_mutex_lock(mutex, timeout);
   17edc:	f04f 32ff 	mov.w	r2, #4294967295
   17ee0:	f04f 33ff 	mov.w	r3, #4294967295
   17ee4:	f7f9 f894 	bl	11010 <z_impl_k_mutex_lock>
	if (status < 0) {
   17ee8:	2e00      	cmp	r6, #0
   17eea:	db14      	blt.n	17f16 <zsock_received_cb+0x46>
	if (!pkt) {
   17eec:	b1d5      	cbz	r5, 17f24 <zsock_received_cb+0x54>
	pkt->sent_or_eof = eof;
   17eee:	f895 3037 	ldrb.w	r3, [r5, #55]	; 0x37
   17ef2:	f36f 0341 	bfc	r3, #1, #1
   17ef6:	f885 3037 	strb.w	r3, [r5, #55]	; 0x37
	k_fifo_put(&ctx->recv_q, pkt);
   17efa:	4629      	mov	r1, r5
   17efc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   17f00:	f007 f957 	bl	1f1b2 <k_queue_append>
	if (ctx->cond.lock) {
   17f04:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
   17f06:	b108      	cbz	r0, 17f0c <zsock_received_cb+0x3c>
	return z_impl_k_mutex_unlock(mutex);
   17f08:	f7f9 f906 	bl	11118 <z_impl_k_mutex_unlock>
	(void)k_condvar_signal(&ctx->cond.recv);
   17f0c:	f104 0074 	add.w	r0, r4, #116	; 0x74
	return z_impl_k_condvar_signal(condvar);
   17f10:	f7f9 ff3e 	bl	11d90 <z_impl_k_condvar_signal>
}
   17f14:	bd70      	pop	{r4, r5, r6, pc}
		ctx->user_data = INT_TO_POINTER(-status);
   17f16:	4276      	negs	r6, r6
   17f18:	6026      	str	r6, [r4, #0]
	uintptr_t val = POINTER_TO_UINT(ctx->socket_data);
   17f1a:	6da3      	ldr	r3, [r4, #88]	; 0x58
	val = (val & ~mask) | flag;
   17f1c:	f043 0304 	orr.w	r3, r3, #4
	(ctx)->socket_data = UINT_TO_POINTER(val);
   17f20:	65a3      	str	r3, [r4, #88]	; 0x58
}
   17f22:	e7e3      	b.n	17eec <zsock_received_cb+0x1c>
		struct net_pkt *last_pkt = k_fifo_peek_tail(&ctx->recv_q);
   17f24:	f104 055c 	add.w	r5, r4, #92	; 0x5c
	return z_impl_k_queue_peek_tail(queue);
   17f28:	4628      	mov	r0, r5
   17f2a:	f007 f95f 	bl	1f1ec <z_impl_k_queue_peek_tail>
		if (!last_pkt) {
   17f2e:	b130      	cbz	r0, 17f3e <zsock_received_cb+0x6e>
   17f30:	f890 3037 	ldrb.w	r3, [r0, #55]	; 0x37
   17f34:	f043 0302 	orr.w	r3, r3, #2
   17f38:	f880 3037 	strb.w	r3, [r0, #55]	; 0x37
		goto unlock;
   17f3c:	e7e2      	b.n	17f04 <zsock_received_cb+0x34>
	uintptr_t val = POINTER_TO_UINT(ctx->socket_data);
   17f3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
	val = (val & ~mask) | flag;
   17f40:	f043 0301 	orr.w	r3, r3, #1
	(ctx)->socket_data = UINT_TO_POINTER(val);
   17f44:	65a3      	str	r3, [r4, #88]	; 0x58
	z_impl_k_queue_cancel_wait(queue);
   17f46:	4628      	mov	r0, r5
   17f48:	f007 f916 	bl	1f178 <z_impl_k_queue_cancel_wait>
			NET_DBG("Marked socket %p as peer-closed", ctx);
   17f4c:	e7da      	b.n	17f04 <zsock_received_cb+0x34>

00017f4e <fifo_wait_non_empty>:
{
   17f4e:	b500      	push	{lr}
   17f50:	b087      	sub	sp, #28
	struct k_poll_event events[] = {
   17f52:	2100      	movs	r1, #0
   17f54:	9101      	str	r1, [sp, #4]
   17f56:	9102      	str	r1, [sp, #8]
   17f58:	9103      	str	r1, [sp, #12]
   17f5a:	9104      	str	r1, [sp, #16]
   17f5c:	9105      	str	r1, [sp, #20]
   17f5e:	f89d 1011 	ldrb.w	r1, [sp, #17]
   17f62:	f04f 0c04 	mov.w	ip, #4
   17f66:	f36c 0105 	bfi	r1, ip, #0, #6
   17f6a:	f88d 1011 	strb.w	r1, [sp, #17]
   17f6e:	9005      	str	r0, [sp, #20]
	return z_impl_k_poll(events, num_events, timeout);
   17f70:	2101      	movs	r1, #1
   17f72:	eb0d 000c 	add.w	r0, sp, ip
   17f76:	f7fa f985 	bl	12284 <z_impl_k_poll>
}
   17f7a:	b007      	add	sp, #28
   17f7c:	f85d fb04 	ldr.w	pc, [sp], #4

00017f80 <send_check_and_wait>:
{
   17f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17f84:	b086      	sub	sp, #24
   17f86:	460e      	mov	r6, r1
   17f88:	4615      	mov	r5, r2
   17f8a:	461c      	mov	r4, r3
   17f8c:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   17f90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   17f92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   17f94:	f1b3 3fff 	cmp.w	r3, #4294967295
   17f98:	bf08      	it	eq
   17f9a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   17f9e:	d133      	bne.n	18008 <send_check_and_wait+0x88>
   17fa0:	4607      	mov	r7, r0
	if (status != -ENOBUFS && status != -EAGAIN) {
   17fa2:	f111 0f69 	cmn.w	r1, #105	; 0x69
   17fa6:	d002      	beq.n	17fae <send_check_and_wait+0x2e>
   17fa8:	f111 0f0b 	cmn.w	r1, #11
   17fac:	d12c      	bne.n	18008 <send_check_and_wait+0x88>
	remaining = buf_timeout - sys_clock_tick_get();
   17fae:	f7fa f883 	bl	120b8 <sys_clock_tick_get>
   17fb2:	1a2d      	subs	r5, r5, r0
   17fb4:	eb64 0401 	sbc.w	r4, r4, r1
	if (remaining <= 0) {
   17fb8:	2d01      	cmp	r5, #1
   17fba:	f174 0400 	sbcs.w	r4, r4, #0
   17fbe:	db1e      	blt.n	17ffe <send_check_and_wait+0x7e>
	if (ctx->cond.lock) {
   17fc0:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
   17fc2:	b108      	cbz	r0, 17fc8 <send_check_and_wait+0x48>
	return z_impl_k_mutex_unlock(mutex);
   17fc4:	f7f9 f8a8 	bl	11118 <z_impl_k_mutex_unlock>
	if (status == -ENOBUFS) {
   17fc8:	f116 0f69 	cmn.w	r6, #105	; 0x69
   17fcc:	d026      	beq.n	1801c <send_check_and_wait+0x9c>
	if (status == -EAGAIN) {
   17fce:	f116 0f0b 	cmn.w	r6, #11
   17fd2:	d035      	beq.n	18040 <send_check_and_wait+0xc0>
	*retry_timeout = MIN(WAIT_BUFS_MAX_MS, *retry_timeout << 1);
   17fd4:	f8d8 3000 	ldr.w	r3, [r8]
   17fd8:	005b      	lsls	r3, r3, #1
   17fda:	2b64      	cmp	r3, #100	; 0x64
   17fdc:	bf28      	it	cs
   17fde:	2364      	movcs	r3, #100	; 0x64
   17fe0:	f8c8 3000 	str.w	r3, [r8]
	if (ctx->cond.lock) {
   17fe4:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
   17fe6:	2800      	cmp	r0, #0
   17fe8:	d061      	beq.n	180ae <send_check_and_wait+0x12e>
	return z_impl_k_mutex_lock(mutex, timeout);
   17fea:	f04f 32ff 	mov.w	r2, #4294967295
   17fee:	f04f 33ff 	mov.w	r3, #4294967295
   17ff2:	f7f9 f80d 	bl	11010 <z_impl_k_mutex_lock>
	return 0;
   17ff6:	2000      	movs	r0, #0
}
   17ff8:	b006      	add	sp, #24
   17ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (status == -ENOBUFS) {
   17ffe:	f116 0f69 	cmn.w	r6, #105	; 0x69
   18002:	d008      	beq.n	18016 <send_check_and_wait+0x96>
			status = -ENOBUFS;
   18004:	f06f 0668 	mvn.w	r6, #104	; 0x68
	errno = -status;
   18008:	f001 f85e 	bl	190c8 <__errno>
   1800c:	4276      	negs	r6, r6
   1800e:	6006      	str	r6, [r0, #0]
	return -1;
   18010:	f04f 30ff 	mov.w	r0, #4294967295
   18014:	e7f0      	b.n	17ff8 <send_check_and_wait+0x78>
			status = -ENOMEM;
   18016:	f06f 060b 	mvn.w	r6, #11
   1801a:	e7f5      	b.n	18008 <send_check_and_wait+0x88>
		k_sleep(K_MSEC(*retry_timeout));
   1801c:	f8d8 0000 	ldr.w	r0, [r8]
   18020:	0c41      	lsrs	r1, r0, #17
   18022:	03c0      	lsls	r0, r0, #15
   18024:	f240 33e7 	movw	r3, #999	; 0x3e7
   18028:	18c0      	adds	r0, r0, r3
   1802a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1802e:	f04f 0300 	mov.w	r3, #0
   18032:	f141 0100 	adc.w	r1, r1, #0
   18036:	f7e8 fc81 	bl	93c <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   1803a:	f7f9 fe2d 	bl	11c98 <z_impl_k_sleep>
   1803e:	e7c6      	b.n	17fce <send_check_and_wait+0x4e>
	return (enum net_sock_type)((context->flags & NET_CONTEXT_TYPE) >> 6);
   18040:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
   18044:	f3c3 1381 	ubfx	r3, r3, #6, #2
		if (IS_ENABLED(CONFIG_NET_NATIVE_TCP) &&
   18048:	2b01      	cmp	r3, #1
   1804a:	d011      	beq.n	18070 <send_check_and_wait+0xf0>
			k_sleep(K_MSEC(*retry_timeout));
   1804c:	f8d8 0000 	ldr.w	r0, [r8]
   18050:	0c41      	lsrs	r1, r0, #17
   18052:	03c0      	lsls	r0, r0, #15
   18054:	f240 33e7 	movw	r3, #999	; 0x3e7
   18058:	18c0      	adds	r0, r0, r3
   1805a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1805e:	f04f 0300 	mov.w	r3, #0
   18062:	f141 0100 	adc.w	r1, r1, #0
   18066:	f7e8 fc69 	bl	93c <__aeabi_uldivmod>
   1806a:	f7f9 fe15 	bl	11c98 <z_impl_k_sleep>
   1806e:	e7b1      	b.n	17fd4 <send_check_and_wait+0x54>
					  net_tcp_tx_sem_get(ctx));
   18070:	4638      	mov	r0, r7
   18072:	f004 ff16 	bl	1cea2 <net_tcp_tx_sem_get>
   18076:	4603      	mov	r3, r0
			k_poll_event_init(&event,
   18078:	2200      	movs	r2, #0
   1807a:	2102      	movs	r1, #2
   1807c:	a801      	add	r0, sp, #4
   1807e:	f007 fe46 	bl	1fd0e <k_poll_event_init>
			k_poll(&event, 1, K_MSEC(*retry_timeout));
   18082:	f8d8 0000 	ldr.w	r0, [r8]
   18086:	0c41      	lsrs	r1, r0, #17
   18088:	03c0      	lsls	r0, r0, #15
   1808a:	f240 33e7 	movw	r3, #999	; 0x3e7
   1808e:	18c0      	adds	r0, r0, r3
   18090:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   18094:	f04f 0300 	mov.w	r3, #0
   18098:	f141 0100 	adc.w	r1, r1, #0
   1809c:	f7e8 fc4e 	bl	93c <__aeabi_uldivmod>
   180a0:	4602      	mov	r2, r0
   180a2:	460b      	mov	r3, r1
	return z_impl_k_poll(events, num_events, timeout);
   180a4:	2101      	movs	r1, #1
   180a6:	a801      	add	r0, sp, #4
   180a8:	f7fa f8ec 	bl	12284 <z_impl_k_poll>
   180ac:	e792      	b.n	17fd4 <send_check_and_wait+0x54>
	return 0;
   180ae:	2000      	movs	r0, #0
   180b0:	e7a2      	b.n	17ff8 <send_check_and_wait+0x78>

000180b2 <sock_get_pkt_src_addr>:
{
   180b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   180b6:	b08a      	sub	sp, #40	; 0x28
	if (!addr || !pkt) {
   180b8:	2a00      	cmp	r2, #0
   180ba:	d065      	beq.n	18188 <sock_get_pkt_src_addr+0xd6>
   180bc:	4604      	mov	r4, r0
   180be:	460e      	mov	r6, r1
   180c0:	461d      	mov	r5, r3
   180c2:	4617      	mov	r7, r2
   180c4:	2800      	cmp	r0, #0
   180c6:	d062      	beq.n	1818e <sock_get_pkt_src_addr+0xdc>
	backup->buf = pkt->cursor.buf;
   180c8:	68c3      	ldr	r3, [r0, #12]
   180ca:	9308      	str	r3, [sp, #32]
	backup->pos = pkt->cursor.pos;
   180cc:	6903      	ldr	r3, [r0, #16]
   180ce:	9309      	str	r3, [sp, #36]	; 0x24
	net_pkt_cursor_init(pkt);
   180d0:	f003 f886 	bl	1b1e0 <net_pkt_cursor_init>
	return pkt->family;
   180d4:	f894 2037 	ldrb.w	r2, [r4, #55]	; 0x37
   180d8:	0952      	lsrs	r2, r2, #5
	addr->sa_family = net_pkt_family(pkt);
   180da:	803a      	strh	r2, [r7, #0]
   180dc:	f894 2037 	ldrb.w	r2, [r4, #55]	; 0x37
   180e0:	0952      	lsrs	r2, r2, #5
	if (IS_ENABLED(CONFIG_NET_IPV4) &&
   180e2:	2a01      	cmp	r2, #1
   180e4:	d146      	bne.n	18174 <sock_get_pkt_src_addr+0xc2>
		NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access,
   180e6:	2300      	movs	r3, #0
   180e8:	9303      	str	r3, [sp, #12]
   180ea:	2314      	movs	r3, #20
   180ec:	9304      	str	r3, [sp, #16]
		if (addrlen < sizeof(struct sockaddr_in)) {
   180ee:	2d07      	cmp	r5, #7
   180f0:	d802      	bhi.n	180f8 <sock_get_pkt_src_addr+0x46>
			ret = -EINVAL;
   180f2:	f06f 0515 	mvn.w	r5, #21
   180f6:	e03f      	b.n	18178 <sock_get_pkt_src_addr+0xc6>
		ipv4_hdr = (struct net_ipv4_hdr *)net_pkt_get_data(
   180f8:	a903      	add	r1, sp, #12
   180fa:	4620      	mov	r0, r4
   180fc:	f003 fb02 	bl	1b704 <net_pkt_get_data>
		if (!ipv4_hdr ||
   18100:	4680      	mov	r8, r0
   18102:	b120      	cbz	r0, 1810e <sock_get_pkt_src_addr+0x5c>
	return net_pkt_skip(pkt, access->size);
   18104:	9904      	ldr	r1, [sp, #16]
   18106:	4620      	mov	r0, r4
   18108:	f003 f8dc 	bl	1b2c4 <net_pkt_skip>
   1810c:	b110      	cbz	r0, 18114 <sock_get_pkt_src_addr+0x62>
			ret = -ENOBUFS;
   1810e:	f06f 0568 	mvn.w	r5, #104	; 0x68
			goto error;
   18112:	e031      	b.n	18178 <sock_get_pkt_src_addr+0xc6>
		    net_pkt_skip(pkt, net_pkt_ipv4_opts_len(pkt))) {
   18114:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
   18118:	4620      	mov	r0, r4
   1811a:	f003 f8d3 	bl	1b2c4 <net_pkt_skip>
		    net_pkt_acknowledge_data(pkt, &ipv4_access) ||
   1811e:	4605      	mov	r5, r0
   18120:	2800      	cmp	r0, #0
   18122:	d1f4      	bne.n	1810e <sock_get_pkt_src_addr+0x5c>
	net_ipaddr_copy((struct in_addr *)dest, (const struct in_addr *)src);
   18124:	f8d8 300c 	ldr.w	r3, [r8, #12]
   18128:	607b      	str	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   1812a:	2e11      	cmp	r6, #17
   1812c:	d004      	beq.n	18138 <sock_get_pkt_src_addr+0x86>
	} else if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
   1812e:	2e06      	cmp	r6, #6
   18130:	d011      	beq.n	18156 <sock_get_pkt_src_addr+0xa4>
		ret = -ENOTSUP;
   18132:	f06f 0585 	mvn.w	r5, #133	; 0x85
   18136:	e01f      	b.n	18178 <sock_get_pkt_src_addr+0xc6>
		NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
   18138:	ab01      	add	r3, sp, #4
   1813a:	9303      	str	r3, [sp, #12]
   1813c:	2308      	movs	r3, #8
   1813e:	9304      	str	r3, [sp, #16]
		udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt,
   18140:	a903      	add	r1, sp, #12
   18142:	4620      	mov	r0, r4
   18144:	f003 fade 	bl	1b704 <net_pkt_get_data>
		if (!udp_hdr) {
   18148:	b110      	cbz	r0, 18150 <sock_get_pkt_src_addr+0x9e>
		*port = udp_hdr->src_port;
   1814a:	8803      	ldrh	r3, [r0, #0]
   1814c:	807b      	strh	r3, [r7, #2]
   1814e:	e013      	b.n	18178 <sock_get_pkt_src_addr+0xc6>
			ret = -ENOBUFS;
   18150:	f06f 0568 	mvn.w	r5, #104	; 0x68
   18154:	e010      	b.n	18178 <sock_get_pkt_src_addr+0xc6>
		NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
   18156:	ab03      	add	r3, sp, #12
   18158:	9301      	str	r3, [sp, #4]
   1815a:	2314      	movs	r3, #20
   1815c:	9302      	str	r3, [sp, #8]
		tcp_hdr = (struct net_tcp_hdr *)net_pkt_get_data(pkt,
   1815e:	a901      	add	r1, sp, #4
   18160:	4620      	mov	r0, r4
   18162:	f003 facf 	bl	1b704 <net_pkt_get_data>
		if (!tcp_hdr) {
   18166:	b110      	cbz	r0, 1816e <sock_get_pkt_src_addr+0xbc>
		*port = tcp_hdr->src_port;
   18168:	8803      	ldrh	r3, [r0, #0]
   1816a:	807b      	strh	r3, [r7, #2]
   1816c:	e004      	b.n	18178 <sock_get_pkt_src_addr+0xc6>
			ret = -ENOBUFS;
   1816e:	f06f 0568 	mvn.w	r5, #104	; 0x68
   18172:	e001      	b.n	18178 <sock_get_pkt_src_addr+0xc6>
		ret = -ENOTSUP;
   18174:	f06f 0585 	mvn.w	r5, #133	; 0x85
	pkt->cursor.buf = backup->buf;
   18178:	9b08      	ldr	r3, [sp, #32]
   1817a:	60e3      	str	r3, [r4, #12]
	pkt->cursor.pos = backup->pos;
   1817c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1817e:	6123      	str	r3, [r4, #16]
}
   18180:	4628      	mov	r0, r5
   18182:	b00a      	add	sp, #40	; 0x28
   18184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
   18188:	f06f 0515 	mvn.w	r5, #21
   1818c:	e7f8      	b.n	18180 <sock_get_pkt_src_addr+0xce>
   1818e:	f06f 0515 	mvn.w	r5, #21
   18192:	e7f5      	b.n	18180 <sock_get_pkt_src_addr+0xce>

00018194 <zsock_close_ctx>:
{
   18194:	b510      	push	{r4, lr}
   18196:	b082      	sub	sp, #8
   18198:	4604      	mov	r4, r0
		((context->flags >> NET_CONTEXT_STATE_SHIFT) &
   1819a:	f8b0 3088 	ldrh.w	r3, [r0, #136]	; 0x88
	return (enum net_context_state)
   1819e:	f3c3 0341 	ubfx	r3, r3, #1, #2
	if (net_context_get_state(ctx) == NET_CONTEXT_LISTENING) {
   181a2:	2b03      	cmp	r3, #3
   181a4:	d010      	beq.n	181c8 <zsock_close_ctx+0x34>
		(void)net_context_recv(ctx, NULL, K_NO_WAIT, NULL);
   181a6:	2100      	movs	r1, #0
   181a8:	9100      	str	r1, [sp, #0]
   181aa:	2200      	movs	r2, #0
   181ac:	2300      	movs	r3, #0
   181ae:	f002 fd4b 	bl	1ac48 <net_context_recv>
	zsock_flush_queue(ctx);
   181b2:	4620      	mov	r0, r4
   181b4:	f7ff fe6f 	bl	17e96 <zsock_flush_queue>
	SET_ERRNO(net_context_put(ctx));
   181b8:	4620      	mov	r0, r4
   181ba:	f7ef fa31 	bl	7620 <net_context_put>
   181be:	1e04      	subs	r4, r0, #0
   181c0:	db09      	blt.n	181d6 <zsock_close_ctx+0x42>
	return 0;
   181c2:	2000      	movs	r0, #0
}
   181c4:	b002      	add	sp, #8
   181c6:	bd10      	pop	{r4, pc}
		(void)net_context_accept(ctx, NULL, K_NO_WAIT, NULL);
   181c8:	2100      	movs	r1, #0
   181ca:	9100      	str	r1, [sp, #0]
   181cc:	2200      	movs	r2, #0
   181ce:	2300      	movs	r3, #0
   181d0:	f002 fc60 	bl	1aa94 <net_context_accept>
   181d4:	e7ed      	b.n	181b2 <zsock_close_ctx+0x1e>
	SET_ERRNO(net_context_put(ctx));
   181d6:	f000 ff77 	bl	190c8 <__errno>
   181da:	4264      	negs	r4, r4
   181dc:	6004      	str	r4, [r0, #0]
   181de:	f04f 30ff 	mov.w	r0, #4294967295
   181e2:	e7ef      	b.n	181c4 <zsock_close_ctx+0x30>

000181e4 <sock_close_vmeth>:
{
   181e4:	b508      	push	{r3, lr}
	return zsock_close_ctx(obj);
   181e6:	f7ff ffd5 	bl	18194 <zsock_close_ctx>
}
   181ea:	bd08      	pop	{r3, pc}

000181ec <z_impl_zsock_close>:
{
   181ec:	b530      	push	{r4, r5, lr}
   181ee:	b083      	sub	sp, #12
   181f0:	4605      	mov	r5, r0
	ctx = z_get_fd_obj_and_vtable(sock,
   181f2:	466a      	mov	r2, sp
   181f4:	a901      	add	r1, sp, #4
   181f6:	f7ea fdd1 	bl	2d9c <z_get_fd_obj_and_vtable>
	if (ctx == NULL) {
   181fa:	b1a8      	cbz	r0, 18228 <z_impl_zsock_close+0x3c>
   181fc:	4604      	mov	r4, r0
	(void)k_mutex_lock(lock, K_FOREVER);
   181fe:	9800      	ldr	r0, [sp, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   18200:	f04f 32ff 	mov.w	r2, #4294967295
   18204:	f04f 33ff 	mov.w	r3, #4294967295
   18208:	f7f8 ff02 	bl	11010 <z_impl_k_mutex_lock>
	ret = vtable->fd_vtable.close(ctx);
   1820c:	9b01      	ldr	r3, [sp, #4]
   1820e:	689b      	ldr	r3, [r3, #8]
   18210:	4620      	mov	r0, r4
   18212:	4798      	blx	r3
   18214:	4604      	mov	r4, r0
	k_mutex_unlock(lock);
   18216:	9800      	ldr	r0, [sp, #0]
	return z_impl_k_mutex_unlock(mutex);
   18218:	f7f8 ff7e 	bl	11118 <z_impl_k_mutex_unlock>
	z_free_fd(sock);
   1821c:	4628      	mov	r0, r5
   1821e:	f7fe fa90 	bl	16742 <z_free_fd>
}
   18222:	4620      	mov	r0, r4
   18224:	b003      	add	sp, #12
   18226:	bd30      	pop	{r4, r5, pc}
		errno = EBADF;
   18228:	f000 ff4e 	bl	190c8 <__errno>
   1822c:	2309      	movs	r3, #9
   1822e:	6003      	str	r3, [r0, #0]
		return -1;
   18230:	f04f 34ff 	mov.w	r4, #4294967295
   18234:	e7f5      	b.n	18222 <z_impl_zsock_close+0x36>

00018236 <zsock_shutdown_ctx>:
{
   18236:	b570      	push	{r4, r5, r6, lr}
   18238:	b082      	sub	sp, #8
	if (how == ZSOCK_SHUT_RD) {
   1823a:	460d      	mov	r5, r1
   1823c:	bb89      	cbnz	r1, 182a2 <zsock_shutdown_ctx+0x6c>
   1823e:	4604      	mov	r4, r0
		((context->flags >> NET_CONTEXT_STATE_SHIFT) &
   18240:	f8b0 3088 	ldrh.w	r3, [r0, #136]	; 0x88
	return (enum net_context_state)
   18244:	f3c3 0341 	ubfx	r3, r3, #1, #2
		if (net_context_get_state(ctx) == NET_CONTEXT_LISTENING) {
   18248:	2b03      	cmp	r3, #3
   1824a:	d015      	beq.n	18278 <zsock_shutdown_ctx+0x42>
			SET_ERRNO(net_context_recv(ctx, NULL, K_NO_WAIT, NULL));
   1824c:	2100      	movs	r1, #0
   1824e:	9100      	str	r1, [sp, #0]
   18250:	2200      	movs	r2, #0
   18252:	2300      	movs	r3, #0
   18254:	f002 fcf8 	bl	1ac48 <net_context_recv>
   18258:	1e06      	subs	r6, r0, #0
   1825a:	db1b      	blt.n	18294 <zsock_shutdown_ctx+0x5e>
	uintptr_t val = POINTER_TO_UINT(ctx->socket_data);
   1825c:	6da3      	ldr	r3, [r4, #88]	; 0x58
	val = (val & ~mask) | flag;
   1825e:	f043 0301 	orr.w	r3, r3, #1
	(ctx)->socket_data = UINT_TO_POINTER(val);
   18262:	65a3      	str	r3, [r4, #88]	; 0x58
		zsock_flush_queue(ctx);
   18264:	4620      	mov	r0, r4
   18266:	f7ff fe16 	bl	17e96 <zsock_flush_queue>
		(void)k_condvar_signal(&ctx->cond.recv);
   1826a:	f104 0074 	add.w	r0, r4, #116	; 0x74
	return z_impl_k_condvar_signal(condvar);
   1826e:	f7f9 fd8f 	bl	11d90 <z_impl_k_condvar_signal>
	return 0;
   18272:	4628      	mov	r0, r5
}
   18274:	b002      	add	sp, #8
   18276:	bd70      	pop	{r4, r5, r6, pc}
			SET_ERRNO(net_context_accept(ctx, NULL, K_NO_WAIT, NULL));
   18278:	9100      	str	r1, [sp, #0]
   1827a:	2200      	movs	r2, #0
   1827c:	2300      	movs	r3, #0
   1827e:	f002 fc09 	bl	1aa94 <net_context_accept>
   18282:	1e06      	subs	r6, r0, #0
   18284:	daea      	bge.n	1825c <zsock_shutdown_ctx+0x26>
   18286:	f000 ff1f 	bl	190c8 <__errno>
   1828a:	4276      	negs	r6, r6
   1828c:	6006      	str	r6, [r0, #0]
   1828e:	f04f 30ff 	mov.w	r0, #4294967295
   18292:	e7ef      	b.n	18274 <zsock_shutdown_ctx+0x3e>
			SET_ERRNO(net_context_recv(ctx, NULL, K_NO_WAIT, NULL));
   18294:	f000 ff18 	bl	190c8 <__errno>
   18298:	4276      	negs	r6, r6
   1829a:	6006      	str	r6, [r0, #0]
   1829c:	f04f 30ff 	mov.w	r0, #4294967295
   182a0:	e7e8      	b.n	18274 <zsock_shutdown_ctx+0x3e>
	} else if (how == ZSOCK_SHUT_WR || how == ZSOCK_SHUT_RDWR) {
   182a2:	1e48      	subs	r0, r1, #1
   182a4:	2801      	cmp	r0, #1
   182a6:	d906      	bls.n	182b6 <zsock_shutdown_ctx+0x80>
		SET_ERRNO(-EINVAL);
   182a8:	f000 ff0e 	bl	190c8 <__errno>
   182ac:	2316      	movs	r3, #22
   182ae:	6003      	str	r3, [r0, #0]
   182b0:	f04f 30ff 	mov.w	r0, #4294967295
   182b4:	e7de      	b.n	18274 <zsock_shutdown_ctx+0x3e>
		SET_ERRNO(-ENOTSUP);
   182b6:	f000 ff07 	bl	190c8 <__errno>
   182ba:	2386      	movs	r3, #134	; 0x86
   182bc:	6003      	str	r3, [r0, #0]
   182be:	f04f 30ff 	mov.w	r0, #4294967295
   182c2:	e7d7      	b.n	18274 <zsock_shutdown_ctx+0x3e>

000182c4 <sock_shutdown_vmeth>:
{
   182c4:	b508      	push	{r3, lr}
	return zsock_shutdown_ctx(obj, how);
   182c6:	f7ff ffb6 	bl	18236 <zsock_shutdown_ctx>
}
   182ca:	bd08      	pop	{r3, pc}

000182cc <sock_bind_vmeth>:
{
   182cc:	b508      	push	{r3, lr}
	return zsock_bind_ctx(obj, addr, addrlen);
   182ce:	f7ec f8c3 	bl	4458 <zsock_bind_ctx>
}
   182d2:	bd08      	pop	{r3, pc}

000182d4 <sock_connect_vmeth>:
{
   182d4:	b508      	push	{r3, lr}
	return zsock_connect_ctx(obj, addr, addrlen);
   182d6:	f7ec f8eb 	bl	44b0 <zsock_connect_ctx>
}
   182da:	bd08      	pop	{r3, pc}

000182dc <z_impl_zsock_connect>:
{
   182dc:	b570      	push	{r4, r5, r6, lr}
   182de:	b082      	sub	sp, #8
   182e0:	460d      	mov	r5, r1
   182e2:	4614      	mov	r4, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   182e4:	aa01      	add	r2, sp, #4
   182e6:	4669      	mov	r1, sp
   182e8:	f7ea fd58 	bl	2d9c <z_get_fd_obj_and_vtable>
	VTABLE_CALL(connect, sock, addr, addrlen);
   182ec:	b1b8      	cbz	r0, 1831e <z_impl_zsock_connect+0x42>
   182ee:	4606      	mov	r6, r0
   182f0:	9b00      	ldr	r3, [sp, #0]
   182f2:	699b      	ldr	r3, [r3, #24]
   182f4:	b1d3      	cbz	r3, 1832c <z_impl_zsock_connect+0x50>
   182f6:	9801      	ldr	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   182f8:	f04f 32ff 	mov.w	r2, #4294967295
   182fc:	f04f 33ff 	mov.w	r3, #4294967295
   18300:	f7f8 fe86 	bl	11010 <z_impl_k_mutex_lock>
   18304:	9b00      	ldr	r3, [sp, #0]
   18306:	699b      	ldr	r3, [r3, #24]
   18308:	4622      	mov	r2, r4
   1830a:	4629      	mov	r1, r5
   1830c:	4630      	mov	r0, r6
   1830e:	4798      	blx	r3
   18310:	4604      	mov	r4, r0
   18312:	9801      	ldr	r0, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
   18314:	f7f8 ff00 	bl	11118 <z_impl_k_mutex_unlock>
}
   18318:	4620      	mov	r0, r4
   1831a:	b002      	add	sp, #8
   1831c:	bd70      	pop	{r4, r5, r6, pc}
	VTABLE_CALL(connect, sock, addr, addrlen);
   1831e:	f000 fed3 	bl	190c8 <__errno>
   18322:	2309      	movs	r3, #9
   18324:	6003      	str	r3, [r0, #0]
   18326:	f04f 34ff 	mov.w	r4, #4294967295
   1832a:	e7f5      	b.n	18318 <z_impl_zsock_connect+0x3c>
   1832c:	f000 fecc 	bl	190c8 <__errno>
   18330:	235f      	movs	r3, #95	; 0x5f
   18332:	6003      	str	r3, [r0, #0]
   18334:	f04f 34ff 	mov.w	r4, #4294967295
   18338:	e7ee      	b.n	18318 <z_impl_zsock_connect+0x3c>

0001833a <sock_listen_vmeth>:
{
   1833a:	b508      	push	{r3, lr}
	return zsock_listen_ctx(obj, backlog);
   1833c:	f7ec f8e4 	bl	4508 <zsock_listen_ctx>
}
   18340:	bd08      	pop	{r3, pc}

00018342 <sock_accept_vmeth>:
{
   18342:	b508      	push	{r3, lr}
	return zsock_accept_ctx(obj, addr, addrlen);
   18344:	f7ec f904 	bl	4550 <zsock_accept_ctx>
}
   18348:	bd08      	pop	{r3, pc}

0001834a <sock_sendto_vmeth>:
{
   1834a:	b500      	push	{lr}
   1834c:	b083      	sub	sp, #12
	return zsock_sendto_ctx(obj, buf, len, flags, dest_addr, addrlen);
   1834e:	f8dd c014 	ldr.w	ip, [sp, #20]
   18352:	f8cd c004 	str.w	ip, [sp, #4]
   18356:	f8dd c010 	ldr.w	ip, [sp, #16]
   1835a:	f8cd c000 	str.w	ip, [sp]
   1835e:	f7ec f98d 	bl	467c <zsock_sendto_ctx>
}
   18362:	b003      	add	sp, #12
   18364:	f85d fb04 	ldr.w	pc, [sp], #4

00018368 <sock_write_vmeth>:
{
   18368:	b500      	push	{lr}
   1836a:	b083      	sub	sp, #12
	return zsock_sendto_ctx(obj, buffer, count, 0, NULL, 0);
   1836c:	2300      	movs	r3, #0
   1836e:	9301      	str	r3, [sp, #4]
   18370:	9300      	str	r3, [sp, #0]
   18372:	f7ec f983 	bl	467c <zsock_sendto_ctx>
}
   18376:	b003      	add	sp, #12
   18378:	f85d fb04 	ldr.w	pc, [sp], #4

0001837c <z_impl_zsock_sendto>:
{
   1837c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18380:	b084      	sub	sp, #16
   18382:	460e      	mov	r6, r1
   18384:	4615      	mov	r5, r2
   18386:	461c      	mov	r4, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   18388:	aa03      	add	r2, sp, #12
   1838a:	a902      	add	r1, sp, #8
   1838c:	f7ea fd06 	bl	2d9c <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   18390:	b1f0      	cbz	r0, 183d0 <z_impl_zsock_sendto+0x54>
   18392:	4607      	mov	r7, r0
   18394:	9b02      	ldr	r3, [sp, #8]
   18396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   18398:	b30b      	cbz	r3, 183de <z_impl_zsock_sendto+0x62>
   1839a:	9803      	ldr	r0, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
   1839c:	f04f 32ff 	mov.w	r2, #4294967295
   183a0:	f04f 33ff 	mov.w	r3, #4294967295
   183a4:	f7f8 fe34 	bl	11010 <z_impl_k_mutex_lock>
   183a8:	9b02      	ldr	r3, [sp, #8]
   183aa:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
   183ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   183b0:	9301      	str	r3, [sp, #4]
   183b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   183b4:	9300      	str	r3, [sp, #0]
   183b6:	4623      	mov	r3, r4
   183b8:	462a      	mov	r2, r5
   183ba:	4631      	mov	r1, r6
   183bc:	4638      	mov	r0, r7
   183be:	47c0      	blx	r8
   183c0:	4604      	mov	r4, r0
   183c2:	9803      	ldr	r0, [sp, #12]
	return z_impl_k_mutex_unlock(mutex);
   183c4:	f7f8 fea8 	bl	11118 <z_impl_k_mutex_unlock>
}
   183c8:	4620      	mov	r0, r4
   183ca:	b004      	add	sp, #16
   183cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   183d0:	f000 fe7a 	bl	190c8 <__errno>
   183d4:	2309      	movs	r3, #9
   183d6:	6003      	str	r3, [r0, #0]
   183d8:	f04f 34ff 	mov.w	r4, #4294967295
   183dc:	e7f4      	b.n	183c8 <z_impl_zsock_sendto+0x4c>
   183de:	f000 fe73 	bl	190c8 <__errno>
   183e2:	235f      	movs	r3, #95	; 0x5f
   183e4:	6003      	str	r3, [r0, #0]
   183e6:	f04f 34ff 	mov.w	r4, #4294967295
   183ea:	e7ed      	b.n	183c8 <z_impl_zsock_sendto+0x4c>

000183ec <zsock_sendmsg_ctx>:
{
   183ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   183f0:	b088      	sub	sp, #32
   183f2:	4604      	mov	r4, r0
   183f4:	4688      	mov	r8, r1
   183f6:	4615      	mov	r5, r2
	k_timeout_t timeout = K_FOREVER;
   183f8:	f04f 32ff 	mov.w	r2, #4294967295
   183fc:	f04f 33ff 	mov.w	r3, #4294967295
   18400:	e9cd 2306 	strd	r2, r3, [sp, #24]
	uint32_t retry_timeout = WAIT_BUFS_INITIAL_MS;
   18404:	230a      	movs	r3, #10
   18406:	9305      	str	r3, [sp, #20]
	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
   18408:	f015 0f40 	tst.w	r5, #64	; 0x40
   1840c:	d103      	bne.n	18416 <zsock_sendmsg_ctx+0x2a>
	return POINTER_TO_UINT(ctx->socket_data) & mask;
   1840e:	6d83      	ldr	r3, [r0, #88]	; 0x58
   18410:	f013 0f02 	tst.w	r3, #2
   18414:	d021      	beq.n	1845a <zsock_sendmsg_ctx+0x6e>
		timeout = K_NO_WAIT;
   18416:	2700      	movs	r7, #0
   18418:	463e      	mov	r6, r7
   1841a:	9706      	str	r7, [sp, #24]
   1841c:	9707      	str	r7, [sp, #28]
		status = net_context_sendmsg(ctx, msg, flags, NULL, timeout, NULL);
   1841e:	2300      	movs	r3, #0
   18420:	9302      	str	r3, [sp, #8]
   18422:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   18426:	e9cd 0100 	strd	r0, r1, [sp]
   1842a:	462a      	mov	r2, r5
   1842c:	4641      	mov	r1, r8
   1842e:	4620      	mov	r0, r4
   18430:	f002 fbbb 	bl	1abaa <net_context_sendmsg>
		if (status < 0) {
   18434:	1e01      	subs	r1, r0, #0
   18436:	da0c      	bge.n	18452 <zsock_sendmsg_ctx+0x66>
				status = send_check_and_wait(ctx, status,
   18438:	ab05      	add	r3, sp, #20
   1843a:	9302      	str	r3, [sp, #8]
   1843c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   18440:	e9cd 2300 	strd	r2, r3, [sp]
   18444:	463a      	mov	r2, r7
   18446:	4633      	mov	r3, r6
   18448:	4620      	mov	r0, r4
   1844a:	f7ff fd99 	bl	17f80 <send_check_and_wait>
				if (status < 0) {
   1844e:	1e01      	subs	r1, r0, #0
   18450:	dae5      	bge.n	1841e <zsock_sendmsg_ctx+0x32>
}
   18452:	4608      	mov	r0, r1
   18454:	b008      	add	sp, #32
   18456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_context_get_option(ctx, NET_OPT_SNDTIMEO, &timeout, NULL);
   1845a:	2300      	movs	r3, #0
   1845c:	aa06      	add	r2, sp, #24
   1845e:	2105      	movs	r1, #5
   18460:	f7ef f9e2 	bl	7828 <net_context_get_option>
		buf_timeout = sys_clock_timeout_end_calc(MAX_WAIT_BUFS);
   18464:	f44f 20a0 	mov.w	r0, #327680	; 0x50000
   18468:	2100      	movs	r1, #0
   1846a:	f007 fa75 	bl	1f958 <sys_clock_timeout_end_calc>
   1846e:	4607      	mov	r7, r0
   18470:	460e      	mov	r6, r1
   18472:	e7d4      	b.n	1841e <zsock_sendmsg_ctx+0x32>

00018474 <sock_sendmsg_vmeth>:
{
   18474:	b508      	push	{r3, lr}
	return zsock_sendmsg_ctx(obj, msg, flags);
   18476:	f7ff ffb9 	bl	183ec <zsock_sendmsg_ctx>
}
   1847a:	bd08      	pop	{r3, pc}

0001847c <zsock_wait_data>:
{
   1847c:	b508      	push	{r3, lr}
	if (ctx->cond.lock == NULL) {
   1847e:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
   18480:	b16b      	cbz	r3, 1849e <zsock_wait_data+0x22>
	return list->head;
   18482:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
	if (k_fifo_is_empty(&ctx->recv_q)) {
   18484:	b10b      	cbz	r3, 1848a <zsock_wait_data+0xe>
	return 0;
   18486:	2000      	movs	r0, #0
}
   18488:	bd08      	pop	{r3, pc}
		return k_condvar_wait(&ctx->cond.recv, ctx->cond.lock,
   1848a:	f100 0c74 	add.w	ip, r0, #116	; 0x74
   1848e:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
   18490:	e9d1 2300 	ldrd	r2, r3, [r1]
	return z_impl_k_condvar_wait(condvar, mutex, timeout);
   18494:	4601      	mov	r1, r0
   18496:	4660      	mov	r0, ip
   18498:	f7f9 fc98 	bl	11dcc <z_impl_k_condvar_wait>
   1849c:	e7f4      	b.n	18488 <zsock_wait_data+0xc>
		return -EINVAL;
   1849e:	f06f 0015 	mvn.w	r0, #21
   184a2:	e7f1      	b.n	18488 <zsock_wait_data+0xc>

000184a4 <zsock_recv_dgram>:
{
   184a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   184a8:	b085      	sub	sp, #20
   184aa:	4605      	mov	r5, r0
   184ac:	4688      	mov	r8, r1
   184ae:	4616      	mov	r6, r2
   184b0:	461f      	mov	r7, r3
   184b2:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
   184b6:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
	k_timeout_t timeout = K_FOREVER;
   184ba:	f04f 32ff 	mov.w	r2, #4294967295
   184be:	f04f 33ff 	mov.w	r3, #4294967295
   184c2:	e9cd 2302 	strd	r2, r3, [sp, #8]
	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
   184c6:	f017 0f40 	tst.w	r7, #64	; 0x40
   184ca:	d103      	bne.n	184d4 <zsock_recv_dgram+0x30>
   184cc:	6d83      	ldr	r3, [r0, #88]	; 0x58
   184ce:	f013 0f02 	tst.w	r3, #2
   184d2:	d01a      	beq.n	1850a <zsock_recv_dgram+0x66>
		timeout = K_NO_WAIT;
   184d4:	2200      	movs	r2, #0
   184d6:	2300      	movs	r3, #0
   184d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
	if (flags & ZSOCK_MSG_PEEK) {
   184dc:	f017 0a02 	ands.w	sl, r7, #2
   184e0:	d02c      	beq.n	1853c <zsock_recv_dgram+0x98>
		res = fifo_wait_non_empty(&ctx->recv_q, timeout);
   184e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   184e6:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   184ea:	f7ff fd30 	bl	17f4e <fifo_wait_non_empty>
		if (res && res != -EAGAIN && res != -EINTR) {
   184ee:	4604      	mov	r4, r0
   184f0:	b128      	cbz	r0, 184fe <zsock_recv_dgram+0x5a>
   184f2:	f110 0f0b 	cmn.w	r0, #11
   184f6:	d002      	beq.n	184fe <zsock_recv_dgram+0x5a>
   184f8:	f110 0f04 	cmn.w	r0, #4
   184fc:	d117      	bne.n	1852e <zsock_recv_dgram+0x8a>
		pkt = k_fifo_peek_head(&ctx->recv_q);
   184fe:	f105 005c 	add.w	r0, r5, #92	; 0x5c
	return z_impl_k_queue_peek_head(queue);
   18502:	f006 fe6d 	bl	1f1e0 <z_impl_k_queue_peek_head>
   18506:	4604      	mov	r4, r0
   18508:	e01f      	b.n	1854a <zsock_recv_dgram+0xa6>
		net_context_get_option(ctx, NET_OPT_RCVTIMEO, &timeout, NULL);
   1850a:	2300      	movs	r3, #0
   1850c:	aa02      	add	r2, sp, #8
   1850e:	2104      	movs	r1, #4
   18510:	f7ef f98a 	bl	7828 <net_context_get_option>
		ret = zsock_wait_data(ctx, &timeout);
   18514:	a902      	add	r1, sp, #8
   18516:	4628      	mov	r0, r5
   18518:	f7ff ffb0 	bl	1847c <zsock_wait_data>
		if (ret < 0) {
   1851c:	1e04      	subs	r4, r0, #0
   1851e:	dadd      	bge.n	184dc <zsock_recv_dgram+0x38>
			errno = -ret;
   18520:	f000 fdd2 	bl	190c8 <__errno>
   18524:	4264      	negs	r4, r4
   18526:	6004      	str	r4, [r0, #0]
			return -1;
   18528:	f04f 30ff 	mov.w	r0, #4294967295
   1852c:	e051      	b.n	185d2 <zsock_recv_dgram+0x12e>
			errno = -res;
   1852e:	f000 fdcb 	bl	190c8 <__errno>
   18532:	4264      	negs	r4, r4
   18534:	6004      	str	r4, [r0, #0]
			return -1;
   18536:	f04f 30ff 	mov.w	r0, #4294967295
   1853a:	e04a      	b.n	185d2 <zsock_recv_dgram+0x12e>
		pkt = k_fifo_get(&ctx->recv_q, timeout);
   1853c:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   18540:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
	return z_impl_k_queue_get(queue, timeout);
   18544:	f7f8 fe26 	bl	11194 <z_impl_k_queue_get>
   18548:	4604      	mov	r4, r0
	if (!pkt) {
   1854a:	2c00      	cmp	r4, #0
   1854c:	d044      	beq.n	185d8 <zsock_recv_dgram+0x134>
	backup->buf = pkt->cursor.buf;
   1854e:	68e3      	ldr	r3, [r4, #12]
   18550:	9300      	str	r3, [sp, #0]
	backup->pos = pkt->cursor.pos;
   18552:	6923      	ldr	r3, [r4, #16]
   18554:	9301      	str	r3, [sp, #4]
	if (src_addr && addrlen) {
   18556:	f1b9 0f00 	cmp.w	r9, #0
   1855a:	d022      	beq.n	185a2 <zsock_recv_dgram+0xfe>
   1855c:	f1bb 0f00 	cmp.w	fp, #0
   18560:	d01f      	beq.n	185a2 <zsock_recv_dgram+0xfe>
	return net_if_get_by_index(context->iface);
   18562:	f995 008a 	ldrsb.w	r0, [r5, #138]	; 0x8a
   18566:	f7ee f993 	bl	6890 <z_impl_net_if_get_by_index>
	return (iface->if_dev->offload != NULL);
   1856a:	6803      	ldr	r3, [r0, #0]
   1856c:	699b      	ldr	r3, [r3, #24]
		if (IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   1856e:	2b00      	cmp	r3, #0
   18570:	d03e      	beq.n	185f0 <zsock_recv_dgram+0x14c>
			if (ctx->flags & NET_CONTEXT_REMOTE_ADDR_SET) {
   18572:	f8b5 3088 	ldrh.w	r3, [r5, #136]	; 0x88
   18576:	f413 7f80 	tst.w	r3, #256	; 0x100
   1857a:	d034      	beq.n	185e6 <zsock_recv_dgram+0x142>
				memcpy(src_addr, &ctx->remote,
   1857c:	f8db 2000 	ldr.w	r2, [fp]
   18580:	2a08      	cmp	r2, #8
   18582:	bf28      	it	cs
   18584:	2208      	movcs	r2, #8
   18586:	f105 0124 	add.w	r1, r5, #36	; 0x24
   1858a:	4648      	mov	r0, r9
   1858c:	f007 fc19 	bl	1fdc2 <memcpy>
		if (src_addr->sa_family == AF_INET) {
   18590:	f8b9 3000 	ldrh.w	r3, [r9]
   18594:	2b01      	cmp	r3, #1
   18596:	d03a      	beq.n	1860e <zsock_recv_dgram+0x16a>
		} else if (src_addr->sa_family == AF_INET6) {
   18598:	2b02      	cmp	r3, #2
   1859a:	d13c      	bne.n	18616 <zsock_recv_dgram+0x172>
			*addrlen = sizeof(struct sockaddr_in6);
   1859c:	2318      	movs	r3, #24
   1859e:	f8cb 3000 	str.w	r3, [fp]
	recv_len = net_pkt_remaining_data(pkt);
   185a2:	4620      	mov	r0, r4
   185a4:	f002 ff7a 	bl	1b49c <net_pkt_remaining_data>
   185a8:	4681      	mov	r9, r0
	read_len = MIN(recv_len, max_len);
   185aa:	4286      	cmp	r6, r0
   185ac:	bf28      	it	cs
   185ae:	4606      	movcs	r6, r0
	if (net_pkt_read(pkt, buf, read_len)) {
   185b0:	4632      	mov	r2, r6
   185b2:	4641      	mov	r1, r8
   185b4:	4620      	mov	r0, r4
   185b6:	f002 ff18 	bl	1b3ea <net_pkt_read>
   185ba:	bb88      	cbnz	r0, 18620 <zsock_recv_dgram+0x17c>
	if (!(flags & ZSOCK_MSG_PEEK)) {
   185bc:	f1ba 0f00 	cmp.w	sl, #0
   185c0:	d038      	beq.n	18634 <zsock_recv_dgram+0x190>
	pkt->cursor.buf = backup->buf;
   185c2:	9b00      	ldr	r3, [sp, #0]
   185c4:	60e3      	str	r3, [r4, #12]
	pkt->cursor.pos = backup->pos;
   185c6:	9b01      	ldr	r3, [sp, #4]
   185c8:	6123      	str	r3, [r4, #16]
	return (flags & ZSOCK_MSG_TRUNC) ? recv_len : read_len;
   185ca:	f017 0f20 	tst.w	r7, #32
   185ce:	d035      	beq.n	1863c <zsock_recv_dgram+0x198>
   185d0:	4648      	mov	r0, r9
}
   185d2:	b005      	add	sp, #20
   185d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		errno = EAGAIN;
   185d8:	f000 fd76 	bl	190c8 <__errno>
   185dc:	230b      	movs	r3, #11
   185de:	6003      	str	r3, [r0, #0]
		return -1;
   185e0:	f04f 30ff 	mov.w	r0, #4294967295
   185e4:	e7f5      	b.n	185d2 <zsock_recv_dgram+0x12e>
				errno = ENOTSUP;
   185e6:	f000 fd6f 	bl	190c8 <__errno>
   185ea:	2386      	movs	r3, #134	; 0x86
   185ec:	6003      	str	r3, [r0, #0]
				goto fail;
   185ee:	e01b      	b.n	18628 <zsock_recv_dgram+0x184>
			rv = sock_get_pkt_src_addr(pkt, net_context_get_proto(ctx),
   185f0:	f8db 3000 	ldr.w	r3, [fp]
   185f4:	464a      	mov	r2, r9
   185f6:	f895 1086 	ldrb.w	r1, [r5, #134]	; 0x86
   185fa:	4620      	mov	r0, r4
   185fc:	f7ff fd59 	bl	180b2 <sock_get_pkt_src_addr>
			if (rv < 0) {
   18600:	1e05      	subs	r5, r0, #0
   18602:	dac5      	bge.n	18590 <zsock_recv_dgram+0xec>
				errno = -rv;
   18604:	f000 fd60 	bl	190c8 <__errno>
   18608:	426d      	negs	r5, r5
   1860a:	6005      	str	r5, [r0, #0]
				goto fail;
   1860c:	e00c      	b.n	18628 <zsock_recv_dgram+0x184>
			*addrlen = sizeof(struct sockaddr_in);
   1860e:	2308      	movs	r3, #8
   18610:	f8cb 3000 	str.w	r3, [fp]
   18614:	e7c5      	b.n	185a2 <zsock_recv_dgram+0xfe>
			errno = ENOTSUP;
   18616:	f000 fd57 	bl	190c8 <__errno>
   1861a:	2386      	movs	r3, #134	; 0x86
   1861c:	6003      	str	r3, [r0, #0]
			goto fail;
   1861e:	e003      	b.n	18628 <zsock_recv_dgram+0x184>
		errno = ENOBUFS;
   18620:	f000 fd52 	bl	190c8 <__errno>
   18624:	2369      	movs	r3, #105	; 0x69
   18626:	6003      	str	r3, [r0, #0]
	if (!(flags & ZSOCK_MSG_PEEK)) {
   18628:	f1ba 0f00 	cmp.w	sl, #0
   1862c:	d008      	beq.n	18640 <zsock_recv_dgram+0x19c>
	return -1;
   1862e:	f04f 30ff 	mov.w	r0, #4294967295
   18632:	e7ce      	b.n	185d2 <zsock_recv_dgram+0x12e>
		net_pkt_unref(pkt);
   18634:	4620      	mov	r0, r4
   18636:	f002 fd3b 	bl	1b0b0 <net_pkt_unref>
   1863a:	e7c6      	b.n	185ca <zsock_recv_dgram+0x126>
	return (flags & ZSOCK_MSG_TRUNC) ? recv_len : read_len;
   1863c:	4630      	mov	r0, r6
   1863e:	e7c8      	b.n	185d2 <zsock_recv_dgram+0x12e>
		net_pkt_unref(pkt);
   18640:	4620      	mov	r0, r4
   18642:	f002 fd35 	bl	1b0b0 <net_pkt_unref>
	return -1;
   18646:	f04f 30ff 	mov.w	r0, #4294967295
   1864a:	e7c2      	b.n	185d2 <zsock_recv_dgram+0x12e>

0001864c <zsock_recv_stream>:
{
   1864c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18650:	b08b      	sub	sp, #44	; 0x2c
   18652:	9102      	str	r1, [sp, #8]
   18654:	4693      	mov	fp, r2
   18656:	4619      	mov	r1, r3
   18658:	9301      	str	r3, [sp, #4]
	k_timeout_t timeout = K_FOREVER;
   1865a:	f04f 32ff 	mov.w	r2, #4294967295
   1865e:	f04f 33ff 	mov.w	r3, #4294967295
   18662:	e9cd 2308 	strd	r2, r3, [sp, #32]
	const bool waitall = flags & ZSOCK_MSG_WAITALL;
   18666:	f401 7380 	and.w	r3, r1, #256	; 0x100
   1866a:	9303      	str	r3, [sp, #12]
	return context->flags & NET_CONTEXT_IN_USE;
   1866c:	f8b0 3088 	ldrh.w	r3, [r0, #136]	; 0x88
	if (!net_context_is_used(ctx)) {
   18670:	f013 0f01 	tst.w	r3, #1
   18674:	d018      	beq.n	186a8 <zsock_recv_stream+0x5c>
   18676:	4607      	mov	r7, r0
	return (enum net_context_state)
   18678:	f3c3 0341 	ubfx	r3, r3, #1, #2
	if (net_context_get_state(ctx) != NET_CONTEXT_CONNECTED) {
   1867c:	2b02      	cmp	r3, #2
   1867e:	d11a      	bne.n	186b6 <zsock_recv_stream+0x6a>
	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
   18680:	9b01      	ldr	r3, [sp, #4]
   18682:	f013 0f40 	tst.w	r3, #64	; 0x40
   18686:	d103      	bne.n	18690 <zsock_recv_stream+0x44>
   18688:	6d83      	ldr	r3, [r0, #88]	; 0x58
   1868a:	f013 0f02 	tst.w	r3, #2
   1868e:	d019      	beq.n	186c4 <zsock_recv_stream+0x78>
		timeout = K_NO_WAIT;
   18690:	2200      	movs	r2, #0
   18692:	2300      	movs	r3, #0
   18694:	e9cd 2308 	strd	r2, r3, [sp, #32]
	end = sys_clock_timeout_end_calc(timeout);
   18698:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   1869c:	f007 f95c 	bl	1f958 <sys_clock_timeout_end_calc>
   186a0:	9004      	str	r0, [sp, #16]
   186a2:	9105      	str	r1, [sp, #20]
	size_t recv_len = 0;
   186a4:	2600      	movs	r6, #0
   186a6:	e084      	b.n	187b2 <zsock_recv_stream+0x166>
		errno = EBADF;
   186a8:	f000 fd0e 	bl	190c8 <__errno>
   186ac:	2309      	movs	r3, #9
   186ae:	6003      	str	r3, [r0, #0]
		return -1;
   186b0:	f04f 30ff 	mov.w	r0, #4294967295
   186b4:	e018      	b.n	186e8 <zsock_recv_stream+0x9c>
		errno = ENOTCONN;
   186b6:	f000 fd07 	bl	190c8 <__errno>
   186ba:	2380      	movs	r3, #128	; 0x80
   186bc:	6003      	str	r3, [r0, #0]
		return -1;
   186be:	f04f 30ff 	mov.w	r0, #4294967295
   186c2:	e011      	b.n	186e8 <zsock_recv_stream+0x9c>
	} else if (!sock_is_eof(ctx) && !sock_is_error(ctx)) {
   186c4:	f013 0f01 	tst.w	r3, #1
   186c8:	d1e6      	bne.n	18698 <zsock_recv_stream+0x4c>
   186ca:	f013 0f04 	tst.w	r3, #4
   186ce:	d1e3      	bne.n	18698 <zsock_recv_stream+0x4c>
		net_context_get_option(ctx, NET_OPT_RCVTIMEO, &timeout, NULL);
   186d0:	2300      	movs	r3, #0
   186d2:	aa08      	add	r2, sp, #32
   186d4:	2104      	movs	r1, #4
   186d6:	f7ef f8a7 	bl	7828 <net_context_get_option>
   186da:	e7dd      	b.n	18698 <zsock_recv_stream+0x4c>
			errno = POINTER_TO_INT(ctx->user_data);
   186dc:	683c      	ldr	r4, [r7, #0]
   186de:	f000 fcf3 	bl	190c8 <__errno>
   186e2:	6004      	str	r4, [r0, #0]
			return -1;
   186e4:	f04f 30ff 	mov.w	r0, #4294967295
}
   186e8:	b00b      	add	sp, #44	; 0x2c
   186ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				errno = -res;
   186ee:	4604      	mov	r4, r0
   186f0:	f000 fcea 	bl	190c8 <__errno>
   186f4:	4264      	negs	r4, r4
   186f6:	6004      	str	r4, [r0, #0]
				return -1;
   186f8:	f04f 30ff 	mov.w	r0, #4294967295
   186fc:	e7f4      	b.n	186e8 <zsock_recv_stream+0x9c>
			if (waitall && (recv_len > 0)) {
   186fe:	9b03      	ldr	r3, [sp, #12]
   18700:	b103      	cbz	r3, 18704 <zsock_recv_stream+0xb8>
   18702:	b946      	cbnz	r6, 18716 <zsock_recv_stream+0xca>
   18704:	6dbb      	ldr	r3, [r7, #88]	; 0x58
			} else if (sock_is_error(ctx)) {
   18706:	f013 0f04 	tst.w	r3, #4
   1870a:	d106      	bne.n	1871a <zsock_recv_stream+0xce>
			} else if (sock_is_eof(ctx)) {
   1870c:	f013 0f01 	tst.w	r3, #1
   18710:	d00a      	beq.n	18728 <zsock_recv_stream+0xdc>
				return 0;
   18712:	2000      	movs	r0, #0
   18714:	e7e8      	b.n	186e8 <zsock_recv_stream+0x9c>
				return recv_len;
   18716:	4630      	mov	r0, r6
   18718:	e7e6      	b.n	186e8 <zsock_recv_stream+0x9c>
				errno = POINTER_TO_INT(ctx->user_data);
   1871a:	683c      	ldr	r4, [r7, #0]
   1871c:	f000 fcd4 	bl	190c8 <__errno>
   18720:	6004      	str	r4, [r0, #0]
				return -1;
   18722:	f04f 30ff 	mov.w	r0, #4294967295
   18726:	e7df      	b.n	186e8 <zsock_recv_stream+0x9c>
				errno = EAGAIN;
   18728:	f000 fcce 	bl	190c8 <__errno>
   1872c:	230b      	movs	r3, #11
   1872e:	6003      	str	r3, [r0, #0]
				return -1;
   18730:	f04f 30ff 	mov.w	r0, #4294967295
   18734:	e7d8      	b.n	186e8 <zsock_recv_stream+0x9c>
		bool release_pkt = true;
   18736:	2301      	movs	r3, #1
   18738:	9300      	str	r3, [sp, #0]
		if (net_pkt_read(pkt, (uint8_t *)buf + recv_len, read_len)) {
   1873a:	4622      	mov	r2, r4
   1873c:	9b02      	ldr	r3, [sp, #8]
   1873e:	1999      	adds	r1, r3, r6
   18740:	4628      	mov	r0, r5
   18742:	f002 fe52 	bl	1b3ea <net_pkt_read>
   18746:	b9c0      	cbnz	r0, 1877a <zsock_recv_stream+0x12e>
		recv_len += read_len;
   18748:	4426      	add	r6, r4
		if (!(flags & ZSOCK_MSG_PEEK)) {
   1874a:	9b01      	ldr	r3, [sp, #4]
   1874c:	f013 0402 	ands.w	r4, r3, #2
   18750:	d11a      	bne.n	18788 <zsock_recv_stream+0x13c>
			if (release_pkt) {
   18752:	9b00      	ldr	r3, [sp, #0]
   18754:	b1e3      	cbz	r3, 18790 <zsock_recv_stream+0x144>
   18756:	2200      	movs	r2, #0
   18758:	2300      	movs	r3, #0
   1875a:	4650      	mov	r0, sl
   1875c:	f7f8 fd1a 	bl	11194 <z_impl_k_queue_get>
	return pkt->sent_or_eof;
   18760:	f895 3037 	ldrb.w	r3, [r5, #55]	; 0x37
				if (net_pkt_eof(pkt)) {
   18764:	f013 0f02 	tst.w	r3, #2
   18768:	d003      	beq.n	18772 <zsock_recv_stream+0x126>
	uintptr_t val = POINTER_TO_UINT(ctx->socket_data);
   1876a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
	val = (val & ~mask) | flag;
   1876c:	f043 0301 	orr.w	r3, r3, #1
	(ctx)->socket_data = UINT_TO_POINTER(val);
   18770:	65bb      	str	r3, [r7, #88]	; 0x58
				net_pkt_unref(pkt);
   18772:	4628      	mov	r0, r5
   18774:	f002 fc9c 	bl	1b0b0 <net_pkt_unref>
   18778:	e00a      	b.n	18790 <zsock_recv_stream+0x144>
			errno = ENOBUFS;
   1877a:	f000 fca5 	bl	190c8 <__errno>
   1877e:	2369      	movs	r3, #105	; 0x69
   18780:	6003      	str	r3, [r0, #0]
			return -1;
   18782:	f04f 30ff 	mov.w	r0, #4294967295
   18786:	e7af      	b.n	186e8 <zsock_recv_stream+0x9c>
	pkt->cursor.buf = backup->buf;
   18788:	f8c5 900c 	str.w	r9, [r5, #12]
	pkt->cursor.pos = backup->pos;
   1878c:	f8c5 8010 	str.w	r8, [r5, #16]
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   18790:	9a08      	ldr	r2, [sp, #32]
   18792:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18794:	ea52 0103 	orrs.w	r1, r2, r3
   18798:	d005      	beq.n	187a6 <zsock_recv_stream+0x15a>
   1879a:	f1b3 3fff 	cmp.w	r3, #4294967295
   1879e:	bf08      	it	eq
   187a0:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   187a4:	d131      	bne.n	1880a <zsock_recv_stream+0x1be>
	} while ((recv_len == 0) || (waitall && (recv_len < max_len)));
   187a6:	b126      	cbz	r6, 187b2 <zsock_recv_stream+0x166>
   187a8:	9b03      	ldr	r3, [sp, #12]
   187aa:	2b00      	cmp	r3, #0
   187ac:	d040      	beq.n	18830 <zsock_recv_stream+0x1e4>
   187ae:	455e      	cmp	r6, fp
   187b0:	d23e      	bcs.n	18830 <zsock_recv_stream+0x1e4>
	return POINTER_TO_UINT(ctx->socket_data) & mask;
   187b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
		if (sock_is_error(ctx)) {
   187b4:	f013 0f04 	tst.w	r3, #4
   187b8:	d190      	bne.n	186dc <zsock_recv_stream+0x90>
		if (sock_is_eof(ctx)) {
   187ba:	f013 0f01 	tst.w	r3, #1
   187be:	d13f      	bne.n	18840 <zsock_recv_stream+0x1f4>
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   187c0:	9b08      	ldr	r3, [sp, #32]
   187c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   187c4:	4313      	orrs	r3, r2
   187c6:	d005      	beq.n	187d4 <zsock_recv_stream+0x188>
			res = zsock_wait_data(ctx, &timeout);
   187c8:	a908      	add	r1, sp, #32
   187ca:	4638      	mov	r0, r7
   187cc:	f7ff fe56 	bl	1847c <zsock_wait_data>
			if (res < 0) {
   187d0:	2800      	cmp	r0, #0
   187d2:	db8c      	blt.n	186ee <zsock_recv_stream+0xa2>
		pkt = k_fifo_peek_head(&ctx->recv_q);
   187d4:	f107 0a5c 	add.w	sl, r7, #92	; 0x5c
	return z_impl_k_queue_peek_head(queue);
   187d8:	4650      	mov	r0, sl
   187da:	f006 fd01 	bl	1f1e0 <z_impl_k_queue_peek_head>
		if (!pkt) {
   187de:	4605      	mov	r5, r0
   187e0:	2800      	cmp	r0, #0
   187e2:	d08c      	beq.n	186fe <zsock_recv_stream+0xb2>
	backup->buf = pkt->cursor.buf;
   187e4:	f8d0 900c 	ldr.w	r9, [r0, #12]
   187e8:	f8cd 9018 	str.w	r9, [sp, #24]
	backup->pos = pkt->cursor.pos;
   187ec:	f8d0 8010 	ldr.w	r8, [r0, #16]
   187f0:	f8cd 801c 	str.w	r8, [sp, #28]
		data_len = net_pkt_remaining_data(pkt);
   187f4:	f002 fe52 	bl	1b49c <net_pkt_remaining_data>
   187f8:	4604      	mov	r4, r0
		if (recv_len + read_len > max_len) {
   187fa:	1983      	adds	r3, r0, r6
   187fc:	459b      	cmp	fp, r3
   187fe:	d29a      	bcs.n	18736 <zsock_recv_stream+0xea>
			read_len = max_len - recv_len;
   18800:	ebab 0406 	sub.w	r4, fp, r6
			release_pkt = false;
   18804:	2300      	movs	r3, #0
   18806:	9300      	str	r3, [sp, #0]
   18808:	e797      	b.n	1873a <zsock_recv_stream+0xee>
			int64_t remaining = end - sys_clock_tick_get();
   1880a:	f7f9 fc55 	bl	120b8 <sys_clock_tick_get>
   1880e:	9b04      	ldr	r3, [sp, #16]
   18810:	1a18      	subs	r0, r3, r0
   18812:	9b05      	ldr	r3, [sp, #20]
   18814:	eb63 0101 	sbc.w	r1, r3, r1
			if (remaining <= 0) {
   18818:	2801      	cmp	r0, #1
   1881a:	f171 0200 	sbcs.w	r2, r1, #0
   1881e:	db02      	blt.n	18826 <zsock_recv_stream+0x1da>
				timeout = Z_TIMEOUT_TICKS(remaining);
   18820:	9008      	str	r0, [sp, #32]
   18822:	9109      	str	r1, [sp, #36]	; 0x24
   18824:	e7bf      	b.n	187a6 <zsock_recv_stream+0x15a>
				timeout = K_NO_WAIT;
   18826:	2200      	movs	r2, #0
   18828:	2300      	movs	r3, #0
   1882a:	e9cd 2308 	strd	r2, r3, [sp, #32]
   1882e:	e7ba      	b.n	187a6 <zsock_recv_stream+0x15a>
	if (!(flags & ZSOCK_MSG_PEEK)) {
   18830:	b10c      	cbz	r4, 18836 <zsock_recv_stream+0x1ea>
	return recv_len;
   18832:	4630      	mov	r0, r6
   18834:	e758      	b.n	186e8 <zsock_recv_stream+0x9c>
		net_context_update_recv_wnd(ctx, recv_len);
   18836:	4631      	mov	r1, r6
   18838:	4638      	mov	r0, r7
   1883a:	f002 fa6a 	bl	1ad12 <net_context_update_recv_wnd>
   1883e:	e7f8      	b.n	18832 <zsock_recv_stream+0x1e6>
			return 0;
   18840:	2000      	movs	r0, #0
   18842:	e751      	b.n	186e8 <zsock_recv_stream+0x9c>

00018844 <zsock_recvfrom_ctx>:
	return (enum net_sock_type)((context->flags & NET_CONTEXT_TYPE) >> 6);
   18844:	f8b0 c088 	ldrh.w	ip, [r0, #136]	; 0x88
   18848:	f3cc 1c81 	ubfx	ip, ip, #6, #2
	if (max_len == 0) {
   1884c:	b1ba      	cbz	r2, 1887e <zsock_recvfrom_ctx+0x3a>
{
   1884e:	b500      	push	{lr}
   18850:	b083      	sub	sp, #12
   18852:	4696      	mov	lr, r2
	if (sock_type == SOCK_DGRAM) {
   18854:	f1bc 0f02 	cmp.w	ip, #2
   18858:	d006      	beq.n	18868 <zsock_recvfrom_ctx+0x24>
	} else if (sock_type == SOCK_STREAM) {
   1885a:	f1bc 0f01 	cmp.w	ip, #1
   1885e:	d00b      	beq.n	18878 <zsock_recvfrom_ctx+0x34>
	return 0;
   18860:	2000      	movs	r0, #0
}
   18862:	b003      	add	sp, #12
   18864:	f85d fb04 	ldr.w	pc, [sp], #4
		return zsock_recv_dgram(ctx, buf, max_len, flags, src_addr, addrlen);
   18868:	9a05      	ldr	r2, [sp, #20]
   1886a:	9201      	str	r2, [sp, #4]
   1886c:	9a04      	ldr	r2, [sp, #16]
   1886e:	9200      	str	r2, [sp, #0]
   18870:	4672      	mov	r2, lr
   18872:	f7ff fe17 	bl	184a4 <zsock_recv_dgram>
   18876:	e7f4      	b.n	18862 <zsock_recvfrom_ctx+0x1e>
		return zsock_recv_stream(ctx, buf, max_len, flags);
   18878:	f7ff fee8 	bl	1864c <zsock_recv_stream>
   1887c:	e7f1      	b.n	18862 <zsock_recvfrom_ctx+0x1e>
		return 0;
   1887e:	2000      	movs	r0, #0
}
   18880:	4770      	bx	lr

00018882 <sock_recvfrom_vmeth>:
{
   18882:	b500      	push	{lr}
   18884:	b083      	sub	sp, #12
	return zsock_recvfrom_ctx(obj, buf, max_len, flags,
   18886:	f8dd c014 	ldr.w	ip, [sp, #20]
   1888a:	f8cd c004 	str.w	ip, [sp, #4]
   1888e:	f8dd c010 	ldr.w	ip, [sp, #16]
   18892:	f8cd c000 	str.w	ip, [sp]
   18896:	f7ff ffd5 	bl	18844 <zsock_recvfrom_ctx>
}
   1889a:	b003      	add	sp, #12
   1889c:	f85d fb04 	ldr.w	pc, [sp], #4

000188a0 <sock_read_vmeth>:
{
   188a0:	b500      	push	{lr}
   188a2:	b083      	sub	sp, #12
	return zsock_recvfrom_ctx(obj, buffer, count, 0, NULL, 0);
   188a4:	2300      	movs	r3, #0
   188a6:	9301      	str	r3, [sp, #4]
   188a8:	9300      	str	r3, [sp, #0]
   188aa:	f7ff ffcb 	bl	18844 <zsock_recvfrom_ctx>
}
   188ae:	b003      	add	sp, #12
   188b0:	f85d fb04 	ldr.w	pc, [sp], #4

000188b4 <z_impl_zsock_recvfrom>:
{
   188b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   188b8:	b084      	sub	sp, #16
   188ba:	460e      	mov	r6, r1
   188bc:	4615      	mov	r5, r2
   188be:	461c      	mov	r4, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   188c0:	aa03      	add	r2, sp, #12
   188c2:	a902      	add	r1, sp, #8
   188c4:	f7ea fa6a 	bl	2d9c <z_get_fd_obj_and_vtable>
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   188c8:	b1f0      	cbz	r0, 18908 <z_impl_zsock_recvfrom+0x54>
   188ca:	4607      	mov	r7, r0
   188cc:	9b02      	ldr	r3, [sp, #8]
   188ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   188d0:	b30b      	cbz	r3, 18916 <z_impl_zsock_recvfrom+0x62>
   188d2:	9803      	ldr	r0, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
   188d4:	f04f 32ff 	mov.w	r2, #4294967295
   188d8:	f04f 33ff 	mov.w	r3, #4294967295
   188dc:	f7f8 fb98 	bl	11010 <z_impl_k_mutex_lock>
   188e0:	9b02      	ldr	r3, [sp, #8]
   188e2:	f8d3 8028 	ldr.w	r8, [r3, #40]	; 0x28
   188e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   188e8:	9301      	str	r3, [sp, #4]
   188ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   188ec:	9300      	str	r3, [sp, #0]
   188ee:	4623      	mov	r3, r4
   188f0:	462a      	mov	r2, r5
   188f2:	4631      	mov	r1, r6
   188f4:	4638      	mov	r0, r7
   188f6:	47c0      	blx	r8
   188f8:	4604      	mov	r4, r0
   188fa:	9803      	ldr	r0, [sp, #12]
	return z_impl_k_mutex_unlock(mutex);
   188fc:	f7f8 fc0c 	bl	11118 <z_impl_k_mutex_unlock>
}
   18900:	4620      	mov	r0, r4
   18902:	b004      	add	sp, #16
   18904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   18908:	f000 fbde 	bl	190c8 <__errno>
   1890c:	2309      	movs	r3, #9
   1890e:	6003      	str	r3, [r0, #0]
   18910:	f04f 34ff 	mov.w	r4, #4294967295
   18914:	e7f4      	b.n	18900 <z_impl_zsock_recvfrom+0x4c>
   18916:	f000 fbd7 	bl	190c8 <__errno>
   1891a:	235f      	movs	r3, #95	; 0x5f
   1891c:	6003      	str	r3, [r0, #0]
   1891e:	f04f 34ff 	mov.w	r4, #4294967295
   18922:	e7ed      	b.n	18900 <z_impl_zsock_recvfrom+0x4c>

00018924 <z_impl_zsock_inet_pton>:
{
   18924:	b508      	push	{r3, lr}
	return z_impl_net_addr_pton(family, src, dst);
   18926:	f7ee fc55 	bl	71d4 <z_impl_net_addr_pton>
	if (net_addr_pton(family, src, dst) == 0) {
   1892a:	b908      	cbnz	r0, 18930 <z_impl_zsock_inet_pton+0xc>
		return 1;
   1892c:	2001      	movs	r0, #1
}
   1892e:	bd08      	pop	{r3, pc}
		return 0;
   18930:	2000      	movs	r0, #0
   18932:	e7fc      	b.n	1892e <z_impl_zsock_inet_pton+0xa>

00018934 <zsock_getsockopt_ctx>:
{
   18934:	b538      	push	{r3, r4, r5, lr}
   18936:	460c      	mov	r4, r1
   18938:	4611      	mov	r1, r2
   1893a:	461a      	mov	r2, r3
	switch (level) {
   1893c:	2c06      	cmp	r4, #6
   1893e:	d03d      	beq.n	189bc <zsock_getsockopt_ctx+0x88>
   18940:	dc0e      	bgt.n	18960 <zsock_getsockopt_ctx+0x2c>
   18942:	2c00      	cmp	r4, #0
   18944:	d040      	beq.n	189c8 <zsock_getsockopt_ctx+0x94>
   18946:	2c01      	cmp	r4, #1
   18948:	d103      	bne.n	18952 <zsock_getsockopt_ctx+0x1e>
		switch (optname) {
   1894a:	2903      	cmp	r1, #3
   1894c:	d014      	beq.n	18978 <zsock_getsockopt_ctx+0x44>
   1894e:	2926      	cmp	r1, #38	; 0x26
   18950:	d024      	beq.n	1899c <zsock_getsockopt_ctx+0x68>
	errno = ENOPROTOOPT;
   18952:	f000 fbb9 	bl	190c8 <__errno>
   18956:	236d      	movs	r3, #109	; 0x6d
   18958:	6003      	str	r3, [r0, #0]
	return -1;
   1895a:	f04f 30ff 	mov.w	r0, #4294967295
}
   1895e:	bd38      	pop	{r3, r4, r5, pc}
	switch (level) {
   18960:	2c29      	cmp	r4, #41	; 0x29
   18962:	d1f6      	bne.n	18952 <zsock_getsockopt_ctx+0x1e>
		switch (optname) {
   18964:	2943      	cmp	r1, #67	; 0x43
   18966:	d1f4      	bne.n	18952 <zsock_getsockopt_ctx+0x1e>
				ret = net_context_get_option(ctx,
   18968:	9b04      	ldr	r3, [sp, #16]
   1896a:	2108      	movs	r1, #8
   1896c:	f7ee ff5c 	bl	7828 <net_context_get_option>
				if (ret < 0) {
   18970:	1e04      	subs	r4, r0, #0
   18972:	db3a      	blt.n	189ea <zsock_getsockopt_ctx+0xb6>
				return 0;
   18974:	2000      	movs	r0, #0
   18976:	e7f2      	b.n	1895e <zsock_getsockopt_ctx+0x2a>
   18978:	f8b0 3088 	ldrh.w	r3, [r0, #136]	; 0x88
   1897c:	f3c3 1381 	ubfx	r3, r3, #6, #2
			if (*optlen != sizeof(type)) {
   18980:	9904      	ldr	r1, [sp, #16]
   18982:	6809      	ldr	r1, [r1, #0]
   18984:	2904      	cmp	r1, #4
   18986:	d102      	bne.n	1898e <zsock_getsockopt_ctx+0x5a>
			*(int *)optval = type;
   18988:	6013      	str	r3, [r2, #0]
			return 0;
   1898a:	2000      	movs	r0, #0
   1898c:	e7e7      	b.n	1895e <zsock_getsockopt_ctx+0x2a>
				errno = EINVAL;
   1898e:	f000 fb9b 	bl	190c8 <__errno>
   18992:	2316      	movs	r3, #22
   18994:	6003      	str	r3, [r0, #0]
				return -1;
   18996:	f04f 30ff 	mov.w	r0, #4294967295
   1899a:	e7e0      	b.n	1895e <zsock_getsockopt_ctx+0x2a>
	return context->proto;
   1899c:	f8b0 3086 	ldrh.w	r3, [r0, #134]	; 0x86
			if (*optlen != sizeof(proto)) {
   189a0:	9904      	ldr	r1, [sp, #16]
   189a2:	6809      	ldr	r1, [r1, #0]
   189a4:	2904      	cmp	r1, #4
   189a6:	d102      	bne.n	189ae <zsock_getsockopt_ctx+0x7a>
			*(int *)optval = proto;
   189a8:	6013      	str	r3, [r2, #0]
			return 0;
   189aa:	2000      	movs	r0, #0
   189ac:	e7d7      	b.n	1895e <zsock_getsockopt_ctx+0x2a>
				errno = EINVAL;
   189ae:	f000 fb8b 	bl	190c8 <__errno>
   189b2:	2316      	movs	r3, #22
   189b4:	6003      	str	r3, [r0, #0]
				return -1;
   189b6:	f04f 30ff 	mov.w	r0, #4294967295
   189ba:	e7d0      	b.n	1895e <zsock_getsockopt_ctx+0x2a>
		switch (optname) {
   189bc:	2901      	cmp	r1, #1
   189be:	d1c8      	bne.n	18952 <zsock_getsockopt_ctx+0x1e>
			ret = net_tcp_get_option(ctx, TCP_OPT_NODELAY, optval, optlen);
   189c0:	9b04      	ldr	r3, [sp, #16]
   189c2:	f004 fa4e 	bl	1ce62 <net_tcp_get_option>
			return ret;
   189c6:	e7ca      	b.n	1895e <zsock_getsockopt_ctx+0x2a>
		switch (optname) {
   189c8:	2901      	cmp	r1, #1
   189ca:	d1c2      	bne.n	18952 <zsock_getsockopt_ctx+0x1e>
				ret = net_context_get_option(ctx,
   189cc:	9b04      	ldr	r3, [sp, #16]
   189ce:	2108      	movs	r1, #8
   189d0:	f7ee ff2a 	bl	7828 <net_context_get_option>
				if (ret < 0) {
   189d4:	1e05      	subs	r5, r0, #0
   189d6:	db01      	blt.n	189dc <zsock_getsockopt_ctx+0xa8>
				return 0;
   189d8:	4620      	mov	r0, r4
   189da:	e7c0      	b.n	1895e <zsock_getsockopt_ctx+0x2a>
					errno  = -ret;
   189dc:	f000 fb74 	bl	190c8 <__errno>
   189e0:	426d      	negs	r5, r5
   189e2:	6005      	str	r5, [r0, #0]
					return -1;
   189e4:	f04f 30ff 	mov.w	r0, #4294967295
   189e8:	e7b9      	b.n	1895e <zsock_getsockopt_ctx+0x2a>
					errno  = -ret;
   189ea:	f000 fb6d 	bl	190c8 <__errno>
   189ee:	4264      	negs	r4, r4
   189f0:	6004      	str	r4, [r0, #0]
					return -1;
   189f2:	f04f 30ff 	mov.w	r0, #4294967295
   189f6:	e7b2      	b.n	1895e <zsock_getsockopt_ctx+0x2a>

000189f8 <sock_getsockopt_vmeth>:
{
   189f8:	b500      	push	{lr}
   189fa:	b083      	sub	sp, #12
	return zsock_getsockopt_ctx(obj, level, optname, optval, optlen);
   189fc:	f8dd c010 	ldr.w	ip, [sp, #16]
   18a00:	f8cd c000 	str.w	ip, [sp]
   18a04:	f7ff ff96 	bl	18934 <zsock_getsockopt_ctx>
}
   18a08:	b003      	add	sp, #12
   18a0a:	f85d fb04 	ldr.w	pc, [sp], #4

00018a0e <zsock_setsockopt_ctx>:
{
   18a0e:	b570      	push	{r4, r5, r6, lr}
   18a10:	4606      	mov	r6, r0
   18a12:	461d      	mov	r5, r3
	switch (level) {
   18a14:	2906      	cmp	r1, #6
   18a16:	d062      	beq.n	18ade <zsock_setsockopt_ctx+0xd0>
   18a18:	460c      	mov	r4, r1
   18a1a:	dc2d      	bgt.n	18a78 <zsock_setsockopt_ctx+0x6a>
   18a1c:	2900      	cmp	r1, #0
   18a1e:	d066      	beq.n	18aee <zsock_setsockopt_ctx+0xe0>
   18a20:	2901      	cmp	r1, #1
   18a22:	d17d      	bne.n	18b20 <zsock_setsockopt_ctx+0x112>
		switch (optname) {
   18a24:	2a02      	cmp	r2, #2
   18a26:	f000 8082 	beq.w	18b2e <zsock_setsockopt_ctx+0x120>
   18a2a:	2a19      	cmp	r2, #25
   18a2c:	d178      	bne.n	18b20 <zsock_setsockopt_ctx+0x112>
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
   18a2e:	f8b0 3088 	ldrh.w	r3, [r0, #136]	; 0x88
   18a32:	f3c3 03c2 	ubfx	r3, r3, #3, #3
			if (net_context_get_family(ctx) != AF_INET &&
   18a36:	2b01      	cmp	r3, #1
   18a38:	d001      	beq.n	18a3e <zsock_setsockopt_ctx+0x30>
   18a3a:	2b02      	cmp	r3, #2
   18a3c:	d12b      	bne.n	18a96 <zsock_setsockopt_ctx+0x88>
			if ((optlen == 0) || (ifreq != NULL &&
   18a3e:	9b04      	ldr	r3, [sp, #16]
   18a40:	b383      	cbz	r3, 18aa4 <zsock_setsockopt_ctx+0x96>
   18a42:	b3bd      	cbz	r5, 18ab4 <zsock_setsockopt_ctx+0xa6>
					      strlen(ifreq->ifr_name) == 0)) {
   18a44:	4628      	mov	r0, r5
   18a46:	f7e8 f9b3 	bl	db0 <strlen>
			if ((optlen == 0) || (ifreq != NULL &&
   18a4a:	b358      	cbz	r0, 18aa4 <zsock_setsockopt_ctx+0x96>
			if ((ifreq == NULL) || (optlen != sizeof(*ifreq))) {
   18a4c:	9b04      	ldr	r3, [sp, #16]
   18a4e:	2b30      	cmp	r3, #48	; 0x30
   18a50:	d130      	bne.n	18ab4 <zsock_setsockopt_ctx+0xa6>
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   18a52:	4628      	mov	r0, r5
   18a54:	f7f7 ff0c 	bl	10870 <z_impl_device_get_binding>
			if (dev == NULL) {
   18a58:	b398      	cbz	r0, 18ac2 <zsock_setsockopt_ctx+0xb4>
			iface = net_if_lookup_by_dev(dev);
   18a5a:	f7ed ff49 	bl	68f0 <net_if_lookup_by_dev>
			if (iface == NULL) {
   18a5e:	b3b8      	cbz	r0, 18ad0 <zsock_setsockopt_ctx+0xc2>
static inline void net_context_set_iface(struct net_context *context,
					 struct net_if *iface)
{
	NET_ASSERT(iface);

	context->iface = net_if_get_by_iface(iface);
   18a60:	f7ee fabc 	bl	6fdc <net_if_get_by_iface>
   18a64:	f886 008a 	strb.w	r0, [r6, #138]	; 0x8a
			ctx->flags |= NET_CONTEXT_BOUND_TO_IFACE;
   18a68:	f8b6 3088 	ldrh.w	r3, [r6, #136]	; 0x88
   18a6c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   18a70:	f8a6 3088 	strh.w	r3, [r6, #136]	; 0x88
			return 0;
   18a74:	2000      	movs	r0, #0
   18a76:	e059      	b.n	18b2c <zsock_setsockopt_ctx+0x11e>
	switch (level) {
   18a78:	2929      	cmp	r1, #41	; 0x29
   18a7a:	d151      	bne.n	18b20 <zsock_setsockopt_ctx+0x112>
		switch (optname) {
   18a7c:	2a1a      	cmp	r2, #26
   18a7e:	d058      	beq.n	18b32 <zsock_setsockopt_ctx+0x124>
   18a80:	2a43      	cmp	r2, #67	; 0x43
   18a82:	d14d      	bne.n	18b20 <zsock_setsockopt_ctx+0x112>
				ret = net_context_set_option(ctx,
   18a84:	9b04      	ldr	r3, [sp, #16]
   18a86:	462a      	mov	r2, r5
   18a88:	2108      	movs	r1, #8
   18a8a:	f7ee fe61 	bl	7750 <net_context_set_option>
				if (ret < 0) {
   18a8e:	1e04      	subs	r4, r0, #0
   18a90:	db3f      	blt.n	18b12 <zsock_setsockopt_ctx+0x104>
				return 0;
   18a92:	2000      	movs	r0, #0
   18a94:	e04a      	b.n	18b2c <zsock_setsockopt_ctx+0x11e>
				errno = EAFNOSUPPORT;
   18a96:	f000 fb17 	bl	190c8 <__errno>
   18a9a:	236a      	movs	r3, #106	; 0x6a
   18a9c:	6003      	str	r3, [r0, #0]
				return -1;
   18a9e:	f04f 30ff 	mov.w	r0, #4294967295
   18aa2:	e043      	b.n	18b2c <zsock_setsockopt_ctx+0x11e>
				ctx->flags &= ~NET_CONTEXT_BOUND_TO_IFACE;
   18aa4:	f8b6 3088 	ldrh.w	r3, [r6, #136]	; 0x88
   18aa8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   18aac:	f8a6 3088 	strh.w	r3, [r6, #136]	; 0x88
				return 0;
   18ab0:	2000      	movs	r0, #0
   18ab2:	e03b      	b.n	18b2c <zsock_setsockopt_ctx+0x11e>
				errno = EINVAL;
   18ab4:	f000 fb08 	bl	190c8 <__errno>
   18ab8:	2316      	movs	r3, #22
   18aba:	6003      	str	r3, [r0, #0]
				return -1;
   18abc:	f04f 30ff 	mov.w	r0, #4294967295
   18ac0:	e034      	b.n	18b2c <zsock_setsockopt_ctx+0x11e>
				errno = ENODEV;
   18ac2:	f000 fb01 	bl	190c8 <__errno>
   18ac6:	2313      	movs	r3, #19
   18ac8:	6003      	str	r3, [r0, #0]
				return -1;
   18aca:	f04f 30ff 	mov.w	r0, #4294967295
   18ace:	e02d      	b.n	18b2c <zsock_setsockopt_ctx+0x11e>
				errno = ENODEV;
   18ad0:	f000 fafa 	bl	190c8 <__errno>
   18ad4:	2313      	movs	r3, #19
   18ad6:	6003      	str	r3, [r0, #0]
				return -1;
   18ad8:	f04f 30ff 	mov.w	r0, #4294967295
   18adc:	e026      	b.n	18b2c <zsock_setsockopt_ctx+0x11e>
		switch (optname) {
   18ade:	2a01      	cmp	r2, #1
   18ae0:	d11e      	bne.n	18b20 <zsock_setsockopt_ctx+0x112>
			ret = net_tcp_set_option(ctx,
   18ae2:	9b04      	ldr	r3, [sp, #16]
   18ae4:	462a      	mov	r2, r5
   18ae6:	2101      	movs	r1, #1
   18ae8:	f004 f99b 	bl	1ce22 <net_tcp_set_option>
			return ret;
   18aec:	e01e      	b.n	18b2c <zsock_setsockopt_ctx+0x11e>
		switch (optname) {
   18aee:	2a01      	cmp	r2, #1
   18af0:	d116      	bne.n	18b20 <zsock_setsockopt_ctx+0x112>
				ret = net_context_set_option(ctx,
   18af2:	9b04      	ldr	r3, [sp, #16]
   18af4:	462a      	mov	r2, r5
   18af6:	2108      	movs	r1, #8
   18af8:	f7ee fe2a 	bl	7750 <net_context_set_option>
				if (ret < 0) {
   18afc:	1e05      	subs	r5, r0, #0
   18afe:	db01      	blt.n	18b04 <zsock_setsockopt_ctx+0xf6>
				return 0;
   18b00:	4620      	mov	r0, r4
   18b02:	e013      	b.n	18b2c <zsock_setsockopt_ctx+0x11e>
					errno  = -ret;
   18b04:	f000 fae0 	bl	190c8 <__errno>
   18b08:	426d      	negs	r5, r5
   18b0a:	6005      	str	r5, [r0, #0]
					return -1;
   18b0c:	f04f 30ff 	mov.w	r0, #4294967295
   18b10:	e00c      	b.n	18b2c <zsock_setsockopt_ctx+0x11e>
					errno  = -ret;
   18b12:	f000 fad9 	bl	190c8 <__errno>
   18b16:	4264      	negs	r4, r4
   18b18:	6004      	str	r4, [r0, #0]
					return -1;
   18b1a:	f04f 30ff 	mov.w	r0, #4294967295
   18b1e:	e005      	b.n	18b2c <zsock_setsockopt_ctx+0x11e>
	errno = ENOPROTOOPT;
   18b20:	f000 fad2 	bl	190c8 <__errno>
   18b24:	236d      	movs	r3, #109	; 0x6d
   18b26:	6003      	str	r3, [r0, #0]
	return -1;
   18b28:	f04f 30ff 	mov.w	r0, #4294967295
}
   18b2c:	bd70      	pop	{r4, r5, r6, pc}
   18b2e:	2000      	movs	r0, #0
   18b30:	e7fc      	b.n	18b2c <zsock_setsockopt_ctx+0x11e>
   18b32:	2000      	movs	r0, #0
   18b34:	e7fa      	b.n	18b2c <zsock_setsockopt_ctx+0x11e>

00018b36 <sock_setsockopt_vmeth>:
{
   18b36:	b500      	push	{lr}
   18b38:	b083      	sub	sp, #12
	return zsock_setsockopt_ctx(obj, level, optname, optval, optlen);
   18b3a:	f8dd c010 	ldr.w	ip, [sp, #16]
   18b3e:	f8cd c000 	str.w	ip, [sp]
   18b42:	f7ff ff64 	bl	18a0e <zsock_setsockopt_ctx>
}
   18b46:	b003      	add	sp, #12
   18b48:	f85d fb04 	ldr.w	pc, [sp], #4

00018b4c <zsock_getpeername_ctx>:
{
   18b4c:	b530      	push	{r4, r5, lr}
   18b4e:	b083      	sub	sp, #12
	if (addr == NULL || addrlen == NULL) {
   18b50:	b329      	cbz	r1, 18b9e <zsock_getpeername_ctx+0x52>
   18b52:	4603      	mov	r3, r0
   18b54:	4614      	mov	r4, r2
   18b56:	4608      	mov	r0, r1
   18b58:	b30a      	cbz	r2, 18b9e <zsock_getpeername_ctx+0x52>
	if (!(ctx->flags & NET_CONTEXT_REMOTE_ADDR_SET)) {
   18b5a:	f8b3 2088 	ldrh.w	r2, [r3, #136]	; 0x88
   18b5e:	f412 7f80 	tst.w	r2, #256	; 0x100
   18b62:	d023      	beq.n	18bac <zsock_getpeername_ctx+0x60>
	return (enum net_sock_type)((context->flags & NET_CONTEXT_TYPE) >> 6);
   18b64:	f3c2 1181 	ubfx	r1, r2, #6, #2
	if (net_context_get_type(ctx) == SOCK_STREAM &&
   18b68:	2901      	cmp	r1, #1
   18b6a:	d026      	beq.n	18bba <zsock_getpeername_ctx+0x6e>
	if (IS_ENABLED(CONFIG_NET_IPV4) && ctx->remote.sa_family == AF_INET) {
   18b6c:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
   18b6e:	2a01      	cmp	r2, #1
   18b70:	d12e      	bne.n	18bd0 <zsock_getpeername_ctx+0x84>
		struct sockaddr_in addr4 = { 0 };
   18b72:	2500      	movs	r5, #0
   18b74:	9500      	str	r5, [sp, #0]
   18b76:	9501      	str	r5, [sp, #4]
		addr4.sin_family = AF_INET;
   18b78:	f8ad 2000 	strh.w	r2, [sp]
		addr4.sin_port = net_sin(&ctx->remote)->sin_port;
   18b7c:	8cda      	ldrh	r2, [r3, #38]	; 0x26
   18b7e:	f8ad 2002 	strh.w	r2, [sp, #2]
		memcpy(&addr4.sin_addr, &net_sin(&ctx->remote)->sin_addr,
   18b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18b84:	9301      	str	r3, [sp, #4]
		memcpy(addr, &addr4, MIN(*addrlen, newlen));
   18b86:	6822      	ldr	r2, [r4, #0]
   18b88:	2a08      	cmp	r2, #8
   18b8a:	bf28      	it	cs
   18b8c:	2208      	movcs	r2, #8
   18b8e:	4669      	mov	r1, sp
   18b90:	f007 f917 	bl	1fdc2 <memcpy>
	*addrlen = newlen;
   18b94:	2308      	movs	r3, #8
   18b96:	6023      	str	r3, [r4, #0]
	return 0;
   18b98:	4628      	mov	r0, r5
}
   18b9a:	b003      	add	sp, #12
   18b9c:	bd30      	pop	{r4, r5, pc}
		SET_ERRNO(-EINVAL);
   18b9e:	f000 fa93 	bl	190c8 <__errno>
   18ba2:	2316      	movs	r3, #22
   18ba4:	6003      	str	r3, [r0, #0]
   18ba6:	f04f 30ff 	mov.w	r0, #4294967295
   18baa:	e7f6      	b.n	18b9a <zsock_getpeername_ctx+0x4e>
		SET_ERRNO(-ENOTCONN);
   18bac:	f000 fa8c 	bl	190c8 <__errno>
   18bb0:	2380      	movs	r3, #128	; 0x80
   18bb2:	6003      	str	r3, [r0, #0]
   18bb4:	f04f 30ff 	mov.w	r0, #4294967295
   18bb8:	e7ef      	b.n	18b9a <zsock_getpeername_ctx+0x4e>
	return (enum net_context_state)
   18bba:	f3c2 0241 	ubfx	r2, r2, #1, #2
	if (net_context_get_type(ctx) == SOCK_STREAM &&
   18bbe:	2a02      	cmp	r2, #2
   18bc0:	d0d4      	beq.n	18b6c <zsock_getpeername_ctx+0x20>
		SET_ERRNO(-ENOTCONN);
   18bc2:	f000 fa81 	bl	190c8 <__errno>
   18bc6:	2380      	movs	r3, #128	; 0x80
   18bc8:	6003      	str	r3, [r0, #0]
   18bca:	f04f 30ff 	mov.w	r0, #4294967295
   18bce:	e7e4      	b.n	18b9a <zsock_getpeername_ctx+0x4e>
		SET_ERRNO(-EINVAL);
   18bd0:	f000 fa7a 	bl	190c8 <__errno>
   18bd4:	2316      	movs	r3, #22
   18bd6:	6003      	str	r3, [r0, #0]
   18bd8:	f04f 30ff 	mov.w	r0, #4294967295
   18bdc:	e7dd      	b.n	18b9a <zsock_getpeername_ctx+0x4e>

00018bde <sock_getpeername_vmeth>:
{
   18bde:	b508      	push	{r3, lr}
	return zsock_getpeername_ctx(obj, addr, addrlen);
   18be0:	f7ff ffb4 	bl	18b4c <zsock_getpeername_ctx>
}
   18be4:	bd08      	pop	{r3, pc}

00018be6 <zsock_getsockname_ctx>:
{
   18be6:	b530      	push	{r4, r5, lr}
   18be8:	b083      	sub	sp, #12
   18bea:	4603      	mov	r3, r0
   18bec:	4615      	mov	r5, r2
	if (!ctx->conn_handler) {
   18bee:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   18bf0:	b1d2      	cbz	r2, 18c28 <zsock_getsockname_ctx+0x42>
   18bf2:	4608      	mov	r0, r1
	if (IS_ENABLED(CONFIG_NET_IPV4) && ctx->local.family == AF_INET) {
   18bf4:	8b9a      	ldrh	r2, [r3, #28]
   18bf6:	2a01      	cmp	r2, #1
   18bf8:	d11d      	bne.n	18c36 <zsock_getsockname_ctx+0x50>
		struct sockaddr_in addr4 = { 0 };
   18bfa:	2400      	movs	r4, #0
   18bfc:	9400      	str	r4, [sp, #0]
   18bfe:	9401      	str	r4, [sp, #4]
		addr4.sin_family = AF_INET;
   18c00:	f8ad 2000 	strh.w	r2, [sp]
		addr4.sin_port = net_sin_ptr(&ctx->local)->sin_port;
   18c04:	8bda      	ldrh	r2, [r3, #30]
   18c06:	f8ad 2002 	strh.w	r2, [sp, #2]
		memcpy(&addr4.sin_addr, net_sin_ptr(&ctx->local)->sin_addr,
   18c0a:	6a1b      	ldr	r3, [r3, #32]
   18c0c:	681b      	ldr	r3, [r3, #0]
   18c0e:	9301      	str	r3, [sp, #4]
		memcpy(addr, &addr4, MIN(*addrlen, newlen));
   18c10:	682a      	ldr	r2, [r5, #0]
   18c12:	2a08      	cmp	r2, #8
   18c14:	bf28      	it	cs
   18c16:	2208      	movcs	r2, #8
   18c18:	4669      	mov	r1, sp
   18c1a:	f007 f8d2 	bl	1fdc2 <memcpy>
	*addrlen = newlen;
   18c1e:	2308      	movs	r3, #8
   18c20:	602b      	str	r3, [r5, #0]
	return 0;
   18c22:	4620      	mov	r0, r4
}
   18c24:	b003      	add	sp, #12
   18c26:	bd30      	pop	{r4, r5, pc}
		SET_ERRNO(-EINVAL);
   18c28:	f000 fa4e 	bl	190c8 <__errno>
   18c2c:	2316      	movs	r3, #22
   18c2e:	6003      	str	r3, [r0, #0]
   18c30:	f04f 30ff 	mov.w	r0, #4294967295
   18c34:	e7f6      	b.n	18c24 <zsock_getsockname_ctx+0x3e>
		SET_ERRNO(-EINVAL);
   18c36:	f000 fa47 	bl	190c8 <__errno>
   18c3a:	2316      	movs	r3, #22
   18c3c:	6003      	str	r3, [r0, #0]
   18c3e:	f04f 30ff 	mov.w	r0, #4294967295
   18c42:	e7ef      	b.n	18c24 <zsock_getsockname_ctx+0x3e>

00018c44 <sock_getsockname_vmeth>:
{
   18c44:	b508      	push	{r3, lr}
	return zsock_getsockname_ctx(obj, addr, addrlen);
   18c46:	f7ff ffce 	bl	18be6 <zsock_getsockname_ctx>
}
   18c4a:	bd08      	pop	{r3, pc}

00018c4c <net_mgmt_sock_ioctl>:

static int net_mgmt_sock_ioctl(void *obj, unsigned int request,
			       va_list args)
{
	return 0;
}
   18c4c:	2000      	movs	r0, #0
   18c4e:	4770      	bx	lr

00018c50 <net_mgmt_sock_connect>:
/* The connect() function is not needed */
static int net_mgmt_sock_connect(void *obj, const struct sockaddr *addr,
				 socklen_t addrlen)
{
	return 0;
}
   18c50:	2000      	movs	r0, #0
   18c52:	4770      	bx	lr

00018c54 <net_mgmt_sock_listen>:
 * The listen() and accept() functions are without any functionality.
 */
static int net_mgmt_sock_listen(void *obj, int backlog)
{
	return 0;
}
   18c54:	2000      	movs	r0, #0
   18c56:	4770      	bx	lr

00018c58 <net_mgmt_sock_accept>:

static int net_mgmt_sock_accept(void *obj, struct sockaddr *addr,
				socklen_t *addrlen)
{
	return 0;
}
   18c58:	2000      	movs	r0, #0
   18c5a:	4770      	bx	lr

00018c5c <net_mgmt_is_supported>:
	.setsockopt = net_mgmt_sock_setsockopt,
};

static bool net_mgmt_is_supported(int family, int type, int proto)
{
	if ((type != SOCK_RAW && type != SOCK_DGRAM) ||
   18c5c:	3902      	subs	r1, #2
   18c5e:	2901      	cmp	r1, #1
   18c60:	d803      	bhi.n	18c6a <net_mgmt_is_supported+0xe>
   18c62:	2a01      	cmp	r2, #1
   18c64:	d103      	bne.n	18c6e <net_mgmt_is_supported+0x12>
	    (proto != NET_MGMT_EVENT_PROTO)) {
		return false;
	}

	return true;
   18c66:	2001      	movs	r0, #1
   18c68:	4770      	bx	lr
		return false;
   18c6a:	2000      	movs	r0, #0
   18c6c:	4770      	bx	lr
   18c6e:	2000      	movs	r0, #0
}
   18c70:	4770      	bx	lr

00018c72 <znet_mgmt_setsockopt>:
{
   18c72:	b508      	push	{r3, lr}
	if (level != SOL_NET_MGMT_RAW || !optval || !optlen) {
   18c74:	2965      	cmp	r1, #101	; 0x65
   18c76:	d109      	bne.n	18c8c <znet_mgmt_setsockopt+0x1a>
   18c78:	b143      	cbz	r3, 18c8c <znet_mgmt_setsockopt+0x1a>
   18c7a:	9b02      	ldr	r3, [sp, #8]
   18c7c:	b133      	cbz	r3, 18c8c <znet_mgmt_setsockopt+0x1a>
	if (mgmt->iface == NULL) {
   18c7e:	6803      	ldr	r3, [r0, #0]
   18c80:	b15b      	cbz	r3, 18c9a <znet_mgmt_setsockopt+0x28>
	errno = ENOTSUP;
   18c82:	f000 fa21 	bl	190c8 <__errno>
   18c86:	2386      	movs	r3, #134	; 0x86
   18c88:	6003      	str	r3, [r0, #0]
	return -1;
   18c8a:	e003      	b.n	18c94 <znet_mgmt_setsockopt+0x22>
		errno = EINVAL;
   18c8c:	f000 fa1c 	bl	190c8 <__errno>
   18c90:	2316      	movs	r3, #22
   18c92:	6003      	str	r3, [r0, #0]
}
   18c94:	f04f 30ff 	mov.w	r0, #4294967295
   18c98:	bd08      	pop	{r3, pc}
		errno = ENOENT;
   18c9a:	f000 fa15 	bl	190c8 <__errno>
   18c9e:	2302      	movs	r3, #2
   18ca0:	6003      	str	r3, [r0, #0]
		return -1;
   18ca2:	e7f7      	b.n	18c94 <znet_mgmt_setsockopt+0x22>

00018ca4 <net_mgmt_sock_setsockopt>:
{
   18ca4:	b500      	push	{lr}
   18ca6:	b083      	sub	sp, #12
	return znet_mgmt_setsockopt(obj, level, optname, optval, optlen);
   18ca8:	f8dd c010 	ldr.w	ip, [sp, #16]
   18cac:	f8cd c000 	str.w	ip, [sp]
   18cb0:	f7ff ffdf 	bl	18c72 <znet_mgmt_setsockopt>
}
   18cb4:	b003      	add	sp, #12
   18cb6:	f85d fb04 	ldr.w	pc, [sp], #4

00018cba <znet_mgmt_getsockopt>:
{
   18cba:	b508      	push	{r3, lr}
	if (level != SOL_NET_MGMT_RAW || !optval || !optlen) {
   18cbc:	2965      	cmp	r1, #101	; 0x65
   18cbe:	d109      	bne.n	18cd4 <znet_mgmt_getsockopt+0x1a>
   18cc0:	b143      	cbz	r3, 18cd4 <znet_mgmt_getsockopt+0x1a>
   18cc2:	9b02      	ldr	r3, [sp, #8]
   18cc4:	b133      	cbz	r3, 18cd4 <znet_mgmt_getsockopt+0x1a>
	if (mgmt->iface == NULL) {
   18cc6:	6803      	ldr	r3, [r0, #0]
   18cc8:	b15b      	cbz	r3, 18ce2 <znet_mgmt_getsockopt+0x28>
	errno = ENOTSUP;
   18cca:	f000 f9fd 	bl	190c8 <__errno>
   18cce:	2386      	movs	r3, #134	; 0x86
   18cd0:	6003      	str	r3, [r0, #0]
	return -1;
   18cd2:	e003      	b.n	18cdc <znet_mgmt_getsockopt+0x22>
		errno = EINVAL;
   18cd4:	f000 f9f8 	bl	190c8 <__errno>
   18cd8:	2316      	movs	r3, #22
   18cda:	6003      	str	r3, [r0, #0]
}
   18cdc:	f04f 30ff 	mov.w	r0, #4294967295
   18ce0:	bd08      	pop	{r3, pc}
		errno = ENOENT;
   18ce2:	f000 f9f1 	bl	190c8 <__errno>
   18ce6:	2302      	movs	r3, #2
   18ce8:	6003      	str	r3, [r0, #0]
		return -1;
   18cea:	e7f7      	b.n	18cdc <znet_mgmt_getsockopt+0x22>

00018cec <net_mgmt_sock_getsockopt>:
{
   18cec:	b500      	push	{lr}
   18cee:	b083      	sub	sp, #12
	return znet_mgmt_getsockopt(obj, level, optname, optval, optlen);
   18cf0:	f8dd c010 	ldr.w	ip, [sp, #16]
   18cf4:	f8cd c000 	str.w	ip, [sp]
   18cf8:	f7ff ffdf 	bl	18cba <znet_mgmt_getsockopt>
}
   18cfc:	b003      	add	sp, #12
   18cfe:	f85d fb04 	ldr.w	pc, [sp], #4

00018d02 <znet_mgmt_recvfrom>:
{
   18d02:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18d06:	b08b      	sub	sp, #44	; 0x2c
   18d08:	4605      	mov	r5, r0
   18d0a:	4688      	mov	r8, r1
   18d0c:	4691      	mov	r9, r2
	k_timeout_t timeout = mgmt->wait_timeout;
   18d0e:	6987      	ldr	r7, [r0, #24]
   18d10:	69c6      	ldr	r6, [r0, #28]
	uint32_t raised_event = 0;
   18d12:	2200      	movs	r2, #0
   18d14:	9209      	str	r2, [sp, #36]	; 0x24
	if (flags & ZSOCK_MSG_DONTWAIT) {
   18d16:	f013 0f40 	tst.w	r3, #64	; 0x40
   18d1a:	d01d      	beq.n	18d58 <znet_mgmt_recvfrom+0x56>
		timeout = K_NO_WAIT;
   18d1c:	4617      	mov	r7, r2
   18d1e:	4616      	mov	r6, r2
   18d20:	e01a      	b.n	18d58 <znet_mgmt_recvfrom+0x56>
		ret = net_mgmt_event_wait_on_iface(mgmt->iface,
   18d22:	9702      	str	r7, [sp, #8]
   18d24:	9603      	str	r6, [sp, #12]
   18d26:	ab04      	add	r3, sp, #16
   18d28:	9300      	str	r3, [sp, #0]
   18d2a:	ab05      	add	r3, sp, #20
   18d2c:	aa09      	add	r2, sp, #36	; 0x24
   18d2e:	68a9      	ldr	r1, [r5, #8]
   18d30:	f002 fd8f 	bl	1b852 <net_mgmt_event_wait_on_iface>
   18d34:	4604      	mov	r4, r0
		iface = mgmt->iface;
   18d36:	682b      	ldr	r3, [r5, #0]
   18d38:	9306      	str	r3, [sp, #24]
	if (ret == -ETIMEDOUT) {
   18d3a:	f114 0f74 	cmn.w	r4, #116	; 0x74
   18d3e:	d01a      	beq.n	18d76 <znet_mgmt_recvfrom+0x74>
	if (ret < 0) {
   18d40:	2c00      	cmp	r4, #0
   18d42:	db22      	blt.n	18d8a <znet_mgmt_recvfrom+0x88>
	if ((mgmt->mask & raised_event) != raised_event) {
   18d44:	68aa      	ldr	r2, [r5, #8]
   18d46:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18d48:	4393      	bics	r3, r2
   18d4a:	d02c      	beq.n	18da6 <znet_mgmt_recvfrom+0xa4>
		if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   18d4c:	f1b6 3fff 	cmp.w	r6, #4294967295
   18d50:	bf08      	it	eq
   18d52:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   18d56:	d11f      	bne.n	18d98 <znet_mgmt_recvfrom+0x96>
	if (mgmt->iface == NULL) {
   18d58:	6828      	ldr	r0, [r5, #0]
   18d5a:	2800      	cmp	r0, #0
   18d5c:	d1e1      	bne.n	18d22 <znet_mgmt_recvfrom+0x20>
		ret = net_mgmt_event_wait(mgmt->mask, &raised_event,
   18d5e:	9702      	str	r7, [sp, #8]
   18d60:	9603      	str	r6, [sp, #12]
   18d62:	ab04      	add	r3, sp, #16
   18d64:	9300      	str	r3, [sp, #0]
   18d66:	ab05      	add	r3, sp, #20
   18d68:	aa06      	add	r2, sp, #24
   18d6a:	a909      	add	r1, sp, #36	; 0x24
   18d6c:	68a8      	ldr	r0, [r5, #8]
   18d6e:	f002 fd5b 	bl	1b828 <net_mgmt_event_wait>
   18d72:	4604      	mov	r4, r0
   18d74:	e7e1      	b.n	18d3a <znet_mgmt_recvfrom+0x38>
		errno = EAGAIN;
   18d76:	f000 f9a7 	bl	190c8 <__errno>
   18d7a:	230b      	movs	r3, #11
   18d7c:	6003      	str	r3, [r0, #0]
		return -1;
   18d7e:	f04f 34ff 	mov.w	r4, #4294967295
}
   18d82:	4620      	mov	r0, r4
   18d84:	b00b      	add	sp, #44	; 0x2c
   18d86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		errno = -ret;
   18d8a:	f000 f99d 	bl	190c8 <__errno>
   18d8e:	4264      	negs	r4, r4
   18d90:	6004      	str	r4, [r0, #0]
		return -1;
   18d92:	f04f 34ff 	mov.w	r4, #4294967295
   18d96:	e7f4      	b.n	18d82 <znet_mgmt_recvfrom+0x80>
		errno = EAGAIN;
   18d98:	f000 f996 	bl	190c8 <__errno>
   18d9c:	230b      	movs	r3, #11
   18d9e:	6003      	str	r3, [r0, #0]
		return -1;
   18da0:	f04f 34ff 	mov.w	r4, #4294967295
   18da4:	e7ed      	b.n	18d82 <znet_mgmt_recvfrom+0x80>
	if (nm_addr) {
   18da6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   18da8:	b163      	cbz	r3, 18dc4 <znet_mgmt_recvfrom+0xc2>
		if (iface) {
   18daa:	9806      	ldr	r0, [sp, #24]
   18dac:	b300      	cbz	r0, 18df0 <znet_mgmt_recvfrom+0xee>
			nm_addr->nm_ifindex = net_if_get_by_iface(iface);
   18dae:	f7ee f915 	bl	6fdc <net_if_get_by_iface>
   18db2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   18db4:	6058      	str	r0, [r3, #4]
		nm_addr->nm_pid = mgmt->pid;
   18db6:	686b      	ldr	r3, [r5, #4]
   18db8:	9a12      	ldr	r2, [sp, #72]	; 0x48
   18dba:	6093      	str	r3, [r2, #8]
		nm_addr->nm_family = AF_NET_MGMT;
   18dbc:	2305      	movs	r3, #5
   18dbe:	8013      	strh	r3, [r2, #0]
		nm_addr->nm_mask = raised_event;
   18dc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18dc2:	60d3      	str	r3, [r2, #12]
	if (info) {
   18dc4:	9905      	ldr	r1, [sp, #20]
   18dc6:	b1b9      	cbz	r1, 18df8 <znet_mgmt_recvfrom+0xf6>
		ret = info_len + sizeof(hdr);
   18dc8:	9a04      	ldr	r2, [sp, #16]
   18dca:	3208      	adds	r2, #8
		ret = MIN(max_len, ret);
   18dcc:	454a      	cmp	r2, r9
   18dce:	bf28      	it	cs
   18dd0:	464a      	movcs	r2, r9
   18dd2:	4614      	mov	r4, r2
   18dd4:	f108 0008 	add.w	r0, r8, #8
   18dd8:	f006 fff3 	bl	1fdc2 <memcpy>
	hdr.nm_msg_version = NET_MGMT_SOCKET_VERSION_1;
   18ddc:	2301      	movs	r3, #1
   18dde:	9307      	str	r3, [sp, #28]
	hdr.nm_msg_len = ret;
   18de0:	9408      	str	r4, [sp, #32]
   18de2:	ab07      	add	r3, sp, #28
   18de4:	cb03      	ldmia	r3!, {r0, r1}
   18de6:	f8c8 0000 	str.w	r0, [r8]
   18dea:	f8c8 1004 	str.w	r1, [r8, #4]
   18dee:	e7c8      	b.n	18d82 <znet_mgmt_recvfrom+0x80>
			nm_addr->nm_ifindex = 0;
   18df0:	2300      	movs	r3, #0
   18df2:	9a12      	ldr	r2, [sp, #72]	; 0x48
   18df4:	6053      	str	r3, [r2, #4]
   18df6:	e7de      	b.n	18db6 <znet_mgmt_recvfrom+0xb4>
		ret = 0;
   18df8:	2400      	movs	r4, #0
   18dfa:	e7ef      	b.n	18ddc <znet_mgmt_recvfrom+0xda>

00018dfc <net_mgmt_sock_recvfrom>:
{
   18dfc:	b500      	push	{lr}
   18dfe:	b083      	sub	sp, #12
	return znet_mgmt_recvfrom(obj, buf, max_len, flags,
   18e00:	f8dd c014 	ldr.w	ip, [sp, #20]
   18e04:	f8cd c004 	str.w	ip, [sp, #4]
   18e08:	f8dd c010 	ldr.w	ip, [sp, #16]
   18e0c:	f8cd c000 	str.w	ip, [sp]
   18e10:	f7ff ff77 	bl	18d02 <znet_mgmt_recvfrom>
}
   18e14:	b003      	add	sp, #12
   18e16:	f85d fb04 	ldr.w	pc, [sp], #4

00018e1a <net_mgmt_sock_read>:
{
   18e1a:	b500      	push	{lr}
   18e1c:	b083      	sub	sp, #12
	return znet_mgmt_recvfrom(obj, buffer, count, 0, NULL, 0);
   18e1e:	2300      	movs	r3, #0
   18e20:	9301      	str	r3, [sp, #4]
   18e22:	9300      	str	r3, [sp, #0]
   18e24:	f7ff ff6d 	bl	18d02 <znet_mgmt_recvfrom>
}
   18e28:	b003      	add	sp, #12
   18e2a:	f85d fb04 	ldr.w	pc, [sp], #4

00018e2e <znet_mgmt_bind>:
	if (addrlen != sizeof(struct sockaddr_nm)) {
   18e2e:	2a10      	cmp	r2, #16
   18e30:	d122      	bne.n	18e78 <znet_mgmt_bind+0x4a>
{
   18e32:	b538      	push	{r3, r4, r5, lr}
   18e34:	4604      	mov	r4, r0
   18e36:	460d      	mov	r5, r1
	if (nm_addr->nm_ifindex) {
   18e38:	6848      	ldr	r0, [r1, #4]
   18e3a:	b940      	cbnz	r0, 18e4e <znet_mgmt_bind+0x20>
		mgmt->iface = NULL;
   18e3c:	2300      	movs	r3, #0
   18e3e:	6023      	str	r3, [r4, #0]
	mgmt->pid = nm_addr->nm_pid;
   18e40:	68ab      	ldr	r3, [r5, #8]
   18e42:	6063      	str	r3, [r4, #4]
	if (mgmt->proto == NET_MGMT_EVENT_PROTO) {
   18e44:	6a23      	ldr	r3, [r4, #32]
   18e46:	2b01      	cmp	r3, #1
   18e48:	d00d      	beq.n	18e66 <znet_mgmt_bind+0x38>
	return 0;
   18e4a:	2000      	movs	r0, #0
}
   18e4c:	bd38      	pop	{r3, r4, r5, pc}
   18e4e:	f7ed fd1f 	bl	6890 <z_impl_net_if_get_by_index>
		mgmt->iface = net_if_get_by_index(nm_addr->nm_ifindex);
   18e52:	6020      	str	r0, [r4, #0]
		if (!mgmt->iface) {
   18e54:	2800      	cmp	r0, #0
   18e56:	d1f3      	bne.n	18e40 <znet_mgmt_bind+0x12>
			errno = ENOENT;
   18e58:	f000 f936 	bl	190c8 <__errno>
   18e5c:	2302      	movs	r3, #2
   18e5e:	6003      	str	r3, [r0, #0]
			return -1;
   18e60:	f04f 30ff 	mov.w	r0, #4294967295
   18e64:	e7f2      	b.n	18e4c <znet_mgmt_bind+0x1e>
		mgmt->mask = nm_addr->nm_mask;
   18e66:	68eb      	ldr	r3, [r5, #12]
   18e68:	60a3      	str	r3, [r4, #8]
		if (mgmt->iface) {
   18e6a:	6822      	ldr	r2, [r4, #0]
   18e6c:	b13a      	cbz	r2, 18e7e <znet_mgmt_bind+0x50>
			mgmt->mask |= NET_MGMT_IFACE_BIT;
   18e6e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   18e72:	60a3      	str	r3, [r4, #8]
	return 0;
   18e74:	2000      	movs	r0, #0
   18e76:	e7e9      	b.n	18e4c <znet_mgmt_bind+0x1e>
		return -EINVAL;
   18e78:	f06f 0015 	mvn.w	r0, #21
}
   18e7c:	4770      	bx	lr
	return 0;
   18e7e:	2000      	movs	r0, #0
   18e80:	e7e4      	b.n	18e4c <znet_mgmt_bind+0x1e>

00018e82 <net_mgmt_sock_bind>:
{
   18e82:	b508      	push	{r3, lr}
	return znet_mgmt_bind(obj, addr, addrlen);
   18e84:	f7ff ffd3 	bl	18e2e <znet_mgmt_bind>
}
   18e88:	bd08      	pop	{r3, pc}

00018e8a <znet_mgmt_sendto>:
{
   18e8a:	b508      	push	{r3, lr}
	if (mgmt->proto == NET_MGMT_EVENT_PROTO) {
   18e8c:	6a03      	ldr	r3, [r0, #32]
   18e8e:	2b01      	cmp	r3, #1
   18e90:	d006      	beq.n	18ea0 <znet_mgmt_sendto+0x16>
	errno = EINVAL;
   18e92:	f000 f919 	bl	190c8 <__errno>
   18e96:	2316      	movs	r3, #22
   18e98:	6003      	str	r3, [r0, #0]
}
   18e9a:	f04f 30ff 	mov.w	r0, #4294967295
   18e9e:	bd08      	pop	{r3, pc}
		errno = ENOTSUP;
   18ea0:	f000 f912 	bl	190c8 <__errno>
   18ea4:	2386      	movs	r3, #134	; 0x86
   18ea6:	6003      	str	r3, [r0, #0]
		return -1;
   18ea8:	e7f7      	b.n	18e9a <znet_mgmt_sendto+0x10>

00018eaa <net_mgmt_sock_sendto>:
{
   18eaa:	b500      	push	{lr}
   18eac:	b083      	sub	sp, #12
	return znet_mgmt_sendto(obj, buf, len, flags, dest_addr, addrlen);
   18eae:	f8dd c014 	ldr.w	ip, [sp, #20]
   18eb2:	f8cd c004 	str.w	ip, [sp, #4]
   18eb6:	f8dd c010 	ldr.w	ip, [sp, #16]
   18eba:	f8cd c000 	str.w	ip, [sp]
   18ebe:	f7ff ffe4 	bl	18e8a <znet_mgmt_sendto>
}
   18ec2:	b003      	add	sp, #12
   18ec4:	f85d fb04 	ldr.w	pc, [sp], #4

00018ec8 <net_mgmt_sock_write>:
{
   18ec8:	b500      	push	{lr}
   18eca:	b083      	sub	sp, #12
	return znet_mgmt_sendto(obj, buffer, count, 0, NULL, 0);
   18ecc:	2300      	movs	r3, #0
   18ece:	9301      	str	r3, [sp, #4]
   18ed0:	9300      	str	r3, [sp, #0]
   18ed2:	f7ff ffda 	bl	18e8a <znet_mgmt_sendto>
}
   18ed6:	b003      	add	sp, #12
   18ed8:	f85d fb04 	ldr.w	pc, [sp], #4

00018edc <atomic_test_and_clear_bit>:
 * @param bit Bit number (starting from 0).
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
   18edc:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   18ede:	f001 021f 	and.w	r2, r1, #31
   18ee2:	2301      	movs	r3, #1
   18ee4:	4093      	lsls	r3, r2
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   18ee6:	0949      	lsrs	r1, r1, #5
   18ee8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   18eec:	43d9      	mvns	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   18eee:	f3bf 8f5b 	dmb	ish
   18ef2:	e850 2f00 	ldrex	r2, [r0]
   18ef6:	ea02 0c01 	and.w	ip, r2, r1
   18efa:	e840 ce00 	strex	lr, ip, [r0]
   18efe:	f1be 0f00 	cmp.w	lr, #0
   18f02:	d1f6      	bne.n	18ef2 <atomic_test_and_clear_bit+0x16>
   18f04:	f3bf 8f5b 	dmb	ish

	return (old & mask) != 0;
   18f08:	4213      	tst	r3, r2
}
   18f0a:	bf14      	ite	ne
   18f0c:	2001      	movne	r0, #1
   18f0e:	2000      	moveq	r0, #0
   18f10:	f85d fb04 	ldr.w	pc, [sp], #4

00018f14 <atomic_set_bit>:
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   18f14:	f001 021f 	and.w	r2, r1, #31
   18f18:	2301      	movs	r3, #1
   18f1a:	4093      	lsls	r3, r2

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   18f1c:	0949      	lsrs	r1, r1, #5
   18f1e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18f22:	f3bf 8f5b 	dmb	ish
   18f26:	e850 2f00 	ldrex	r2, [r0]
   18f2a:	431a      	orrs	r2, r3
   18f2c:	e840 2100 	strex	r1, r2, [r0]
   18f30:	2900      	cmp	r1, #0
   18f32:	d1f8      	bne.n	18f26 <atomic_set_bit+0x12>
   18f34:	f3bf 8f5b 	dmb	ish
}
   18f38:	4770      	bx	lr

00018f3a <pm_policy_state_lock_is_active>:
			return (atomic_get(&substate_lock_t[i].lock) != 0);
		}
	}

	return false;
}
   18f3a:	2000      	movs	r0, #0
   18f3c:	4770      	bx	lr

00018f3e <abort_function>:
	while(1);
   18f3e:	e7fe      	b.n	18f3e <abort_function>

00018f40 <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   18f40:	b538      	push	{r3, r4, r5, lr}
   18f42:	4604      	mov	r4, r0

	if (esf != NULL) {
   18f44:	460d      	mov	r5, r1
   18f46:	b111      	cbz	r1, 18f4e <z_arm_fatal_error+0xe>
		esf_dump(esf);
   18f48:	4608      	mov	r0, r1
   18f4a:	f7eb febb 	bl	4cc4 <esf_dump>
	}
	z_fatal_error(reason, esf);
   18f4e:	4629      	mov	r1, r5
   18f50:	4620      	mov	r0, r4
   18f52:	f7f7 fd27 	bl	109a4 <z_fatal_error>
}
   18f56:	bd38      	pop	{r3, r4, r5, pc}

00018f58 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   18f58:	b508      	push	{r3, lr}
   18f5a:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   18f5c:	6800      	ldr	r0, [r0, #0]
   18f5e:	f7ff ffef 	bl	18f40 <z_arm_fatal_error>
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
   18f62:	bd08      	pop	{r3, pc}

00018f64 <arch_irq_enable>:
{
   18f64:	b508      	push	{r3, lr}
	NVIC_EnableIRQ((IRQn_Type)irq);
   18f66:	b240      	sxtb	r0, r0
   18f68:	f7eb ffd2 	bl	4f10 <__NVIC_EnableIRQ>
}
   18f6c:	bd08      	pop	{r3, pc}

00018f6e <arch_irq_disable>:
{
   18f6e:	b508      	push	{r3, lr}
	NVIC_DisableIRQ((IRQn_Type)irq);
   18f70:	b240      	sxtb	r0, r0
   18f72:	f7eb ffdb 	bl	4f2c <__NVIC_DisableIRQ>
}
   18f76:	bd08      	pop	{r3, pc}

00018f78 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   18f78:	b508      	push	{r3, lr}
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   18f7a:	3101      	adds	r1, #1
   18f7c:	b240      	sxtb	r0, r0
   18f7e:	f7eb ffe7 	bl	4f50 <__NVIC_SetPriority>
}
   18f82:	bd08      	pop	{r3, pc}

00018f84 <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
   18f84:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   18f86:	2100      	movs	r1, #0
   18f88:	2001      	movs	r0, #1
   18f8a:	f7ff ffd9 	bl	18f40 <z_arm_fatal_error>
}
   18f8e:	bd08      	pop	{r3, pc}

00018f90 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   18f90:	b508      	push	{r3, lr}
	handler();
   18f92:	f7eb ffff 	bl	4f94 <z_SysNmiOnReset>
	z_arm_int_exit();
   18f96:	f7ec f8bd 	bl	5114 <z_arm_exc_exit>
}
   18f9a:	bd08      	pop	{r3, pc}

00018f9c <memory_fault_recoverable>:
}
   18f9c:	2000      	movs	r0, #0
   18f9e:	4770      	bx	lr

00018fa0 <fault_handle>:
{
   18fa0:	b508      	push	{r3, lr}
	*recoverable = false;
   18fa2:	2300      	movs	r3, #0
   18fa4:	7013      	strb	r3, [r2, #0]
	switch (fault) {
   18fa6:	1ecb      	subs	r3, r1, #3
   18fa8:	2b09      	cmp	r3, #9
   18faa:	d81a      	bhi.n	18fe2 <fault_handle+0x42>
   18fac:	e8df f003 	tbb	[pc, r3]
   18fb0:	110d0905 	.word	0x110d0905
   18fb4:	19191919 	.word	0x19191919
   18fb8:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
   18fba:	4611      	mov	r1, r2
   18fbc:	f7ec fd70 	bl	5aa0 <hard_fault>
}
   18fc0:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   18fc2:	2100      	movs	r1, #0
   18fc4:	f7ec f916 	bl	51f4 <mem_manage_fault>
		break;
   18fc8:	e7fa      	b.n	18fc0 <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
   18fca:	2100      	movs	r1, #0
   18fcc:	f7ec fa8a 	bl	54e4 <bus_fault>
		break;
   18fd0:	e7f6      	b.n	18fc0 <fault_handle+0x20>
		reason = usage_fault(esf);
   18fd2:	f7ec fc1b 	bl	580c <usage_fault>
		break;
   18fd6:	e7f3      	b.n	18fc0 <fault_handle+0x20>
		debug_monitor(esf, recoverable);
   18fd8:	4611      	mov	r1, r2
   18fda:	f7ec fe7f 	bl	5cdc <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   18fde:	2000      	movs	r0, #0
		break;
   18fe0:	e7ee      	b.n	18fc0 <fault_handle+0x20>
		reserved_exception(esf, fault);
   18fe2:	f7ec feab 	bl	5d3c <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   18fe6:	2000      	movs	r0, #0
	return reason;
   18fe8:	e7ea      	b.n	18fc0 <fault_handle+0x20>

00018fea <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
   18fea:	6843      	ldr	r3, [r0, #4]
   18fec:	1e5a      	subs	r2, r3, #1
		&&
   18fee:	4213      	tst	r3, r2
   18ff0:	d106      	bne.n	19000 <mpu_partition_is_valid+0x16>
		&&
   18ff2:	2b1f      	cmp	r3, #31
   18ff4:	d906      	bls.n	19004 <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
   18ff6:	6803      	ldr	r3, [r0, #0]
		&&
   18ff8:	421a      	tst	r2, r3
   18ffa:	d005      	beq.n	19008 <mpu_partition_is_valid+0x1e>
   18ffc:	2000      	movs	r0, #0
   18ffe:	4770      	bx	lr
   19000:	2000      	movs	r0, #0
   19002:	4770      	bx	lr
   19004:	2000      	movs	r0, #0
   19006:	4770      	bx	lr
   19008:	2001      	movs	r0, #1
}
   1900a:	4770      	bx	lr

0001900c <mpu_configure_region>:
{
   1900c:	b500      	push	{lr}
   1900e:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   19010:	680b      	ldr	r3, [r1, #0]
   19012:	9301      	str	r3, [sp, #4]
		&new_region->attr, new_region->start, new_region->size);
   19014:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   19016:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
   19018:	2b20      	cmp	r3, #32
   1901a:	d912      	bls.n	19042 <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
   1901c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   19020:	d811      	bhi.n	19046 <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   19022:	3b01      	subs	r3, #1
   19024:	fab3 f383 	clz	r3, r3
   19028:	f1c3 031f 	rsb	r3, r3, #31
   1902c:	005b      	lsls	r3, r3, #1
   1902e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   19032:	4313      	orrs	r3, r2
   19034:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
   19036:	a901      	add	r1, sp, #4
   19038:	f7ed f802 	bl	6040 <region_allocate_and_init>
}
   1903c:	b005      	add	sp, #20
   1903e:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
   19042:	2308      	movs	r3, #8
   19044:	e7f5      	b.n	19032 <mpu_configure_region+0x26>
		return REGION_4G;
   19046:	233e      	movs	r3, #62	; 0x3e
   19048:	e7f3      	b.n	19032 <mpu_configure_region+0x26>

0001904a <arm_core_mpu_configure_static_mpu_regions>:
{
   1904a:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   1904c:	f7ed f8b2 	bl	61b4 <mpu_configure_static_mpu_regions>
}
   19050:	bd08      	pop	{r3, pc}

00019052 <malloc_prepare>:
}
   19052:	2000      	movs	r0, #0
   19054:	4770      	bx	lr

00019056 <_stdout_hook_default>:
}
   19056:	f04f 30ff 	mov.w	r0, #4294967295
   1905a:	4770      	bx	lr

0001905c <_stdin_hook_default>:
}
   1905c:	2000      	movs	r0, #0
   1905e:	4770      	bx	lr

00019060 <_read>:
{
   19060:	b508      	push	{r3, lr}
   19062:	4608      	mov	r0, r1
   19064:	4611      	mov	r1, r2
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_READ_STDIN);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_read_stdin(buf, nbytes);
   19066:	f7ed f8ed 	bl	6244 <z_impl_zephyr_read_stdin>
}
   1906a:	bd08      	pop	{r3, pc}

0001906c <_write>:
{
   1906c:	b508      	push	{r3, lr}
   1906e:	4608      	mov	r0, r1
   19070:	4611      	mov	r1, r2
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
   19072:	f7ed f8fd 	bl	6270 <z_impl_zephyr_write_stdout>
}
   19076:	bd08      	pop	{r3, pc}

00019078 <_close>:
}
   19078:	f04f 30ff 	mov.w	r0, #4294967295
   1907c:	4770      	bx	lr

0001907e <_lseek>:
}
   1907e:	2000      	movs	r0, #0
   19080:	4770      	bx	lr

00019082 <_isatty>:
}
   19082:	2802      	cmp	r0, #2
   19084:	bfcc      	ite	gt
   19086:	2000      	movgt	r0, #0
   19088:	2001      	movle	r0, #1
   1908a:	4770      	bx	lr

0001908c <_kill>:
}
   1908c:	2000      	movs	r0, #0
   1908e:	4770      	bx	lr

00019090 <_getpid>:
}
   19090:	2000      	movs	r0, #0
   19092:	4770      	bx	lr

00019094 <_fstat>:
	st->st_mode = S_IFCHR;
   19094:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   19098:	604b      	str	r3, [r1, #4]
}
   1909a:	2000      	movs	r0, #0
   1909c:	4770      	bx	lr

0001909e <__retarget_lock_init_recursive>:
{
   1909e:	b510      	push	{r4, lr}
   190a0:	4604      	mov	r4, r0
	*lock = malloc(sizeof(struct k_mutex));
   190a2:	2014      	movs	r0, #20
   190a4:	f7f9 f9b4 	bl	12410 <malloc>
   190a8:	6020      	str	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   190aa:	f005 ffc0 	bl	1f02e <z_impl_k_mutex_init>
}
   190ae:	bd10      	pop	{r4, pc}

000190b0 <__retarget_lock_acquire_recursive>:
{
   190b0:	b508      	push	{r3, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   190b2:	f04f 32ff 	mov.w	r2, #4294967295
   190b6:	f04f 33ff 	mov.w	r3, #4294967295
   190ba:	f7f7 ffa9 	bl	11010 <z_impl_k_mutex_lock>
}
   190be:	bd08      	pop	{r3, pc}

000190c0 <__retarget_lock_release_recursive>:
{
   190c0:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   190c2:	f7f8 f829 	bl	11118 <z_impl_k_mutex_unlock>
}
   190c6:	bd08      	pop	{r3, pc}

000190c8 <__errno>:
{
   190c8:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   190ca:	f7f7 fc03 	bl	108d4 <z_impl_z_errno>
}
   190ce:	bd08      	pop	{r3, pc}

000190d0 <nrf_power_system_off>:
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   190d0:	2301      	movs	r3, #1
   190d2:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   190d6:	f3bf 8f4f 	dsb	sy
        __WFE();
   190da:	bf20      	wfe
    while (true)
   190dc:	e7fd      	b.n	190da <nrf_power_system_off+0xa>

000190de <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   190de:	2806      	cmp	r0, #6
   190e0:	d000      	beq.n	190e4 <pm_state_set+0x6>
   190e2:	4770      	bx	lr
{
   190e4:	b508      	push	{r3, lr}
	case PM_STATE_SOFT_OFF:
		nrf_power_system_off(NRF_POWER);
   190e6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   190ea:	f7ff fff1 	bl	190d0 <nrf_power_system_off>

000190ee <pm_state_exit_post_ops>:
   190ee:	2300      	movs	r3, #0
   190f0:	f383 8811 	msr	BASEPRI, r3
   190f4:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   190f8:	4770      	bx	lr

000190fa <pool_get_uninit>:
	return offset / struct_size;
}

static inline struct net_buf *pool_get_uninit(struct net_buf_pool *pool,
					      uint16_t uninit_count)
{
   190fa:	b538      	push	{r3, r4, r5, lr}
   190fc:	4604      	mov	r4, r0
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   190fe:	7f03      	ldrb	r3, [r0, #28]
   19100:	3317      	adds	r3, #23
   19102:	f023 0303 	bic.w	r3, r3, #3
				__alignof__(struct net_buf));
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   19106:	8b02      	ldrh	r2, [r0, #24]
   19108:	1a52      	subs	r2, r2, r1
	struct net_buf *buf;

	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1910a:	6a85      	ldr	r5, [r0, #40]	; 0x28
   1910c:	fb03 5502 	mla	r5, r3, r2, r5

	buf->pool_id = pool_id(pool);
   19110:	f7ed fa32 	bl	6578 <pool_id>
   19114:	71a8      	strb	r0, [r5, #6]
	buf->user_data_size = pool->user_data_size;
   19116:	7f23      	ldrb	r3, [r4, #28]
   19118:	71eb      	strb	r3, [r5, #7]

	return buf;
}
   1911a:	4628      	mov	r0, r5
   1911c:	bd38      	pop	{r3, r4, r5, pc}

0001911e <fixed_data_unref>:
}

static void fixed_data_unref(struct net_buf *buf, uint8_t *data)
{
	/* Nothing needed for fixed-size data pools */
}
   1911e:	4770      	bx	lr

00019120 <data_alloc>:
};

#endif /* CONFIG_HEAP_MEM_POOL_SIZE > 0 */

static uint8_t *data_alloc(struct net_buf *buf, size_t *size, k_timeout_t timeout)
{
   19120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19124:	4604      	mov	r4, r0
   19126:	460d      	mov	r5, r1
   19128:	4617      	mov	r7, r2
   1912a:	461e      	mov	r6, r3
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1912c:	7980      	ldrb	r0, [r0, #6]
   1912e:	f7ed fa2f 	bl	6590 <net_buf_pool_get>

	return pool->alloc->cb->alloc(buf, size, timeout);
   19132:	6a43      	ldr	r3, [r0, #36]	; 0x24
   19134:	681b      	ldr	r3, [r3, #0]
   19136:	f8d3 8000 	ldr.w	r8, [r3]
   1913a:	463a      	mov	r2, r7
   1913c:	4633      	mov	r3, r6
   1913e:	4629      	mov	r1, r5
   19140:	4620      	mov	r0, r4
   19142:	47c0      	blx	r8
}
   19144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019148 <net_buf_destroy>:
{
   19148:	b510      	push	{r4, lr}
   1914a:	4604      	mov	r4, r0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1914c:	7980      	ldrb	r0, [r0, #6]
   1914e:	f7ed fa1f 	bl	6590 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   19152:	4621      	mov	r1, r4
   19154:	f006 f839 	bl	1f1ca <k_queue_prepend>
}
   19158:	bd10      	pop	{r4, pc}

0001915a <data_unref>:

	return pool->alloc->cb->ref(buf, data);
}

static void data_unref(struct net_buf *buf, uint8_t *data)
{
   1915a:	b538      	push	{r3, r4, r5, lr}
   1915c:	4604      	mov	r4, r0
   1915e:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   19160:	7980      	ldrb	r0, [r0, #6]
   19162:	f7ed fa15 	bl	6590 <net_buf_pool_get>

	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   19166:	7963      	ldrb	r3, [r4, #5]
   19168:	f013 0f02 	tst.w	r3, #2
   1916c:	d105      	bne.n	1917a <data_unref+0x20>
		return;
	}

	pool->alloc->cb->unref(buf, data);
   1916e:	6a43      	ldr	r3, [r0, #36]	; 0x24
   19170:	681b      	ldr	r3, [r3, #0]
   19172:	689b      	ldr	r3, [r3, #8]
   19174:	4629      	mov	r1, r5
   19176:	4620      	mov	r0, r4
   19178:	4798      	blx	r3
}
   1917a:	bd38      	pop	{r3, r4, r5, pc}

0001917c <net_buf_id>:
{
   1917c:	b510      	push	{r4, lr}
   1917e:	4604      	mov	r4, r0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   19180:	7980      	ldrb	r0, [r0, #6]
   19182:	f7ed fa05 	bl	6590 <net_buf_pool_get>
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   19186:	7f03      	ldrb	r3, [r0, #28]
   19188:	3317      	adds	r3, #23
   1918a:	f023 0303 	bic.w	r3, r3, #3
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1918e:	6a82      	ldr	r2, [r0, #40]	; 0x28
   19190:	1aa4      	subs	r4, r4, r2
}
   19192:	fbb4 f0f3 	udiv	r0, r4, r3
   19196:	bd10      	pop	{r4, pc}

00019198 <fixed_data_alloc>:
{
   19198:	b570      	push	{r4, r5, r6, lr}
   1919a:	4604      	mov	r4, r0
   1919c:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1919e:	7980      	ldrb	r0, [r0, #6]
   191a0:	f7ed f9f6 	bl	6590 <net_buf_pool_get>
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   191a4:	6a43      	ldr	r3, [r0, #36]	; 0x24
   191a6:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   191a8:	682a      	ldr	r2, [r5, #0]
   191aa:	6819      	ldr	r1, [r3, #0]
   191ac:	428a      	cmp	r2, r1
   191ae:	bf28      	it	cs
   191b0:	460a      	movcs	r2, r1
   191b2:	602a      	str	r2, [r5, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   191b4:	685d      	ldr	r5, [r3, #4]
   191b6:	681e      	ldr	r6, [r3, #0]
   191b8:	4620      	mov	r0, r4
   191ba:	f7ff ffdf 	bl	1917c <net_buf_id>
}
   191be:	fb00 5006 	mla	r0, r0, r6, r5
   191c2:	bd70      	pop	{r4, r5, r6, pc}

000191c4 <net_buf_reset>:
	buf->len  = 0U;
   191c4:	2300      	movs	r3, #0
   191c6:	8183      	strh	r3, [r0, #12]
	buf->data = buf->__buf;
   191c8:	6903      	ldr	r3, [r0, #16]
   191ca:	6083      	str	r3, [r0, #8]
}
   191cc:	4770      	bx	lr

000191ce <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   191ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   191d2:	b082      	sub	sp, #8
   191d4:	4605      	mov	r5, r0
   191d6:	9101      	str	r1, [sp, #4]
   191d8:	4616      	mov	r6, r2
   191da:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   191dc:	4610      	mov	r0, r2
   191de:	4619      	mov	r1, r3
   191e0:	f006 fbba 	bl	1f958 <sys_clock_timeout_end_calc>
   191e4:	4681      	mov	r9, r0
   191e6:	468a      	mov	sl, r1
	__asm__ volatile(
   191e8:	f04f 0220 	mov.w	r2, #32
   191ec:	f3ef 8311 	mrs	r3, BASEPRI
   191f0:	f382 8812 	msr	BASEPRI_MAX, r2
   191f4:	f3bf 8f6f 	isb	sy
   191f8:	461a      	mov	r2, r3
   191fa:	4698      	mov	r8, r3
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   191fc:	8b6b      	ldrh	r3, [r5, #26]
   191fe:	b393      	cbz	r3, 19266 <net_buf_alloc_len+0x98>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   19200:	8b2a      	ldrh	r2, [r5, #24]
   19202:	4293      	cmp	r3, r2
   19204:	d20b      	bcs.n	1921e <net_buf_alloc_len+0x50>
	return z_impl_k_queue_get(queue, timeout);
   19206:	2200      	movs	r2, #0
   19208:	2300      	movs	r3, #0
   1920a:	4628      	mov	r0, r5
   1920c:	f7f7 ffc2 	bl	11194 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   19210:	4604      	mov	r4, r0
   19212:	b120      	cbz	r0, 1921e <net_buf_alloc_len+0x50>
	__asm__ volatile(
   19214:	f388 8811 	msr	BASEPRI, r8
   19218:	f3bf 8f6f 	isb	sy
				k_spin_unlock(&pool->lock, key);
				goto success;
   1921c:	e00a      	b.n	19234 <net_buf_alloc_len+0x66>
			}
		}

		uninit_count = pool->uninit_count--;
   1921e:	8b69      	ldrh	r1, [r5, #26]
   19220:	1e4b      	subs	r3, r1, #1
   19222:	836b      	strh	r3, [r5, #26]
   19224:	f388 8811 	msr	BASEPRI, r8
   19228:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&pool->lock, key);

		buf = pool_get_uninit(pool, uninit_count);
   1922c:	4628      	mov	r0, r5
   1922e:	f7ff ff64 	bl	190fa <pool_get_uninit>
   19232:	4604      	mov	r4, r0
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   19234:	9b01      	ldr	r3, [sp, #4]
   19236:	b3a3      	cbz	r3, 192a2 <net_buf_alloc_len+0xd4>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   19238:	ea56 0307 	orrs.w	r3, r6, r7
   1923c:	d005      	beq.n	1924a <net_buf_alloc_len+0x7c>
   1923e:	f1b7 3fff 	cmp.w	r7, #4294967295
   19242:	bf08      	it	eq
   19244:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   19248:	d11a      	bne.n	19280 <net_buf_alloc_len+0xb2>
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1924a:	4632      	mov	r2, r6
   1924c:	463b      	mov	r3, r7
   1924e:	a901      	add	r1, sp, #4
   19250:	4620      	mov	r0, r4
   19252:	f7ff ff65 	bl	19120 <data_alloc>
   19256:	4605      	mov	r5, r0
   19258:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1925a:	bb20      	cbnz	r0, 192a6 <net_buf_alloc_len+0xd8>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
   1925c:	4620      	mov	r0, r4
   1925e:	f7ff ff73 	bl	19148 <net_buf_destroy>
			return NULL;
   19262:	462c      	mov	r4, r5
   19264:	e029      	b.n	192ba <net_buf_alloc_len+0xec>
   19266:	f382 8811 	msr	BASEPRI, r2
   1926a:	f3bf 8f6f 	isb	sy
   1926e:	4632      	mov	r2, r6
   19270:	463b      	mov	r3, r7
   19272:	4628      	mov	r0, r5
   19274:	f7f7 ff8e 	bl	11194 <z_impl_k_queue_get>
	if (!buf) {
   19278:	4604      	mov	r4, r0
   1927a:	2800      	cmp	r0, #0
   1927c:	d1da      	bne.n	19234 <net_buf_alloc_len+0x66>
   1927e:	e01c      	b.n	192ba <net_buf_alloc_len+0xec>
			int64_t remaining = end - sys_clock_tick_get();
   19280:	f7f8 ff1a 	bl	120b8 <sys_clock_tick_get>
   19284:	ebb9 0900 	subs.w	r9, r9, r0
   19288:	eb6a 0a01 	sbc.w	sl, sl, r1
			if (remaining <= 0) {
   1928c:	f1b9 0f01 	cmp.w	r9, #1
   19290:	f17a 0300 	sbcs.w	r3, sl, #0
   19294:	db02      	blt.n	1929c <net_buf_alloc_len+0xce>
				timeout = Z_TIMEOUT_TICKS(remaining);
   19296:	464e      	mov	r6, r9
   19298:	4657      	mov	r7, sl
   1929a:	e7d6      	b.n	1924a <net_buf_alloc_len+0x7c>
				timeout = K_NO_WAIT;
   1929c:	2600      	movs	r6, #0
   1929e:	4637      	mov	r7, r6
   192a0:	e7d3      	b.n	1924a <net_buf_alloc_len+0x7c>

#if __ASSERT_ON
		NET_BUF_ASSERT(req_size <= size);
#endif
	} else {
		buf->__buf = NULL;
   192a2:	2300      	movs	r3, #0
   192a4:	6123      	str	r3, [r4, #16]
	}

	buf->ref   = 1U;
   192a6:	2301      	movs	r3, #1
   192a8:	7123      	strb	r3, [r4, #4]
	buf->flags = 0U;
   192aa:	2300      	movs	r3, #0
   192ac:	7163      	strb	r3, [r4, #5]
	buf->frags = NULL;
   192ae:	6023      	str	r3, [r4, #0]
	buf->size  = size;
   192b0:	9b01      	ldr	r3, [sp, #4]
   192b2:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
   192b4:	4620      	mov	r0, r4
   192b6:	f7ff ff85 	bl	191c4 <net_buf_reset>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   192ba:	4620      	mov	r0, r4
   192bc:	b002      	add	sp, #8
   192be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000192c2 <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool,
				    k_timeout_t timeout)
{
   192c2:	b508      	push	{r3, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   192c4:	6a41      	ldr	r1, [r0, #36]	; 0x24
   192c6:	6849      	ldr	r1, [r1, #4]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   192c8:	6809      	ldr	r1, [r1, #0]
   192ca:	f7ff ff80 	bl	191ce <net_buf_alloc_len>
}
   192ce:	bd08      	pop	{r3, pc}

000192d0 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   192d0:	b538      	push	{r3, r4, r5, lr}
   192d2:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf);

	while (buf) {
   192d4:	e00a      	b.n	192ec <net_buf_unref+0x1c>
		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
		}

		buf->data = NULL;
   192d6:	2300      	movs	r3, #0
   192d8:	60a3      	str	r3, [r4, #8]
		buf->frags = NULL;
   192da:	6023      	str	r3, [r4, #0]

		pool = net_buf_pool_get(buf->pool_id);
   192dc:	79a0      	ldrb	r0, [r4, #6]
   192de:	f7ed f957 	bl	6590 <net_buf_pool_get>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   192e2:	6a03      	ldr	r3, [r0, #32]
   192e4:	b193      	cbz	r3, 1930c <net_buf_unref+0x3c>
			pool->destroy(buf);
   192e6:	4620      	mov	r0, r4
   192e8:	4798      	blx	r3
{
   192ea:	462c      	mov	r4, r5
	while (buf) {
   192ec:	b194      	cbz	r4, 19314 <net_buf_unref+0x44>
		struct net_buf *frags = buf->frags;
   192ee:	6825      	ldr	r5, [r4, #0]
		if (--buf->ref > 0) {
   192f0:	7923      	ldrb	r3, [r4, #4]
   192f2:	3b01      	subs	r3, #1
   192f4:	b2db      	uxtb	r3, r3
   192f6:	7123      	strb	r3, [r4, #4]
   192f8:	b963      	cbnz	r3, 19314 <net_buf_unref+0x44>
		if (buf->__buf) {
   192fa:	6921      	ldr	r1, [r4, #16]
   192fc:	2900      	cmp	r1, #0
   192fe:	d0ea      	beq.n	192d6 <net_buf_unref+0x6>
			data_unref(buf, buf->__buf);
   19300:	4620      	mov	r0, r4
   19302:	f7ff ff2a 	bl	1915a <data_unref>
			buf->__buf = NULL;
   19306:	2300      	movs	r3, #0
   19308:	6123      	str	r3, [r4, #16]
   1930a:	e7e4      	b.n	192d6 <net_buf_unref+0x6>
		} else {
			net_buf_destroy(buf);
   1930c:	4620      	mov	r0, r4
   1930e:	f7ff ff1b 	bl	19148 <net_buf_destroy>
   19312:	e7ea      	b.n	192ea <net_buf_unref+0x1a>
		}

		buf = frags;
	}
}
   19314:	bd38      	pop	{r3, r4, r5, pc}

00019316 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   19316:	7902      	ldrb	r2, [r0, #4]
   19318:	3201      	adds	r2, #1
   1931a:	7102      	strb	r2, [r0, #4]
	return buf;
}
   1931c:	4770      	bx	lr

0001931e <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1931e:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   19320:	4618      	mov	r0, r3
   19322:	681b      	ldr	r3, [r3, #0]
   19324:	2b00      	cmp	r3, #0
   19326:	d1fb      	bne.n	19320 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   19328:	4770      	bx	lr

0001932a <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   1932a:	b570      	push	{r4, r5, r6, lr}
   1932c:	4604      	mov	r4, r0
   1932e:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   19330:	6806      	ldr	r6, [r0, #0]
   19332:	b11e      	cbz	r6, 1933c <net_buf_frag_insert+0x12>
		net_buf_frag_last(frag)->frags = parent->frags;
   19334:	4608      	mov	r0, r1
   19336:	f7ff fff2 	bl	1931e <net_buf_frag_last>
   1933a:	6006      	str	r6, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1933c:	6025      	str	r5, [r4, #0]
}
   1933e:	bd70      	pop	{r4, r5, r6, pc}

00019340 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   19340:	b538      	push	{r3, r4, r5, lr}
   19342:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(frag);

	if (!head) {
   19344:	b138      	cbz	r0, 19356 <net_buf_frag_add+0x16>
   19346:	4604      	mov	r4, r0
		return net_buf_ref(frag);
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);
   19348:	f7ff ffe9 	bl	1931e <net_buf_frag_last>
   1934c:	4629      	mov	r1, r5
   1934e:	f7ff ffec 	bl	1932a <net_buf_frag_insert>

	return head;
   19352:	4620      	mov	r0, r4
}
   19354:	bd38      	pop	{r3, r4, r5, pc}
		return net_buf_ref(frag);
   19356:	4608      	mov	r0, r1
   19358:	f7ff ffdd 	bl	19316 <net_buf_ref>
   1935c:	e7fa      	b.n	19354 <net_buf_frag_add+0x14>

0001935e <net_buf_frag_del>:
				       struct net_buf *frag,
				       const char *func, int line)
#else
struct net_buf *net_buf_frag_del(struct net_buf *parent, struct net_buf *frag)
#endif
{
   1935e:	b510      	push	{r4, lr}
	struct net_buf *next_frag;

	__ASSERT_NO_MSG(frag);

	if (parent) {
   19360:	b108      	cbz	r0, 19366 <net_buf_frag_del+0x8>
		__ASSERT_NO_MSG(parent->frags);
		__ASSERT_NO_MSG(parent->frags == frag);
		parent->frags = frag->frags;
   19362:	680a      	ldr	r2, [r1, #0]
   19364:	6002      	str	r2, [r0, #0]
	}

	next_frag = frag->frags;
   19366:	680c      	ldr	r4, [r1, #0]

	frag->frags = NULL;
   19368:	2300      	movs	r3, #0
   1936a:	600b      	str	r3, [r1, #0]

#if defined(CONFIG_NET_BUF_LOG)
	net_buf_unref_debug(frag, func, line);
#else
	net_buf_unref(frag);
   1936c:	4608      	mov	r0, r1
   1936e:	f7ff ffaf 	bl	192d0 <net_buf_unref>
#endif

	return next_frag;
}
   19372:	4620      	mov	r0, r4
   19374:	bd10      	pop	{r4, pc}

00019376 <net_buf_linearize>:

size_t net_buf_linearize(void *dst, size_t dst_len, struct net_buf *src,
			 size_t offset, size_t len)
{
   19376:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1937a:	4607      	mov	r7, r0
   1937c:	4614      	mov	r4, r2
	struct net_buf *frag;
	size_t to_copy;
	size_t copied;

	len = MIN(len, dst_len);
   1937e:	9a06      	ldr	r2, [sp, #24]
   19380:	4291      	cmp	r1, r2
   19382:	bf28      	it	cs
   19384:	4611      	movcs	r1, r2
   19386:	460e      	mov	r6, r1

	frag = src;

	/* find the right fragment to start copying from */
	while (frag && offset >= frag->len) {
   19388:	e001      	b.n	1938e <net_buf_linearize+0x18>
		offset -= frag->len;
   1938a:	1a9b      	subs	r3, r3, r2
		frag = frag->frags;
   1938c:	6824      	ldr	r4, [r4, #0]
	while (frag && offset >= frag->len) {
   1938e:	b1dc      	cbz	r4, 193c8 <net_buf_linearize+0x52>
   19390:	89a2      	ldrh	r2, [r4, #12]
   19392:	429a      	cmp	r2, r3
   19394:	d9f9      	bls.n	1938a <net_buf_linearize+0x14>
   19396:	f04f 0800 	mov.w	r8, #0
   1939a:	e00f      	b.n	193bc <net_buf_linearize+0x46>
	}

	/* traverse the fragment chain until len bytes are copied */
	copied = 0;
	while (frag && len > 0) {
		to_copy = MIN(len, frag->len - offset);
   1939c:	89a5      	ldrh	r5, [r4, #12]
   1939e:	1aed      	subs	r5, r5, r3
   193a0:	42b5      	cmp	r5, r6
   193a2:	bf28      	it	cs
   193a4:	4635      	movcs	r5, r6
		memcpy((uint8_t *)dst + copied, frag->data + offset, to_copy);
   193a6:	68a1      	ldr	r1, [r4, #8]
   193a8:	462a      	mov	r2, r5
   193aa:	4419      	add	r1, r3
   193ac:	eb07 0008 	add.w	r0, r7, r8
   193b0:	f006 fd07 	bl	1fdc2 <memcpy>

		copied += to_copy;
   193b4:	44a8      	add	r8, r5

		/* to_copy is always <= len */
		len -= to_copy;
   193b6:	1b76      	subs	r6, r6, r5
		frag = frag->frags;
   193b8:	6824      	ldr	r4, [r4, #0]

		/* after the first iteration, this value will be 0 */
		offset = 0;
   193ba:	2300      	movs	r3, #0
	while (frag && len > 0) {
   193bc:	b10c      	cbz	r4, 193c2 <net_buf_linearize+0x4c>
   193be:	2e00      	cmp	r6, #0
   193c0:	d1ec      	bne.n	1939c <net_buf_linearize+0x26>
	}

	return copied;
}
   193c2:	4640      	mov	r0, r8
   193c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   193c8:	f04f 0800 	mov.w	r8, #0
   193cc:	e7f6      	b.n	193bc <net_buf_linearize+0x46>

000193ce <net_buf_simple_add>:
	return buf->data + buf->len;
   193ce:	6802      	ldr	r2, [r0, #0]
   193d0:	8883      	ldrh	r3, [r0, #4]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   193d2:	4419      	add	r1, r3
   193d4:	8081      	strh	r1, [r0, #4]
	return tail;
}
   193d6:	18d0      	adds	r0, r2, r3
   193d8:	4770      	bx	lr

000193da <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   193da:	b538      	push	{r3, r4, r5, lr}
   193dc:	460d      	mov	r5, r1
   193de:	4614      	mov	r4, r2
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   193e0:	4611      	mov	r1, r2
   193e2:	f7ff fff4 	bl	193ce <net_buf_simple_add>
   193e6:	4622      	mov	r2, r4
   193e8:	4629      	mov	r1, r5
   193ea:	f006 fcea 	bl	1fdc2 <memcpy>
}
   193ee:	bd38      	pop	{r3, r4, r5, pc}

000193f0 <net_buf_simple_pull>:

	sys_put_be64(val, net_buf_simple_push(buf, sizeof(val)));
}

void *net_buf_simple_pull(struct net_buf_simple *buf, size_t len)
{
   193f0:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   193f2:	8882      	ldrh	r2, [r0, #4]
   193f4:	1a52      	subs	r2, r2, r1
   193f6:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   193f8:	6800      	ldr	r0, [r0, #0]
   193fa:	4408      	add	r0, r1
   193fc:	6018      	str	r0, [r3, #0]
}
   193fe:	4770      	bx	lr

00019400 <net_buf_simple_pull_u8>:

	return data;
}

uint8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   19400:	b510      	push	{r4, lr}
	uint8_t val;

	val = buf->data[0];
   19402:	6803      	ldr	r3, [r0, #0]
   19404:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   19406:	2101      	movs	r1, #1
   19408:	f7ff fff2 	bl	193f0 <net_buf_simple_pull>

	return val;
}
   1940c:	4620      	mov	r0, r4
   1940e:	bd10      	pop	{r4, pc}

00019410 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   19410:	6802      	ldr	r2, [r0, #0]
   19412:	6880      	ldr	r0, [r0, #8]
}
   19414:	1a10      	subs	r0, r2, r0
   19416:	4770      	bx	lr

00019418 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
   19418:	b538      	push	{r3, r4, r5, lr}
   1941a:	4604      	mov	r4, r0
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1941c:	88c5      	ldrh	r5, [r0, #6]
   1941e:	f7ff fff7 	bl	19410 <net_buf_simple_headroom>
   19422:	1a2d      	subs	r5, r5, r0
   19424:	88a0      	ldrh	r0, [r4, #4]
}
   19426:	1a28      	subs	r0, r5, r0
   19428:	bd38      	pop	{r3, r4, r5, pc}

0001942a <net_buf_append_bytes>:
{
   1942a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1942e:	4682      	mov	sl, r0
   19430:	460e      	mov	r6, r1
   19432:	4617      	mov	r7, r2
   19434:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
   19438:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
	struct net_buf *frag = net_buf_frag_last(buf);
   1943c:	f7ff ff6f 	bl	1931e <net_buf_frag_last>
   19440:	4605      	mov	r5, r0
	size_t added_len = 0;
   19442:	f04f 0800 	mov.w	r8, #0
   19446:	e016      	b.n	19476 <net_buf_append_bytes+0x4c>
		uint16_t count = MIN(len, net_buf_tailroom(frag));
   19448:	b284      	uxth	r4, r0
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1944a:	4622      	mov	r2, r4
   1944c:	4639      	mov	r1, r7
   1944e:	4628      	mov	r0, r5
   19450:	f7ff ffc3 	bl	193da <net_buf_simple_add_mem>
		added_len += count;
   19454:	44a0      	add	r8, r4
		value8 += count;
   19456:	4427      	add	r7, r4
		if (len == 0) {
   19458:	1b36      	subs	r6, r6, r4
   1945a:	d01f      	beq.n	1949c <net_buf_append_bytes+0x72>
		if (allocate_cb) {
   1945c:	f1b9 0f00 	cmp.w	r9, #0
   19460:	d011      	beq.n	19486 <net_buf_append_bytes+0x5c>
			frag = allocate_cb(timeout, user_data);
   19462:	465a      	mov	r2, fp
   19464:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   19468:	47c8      	blx	r9
   1946a:	4605      	mov	r5, r0
		if (!frag) {
   1946c:	b1b5      	cbz	r5, 1949c <net_buf_append_bytes+0x72>
		net_buf_frag_add(buf, frag);
   1946e:	4629      	mov	r1, r5
   19470:	4650      	mov	r0, sl
   19472:	f7ff ff65 	bl	19340 <net_buf_frag_add>
	return net_buf_simple_tailroom(&buf->b);
   19476:	3508      	adds	r5, #8
   19478:	4628      	mov	r0, r5
   1947a:	f7ff ffcd 	bl	19418 <net_buf_simple_tailroom>
		uint16_t count = MIN(len, net_buf_tailroom(frag));
   1947e:	4286      	cmp	r6, r0
   19480:	d2e2      	bcs.n	19448 <net_buf_append_bytes+0x1e>
   19482:	b2b4      	uxth	r4, r6
   19484:	e7e1      	b.n	1944a <net_buf_append_bytes+0x20>
			pool = net_buf_pool_get(buf->pool_id);
   19486:	f89a 0006 	ldrb.w	r0, [sl, #6]
   1948a:	f7ed f881 	bl	6590 <net_buf_pool_get>
			frag = net_buf_alloc_len(pool, len, timeout);
   1948e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   19492:	4631      	mov	r1, r6
   19494:	f7ff fe9b 	bl	191ce <net_buf_alloc_len>
   19498:	4605      	mov	r5, r0
   1949a:	e7e7      	b.n	1946c <net_buf_append_bytes+0x42>
}
   1949c:	4640      	mov	r0, r8
   1949e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000194a2 <net_buf_simple_max_len>:

uint16_t net_buf_simple_max_len(struct net_buf_simple *buf)
{
   194a2:	b510      	push	{r4, lr}
	return buf->size - net_buf_simple_headroom(buf);
   194a4:	88c4      	ldrh	r4, [r0, #6]
   194a6:	f7ff ffb3 	bl	19410 <net_buf_simple_headroom>
   194aa:	1a20      	subs	r0, r4, r0
}
   194ac:	b280      	uxth	r0, r0
   194ae:	bd10      	pop	{r4, pc}

000194b0 <net_ipv4_is_addr_bcast>:
{
   194b0:	b538      	push	{r3, r4, r5, lr}
   194b2:	4605      	mov	r5, r0
   194b4:	460c      	mov	r4, r1
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
   194b6:	f7ed ff83 	bl	73c0 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   194ba:	6822      	ldr	r2, [r4, #0]
   194bc:	6803      	ldr	r3, [r0, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
   194be:	429a      	cmp	r2, r3
   194c0:	d004      	beq.n	194cc <net_ipv4_is_addr_bcast+0x1c>
	return net_if_ipv4_is_addr_bcast(iface, addr);
   194c2:	4621      	mov	r1, r4
   194c4:	4628      	mov	r0, r5
   194c6:	f7ed fabd 	bl	6a44 <net_if_ipv4_is_addr_bcast>
}
   194ca:	bd38      	pop	{r3, r4, r5, pc}
		return true;
   194cc:	2001      	movs	r0, #1
   194ce:	e7fc      	b.n	194ca <net_ipv4_is_addr_bcast+0x1a>

000194d0 <net_ipv4_is_my_addr>:
{
   194d0:	b510      	push	{r4, lr}
   194d2:	4604      	mov	r4, r0
	ret = net_if_ipv4_addr_lookup(addr, NULL) != NULL;
   194d4:	2100      	movs	r1, #0
   194d6:	f7ed fb5d 	bl	6b94 <net_if_ipv4_addr_lookup>
   194da:	2800      	cmp	r0, #0
   194dc:	bf14      	ite	ne
   194de:	2001      	movne	r0, #1
   194e0:	2000      	moveq	r0, #0
	if (!ret) {
   194e2:	d000      	beq.n	194e6 <net_ipv4_is_my_addr+0x16>
}
   194e4:	bd10      	pop	{r4, pc}
		ret = net_ipv4_is_addr_bcast(NULL, addr);
   194e6:	4621      	mov	r1, r4
   194e8:	2000      	movs	r0, #0
   194ea:	f7ff ffe1 	bl	194b0 <net_ipv4_is_addr_bcast>
   194ee:	e7f9      	b.n	194e4 <net_ipv4_is_my_addr+0x14>

000194f0 <check_ip_addr>:
#if defined(CONFIG_NET_IP) && defined(CONFIG_NET_IP_ADDR_CHECK) && !defined(CONFIG_NET_LOOPBACK)
/* Check if the IPv{4|6} addresses are proper. As this can be expensive,
 * make this optional.
 */
static inline int check_ip_addr(struct net_pkt *pkt)
{
   194f0:	b538      	push	{r3, r4, r5, lr}
	return pkt->family;
   194f2:	f890 3037 	ldrb.w	r3, [r0, #55]	; 0x37
   194f6:	095b      	lsrs	r3, r3, #5
		if (net_ipv6_is_addr_loopback(
				(struct in6_addr *)NET_IPV6_HDR(pkt)->src)) {
			NET_DBG("IPv6 loopback src address");
			return -EADDRNOTAVAIL;
		}
	} else if (IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET) {
   194f8:	2b01      	cmp	r3, #1
   194fa:	d001      	beq.n	19500 <check_ip_addr+0x10>
			NET_DBG("IPv4 loopback src address");
			return -EADDRNOTAVAIL;
		}
	}

	return 0;
   194fc:	2000      	movs	r0, #0
}
   194fe:	bd38      	pop	{r3, r4, r5, pc}
   19500:	4604      	mov	r4, r0
	return pkt->frags->data;
   19502:	6883      	ldr	r3, [r0, #8]
   19504:	689d      	ldr	r5, [r3, #8]
		if (net_ipv4_addr_cmp((struct in_addr *)NET_IPV4_HDR(pkt)->dst,
   19506:	f7ed ff57 	bl	73b8 <net_ipv4_unspecified_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   1950a:	692a      	ldr	r2, [r5, #16]
   1950c:	6803      	ldr	r3, [r0, #0]
   1950e:	429a      	cmp	r2, r3
   19510:	d023      	beq.n	1955a <check_ip_addr+0x6a>
   19512:	68a3      	ldr	r3, [r4, #8]
   19514:	6899      	ldr	r1, [r3, #8]
	return addr->s4_addr[0] == 127U;
   19516:	7c0b      	ldrb	r3, [r1, #16]
		if (net_ipv4_is_addr_loopback((struct in_addr *)NET_IPV4_HDR(pkt)->dst) ||
   19518:	2b7f      	cmp	r3, #127	; 0x7f
   1951a:	d012      	beq.n	19542 <check_ip_addr+0x52>
		    (net_ipv4_is_addr_bcast(net_pkt_iface(pkt),
   1951c:	3110      	adds	r1, #16
   1951e:	69a0      	ldr	r0, [r4, #24]
   19520:	f7ff ffc6 	bl	194b0 <net_ipv4_is_addr_bcast>
		if (net_ipv4_is_addr_loopback((struct in_addr *)NET_IPV4_HDR(pkt)->dst) ||
   19524:	b130      	cbz	r0, 19534 <check_ip_addr+0x44>
   19526:	68a3      	ldr	r3, [r4, #8]
   19528:	689b      	ldr	r3, [r3, #8]
   1952a:	7b1b      	ldrb	r3, [r3, #12]
		if (net_ipv4_is_addr_loopback((struct in_addr *)NET_IPV4_HDR(pkt)->src)) {
   1952c:	2b7f      	cmp	r3, #127	; 0x7f
   1952e:	d017      	beq.n	19560 <check_ip_addr+0x70>
	return 0;
   19530:	2000      	movs	r0, #0
   19532:	e7e4      	b.n	194fe <check_ip_addr+0xe>
   19534:	68a3      	ldr	r3, [r4, #8]
   19536:	6898      	ldr	r0, [r3, #8]
		     net_ipv4_is_my_addr((struct in_addr *)NET_IPV4_HDR(pkt)->dst))) {
   19538:	3010      	adds	r0, #16
   1953a:	f7ff ffc9 	bl	194d0 <net_ipv4_is_my_addr>
				     (struct in_addr *)NET_IPV4_HDR(pkt)->dst) == false &&
   1953e:	2800      	cmp	r0, #0
   19540:	d0f1      	beq.n	19526 <check_ip_addr+0x36>
   19542:	68a3      	ldr	r3, [r4, #8]
   19544:	689b      	ldr	r3, [r3, #8]
	net_ipaddr_copy((struct in_addr *)dest, (const struct in_addr *)src);
   19546:	68da      	ldr	r2, [r3, #12]
   19548:	68a3      	ldr	r3, [r4, #8]
   1954a:	689b      	ldr	r3, [r3, #8]
   1954c:	6919      	ldr	r1, [r3, #16]
   1954e:	60d9      	str	r1, [r3, #12]
   19550:	68a3      	ldr	r3, [r4, #8]
   19552:	689b      	ldr	r3, [r3, #8]
   19554:	611a      	str	r2, [r3, #16]
			return 1;
   19556:	2001      	movs	r0, #1
   19558:	e7d1      	b.n	194fe <check_ip_addr+0xe>
			return -EADDRNOTAVAIL;
   1955a:	f06f 007c 	mvn.w	r0, #124	; 0x7c
   1955e:	e7ce      	b.n	194fe <check_ip_addr+0xe>
			return -EADDRNOTAVAIL;
   19560:	f06f 007c 	mvn.w	r0, #124	; 0x7c
   19564:	e7cb      	b.n	194fe <check_ip_addr+0xe>

00019566 <process_data>:
	pkt->l2_processed = is_l2_processed;
   19566:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   1956a:	f36f 1304 	bfc	r3, #4, #1
   1956e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	if (!pkt->frags) {
   19572:	6883      	ldr	r3, [r0, #8]
   19574:	b313      	cbz	r3, 195bc <process_data+0x56>
{
   19576:	b510      	push	{r4, lr}
   19578:	4604      	mov	r4, r0
	if (!is_loopback && !locally_routed) {
   1957a:	b929      	cbnz	r1, 19588 <process_data+0x22>
		ret = net_if_recv_data(net_pkt_iface(pkt), pkt);
   1957c:	4601      	mov	r1, r0
   1957e:	6980      	ldr	r0, [r0, #24]
   19580:	f000 fa87 	bl	19a92 <net_if_recv_data>
		if (ret != NET_CONTINUE) {
   19584:	2801      	cmp	r0, #1
   19586:	d114      	bne.n	195b2 <process_data+0x4c>
   19588:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1958c:	f043 0310 	orr.w	r3, r3, #16
   19590:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	net_pkt_cursor_init(pkt);
   19594:	4620      	mov	r0, r4
   19596:	f001 fe23 	bl	1b1e0 <net_pkt_cursor_init>
	return pkt->family;
   1959a:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
	if (IS_ENABLED(CONFIG_NET_IP) && (family == AF_INET || family == AF_INET6 ||
   1959e:	2b7f      	cmp	r3, #127	; 0x7f
   195a0:	d80e      	bhi.n	195c0 <process_data+0x5a>
	return pkt->frags->data;
   195a2:	68a3      	ldr	r3, [r4, #8]
   195a4:	689b      	ldr	r3, [r3, #8]
		uint8_t vtc_vhl = NET_IPV6_HDR(pkt)->vtc & 0xf0;
   195a6:	781b      	ldrb	r3, [r3, #0]
   195a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
		} else if (IS_ENABLED(CONFIG_NET_IPV4) && vtc_vhl == 0x40) {
   195ac:	2b40      	cmp	r3, #64	; 0x40
   195ae:	d001      	beq.n	195b4 <process_data+0x4e>
		return NET_DROP;
   195b0:	2002      	movs	r0, #2
}
   195b2:	bd10      	pop	{r4, pc}
			return net_ipv4_input(pkt);
   195b4:	4620      	mov	r0, r4
   195b6:	f002 fcb9 	bl	1bf2c <net_ipv4_input>
   195ba:	e7fa      	b.n	195b2 <process_data+0x4c>
		return NET_DROP;
   195bc:	2002      	movs	r0, #2
}
   195be:	4770      	bx	lr
	return NET_DROP;
   195c0:	2002      	movs	r0, #2
   195c2:	e7f6      	b.n	195b2 <process_data+0x4c>

000195c4 <processing_data>:
{
   195c4:	b510      	push	{r4, lr}
   195c6:	4604      	mov	r4, r0
	switch (process_data(pkt, is_loopback)) {
   195c8:	f7ff ffcd 	bl	19566 <process_data>
   195cc:	b120      	cbz	r0, 195d8 <processing_data+0x14>
   195ce:	2801      	cmp	r0, #1
   195d0:	d103      	bne.n	195da <processing_data+0x16>
			net_pkt_unref(pkt);
   195d2:	4620      	mov	r0, r4
   195d4:	f001 fd6c 	bl	1b0b0 <net_pkt_unref>
}
   195d8:	bd10      	pop	{r4, pc}
		net_pkt_unref(pkt);
   195da:	4620      	mov	r0, r4
   195dc:	f001 fd68 	bl	1b0b0 <net_pkt_unref>
}
   195e0:	e7fa      	b.n	195d8 <processing_data+0x14>

000195e2 <net_rx>:

	return 0;
}

static void net_rx(struct net_if *iface, struct net_pkt *pkt)
{
   195e2:	b508      	push	{r3, lr}
   195e4:	4608      	mov	r0, r1
	return net_buf_frags_len(pkt->frags);
   195e6:	688b      	ldr	r3, [r1, #8]
	while (buf) {
   195e8:	e000      	b.n	195ec <net_rx+0xa>
		buf = buf->frags;
   195ea:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   195ec:	2b00      	cmp	r3, #0
   195ee:	d1fc      	bne.n	195ea <net_rx+0x8>
			is_loopback = true;
		}
#endif
	}

	processing_data(pkt, is_loopback);
   195f0:	2100      	movs	r1, #0
   195f2:	f7ff ffe7 	bl	195c4 <processing_data>

	net_print_statistics();
	net_pkt_print();
}
   195f6:	bd08      	pop	{r3, pc}

000195f8 <l3_init>:

	return 0;
}

static inline void l3_init(void)
{
   195f8:	b508      	push	{r3, lr}
	net_icmpv4_init();
   195fa:	f7ee feaf 	bl	835c <net_icmpv4_init>
	net_icmpv6_init();
	net_ipv4_init();
   195fe:	f002 fd73 	bl	1c0e8 <net_ipv4_init>

	if (IS_ENABLED(CONFIG_NET_UDP) ||
	    IS_ENABLED(CONFIG_NET_TCP) ||
	    IS_ENABLED(CONFIG_NET_SOCKETS_PACKET) ||
	    IS_ENABLED(CONFIG_NET_SOCKETS_CAN)) {
		net_conn_init();
   19602:	f7ee fe2b 	bl	825c <net_conn_init>
	}

	net_tcp_init();
   19606:	f7f0 fcdf 	bl	9fc8 <net_tcp_init>

	net_route_init();

	NET_DBG("Network L3 init done");
}
   1960a:	bd08      	pop	{r3, pc}

0001960c <init_rx_queues>:
{
   1960c:	b508      	push	{r3, lr}
	net_if_init();
   1960e:	f7ed fd77 	bl	7100 <net_if_init>
	net_tc_rx_init();
   19612:	f7ee fa7b 	bl	7b0c <net_tc_rx_init>
	net_if_post_init();
   19616:	f7ed fd99 	bl	714c <net_if_post_init>
}
   1961a:	bd08      	pop	{r3, pc}

0001961c <net_init>:

	return status;
}

static int net_init(const struct device *unused)
{
   1961c:	b508      	push	{r3, lr}
	net_hostname_init();

	NET_DBG("Priority %d", CONFIG_NET_INIT_PRIO);

	net_pkt_init();
   1961e:	f002 f89b 	bl	1b758 <net_pkt_init>

	net_context_init();
   19622:	f7ee f96d 	bl	7900 <net_context_init>

	l3_init();
   19626:	f7ff ffe7 	bl	195f8 <l3_init>

	net_mgmt_event_init();
   1962a:	f7ee fc23 	bl	7e74 <net_mgmt_event_init>

	init_rx_queues();
   1962e:	f7ff ffed 	bl	1960c <init_rx_queues>
	dns_init_resolver();
   19632:	f003 fdd3 	bl	1d1dc <dns_init_resolver>

	return services_init();
}
   19636:	2000      	movs	r0, #0
   19638:	bd08      	pop	{r3, pc}

0001963a <net_send_data>:
	if (!pkt || !pkt->frags) {
   1963a:	b1f0      	cbz	r0, 1967a <net_send_data+0x40>
{
   1963c:	b510      	push	{r4, lr}
   1963e:	4604      	mov	r4, r0
	if (!pkt || !pkt->frags) {
   19640:	6883      	ldr	r3, [r0, #8]
   19642:	b1eb      	cbz	r3, 19680 <net_send_data+0x46>
	return pkt->iface;
   19644:	6983      	ldr	r3, [r0, #24]
	if (!net_pkt_iface(pkt)) {
   19646:	b1f3      	cbz	r3, 19686 <net_send_data+0x4c>
	net_pkt_trim_buffer(pkt);
   19648:	f001 fd8b 	bl	1b162 <net_pkt_trim_buffer>
	net_pkt_cursor_init(pkt);
   1964c:	4620      	mov	r0, r4
   1964e:	f001 fdc7 	bl	1b1e0 <net_pkt_cursor_init>
	status = check_ip_addr(pkt);
   19652:	4620      	mov	r0, r4
   19654:	f7ff ff4c 	bl	194f0 <check_ip_addr>
	if (status < 0) {
   19658:	2800      	cmp	r0, #0
   1965a:	db07      	blt.n	1966c <net_send_data+0x32>
	} else if (status > 0) {
   1965c:	dc07      	bgt.n	1966e <net_send_data+0x34>
	if (net_if_send_data(net_pkt_iface(pkt), pkt) == NET_DROP) {
   1965e:	4621      	mov	r1, r4
   19660:	69a0      	ldr	r0, [r4, #24]
   19662:	f7ed fc65 	bl	6f30 <net_if_send_data>
   19666:	2802      	cmp	r0, #2
   19668:	d010      	beq.n	1968c <net_send_data+0x52>
	return 0;
   1966a:	2000      	movs	r0, #0
}
   1966c:	bd10      	pop	{r4, pc}
		processing_data(pkt, true);
   1966e:	2101      	movs	r1, #1
   19670:	4620      	mov	r0, r4
   19672:	f7ff ffa7 	bl	195c4 <processing_data>
		return 0;
   19676:	2000      	movs	r0, #0
   19678:	e7f8      	b.n	1966c <net_send_data+0x32>
		return -ENODATA;
   1967a:	f06f 003c 	mvn.w	r0, #60	; 0x3c
}
   1967e:	4770      	bx	lr
		return -ENODATA;
   19680:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   19684:	e7f2      	b.n	1966c <net_send_data+0x32>
		return -EINVAL;
   19686:	f06f 0015 	mvn.w	r0, #21
   1968a:	e7ef      	b.n	1966c <net_send_data+0x32>
		return -EIO;
   1968c:	f06f 0004 	mvn.w	r0, #4
   19690:	e7ec      	b.n	1966c <net_send_data+0x32>

00019692 <net_process_rx_packet>:
{
   19692:	b508      	push	{r3, lr}
   19694:	4601      	mov	r1, r0
	net_rx(net_pkt_iface(pkt), pkt);
   19696:	6980      	ldr	r0, [r0, #24]
   19698:	f7ff ffa3 	bl	195e2 <net_rx>
}
   1969c:	bd08      	pop	{r3, pc}

0001969e <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
   1969e:	460b      	mov	r3, r1
   196a0:	b139      	cbz	r1, 196b2 <sys_slist_remove+0x14>
	return node->next;
   196a2:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
   196a4:	6019      	str	r1, [r3, #0]
	return list->tail;
   196a6:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   196a8:	428a      	cmp	r2, r1
   196aa:	d009      	beq.n	196c0 <sys_slist_remove+0x22>
	parent->next = child;
   196ac:	2300      	movs	r3, #0
   196ae:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   196b0:	4770      	bx	lr
	return node->next;
   196b2:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   196b4:	6003      	str	r3, [r0, #0]
	return list->tail;
   196b6:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   196b8:	428a      	cmp	r2, r1
   196ba:	d1f7      	bne.n	196ac <sys_slist_remove+0xe>
	list->tail = node;
   196bc:	6043      	str	r3, [r0, #4]
}
   196be:	e7f5      	b.n	196ac <sys_slist_remove+0xe>
	list->tail = node;
   196c0:	6043      	str	r3, [r0, #4]
}
   196c2:	e7f3      	b.n	196ac <sys_slist_remove+0xe>

000196c4 <net_context_send_cb>:
	if (!context) {
   196c4:	b128      	cbz	r0, 196d2 <net_context_send_cb+0xe>
{
   196c6:	b510      	push	{r4, lr}
	if (context->send_cb) {
   196c8:	6b44      	ldr	r4, [r0, #52]	; 0x34
   196ca:	b10c      	cbz	r4, 196d0 <net_context_send_cb+0xc>
		context->send_cb(context, status, context->user_data);
   196cc:	6802      	ldr	r2, [r0, #0]
   196ce:	47a0      	blx	r4
}
   196d0:	bd10      	pop	{r4, pc}
   196d2:	4770      	bx	lr

000196d4 <l2_flags_get>:
	if (!iface || !iface->if_dev) {
   196d4:	b140      	cbz	r0, 196e8 <l2_flags_get+0x14>
{
   196d6:	b508      	push	{r3, lr}
   196d8:	6803      	ldr	r3, [r0, #0]
   196da:	b13b      	cbz	r3, 196ec <l2_flags_get+0x18>
	return iface->if_dev->l2;
   196dc:	685b      	ldr	r3, [r3, #4]
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   196de:	b13b      	cbz	r3, 196f0 <l2_flags_get+0x1c>
   196e0:	68db      	ldr	r3, [r3, #12]
   196e2:	b13b      	cbz	r3, 196f4 <l2_flags_get+0x20>
		flags = net_if_l2(iface)->get_flags(iface);
   196e4:	4798      	blx	r3
}
   196e6:	bd08      	pop	{r3, pc}
	enum net_l2_flags flags = 0;
   196e8:	2000      	movs	r0, #0
}
   196ea:	4770      	bx	lr
	enum net_l2_flags flags = 0;
   196ec:	2000      	movs	r0, #0
   196ee:	e7fa      	b.n	196e6 <l2_flags_get+0x12>
   196f0:	2000      	movs	r0, #0
   196f2:	e7f8      	b.n	196e6 <l2_flags_get+0x12>
   196f4:	2000      	movs	r0, #0
   196f6:	e7f6      	b.n	196e6 <l2_flags_get+0x12>

000196f8 <get_ipaddr_diff>:
{
   196f8:	b510      	push	{r4, lr}
   196fa:	4604      	mov	r4, r0
	uint8_t len = 0U;
   196fc:	2000      	movs	r0, #0
	for (j = 0U; j < addr_len; j++) {
   196fe:	4603      	mov	r3, r0
   19700:	e003      	b.n	1970a <get_ipaddr_diff+0x12>
			len += 8U;
   19702:	3008      	adds	r0, #8
   19704:	b2c0      	uxtb	r0, r0
	for (j = 0U; j < addr_len; j++) {
   19706:	3301      	adds	r3, #1
   19708:	b2db      	uxtb	r3, r3
   1970a:	4293      	cmp	r3, r2
   1970c:	da16      	bge.n	1973c <get_ipaddr_diff+0x44>
		if (src[j] == dst[j]) {
   1970e:	f814 c003 	ldrb.w	ip, [r4, r3]
   19712:	f811 e003 	ldrb.w	lr, [r1, r3]
   19716:	45f4      	cmp	ip, lr
   19718:	d0f3      	beq.n	19702 <get_ipaddr_diff+0xa>
			xor = src[j] ^ dst[j];
   1971a:	ea8c 0c0e 	eor.w	ip, ip, lr
			for (k = 0U; k < 8; k++) {
   1971e:	2300      	movs	r3, #0
   19720:	2b07      	cmp	r3, #7
   19722:	d80b      	bhi.n	1973c <get_ipaddr_diff+0x44>
				if (!(xor & 0x80)) {
   19724:	f01c 0f80 	tst.w	ip, #128	; 0x80
   19728:	d108      	bne.n	1973c <get_ipaddr_diff+0x44>
					len++;
   1972a:	3001      	adds	r0, #1
   1972c:	b2c0      	uxtb	r0, r0
					xor <<= 1;
   1972e:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   19732:	fa5f fc8c 	uxtb.w	ip, ip
			for (k = 0U; k < 8; k++) {
   19736:	3301      	adds	r3, #1
   19738:	b2db      	uxtb	r3, r3
   1973a:	e7f1      	b.n	19720 <get_ipaddr_diff+0x28>
}
   1973c:	bd10      	pop	{r4, pc}

0001973e <get_diff_ipv4>:
{
   1973e:	b508      	push	{r3, lr}
	return get_ipaddr_diff((const uint8_t *)src, (const uint8_t *)dst, 4);
   19740:	2204      	movs	r2, #4
   19742:	f7ff ffd9 	bl	196f8 <get_ipaddr_diff>
}
   19746:	bd08      	pop	{r3, pc}

00019748 <net_if_ipv4_get_best_match>:
{
   19748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct net_if_ipv4 *ipv4 = iface->config.ip.ipv4;
   1974c:	6844      	ldr	r4, [r0, #4]
	if (!ipv4) {
   1974e:	b914      	cbnz	r4, 19756 <net_if_ipv4_get_best_match+0xe>
}
   19750:	4620      	mov	r0, r4
   19752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   19756:	460f      	mov	r7, r1
   19758:	4616      	mov	r6, r2
	for (i = 0; i < NET_IF_MAX_IPV4_ADDR; i++) {
   1975a:	2500      	movs	r5, #0
	struct in_addr *src = NULL;
   1975c:	46a9      	mov	r9, r5
	for (i = 0; i < NET_IF_MAX_IPV4_ADDR; i++) {
   1975e:	2d00      	cmp	r5, #0
   19760:	dd01      	ble.n	19766 <net_if_ipv4_get_best_match+0x1e>
	return src;
   19762:	464c      	mov	r4, r9
   19764:	e7f4      	b.n	19750 <net_if_ipv4_get_best_match+0x8>
		if (!is_proper_ipv4_address(&ipv4->unicast[i])) {
   19766:	eb05 0045 	add.w	r0, r5, r5, lsl #1
   1976a:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
   1976e:	f7ec ff2b 	bl	65c8 <is_proper_ipv4_address>
   19772:	b170      	cbz	r0, 19792 <net_if_ipv4_get_best_match+0x4a>
		len = get_diff_ipv4(dst, &ipv4->unicast[i].address.in_addr);
   19774:	eb05 0845 	add.w	r8, r5, r5, lsl #1
   19778:	eb04 08c8 	add.w	r8, r4, r8, lsl #3
   1977c:	f108 0804 	add.w	r8, r8, #4
   19780:	4641      	mov	r1, r8
   19782:	4638      	mov	r0, r7
   19784:	f7ff ffdb 	bl	1973e <get_diff_ipv4>
		if (len >= *best_so_far) {
   19788:	7833      	ldrb	r3, [r6, #0]
   1978a:	4283      	cmp	r3, r0
   1978c:	d801      	bhi.n	19792 <net_if_ipv4_get_best_match+0x4a>
			*best_so_far = len;
   1978e:	7030      	strb	r0, [r6, #0]
			src = &ipv4->unicast[i].address.in_addr;
   19790:	46c1      	mov	r9, r8
	for (i = 0; i < NET_IF_MAX_IPV4_ADDR; i++) {
   19792:	3501      	adds	r5, #1
   19794:	e7e3      	b.n	1975e <net_if_ipv4_get_best_match+0x16>

00019796 <ipv4_addr_find>:
	struct net_if_ipv4 *ipv4 = iface->config.ip.ipv4;
   19796:	6840      	ldr	r0, [r0, #4]
	for (i = 0; i < NET_IF_MAX_IPV4_ADDR; i++) {
   19798:	2300      	movs	r3, #0
   1979a:	2b00      	cmp	r3, #0
   1979c:	dd01      	ble.n	197a2 <ipv4_addr_find+0xc>
	return NULL;
   1979e:	2000      	movs	r0, #0
}
   197a0:	4770      	bx	lr
		if (!ipv4->unicast[i].is_used) {
   197a2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   197a6:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
   197aa:	7d92      	ldrb	r2, [r2, #22]
   197ac:	f012 0f02 	tst.w	r2, #2
   197b0:	d008      	beq.n	197c4 <ipv4_addr_find+0x2e>
				      &ipv4->unicast[i].address.in_addr)) {
   197b2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   197b6:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   197ba:	f8d1 c000 	ldr.w	ip, [r1]
   197be:	6852      	ldr	r2, [r2, #4]
		if (net_ipv4_addr_cmp(addr,
   197c0:	4594      	cmp	ip, r2
   197c2:	d001      	beq.n	197c8 <ipv4_addr_find+0x32>
	for (i = 0; i < NET_IF_MAX_IPV4_ADDR; i++) {
   197c4:	3301      	adds	r3, #1
   197c6:	e7e8      	b.n	1979a <ipv4_addr_find+0x4>
			return &ipv4->unicast[i];
   197c8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   197cc:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   197d0:	4770      	bx	lr

000197d2 <ipv4_maddr_find>:
	struct net_if_ipv4 *ipv4 = iface->config.ip.ipv4;
   197d2:	6840      	ldr	r0, [r0, #4]
	if (!ipv4) {
   197d4:	b978      	cbnz	r0, 197f6 <ipv4_maddr_find+0x24>
}
   197d6:	4770      	bx	lr
		if ((is_used && !ipv4->mcast[i].is_used) ||
   197d8:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
   197dc:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
   197e0:	f89c c02c 	ldrb.w	ip, [ip, #44]	; 0x2c
   197e4:	f01c 0f01 	tst.w	ip, #1
   197e8:	d116      	bne.n	19818 <ipv4_maddr_find+0x46>
	for (i = 0; i < NET_IF_MAX_IPV4_MADDR; i++) {
   197ea:	3301      	adds	r3, #1
   197ec:	2b00      	cmp	r3, #0
   197ee:	dd08      	ble.n	19802 <ipv4_maddr_find+0x30>
	return NULL;
   197f0:	2000      	movs	r0, #0
}
   197f2:	f85d fb04 	ldr.w	pc, [sp], #4
	for (i = 0; i < NET_IF_MAX_IPV4_MADDR; i++) {
   197f6:	2300      	movs	r3, #0
   197f8:	2b00      	cmp	r3, #0
   197fa:	dd01      	ble.n	19800 <ipv4_maddr_find+0x2e>
	return NULL;
   197fc:	2000      	movs	r0, #0
   197fe:	4770      	bx	lr
{
   19800:	b500      	push	{lr}
		if ((is_used && !ipv4->mcast[i].is_used) ||
   19802:	2900      	cmp	r1, #0
   19804:	d1e8      	bne.n	197d8 <ipv4_maddr_find+0x6>
		    (!is_used && ipv4->mcast[i].is_used)) {
   19806:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
   1980a:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
   1980e:	f89c c02c 	ldrb.w	ip, [ip, #44]	; 0x2c
   19812:	f01c 0f01 	tst.w	ip, #1
   19816:	d1e8      	bne.n	197ea <ipv4_maddr_find+0x18>
		if (addr) {
   19818:	b15a      	cbz	r2, 19832 <ipv4_maddr_find+0x60>
			if (!net_ipv4_addr_cmp(&ipv4->mcast[i].address.in_addr,
   1981a:	f103 0c01 	add.w	ip, r3, #1
   1981e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   19822:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
   19826:	f8dc e004 	ldr.w	lr, [ip, #4]
   1982a:	f8d2 c000 	ldr.w	ip, [r2]
   1982e:	45e6      	cmp	lr, ip
   19830:	d1db      	bne.n	197ea <ipv4_maddr_find+0x18>
		return &ipv4->mcast[i];
   19832:	3301      	adds	r3, #1
   19834:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   19838:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   1983c:	e7d9      	b.n	197f2 <ipv4_maddr_find+0x20>

0001983e <need_calc_checksum>:
}
   1983e:	2001      	movs	r0, #1
   19840:	4770      	bx	lr

00019842 <net_linkaddr_set>:
 * This value should always be <= NET_LINK_ADDR_MAX_LENGTH.
 */
static inline int net_linkaddr_set(struct net_linkaddr_storage *lladdr_store,
				   uint8_t *new_addr, uint8_t new_len)
{
	if (!lladdr_store || !new_addr) {
   19842:	b148      	cbz	r0, 19858 <net_linkaddr_set+0x16>
{
   19844:	b508      	push	{r3, lr}
	if (!lladdr_store || !new_addr) {
   19846:	b151      	cbz	r1, 1985e <net_linkaddr_set+0x1c>
		return -EINVAL;
	}

	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   19848:	2a06      	cmp	r2, #6
   1984a:	d80b      	bhi.n	19864 <net_linkaddr_set+0x22>
		return -EMSGSIZE;
	}

	lladdr_store->len = new_len;
   1984c:	7042      	strb	r2, [r0, #1]
   1984e:	3002      	adds	r0, #2
   19850:	f006 fab7 	bl	1fdc2 <memcpy>
	memcpy(lladdr_store->addr, new_addr, new_len);

	return 0;
   19854:	2000      	movs	r0, #0
}
   19856:	bd08      	pop	{r3, pc}
		return -EINVAL;
   19858:	f06f 0015 	mvn.w	r0, #21
}
   1985c:	4770      	bx	lr
		return -EINVAL;
   1985e:	f06f 0015 	mvn.w	r0, #21
   19862:	e7f8      	b.n	19856 <net_linkaddr_set+0x14>
		return -EMSGSIZE;
   19864:	f06f 0079 	mvn.w	r0, #121	; 0x79
   19868:	e7f5      	b.n	19856 <net_linkaddr_set+0x14>

0001986a <atomic_test_bit>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1986a:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1986c:	f3bf 8f5b 	dmb	ish
   19870:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
   19874:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   19878:	f001 011f 	and.w	r1, r1, #31
   1987c:	4108      	asrs	r0, r1
}
   1987e:	f000 0001 	and.w	r0, r0, #1
   19882:	4770      	bx	lr

00019884 <net_if_set_link_addr_unlocked>:
{
   19884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19886:	460f      	mov	r7, r1
   19888:	4616      	mov	r6, r2
   1988a:	461d      	mov	r5, r3
	if (iface == NULL) {
   1988c:	4604      	mov	r4, r0
   1988e:	b128      	cbz	r0, 1989c <net_if_set_link_addr_unlocked+0x18>
	return atomic_test_bit(iface->if_dev->flags, value);
   19890:	6800      	ldr	r0, [r0, #0]
   19892:	2100      	movs	r1, #0
   19894:	300c      	adds	r0, #12
   19896:	f7ff ffe8 	bl	1986a <atomic_test_bit>
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   1989a:	b938      	cbnz	r0, 198ac <net_if_set_link_addr_unlocked+0x28>
	return &iface->if_dev->link_addr;
   1989c:	6823      	ldr	r3, [r4, #0]
	net_if_get_link_addr(iface)->addr = addr;
   1989e:	611f      	str	r7, [r3, #16]
	return &iface->if_dev->link_addr;
   198a0:	6823      	ldr	r3, [r4, #0]
	net_if_get_link_addr(iface)->len = len;
   198a2:	751e      	strb	r6, [r3, #20]
	return &iface->if_dev->link_addr;
   198a4:	6823      	ldr	r3, [r4, #0]
	net_if_get_link_addr(iface)->type = type;
   198a6:	755d      	strb	r5, [r3, #21]
	return 0;
   198a8:	2000      	movs	r0, #0
}
   198aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EPERM;
   198ac:	f04f 30ff 	mov.w	r0, #4294967295
   198b0:	e7fb      	b.n	198aa <net_if_set_link_addr_unlocked+0x26>

000198b2 <net_if_is_admin_up>:
	if (iface == NULL) {
   198b2:	b130      	cbz	r0, 198c2 <net_if_is_admin_up+0x10>
 * @param iface Pointer to network interface
 *
 * @return True if interface is admin up, false otherwise.
 */
static inline bool net_if_is_admin_up(struct net_if *iface)
{
   198b4:	b508      	push	{r3, lr}
	return atomic_test_bit(iface->if_dev->flags, value);
   198b6:	6800      	ldr	r0, [r0, #0]
   198b8:	2100      	movs	r1, #0
   198ba:	300c      	adds	r0, #12
   198bc:	f7ff ffd5 	bl	1986a <atomic_test_bit>
	NET_ASSERT(iface);

	return net_if_flag_is_set(iface, NET_IF_UP);
}
   198c0:	bd08      	pop	{r3, pc}
		return false;
   198c2:	2000      	movs	r0, #0
}
   198c4:	4770      	bx	lr

000198c6 <net_if_is_carrier_ok>:
	if (iface == NULL) {
   198c6:	b130      	cbz	r0, 198d6 <net_if_is_carrier_ok+0x10>
 * @param iface Pointer to network interface
 *
 * @return True if carrier is present, false otherwise.
 */
static inline bool net_if_is_carrier_ok(struct net_if *iface)
{
   198c8:	b508      	push	{r3, lr}
	return atomic_test_bit(iface->if_dev->flags, value);
   198ca:	6800      	ldr	r0, [r0, #0]
   198cc:	2109      	movs	r1, #9
   198ce:	300c      	adds	r0, #12
   198d0:	f7ff ffcb 	bl	1986a <atomic_test_bit>
	NET_ASSERT(iface);

	return net_if_flag_is_set(iface, NET_IF_LOWER_UP);
}
   198d4:	bd08      	pop	{r3, pc}
		return false;
   198d6:	2000      	movs	r0, #0
}
   198d8:	4770      	bx	lr

000198da <net_if_is_dormant>:
	if (iface == NULL) {
   198da:	b130      	cbz	r0, 198ea <net_if_is_dormant+0x10>
 * @param iface Pointer to network interface
 *
 * @return True if interface is dormant, false otherwise.
 */
static inline bool net_if_is_dormant(struct net_if *iface)
{
   198dc:	b508      	push	{r3, lr}
	return atomic_test_bit(iface->if_dev->flags, value);
   198de:	6800      	ldr	r0, [r0, #0]
   198e0:	210a      	movs	r1, #10
   198e2:	300c      	adds	r0, #12
   198e4:	f7ff ffc1 	bl	1986a <atomic_test_bit>
	NET_ASSERT(iface);

	return net_if_flag_is_set(iface, NET_IF_DORMANT);
}
   198e8:	bd08      	pop	{r3, pc}
		return false;
   198ea:	2000      	movs	r0, #0
}
   198ec:	4770      	bx	lr

000198ee <k_uptime_get_32>:
{
   198ee:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
   198f0:	f006 f828 	bl	1f944 <z_impl_k_uptime_ticks>
	return k_ticks_to_ms_floor64(k_uptime_ticks());
   198f4:	4602      	mov	r2, r0
   198f6:	014b      	lsls	r3, r1, #5
   198f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
   198fc:	0140      	lsls	r0, r0, #5
   198fe:	1a80      	subs	r0, r0, r2
   19900:	eb63 0301 	sbc.w	r3, r3, r1
   19904:	009b      	lsls	r3, r3, #2
   19906:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
   1990a:	0080      	lsls	r0, r0, #2
   1990c:	1880      	adds	r0, r0, r2
   1990e:	eb43 0301 	adc.w	r3, r3, r1
   19912:	00db      	lsls	r3, r3, #3
   19914:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
   19918:	f3c0 3010 	ubfx	r0, r0, #12, #17
}
   1991c:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   19920:	bd08      	pop	{r3, pc}

00019922 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   19922:	f001 021f 	and.w	r2, r1, #31
   19926:	2301      	movs	r3, #1
   19928:	4093      	lsls	r3, r2
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1992a:	0949      	lsrs	r1, r1, #5
   1992c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19930:	f3bf 8f5b 	dmb	ish
   19934:	e850 2f00 	ldrex	r2, [r0]
   19938:	431a      	orrs	r2, r3
   1993a:	e840 2100 	strex	r1, r2, [r0]
   1993e:	2900      	cmp	r1, #0
   19940:	d1f8      	bne.n	19934 <atomic_set_bit+0x12>
   19942:	f3bf 8f5b 	dmb	ish
}
   19946:	4770      	bx	lr

00019948 <atomic_test_and_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   19948:	f001 021f 	and.w	r2, r1, #31
   1994c:	2301      	movs	r3, #1
   1994e:	4093      	lsls	r3, r2
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   19950:	0949      	lsrs	r1, r1, #5
   19952:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   19956:	f3bf 8f5b 	dmb	ish
   1995a:	e850 2f00 	ldrex	r2, [r0]
   1995e:	ea42 0103 	orr.w	r1, r2, r3
   19962:	e840 1c00 	strex	ip, r1, [r0]
   19966:	f1bc 0f00 	cmp.w	ip, #0
   1996a:	d1f6      	bne.n	1995a <atomic_test_and_set_bit+0x12>
   1996c:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   19970:	4213      	tst	r3, r2
}
   19972:	bf14      	ite	ne
   19974:	2001      	movne	r0, #1
   19976:	2000      	moveq	r0, #0
   19978:	4770      	bx	lr

0001997a <init_iface>:
{
   1997a:	b538      	push	{r3, r4, r5, lr}
   1997c:	4604      	mov	r4, r0
	return iface->if_dev->dev;
   1997e:	6800      	ldr	r0, [r0, #0]
   19980:	6803      	ldr	r3, [r0, #0]
	const struct net_if_api *api = net_if_get_device(iface)->api;
   19982:	689d      	ldr	r5, [r3, #8]
	if (!api || !api->init) {
   19984:	b16d      	cbz	r5, 199a2 <init_iface+0x28>
   19986:	682b      	ldr	r3, [r5, #0]
   19988:	b15b      	cbz	r3, 199a2 <init_iface+0x28>
	atomic_set_bit(iface->if_dev->flags, value);
   1998a:	2106      	movs	r1, #6
   1998c:	300c      	adds	r0, #12
   1998e:	f7ff ffc8 	bl	19922 <atomic_set_bit>
	return atomic_test_and_set_bit(iface->if_dev->flags, value);
   19992:	6820      	ldr	r0, [r4, #0]
   19994:	2109      	movs	r1, #9
   19996:	300c      	adds	r0, #12
   19998:	f7ff ffd6 	bl	19948 <atomic_test_and_set_bit>
	api->init(iface);
   1999c:	682b      	ldr	r3, [r5, #0]
   1999e:	4620      	mov	r0, r4
   199a0:	4798      	blx	r3
}
   199a2:	bd38      	pop	{r3, r4, r5, pc}

000199a4 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   199a4:	f001 021f 	and.w	r2, r1, #31
   199a8:	2301      	movs	r3, #1
   199aa:	4093      	lsls	r3, r2
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   199ac:	0949      	lsrs	r1, r1, #5
   199ae:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   199b2:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   199b4:	f3bf 8f5b 	dmb	ish
   199b8:	e850 2f00 	ldrex	r2, [r0]
   199bc:	401a      	ands	r2, r3
   199be:	e840 2100 	strex	r1, r2, [r0]
   199c2:	2900      	cmp	r1, #0
   199c4:	d1f8      	bne.n	199b8 <atomic_clear_bit+0x14>
   199c6:	f3bf 8f5b 	dmb	ish
}
   199ca:	4770      	bx	lr

000199cc <update_operational_state>:
{
   199cc:	b538      	push	{r3, r4, r5, lr}
   199ce:	4604      	mov	r4, r0
	enum net_if_oper_state prev_state = iface->if_dev->oper_state;
   199d0:	6803      	ldr	r3, [r0, #0]
   199d2:	7f9d      	ldrb	r5, [r3, #30]
	if (!net_if_is_admin_up(iface)) {
   199d4:	f7ff ff6d 	bl	198b2 <net_if_is_admin_up>
   199d8:	b958      	cbnz	r0, 199f2 <update_operational_state+0x26>
		new_state = NET_IF_OPER_DOWN;
   199da:	2302      	movs	r3, #2
		iface->if_dev->oper_state = oper_state;
   199dc:	6822      	ldr	r2, [r4, #0]
   199de:	7793      	strb	r3, [r2, #30]
	return iface->if_dev->oper_state;
   199e0:	6822      	ldr	r2, [r4, #0]
   199e2:	7f92      	ldrb	r2, [r2, #30]
	if (net_if_oper_state_set(iface, new_state) != new_state) {
   199e4:	429a      	cmp	r2, r3
   199e6:	d103      	bne.n	199f0 <update_operational_state+0x24>
	if (net_if_oper_state(iface) == NET_IF_OPER_UP) {
   199e8:	2a06      	cmp	r2, #6
   199ea:	d010      	beq.n	19a0e <update_operational_state+0x42>
		if (prev_state == NET_IF_OPER_UP) {
   199ec:	2d06      	cmp	r5, #6
   199ee:	d014      	beq.n	19a1a <update_operational_state+0x4e>
}
   199f0:	bd38      	pop	{r3, r4, r5, pc}
	if (!net_if_is_carrier_ok(iface)) {
   199f2:	4620      	mov	r0, r4
   199f4:	f7ff ff67 	bl	198c6 <net_if_is_carrier_ok>
   199f8:	b908      	cbnz	r0, 199fe <update_operational_state+0x32>
			new_state = NET_IF_OPER_DOWN;
   199fa:	2302      	movs	r3, #2
   199fc:	e7ee      	b.n	199dc <update_operational_state+0x10>
	if (net_if_is_dormant(iface)) {
   199fe:	4620      	mov	r0, r4
   19a00:	f7ff ff6b 	bl	198da <net_if_is_dormant>
   19a04:	b908      	cbnz	r0, 19a0a <update_operational_state+0x3e>
	new_state = NET_IF_OPER_UP;
   19a06:	2306      	movs	r3, #6
   19a08:	e7e8      	b.n	199dc <update_operational_state+0x10>
		new_state = NET_IF_OPER_DORMANT;
   19a0a:	2305      	movs	r3, #5
   19a0c:	e7e6      	b.n	199dc <update_operational_state+0x10>
		if (prev_state != NET_IF_OPER_UP) {
   19a0e:	2d06      	cmp	r5, #6
   19a10:	d0ee      	beq.n	199f0 <update_operational_state+0x24>
			notify_iface_up(iface);
   19a12:	4620      	mov	r0, r4
   19a14:	f7ec fefc 	bl	6810 <notify_iface_up>
   19a18:	e7ea      	b.n	199f0 <update_operational_state+0x24>
			notify_iface_down(iface);
   19a1a:	4620      	mov	r0, r4
   19a1c:	f7ec ff10 	bl	6840 <notify_iface_down>
   19a20:	e7e6      	b.n	199f0 <update_operational_state+0x24>

00019a22 <atomic_test_and_clear_bit>:
{
   19a22:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   19a24:	f001 021f 	and.w	r2, r1, #31
   19a28:	2301      	movs	r3, #1
   19a2a:	4093      	lsls	r3, r2
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   19a2c:	0949      	lsrs	r1, r1, #5
   19a2e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   19a32:	43d9      	mvns	r1, r3
   19a34:	f3bf 8f5b 	dmb	ish
   19a38:	e850 2f00 	ldrex	r2, [r0]
   19a3c:	ea02 0c01 	and.w	ip, r2, r1
   19a40:	e840 ce00 	strex	lr, ip, [r0]
   19a44:	f1be 0f00 	cmp.w	lr, #0
   19a48:	d1f6      	bne.n	19a38 <atomic_test_and_clear_bit+0x16>
   19a4a:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   19a4e:	4213      	tst	r3, r2
}
   19a50:	bf14      	ite	ne
   19a52:	2001      	movne	r0, #1
   19a54:	2000      	moveq	r0, #0
   19a56:	f85d fb04 	ldr.w	pc, [sp], #4

00019a5a <ipv4_is_broadcast_address>:
{
   19a5a:	b538      	push	{r3, r4, r5, lr}
	struct net_if_ipv4 *ipv4 = iface->config.ip.ipv4;
   19a5c:	6845      	ldr	r5, [r0, #4]
	if (!ipv4) {
   19a5e:	b165      	cbz	r5, 19a7a <ipv4_is_broadcast_address+0x20>
   19a60:	460c      	mov	r4, r1
	if (!net_if_ipv4_addr_mask_cmp(iface, addr)) {
   19a62:	f7ec ffb7 	bl	69d4 <net_if_ipv4_addr_mask_cmp>
   19a66:	b138      	cbz	r0, 19a78 <ipv4_is_broadcast_address+0x1e>
	if ((UNALIGNED_GET(&addr->s_addr) & ~ipv4->netmask.s_addr) ==
   19a68:	6823      	ldr	r3, [r4, #0]
   19a6a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   19a6c:	43d1      	mvns	r1, r2
   19a6e:	ea23 0302 	bic.w	r3, r3, r2
   19a72:	4299      	cmp	r1, r3
   19a74:	d000      	beq.n	19a78 <ipv4_is_broadcast_address+0x1e>
	return false;
   19a76:	2000      	movs	r0, #0
}
   19a78:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   19a7a:	2000      	movs	r0, #0
   19a7c:	e7fc      	b.n	19a78 <ipv4_is_broadcast_address+0x1e>

00019a7e <net_if_ipv4_get_ll>:
{
   19a7e:	b508      	push	{r3, lr}
	return if_ipv4_get_addr(iface, addr_state, true);
   19a80:	2201      	movs	r2, #1
   19a82:	f7ec fdc9 	bl	6618 <if_ipv4_get_addr>
}
   19a86:	bd08      	pop	{r3, pc}

00019a88 <net_if_ipv4_get_global_addr>:
{
   19a88:	b508      	push	{r3, lr}
	return if_ipv4_get_addr(iface, addr_state, false);
   19a8a:	2200      	movs	r2, #0
   19a8c:	f7ec fdc4 	bl	6618 <if_ipv4_get_addr>
}
   19a90:	bd08      	pop	{r3, pc}

00019a92 <net_if_recv_data>:
{
   19a92:	b508      	push	{r3, lr}
	if (!iface || !iface->if_dev) {
   19a94:	b128      	cbz	r0, 19aa2 <net_if_recv_data+0x10>
   19a96:	6803      	ldr	r3, [r0, #0]
   19a98:	b103      	cbz	r3, 19a9c <net_if_recv_data+0xa>
	return iface->if_dev->l2;
   19a9a:	685b      	ldr	r3, [r3, #4]
	return net_if_l2(iface)->recv(iface, pkt);
   19a9c:	681b      	ldr	r3, [r3, #0]
   19a9e:	4798      	blx	r3
}
   19aa0:	bd08      	pop	{r3, pc}
		return NULL;
   19aa2:	4603      	mov	r3, r0
   19aa4:	e7fa      	b.n	19a9c <net_if_recv_data+0xa>

00019aa6 <net_if_queue_tx>:
{
   19aa6:	b510      	push	{r4, lr}
   19aa8:	460c      	mov	r4, r1
	uint8_t tc = net_tx_priority2tc(prio);
   19aaa:	f891 003c 	ldrb.w	r0, [r1, #60]	; 0x3c
   19aae:	f001 fe65 	bl	1b77c <net_tx_priority2tc>
		net_if_tx(net_pkt_iface(pkt), pkt);
   19ab2:	4621      	mov	r1, r4
   19ab4:	69a0      	ldr	r0, [r4, #24]
   19ab6:	f7ed f9e3 	bl	6e80 <net_if_tx>
}
   19aba:	bd10      	pop	{r4, pc}

00019abc <net_if_need_calc_tx_checksum>:
{
   19abc:	b508      	push	{r3, lr}
	return need_calc_checksum(iface, ETHERNET_HW_TX_CHKSUM_OFFLOAD);
   19abe:	2101      	movs	r1, #1
   19ac0:	f7ff febd 	bl	1983e <need_calc_checksum>
}
   19ac4:	bd08      	pop	{r3, pc}

00019ac6 <net_if_need_calc_rx_checksum>:
{
   19ac6:	b508      	push	{r3, lr}
	return need_calc_checksum(iface, ETHERNET_HW_RX_CHKSUM_OFFLOAD);
   19ac8:	2102      	movs	r1, #2
   19aca:	f7ff feb8 	bl	1983e <need_calc_checksum>
}
   19ace:	bd08      	pop	{r3, pc}

00019ad0 <offset_based_swap8>:
{
   19ad0:	4603      	mov	r3, r0
	uint16_t data16 = (uint16_t)*data;
   19ad2:	7800      	ldrb	r0, [r0, #0]
	if (((uintptr_t)(data) & 1) == CHECKSUM_BIG_ENDIAN) {
   19ad4:	f013 0f01 	tst.w	r3, #1
   19ad8:	d000      	beq.n	19adc <offset_based_swap8+0xc>
		return data16 << 8;
   19ada:	0200      	lsls	r0, r0, #8
}
   19adc:	4770      	bx	lr

00019ade <convert_port>:
{
   19ade:	b530      	push	{r4, r5, lr}
   19ae0:	b083      	sub	sp, #12
   19ae2:	4604      	mov	r4, r0
   19ae4:	460d      	mov	r5, r1
	tmp = strtoul(buf, &endptr, 10);
   19ae6:	220a      	movs	r2, #10
   19ae8:	a901      	add	r1, sp, #4
   19aea:	f7f9 f9ab 	bl	12e44 <strtoul>
	if ((endptr == buf && tmp == 0) ||
   19aee:	9b01      	ldr	r3, [sp, #4]
   19af0:	42a3      	cmp	r3, r4
   19af2:	d00a      	beq.n	19b0a <convert_port+0x2c>
	    !(*buf != '\0' && *endptr == '\0') ||
   19af4:	7822      	ldrb	r2, [r4, #0]
	if ((endptr == buf && tmp == 0) ||
   19af6:	b162      	cbz	r2, 19b12 <convert_port+0x34>
	    !(*buf != '\0' && *endptr == '\0') ||
   19af8:	781b      	ldrb	r3, [r3, #0]
   19afa:	b96b      	cbnz	r3, 19b18 <convert_port+0x3a>
	    ((unsigned long)(unsigned short)tmp != tmp)) {
   19afc:	b283      	uxth	r3, r0
	    !(*buf != '\0' && *endptr == '\0') ||
   19afe:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   19b02:	d20b      	bcs.n	19b1c <convert_port+0x3e>
	*port = tmp;
   19b04:	802b      	strh	r3, [r5, #0]
	return true;
   19b06:	2001      	movs	r0, #1
   19b08:	e004      	b.n	19b14 <convert_port+0x36>
	if ((endptr == buf && tmp == 0) ||
   19b0a:	2800      	cmp	r0, #0
   19b0c:	d1f2      	bne.n	19af4 <convert_port+0x16>
		return false;
   19b0e:	2000      	movs	r0, #0
   19b10:	e000      	b.n	19b14 <convert_port+0x36>
   19b12:	2000      	movs	r0, #0
}
   19b14:	b003      	add	sp, #12
   19b16:	bd30      	pop	{r4, r5, pc}
		return false;
   19b18:	2000      	movs	r0, #0
   19b1a:	e7fb      	b.n	19b14 <convert_port+0x36>
   19b1c:	2000      	movs	r0, #0
   19b1e:	e7f9      	b.n	19b14 <convert_port+0x36>

00019b20 <net_byte_to_hex>:
{
   19b20:	b430      	push	{r4, r5}
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   19b22:	090c      	lsrs	r4, r1, #4
   19b24:	2500      	movs	r5, #0
   19b26:	e00a      	b.n	19b3e <net_byte_to_hex+0x1e>
		if (i == 0 && !pad && !val) {
   19b28:	b96b      	cbnz	r3, 19b46 <net_byte_to_hex+0x26>
   19b2a:	b964      	cbnz	r4, 19b46 <net_byte_to_hex+0x26>
   19b2c:	e004      	b.n	19b38 <net_byte_to_hex+0x18>
			*ptr++ = (char) (val - 10 + base);
   19b2e:	4414      	add	r4, r2
   19b30:	b2e4      	uxtb	r4, r4
   19b32:	3c0a      	subs	r4, #10
   19b34:	f800 4b01 	strb.w	r4, [r0], #1
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   19b38:	3501      	adds	r5, #1
   19b3a:	f001 040f 	and.w	r4, r1, #15
   19b3e:	2d01      	cmp	r5, #1
   19b40:	dc07      	bgt.n	19b52 <net_byte_to_hex+0x32>
		if (i == 0 && !pad && !val) {
   19b42:	2d00      	cmp	r5, #0
   19b44:	d0f0      	beq.n	19b28 <net_byte_to_hex+0x8>
		if (val < 10) {
   19b46:	2c09      	cmp	r4, #9
   19b48:	dcf1      	bgt.n	19b2e <net_byte_to_hex+0xe>
			*ptr++ = (char) (val + '0');
   19b4a:	3430      	adds	r4, #48	; 0x30
   19b4c:	f800 4b01 	strb.w	r4, [r0], #1
   19b50:	e7f2      	b.n	19b38 <net_byte_to_hex+0x18>
	*ptr = '\0';
   19b52:	2300      	movs	r3, #0
   19b54:	7003      	strb	r3, [r0, #0]
}
   19b56:	bc30      	pop	{r4, r5}
   19b58:	4770      	bx	lr

00019b5a <z_impl_net_addr_ntop>:
{
   19b5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19b5e:	b087      	sub	sp, #28
   19b60:	4680      	mov	r8, r0
   19b62:	9101      	str	r1, [sp, #4]
   19b64:	9202      	str	r2, [sp, #8]
	unsigned char zeros[8] = { 0 };
   19b66:	2300      	movs	r3, #0
   19b68:	9304      	str	r3, [sp, #16]
   19b6a:	9305      	str	r3, [sp, #20]
	if (family == AF_INET6) {
   19b6c:	2802      	cmp	r0, #2
   19b6e:	d010      	beq.n	19b92 <z_impl_net_addr_ntop+0x38>
	} else if (family == AF_INET) {
   19b70:	2801      	cmp	r0, #1
   19b72:	f040 80ca 	bne.w	19d0a <z_impl_net_addr_ntop+0x1b0>
		len = 4;
   19b76:	f04f 0a04 	mov.w	sl, #4
		delim = '.';
   19b7a:	f04f 0b2e 	mov.w	fp, #46	; 0x2e
	int8_t pos = -1;
   19b7e:	f04f 39ff 	mov.w	r9, #4294967295
	uint8_t i, bl, bh, longest = 1U;
   19b82:	2201      	movs	r2, #1
	char *ptr = dst;
   19b84:	9d02      	ldr	r5, [sp, #8]
	bool needcolon = false;
   19b86:	2600      	movs	r6, #0
	for (i = 0U; i < len; i++) {
   19b88:	4634      	mov	r4, r6
   19b8a:	f8cd 800c 	str.w	r8, [sp, #12]
   19b8e:	4690      	mov	r8, r2
   19b90:	e070      	b.n	19c74 <z_impl_net_addr_ntop+0x11a>
		w = (uint16_t *)addr6->s6_addr16;
   19b92:	460f      	mov	r7, r1
		for (i = 0U; i < 8; i++) {
   19b94:	4618      	mov	r0, r3
   19b96:	e001      	b.n	19b9c <z_impl_net_addr_ntop+0x42>
   19b98:	3001      	adds	r0, #1
   19b9a:	b2c0      	uxtb	r0, r0
   19b9c:	2807      	cmp	r0, #7
   19b9e:	d812      	bhi.n	19bc6 <z_impl_net_addr_ntop+0x6c>
			for (j = i; j < 8; j++) {
   19ba0:	4603      	mov	r3, r0
   19ba2:	2b07      	cmp	r3, #7
   19ba4:	d8f8      	bhi.n	19b98 <z_impl_net_addr_ntop+0x3e>
				if (UNALIGNED_GET(&w[j]) != 0) {
   19ba6:	f837 2013 	ldrh.w	r2, [r7, r3, lsl #1]
   19baa:	2a00      	cmp	r2, #0
   19bac:	d1f4      	bne.n	19b98 <z_impl_net_addr_ntop+0x3e>
				zeros[i]++;
   19bae:	f100 0218 	add.w	r2, r0, #24
   19bb2:	eb0d 0102 	add.w	r1, sp, r2
   19bb6:	f811 2c08 	ldrb.w	r2, [r1, #-8]
   19bba:	3201      	adds	r2, #1
   19bbc:	f801 2c08 	strb.w	r2, [r1, #-8]
			for (j = i; j < 8; j++) {
   19bc0:	3301      	adds	r3, #1
   19bc2:	b2db      	uxtb	r3, r3
   19bc4:	e7ed      	b.n	19ba2 <z_impl_net_addr_ntop+0x48>
	int8_t pos = -1;
   19bc6:	f04f 39ff 	mov.w	r9, #4294967295
	uint8_t i, bl, bh, longest = 1U;
   19bca:	2201      	movs	r2, #1
		for (i = 0U; i < 8; i++) {
   19bcc:	2100      	movs	r1, #0
   19bce:	e001      	b.n	19bd4 <z_impl_net_addr_ntop+0x7a>
   19bd0:	3101      	adds	r1, #1
   19bd2:	b2c9      	uxtb	r1, r1
   19bd4:	2907      	cmp	r1, #7
   19bd6:	d80a      	bhi.n	19bee <z_impl_net_addr_ntop+0x94>
			if (zeros[i] > longest) {
   19bd8:	f101 0318 	add.w	r3, r1, #24
   19bdc:	446b      	add	r3, sp
   19bde:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   19be2:	4293      	cmp	r3, r2
   19be4:	d9f4      	bls.n	19bd0 <z_impl_net_addr_ntop+0x76>
				pos = i;
   19be6:	fa4f f981 	sxtb.w	r9, r1
				longest = zeros[i];
   19bea:	461a      	mov	r2, r3
   19bec:	e7f0      	b.n	19bd0 <z_impl_net_addr_ntop+0x76>
		if (longest == 1U) {
   19bee:	2a01      	cmp	r2, #1
   19bf0:	d004      	beq.n	19bfc <z_impl_net_addr_ntop+0xa2>
		len = 8;
   19bf2:	f04f 0a08 	mov.w	sl, #8
	char delim = ':';
   19bf6:	f04f 0b3a 	mov.w	fp, #58	; 0x3a
   19bfa:	e7c3      	b.n	19b84 <z_impl_net_addr_ntop+0x2a>
		len = 8;
   19bfc:	f04f 0a08 	mov.w	sl, #8
	char delim = ':';
   19c00:	f04f 0b3a 	mov.w	fp, #58	; 0x3a
			pos = -1;
   19c04:	f04f 39ff 	mov.w	r9, #4294967295
   19c08:	e7bc      	b.n	19b84 <z_impl_net_addr_ntop+0x2a>
			value = (uint32_t)addr->s4_addr[i];
   19c0a:	9a01      	ldr	r2, [sp, #4]
   19c0c:	5cd1      	ldrb	r1, [r2, r3]
			if (value == 0U) {
   19c0e:	b939      	cbnz	r1, 19c20 <z_impl_net_addr_ntop+0xc6>
				*ptr++ = '0';
   19c10:	462b      	mov	r3, r5
   19c12:	2230      	movs	r2, #48	; 0x30
   19c14:	f803 2b02 	strb.w	r2, [r3], #2
				*ptr++ = delim;
   19c18:	f885 b001 	strb.w	fp, [r5, #1]
   19c1c:	461d      	mov	r5, r3
				continue;
   19c1e:	e027      	b.n	19c70 <z_impl_net_addr_ntop+0x116>
			l = net_value_to_udec(ptr, value, 0);
   19c20:	2200      	movs	r2, #0
   19c22:	4628      	mov	r0, r5
   19c24:	f7ed faac 	bl	7180 <net_value_to_udec>
			*ptr++ = delim;
   19c28:	fa55 f580 	uxtab	r5, r5, r0
   19c2c:	f805 bb01 	strb.w	fp, [r5], #1
			continue;
   19c30:	e01e      	b.n	19c70 <z_impl_net_addr_ntop+0x116>
			if (needcolon || i == 0U) {
   19c32:	b906      	cbnz	r6, 19c36 <z_impl_net_addr_ntop+0xdc>
   19c34:	b914      	cbnz	r4, 19c3c <z_impl_net_addr_ntop+0xe2>
				*ptr++ = ':';
   19c36:	233a      	movs	r3, #58	; 0x3a
   19c38:	f805 3b01 	strb.w	r3, [r5], #1
			*ptr++ = ':';
   19c3c:	233a      	movs	r3, #58	; 0x3a
   19c3e:	f805 3b01 	strb.w	r3, [r5], #1
			i += longest - 1U;
   19c42:	4444      	add	r4, r8
   19c44:	b2e4      	uxtb	r4, r4
   19c46:	3c01      	subs	r4, #1
   19c48:	b2e4      	uxtb	r4, r4
			needcolon = false;
   19c4a:	2600      	movs	r6, #0
			continue;
   19c4c:	e010      	b.n	19c70 <z_impl_net_addr_ntop+0x116>
				ptr = net_byte_to_hex(ptr, bh, 'a', false);
   19c4e:	2300      	movs	r3, #0
   19c50:	2261      	movs	r2, #97	; 0x61
   19c52:	4628      	mov	r0, r5
   19c54:	f7ff ff64 	bl	19b20 <net_byte_to_hex>
   19c58:	e003      	b.n	19c62 <z_impl_net_addr_ntop+0x108>
					*ptr++ = (char) (bh - 10 + 'a');
   19c5a:	4628      	mov	r0, r5
   19c5c:	3157      	adds	r1, #87	; 0x57
   19c5e:	f800 1b01 	strb.w	r1, [r0], #1
			ptr = net_byte_to_hex(ptr, bl, 'a', true);
   19c62:	2301      	movs	r3, #1
   19c64:	2261      	movs	r2, #97	; 0x61
   19c66:	4631      	mov	r1, r6
   19c68:	f7ff ff5a 	bl	19b20 <net_byte_to_hex>
   19c6c:	4605      	mov	r5, r0
		needcolon = true;
   19c6e:	2601      	movs	r6, #1
	for (i = 0U; i < len; i++) {
   19c70:	3401      	adds	r4, #1
   19c72:	b2e4      	uxtb	r4, r4
   19c74:	4623      	mov	r3, r4
   19c76:	4554      	cmp	r4, sl
   19c78:	da34      	bge.n	19ce4 <z_impl_net_addr_ntop+0x18a>
		if (len == 4) {
   19c7a:	f1ba 0f04 	cmp.w	sl, #4
   19c7e:	d0c4      	beq.n	19c0a <z_impl_net_addr_ntop+0xb0>
		if (i == pos) {
   19c80:	4599      	cmp	r9, r3
   19c82:	d0d6      	beq.n	19c32 <z_impl_net_addr_ntop+0xd8>
		if (needcolon) {
   19c84:	b116      	cbz	r6, 19c8c <z_impl_net_addr_ntop+0x132>
			*ptr++ = ':';
   19c86:	233a      	movs	r3, #58	; 0x3a
   19c88:	f805 3b01 	strb.w	r3, [r5], #1
		value = (uint32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   19c8c:	f837 6014 	ldrh.w	r6, [r7, r4, lsl #1]
   19c90:	0233      	lsls	r3, r6, #8
   19c92:	b21b      	sxth	r3, r3
   19c94:	ea43 2616 	orr.w	r6, r3, r6, lsr #8
		bh = value >> 8;
   19c98:	f3c3 2107 	ubfx	r1, r3, #8, #8
		bl = value & 0xff;
   19c9c:	b2f6      	uxtb	r6, r6
		if (bh) {
   19c9e:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
   19ca2:	d008      	beq.n	19cb6 <z_impl_net_addr_ntop+0x15c>
			if (bh > 0x0f) {
   19ca4:	290f      	cmp	r1, #15
   19ca6:	d8d2      	bhi.n	19c4e <z_impl_net_addr_ntop+0xf4>
				if (bh < 10) {
   19ca8:	2909      	cmp	r1, #9
   19caa:	d8d6      	bhi.n	19c5a <z_impl_net_addr_ntop+0x100>
					*ptr++ = (char)(bh + '0');
   19cac:	4628      	mov	r0, r5
   19cae:	3130      	adds	r1, #48	; 0x30
   19cb0:	f800 1b01 	strb.w	r1, [r0], #1
   19cb4:	e7d5      	b.n	19c62 <z_impl_net_addr_ntop+0x108>
		} else if (bl > 0x0f) {
   19cb6:	2e0f      	cmp	r6, #15
   19cb8:	d806      	bhi.n	19cc8 <z_impl_net_addr_ntop+0x16e>
			if (bl < 10) {
   19cba:	2e09      	cmp	r6, #9
   19cbc:	d80d      	bhi.n	19cda <z_impl_net_addr_ntop+0x180>
				*ptr++ = (char)(bl + '0');
   19cbe:	3630      	adds	r6, #48	; 0x30
   19cc0:	f805 6b01 	strb.w	r6, [r5], #1
		needcolon = true;
   19cc4:	2601      	movs	r6, #1
   19cc6:	e7d3      	b.n	19c70 <z_impl_net_addr_ntop+0x116>
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   19cc8:	2300      	movs	r3, #0
   19cca:	2261      	movs	r2, #97	; 0x61
   19ccc:	4631      	mov	r1, r6
   19cce:	4628      	mov	r0, r5
   19cd0:	f7ff ff26 	bl	19b20 <net_byte_to_hex>
   19cd4:	4605      	mov	r5, r0
		needcolon = true;
   19cd6:	2601      	movs	r6, #1
   19cd8:	e7ca      	b.n	19c70 <z_impl_net_addr_ntop+0x116>
				*ptr++ = (char) (bl - 10 + 'a');
   19cda:	3657      	adds	r6, #87	; 0x57
   19cdc:	f805 6b01 	strb.w	r6, [r5], #1
		needcolon = true;
   19ce0:	2601      	movs	r6, #1
   19ce2:	e7c5      	b.n	19c70 <z_impl_net_addr_ntop+0x116>
	if (!(ptr - dst)) {
   19ce4:	f8dd 800c 	ldr.w	r8, [sp, #12]
   19ce8:	9b02      	ldr	r3, [sp, #8]
   19cea:	429d      	cmp	r5, r3
   19cec:	d00f      	beq.n	19d0e <z_impl_net_addr_ntop+0x1b4>
	if (family == AF_INET) {
   19cee:	f1b8 0f01 	cmp.w	r8, #1
   19cf2:	d005      	beq.n	19d00 <z_impl_net_addr_ntop+0x1a6>
		*ptr = '\0';
   19cf4:	2300      	movs	r3, #0
   19cf6:	702b      	strb	r3, [r5, #0]
	return dst;
   19cf8:	9802      	ldr	r0, [sp, #8]
}
   19cfa:	b007      	add	sp, #28
   19cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*(ptr - 1) = '\0';
   19d00:	2300      	movs	r3, #0
   19d02:	f805 3c01 	strb.w	r3, [r5, #-1]
	return dst;
   19d06:	9802      	ldr	r0, [sp, #8]
   19d08:	e7f7      	b.n	19cfa <z_impl_net_addr_ntop+0x1a0>
		return NULL;
   19d0a:	2000      	movs	r0, #0
   19d0c:	e7f5      	b.n	19cfa <z_impl_net_addr_ntop+0x1a0>
		return NULL;
   19d0e:	2000      	movs	r0, #0
   19d10:	e7f3      	b.n	19cfa <z_impl_net_addr_ntop+0x1a0>

00019d12 <parse_ipv4>:
{
   19d12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19d16:	b086      	sub	sp, #24
   19d18:	4606      	mov	r6, r0
   19d1a:	460f      	mov	r7, r1
   19d1c:	4690      	mov	r8, r2
   19d1e:	4699      	mov	r9, r3
	len = MIN(NET_IPV4_ADDR_LEN, str_len);
   19d20:	460d      	mov	r5, r1
   19d22:	2910      	cmp	r1, #16
   19d24:	bf28      	it	cs
   19d26:	2510      	movcs	r5, #16
	for (i = 0; i < len; i++) {
   19d28:	f04f 0c00 	mov.w	ip, #0
   19d2c:	e001      	b.n	19d32 <parse_ipv4+0x20>
   19d2e:	f10c 0c01 	add.w	ip, ip, #1
   19d32:	4565      	cmp	r5, ip
   19d34:	dd04      	ble.n	19d40 <parse_ipv4+0x2e>
		if (!str[i]) {
   19d36:	f816 400c 	ldrb.w	r4, [r6, ip]
   19d3a:	2c00      	cmp	r4, #0
   19d3c:	d1f7      	bne.n	19d2e <parse_ipv4+0x1c>
			len = i;
   19d3e:	4665      	mov	r5, ip
	if (has_port) {
   19d40:	f1b9 0f00 	cmp.w	r9, #0
   19d44:	d00c      	beq.n	19d60 <parse_ipv4+0x4e>
		ptr = memchr(str, ':', len);
   19d46:	462a      	mov	r2, r5
   19d48:	213a      	movs	r1, #58	; 0x3a
   19d4a:	4630      	mov	r0, r6
   19d4c:	f7e6 f9d8 	bl	100 <memchr>
		if (!ptr) {
   19d50:	4604      	mov	r4, r0
   19d52:	2800      	cmp	r0, #0
   19d54:	d043      	beq.n	19dde <parse_ipv4+0xcc>
		end = MIN(len, ptr - str);
   19d56:	1b83      	subs	r3, r0, r6
   19d58:	429d      	cmp	r5, r3
   19d5a:	bfa8      	it	ge
   19d5c:	461d      	movge	r5, r3
   19d5e:	e000      	b.n	19d62 <parse_ipv4+0x50>
	char *ptr = NULL;
   19d60:	2400      	movs	r4, #0
	memcpy(ipaddr, str, end);
   19d62:	46aa      	mov	sl, r5
   19d64:	2311      	movs	r3, #17
   19d66:	462a      	mov	r2, r5
   19d68:	4631      	mov	r1, r6
   19d6a:	a801      	add	r0, sp, #4
   19d6c:	f006 f837 	bl	1fdde <__memcpy_chk>
	ipaddr[end] = '\0';
   19d70:	f105 0318 	add.w	r3, r5, #24
   19d74:	eb0d 0503 	add.w	r5, sp, r3
   19d78:	2300      	movs	r3, #0
   19d7a:	f805 3c14 	strb.w	r3, [r5, #-20]
	addr4 = &net_sin(addr)->sin_addr;
   19d7e:	f108 0204 	add.w	r2, r8, #4
   19d82:	a901      	add	r1, sp, #4
   19d84:	2001      	movs	r0, #1
   19d86:	f7ed fa25 	bl	71d4 <z_impl_net_addr_pton>
	if (ret < 0) {
   19d8a:	2800      	cmp	r0, #0
   19d8c:	db29      	blt.n	19de2 <parse_ipv4+0xd0>
	net_sin(addr)->sin_family = AF_INET;
   19d8e:	2301      	movs	r3, #1
   19d90:	f8a8 3000 	strh.w	r3, [r8]
	if (!has_port) {
   19d94:	f1b9 0f00 	cmp.w	r9, #0
   19d98:	d103      	bne.n	19da2 <parse_ipv4+0x90>
		return true;
   19d9a:	2001      	movs	r0, #1
}
   19d9c:	b006      	add	sp, #24
   19d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	memcpy(ipaddr, ptr + 1, str_len - end);
   19da2:	eba7 070a 	sub.w	r7, r7, sl
   19da6:	2311      	movs	r3, #17
   19da8:	463a      	mov	r2, r7
   19daa:	1c61      	adds	r1, r4, #1
   19dac:	a801      	add	r0, sp, #4
   19dae:	f006 f816 	bl	1fdde <__memcpy_chk>
	ipaddr[str_len - end] = '\0';
   19db2:	f107 0318 	add.w	r3, r7, #24
   19db6:	eb0d 0703 	add.w	r7, sp, r3
   19dba:	2300      	movs	r3, #0
   19dbc:	f807 3c14 	strb.w	r3, [r7, #-20]
	ret = convert_port(ipaddr, &port);
   19dc0:	f10d 0102 	add.w	r1, sp, #2
   19dc4:	a801      	add	r0, sp, #4
   19dc6:	f7ff fe8a 	bl	19ade <convert_port>
	if (!ret) {
   19dca:	2800      	cmp	r0, #0
   19dcc:	d0e6      	beq.n	19d9c <parse_ipv4+0x8a>
	net_sin(addr)->sin_port = htons(port);
   19dce:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   19dd2:	0213      	lsls	r3, r2, #8
   19dd4:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   19dd8:	f8a8 3002 	strh.w	r3, [r8, #2]
	return true;
   19ddc:	e7de      	b.n	19d9c <parse_ipv4+0x8a>
			return false;
   19dde:	2000      	movs	r0, #0
   19de0:	e7dc      	b.n	19d9c <parse_ipv4+0x8a>
		return false;
   19de2:	2000      	movs	r0, #0
   19de4:	e7da      	b.n	19d9c <parse_ipv4+0x8a>

00019de6 <calc_chksum>:
{
   19de6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19dea:	460d      	mov	r5, r1
   19dec:	4616      	mov	r6, r2
	if (odd_start == CHECKSUM_BIG_ENDIAN) {
   19dee:	f011 0701 	ands.w	r7, r1, #1
   19df2:	d122      	bne.n	19e3a <calc_chksum+0x54>
		sum = __bswap_16(sum_in);
   19df4:	0203      	lsls	r3, r0, #8
   19df6:	ea43 2310 	orr.w	r3, r3, r0, lsr #8
   19dfa:	fa1f f883 	uxth.w	r8, r3
   19dfe:	2400      	movs	r4, #0
	if ((((uintptr_t)data & 0x01) != 0) && (pending >= 1)) {
   19e00:	f015 0f01 	tst.w	r5, #1
   19e04:	d00a      	beq.n	19e1c <calc_chksum+0x36>
   19e06:	b14e      	cbz	r6, 19e1c <calc_chksum+0x36>
		sum += offset_based_swap8(data);
   19e08:	4628      	mov	r0, r5
   19e0a:	f7ff fe61 	bl	19ad0 <offset_based_swap8>
   19e0e:	eb10 0008 	adds.w	r0, r0, r8
   19e12:	4680      	mov	r8, r0
   19e14:	f144 0400 	adc.w	r4, r4, #0
		data++;
   19e18:	3501      	adds	r5, #1
		pending--;
   19e1a:	3e01      	subs	r6, #1
	if ((((uintptr_t)data & 0x02) != 0) && (pending >= sizeof(uint16_t))) {
   19e1c:	f015 0f02 	tst.w	r5, #2
   19e20:	d009      	beq.n	19e36 <calc_chksum+0x50>
   19e22:	2e01      	cmp	r6, #1
   19e24:	d907      	bls.n	19e36 <calc_chksum+0x50>
		pending -= sizeof(uint16_t);
   19e26:	3e02      	subs	r6, #2
		sum = sum + *((uint16_t *)data);
   19e28:	f835 3b02 	ldrh.w	r3, [r5], #2
   19e2c:	eb13 0308 	adds.w	r3, r3, r8
   19e30:	4698      	mov	r8, r3
   19e32:	f144 0400 	adc.w	r4, r4, #0
	size_t i = 0;
   19e36:	2200      	movs	r2, #0
	while (pending >= sizeof(uint32_t) * 4) {
   19e38:	e01e      	b.n	19e78 <calc_chksum+0x92>
		sum = sum_in;
   19e3a:	4680      	mov	r8, r0
   19e3c:	2400      	movs	r4, #0
   19e3e:	e7df      	b.n	19e00 <calc_chksum+0x1a>
		uint64_t sum_a = p[i];
   19e40:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
   19e44:	2100      	movs	r1, #0
		uint64_t sum_b = p[i + 1];
   19e46:	1c53      	adds	r3, r2, #1
   19e48:	f855 e023 	ldr.w	lr, [r5, r3, lsl #2]
		pending -= sizeof(uint32_t) * 4;
   19e4c:	3e10      	subs	r6, #16
		sum_a += p[i + 2];
   19e4e:	1c93      	adds	r3, r2, #2
   19e50:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   19e54:	181b      	adds	r3, r3, r0
   19e56:	eb41 0c01 	adc.w	ip, r1, r1
		sum_b += p[i + 3];
   19e5a:	1cd0      	adds	r0, r2, #3
   19e5c:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
   19e60:	eb10 000e 	adds.w	r0, r0, lr
   19e64:	4149      	adcs	r1, r1
		i += 4;
   19e66:	3204      	adds	r2, #4
		sum += sum_a + sum_b;
   19e68:	181b      	adds	r3, r3, r0
   19e6a:	eb4c 0101 	adc.w	r1, ip, r1
   19e6e:	eb13 0308 	adds.w	r3, r3, r8
   19e72:	4698      	mov	r8, r3
   19e74:	eb41 0404 	adc.w	r4, r1, r4
	while (pending >= sizeof(uint32_t) * 4) {
   19e78:	2e0f      	cmp	r6, #15
   19e7a:	d8e1      	bhi.n	19e40 <calc_chksum+0x5a>
   19e7c:	e008      	b.n	19e90 <calc_chksum+0xaa>
		pending -= sizeof(uint32_t);
   19e7e:	3e04      	subs	r6, #4
		sum = sum + p[i++];
   19e80:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   19e84:	eb13 0308 	adds.w	r3, r3, r8
   19e88:	4698      	mov	r8, r3
   19e8a:	f144 0400 	adc.w	r4, r4, #0
   19e8e:	3201      	adds	r2, #1
	while (pending >= sizeof(uint32_t)) {
   19e90:	2e03      	cmp	r6, #3
   19e92:	d8f4      	bhi.n	19e7e <calc_chksum+0x98>
	data = (uint8_t *)(p + i);
   19e94:	eb05 0082 	add.w	r0, r5, r2, lsl #2
	if (pending >= 2) {
   19e98:	2e01      	cmp	r6, #1
   19e9a:	d908      	bls.n	19eae <calc_chksum+0xc8>
		pending -= sizeof(uint16_t);
   19e9c:	3e02      	subs	r6, #2
		sum = sum + *((uint16_t *)data);
   19e9e:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
   19ea2:	eb13 0308 	adds.w	r3, r3, r8
   19ea6:	4698      	mov	r8, r3
   19ea8:	f144 0400 	adc.w	r4, r4, #0
		data += sizeof(uint16_t);
   19eac:	3002      	adds	r0, #2
	if (pending == 1) {
   19eae:	2e01      	cmp	r6, #1
   19eb0:	d10d      	bne.n	19ece <calc_chksum+0xe8>
		sum += offset_based_swap8(data);
   19eb2:	f7ff fe0d 	bl	19ad0 <offset_based_swap8>
   19eb6:	eb10 0008 	adds.w	r0, r0, r8
   19eba:	4680      	mov	r8, r0
   19ebc:	f144 0400 	adc.w	r4, r4, #0
   19ec0:	e005      	b.n	19ece <calc_chksum+0xe8>
		sum = (sum & 0xffff) + (sum >> 16);
   19ec2:	fa1f f888 	uxth.w	r8, r8
   19ec6:	eb18 0803 	adds.w	r8, r8, r3
   19eca:	f142 0400 	adc.w	r4, r2, #0
	while (sum >> 16) {
   19ece:	ea4f 4318 	mov.w	r3, r8, lsr #16
   19ed2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   19ed6:	0c22      	lsrs	r2, r4, #16
   19ed8:	ea53 4414 	orrs.w	r4, r3, r4, lsr #16
   19edc:	d1f1      	bne.n	19ec2 <calc_chksum+0xdc>
	if (odd_start == CHECKSUM_BIG_ENDIAN) {
   19ede:	b94f      	cbnz	r7, 19ef4 <calc_chksum+0x10e>
		return __bswap_16((uint16_t)sum);
   19ee0:	fa1f f388 	uxth.w	r3, r8
   19ee4:	f3c8 2807 	ubfx	r8, r8, #8, #8
   19ee8:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
   19eec:	fa1f f088 	uxth.w	r0, r8
}
   19ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return sum;
   19ef4:	fa1f f088 	uxth.w	r0, r8
   19ef8:	e7fa      	b.n	19ef0 <calc_chksum+0x10a>

00019efa <pkt_calc_chksum>:
{
   19efa:	b570      	push	{r4, r5, r6, lr}
   19efc:	4604      	mov	r4, r0
   19efe:	4608      	mov	r0, r1
	if (!cur->buf || !cur->pos) {
   19f00:	68e2      	ldr	r2, [r4, #12]
   19f02:	b322      	cbz	r2, 19f4e <pkt_calc_chksum+0x54>
   19f04:	6923      	ldr	r3, [r4, #16]
   19f06:	b313      	cbz	r3, 19f4e <pkt_calc_chksum+0x54>
	len = cur->buf->len - (cur->pos - cur->buf->data);
   19f08:	8995      	ldrh	r5, [r2, #12]
   19f0a:	6892      	ldr	r2, [r2, #8]
   19f0c:	1a9b      	subs	r3, r3, r2
   19f0e:	1aed      	subs	r5, r5, r3
	while (cur->buf) {
   19f10:	e003      	b.n	19f1a <pkt_calc_chksum+0x20>
			cur->pos++;
   19f12:	3201      	adds	r2, #1
   19f14:	6122      	str	r2, [r4, #16]
			len = cur->buf->len - 1;
   19f16:	899d      	ldrh	r5, [r3, #12]
   19f18:	3d01      	subs	r5, #1
	while (cur->buf) {
   19f1a:	68e6      	ldr	r6, [r4, #12]
   19f1c:	b1be      	cbz	r6, 19f4e <pkt_calc_chksum+0x54>
		sum = calc_chksum(sum, cur->pos, len);
   19f1e:	462a      	mov	r2, r5
   19f20:	6921      	ldr	r1, [r4, #16]
   19f22:	f7ff ff60 	bl	19de6 <calc_chksum>
		cur->buf = cur->buf->frags;
   19f26:	6833      	ldr	r3, [r6, #0]
   19f28:	60e3      	str	r3, [r4, #12]
		if (!cur->buf || !cur->buf->len) {
   19f2a:	b183      	cbz	r3, 19f4e <pkt_calc_chksum+0x54>
   19f2c:	899a      	ldrh	r2, [r3, #12]
   19f2e:	b172      	cbz	r2, 19f4e <pkt_calc_chksum+0x54>
		cur->pos = cur->buf->data;
   19f30:	689a      	ldr	r2, [r3, #8]
   19f32:	6122      	str	r2, [r4, #16]
		if (len % 2) {
   19f34:	f015 0f01 	tst.w	r5, #1
   19f38:	d007      	beq.n	19f4a <pkt_calc_chksum+0x50>
			sum += *cur->pos;
   19f3a:	7811      	ldrb	r1, [r2, #0]
   19f3c:	4408      	add	r0, r1
   19f3e:	b280      	uxth	r0, r0
			if (sum < *cur->pos) {
   19f40:	4281      	cmp	r1, r0
   19f42:	d9e6      	bls.n	19f12 <pkt_calc_chksum+0x18>
				sum++;
   19f44:	3001      	adds	r0, #1
   19f46:	b280      	uxth	r0, r0
   19f48:	e7e3      	b.n	19f12 <pkt_calc_chksum+0x18>
			len = cur->buf->len;
   19f4a:	899d      	ldrh	r5, [r3, #12]
   19f4c:	e7e5      	b.n	19f1a <pkt_calc_chksum+0x20>
}
   19f4e:	bd70      	pop	{r4, r5, r6, pc}

00019f50 <net_calc_chksum>:
	return pkt->family;
   19f50:	f890 3037 	ldrb.w	r3, [r0, #55]	; 0x37
   19f54:	095b      	lsrs	r3, r3, #5
	if (IS_ENABLED(CONFIG_NET_IPV4) &&
   19f56:	2b01      	cmp	r3, #1
   19f58:	d159      	bne.n	1a00e <net_calc_chksum+0xbe>
{
   19f5a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19f5e:	b083      	sub	sp, #12
   19f60:	4604      	mov	r4, r0
		if (proto != IPPROTO_ICMP) {
   19f62:	2901      	cmp	r1, #1
   19f64:	d041      	beq.n	19fea <net_calc_chksum+0x9a>
	return net_buf_frags_len(pkt->frags);
   19f66:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   19f68:	2200      	movs	r2, #0
	while (buf) {
   19f6a:	e002      	b.n	19f72 <net_calc_chksum+0x22>
		bytes += buf->len;
   19f6c:	8998      	ldrh	r0, [r3, #12]
   19f6e:	4402      	add	r2, r0
		buf = buf->frags;
   19f70:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   19f72:	2b00      	cmp	r3, #0
   19f74:	d1fa      	bne.n	19f6c <net_calc_chksum+0x1c>
	return pkt->ip_hdr_len;
   19f76:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
			sum = net_pkt_get_len(pkt) -
   19f7a:	1ad5      	subs	r5, r2, r3
   19f7c:	b2ad      	uxth	r5, r5
	return pkt->ipv4_opts_len;
   19f7e:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
				net_pkt_ip_hdr_len(pkt) -
   19f82:	1aed      	subs	r5, r5, r3
			sum = net_pkt_get_len(pkt) -
   19f84:	fa11 f585 	uxtah	r5, r1, r5
   19f88:	b2ad      	uxth	r5, r5
			len = 2 * sizeof(struct in_addr);
   19f8a:	f04f 0908 	mov.w	r9, #8
	backup->buf = pkt->cursor.buf;
   19f8e:	68e7      	ldr	r7, [r4, #12]
   19f90:	9700      	str	r7, [sp, #0]
	backup->pos = pkt->cursor.pos;
   19f92:	6926      	ldr	r6, [r4, #16]
   19f94:	9601      	str	r6, [sp, #4]
	net_pkt_cursor_init(pkt);
   19f96:	4620      	mov	r0, r4
   19f98:	f001 f922 	bl	1b1e0 <net_pkt_cursor_init>
	return pkt->overwrite;
   19f9c:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
   19fa0:	f003 0801 	and.w	r8, r3, #1
	pkt->overwrite = overwrite;
   19fa4:	f043 0301 	orr.w	r3, r3, #1
   19fa8:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
	return pkt->ip_hdr_len;
   19fac:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
	net_pkt_skip(pkt, net_pkt_ip_hdr_len(pkt) - len);
   19fb0:	eba1 0109 	sub.w	r1, r1, r9
   19fb4:	4620      	mov	r0, r4
   19fb6:	f001 f985 	bl	1b2c4 <net_pkt_skip>
	sum = calc_chksum(sum, pkt->cursor.pos, len);
   19fba:	464a      	mov	r2, r9
   19fbc:	6921      	ldr	r1, [r4, #16]
   19fbe:	4628      	mov	r0, r5
   19fc0:	f7ff ff11 	bl	19de6 <calc_chksum>
   19fc4:	4605      	mov	r5, r0
	return pkt->ipv4_opts_len;
   19fc6:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
	net_pkt_skip(pkt, len + net_pkt_ip_opts_len(pkt));
   19fca:	4449      	add	r1, r9
   19fcc:	4620      	mov	r0, r4
   19fce:	f001 f979 	bl	1b2c4 <net_pkt_skip>
	sum = pkt_calc_chksum(pkt, sum);
   19fd2:	4629      	mov	r1, r5
   19fd4:	4620      	mov	r0, r4
   19fd6:	f7ff ff90 	bl	19efa <pkt_calc_chksum>
	sum = (sum == 0U) ? 0xffff : htons(sum);
   19fda:	4603      	mov	r3, r0
   19fdc:	b140      	cbz	r0, 19ff0 <net_calc_chksum+0xa0>
   19fde:	f3c0 200f 	ubfx	r0, r0, #8, #16
   19fe2:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   19fe6:	b280      	uxth	r0, r0
   19fe8:	e004      	b.n	19ff4 <net_calc_chksum+0xa4>
	uint16_t sum = 0U;
   19fea:	2500      	movs	r5, #0
	size_t len = 0U;
   19fec:	46a9      	mov	r9, r5
   19fee:	e7ce      	b.n	19f8e <net_calc_chksum+0x3e>
	sum = (sum == 0U) ? 0xffff : htons(sum);
   19ff0:	f64f 70ff 	movw	r0, #65535	; 0xffff
	pkt->cursor.buf = backup->buf;
   19ff4:	60e7      	str	r7, [r4, #12]
	pkt->cursor.pos = backup->pos;
   19ff6:	6126      	str	r6, [r4, #16]
	pkt->overwrite = overwrite;
   19ff8:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
   19ffc:	f368 0300 	bfi	r3, r8, #0, #1
   1a000:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
	return ~sum;
   1a004:	43c0      	mvns	r0, r0
   1a006:	b280      	uxth	r0, r0
}
   1a008:	b003      	add	sp, #12
   1a00a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return 0;
   1a00e:	2000      	movs	r0, #0
}
   1a010:	4770      	bx	lr

0001a012 <net_calc_chksum_ipv4>:
{
   1a012:	b508      	push	{r3, lr}
	sum = calc_chksum(0, pkt->buffer->data,
   1a014:	6883      	ldr	r3, [r0, #8]
	return pkt->ip_hdr_len;
   1a016:	f890 1036 	ldrb.w	r1, [r0, #54]	; 0x36
	return pkt->ipv4_opts_len;
   1a01a:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
   1a01e:	440a      	add	r2, r1
   1a020:	6899      	ldr	r1, [r3, #8]
   1a022:	2000      	movs	r0, #0
   1a024:	f7ff fedf 	bl	19de6 <calc_chksum>
	sum = (sum == 0U) ? 0xffff : htons(sum);
   1a028:	b140      	cbz	r0, 1a03c <net_calc_chksum_ipv4+0x2a>
   1a02a:	4603      	mov	r3, r0
   1a02c:	f3c0 200f 	ubfx	r0, r0, #8, #16
   1a030:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   1a034:	b280      	uxth	r0, r0
	return ~sum;
   1a036:	43c0      	mvns	r0, r0
}
   1a038:	b280      	uxth	r0, r0
   1a03a:	bd08      	pop	{r3, pc}
	sum = (sum == 0U) ? 0xffff : htons(sum);
   1a03c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   1a040:	e7f9      	b.n	1a036 <net_calc_chksum_ipv4+0x24>

0001a042 <net_ipaddr_parse>:
	if (!str || str_len == 0) {
   1a042:	b1f8      	cbz	r0, 1a084 <net_ipaddr_parse+0x42>
   1a044:	4684      	mov	ip, r0
   1a046:	b1f9      	cbz	r1, 1a088 <net_ipaddr_parse+0x46>
	if (*str == '\0') {
   1a048:	7803      	ldrb	r3, [r0, #0]
   1a04a:	b1fb      	cbz	r3, 1a08c <net_ipaddr_parse+0x4a>
	if (*str == '[') {
   1a04c:	2b5b      	cmp	r3, #91	; 0x5b
   1a04e:	d01f      	beq.n	1a090 <net_ipaddr_parse+0x4e>
{
   1a050:	b510      	push	{r4, lr}
	for (count = i = 0; str[i] && i < str_len; i++) {
   1a052:	2000      	movs	r0, #0
   1a054:	4603      	mov	r3, r0
   1a056:	e000      	b.n	1a05a <net_ipaddr_parse+0x18>
   1a058:	3301      	adds	r3, #1
   1a05a:	f81c 4003 	ldrb.w	r4, [ip, r3]
   1a05e:	b12c      	cbz	r4, 1a06c <net_ipaddr_parse+0x2a>
   1a060:	428b      	cmp	r3, r1
   1a062:	d203      	bcs.n	1a06c <net_ipaddr_parse+0x2a>
		if (str[i] == ':') {
   1a064:	2c3a      	cmp	r4, #58	; 0x3a
   1a066:	d1f7      	bne.n	1a058 <net_ipaddr_parse+0x16>
			count++;
   1a068:	3001      	adds	r0, #1
   1a06a:	e7f5      	b.n	1a058 <net_ipaddr_parse+0x16>
	if (count == 1) {
   1a06c:	2801      	cmp	r0, #1
   1a06e:	d004      	beq.n	1a07a <net_ipaddr_parse+0x38>
	return parse_ipv4(str, str_len, addr, false);
   1a070:	2300      	movs	r3, #0
   1a072:	4660      	mov	r0, ip
   1a074:	f7ff fe4d 	bl	19d12 <parse_ipv4>
}
   1a078:	bd10      	pop	{r4, pc}
		return parse_ipv4(str, str_len, addr, true);
   1a07a:	2301      	movs	r3, #1
   1a07c:	4660      	mov	r0, ip
   1a07e:	f7ff fe48 	bl	19d12 <parse_ipv4>
   1a082:	e7f9      	b.n	1a078 <net_ipaddr_parse+0x36>
		return false;
   1a084:	2000      	movs	r0, #0
   1a086:	4770      	bx	lr
   1a088:	2000      	movs	r0, #0
   1a08a:	4770      	bx	lr
		return false;
   1a08c:	2000      	movs	r0, #0
   1a08e:	4770      	bx	lr
		return parse_ipv6(str, str_len, addr, true);
   1a090:	2000      	movs	r0, #0
}
   1a092:	4770      	bx	lr

0001a094 <net_ipv4_is_addr_mcast>:
	return (ntohl(UNALIGNED_GET(&addr->s_addr)) & 0xF0000000) == 0xE0000000;
   1a094:	6803      	ldr	r3, [r0, #0]
   1a096:	0a18      	lsrs	r0, r3, #8
   1a098:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
   1a09c:	ea40 6013 	orr.w	r0, r0, r3, lsr #24
   1a0a0:	021a      	lsls	r2, r3, #8
   1a0a2:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
   1a0a6:	4310      	orrs	r0, r2
   1a0a8:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
   1a0ac:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
}
   1a0b0:	f1b0 4f60 	cmp.w	r0, #3758096384	; 0xe0000000
   1a0b4:	bf14      	ite	ne
   1a0b6:	2000      	movne	r0, #0
   1a0b8:	2001      	moveq	r0, #1
   1a0ba:	4770      	bx	lr

0001a0bc <timeout_to_int32>:
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1a0bc:	4602      	mov	r2, r0
   1a0be:	ea51 0300 	orrs.w	r3, r1, r0
   1a0c2:	d01c      	beq.n	1a0fe <timeout_to_int32+0x42>
	} else if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1a0c4:	f1b1 3fff 	cmp.w	r1, #4294967295
   1a0c8:	bf08      	it	eq
   1a0ca:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   1a0ce:	d013      	beq.n	1a0f8 <timeout_to_int32+0x3c>
			return (uint32_t)((t * to_hz + off) / from_hz);
   1a0d0:	0ec3      	lsrs	r3, r0, #27
   1a0d2:	0140      	lsls	r0, r0, #5
   1a0d4:	1a80      	subs	r0, r0, r2
   1a0d6:	f163 0300 	sbc.w	r3, r3, #0
   1a0da:	009b      	lsls	r3, r3, #2
   1a0dc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
   1a0e0:	0080      	lsls	r0, r0, #2
   1a0e2:	1880      	adds	r0, r0, r2
   1a0e4:	f143 0300 	adc.w	r3, r3, #0
   1a0e8:	00db      	lsls	r3, r3, #3
   1a0ea:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
   1a0ee:	f3c0 3010 	ubfx	r0, r0, #12, #17
   1a0f2:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
		return k_ticks_to_ms_floor32(timeout.ticks);
   1a0f6:	4770      	bx	lr
		return -1;
   1a0f8:	f04f 30ff 	mov.w	r0, #4294967295
   1a0fc:	4770      	bx	lr
		return 0;
   1a0fe:	2000      	movs	r0, #0
}
   1a100:	4770      	bx	lr

0001a102 <net_offload_connect>:
{
   1a102:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a104:	b083      	sub	sp, #12
   1a106:	460c      	mov	r4, r1
   1a108:	4615      	mov	r5, r2
   1a10a:	461e      	mov	r6, r3
	return iface->if_dev->offload;
   1a10c:	6803      	ldr	r3, [r0, #0]
   1a10e:	699b      	ldr	r3, [r3, #24]
	return net_if_offload(iface)->connect(
   1a110:	68df      	ldr	r7, [r3, #12]
   1a112:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1a116:	f7ff ffd1 	bl	1a0bc <timeout_to_int32>
   1a11a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1a11c:	9301      	str	r3, [sp, #4]
   1a11e:	9000      	str	r0, [sp, #0]
   1a120:	9b08      	ldr	r3, [sp, #32]
   1a122:	4632      	mov	r2, r6
   1a124:	4629      	mov	r1, r5
   1a126:	4620      	mov	r0, r4
   1a128:	47b8      	blx	r7
}
   1a12a:	b003      	add	sp, #12
   1a12c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001a12e <net_offload_accept>:
{
   1a12e:	b570      	push	{r4, r5, r6, lr}
   1a130:	460c      	mov	r4, r1
   1a132:	4615      	mov	r5, r2
   1a134:	6803      	ldr	r3, [r0, #0]
   1a136:	699b      	ldr	r3, [r3, #24]
	return net_if_offload(iface)->accept(
   1a138:	691e      	ldr	r6, [r3, #16]
   1a13a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1a13e:	f7ff ffbd 	bl	1a0bc <timeout_to_int32>
   1a142:	4602      	mov	r2, r0
   1a144:	9b06      	ldr	r3, [sp, #24]
   1a146:	4629      	mov	r1, r5
   1a148:	4620      	mov	r0, r4
   1a14a:	47b0      	blx	r6
}
   1a14c:	bd70      	pop	{r4, r5, r6, pc}

0001a14e <net_offload_send>:
{
   1a14e:	b570      	push	{r4, r5, r6, lr}
   1a150:	460c      	mov	r4, r1
   1a152:	4615      	mov	r5, r2
   1a154:	6803      	ldr	r3, [r0, #0]
   1a156:	699b      	ldr	r3, [r3, #24]
	return net_if_offload(iface)->send(
   1a158:	695e      	ldr	r6, [r3, #20]
   1a15a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1a15e:	f7ff ffad 	bl	1a0bc <timeout_to_int32>
   1a162:	4602      	mov	r2, r0
   1a164:	9b06      	ldr	r3, [sp, #24]
   1a166:	4629      	mov	r1, r5
   1a168:	4620      	mov	r0, r4
   1a16a:	47b0      	blx	r6
}
   1a16c:	bd70      	pop	{r4, r5, r6, pc}

0001a16e <net_offload_sendto>:
{
   1a16e:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a170:	b083      	sub	sp, #12
   1a172:	460c      	mov	r4, r1
   1a174:	4615      	mov	r5, r2
   1a176:	461e      	mov	r6, r3
   1a178:	6803      	ldr	r3, [r0, #0]
   1a17a:	699b      	ldr	r3, [r3, #24]
	return net_if_offload(iface)->sendto(
   1a17c:	699f      	ldr	r7, [r3, #24]
   1a17e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1a182:	f7ff ff9b 	bl	1a0bc <timeout_to_int32>
   1a186:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1a188:	9301      	str	r3, [sp, #4]
   1a18a:	9000      	str	r0, [sp, #0]
   1a18c:	9b08      	ldr	r3, [sp, #32]
   1a18e:	4632      	mov	r2, r6
   1a190:	4629      	mov	r1, r5
   1a192:	4620      	mov	r0, r4
   1a194:	47b8      	blx	r7
}
   1a196:	b003      	add	sp, #12
   1a198:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001a19a <net_offload_recv>:
{
   1a19a:	b570      	push	{r4, r5, r6, lr}
   1a19c:	460c      	mov	r4, r1
   1a19e:	4615      	mov	r5, r2
   1a1a0:	6803      	ldr	r3, [r0, #0]
   1a1a2:	699b      	ldr	r3, [r3, #24]
	return net_if_offload(iface)->recv(
   1a1a4:	69de      	ldr	r6, [r3, #28]
   1a1a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1a1aa:	f7ff ff87 	bl	1a0bc <timeout_to_int32>
   1a1ae:	4602      	mov	r2, r0
   1a1b0:	9b06      	ldr	r3, [sp, #24]
   1a1b2:	4629      	mov	r1, r5
   1a1b4:	4620      	mov	r0, r4
   1a1b6:	47b0      	blx	r6
}
   1a1b8:	bd70      	pop	{r4, r5, r6, pc}

0001a1ba <net_context_check>:
	switch (family) {
   1a1ba:	2803      	cmp	r0, #3
   1a1bc:	d021      	beq.n	1a202 <net_context_check+0x48>
   1a1be:	d811      	bhi.n	1a1e4 <net_context_check+0x2a>
   1a1c0:	f100 3cff 	add.w	ip, r0, #4294967295
   1a1c4:	fa1f fc8c 	uxth.w	ip, ip
   1a1c8:	f1bc 0f01 	cmp.w	ip, #1
   1a1cc:	d81c      	bhi.n	1a208 <net_context_check+0x4e>
		if (family == AF_INET6 && !IS_ENABLED(CONFIG_NET_IPV6)) {
   1a1ce:	2802      	cmp	r0, #2
   1a1d0:	d020      	beq.n	1a214 <net_context_check+0x5a>
		switch (type) {
   1a1d2:	2902      	cmp	r1, #2
   1a1d4:	d00b      	beq.n	1a1ee <net_context_check+0x34>
   1a1d6:	2903      	cmp	r1, #3
   1a1d8:	d00b      	beq.n	1a1f2 <net_context_check+0x38>
   1a1da:	2901      	cmp	r1, #1
   1a1dc:	d00c      	beq.n	1a1f8 <net_context_check+0x3e>
   1a1de:	f06f 006a 	mvn.w	r0, #106	; 0x6a
   1a1e2:	4770      	bx	lr
	switch (family) {
   1a1e4:	2804      	cmp	r0, #4
   1a1e6:	d112      	bne.n	1a20e <net_context_check+0x54>
			return -EPFNOSUPPORT;
   1a1e8:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   1a1ec:	4770      	bx	lr
			if (proto != IPPROTO_UDP) {
   1a1ee:	2a11      	cmp	r2, #17
   1a1f0:	d113      	bne.n	1a21a <net_context_check+0x60>
	if (!context) {
   1a1f2:	b1ab      	cbz	r3, 1a220 <net_context_check+0x66>
	return 0;
   1a1f4:	2000      	movs	r0, #0
   1a1f6:	4770      	bx	lr
			if (proto != IPPROTO_TCP) {
   1a1f8:	2a06      	cmp	r2, #6
   1a1fa:	d0fa      	beq.n	1a1f2 <net_context_check+0x38>
				return -EPROTONOSUPPORT;
   1a1fc:	f06f 007a 	mvn.w	r0, #122	; 0x7a
   1a200:	4770      	bx	lr
			return -EPFNOSUPPORT;
   1a202:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   1a206:	4770      	bx	lr
	switch (family) {
   1a208:	f06f 0069 	mvn.w	r0, #105	; 0x69
   1a20c:	4770      	bx	lr
   1a20e:	f06f 0069 	mvn.w	r0, #105	; 0x69
   1a212:	4770      	bx	lr
			return -EPFNOSUPPORT;
   1a214:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   1a218:	4770      	bx	lr
				return -EPROTONOSUPPORT;
   1a21a:	f06f 007a 	mvn.w	r0, #122	; 0x7a
   1a21e:	4770      	bx	lr
		return -EINVAL;
   1a220:	f06f 0015 	mvn.w	r0, #21
}
   1a224:	4770      	bx	lr

0001a226 <get_context_priority>:
}
   1a226:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1a22a:	4770      	bx	lr

0001a22c <get_context_proxy>:
}
   1a22c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1a230:	4770      	bx	lr

0001a232 <get_context_txtime>:
}
   1a232:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1a236:	4770      	bx	lr

0001a238 <get_context_rcvtimeo>:
}
   1a238:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1a23c:	4770      	bx	lr

0001a23e <get_context_sndtimeo>:
}
   1a23e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1a242:	4770      	bx	lr

0001a244 <get_context_rcvbuf>:
}
   1a244:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1a248:	4770      	bx	lr

0001a24a <get_context_sndbuf>:
}
   1a24a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1a24e:	4770      	bx	lr

0001a250 <get_context_dscp_ecn>:
	*((int *)value) = context->options.dscp_ecn;
   1a250:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
   1a254:	600b      	str	r3, [r1, #0]
	if (len) {
   1a256:	4613      	mov	r3, r2
   1a258:	b10a      	cbz	r2, 1a25e <get_context_dscp_ecn+0xe>
		*len = sizeof(int);
   1a25a:	2204      	movs	r2, #4
   1a25c:	601a      	str	r2, [r3, #0]
}
   1a25e:	2000      	movs	r0, #0
   1a260:	4770      	bx	lr

0001a262 <set_context_priority>:
}
   1a262:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1a266:	4770      	bx	lr

0001a268 <set_context_txtime>:
}
   1a268:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1a26c:	4770      	bx	lr

0001a26e <set_context_proxy>:
}
   1a26e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1a272:	4770      	bx	lr

0001a274 <set_context_rcvtimeo>:
}
   1a274:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1a278:	4770      	bx	lr

0001a27a <set_context_sndtimeo>:
}
   1a27a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1a27e:	4770      	bx	lr

0001a280 <set_context_rcvbuf>:
}
   1a280:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1a284:	4770      	bx	lr

0001a286 <set_context_sndbuf>:
}
   1a286:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1a28a:	4770      	bx	lr

0001a28c <set_context_dscp_ecn>:
	int dscp_ecn = *((int *)value);
   1a28c:	680b      	ldr	r3, [r1, #0]
	if (len != sizeof(int)) {
   1a28e:	2a04      	cmp	r2, #4
   1a290:	d105      	bne.n	1a29e <set_context_dscp_ecn+0x12>
	if ((dscp_ecn < 0) || (dscp_ecn > UINT8_MAX)) {
   1a292:	2bff      	cmp	r3, #255	; 0xff
   1a294:	d806      	bhi.n	1a2a4 <set_context_dscp_ecn+0x18>
	context->options.dscp_ecn = (uint8_t)dscp_ecn;
   1a296:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
	return 0;
   1a29a:	2000      	movs	r0, #0
   1a29c:	4770      	bx	lr
		return -EINVAL;
   1a29e:	f06f 0015 	mvn.w	r0, #21
   1a2a2:	4770      	bx	lr
		return -EINVAL;
   1a2a4:	f06f 0015 	mvn.w	r0, #21
}
   1a2a8:	4770      	bx	lr

0001a2aa <find_available_port>:
{
   1a2aa:	b570      	push	{r4, r5, r6, lr}
   1a2ac:	4606      	mov	r6, r0
   1a2ae:	460d      	mov	r5, r1
	return z_impl_sys_rand32_get();
   1a2b0:	f7ef ffc2 	bl	a238 <z_impl_sys_rand32_get>
		local_port = sys_rand32_get() | 0x8000;
   1a2b4:	ea6f 4040 	mvn.w	r0, r0, lsl #17
   1a2b8:	ea6f 4050 	mvn.w	r0, r0, lsr #17
   1a2bc:	b283      	uxth	r3, r0
				 htons(local_port), addr) == -EEXIST);
   1a2be:	f3c0 2407 	ubfx	r4, r0, #8, #8
	} while (check_used_port(net_context_get_proto(context),
   1a2c2:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
   1a2c6:	b2a4      	uxth	r4, r4
   1a2c8:	462a      	mov	r2, r5
   1a2ca:	4621      	mov	r1, r4
   1a2cc:	f896 0086 	ldrb.w	r0, [r6, #134]	; 0x86
   1a2d0:	f7ed f87a 	bl	73c8 <check_used_port>
				 htons(local_port), addr) == -EEXIST);
   1a2d4:	f110 0f11 	cmn.w	r0, #17
   1a2d8:	d0ea      	beq.n	1a2b0 <find_available_port+0x6>
}
   1a2da:	4620      	mov	r0, r4
   1a2dc:	bd70      	pop	{r4, r5, r6, pc}

0001a2de <net_context_packet_received>:
{
   1a2de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a2e2:	b083      	sub	sp, #12
   1a2e4:	460d      	mov	r5, r1
   1a2e6:	4617      	mov	r7, r2
   1a2e8:	4698      	mov	r8, r3
	struct net_context *context = find_context(conn);
   1a2ea:	f7ed f8a7 	bl	743c <find_context>
   1a2ee:	4604      	mov	r4, r0
	k_mutex_lock(&context->lock, K_FOREVER);
   1a2f0:	f100 0608 	add.w	r6, r0, #8
	return z_impl_k_mutex_lock(mutex, timeout);
   1a2f4:	f04f 32ff 	mov.w	r2, #4294967295
   1a2f8:	f04f 33ff 	mov.w	r3, #4294967295
   1a2fc:	4630      	mov	r0, r6
   1a2fe:	f7f6 fe87 	bl	11010 <z_impl_k_mutex_lock>
	context->iface = net_if_get_by_iface(iface);
   1a302:	69a8      	ldr	r0, [r5, #24]
   1a304:	f7ec fe6a 	bl	6fdc <net_if_get_by_iface>
   1a308:	f884 008a 	strb.w	r0, [r4, #138]	; 0x8a
	pkt->context = ctx;
   1a30c:	616c      	str	r4, [r5, #20]
	if (!context->recv_cb) {
   1a30e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1a310:	b1ab      	cbz	r3, 1a33e <net_context_packet_received+0x60>
	k_sem_give(&context->recv_data_wait);
   1a312:	f104 0040 	add.w	r0, r4, #64	; 0x40
	z_impl_k_sem_give(sem);
   1a316:	f7f6 ff7b 	bl	11210 <z_impl_k_sem_give>
	return z_impl_k_mutex_unlock(mutex);
   1a31a:	4630      	mov	r0, r6
   1a31c:	f7f6 fefc 	bl	11118 <z_impl_k_mutex_unlock>
	context->recv_cb(context, pkt, ip_hdr, proto_hdr, 0, user_data);
   1a320:	f8d4 9030 	ldr.w	r9, [r4, #48]	; 0x30
   1a324:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a326:	9301      	str	r3, [sp, #4]
   1a328:	2600      	movs	r6, #0
   1a32a:	9600      	str	r6, [sp, #0]
   1a32c:	4643      	mov	r3, r8
   1a32e:	463a      	mov	r2, r7
   1a330:	4629      	mov	r1, r5
   1a332:	4620      	mov	r0, r4
   1a334:	47c8      	blx	r9
	return verdict;
   1a336:	4630      	mov	r0, r6
}
   1a338:	b003      	add	sp, #12
   1a33a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1a33e:	4630      	mov	r0, r6
   1a340:	f7f6 feea 	bl	11118 <z_impl_k_mutex_unlock>
	return verdict;
   1a344:	2002      	movs	r0, #2
   1a346:	e7f7      	b.n	1a338 <net_context_packet_received+0x5a>

0001a348 <atomic_test_bit>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1a348:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a34a:	f3bf 8f5b 	dmb	ish
   1a34e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
   1a352:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1a356:	f001 011f 	and.w	r1, r1, #31
   1a35a:	4108      	asrs	r0, r1
}
   1a35c:	f000 0001 	and.w	r0, r0, #1
   1a360:	4770      	bx	lr

0001a362 <net_if_is_up>:
	if (iface == NULL) {
   1a362:	b188      	cbz	r0, 1a388 <net_if_is_up+0x26>
{
   1a364:	b510      	push	{r4, lr}
   1a366:	4604      	mov	r4, r0
	return atomic_test_bit(iface->if_dev->flags, value);
   1a368:	6800      	ldr	r0, [r0, #0]
   1a36a:	2100      	movs	r1, #0
   1a36c:	300c      	adds	r0, #12
   1a36e:	f7ff ffeb 	bl	1a348 <atomic_test_bit>
	return net_if_flag_is_set(iface, NET_IF_UP) &&
   1a372:	b908      	cbnz	r0, 1a378 <net_if_is_up+0x16>
   1a374:	2000      	movs	r0, #0
}
   1a376:	bd10      	pop	{r4, pc}
	return atomic_test_bit(iface->if_dev->flags, value);
   1a378:	6820      	ldr	r0, [r4, #0]
   1a37a:	2108      	movs	r1, #8
   1a37c:	300c      	adds	r0, #12
   1a37e:	f7ff ffe3 	bl	1a348 <atomic_test_bit>
	return net_if_flag_is_set(iface, NET_IF_UP) &&
   1a382:	b118      	cbz	r0, 1a38c <net_if_is_up+0x2a>
   1a384:	2001      	movs	r0, #1
   1a386:	e7f6      	b.n	1a376 <net_if_is_up+0x14>
   1a388:	2000      	movs	r0, #0
}
   1a38a:	4770      	bx	lr
	return net_if_flag_is_set(iface, NET_IF_UP) &&
   1a38c:	2000      	movs	r0, #0
   1a38e:	e7f2      	b.n	1a376 <net_if_is_up+0x14>

0001a390 <context_alloc_pkt>:
{
   1a390:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a392:	b083      	sub	sp, #12
   1a394:	4604      	mov	r4, r0
   1a396:	460d      	mov	r5, r1
   1a398:	4617      	mov	r7, r2
   1a39a:	461e      	mov	r6, r3
	return net_if_get_by_index(context->iface);
   1a39c:	f990 008a 	ldrsb.w	r0, [r0, #138]	; 0x8a
   1a3a0:	f7ec fa76 	bl	6890 <z_impl_net_if_get_by_index>
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
   1a3a4:	f8b4 2088 	ldrh.w	r2, [r4, #136]	; 0x88
	pkt = net_pkt_alloc_with_buffer(net_context_get_iface(context), len,
   1a3a8:	9700      	str	r7, [sp, #0]
   1a3aa:	9601      	str	r6, [sp, #4]
   1a3ac:	f894 3086 	ldrb.w	r3, [r4, #134]	; 0x86
   1a3b0:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   1a3b4:	4629      	mov	r1, r5
   1a3b6:	f7ed fb81 	bl	7abc <net_pkt_alloc_with_buffer>
	if (pkt) {
   1a3ba:	b100      	cbz	r0, 1a3be <context_alloc_pkt+0x2e>
   1a3bc:	6144      	str	r4, [r0, #20]
}
   1a3be:	b003      	add	sp, #12
   1a3c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001a3c2 <context_finalize_packet>:
{
   1a3c2:	b538      	push	{r3, r4, r5, lr}
   1a3c4:	4605      	mov	r5, r0
   1a3c6:	460c      	mov	r4, r1
	net_pkt_cursor_init(pkt);
   1a3c8:	4608      	mov	r0, r1
   1a3ca:	f000 ff09 	bl	1b1e0 <net_pkt_cursor_init>
   1a3ce:	f8b5 3088 	ldrh.w	r3, [r5, #136]	; 0x88
   1a3d2:	f3c3 03c2 	ubfx	r3, r3, #3, #3
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
   1a3d6:	2b01      	cmp	r3, #1
   1a3d8:	d000      	beq.n	1a3dc <context_finalize_packet+0x1a>
}
   1a3da:	bd38      	pop	{r3, r4, r5, pc}
		net_ipv4_finalize(pkt, net_context_get_proto(context));
   1a3dc:	f895 1086 	ldrb.w	r1, [r5, #134]	; 0x86
   1a3e0:	4620      	mov	r0, r4
   1a3e2:	f001 fd51 	bl	1be88 <net_ipv4_finalize>
}
   1a3e6:	e7f8      	b.n	1a3da <context_finalize_packet+0x18>

0001a3e8 <context_write_data>:
{
   1a3e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a3ec:	4680      	mov	r8, r0
   1a3ee:	4615      	mov	r5, r2
	if (msghdr) {
   1a3f0:	b1c3      	cbz	r3, 1a424 <context_write_data+0x3c>
   1a3f2:	461f      	mov	r7, r3
		for (i = 0; i < msghdr->msg_iovlen; i++) {
   1a3f4:	2400      	movs	r4, #0
	int ret = 0;
   1a3f6:	4620      	mov	r0, r4
		for (i = 0; i < msghdr->msg_iovlen; i++) {
   1a3f8:	68fb      	ldr	r3, [r7, #12]
   1a3fa:	42a3      	cmp	r3, r4
   1a3fc:	d914      	bls.n	1a428 <context_write_data+0x40>
			int len = MIN(msghdr->msg_iov[i].iov_len, buf_len);
   1a3fe:	68bb      	ldr	r3, [r7, #8]
   1a400:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
   1a404:	6852      	ldr	r2, [r2, #4]
   1a406:	42aa      	cmp	r2, r5
   1a408:	bf28      	it	cs
   1a40a:	462a      	movcs	r2, r5
   1a40c:	4616      	mov	r6, r2
			ret = net_pkt_write(pkt, msghdr->msg_iov[i].iov_base,
   1a40e:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
   1a412:	4640      	mov	r0, r8
   1a414:	f001 f95b 	bl	1b6ce <net_pkt_write>
			if (ret < 0) {
   1a418:	2800      	cmp	r0, #0
   1a41a:	db05      	blt.n	1a428 <context_write_data+0x40>
			if (buf_len == 0) {
   1a41c:	1bad      	subs	r5, r5, r6
   1a41e:	d003      	beq.n	1a428 <context_write_data+0x40>
		for (i = 0; i < msghdr->msg_iovlen; i++) {
   1a420:	3401      	adds	r4, #1
   1a422:	e7e9      	b.n	1a3f8 <context_write_data+0x10>
		ret = net_pkt_write(pkt, buf, buf_len);
   1a424:	f001 f953 	bl	1b6ce <net_pkt_write>
}
   1a428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001a42c <net_context_ref>:
	int old_rc = atomic_inc(&context->refcount);
   1a42c:	1d03      	adds	r3, r0, #4
}
   1a42e:	f3bf 8f5b 	dmb	ish
   1a432:	e853 0f00 	ldrex	r0, [r3]
   1a436:	3001      	adds	r0, #1
   1a438:	e843 0200 	strex	r2, r0, [r3]
   1a43c:	2a00      	cmp	r2, #0
   1a43e:	d1f8      	bne.n	1a432 <net_context_ref+0x6>
   1a440:	f3bf 8f5b 	dmb	ish
   1a444:	4770      	bx	lr

0001a446 <net_context_unref>:
{
   1a446:	b538      	push	{r3, r4, r5, lr}
   1a448:	4604      	mov	r4, r0
	int old_rc = atomic_dec(&context->refcount);
   1a44a:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1a44c:	f3bf 8f5b 	dmb	ish
   1a450:	e853 0f00 	ldrex	r0, [r3]
   1a454:	1e42      	subs	r2, r0, #1
   1a456:	e843 2100 	strex	r1, r2, [r3]
   1a45a:	2900      	cmp	r1, #0
   1a45c:	d1f8      	bne.n	1a450 <net_context_unref+0xa>
   1a45e:	f3bf 8f5b 	dmb	ish
	if (old_rc != 1) {
   1a462:	2801      	cmp	r0, #1
   1a464:	d001      	beq.n	1a46a <net_context_unref+0x24>
		return old_rc - 1;
   1a466:	3801      	subs	r0, #1
}
   1a468:	bd38      	pop	{r3, r4, r5, pc}
	k_mutex_lock(&context->lock, K_FOREVER);
   1a46a:	f104 0508 	add.w	r5, r4, #8
	return z_impl_k_mutex_lock(mutex, timeout);
   1a46e:	f04f 32ff 	mov.w	r2, #4294967295
   1a472:	f04f 33ff 	mov.w	r3, #4294967295
   1a476:	4628      	mov	r0, r5
   1a478:	f7f6 fdca 	bl	11010 <z_impl_k_mutex_lock>
	net_tcp_unref(context);
   1a47c:	4620      	mov	r0, r4
   1a47e:	f002 fa64 	bl	1c94a <net_tcp_unref>
	if (context->conn_handler) {
   1a482:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1a484:	b118      	cbz	r0, 1a48e <net_context_unref+0x48>
			net_conn_unregister(context->conn_handler);
   1a486:	f7ed fdc1 	bl	800c <net_conn_unregister>
		context->conn_handler = NULL;
   1a48a:	2300      	movs	r3, #0
   1a48c:	62e3      	str	r3, [r4, #44]	; 0x2c
	context->flags &= ~(NET_CONTEXT_STATE_MASK << NET_CONTEXT_STATE_SHIFT);
   1a48e:	f8b4 3088 	ldrh.w	r3, [r4, #136]	; 0x88
   1a492:	f023 0206 	bic.w	r2, r3, #6
   1a496:	f8a4 2088 	strh.w	r2, [r4, #136]	; 0x88
	context->flags &= ~NET_CONTEXT_IN_USE;
   1a49a:	f023 0307 	bic.w	r3, r3, #7
   1a49e:	f8a4 3088 	strh.w	r3, [r4, #136]	; 0x88
	return z_impl_k_mutex_unlock(mutex);
   1a4a2:	4628      	mov	r0, r5
   1a4a4:	f7f6 fe38 	bl	11118 <z_impl_k_mutex_unlock>
	return 0;
   1a4a8:	2000      	movs	r0, #0
   1a4aa:	e7dd      	b.n	1a468 <net_context_unref+0x22>

0001a4ac <net_context_bind>:
{
   1a4ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a4b0:	b082      	sub	sp, #8
	if (context->conn_handler) {
   1a4b2:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   1a4b4:	2f00      	cmp	r7, #0
   1a4b6:	f040 8083 	bne.w	1a5c0 <net_context_bind+0x114>
   1a4ba:	4604      	mov	r4, r0
   1a4bc:	460d      	mov	r5, r1
   1a4be:	4616      	mov	r6, r2
	if (IS_ENABLED(CONFIG_NET_IPV4) && addr->sa_family == AF_INET) {
   1a4c0:	880b      	ldrh	r3, [r1, #0]
   1a4c2:	2b01      	cmp	r3, #1
   1a4c4:	d17f      	bne.n	1a5c6 <net_context_bind+0x11a>
		struct net_if *iface = NULL;
   1a4c6:	2300      	movs	r3, #0
   1a4c8:	9301      	str	r3, [sp, #4]
		if (addrlen < sizeof(struct sockaddr_in)) {
   1a4ca:	2a07      	cmp	r2, #7
   1a4cc:	d969      	bls.n	1a5a2 <net_context_bind+0xf6>
	return context->flags & NET_CONTEXT_BOUND_TO_IFACE;
   1a4ce:	f8b0 3088 	ldrh.w	r3, [r0, #136]	; 0x88
		if (net_context_is_bound_to_iface(context)) {
   1a4d2:	f413 6f00 	tst.w	r3, #2048	; 0x800
   1a4d6:	d120      	bne.n	1a51a <net_context_bind+0x6e>
		if (net_ipv4_is_addr_mcast(&addr4->sin_addr)) {
   1a4d8:	f105 0804 	add.w	r8, r5, #4
   1a4dc:	4640      	mov	r0, r8
   1a4de:	f7ff fdd9 	bl	1a094 <net_ipv4_is_addr_mcast>
   1a4e2:	bb00      	cbnz	r0, 1a526 <net_context_bind+0x7a>
		} else if (addr4->sin_addr.s_addr == INADDR_ANY) {
   1a4e4:	686b      	ldr	r3, [r5, #4]
   1a4e6:	bb6b      	cbnz	r3, 1a544 <net_context_bind+0x98>
			if (iface == NULL) {
   1a4e8:	9b01      	ldr	r3, [sp, #4]
   1a4ea:	b32b      	cbz	r3, 1a538 <net_context_bind+0x8c>
			ptr = (struct in_addr *)net_ipv4_unspecified_address();
   1a4ec:	f7ec ff64 	bl	73b8 <net_ipv4_unspecified_address>
   1a4f0:	4607      	mov	r7, r0
		if (!iface) {
   1a4f2:	9801      	ldr	r0, [sp, #4]
   1a4f4:	2800      	cmp	r0, #0
   1a4f6:	d060      	beq.n	1a5ba <net_context_bind+0x10e>
	return (iface->if_dev->offload != NULL);
   1a4f8:	6803      	ldr	r3, [r0, #0]
   1a4fa:	699b      	ldr	r3, [r3, #24]
		if (IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   1a4fc:	b373      	cbz	r3, 1a55c <net_context_bind+0xb0>
	context->iface = net_if_get_by_iface(iface);
   1a4fe:	f7ec fd6d 	bl	6fdc <net_if_get_by_iface>
   1a502:	f884 008a 	strb.w	r0, [r4, #138]	; 0x8a
			return net_offload_bind(iface,
   1a506:	9b01      	ldr	r3, [sp, #4]
	return iface->if_dev->offload;
   1a508:	681b      	ldr	r3, [r3, #0]
   1a50a:	699b      	ldr	r3, [r3, #24]
	return net_if_offload(iface)->bind(context, addr, addrlen);
   1a50c:	685b      	ldr	r3, [r3, #4]
   1a50e:	4632      	mov	r2, r6
   1a510:	4629      	mov	r1, r5
   1a512:	4620      	mov	r0, r4
   1a514:	4798      	blx	r3
   1a516:	4605      	mov	r5, r0
   1a518:	e045      	b.n	1a5a6 <net_context_bind+0xfa>
	return net_if_get_by_index(context->iface);
   1a51a:	f990 008a 	ldrsb.w	r0, [r0, #138]	; 0x8a
   1a51e:	f7ec f9b7 	bl	6890 <z_impl_net_if_get_by_index>
			iface = net_context_get_iface(context);
   1a522:	9001      	str	r0, [sp, #4]
   1a524:	e7d8      	b.n	1a4d8 <net_context_bind+0x2c>
			maddr = net_if_ipv4_maddr_lookup(&addr4->sin_addr,
   1a526:	a901      	add	r1, sp, #4
   1a528:	4640      	mov	r0, r8
   1a52a:	f7ec fc49 	bl	6dc0 <net_if_ipv4_maddr_lookup>
			if (!maddr) {
   1a52e:	4607      	mov	r7, r0
   1a530:	2800      	cmp	r0, #0
   1a532:	d03c      	beq.n	1a5ae <net_context_bind+0x102>
			ptr = &maddr->address.in_addr;
   1a534:	3704      	adds	r7, #4
   1a536:	e7dc      	b.n	1a4f2 <net_context_bind+0x46>
				iface = net_if_ipv4_select_src_iface(
   1a538:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1a53c:	f7ec faaa 	bl	6a94 <net_if_ipv4_select_src_iface>
   1a540:	9001      	str	r0, [sp, #4]
   1a542:	e7d3      	b.n	1a4ec <net_context_bind+0x40>
					iface == NULL ? &iface : NULL);
   1a544:	9b01      	ldr	r3, [sp, #4]
			ifaddr = net_if_ipv4_addr_lookup(
   1a546:	b13b      	cbz	r3, 1a558 <net_context_bind+0xac>
   1a548:	4639      	mov	r1, r7
   1a54a:	4640      	mov	r0, r8
   1a54c:	f7ec fb22 	bl	6b94 <net_if_ipv4_addr_lookup>
			if (!ifaddr) {
   1a550:	4607      	mov	r7, r0
   1a552:	b378      	cbz	r0, 1a5b4 <net_context_bind+0x108>
			ptr = &ifaddr->address.in_addr;
   1a554:	3704      	adds	r7, #4
   1a556:	e7cc      	b.n	1a4f2 <net_context_bind+0x46>
			ifaddr = net_if_ipv4_addr_lookup(
   1a558:	af01      	add	r7, sp, #4
   1a55a:	e7f5      	b.n	1a548 <net_context_bind+0x9c>
		k_mutex_lock(&context->lock, K_FOREVER);
   1a55c:	f104 0608 	add.w	r6, r4, #8
	return z_impl_k_mutex_lock(mutex, timeout);
   1a560:	f04f 32ff 	mov.w	r2, #4294967295
   1a564:	f04f 33ff 	mov.w	r3, #4294967295
   1a568:	4630      	mov	r0, r6
   1a56a:	f7f6 fd51 	bl	11010 <z_impl_k_mutex_lock>
	context->iface = net_if_get_by_iface(iface);
   1a56e:	9801      	ldr	r0, [sp, #4]
   1a570:	f7ec fd34 	bl	6fdc <net_if_get_by_iface>
   1a574:	f884 008a 	strb.w	r0, [r4, #138]	; 0x8a
		net_sin_ptr(&context->local)->sin_family = AF_INET;
   1a578:	2301      	movs	r3, #1
   1a57a:	83a3      	strh	r3, [r4, #28]
		net_sin_ptr(&context->local)->sin_addr = ptr;
   1a57c:	6227      	str	r7, [r4, #32]
		if (addr4->sin_port) {
   1a57e:	886f      	ldrh	r7, [r5, #2]
   1a580:	b147      	cbz	r7, 1a594 <net_context_bind+0xe8>
			ret = check_used_port(AF_INET, addr4->sin_port,
   1a582:	462a      	mov	r2, r5
   1a584:	4639      	mov	r1, r7
   1a586:	4618      	mov	r0, r3
   1a588:	f7ec ff1e 	bl	73c8 <check_used_port>
			if (!ret) {
   1a58c:	4605      	mov	r5, r0
   1a58e:	b920      	cbnz	r0, 1a59a <net_context_bind+0xee>
				net_sin_ptr(&context->local)->sin_port =
   1a590:	83e7      	strh	r7, [r4, #30]
   1a592:	e002      	b.n	1a59a <net_context_bind+0xee>
				net_sin_ptr(&context->local)->sin_port;
   1a594:	8be3      	ldrh	r3, [r4, #30]
			addr4->sin_port =
   1a596:	806b      	strh	r3, [r5, #2]
		ret = 0;
   1a598:	2500      	movs	r5, #0
	return z_impl_k_mutex_unlock(mutex);
   1a59a:	4630      	mov	r0, r6
   1a59c:	f7f6 fdbc 	bl	11118 <z_impl_k_mutex_unlock>
		return ret;
   1a5a0:	e001      	b.n	1a5a6 <net_context_bind+0xfa>
			return -EINVAL;
   1a5a2:	f06f 0515 	mvn.w	r5, #21
}
   1a5a6:	4628      	mov	r0, r5
   1a5a8:	b002      	add	sp, #8
   1a5aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				return -ENOENT;
   1a5ae:	f06f 0501 	mvn.w	r5, #1
   1a5b2:	e7f8      	b.n	1a5a6 <net_context_bind+0xfa>
				return -ENOENT;
   1a5b4:	f06f 0501 	mvn.w	r5, #1
   1a5b8:	e7f5      	b.n	1a5a6 <net_context_bind+0xfa>
			return -EADDRNOTAVAIL;
   1a5ba:	f06f 057c 	mvn.w	r5, #124	; 0x7c
   1a5be:	e7f2      	b.n	1a5a6 <net_context_bind+0xfa>
		return -EISCONN;
   1a5c0:	f06f 057e 	mvn.w	r5, #126	; 0x7e
   1a5c4:	e7ef      	b.n	1a5a6 <net_context_bind+0xfa>
	return -EINVAL;
   1a5c6:	f06f 0515 	mvn.w	r5, #21
   1a5ca:	e7ec      	b.n	1a5a6 <net_context_bind+0xfa>

0001a5cc <bind_default>:
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
   1a5cc:	f8b0 3088 	ldrh.w	r3, [r0, #136]	; 0x88
   1a5d0:	f3c3 03c2 	ubfx	r3, r3, #3, #3
	if (IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET) {
   1a5d4:	2b01      	cmp	r3, #1
   1a5d6:	d117      	bne.n	1a608 <bind_default+0x3c>
{
   1a5d8:	b510      	push	{r4, lr}
   1a5da:	b082      	sub	sp, #8
   1a5dc:	4604      	mov	r4, r0
		if (net_sin_ptr(&context->local)->sin_addr) {
   1a5de:	6a03      	ldr	r3, [r0, #32]
   1a5e0:	b113      	cbz	r3, 1a5e8 <bind_default+0x1c>
			return 0;
   1a5e2:	2000      	movs	r0, #0
}
   1a5e4:	b002      	add	sp, #8
   1a5e6:	bd10      	pop	{r4, pc}
		addr4.sin_family = AF_INET;
   1a5e8:	2301      	movs	r3, #1
   1a5ea:	f8ad 3000 	strh.w	r3, [sp]
		addr4.sin_addr.s_addr = INADDR_ANY;
   1a5ee:	2300      	movs	r3, #0
   1a5f0:	9301      	str	r3, [sp, #4]
			find_available_port(context,
   1a5f2:	4669      	mov	r1, sp
   1a5f4:	f7ff fe59 	bl	1a2aa <find_available_port>
		addr4.sin_port =
   1a5f8:	f8ad 0002 	strh.w	r0, [sp, #2]
		return net_context_bind(context, (struct sockaddr *)&addr4,
   1a5fc:	2208      	movs	r2, #8
   1a5fe:	4669      	mov	r1, sp
   1a600:	4620      	mov	r0, r4
   1a602:	f7ff ff53 	bl	1a4ac <net_context_bind>
   1a606:	e7ed      	b.n	1a5e4 <bind_default+0x18>
	return -EINVAL;
   1a608:	f06f 0015 	mvn.w	r0, #21
}
   1a60c:	4770      	bx	lr

0001a60e <net_context_listen>:
{
   1a60e:	b538      	push	{r3, r4, r5, lr}
	return context->flags & NET_CONTEXT_IN_USE;
   1a610:	f8b0 3088 	ldrh.w	r3, [r0, #136]	; 0x88
	if (!net_context_is_used(context)) {
   1a614:	f013 0f01 	tst.w	r3, #1
   1a618:	d02c      	beq.n	1a674 <net_context_listen+0x66>
   1a61a:	4604      	mov	r4, r0
   1a61c:	460d      	mov	r5, r1
	return net_if_get_by_index(context->iface);
   1a61e:	f990 008a 	ldrsb.w	r0, [r0, #138]	; 0x8a
   1a622:	f7ec f935 	bl	6890 <z_impl_net_if_get_by_index>
	return (iface->if_dev->offload != NULL);
   1a626:	6803      	ldr	r3, [r0, #0]
   1a628:	699b      	ldr	r3, [r3, #24]
	if (IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   1a62a:	b153      	cbz	r3, 1a642 <net_context_listen+0x34>
   1a62c:	f994 008a 	ldrsb.w	r0, [r4, #138]	; 0x8a
   1a630:	f7ec f92e 	bl	6890 <z_impl_net_if_get_by_index>
	return iface->if_dev->offload;
   1a634:	6803      	ldr	r3, [r0, #0]
   1a636:	699b      	ldr	r3, [r3, #24]
	return net_if_offload(iface)->listen(context, backlog);
   1a638:	689b      	ldr	r3, [r3, #8]
   1a63a:	4629      	mov	r1, r5
   1a63c:	4620      	mov	r0, r4
   1a63e:	4798      	blx	r3
}
   1a640:	bd38      	pop	{r3, r4, r5, pc}
	k_mutex_lock(&context->lock, K_FOREVER);
   1a642:	f104 0508 	add.w	r5, r4, #8
	return z_impl_k_mutex_lock(mutex, timeout);
   1a646:	f04f 32ff 	mov.w	r2, #4294967295
   1a64a:	f04f 33ff 	mov.w	r3, #4294967295
   1a64e:	4628      	mov	r0, r5
   1a650:	f7f6 fcde 	bl	11010 <z_impl_k_mutex_lock>
	if (net_tcp_listen(context) >= 0) {
   1a654:	4620      	mov	r0, r4
   1a656:	f002 f981 	bl	1c95c <net_tcp_listen>
   1a65a:	2800      	cmp	r0, #0
   1a65c:	db04      	blt.n	1a668 <net_context_listen+0x5a>
	return z_impl_k_mutex_unlock(mutex);
   1a65e:	4628      	mov	r0, r5
   1a660:	f7f6 fd5a 	bl	11118 <z_impl_k_mutex_unlock>
		return 0;
   1a664:	2000      	movs	r0, #0
   1a666:	e7eb      	b.n	1a640 <net_context_listen+0x32>
   1a668:	4628      	mov	r0, r5
   1a66a:	f7f6 fd55 	bl	11118 <z_impl_k_mutex_unlock>
	return -EOPNOTSUPP;
   1a66e:	f06f 005e 	mvn.w	r0, #94	; 0x5e
   1a672:	e7e5      	b.n	1a640 <net_context_listen+0x32>
		return -EBADF;
   1a674:	f06f 0008 	mvn.w	r0, #8
   1a678:	e7e2      	b.n	1a640 <net_context_listen+0x32>

0001a67a <net_context_create_ipv4_new>:
{
   1a67a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a67c:	4606      	mov	r6, r0
   1a67e:	460c      	mov	r4, r1
   1a680:	461f      	mov	r7, r3
	if (!src) {
   1a682:	4615      	mov	r5, r2
   1a684:	b33a      	cbz	r2, 1a6d6 <net_context_create_ipv4_new+0x5c>
	return UNALIGNED_GET(&addr->s_addr) == 0;
   1a686:	682b      	ldr	r3, [r5, #0]
	if (net_ipv4_is_addr_unspecified(src)
   1a688:	b11b      	cbz	r3, 1a692 <net_context_create_ipv4_new+0x18>
	    || net_ipv4_is_addr_mcast(src)) {
   1a68a:	4628      	mov	r0, r5
   1a68c:	f7ff fd02 	bl	1a094 <net_ipv4_is_addr_mcast>
   1a690:	b130      	cbz	r0, 1a6a0 <net_context_create_ipv4_new+0x26>
		src = net_if_ipv4_select_src_addr(net_pkt_iface(pkt),
   1a692:	4639      	mov	r1, r7
   1a694:	69a0      	ldr	r0, [r4, #24]
   1a696:	f7ec fa21 	bl	6adc <net_if_ipv4_select_src_addr>
   1a69a:	4605      	mov	r5, r0
   1a69c:	6803      	ldr	r3, [r0, #0]
		if (net_ipv4_is_addr_unspecified(src)) {
   1a69e:	b1e3      	cbz	r3, 1a6da <net_context_create_ipv4_new+0x60>
}

static inline uint8_t net_context_get_ipv4_ttl(struct net_context *context)
{
	return context->ipv4_ttl;
   1a6a0:	f896 308b 	ldrb.w	r3, [r6, #139]	; 0x8b
	pkt->ipv4_ttl = ttl;
   1a6a4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	net_pkt_set_ip_dscp(pkt, net_ipv4_get_dscp(context->options.dscp_ecn));
   1a6a8:	f896 3084 	ldrb.w	r3, [r6, #132]	; 0x84
 *
 * @return Decoded DSCP value.
 */
static inline uint8_t net_ipv4_get_dscp(uint8_t tos)
{
	return (tos & NET_IPV4_DSCP_MASK) >> NET_IPV4_DSCP_OFFSET;
   1a6ac:	089b      	lsrs	r3, r3, #2
	pkt->ip_dscp = dscp;
   1a6ae:	f894 203b 	ldrb.w	r2, [r4, #59]	; 0x3b
   1a6b2:	f363 0205 	bfi	r2, r3, #0, #6
   1a6b6:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
	net_pkt_set_ip_ecn(pkt, net_ipv4_get_ecn(context->options.dscp_ecn));
   1a6ba:	f896 2084 	ldrb.w	r2, [r6, #132]	; 0x84
	pkt->ip_ecn = ecn;
   1a6be:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
   1a6c2:	f362 1387 	bfi	r3, r2, #6, #2
   1a6c6:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
	return net_ipv4_create(pkt, src, dst);
   1a6ca:	463a      	mov	r2, r7
   1a6cc:	4629      	mov	r1, r5
   1a6ce:	4620      	mov	r0, r4
   1a6d0:	f001 fbc6 	bl	1be60 <net_ipv4_create>
}
   1a6d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		src = ((struct sockaddr_in_ptr *)&context->local)->sin_addr;
   1a6d6:	6a05      	ldr	r5, [r0, #32]
   1a6d8:	e7d5      	b.n	1a686 <net_context_create_ipv4_new+0xc>
			return -EINVAL;
   1a6da:	f06f 0015 	mvn.w	r0, #21
   1a6de:	e7f9      	b.n	1a6d4 <net_context_create_ipv4_new+0x5a>

0001a6e0 <context_setup_udp_packet>:
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
   1a6e0:	f8b0 c088 	ldrh.w	ip, [r0, #136]	; 0x88
   1a6e4:	f3cc 0cc2 	ubfx	ip, ip, #3, #3
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
   1a6e8:	f1bc 0f01 	cmp.w	ip, #1
   1a6ec:	d002      	beq.n	1a6f4 <context_setup_udp_packet+0x14>
	int ret = -EINVAL;
   1a6ee:	f06f 0015 	mvn.w	r0, #21
}
   1a6f2:	4770      	bx	lr
{
   1a6f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a6f8:	4604      	mov	r4, r0
   1a6fa:	460d      	mov	r5, r1
   1a6fc:	4616      	mov	r6, r2
   1a6fe:	461f      	mov	r7, r3
		dst_port = addr4->sin_port;
   1a700:	9b07      	ldr	r3, [sp, #28]
   1a702:	f8b3 8002 	ldrh.w	r8, [r3, #2]
		ret = net_context_create_ipv4_new(context, pkt,
   1a706:	3304      	adds	r3, #4
   1a708:	2200      	movs	r2, #0
   1a70a:	f7ff ffb6 	bl	1a67a <net_context_create_ipv4_new>
	if (ret < 0) {
   1a70e:	2800      	cmp	r0, #0
   1a710:	db03      	blt.n	1a71a <context_setup_udp_packet+0x3a>
	ret = bind_default(context);
   1a712:	4620      	mov	r0, r4
   1a714:	f7ff ff5a 	bl	1a5cc <bind_default>
	if (ret) {
   1a718:	b108      	cbz	r0, 1a71e <context_setup_udp_packet+0x3e>
}
   1a71a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ret = net_udp_create(pkt,
   1a71e:	4642      	mov	r2, r8
   1a720:	8be1      	ldrh	r1, [r4, #30]
   1a722:	4628      	mov	r0, r5
   1a724:	f002 fbc0 	bl	1cea8 <net_udp_create>
	if (ret) {
   1a728:	2800      	cmp	r0, #0
   1a72a:	d1f6      	bne.n	1a71a <context_setup_udp_packet+0x3a>
	ret = context_write_data(pkt, buf, len, msg);
   1a72c:	9b06      	ldr	r3, [sp, #24]
   1a72e:	463a      	mov	r2, r7
   1a730:	4631      	mov	r1, r6
   1a732:	4628      	mov	r0, r5
   1a734:	f7ff fe58 	bl	1a3e8 <context_write_data>
	if (ret) {
   1a738:	e7ef      	b.n	1a71a <context_setup_udp_packet+0x3a>

0001a73a <context_sendto>:
{
   1a73a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a73e:	b087      	sub	sp, #28
   1a740:	461f      	mov	r7, r3
   1a742:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
   1a746:	f89d b054 	ldrb.w	fp, [sp, #84]	; 0x54
	return context->flags & NET_CONTEXT_IN_USE;
   1a74a:	f8b0 3088 	ldrh.w	r3, [r0, #136]	; 0x88
	if (!net_context_is_used(context)) {
   1a74e:	f013 0f01 	tst.w	r3, #1
   1a752:	f000 80e9 	beq.w	1a928 <context_sendto+0x1ee>
   1a756:	4605      	mov	r5, r0
   1a758:	4689      	mov	r9, r1
   1a75a:	4614      	mov	r4, r2
	if (sendto && addrlen == 0 && dst_addr == NULL && buf != NULL) {
   1a75c:	f1bb 0f00 	cmp.w	fp, #0
   1a760:	d004      	beq.n	1a76c <context_sendto+0x32>
   1a762:	f1ba 0f00 	cmp.w	sl, #0
   1a766:	d101      	bne.n	1a76c <context_sendto+0x32>
   1a768:	2f00      	cmp	r7, #0
   1a76a:	d071      	beq.n	1a850 <context_sendto+0x116>
	if (!msghdr && !dst_addr) {
   1a76c:	2f00      	cmp	r7, #0
   1a76e:	f000 80de 	beq.w	1a92e <context_sendto+0x1f4>
   1a772:	2600      	movs	r6, #0
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
   1a774:	f3c3 02c2 	ubfx	r2, r3, #3, #3
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
   1a778:	2a01      	cmp	r2, #1
   1a77a:	f040 80db 	bne.w	1a934 <context_sendto+0x1fa>
		if (msghdr) {
   1a77e:	b126      	cbz	r6, 1a78a <context_sendto+0x50>
			addr4 = msghdr->msg_name;
   1a780:	6837      	ldr	r7, [r6, #0]
			addrlen = msghdr->msg_namelen;
   1a782:	f8d6 a004 	ldr.w	sl, [r6, #4]
			if (!addr4) {
   1a786:	2f00      	cmp	r7, #0
   1a788:	d066      	beq.n	1a858 <context_sendto+0x11e>
		if (addrlen < sizeof(struct sockaddr_in)) {
   1a78a:	f1ba 0f07 	cmp.w	sl, #7
   1a78e:	f240 80d4 	bls.w	1a93a <context_sendto+0x200>
		if (!addr4->sin_addr.s_addr) {
   1a792:	687a      	ldr	r2, [r7, #4]
   1a794:	2a00      	cmp	r2, #0
   1a796:	f000 80d3 	beq.w	1a940 <context_sendto+0x206>
		if (net_sin(&context->remote)->sin_addr.s_addr == 0U &&
   1a79a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   1a79c:	b912      	cbnz	r2, 1a7a4 <context_sendto+0x6a>
   1a79e:	f413 6f00 	tst.w	r3, #2048	; 0x800
   1a7a2:	d05e      	beq.n	1a862 <context_sendto+0x128>
	if (msghdr && len == 0) {
   1a7a4:	b10e      	cbz	r6, 1a7aa <context_sendto+0x70>
   1a7a6:	2c00      	cmp	r4, #0
   1a7a8:	d06d      	beq.n	1a886 <context_sendto+0x14c>
	return net_if_get_by_index(context->iface);
   1a7aa:	f995 008a 	ldrsb.w	r0, [r5, #138]	; 0x8a
   1a7ae:	f7ec f86f 	bl	6890 <z_impl_net_if_get_by_index>
	if (iface && !net_if_is_up(iface)) {
   1a7b2:	b120      	cbz	r0, 1a7be <context_sendto+0x84>
   1a7b4:	f7ff fdd5 	bl	1a362 <net_if_is_up>
   1a7b8:	2800      	cmp	r0, #0
   1a7ba:	f000 80c4 	beq.w	1a946 <context_sendto+0x20c>
	pkt = context_alloc_pkt(context, len, PKT_WAIT_TIME);
   1a7be:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1a7c2:	2300      	movs	r3, #0
   1a7c4:	4621      	mov	r1, r4
   1a7c6:	4628      	mov	r0, r5
   1a7c8:	f7ff fde2 	bl	1a390 <context_alloc_pkt>
	if (!pkt) {
   1a7cc:	4680      	mov	r8, r0
   1a7ce:	2800      	cmp	r0, #0
   1a7d0:	f000 80bc 	beq.w	1a94c <context_sendto+0x212>
	tmp_len = net_pkt_available_payload_buffer(
   1a7d4:	f895 1086 	ldrb.w	r1, [r5, #134]	; 0x86
   1a7d8:	f000 fca6 	bl	1b128 <net_pkt_available_payload_buffer>
	if (tmp_len < len) {
   1a7dc:	42a0      	cmp	r0, r4
   1a7de:	d207      	bcs.n	1a7f0 <context_sendto+0xb6>
	return (enum net_sock_type)((context->flags & NET_CONTEXT_TYPE) >> 6);
   1a7e0:	f8b5 3088 	ldrh.w	r3, [r5, #136]	; 0x88
   1a7e4:	f3c3 1381 	ubfx	r3, r3, #6, #2
		if (net_context_get_type(context) == SOCK_DGRAM) {
   1a7e8:	2b02      	cmp	r3, #2
   1a7ea:	f000 809a 	beq.w	1a922 <context_sendto+0x1e8>
		len = tmp_len;
   1a7ee:	4604      	mov	r4, r0
	context->send_cb = cb;
   1a7f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1a7f2:	636b      	str	r3, [r5, #52]	; 0x34
	context->user_data = user_data;
   1a7f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1a7f6:	602b      	str	r3, [r5, #0]
	return net_if_get_by_index(context->iface);
   1a7f8:	f995 008a 	ldrsb.w	r0, [r5, #138]	; 0x8a
   1a7fc:	f7ec f848 	bl	6890 <z_impl_net_if_get_by_index>
	return (iface->if_dev->offload != NULL);
   1a800:	6803      	ldr	r3, [r0, #0]
   1a802:	699b      	ldr	r3, [r3, #24]
	if (IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   1a804:	2b00      	cmp	r3, #0
   1a806:	d050      	beq.n	1a8aa <context_sendto+0x170>
		ret = context_write_data(pkt, buf, len, msghdr);
   1a808:	4633      	mov	r3, r6
   1a80a:	4622      	mov	r2, r4
   1a80c:	4649      	mov	r1, r9
   1a80e:	4640      	mov	r0, r8
   1a810:	f7ff fdea 	bl	1a3e8 <context_write_data>
		if (ret < 0) {
   1a814:	1e06      	subs	r6, r0, #0
   1a816:	db50      	blt.n	1a8ba <context_sendto+0x180>
		net_pkt_cursor_init(pkt);
   1a818:	4640      	mov	r0, r8
   1a81a:	f000 fce1 	bl	1b1e0 <net_pkt_cursor_init>
		if (sendto) {
   1a81e:	f1bb 0f00 	cmp.w	fp, #0
   1a822:	d032      	beq.n	1a88a <context_sendto+0x150>
   1a824:	f995 008a 	ldrsb.w	r0, [r5, #138]	; 0x8a
   1a828:	f7ec f832 	bl	6890 <z_impl_net_if_get_by_index>
			ret = net_offload_sendto(net_context_get_iface(context),
   1a82c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1a82e:	9304      	str	r3, [sp, #16]
   1a830:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   1a834:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1a838:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1a83a:	9300      	str	r3, [sp, #0]
   1a83c:	4653      	mov	r3, sl
   1a83e:	463a      	mov	r2, r7
   1a840:	4641      	mov	r1, r8
   1a842:	f7ff fc94 	bl	1a16e <net_offload_sendto>
   1a846:	4606      	mov	r6, r0
	if (ret < 0) {
   1a848:	2e00      	cmp	r6, #0
   1a84a:	db36      	blt.n	1a8ba <context_sendto+0x180>
	return len;
   1a84c:	4626      	mov	r6, r4
   1a84e:	e037      	b.n	1a8c0 <context_sendto+0x186>
	if (sendto && addrlen == 0 && dst_addr == NULL && buf != NULL) {
   1a850:	2900      	cmp	r1, #0
   1a852:	d08b      	beq.n	1a76c <context_sendto+0x32>
		msghdr = buf;
   1a854:	460e      	mov	r6, r1
   1a856:	e78d      	b.n	1a774 <context_sendto+0x3a>
				addr4 = net_sin(&context->remote);
   1a858:	f105 0724 	add.w	r7, r5, #36	; 0x24
				addrlen = sizeof(struct sockaddr_in);
   1a85c:	f04f 0a08 	mov.w	sl, #8
   1a860:	e793      	b.n	1a78a <context_sendto+0x50>
			iface = net_if_ipv4_select_src_iface(&addr4->sin_addr);
   1a862:	1d38      	adds	r0, r7, #4
   1a864:	f7ec f916 	bl	6a94 <net_if_ipv4_select_src_iface>
	context->iface = net_if_get_by_iface(iface);
   1a868:	f7ec fbb8 	bl	6fdc <net_if_get_by_iface>
   1a86c:	f885 008a 	strb.w	r0, [r5, #138]	; 0x8a
}
   1a870:	e798      	b.n	1a7a4 <context_sendto+0x6a>
			len += msghdr->msg_iov[i].iov_len;
   1a872:	68b2      	ldr	r2, [r6, #8]
   1a874:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   1a878:	6852      	ldr	r2, [r2, #4]
   1a87a:	4414      	add	r4, r2
		for (i = 0; i < msghdr->msg_iovlen; i++) {
   1a87c:	3301      	adds	r3, #1
   1a87e:	68f2      	ldr	r2, [r6, #12]
   1a880:	429a      	cmp	r2, r3
   1a882:	d8f6      	bhi.n	1a872 <context_sendto+0x138>
   1a884:	e791      	b.n	1a7aa <context_sendto+0x70>
   1a886:	2300      	movs	r3, #0
   1a888:	e7f9      	b.n	1a87e <context_sendto+0x144>
	return net_if_get_by_index(context->iface);
   1a88a:	f995 008a 	ldrsb.w	r0, [r5, #138]	; 0x8a
   1a88e:	f7eb ffff 	bl	6890 <z_impl_net_if_get_by_index>
			ret = net_offload_send(net_context_get_iface(context),
   1a892:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1a894:	9302      	str	r3, [sp, #8]
   1a896:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   1a89a:	e9cd 2300 	strd	r2, r3, [sp]
   1a89e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1a8a0:	4641      	mov	r1, r8
   1a8a2:	f7ff fc54 	bl	1a14e <net_offload_send>
   1a8a6:	4606      	mov	r6, r0
   1a8a8:	e7ce      	b.n	1a848 <context_sendto+0x10e>
	return context->proto;
   1a8aa:	f8b5 3086 	ldrh.w	r3, [r5, #134]	; 0x86
	} else if (IS_ENABLED(CONFIG_NET_UDP) &&
   1a8ae:	2b11      	cmp	r3, #17
   1a8b0:	d00a      	beq.n	1a8c8 <context_sendto+0x18e>
	} else if (IS_ENABLED(CONFIG_NET_TCP) &&
   1a8b2:	2b06      	cmp	r3, #6
   1a8b4:	d01d      	beq.n	1a8f2 <context_sendto+0x1b8>
		ret = -EPROTONOSUPPORT;
   1a8b6:	f06f 067a 	mvn.w	r6, #122	; 0x7a
	net_pkt_unref(pkt);
   1a8ba:	4640      	mov	r0, r8
   1a8bc:	f000 fbf8 	bl	1b0b0 <net_pkt_unref>
}
   1a8c0:	4630      	mov	r0, r6
   1a8c2:	b007      	add	sp, #28
   1a8c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ret = context_setup_udp_packet(context, pkt, buf, len, msghdr,
   1a8c8:	f8cd a008 	str.w	sl, [sp, #8]
   1a8cc:	9701      	str	r7, [sp, #4]
   1a8ce:	9600      	str	r6, [sp, #0]
   1a8d0:	4623      	mov	r3, r4
   1a8d2:	464a      	mov	r2, r9
   1a8d4:	4641      	mov	r1, r8
   1a8d6:	4628      	mov	r0, r5
   1a8d8:	f7ff ff02 	bl	1a6e0 <context_setup_udp_packet>
		if (ret < 0) {
   1a8dc:	1e06      	subs	r6, r0, #0
   1a8de:	dbec      	blt.n	1a8ba <context_sendto+0x180>
		context_finalize_packet(context, pkt);
   1a8e0:	4641      	mov	r1, r8
   1a8e2:	4628      	mov	r0, r5
   1a8e4:	f7ff fd6d 	bl	1a3c2 <context_finalize_packet>
		ret = net_send_data(pkt);
   1a8e8:	4640      	mov	r0, r8
   1a8ea:	f7fe fea6 	bl	1963a <net_send_data>
   1a8ee:	4606      	mov	r6, r0
   1a8f0:	e7aa      	b.n	1a848 <context_sendto+0x10e>
		ret = context_write_data(pkt, buf, len, msghdr);
   1a8f2:	4633      	mov	r3, r6
   1a8f4:	4622      	mov	r2, r4
   1a8f6:	4649      	mov	r1, r9
   1a8f8:	4640      	mov	r0, r8
   1a8fa:	f7ff fd75 	bl	1a3e8 <context_write_data>
		if (ret < 0) {
   1a8fe:	1e06      	subs	r6, r0, #0
   1a900:	dbdb      	blt.n	1a8ba <context_sendto+0x180>
		net_pkt_cursor_init(pkt);
   1a902:	4640      	mov	r0, r8
   1a904:	f000 fc6c 	bl	1b1e0 <net_pkt_cursor_init>
		ret = net_tcp_queue_data(context, pkt);
   1a908:	4641      	mov	r1, r8
   1a90a:	4628      	mov	r0, r5
   1a90c:	f7ee fc2c 	bl	9168 <net_tcp_queue_data>
		if (ret < 0) {
   1a910:	1e06      	subs	r6, r0, #0
   1a912:	dbd2      	blt.n	1a8ba <context_sendto+0x180>
		ret = net_tcp_send_data(context, cb, user_data);
   1a914:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1a916:	9911      	ldr	r1, [sp, #68]	; 0x44
   1a918:	4628      	mov	r0, r5
   1a91a:	f002 f82c 	bl	1c976 <net_tcp_send_data>
   1a91e:	4606      	mov	r6, r0
   1a920:	e792      	b.n	1a848 <context_sendto+0x10e>
			ret = -ENOMEM;
   1a922:	f06f 060b 	mvn.w	r6, #11
   1a926:	e7c8      	b.n	1a8ba <context_sendto+0x180>
		return -EBADF;
   1a928:	f06f 0608 	mvn.w	r6, #8
   1a92c:	e7c8      	b.n	1a8c0 <context_sendto+0x186>
		return -EDESTADDRREQ;
   1a92e:	f06f 0678 	mvn.w	r6, #120	; 0x78
   1a932:	e7c5      	b.n	1a8c0 <context_sendto+0x186>
		return -EINVAL;
   1a934:	f06f 0615 	mvn.w	r6, #21
   1a938:	e7c2      	b.n	1a8c0 <context_sendto+0x186>
			return -EINVAL;
   1a93a:	f06f 0615 	mvn.w	r6, #21
   1a93e:	e7bf      	b.n	1a8c0 <context_sendto+0x186>
			return -EDESTADDRREQ;
   1a940:	f06f 0678 	mvn.w	r6, #120	; 0x78
   1a944:	e7bc      	b.n	1a8c0 <context_sendto+0x186>
		return -ENETDOWN;
   1a946:	f06f 0672 	mvn.w	r6, #114	; 0x72
   1a94a:	e7b9      	b.n	1a8c0 <context_sendto+0x186>
		return -ENOBUFS;
   1a94c:	f06f 0668 	mvn.w	r6, #104	; 0x68
   1a950:	e7b6      	b.n	1a8c0 <context_sendto+0x186>

0001a952 <net_context_connect>:
{
   1a952:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a956:	b08b      	sub	sp, #44	; 0x2c
   1a958:	4604      	mov	r4, r0
   1a95a:	460d      	mov	r5, r1
   1a95c:	4616      	mov	r6, r2
   1a95e:	9307      	str	r3, [sp, #28]
	k_mutex_lock(&context->lock, K_FOREVER);
   1a960:	f100 0808 	add.w	r8, r0, #8
	return z_impl_k_mutex_lock(mutex, timeout);
   1a964:	f04f 32ff 	mov.w	r2, #4294967295
   1a968:	f04f 33ff 	mov.w	r3, #4294967295
   1a96c:	4640      	mov	r0, r8
   1a96e:	f7f6 fb4f 	bl	11010 <z_impl_k_mutex_lock>
	return context->flags & NET_CONTEXT_IN_USE;
   1a972:	f8b4 3088 	ldrh.w	r3, [r4, #136]	; 0x88
	if (!net_context_is_used(context)) {
   1a976:	f013 0f01 	tst.w	r3, #1
   1a97a:	d079      	beq.n	1aa70 <net_context_connect+0x11e>
	if (addr->sa_family != net_context_get_family(context)) {
   1a97c:	8829      	ldrh	r1, [r5, #0]
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
   1a97e:	f3c3 02c2 	ubfx	r2, r3, #3, #3
   1a982:	4291      	cmp	r1, r2
   1a984:	d177      	bne.n	1aa76 <net_context_connect+0x124>
	return (enum net_context_state)
   1a986:	f3c3 0141 	ubfx	r1, r3, #1, #2
	if (net_context_get_state(context) == NET_CONTEXT_LISTENING) {
   1a98a:	2903      	cmp	r1, #3
   1a98c:	d076      	beq.n	1aa7c <net_context_connect+0x12a>
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
   1a98e:	2a01      	cmp	r2, #1
   1a990:	d177      	bne.n	1aa82 <net_context_connect+0x130>
		if (addrlen < sizeof(struct sockaddr_in)) {
   1a992:	2e07      	cmp	r6, #7
   1a994:	d978      	bls.n	1aa88 <net_context_connect+0x136>
   1a996:	686a      	ldr	r2, [r5, #4]
   1a998:	62a2      	str	r2, [r4, #40]	; 0x28
		addr4->sin_port = net_sin(addr)->sin_port;
   1a99a:	f8b5 a002 	ldrh.w	sl, [r5, #2]
   1a99e:	f8a4 a026 	strh.w	sl, [r4, #38]	; 0x26
		addr4->sin_family = AF_INET;
   1a9a2:	2201      	movs	r2, #1
   1a9a4:	84a2      	strh	r2, [r4, #36]	; 0x24
		if (addr4->sin_addr.s_addr) {
   1a9a6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   1a9a8:	2a00      	cmp	r2, #0
   1a9aa:	d041      	beq.n	1aa30 <net_context_connect+0xde>
			context->flags |= NET_CONTEXT_REMOTE_ADDR_SET;
   1a9ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1a9b0:	f8a4 3088 	strh.w	r3, [r4, #136]	; 0x88
		ret = bind_default(context);
   1a9b4:	4620      	mov	r0, r4
   1a9b6:	f7ff fe09 	bl	1a5cc <bind_default>
		if (ret) {
   1a9ba:	4607      	mov	r7, r0
   1a9bc:	bb88      	cbnz	r0, 1aa22 <net_context_connect+0xd0>
		net_sin_ptr(&context->local)->sin_family = AF_INET;
   1a9be:	2301      	movs	r3, #1
   1a9c0:	83a3      	strh	r3, [r4, #28]
		net_sin(&local_addr)->sin_family = AF_INET;
   1a9c2:	f8ad 3020 	strh.w	r3, [sp, #32]
		net_sin(&local_addr)->sin_port = lport =
   1a9c6:	f8b4 b01e 	ldrh.w	fp, [r4, #30]
   1a9ca:	f8ad b022 	strh.w	fp, [sp, #34]	; 0x22
		if (net_sin_ptr(&context->local)->sin_addr) {
   1a9ce:	f8d4 9020 	ldr.w	r9, [r4, #32]
   1a9d2:	f1b9 0f00 	cmp.w	r9, #0
   1a9d6:	d004      	beq.n	1a9e2 <net_context_connect+0x90>
			net_ipaddr_copy(&net_sin(&local_addr)->sin_addr,
   1a9d8:	f8d9 3000 	ldr.w	r3, [r9]
   1a9dc:	9309      	str	r3, [sp, #36]	; 0x24
			laddr = &local_addr;
   1a9de:	f10d 0920 	add.w	r9, sp, #32
	return net_if_get_by_index(context->iface);
   1a9e2:	f994 008a 	ldrsb.w	r0, [r4, #138]	; 0x8a
   1a9e6:	f7eb ff53 	bl	6890 <z_impl_net_if_get_by_index>
   1a9ea:	6803      	ldr	r3, [r0, #0]
   1a9ec:	699b      	ldr	r3, [r3, #24]
	if (IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   1a9ee:	bb23      	cbnz	r3, 1aa3a <net_context_connect+0xe8>
	return (enum net_sock_type)((context->flags & NET_CONTEXT_TYPE) >> 6);
   1a9f0:	f8b4 3088 	ldrh.w	r3, [r4, #136]	; 0x88
   1a9f4:	f3c3 1381 	ubfx	r3, r3, #6, #2
	if (IS_ENABLED(CONFIG_NET_UDP) &&
   1a9f8:	2b02      	cmp	r3, #2
   1a9fa:	d031      	beq.n	1aa60 <net_context_connect+0x10e>
	} else if (IS_ENABLED(CONFIG_NET_TCP) &&
   1a9fc:	2b01      	cmp	r3, #1
   1a9fe:	d146      	bne.n	1aa8e <net_context_connect+0x13c>
		ret = net_tcp_connect(context, addr, laddr, rport, lport,
   1aa00:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1aa02:	9305      	str	r3, [sp, #20]
   1aa04:	9b07      	ldr	r3, [sp, #28]
   1aa06:	9304      	str	r3, [sp, #16]
   1aa08:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   1aa0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1aa10:	f8cd b000 	str.w	fp, [sp]
   1aa14:	4653      	mov	r3, sl
   1aa16:	464a      	mov	r2, r9
   1aa18:	4629      	mov	r1, r5
   1aa1a:	4620      	mov	r0, r4
   1aa1c:	f7ef fa38 	bl	9e90 <net_tcp_connect>
   1aa20:	4607      	mov	r7, r0
	return z_impl_k_mutex_unlock(mutex);
   1aa22:	4640      	mov	r0, r8
   1aa24:	f7f6 fb78 	bl	11118 <z_impl_k_mutex_unlock>
}
   1aa28:	4638      	mov	r0, r7
   1aa2a:	b00b      	add	sp, #44	; 0x2c
   1aa2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			context->flags &= ~NET_CONTEXT_REMOTE_ADDR_SET;
   1aa30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   1aa34:	f8a4 3088 	strh.w	r3, [r4, #136]	; 0x88
   1aa38:	e7bc      	b.n	1a9b4 <net_context_connect+0x62>
	return net_if_get_by_index(context->iface);
   1aa3a:	f994 008a 	ldrsb.w	r0, [r4, #138]	; 0x8a
   1aa3e:	f7eb ff27 	bl	6890 <z_impl_net_if_get_by_index>
		ret = net_offload_connect(
   1aa42:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1aa44:	9304      	str	r3, [sp, #16]
   1aa46:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   1aa4a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1aa4e:	9b07      	ldr	r3, [sp, #28]
   1aa50:	9300      	str	r3, [sp, #0]
   1aa52:	4633      	mov	r3, r6
   1aa54:	462a      	mov	r2, r5
   1aa56:	4621      	mov	r1, r4
   1aa58:	f7ff fb53 	bl	1a102 <net_offload_connect>
   1aa5c:	4607      	mov	r7, r0
		goto unlock;
   1aa5e:	e7e0      	b.n	1aa22 <net_context_connect+0xd0>
		if (cb) {
   1aa60:	9b07      	ldr	r3, [sp, #28]
   1aa62:	2b00      	cmp	r3, #0
   1aa64:	d0dd      	beq.n	1aa22 <net_context_connect+0xd0>
			cb(context, 0, user_data);
   1aa66:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1aa68:	2100      	movs	r1, #0
   1aa6a:	4620      	mov	r0, r4
   1aa6c:	4798      	blx	r3
   1aa6e:	e7d8      	b.n	1aa22 <net_context_connect+0xd0>
		ret = -EBADF;
   1aa70:	f06f 0708 	mvn.w	r7, #8
   1aa74:	e7d5      	b.n	1aa22 <net_context_connect+0xd0>
		ret = -EINVAL;
   1aa76:	f06f 0715 	mvn.w	r7, #21
   1aa7a:	e7d2      	b.n	1aa22 <net_context_connect+0xd0>
		ret = -EOPNOTSUPP;
   1aa7c:	f06f 075e 	mvn.w	r7, #94	; 0x5e
   1aa80:	e7cf      	b.n	1aa22 <net_context_connect+0xd0>
		ret = -EINVAL; /* Not IPv4 or IPv6 */
   1aa82:	f06f 0715 	mvn.w	r7, #21
   1aa86:	e7cc      	b.n	1aa22 <net_context_connect+0xd0>
			ret = -EINVAL;
   1aa88:	f06f 0715 	mvn.w	r7, #21
   1aa8c:	e7c9      	b.n	1aa22 <net_context_connect+0xd0>
		ret = -ENOTSUP;
   1aa8e:	f06f 0785 	mvn.w	r7, #133	; 0x85
   1aa92:	e7c6      	b.n	1aa22 <net_context_connect+0xd0>

0001aa94 <net_context_accept>:
{
   1aa94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1aa98:	b084      	sub	sp, #16
   1aa9a:	460d      	mov	r5, r1
	return context->flags & NET_CONTEXT_IN_USE;
   1aa9c:	f8b0 1088 	ldrh.w	r1, [r0, #136]	; 0x88
	if (!net_context_is_used(context)) {
   1aaa0:	f011 0f01 	tst.w	r1, #1
   1aaa4:	d041      	beq.n	1ab2a <net_context_accept+0x96>
   1aaa6:	4604      	mov	r4, r0
   1aaa8:	4690      	mov	r8, r2
   1aaaa:	461f      	mov	r7, r3
	k_mutex_lock(&context->lock, K_FOREVER);
   1aaac:	f100 0608 	add.w	r6, r0, #8
	return z_impl_k_mutex_lock(mutex, timeout);
   1aab0:	f04f 32ff 	mov.w	r2, #4294967295
   1aab4:	f04f 33ff 	mov.w	r3, #4294967295
   1aab8:	4630      	mov	r0, r6
   1aaba:	f7f6 faa9 	bl	11010 <z_impl_k_mutex_lock>
	return net_if_get_by_index(context->iface);
   1aabe:	f994 008a 	ldrsb.w	r0, [r4, #138]	; 0x8a
   1aac2:	f7eb fee5 	bl	6890 <z_impl_net_if_get_by_index>
   1aac6:	6803      	ldr	r3, [r0, #0]
   1aac8:	699b      	ldr	r3, [r3, #24]
	if (IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   1aaca:	b9ab      	cbnz	r3, 1aaf8 <net_context_accept+0x64>
		((context->flags >> NET_CONTEXT_STATE_SHIFT) &
   1aacc:	f8b4 3088 	ldrh.w	r3, [r4, #136]	; 0x88
	return (enum net_context_state)
   1aad0:	f3c3 0241 	ubfx	r2, r3, #1, #2
	if ((net_context_get_state(context) != NET_CONTEXT_LISTENING) &&
   1aad4:	2a03      	cmp	r2, #3
   1aad6:	d003      	beq.n	1aae0 <net_context_accept+0x4c>
	return (enum net_sock_type)((context->flags & NET_CONTEXT_TYPE) >> 6);
   1aad8:	f3c3 1381 	ubfx	r3, r3, #6, #2
   1aadc:	2b01      	cmp	r3, #1
   1aade:	d121      	bne.n	1ab24 <net_context_accept+0x90>
	return context->proto;
   1aae0:	f8b4 3086 	ldrh.w	r3, [r4, #134]	; 0x86
	if (net_context_get_proto(context) == IPPROTO_TCP) {
   1aae4:	2b06      	cmp	r3, #6
   1aae6:	d016      	beq.n	1ab16 <net_context_accept+0x82>
	int ret = 0;
   1aae8:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
   1aaea:	4630      	mov	r0, r6
   1aaec:	f7f6 fb14 	bl	11118 <z_impl_k_mutex_unlock>
}
   1aaf0:	4620      	mov	r0, r4
   1aaf2:	b004      	add	sp, #16
   1aaf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_if_get_by_index(context->iface);
   1aaf8:	f994 008a 	ldrsb.w	r0, [r4, #138]	; 0x8a
   1aafc:	f7eb fec8 	bl	6890 <z_impl_net_if_get_by_index>
		ret = net_offload_accept(
   1ab00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1ab02:	9302      	str	r3, [sp, #8]
   1ab04:	f8cd 8000 	str.w	r8, [sp]
   1ab08:	9701      	str	r7, [sp, #4]
   1ab0a:	462a      	mov	r2, r5
   1ab0c:	4621      	mov	r1, r4
   1ab0e:	f7ff fb0e 	bl	1a12e <net_offload_accept>
   1ab12:	4604      	mov	r4, r0
		goto unlock;
   1ab14:	e7e9      	b.n	1aaea <net_context_accept+0x56>
		ret = net_tcp_accept(context, cb, user_data);
   1ab16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1ab18:	4629      	mov	r1, r5
   1ab1a:	4620      	mov	r0, r4
   1ab1c:	f7ee f824 	bl	8b68 <net_tcp_accept>
   1ab20:	4604      	mov	r4, r0
		goto unlock;
   1ab22:	e7e2      	b.n	1aaea <net_context_accept+0x56>
		ret = -EINVAL;
   1ab24:	f06f 0415 	mvn.w	r4, #21
   1ab28:	e7df      	b.n	1aaea <net_context_accept+0x56>
		return -EBADF;
   1ab2a:	f06f 0408 	mvn.w	r4, #8
   1ab2e:	e7df      	b.n	1aaf0 <net_context_accept+0x5c>

0001ab30 <net_context_send>:
{
   1ab30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ab34:	b086      	sub	sp, #24
   1ab36:	4604      	mov	r4, r0
   1ab38:	460d      	mov	r5, r1
   1ab3a:	4690      	mov	r8, r2
   1ab3c:	461e      	mov	r6, r3
	k_mutex_lock(&context->lock, K_FOREVER);
   1ab3e:	f100 0708 	add.w	r7, r0, #8
	return z_impl_k_mutex_lock(mutex, timeout);
   1ab42:	f04f 32ff 	mov.w	r2, #4294967295
   1ab46:	f04f 33ff 	mov.w	r3, #4294967295
   1ab4a:	4638      	mov	r0, r7
   1ab4c:	f7f6 fa60 	bl	11010 <z_impl_k_mutex_lock>
	if (!(context->flags & NET_CONTEXT_REMOTE_ADDR_SET) ||
   1ab50:	f8b4 0088 	ldrh.w	r0, [r4, #136]	; 0x88
   1ab54:	f410 7f80 	tst.w	r0, #256	; 0x100
   1ab58:	d021      	beq.n	1ab9e <net_context_send+0x6e>
	    !net_sin(&context->remote)->sin_port) {
   1ab5a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
	if (!(context->flags & NET_CONTEXT_REMOTE_ADDR_SET) ||
   1ab5c:	b313      	cbz	r3, 1aba4 <net_context_send+0x74>
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
   1ab5e:	f3c0 00c2 	ubfx	r0, r0, #3, #3
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
   1ab62:	2801      	cmp	r0, #1
   1ab64:	d019      	beq.n	1ab9a <net_context_send+0x6a>
		addrlen = 0;
   1ab66:	2100      	movs	r1, #0
	ret = context_sendto(context, buf, len, &context->remote,
   1ab68:	2300      	movs	r3, #0
   1ab6a:	9305      	str	r3, [sp, #20]
   1ab6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1ab6e:	9304      	str	r3, [sp, #16]
   1ab70:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
   1ab74:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1ab78:	9601      	str	r6, [sp, #4]
   1ab7a:	9100      	str	r1, [sp, #0]
   1ab7c:	f104 0324 	add.w	r3, r4, #36	; 0x24
   1ab80:	4642      	mov	r2, r8
   1ab82:	4629      	mov	r1, r5
   1ab84:	4620      	mov	r0, r4
   1ab86:	f7ff fdd8 	bl	1a73a <context_sendto>
   1ab8a:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   1ab8c:	4638      	mov	r0, r7
   1ab8e:	f7f6 fac3 	bl	11118 <z_impl_k_mutex_unlock>
}
   1ab92:	4620      	mov	r0, r4
   1ab94:	b006      	add	sp, #24
   1ab96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		addrlen = sizeof(struct sockaddr_in);
   1ab9a:	2108      	movs	r1, #8
   1ab9c:	e7e4      	b.n	1ab68 <net_context_send+0x38>
		ret = -EDESTADDRREQ;
   1ab9e:	f06f 0478 	mvn.w	r4, #120	; 0x78
   1aba2:	e7f3      	b.n	1ab8c <net_context_send+0x5c>
   1aba4:	f06f 0478 	mvn.w	r4, #120	; 0x78
   1aba8:	e7f0      	b.n	1ab8c <net_context_send+0x5c>

0001abaa <net_context_sendmsg>:
{
   1abaa:	b5f0      	push	{r4, r5, r6, r7, lr}
   1abac:	b087      	sub	sp, #28
   1abae:	4604      	mov	r4, r0
   1abb0:	460d      	mov	r5, r1
   1abb2:	461e      	mov	r6, r3
	k_mutex_lock(&context->lock, K_FOREVER);
   1abb4:	f100 0708 	add.w	r7, r0, #8
	return z_impl_k_mutex_lock(mutex, timeout);
   1abb8:	f04f 32ff 	mov.w	r2, #4294967295
   1abbc:	f04f 33ff 	mov.w	r3, #4294967295
   1abc0:	4638      	mov	r0, r7
   1abc2:	f7f6 fa25 	bl	11010 <z_impl_k_mutex_lock>
	ret = context_sendto(context, msghdr, 0, NULL, 0,
   1abc6:	2301      	movs	r3, #1
   1abc8:	9305      	str	r3, [sp, #20]
   1abca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1abcc:	9304      	str	r3, [sp, #16]
   1abce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
   1abd2:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1abd6:	9601      	str	r6, [sp, #4]
   1abd8:	2200      	movs	r2, #0
   1abda:	9200      	str	r2, [sp, #0]
   1abdc:	4613      	mov	r3, r2
   1abde:	4629      	mov	r1, r5
   1abe0:	4620      	mov	r0, r4
   1abe2:	f7ff fdaa 	bl	1a73a <context_sendto>
   1abe6:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   1abe8:	4638      	mov	r0, r7
   1abea:	f7f6 fa95 	bl	11118 <z_impl_k_mutex_unlock>
}
   1abee:	4620      	mov	r0, r4
   1abf0:	b007      	add	sp, #28
   1abf2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001abf4 <net_context_sendto>:
{
   1abf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1abf8:	b086      	sub	sp, #24
   1abfa:	4604      	mov	r4, r0
   1abfc:	460d      	mov	r5, r1
   1abfe:	4616      	mov	r6, r2
   1ac00:	461f      	mov	r7, r3
	k_mutex_lock(&context->lock, K_FOREVER);
   1ac02:	f100 0808 	add.w	r8, r0, #8
	return z_impl_k_mutex_lock(mutex, timeout);
   1ac06:	f04f 32ff 	mov.w	r2, #4294967295
   1ac0a:	f04f 33ff 	mov.w	r3, #4294967295
   1ac0e:	4640      	mov	r0, r8
   1ac10:	f7f6 f9fe 	bl	11010 <z_impl_k_mutex_lock>
	ret = context_sendto(context, buf, len, dst_addr, addrlen,
   1ac14:	2301      	movs	r3, #1
   1ac16:	9305      	str	r3, [sp, #20]
   1ac18:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1ac1a:	9304      	str	r3, [sp, #16]
   1ac1c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   1ac20:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1ac24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1ac26:	9301      	str	r3, [sp, #4]
   1ac28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1ac2a:	9300      	str	r3, [sp, #0]
   1ac2c:	463b      	mov	r3, r7
   1ac2e:	4632      	mov	r2, r6
   1ac30:	4629      	mov	r1, r5
   1ac32:	4620      	mov	r0, r4
   1ac34:	f7ff fd81 	bl	1a73a <context_sendto>
   1ac38:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   1ac3a:	4640      	mov	r0, r8
   1ac3c:	f7f6 fa6c 	bl	11118 <z_impl_k_mutex_unlock>
}
   1ac40:	4620      	mov	r0, r4
   1ac42:	b006      	add	sp, #24
   1ac44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001ac48 <net_context_recv>:
{
   1ac48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ac4c:	b084      	sub	sp, #16
   1ac4e:	461d      	mov	r5, r3
	return context->flags & NET_CONTEXT_IN_USE;
   1ac50:	f8b0 3088 	ldrh.w	r3, [r0, #136]	; 0x88
	if (!net_context_is_used(context)) {
   1ac54:	f013 0f01 	tst.w	r3, #1
   1ac58:	d058      	beq.n	1ad0c <net_context_recv+0xc4>
   1ac5a:	4604      	mov	r4, r0
   1ac5c:	460f      	mov	r7, r1
   1ac5e:	4616      	mov	r6, r2
	k_mutex_lock(&context->lock, K_FOREVER);
   1ac60:	f100 0808 	add.w	r8, r0, #8
	return z_impl_k_mutex_lock(mutex, timeout);
   1ac64:	f04f 32ff 	mov.w	r2, #4294967295
   1ac68:	f04f 33ff 	mov.w	r3, #4294967295
   1ac6c:	4640      	mov	r0, r8
   1ac6e:	f7f6 f9cf 	bl	11010 <z_impl_k_mutex_lock>
	return net_if_get_by_index(context->iface);
   1ac72:	f994 008a 	ldrsb.w	r0, [r4, #138]	; 0x8a
   1ac76:	f7eb fe0b 	bl	6890 <z_impl_net_if_get_by_index>
   1ac7a:	6803      	ldr	r3, [r0, #0]
   1ac7c:	699b      	ldr	r3, [r3, #24]
	if (IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   1ac7e:	b943      	cbnz	r3, 1ac92 <net_context_recv+0x4a>
	return context->proto;
   1ac80:	f8b4 3086 	ldrh.w	r3, [r4, #134]	; 0x86
	if (IS_ENABLED(CONFIG_NET_UDP) &&
   1ac84:	2b11      	cmp	r3, #17
   1ac86:	d018      	beq.n	1acba <net_context_recv+0x72>
	} else if (IS_ENABLED(CONFIG_NET_TCP) &&
   1ac88:	2b06      	cmp	r3, #6
   1ac8a:	d020      	beq.n	1acce <net_context_recv+0x86>
			ret = -EPROTOTYPE;
   1ac8c:	f06f 076a 	mvn.w	r7, #106	; 0x6a
		goto unlock;
   1ac90:	e00c      	b.n	1acac <net_context_recv+0x64>
	return net_if_get_by_index(context->iface);
   1ac92:	f994 008a 	ldrsb.w	r0, [r4, #138]	; 0x8a
   1ac96:	f7eb fdfb 	bl	6890 <z_impl_net_if_get_by_index>
		ret = net_offload_recv(
   1ac9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1ac9c:	9302      	str	r3, [sp, #8]
   1ac9e:	9600      	str	r6, [sp, #0]
   1aca0:	9501      	str	r5, [sp, #4]
   1aca2:	463a      	mov	r2, r7
   1aca4:	4621      	mov	r1, r4
   1aca6:	f7ff fa78 	bl	1a19a <net_offload_recv>
   1acaa:	4607      	mov	r7, r0
	return z_impl_k_mutex_unlock(mutex);
   1acac:	4640      	mov	r0, r8
   1acae:	f7f6 fa33 	bl	11118 <z_impl_k_mutex_unlock>
}
   1acb2:	4638      	mov	r0, r7
   1acb4:	b004      	add	sp, #16
   1acb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ret = recv_udp(context, cb, timeout, user_data);
   1acba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1acbc:	9300      	str	r3, [sp, #0]
   1acbe:	4632      	mov	r2, r6
   1acc0:	462b      	mov	r3, r5
   1acc2:	4639      	mov	r1, r7
   1acc4:	4620      	mov	r0, r4
   1acc6:	f7ec fcf1 	bl	76ac <recv_udp>
   1acca:	4607      	mov	r7, r0
   1accc:	e005      	b.n	1acda <net_context_recv+0x92>
		ret = net_tcp_recv(context, cb, user_data);
   1acce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1acd0:	4639      	mov	r1, r7
   1acd2:	4620      	mov	r0, r4
   1acd4:	f001 fe58 	bl	1c988 <net_tcp_recv>
   1acd8:	4607      	mov	r7, r0
	if (ret < 0) {
   1acda:	2f00      	cmp	r7, #0
   1acdc:	dbe6      	blt.n	1acac <net_context_recv+0x64>
	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1acde:	ea55 0306 	orrs.w	r3, r5, r6
   1ace2:	d0e3      	beq.n	1acac <net_context_recv+0x64>
		k_sem_reset(&context->recv_data_wait);
   1ace4:	3440      	adds	r4, #64	; 0x40
	z_impl_k_sem_reset(sem);
   1ace6:	4620      	mov	r0, r4
   1ace8:	f7f6 fae2 	bl	112b0 <z_impl_k_sem_reset>
	return z_impl_k_mutex_unlock(mutex);
   1acec:	4640      	mov	r0, r8
   1acee:	f7f6 fa13 	bl	11118 <z_impl_k_mutex_unlock>
	return z_impl_k_sem_take(sem, timeout);
   1acf2:	4632      	mov	r2, r6
   1acf4:	462b      	mov	r3, r5
   1acf6:	4620      	mov	r0, r4
   1acf8:	f7f6 fab2 	bl	11260 <z_impl_k_sem_take>
	return z_impl_k_mutex_lock(mutex, timeout);
   1acfc:	f04f 32ff 	mov.w	r2, #4294967295
   1ad00:	f04f 33ff 	mov.w	r3, #4294967295
   1ad04:	4640      	mov	r0, r8
   1ad06:	f7f6 f983 	bl	11010 <z_impl_k_mutex_lock>
		if (ret == -EAGAIN) {
   1ad0a:	e7cf      	b.n	1acac <net_context_recv+0x64>
		return -EBADF;
   1ad0c:	f06f 0708 	mvn.w	r7, #8
   1ad10:	e7cf      	b.n	1acb2 <net_context_recv+0x6a>

0001ad12 <net_context_update_recv_wnd>:
{
   1ad12:	b570      	push	{r4, r5, r6, lr}
   1ad14:	4604      	mov	r4, r0
   1ad16:	460d      	mov	r5, r1
   1ad18:	f990 008a 	ldrsb.w	r0, [r0, #138]	; 0x8a
   1ad1c:	f7eb fdb8 	bl	6890 <z_impl_net_if_get_by_index>
   1ad20:	6803      	ldr	r3, [r0, #0]
   1ad22:	699b      	ldr	r3, [r3, #24]
	if (IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   1ad24:	b113      	cbz	r3, 1ad2c <net_context_update_recv_wnd+0x1a>
		return 0;
   1ad26:	2400      	movs	r4, #0
}
   1ad28:	4620      	mov	r0, r4
   1ad2a:	bd70      	pop	{r4, r5, r6, pc}
	k_mutex_lock(&context->lock, K_FOREVER);
   1ad2c:	f104 0608 	add.w	r6, r4, #8
   1ad30:	f04f 32ff 	mov.w	r2, #4294967295
   1ad34:	f04f 33ff 	mov.w	r3, #4294967295
   1ad38:	4630      	mov	r0, r6
   1ad3a:	f7f6 f969 	bl	11010 <z_impl_k_mutex_lock>
	ret = net_tcp_update_recv_wnd(context, delta);
   1ad3e:	4629      	mov	r1, r5
   1ad40:	4620      	mov	r0, r4
   1ad42:	f002 f822 	bl	1cd8a <net_tcp_update_recv_wnd>
   1ad46:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   1ad48:	4630      	mov	r0, r6
   1ad4a:	f7f6 f9e5 	bl	11118 <z_impl_k_mutex_unlock>
	return ret;
   1ad4e:	e7eb      	b.n	1ad28 <net_context_update_recv_wnd+0x16>

0001ad50 <pkt_buffer_length>:
{
   1ad50:	4602      	mov	r2, r0
   1ad52:	4608      	mov	r0, r1
	return pkt->family;
   1ad54:	f892 1037 	ldrb.w	r1, [r2, #55]	; 0x37
   1ad58:	0949      	lsrs	r1, r1, #5
	return pkt->iface;
   1ad5a:	6992      	ldr	r2, [r2, #24]
	if (net_pkt_iface(pkt)) {
   1ad5c:	b14a      	cbz	r2, 1ad72 <pkt_buffer_length+0x22>
	return iface->if_dev->mtu;
   1ad5e:	6812      	ldr	r2, [r2, #0]
   1ad60:	8b92      	ldrh	r2, [r2, #28]
	} else if (IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET) {
   1ad62:	2901      	cmp	r1, #1
   1ad64:	d007      	beq.n	1ad76 <pkt_buffer_length+0x26>
			max_len = size;
   1ad66:	4602      	mov	r2, r0
	max_len -= existing;
   1ad68:	1ad3      	subs	r3, r2, r3
}
   1ad6a:	4298      	cmp	r0, r3
   1ad6c:	bf28      	it	cs
   1ad6e:	4618      	movcs	r0, r3
   1ad70:	4770      	bx	lr
		max_len = 0;
   1ad72:	2200      	movs	r2, #0
   1ad74:	e7f5      	b.n	1ad62 <pkt_buffer_length+0x12>
		max_len = MAX(max_len, NET_IPV4_MTU);
   1ad76:	f5b2 7f10 	cmp.w	r2, #576	; 0x240
   1ad7a:	bf38      	it	cc
   1ad7c:	f44f 7210 	movcc.w	r2, #576	; 0x240
   1ad80:	e7f2      	b.n	1ad68 <pkt_buffer_length+0x18>

0001ad82 <pkt_estimate_headers_length>:
	if (family == AF_UNSPEC) {
   1ad82:	b191      	cbz	r1, 1adaa <pkt_estimate_headers_length+0x28>
	} else if (IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET) {
   1ad84:	2901      	cmp	r1, #1
   1ad86:	d00a      	beq.n	1ad9e <pkt_estimate_headers_length+0x1c>
	size_t hdr_len = 0;
   1ad88:	2000      	movs	r0, #0
	if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
   1ad8a:	2a06      	cmp	r2, #6
   1ad8c:	d009      	beq.n	1ada2 <pkt_estimate_headers_length+0x20>
	} else if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   1ad8e:	2a11      	cmp	r2, #17
   1ad90:	d009      	beq.n	1ada6 <pkt_estimate_headers_length+0x24>
	} else if (proto == IPPROTO_ICMP || proto == IPPROTO_ICMPV6) {
   1ad92:	2a01      	cmp	r2, #1
   1ad94:	d001      	beq.n	1ad9a <pkt_estimate_headers_length+0x18>
   1ad96:	2a3a      	cmp	r2, #58	; 0x3a
   1ad98:	d108      	bne.n	1adac <pkt_estimate_headers_length+0x2a>
		hdr_len += NET_ICMPH_LEN;
   1ad9a:	3004      	adds	r0, #4
   1ad9c:	4770      	bx	lr
		hdr_len += NET_IPV4H_LEN;
   1ad9e:	2014      	movs	r0, #20
   1ada0:	e7f3      	b.n	1ad8a <pkt_estimate_headers_length+0x8>
		hdr_len += NET_TCPH_LEN + NET_TCP_MAX_OPT_SIZE;
   1ada2:	301c      	adds	r0, #28
   1ada4:	4770      	bx	lr
		hdr_len += NET_UDPH_LEN;
   1ada6:	3008      	adds	r0, #8
   1ada8:	4770      	bx	lr
		return  0;
   1adaa:	2000      	movs	r0, #0
}
   1adac:	4770      	bx	lr

0001adae <net_pkt_find_offset>:
	return 0;
}

static int32_t net_pkt_find_offset(struct net_pkt *pkt, uint8_t *ptr)
{
	struct net_buf *buf = pkt->buffer;
   1adae:	6883      	ldr	r3, [r0, #8]
	uint32_t ret = -EINVAL;
	uint16_t offset;

	if (!(ptr && pkt && buf)) {
   1adb0:	468c      	mov	ip, r1
   1adb2:	b1b1      	cbz	r1, 1ade2 <net_pkt_find_offset+0x34>
   1adb4:	b1c3      	cbz	r3, 1ade8 <net_pkt_find_offset+0x3a>
		return ret;
	}

	offset = 0U;
   1adb6:	2200      	movs	r2, #0
   1adb8:	e003      	b.n	1adc2 <net_pkt_find_offset+0x14>
	while (buf) {
		if (buf->data <= ptr && ptr <= (buf->data + buf->len)) {
			ret = offset + (ptr - buf->data);
			break;
		}
		offset += buf->len;
   1adba:	8999      	ldrh	r1, [r3, #12]
   1adbc:	440a      	add	r2, r1
   1adbe:	b292      	uxth	r2, r2
		buf = buf->frags;
   1adc0:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1adc2:	b15b      	cbz	r3, 1addc <net_pkt_find_offset+0x2e>
		if (buf->data <= ptr && ptr <= (buf->data + buf->len)) {
   1adc4:	6899      	ldr	r1, [r3, #8]
   1adc6:	4561      	cmp	r1, ip
   1adc8:	d8f7      	bhi.n	1adba <net_pkt_find_offset+0xc>
   1adca:	8998      	ldrh	r0, [r3, #12]
   1adcc:	4408      	add	r0, r1
   1adce:	4560      	cmp	r0, ip
   1add0:	d3f3      	bcc.n	1adba <net_pkt_find_offset+0xc>
			ret = offset + (ptr - buf->data);
   1add2:	ebac 0c01 	sub.w	ip, ip, r1
   1add6:	eb02 000c 	add.w	r0, r2, ip
			break;
   1adda:	4770      	bx	lr
	uint32_t ret = -EINVAL;
   1addc:	f06f 0015 	mvn.w	r0, #21
	}

	return ret;
   1ade0:	4770      	bx	lr
		return ret;
   1ade2:	f06f 0015 	mvn.w	r0, #21
   1ade6:	4770      	bx	lr
   1ade8:	f06f 0015 	mvn.w	r0, #21
}
   1adec:	4770      	bx	lr

0001adee <pkt_get_max_len>:
{
   1adee:	b538      	push	{r3, r4, r5, lr}
	struct net_buf *buf = pkt->buffer;
   1adf0:	6884      	ldr	r4, [r0, #8]
	size_t size = 0;
   1adf2:	2500      	movs	r5, #0
	while (buf) {
   1adf4:	e005      	b.n	1ae02 <pkt_get_max_len+0x14>
	return net_buf_simple_max_len(&buf->b);
   1adf6:	f104 0008 	add.w	r0, r4, #8
   1adfa:	f7fe fb52 	bl	194a2 <net_buf_simple_max_len>
		size += net_buf_max_len(buf);
   1adfe:	4405      	add	r5, r0
		buf = buf->frags;
   1ae00:	6824      	ldr	r4, [r4, #0]
	while (buf) {
   1ae02:	2c00      	cmp	r4, #0
   1ae04:	d1f7      	bne.n	1adf6 <pkt_get_max_len+0x8>
}
   1ae06:	4628      	mov	r0, r5
   1ae08:	bd38      	pop	{r3, r4, r5, pc}

0001ae0a <pkt_cursor_jump>:
{
   1ae0a:	b538      	push	{r3, r4, r5, lr}
   1ae0c:	4604      	mov	r4, r0
   1ae0e:	460d      	mov	r5, r1
	cursor->buf = cursor->buf->frags;
   1ae10:	68c3      	ldr	r3, [r0, #12]
   1ae12:	681b      	ldr	r3, [r3, #0]
   1ae14:	60c3      	str	r3, [r0, #12]
	while (cursor->buf) {
   1ae16:	e004      	b.n	1ae22 <pkt_cursor_jump+0x18>
			write ? net_buf_max_len(cursor->buf) : cursor->buf->len;
   1ae18:	8980      	ldrh	r0, [r0, #12]
		if (!len) {
   1ae1a:	b950      	cbnz	r0, 1ae32 <pkt_cursor_jump+0x28>
			cursor->buf = cursor->buf->frags;
   1ae1c:	68e3      	ldr	r3, [r4, #12]
   1ae1e:	681b      	ldr	r3, [r3, #0]
   1ae20:	60e3      	str	r3, [r4, #12]
	while (cursor->buf) {
   1ae22:	68e0      	ldr	r0, [r4, #12]
   1ae24:	b128      	cbz	r0, 1ae32 <pkt_cursor_jump+0x28>
			write ? net_buf_max_len(cursor->buf) : cursor->buf->len;
   1ae26:	2d00      	cmp	r5, #0
   1ae28:	d0f6      	beq.n	1ae18 <pkt_cursor_jump+0xe>
   1ae2a:	3008      	adds	r0, #8
   1ae2c:	f7fe fb39 	bl	194a2 <net_buf_simple_max_len>
   1ae30:	e7f3      	b.n	1ae1a <pkt_cursor_jump+0x10>
	if (cursor->buf) {
   1ae32:	68e3      	ldr	r3, [r4, #12]
   1ae34:	b113      	cbz	r3, 1ae3c <pkt_cursor_jump+0x32>
		cursor->pos = cursor->buf->data;
   1ae36:	689b      	ldr	r3, [r3, #8]
   1ae38:	6123      	str	r3, [r4, #16]
}
   1ae3a:	bd38      	pop	{r3, r4, r5, pc}
		cursor->pos = NULL;
   1ae3c:	2300      	movs	r3, #0
   1ae3e:	6123      	str	r3, [r4, #16]
}
   1ae40:	e7fb      	b.n	1ae3a <pkt_cursor_jump+0x30>

0001ae42 <pkt_cursor_advance>:
{
   1ae42:	b538      	push	{r3, r4, r5, lr}
   1ae44:	4604      	mov	r4, r0
	if (!cursor->buf) {
   1ae46:	68c0      	ldr	r0, [r0, #12]
   1ae48:	b140      	cbz	r0, 1ae5c <pkt_cursor_advance+0x1a>
   1ae4a:	460d      	mov	r5, r1
	len = write ? net_buf_max_len(cursor->buf) : cursor->buf->len;
   1ae4c:	b939      	cbnz	r1, 1ae5e <pkt_cursor_advance+0x1c>
   1ae4e:	8980      	ldrh	r0, [r0, #12]
	if ((cursor->pos - cursor->buf->data) == len) {
   1ae50:	6923      	ldr	r3, [r4, #16]
   1ae52:	68e2      	ldr	r2, [r4, #12]
   1ae54:	6892      	ldr	r2, [r2, #8]
   1ae56:	1a9b      	subs	r3, r3, r2
   1ae58:	4283      	cmp	r3, r0
   1ae5a:	d004      	beq.n	1ae66 <pkt_cursor_advance+0x24>
}
   1ae5c:	bd38      	pop	{r3, r4, r5, pc}
   1ae5e:	3008      	adds	r0, #8
   1ae60:	f7fe fb1f 	bl	194a2 <net_buf_simple_max_len>
   1ae64:	e7f4      	b.n	1ae50 <pkt_cursor_advance+0xe>
		pkt_cursor_jump(pkt, write);
   1ae66:	4629      	mov	r1, r5
   1ae68:	4620      	mov	r0, r4
   1ae6a:	f7ff ffce 	bl	1ae0a <pkt_cursor_jump>
   1ae6e:	e7f5      	b.n	1ae5c <pkt_cursor_advance+0x1a>

0001ae70 <pkt_cursor_update>:
{
   1ae70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ae72:	4604      	mov	r4, r0
   1ae74:	460d      	mov	r5, r1
	return pkt->overwrite;
   1ae76:	f890 3037 	ldrb.w	r3, [r0, #55]	; 0x37
	if (net_pkt_is_being_overwritten(pkt)) {
   1ae7a:	f013 0f01 	tst.w	r3, #1
   1ae7e:	d107      	bne.n	1ae90 <pkt_cursor_update+0x20>
   1ae80:	4616      	mov	r6, r2
	len = write ? net_buf_max_len(cursor->buf) : cursor->buf->len;
   1ae82:	b132      	cbz	r2, 1ae92 <pkt_cursor_update+0x22>
   1ae84:	68c0      	ldr	r0, [r0, #12]
   1ae86:	3008      	adds	r0, #8
   1ae88:	f7fe fb0b 	bl	194a2 <net_buf_simple_max_len>
   1ae8c:	4607      	mov	r7, r0
   1ae8e:	e002      	b.n	1ae96 <pkt_cursor_update+0x26>
		write = false;
   1ae90:	2600      	movs	r6, #0
	len = write ? net_buf_max_len(cursor->buf) : cursor->buf->len;
   1ae92:	68e3      	ldr	r3, [r4, #12]
   1ae94:	899f      	ldrh	r7, [r3, #12]
	if (length + (cursor->pos - cursor->buf->data) == len &&
   1ae96:	6923      	ldr	r3, [r4, #16]
   1ae98:	68e0      	ldr	r0, [r4, #12]
   1ae9a:	6882      	ldr	r2, [r0, #8]
   1ae9c:	1a9b      	subs	r3, r3, r2
   1ae9e:	442b      	add	r3, r5
   1aea0:	42bb      	cmp	r3, r7
   1aea2:	d003      	beq.n	1aeac <pkt_cursor_update+0x3c>
		cursor->pos += length;
   1aea4:	6923      	ldr	r3, [r4, #16]
   1aea6:	442b      	add	r3, r5
   1aea8:	6123      	str	r3, [r4, #16]
}
   1aeaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1aeac:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
	if (length + (cursor->pos - cursor->buf->data) == len &&
   1aeb0:	f013 0f01 	tst.w	r3, #1
   1aeb4:	d004      	beq.n	1aec0 <pkt_cursor_update+0x50>
   1aeb6:	3008      	adds	r0, #8
   1aeb8:	f7fe faf3 	bl	194a2 <net_buf_simple_max_len>
	    !(net_pkt_is_being_overwritten(pkt) &&
   1aebc:	42b8      	cmp	r0, r7
   1aebe:	d8f1      	bhi.n	1aea4 <pkt_cursor_update+0x34>
		pkt_cursor_jump(pkt, write);
   1aec0:	4631      	mov	r1, r6
   1aec2:	4620      	mov	r0, r4
   1aec4:	f7ff ffa1 	bl	1ae0a <pkt_cursor_jump>
   1aec8:	e7ef      	b.n	1aeaa <pkt_cursor_update+0x3a>

0001aeca <pkt_alloc_buffer>:
{
   1aeca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aece:	b083      	sub	sp, #12
   1aed0:	4682      	mov	sl, r0
   1aed2:	460f      	mov	r7, r1
   1aed4:	4616      	mov	r6, r2
   1aed6:	461d      	mov	r5, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1aed8:	4610      	mov	r0, r2
   1aeda:	4619      	mov	r1, r3
   1aedc:	f004 fd3c 	bl	1f958 <sys_clock_timeout_end_calc>
   1aee0:	4683      	mov	fp, r0
   1aee2:	9101      	str	r1, [sp, #4]
	struct net_buf *current = NULL;
   1aee4:	f04f 0800 	mov.w	r8, #0
	struct net_buf *first = NULL;
   1aee8:	46c1      	mov	r9, r8
	while (size) {
   1aeea:	e010      	b.n	1af0e <pkt_alloc_buffer+0x44>
	if (first) {
   1aeec:	f1b9 0f00 	cmp.w	r9, #0
   1aef0:	d003      	beq.n	1aefa <pkt_alloc_buffer+0x30>
		net_buf_unref(first);
   1aef2:	4648      	mov	r0, r9
   1aef4:	f7fe f9ec 	bl	192d0 <net_buf_unref>
	return NULL;
   1aef8:	46a1      	mov	r9, r4
}
   1aefa:	4648      	mov	r0, r9
   1aefc:	b003      	add	sp, #12
   1aefe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!first && !current) {
   1af02:	f1b8 0f00 	cmp.w	r8, #0
   1af06:	d10f      	bne.n	1af28 <pkt_alloc_buffer+0x5e>
			first = new;
   1af08:	4681      	mov	r9, r0
   1af0a:	e00f      	b.n	1af2c <pkt_alloc_buffer+0x62>
		current = new;
   1af0c:	46a0      	mov	r8, r4
	while (size) {
   1af0e:	2f00      	cmp	r7, #0
   1af10:	d0f3      	beq.n	1aefa <pkt_alloc_buffer+0x30>
		new = net_buf_alloc_fixed(pool, timeout);
   1af12:	4632      	mov	r2, r6
   1af14:	462b      	mov	r3, r5
   1af16:	4650      	mov	r0, sl
   1af18:	f7fe f9d3 	bl	192c2 <net_buf_alloc_fixed>
		if (!new) {
   1af1c:	4604      	mov	r4, r0
   1af1e:	2800      	cmp	r0, #0
   1af20:	d0e4      	beq.n	1aeec <pkt_alloc_buffer+0x22>
		if (!first && !current) {
   1af22:	f1b9 0f00 	cmp.w	r9, #0
   1af26:	d0ec      	beq.n	1af02 <pkt_alloc_buffer+0x38>
			current->frags = new;
   1af28:	f8c8 4000 	str.w	r4, [r8]
		if (current->size > size) {
   1af2c:	89e3      	ldrh	r3, [r4, #14]
   1af2e:	42bb      	cmp	r3, r7
   1af30:	d900      	bls.n	1af34 <pkt_alloc_buffer+0x6a>
			current->size = size;
   1af32:	81e7      	strh	r7, [r4, #14]
		size -= current->size;
   1af34:	89e3      	ldrh	r3, [r4, #14]
   1af36:	1aff      	subs	r7, r7, r3
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1af38:	ea56 0305 	orrs.w	r3, r6, r5
   1af3c:	d0e6      	beq.n	1af0c <pkt_alloc_buffer+0x42>
   1af3e:	f1b5 3fff 	cmp.w	r5, #4294967295
   1af42:	bf08      	it	eq
   1af44:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1af48:	d0e0      	beq.n	1af0c <pkt_alloc_buffer+0x42>
			int64_t remaining = end - sys_clock_tick_get();
   1af4a:	f7f7 f8b5 	bl	120b8 <sys_clock_tick_get>
   1af4e:	ebbb 0600 	subs.w	r6, fp, r0
   1af52:	9b01      	ldr	r3, [sp, #4]
   1af54:	eb63 0501 	sbc.w	r5, r3, r1
			if (remaining <= 0) {
   1af58:	2e01      	cmp	r6, #1
   1af5a:	f175 0300 	sbcs.w	r3, r5, #0
   1af5e:	dad5      	bge.n	1af0c <pkt_alloc_buffer+0x42>
   1af60:	e7cb      	b.n	1aefa <pkt_alloc_buffer+0x30>

0001af62 <net_pkt_cursor_operate>:
{
   1af62:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1af66:	4605      	mov	r5, r0
   1af68:	4688      	mov	r8, r1
   1af6a:	4616      	mov	r6, r2
   1af6c:	4699      	mov	r9, r3
   1af6e:	f89d 7020 	ldrb.w	r7, [sp, #32]
	while (c_op->buf && length) {
   1af72:	e04a      	b.n	1b00a <net_pkt_cursor_operate+0xa8>
		pkt_cursor_advance(pkt, net_pkt_is_being_overwritten(pkt) ?
   1af74:	2100      	movs	r1, #0
   1af76:	4628      	mov	r0, r5
   1af78:	f7ff ff63 	bl	1ae42 <pkt_cursor_advance>
		if (c_op->buf == NULL) {
   1af7c:	68e8      	ldr	r0, [r5, #12]
   1af7e:	2800      	cmp	r0, #0
   1af80:	d055      	beq.n	1b02e <net_pkt_cursor_operate+0xcc>
		if (write && !net_pkt_is_being_overwritten(pkt)) {
   1af82:	b127      	cbz	r7, 1af8e <net_pkt_cursor_operate+0x2c>
   1af84:	f895 3037 	ldrb.w	r3, [r5, #55]	; 0x37
   1af88:	f013 0f01 	tst.w	r3, #1
   1af8c:	d015      	beq.n	1afba <net_pkt_cursor_operate+0x58>
			d_len = c_op->buf->len - (c_op->pos - c_op->buf->data);
   1af8e:	8984      	ldrh	r4, [r0, #12]
   1af90:	692a      	ldr	r2, [r5, #16]
   1af92:	6883      	ldr	r3, [r0, #8]
   1af94:	1ad2      	subs	r2, r2, r3
   1af96:	1aa4      	subs	r4, r4, r2
		if (!d_len) {
   1af98:	2c00      	cmp	r4, #0
   1af9a:	d048      	beq.n	1b02e <net_pkt_cursor_operate+0xcc>
		if (length < d_len) {
   1af9c:	42b4      	cmp	r4, r6
   1af9e:	d900      	bls.n	1afa2 <net_pkt_cursor_operate+0x40>
			len = length;
   1afa0:	4634      	mov	r4, r6
		if (copy) {
   1afa2:	f1b9 0f00 	cmp.w	r9, #0
   1afa6:	d014      	beq.n	1afd2 <net_pkt_cursor_operate+0x70>
			memcpy(write ? c_op->pos : data,
   1afa8:	b187      	cbz	r7, 1afcc <net_pkt_cursor_operate+0x6a>
   1afaa:	6928      	ldr	r0, [r5, #16]
   1afac:	4641      	mov	r1, r8
   1afae:	4622      	mov	r2, r4
   1afb0:	f004 ff07 	bl	1fdc2 <memcpy>
   1afb4:	e016      	b.n	1afe4 <net_pkt_cursor_operate+0x82>
		pkt_cursor_advance(pkt, net_pkt_is_being_overwritten(pkt) ?
   1afb6:	4639      	mov	r1, r7
   1afb8:	e7dd      	b.n	1af76 <net_pkt_cursor_operate+0x14>
   1afba:	3008      	adds	r0, #8
   1afbc:	f7fe fa71 	bl	194a2 <net_buf_simple_max_len>
				(c_op->pos - c_op->buf->data);
   1afc0:	692b      	ldr	r3, [r5, #16]
   1afc2:	68ea      	ldr	r2, [r5, #12]
   1afc4:	6892      	ldr	r2, [r2, #8]
   1afc6:	1a9b      	subs	r3, r3, r2
			d_len = net_buf_max_len(c_op->buf) -
   1afc8:	1ac4      	subs	r4, r0, r3
   1afca:	e7e5      	b.n	1af98 <net_pkt_cursor_operate+0x36>
			memcpy(write ? c_op->pos : data,
   1afcc:	6929      	ldr	r1, [r5, #16]
   1afce:	4640      	mov	r0, r8
   1afd0:	e7ed      	b.n	1afae <net_pkt_cursor_operate+0x4c>
		} else if (data) {
   1afd2:	f1b8 0f00 	cmp.w	r8, #0
   1afd6:	d005      	beq.n	1afe4 <net_pkt_cursor_operate+0x82>
__ssp_bos_icheck3(memset, void *, int)
   1afd8:	4622      	mov	r2, r4
   1afda:	f8d8 1000 	ldr.w	r1, [r8]
   1afde:	6928      	ldr	r0, [r5, #16]
   1afe0:	f004 ff2a 	bl	1fe38 <memset>
		if (write && !net_pkt_is_being_overwritten(pkt)) {
   1afe4:	b127      	cbz	r7, 1aff0 <net_pkt_cursor_operate+0x8e>
   1afe6:	f895 3037 	ldrb.w	r3, [r5, #55]	; 0x37
   1afea:	f013 0f01 	tst.w	r3, #1
   1afee:	d018      	beq.n	1b022 <net_pkt_cursor_operate+0xc0>
		pkt_cursor_update(pkt, len, write);
   1aff0:	463a      	mov	r2, r7
   1aff2:	4621      	mov	r1, r4
   1aff4:	4628      	mov	r0, r5
   1aff6:	f7ff ff3b 	bl	1ae70 <pkt_cursor_update>
		if (copy && data) {
   1affa:	f1b9 0f00 	cmp.w	r9, #0
   1affe:	d003      	beq.n	1b008 <net_pkt_cursor_operate+0xa6>
   1b000:	f1b8 0f00 	cmp.w	r8, #0
   1b004:	d000      	beq.n	1b008 <net_pkt_cursor_operate+0xa6>
			data = (uint8_t *) data + len;
   1b006:	44a0      	add	r8, r4
		length -= len;
   1b008:	1b36      	subs	r6, r6, r4
	while (c_op->buf && length) {
   1b00a:	68eb      	ldr	r3, [r5, #12]
   1b00c:	b17b      	cbz	r3, 1b02e <net_pkt_cursor_operate+0xcc>
   1b00e:	b176      	cbz	r6, 1b02e <net_pkt_cursor_operate+0xcc>
   1b010:	f895 3037 	ldrb.w	r3, [r5, #55]	; 0x37
		pkt_cursor_advance(pkt, net_pkt_is_being_overwritten(pkt) ?
   1b014:	f013 0f01 	tst.w	r3, #1
   1b018:	d1ac      	bne.n	1af74 <net_pkt_cursor_operate+0x12>
   1b01a:	2f00      	cmp	r7, #0
   1b01c:	d1cb      	bne.n	1afb6 <net_pkt_cursor_operate+0x54>
   1b01e:	2100      	movs	r1, #0
   1b020:	e7a9      	b.n	1af76 <net_pkt_cursor_operate+0x14>
			net_buf_add(c_op->buf, len);
   1b022:	68e8      	ldr	r0, [r5, #12]
	return net_buf_simple_add(&buf->b, len);
   1b024:	4621      	mov	r1, r4
   1b026:	3008      	adds	r0, #8
   1b028:	f7fe f9d1 	bl	193ce <net_buf_simple_add>
   1b02c:	e7e0      	b.n	1aff0 <net_pkt_cursor_operate+0x8e>
	if (length) {
   1b02e:	b916      	cbnz	r6, 1b036 <net_pkt_cursor_operate+0xd4>
	return 0;
   1b030:	2000      	movs	r0, #0
}
   1b032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -ENOBUFS;
   1b036:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1b03a:	e7fa      	b.n	1b032 <net_pkt_cursor_operate+0xd0>

0001b03c <net_pkt_get_reserve_data>:
{
   1b03c:	b570      	push	{r4, r5, r6, lr}
   1b03e:	4604      	mov	r4, r0
   1b040:	4616      	mov	r6, r2
   1b042:	461d      	mov	r5, r3
	if (k_is_in_isr()) {
   1b044:	f003 ff9b 	bl	1ef7e <k_is_in_isr>
   1b048:	b128      	cbz	r0, 1b056 <net_pkt_get_reserve_data+0x1a>
	return net_buf_alloc_fixed(pool, timeout);
   1b04a:	2200      	movs	r2, #0
   1b04c:	2300      	movs	r3, #0
   1b04e:	4620      	mov	r0, r4
   1b050:	f7fe f937 	bl	192c2 <net_buf_alloc_fixed>
}
   1b054:	bd70      	pop	{r4, r5, r6, pc}
   1b056:	4632      	mov	r2, r6
   1b058:	462b      	mov	r3, r5
   1b05a:	4620      	mov	r0, r4
   1b05c:	f7fe f931 	bl	192c2 <net_buf_alloc_fixed>
	if (!frag) {
   1b060:	e7f8      	b.n	1b054 <net_pkt_get_reserve_data+0x18>

0001b062 <net_pkt_ref>:
		ref = pkt ? atomic_get(&pkt->atomic_ref) : 0;
   1b062:	b1e8      	cbz	r0, 1b0a0 <net_pkt_ref+0x3e>
{
   1b064:	b500      	push	{lr}
   1b066:	e000      	b.n	1b06a <net_pkt_ref+0x8>
		ref = pkt ? atomic_get(&pkt->atomic_ref) : 0;
   1b068:	b1c0      	cbz	r0, 1b09c <net_pkt_ref+0x3a>
   1b06a:	f100 0220 	add.w	r2, r0, #32
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b06e:	f3bf 8f5b 	dmb	ish
   1b072:	6a03      	ldr	r3, [r0, #32]
   1b074:	f3bf 8f5b 	dmb	ish
		if (!ref) {
   1b078:	b183      	cbz	r3, 1b09c <net_pkt_ref+0x3a>
	} while (!atomic_cas(&pkt->atomic_ref, ref, ref + 1));
   1b07a:	1c59      	adds	r1, r3, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1b07c:	f3bf 8f5b 	dmb	ish
   1b080:	e852 cf00 	ldrex	ip, [r2]
   1b084:	459c      	cmp	ip, r3
   1b086:	d104      	bne.n	1b092 <net_pkt_ref+0x30>
   1b088:	e842 1e00 	strex	lr, r1, [r2]
   1b08c:	f1be 0f00 	cmp.w	lr, #0
   1b090:	d1f6      	bne.n	1b080 <net_pkt_ref+0x1e>
   1b092:	f3bf 8f5b 	dmb	ish
   1b096:	d1e7      	bne.n	1b068 <net_pkt_ref+0x6>
}
   1b098:	f85d fb04 	ldr.w	pc, [sp], #4
			return NULL;
   1b09c:	2000      	movs	r0, #0
   1b09e:	e7fb      	b.n	1b098 <net_pkt_ref+0x36>
   1b0a0:	2000      	movs	r0, #0
}
   1b0a2:	4770      	bx	lr

0001b0a4 <net_pkt_frag_unref>:
	if (!frag) {
   1b0a4:	b118      	cbz	r0, 1b0ae <net_pkt_frag_unref+0xa>
{
   1b0a6:	b508      	push	{r3, lr}
	net_buf_unref(frag);
   1b0a8:	f7fe f912 	bl	192d0 <net_buf_unref>
}
   1b0ac:	bd08      	pop	{r3, pc}
   1b0ae:	4770      	bx	lr

0001b0b0 <net_pkt_unref>:
{
   1b0b0:	b500      	push	{lr}
   1b0b2:	b083      	sub	sp, #12
   1b0b4:	9001      	str	r0, [sp, #4]
	if (!pkt) {
   1b0b6:	b318      	cbz	r0, 1b100 <net_pkt_unref+0x50>
		ref = atomic_get(&pkt->atomic_ref);
   1b0b8:	9b01      	ldr	r3, [sp, #4]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b0ba:	f3bf 8f5b 	dmb	ish
   1b0be:	6a1b      	ldr	r3, [r3, #32]
   1b0c0:	f3bf 8f5b 	dmb	ish
		if (!ref) {
   1b0c4:	b1e3      	cbz	r3, 1b100 <net_pkt_unref+0x50>
	} while (!atomic_cas(&pkt->atomic_ref, ref, ref - 1));
   1b0c6:	9a01      	ldr	r2, [sp, #4]
   1b0c8:	3220      	adds	r2, #32
   1b0ca:	1e59      	subs	r1, r3, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1b0cc:	f3bf 8f5b 	dmb	ish
   1b0d0:	e852 0f00 	ldrex	r0, [r2]
   1b0d4:	4298      	cmp	r0, r3
   1b0d6:	d104      	bne.n	1b0e2 <net_pkt_unref+0x32>
   1b0d8:	e842 1c00 	strex	ip, r1, [r2]
   1b0dc:	f1bc 0f00 	cmp.w	ip, #0
   1b0e0:	d1f6      	bne.n	1b0d0 <net_pkt_unref+0x20>
   1b0e2:	f3bf 8f5b 	dmb	ish
   1b0e6:	d1e7      	bne.n	1b0b8 <net_pkt_unref+0x8>
	if (ref > 1) {
   1b0e8:	2b01      	cmp	r3, #1
   1b0ea:	dc09      	bgt.n	1b100 <net_pkt_unref+0x50>
	if (pkt->frags) {
   1b0ec:	9b01      	ldr	r3, [sp, #4]
   1b0ee:	6898      	ldr	r0, [r3, #8]
   1b0f0:	b108      	cbz	r0, 1b0f6 <net_pkt_unref+0x46>
		net_pkt_frag_unref(pkt->frags);
   1b0f2:	f7ff ffd7 	bl	1b0a4 <net_pkt_frag_unref>
	k_mem_slab_free(pkt->slab, (void **)&pkt);
   1b0f6:	a901      	add	r1, sp, #4
   1b0f8:	9b01      	ldr	r3, [sp, #4]
   1b0fa:	6858      	ldr	r0, [r3, #4]
   1b0fc:	f003 ff08 	bl	1ef10 <k_mem_slab_free>
}
   1b100:	b003      	add	sp, #12
   1b102:	f85d fb04 	ldr.w	pc, [sp], #4

0001b106 <net_pkt_available_buffer>:
	if (!pkt) {
   1b106:	b168      	cbz	r0, 1b124 <net_pkt_available_buffer+0x1e>
{
   1b108:	b510      	push	{r4, lr}
   1b10a:	4604      	mov	r4, r0
	return pkt_get_max_len(pkt) - net_pkt_get_len(pkt);
   1b10c:	f7ff fe6f 	bl	1adee <pkt_get_max_len>
	return net_buf_frags_len(pkt->frags);
   1b110:	68a3      	ldr	r3, [r4, #8]
	size_t bytes = 0;
   1b112:	2200      	movs	r2, #0
	while (buf) {
   1b114:	e002      	b.n	1b11c <net_pkt_available_buffer+0x16>
		bytes += buf->len;
   1b116:	8999      	ldrh	r1, [r3, #12]
   1b118:	440a      	add	r2, r1
		buf = buf->frags;
   1b11a:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1b11c:	2b00      	cmp	r3, #0
   1b11e:	d1fa      	bne.n	1b116 <net_pkt_available_buffer+0x10>
   1b120:	1a80      	subs	r0, r0, r2
}
   1b122:	bd10      	pop	{r4, pc}
		return 0;
   1b124:	2000      	movs	r0, #0
}
   1b126:	4770      	bx	lr

0001b128 <net_pkt_available_payload_buffer>:
	if (!pkt) {
   1b128:	b1c8      	cbz	r0, 1b15e <net_pkt_available_payload_buffer+0x36>
{
   1b12a:	b538      	push	{r3, r4, r5, lr}
   1b12c:	460a      	mov	r2, r1
   1b12e:	4605      	mov	r5, r0
	return pkt->family;
   1b130:	f890 1037 	ldrb.w	r1, [r0, #55]	; 0x37
	hdr_len = pkt_estimate_headers_length(pkt, net_pkt_family(pkt), proto);
   1b134:	0949      	lsrs	r1, r1, #5
   1b136:	f7ff fe24 	bl	1ad82 <pkt_estimate_headers_length>
	return net_buf_frags_len(pkt->frags);
   1b13a:	68ab      	ldr	r3, [r5, #8]
	size_t bytes = 0;
   1b13c:	2200      	movs	r2, #0
	while (buf) {
   1b13e:	e002      	b.n	1b146 <net_pkt_available_payload_buffer+0x1e>
		bytes += buf->len;
   1b140:	8999      	ldrh	r1, [r3, #12]
   1b142:	440a      	add	r2, r1
		buf = buf->frags;
   1b144:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1b146:	2b00      	cmp	r3, #0
   1b148:	d1fa      	bne.n	1b140 <net_pkt_available_payload_buffer+0x18>
	hdr_len = hdr_len <= len ? 0 : hdr_len - len;
   1b14a:	4290      	cmp	r0, r2
   1b14c:	d905      	bls.n	1b15a <net_pkt_available_payload_buffer+0x32>
   1b14e:	1a84      	subs	r4, r0, r2
	len = net_pkt_available_buffer(pkt) - hdr_len;
   1b150:	4628      	mov	r0, r5
   1b152:	f7ff ffd8 	bl	1b106 <net_pkt_available_buffer>
   1b156:	1b00      	subs	r0, r0, r4
}
   1b158:	bd38      	pop	{r3, r4, r5, pc}
	hdr_len = hdr_len <= len ? 0 : hdr_len - len;
   1b15a:	2400      	movs	r4, #0
   1b15c:	e7f8      	b.n	1b150 <net_pkt_available_payload_buffer+0x28>
		return 0;
   1b15e:	2000      	movs	r0, #0
}
   1b160:	4770      	bx	lr

0001b162 <net_pkt_trim_buffer>:
{
   1b162:	b570      	push	{r4, r5, r6, lr}
   1b164:	4605      	mov	r5, r0
	buf = pkt->buffer;
   1b166:	6880      	ldr	r0, [r0, #8]
	prev = buf;
   1b168:	4606      	mov	r6, r0
	while (buf) {
   1b16a:	e005      	b.n	1b178 <net_pkt_trim_buffer+0x16>
				pkt->buffer = next;
   1b16c:	60ac      	str	r4, [r5, #8]
   1b16e:	e00e      	b.n	1b18e <net_pkt_trim_buffer+0x2c>
				prev->frags = next;
   1b170:	6034      	str	r4, [r6, #0]
   1b172:	e00c      	b.n	1b18e <net_pkt_trim_buffer+0x2c>
			prev = buf;
   1b174:	4606      	mov	r6, r0
   1b176:	4620      	mov	r0, r4
	while (buf) {
   1b178:	b170      	cbz	r0, 1b198 <net_pkt_trim_buffer+0x36>
		struct net_buf *next = buf->frags;
   1b17a:	6804      	ldr	r4, [r0, #0]
		if (!buf->len) {
   1b17c:	8983      	ldrh	r3, [r0, #12]
   1b17e:	2b00      	cmp	r3, #0
   1b180:	d1f8      	bne.n	1b174 <net_pkt_trim_buffer+0x12>
			if (buf == pkt->buffer) {
   1b182:	68ab      	ldr	r3, [r5, #8]
   1b184:	4283      	cmp	r3, r0
   1b186:	d0f1      	beq.n	1b16c <net_pkt_trim_buffer+0xa>
			} else if (buf == prev->frags) {
   1b188:	6833      	ldr	r3, [r6, #0]
   1b18a:	4283      	cmp	r3, r0
   1b18c:	d0f0      	beq.n	1b170 <net_pkt_trim_buffer+0xe>
			buf->frags = NULL;
   1b18e:	2300      	movs	r3, #0
   1b190:	6003      	str	r3, [r0, #0]
			net_buf_unref(buf);
   1b192:	f7fe f89d 	bl	192d0 <net_buf_unref>
   1b196:	e7ee      	b.n	1b176 <net_pkt_trim_buffer+0x14>
}
   1b198:	bd70      	pop	{r4, r5, r6, pc}

0001b19a <net_pkt_remove_tail>:
{
   1b19a:	b510      	push	{r4, lr}
	struct net_buf *buf = pkt->buffer;
   1b19c:	6884      	ldr	r4, [r0, #8]
   1b19e:	4622      	mov	r2, r4
	size_t bytes = 0;
   1b1a0:	2300      	movs	r3, #0
	while (buf) {
   1b1a2:	e002      	b.n	1b1aa <net_pkt_remove_tail+0x10>
		bytes += buf->len;
   1b1a4:	8990      	ldrh	r0, [r2, #12]
   1b1a6:	4403      	add	r3, r0
		buf = buf->frags;
   1b1a8:	6812      	ldr	r2, [r2, #0]
	while (buf) {
   1b1aa:	2a00      	cmp	r2, #0
   1b1ac:	d1fa      	bne.n	1b1a4 <net_pkt_remove_tail+0xa>
	if (remaining_len < length) {
   1b1ae:	4299      	cmp	r1, r3
   1b1b0:	d811      	bhi.n	1b1d6 <net_pkt_remove_tail+0x3c>
	remaining_len -= length;
   1b1b2:	1a5b      	subs	r3, r3, r1
	while (buf) {
   1b1b4:	e001      	b.n	1b1ba <net_pkt_remove_tail+0x20>
		remaining_len -= buf->len;
   1b1b6:	1a9b      	subs	r3, r3, r2
		buf = buf->frags;
   1b1b8:	6824      	ldr	r4, [r4, #0]
	while (buf) {
   1b1ba:	b154      	cbz	r4, 1b1d2 <net_pkt_remove_tail+0x38>
		if (buf->len >= remaining_len) {
   1b1bc:	89a2      	ldrh	r2, [r4, #12]
   1b1be:	429a      	cmp	r2, r3
   1b1c0:	d3f9      	bcc.n	1b1b6 <net_pkt_remove_tail+0x1c>
			buf->len = remaining_len;
   1b1c2:	81a3      	strh	r3, [r4, #12]
			if (buf->frags) {
   1b1c4:	6820      	ldr	r0, [r4, #0]
   1b1c6:	b148      	cbz	r0, 1b1dc <net_pkt_remove_tail+0x42>
				net_pkt_frag_unref(buf->frags);
   1b1c8:	f7ff ff6c 	bl	1b0a4 <net_pkt_frag_unref>
				buf->frags = NULL;
   1b1cc:	2000      	movs	r0, #0
   1b1ce:	6020      	str	r0, [r4, #0]
   1b1d0:	e000      	b.n	1b1d4 <net_pkt_remove_tail+0x3a>
	return 0;
   1b1d2:	2000      	movs	r0, #0
}
   1b1d4:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1b1d6:	f06f 0015 	mvn.w	r0, #21
   1b1da:	e7fb      	b.n	1b1d4 <net_pkt_remove_tail+0x3a>
	return 0;
   1b1dc:	2000      	movs	r0, #0
   1b1de:	e7f9      	b.n	1b1d4 <net_pkt_remove_tail+0x3a>

0001b1e0 <net_pkt_cursor_init>:
	pkt->cursor.buf = pkt->buffer;
   1b1e0:	6883      	ldr	r3, [r0, #8]
   1b1e2:	60c3      	str	r3, [r0, #12]
	if (pkt->cursor.buf) {
   1b1e4:	b113      	cbz	r3, 1b1ec <net_pkt_cursor_init+0xc>
		pkt->cursor.pos = pkt->cursor.buf->data;
   1b1e6:	689b      	ldr	r3, [r3, #8]
   1b1e8:	6103      	str	r3, [r0, #16]
   1b1ea:	4770      	bx	lr
		pkt->cursor.pos = NULL;
   1b1ec:	2300      	movs	r3, #0
   1b1ee:	6103      	str	r3, [r0, #16]
}
   1b1f0:	4770      	bx	lr

0001b1f2 <pkt_alloc_on_iface>:
{
   1b1f2:	b510      	push	{r4, lr}
   1b1f4:	460c      	mov	r4, r1
	pkt = pkt_alloc(slab, timeout);
   1b1f6:	f7ec fbb1 	bl	795c <pkt_alloc>
	if (pkt) {
   1b1fa:	4603      	mov	r3, r0
   1b1fc:	b148      	cbz	r0, 1b212 <pkt_alloc_on_iface+0x20>
	pkt->iface = iface;
   1b1fe:	6184      	str	r4, [r0, #24]
	if (iface) {
   1b200:	b13c      	cbz	r4, 1b212 <pkt_alloc_on_iface+0x20>
	return &iface->if_dev->link_addr;
   1b202:	6822      	ldr	r2, [r4, #0]
		pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   1b204:	7d52      	ldrb	r2, [r2, #21]
   1b206:	f880 2029 	strb.w	r2, [r0, #41]	; 0x29
   1b20a:	6822      	ldr	r2, [r4, #0]
		pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
   1b20c:	7d52      	ldrb	r2, [r2, #21]
   1b20e:	f880 2031 	strb.w	r2, [r0, #49]	; 0x31
}
   1b212:	4618      	mov	r0, r3
   1b214:	bd10      	pop	{r4, pc}

0001b216 <net_pkt_append_buffer>:
{
   1b216:	b510      	push	{r4, lr}
   1b218:	4603      	mov	r3, r0
   1b21a:	460c      	mov	r4, r1
	if (!pkt->buffer) {
   1b21c:	6880      	ldr	r0, [r0, #8]
   1b21e:	b128      	cbz	r0, 1b22c <net_pkt_append_buffer+0x16>
		net_buf_frag_insert(net_buf_frag_last(pkt->buffer), buffer);
   1b220:	f7fe f87d 	bl	1931e <net_buf_frag_last>
   1b224:	4621      	mov	r1, r4
   1b226:	f7fe f880 	bl	1932a <net_buf_frag_insert>
}
   1b22a:	bd10      	pop	{r4, pc}
		pkt->buffer = buffer;
   1b22c:	6099      	str	r1, [r3, #8]
		net_pkt_cursor_init(pkt);
   1b22e:	4618      	mov	r0, r3
   1b230:	f7ff ffd6 	bl	1b1e0 <net_pkt_cursor_init>
   1b234:	e7f9      	b.n	1b22a <net_pkt_append_buffer+0x14>

0001b236 <pkt_alloc_with_buffer>:
{
   1b236:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b23a:	b083      	sub	sp, #12
   1b23c:	4606      	mov	r6, r0
   1b23e:	468b      	mov	fp, r1
   1b240:	4690      	mov	r8, r2
   1b242:	4699      	mov	r9, r3
   1b244:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   1b246:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1b248:	4620      	mov	r0, r4
   1b24a:	4629      	mov	r1, r5
   1b24c:	f004 fb84 	bl	1f958 <sys_clock_timeout_end_calc>
   1b250:	4607      	mov	r7, r0
   1b252:	468a      	mov	sl, r1
	pkt = pkt_alloc_on_iface(slab, iface, timeout);
   1b254:	4622      	mov	r2, r4
   1b256:	462b      	mov	r3, r5
   1b258:	4659      	mov	r1, fp
   1b25a:	4630      	mov	r0, r6
   1b25c:	f7ff ffc9 	bl	1b1f2 <pkt_alloc_on_iface>
	if (!pkt) {
   1b260:	4606      	mov	r6, r0
   1b262:	b1b8      	cbz	r0, 1b294 <pkt_alloc_with_buffer+0x5e>
	pkt->family = family;
   1b264:	f890 3037 	ldrb.w	r3, [r0, #55]	; 0x37
   1b268:	f369 1347 	bfi	r3, r9, #5, #3
   1b26c:	f880 3037 	strb.w	r3, [r0, #55]	; 0x37
	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1b270:	ea54 0305 	orrs.w	r3, r4, r5
   1b274:	d005      	beq.n	1b282 <pkt_alloc_with_buffer+0x4c>
   1b276:	f1b5 3fff 	cmp.w	r5, #4294967295
   1b27a:	bf08      	it	eq
   1b27c:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   1b280:	d10c      	bne.n	1b29c <pkt_alloc_with_buffer+0x66>
	ret = net_pkt_alloc_buffer(pkt, size, proto, timeout);
   1b282:	9400      	str	r4, [sp, #0]
   1b284:	9501      	str	r5, [sp, #4]
   1b286:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   1b28a:	4641      	mov	r1, r8
   1b28c:	4630      	mov	r0, r6
   1b28e:	f7ec fbad 	bl	79ec <net_pkt_alloc_buffer>
	if (ret) {
   1b292:	b990      	cbnz	r0, 1b2ba <pkt_alloc_with_buffer+0x84>
}
   1b294:	4630      	mov	r0, r6
   1b296:	b003      	add	sp, #12
   1b298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		int64_t remaining = end - sys_clock_tick_get();
   1b29c:	f7f6 ff0c 	bl	120b8 <sys_clock_tick_get>
   1b2a0:	1a3f      	subs	r7, r7, r0
   1b2a2:	eb6a 0a01 	sbc.w	sl, sl, r1
		if (remaining <= 0) {
   1b2a6:	2f01      	cmp	r7, #1
   1b2a8:	f17a 0300 	sbcs.w	r3, sl, #0
   1b2ac:	db02      	blt.n	1b2b4 <pkt_alloc_with_buffer+0x7e>
			timeout = Z_TIMEOUT_TICKS(remaining);
   1b2ae:	463c      	mov	r4, r7
   1b2b0:	4655      	mov	r5, sl
   1b2b2:	e7e6      	b.n	1b282 <pkt_alloc_with_buffer+0x4c>
			timeout = K_NO_WAIT;
   1b2b4:	2400      	movs	r4, #0
   1b2b6:	4625      	mov	r5, r4
   1b2b8:	e7e3      	b.n	1b282 <pkt_alloc_with_buffer+0x4c>
		net_pkt_unref(pkt);
   1b2ba:	4630      	mov	r0, r6
   1b2bc:	f7ff fef8 	bl	1b0b0 <net_pkt_unref>
		return NULL;
   1b2c0:	2600      	movs	r6, #0
   1b2c2:	e7e7      	b.n	1b294 <pkt_alloc_with_buffer+0x5e>

0001b2c4 <net_pkt_skip>:
{
   1b2c4:	b500      	push	{lr}
   1b2c6:	b083      	sub	sp, #12
   1b2c8:	460a      	mov	r2, r1
	return net_pkt_cursor_operate(pkt, NULL, skip, false, true);
   1b2ca:	2301      	movs	r3, #1
   1b2cc:	9300      	str	r3, [sp, #0]
   1b2ce:	2300      	movs	r3, #0
   1b2d0:	4619      	mov	r1, r3
   1b2d2:	f7ff fe46 	bl	1af62 <net_pkt_cursor_operate>
}
   1b2d6:	b003      	add	sp, #12
   1b2d8:	f85d fb04 	ldr.w	pc, [sp], #4

0001b2dc <clone_pkt_lladdr>:

static void clone_pkt_lladdr(struct net_pkt *pkt, struct net_pkt *clone_pkt,
			     struct net_linkaddr *lladdr)
{
   1b2dc:	b570      	push	{r4, r5, r6, lr}
   1b2de:	460d      	mov	r5, r1
	int32_t ll_addr_offset;

	if (!lladdr->addr)
   1b2e0:	6811      	ldr	r1, [r2, #0]
   1b2e2:	b121      	cbz	r1, 1b2ee <clone_pkt_lladdr+0x12>
   1b2e4:	4614      	mov	r4, r2
		return;

	ll_addr_offset = net_pkt_find_offset(pkt, lladdr->addr);
   1b2e6:	f7ff fd62 	bl	1adae <net_pkt_find_offset>

	if (ll_addr_offset >= 0) {
   1b2ea:	1e06      	subs	r6, r0, #0
   1b2ec:	da00      	bge.n	1b2f0 <clone_pkt_lladdr+0x14>
		net_pkt_cursor_init(clone_pkt);
		net_pkt_skip(clone_pkt, ll_addr_offset);
		lladdr->addr = net_pkt_cursor_get_pos(clone_pkt);
	}
}
   1b2ee:	bd70      	pop	{r4, r5, r6, pc}
		net_pkt_cursor_init(clone_pkt);
   1b2f0:	4628      	mov	r0, r5
   1b2f2:	f7ff ff75 	bl	1b1e0 <net_pkt_cursor_init>
		net_pkt_skip(clone_pkt, ll_addr_offset);
   1b2f6:	4631      	mov	r1, r6
   1b2f8:	4628      	mov	r0, r5
   1b2fa:	f7ff ffe3 	bl	1b2c4 <net_pkt_skip>
	return pkt->cursor.pos;
   1b2fe:	692b      	ldr	r3, [r5, #16]
		lladdr->addr = net_pkt_cursor_get_pos(clone_pkt);
   1b300:	6023      	str	r3, [r4, #0]
   1b302:	e7f4      	b.n	1b2ee <clone_pkt_lladdr+0x12>

0001b304 <clone_pkt_attributes>:
	ARG_UNUSED(clone_pkt);
}
#endif

static void clone_pkt_attributes(struct net_pkt *pkt, struct net_pkt *clone_pkt)
{
   1b304:	b570      	push	{r4, r5, r6, lr}
   1b306:	4605      	mov	r5, r0
   1b308:	460c      	mov	r4, r1
	return pkt->family;
   1b30a:	f890 3037 	ldrb.w	r3, [r0, #55]	; 0x37
   1b30e:	095b      	lsrs	r3, r3, #5
	pkt->family = family;
   1b310:	f891 2037 	ldrb.w	r2, [r1, #55]	; 0x37
   1b314:	f363 1247 	bfi	r2, r3, #5, #3
   1b318:	f881 2037 	strb.w	r2, [r1, #55]	; 0x37
	return pkt->context;
   1b31c:	6943      	ldr	r3, [r0, #20]
	pkt->context = ctx;
   1b31e:	614b      	str	r3, [r1, #20]
	return pkt->ip_hdr_len;
   1b320:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
	pkt->ip_hdr_len = len;
   1b324:	f881 3036 	strb.w	r3, [r1, #54]	; 0x36
	return pkt->ip_dscp;
   1b328:	f890 203b 	ldrb.w	r2, [r0, #59]	; 0x3b
	pkt->ip_dscp = dscp;
   1b32c:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
   1b330:	f362 0305 	bfi	r3, r2, #0, #6
   1b334:	f881 303b 	strb.w	r3, [r1, #59]	; 0x3b
	return pkt->ip_ecn;
   1b338:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
   1b33c:	099b      	lsrs	r3, r3, #6
	pkt->ip_ecn = ecn;
   1b33e:	f891 203b 	ldrb.w	r2, [r1, #59]	; 0x3b
   1b342:	f363 1287 	bfi	r2, r3, #6, #2
   1b346:	f881 203b 	strb.w	r2, [r1, #59]	; 0x3b
	return pkt->priority;
   1b34a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
	pkt->priority = priority;
   1b34e:	f881 303c 	strb.w	r3, [r1, #60]	; 0x3c
	return !!(pkt->captured);
   1b352:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   1b356:	f3c3 0380 	ubfx	r3, r3, #2, #1
	pkt->captured = is_captured;
   1b35a:	f891 2038 	ldrb.w	r2, [r1, #56]	; 0x38
   1b35e:	f363 0282 	bfi	r2, r3, #2, #1
   1b362:	f881 2038 	strb.w	r2, [r1, #56]	; 0x38
	return !!(pkt->l2_processed);
   1b366:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   1b36a:	f3c3 1300 	ubfx	r3, r3, #4, #1
	pkt->l2_processed = is_l2_processed;
   1b36e:	b2d2      	uxtb	r2, r2
   1b370:	f363 1204 	bfi	r2, r3, #4, #1
   1b374:	f881 2038 	strb.w	r2, [r1, #56]	; 0x38
	return pkt->ll_proto_type;
   1b378:	8e83      	ldrh	r3, [r0, #52]	; 0x34
	pkt->ll_proto_type = type;
   1b37a:	868b      	strh	r3, [r1, #52]	; 0x34

	net_pkt_set_l2_bridged(clone_pkt, net_pkt_is_l2_bridged(pkt));
	net_pkt_set_l2_processed(clone_pkt, net_pkt_is_l2_processed(pkt));
	net_pkt_set_ll_proto_type(clone_pkt, net_pkt_ll_proto_type(pkt));

	if (pkt->buffer && clone_pkt->buffer) {
   1b37c:	6883      	ldr	r3, [r0, #8]
   1b37e:	b1cb      	cbz	r3, 1b3b4 <clone_pkt_attributes+0xb0>
   1b380:	688b      	ldr	r3, [r1, #8]
   1b382:	b1bb      	cbz	r3, 1b3b4 <clone_pkt_attributes+0xb0>
	return &pkt->lladdr_src;
   1b384:	f101 0224 	add.w	r2, r1, #36	; 0x24
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1b388:	6a40      	ldr	r0, [r0, #36]	; 0x24
   1b38a:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   1b38c:	6260      	str	r0, [r4, #36]	; 0x24
   1b38e:	62a1      	str	r1, [r4, #40]	; 0x28
	return &pkt->lladdr_dst;
   1b390:	f104 062c 	add.w	r6, r4, #44	; 0x2c
   1b394:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   1b396:	6b29      	ldr	r1, [r5, #48]	; 0x30
   1b398:	62e0      	str	r0, [r4, #44]	; 0x2c
   1b39a:	6321      	str	r1, [r4, #48]	; 0x30
		 * into the fragment memory of the buffer,
		 * otherwise we have to set the ll address pointer
		 * relative to the new buffer to avoid dangling
		 * pointers into the source packet.
		 */
		if (pkt->buffer != clone_pkt->buffer) {
   1b39c:	68a9      	ldr	r1, [r5, #8]
   1b39e:	428b      	cmp	r3, r1
   1b3a0:	d008      	beq.n	1b3b4 <clone_pkt_attributes+0xb0>
			clone_pkt_lladdr(pkt, clone_pkt, net_pkt_lladdr_src(clone_pkt));
   1b3a2:	4621      	mov	r1, r4
   1b3a4:	4628      	mov	r0, r5
   1b3a6:	f7ff ff99 	bl	1b2dc <clone_pkt_lladdr>
			clone_pkt_lladdr(pkt, clone_pkt, net_pkt_lladdr_dst(clone_pkt));
   1b3aa:	4632      	mov	r2, r6
   1b3ac:	4621      	mov	r1, r4
   1b3ae:	4628      	mov	r0, r5
   1b3b0:	f7ff ff94 	bl	1b2dc <clone_pkt_lladdr>
	return pkt->family;
   1b3b4:	f895 3037 	ldrb.w	r3, [r5, #55]	; 0x37
   1b3b8:	095b      	lsrs	r3, r3, #5
		}
	}

	if (IS_ENABLED(CONFIG_NET_IPV4) && net_pkt_family(pkt) == AF_INET) {
   1b3ba:	2b01      	cmp	r3, #1
   1b3bc:	d000      	beq.n	1b3c0 <clone_pkt_attributes+0xbc>
		net_pkt_set_ipv6_next_hdr(clone_pkt,
					  net_pkt_ipv6_next_hdr(pkt));
	}

	clone_pkt_cb(pkt, clone_pkt);
}
   1b3be:	bd70      	pop	{r4, r5, r6, pc}
	return pkt->ipv4_ttl;
   1b3c0:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
	pkt->ipv4_ttl = ttl;
   1b3c4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	return pkt->ipv4_opts_len;
   1b3c8:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
	pkt->ipv4_opts_len = opts_len;
   1b3cc:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
   1b3d0:	e7f5      	b.n	1b3be <clone_pkt_attributes+0xba>

0001b3d2 <net_pkt_memset>:
{
   1b3d2:	b500      	push	{lr}
   1b3d4:	b085      	sub	sp, #20
   1b3d6:	9103      	str	r1, [sp, #12]
	return net_pkt_cursor_operate(pkt, &byte, amount, false, true);
   1b3d8:	2301      	movs	r3, #1
   1b3da:	9300      	str	r3, [sp, #0]
   1b3dc:	2300      	movs	r3, #0
   1b3de:	a903      	add	r1, sp, #12
   1b3e0:	f7ff fdbf 	bl	1af62 <net_pkt_cursor_operate>
}
   1b3e4:	b005      	add	sp, #20
   1b3e6:	f85d fb04 	ldr.w	pc, [sp], #4

0001b3ea <net_pkt_read>:
{
   1b3ea:	b500      	push	{lr}
   1b3ec:	b083      	sub	sp, #12
	return net_pkt_cursor_operate(pkt, data, length, true, false);
   1b3ee:	2300      	movs	r3, #0
   1b3f0:	9300      	str	r3, [sp, #0]
   1b3f2:	2301      	movs	r3, #1
   1b3f4:	f7ff fdb5 	bl	1af62 <net_pkt_cursor_operate>
}
   1b3f8:	b003      	add	sp, #12
   1b3fa:	f85d fb04 	ldr.w	pc, [sp], #4

0001b3fe <net_pkt_copy>:
{
   1b3fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b400:	4605      	mov	r5, r0
   1b402:	460e      	mov	r6, r1
   1b404:	4617      	mov	r7, r2
	while (c_dst->buf && c_src->buf && length) {
   1b406:	e018      	b.n	1b43a <net_pkt_copy+0x3c>
			if (d_len < s_len) {
   1b408:	42a3      	cmp	r3, r4
   1b40a:	d200      	bcs.n	1b40e <net_pkt_copy+0x10>
				len = d_len;
   1b40c:	461c      	mov	r4, r3
		if (!len) {
   1b40e:	2c00      	cmp	r4, #0
   1b410:	d03e      	beq.n	1b490 <net_pkt_copy+0x92>
   1b412:	4622      	mov	r2, r4
   1b414:	6931      	ldr	r1, [r6, #16]
   1b416:	f004 fcd4 	bl	1fdc2 <memcpy>
	return pkt->overwrite;
   1b41a:	f895 3037 	ldrb.w	r3, [r5, #55]	; 0x37
		if (!net_pkt_is_being_overwritten(pkt_dst)) {
   1b41e:	f013 0f01 	tst.w	r3, #1
   1b422:	d02f      	beq.n	1b484 <net_pkt_copy+0x86>
		pkt_cursor_update(pkt_dst, len, true);
   1b424:	2201      	movs	r2, #1
   1b426:	4621      	mov	r1, r4
   1b428:	4628      	mov	r0, r5
   1b42a:	f7ff fd21 	bl	1ae70 <pkt_cursor_update>
		pkt_cursor_update(pkt_src, len, false);
   1b42e:	2200      	movs	r2, #0
   1b430:	4621      	mov	r1, r4
   1b432:	4630      	mov	r0, r6
   1b434:	f7ff fd1c 	bl	1ae70 <pkt_cursor_update>
		length -= len;
   1b438:	1b3f      	subs	r7, r7, r4
	while (c_dst->buf && c_src->buf && length) {
   1b43a:	68eb      	ldr	r3, [r5, #12]
   1b43c:	b343      	cbz	r3, 1b490 <net_pkt_copy+0x92>
   1b43e:	68f3      	ldr	r3, [r6, #12]
   1b440:	b333      	cbz	r3, 1b490 <net_pkt_copy+0x92>
   1b442:	b32f      	cbz	r7, 1b490 <net_pkt_copy+0x92>
		pkt_cursor_advance(pkt_dst, true);
   1b444:	2101      	movs	r1, #1
   1b446:	4628      	mov	r0, r5
   1b448:	f7ff fcfb 	bl	1ae42 <pkt_cursor_advance>
		pkt_cursor_advance(pkt_src, false);
   1b44c:	2100      	movs	r1, #0
   1b44e:	4630      	mov	r0, r6
   1b450:	f7ff fcf7 	bl	1ae42 <pkt_cursor_advance>
		if (!c_dst->buf || !c_src->buf) {
   1b454:	68e8      	ldr	r0, [r5, #12]
   1b456:	b1d8      	cbz	r0, 1b490 <net_pkt_copy+0x92>
   1b458:	68f3      	ldr	r3, [r6, #12]
   1b45a:	b1cb      	cbz	r3, 1b490 <net_pkt_copy+0x92>
		s_len = c_src->buf->len - (c_src->pos - c_src->buf->data);
   1b45c:	899c      	ldrh	r4, [r3, #12]
   1b45e:	6932      	ldr	r2, [r6, #16]
   1b460:	689b      	ldr	r3, [r3, #8]
   1b462:	1ad2      	subs	r2, r2, r3
   1b464:	1aa4      	subs	r4, r4, r2
	return net_buf_simple_max_len(&buf->b);
   1b466:	3008      	adds	r0, #8
   1b468:	f7fe f81b 	bl	194a2 <net_buf_simple_max_len>
   1b46c:	4603      	mov	r3, r0
		d_len = net_buf_max_len(c_dst->buf) - (c_dst->pos - c_dst->buf->data);
   1b46e:	6928      	ldr	r0, [r5, #16]
   1b470:	68ea      	ldr	r2, [r5, #12]
   1b472:	6892      	ldr	r2, [r2, #8]
   1b474:	1a82      	subs	r2, r0, r2
   1b476:	1a9b      	subs	r3, r3, r2
		if (length < s_len && length < d_len) {
   1b478:	42bc      	cmp	r4, r7
   1b47a:	d9c5      	bls.n	1b408 <net_pkt_copy+0xa>
   1b47c:	42bb      	cmp	r3, r7
   1b47e:	d9c3      	bls.n	1b408 <net_pkt_copy+0xa>
			len = length;
   1b480:	463c      	mov	r4, r7
   1b482:	e7c4      	b.n	1b40e <net_pkt_copy+0x10>
			net_buf_add(c_dst->buf, len);
   1b484:	68e8      	ldr	r0, [r5, #12]
	return net_buf_simple_add(&buf->b, len);
   1b486:	4621      	mov	r1, r4
   1b488:	3008      	adds	r0, #8
   1b48a:	f7fd ffa0 	bl	193ce <net_buf_simple_add>
   1b48e:	e7c9      	b.n	1b424 <net_pkt_copy+0x26>
	if (length) {
   1b490:	b90f      	cbnz	r7, 1b496 <net_pkt_copy+0x98>
	return 0;
   1b492:	2000      	movs	r0, #0
}
   1b494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   1b496:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1b49a:	e7fb      	b.n	1b494 <net_pkt_copy+0x96>

0001b49c <net_pkt_remaining_data>:
size_t net_pkt_remaining_data(struct net_pkt *pkt)
{
	struct net_buf *buf;
	size_t data_length;

	if (!pkt || !pkt->cursor.buf || !pkt->cursor.pos) {
   1b49c:	b178      	cbz	r0, 1b4be <net_pkt_remaining_data+0x22>
   1b49e:	68c3      	ldr	r3, [r0, #12]
   1b4a0:	b17b      	cbz	r3, 1b4c2 <net_pkt_remaining_data+0x26>
   1b4a2:	6902      	ldr	r2, [r0, #16]
   1b4a4:	b17a      	cbz	r2, 1b4c6 <net_pkt_remaining_data+0x2a>
		return 0;
	}

	buf = pkt->cursor.buf;
	data_length = buf->len - (pkt->cursor.pos - buf->data);
   1b4a6:	8998      	ldrh	r0, [r3, #12]
   1b4a8:	6899      	ldr	r1, [r3, #8]
   1b4aa:	1a52      	subs	r2, r2, r1
   1b4ac:	1a80      	subs	r0, r0, r2

	buf = buf->frags;
   1b4ae:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1b4b0:	e002      	b.n	1b4b8 <net_pkt_remaining_data+0x1c>
		data_length += buf->len;
   1b4b2:	899a      	ldrh	r2, [r3, #12]
   1b4b4:	4410      	add	r0, r2
		buf = buf->frags;
   1b4b6:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1b4b8:	2b00      	cmp	r3, #0
   1b4ba:	d1fa      	bne.n	1b4b2 <net_pkt_remaining_data+0x16>
   1b4bc:	4770      	bx	lr
		return 0;
   1b4be:	2000      	movs	r0, #0
   1b4c0:	4770      	bx	lr
   1b4c2:	2000      	movs	r0, #0
   1b4c4:	4770      	bx	lr
   1b4c6:	2000      	movs	r0, #0
	}

	return data_length;
}
   1b4c8:	4770      	bx	lr

0001b4ca <net_pkt_update_length>:

int net_pkt_update_length(struct net_pkt *pkt, size_t length)
{
	struct net_buf *buf;

	for (buf = pkt->buffer; buf; buf = buf->frags) {
   1b4ca:	6883      	ldr	r3, [r0, #8]
   1b4cc:	e002      	b.n	1b4d4 <net_pkt_update_length+0xa>
		if (buf->len < length) {
			length -= buf->len;
		} else {
			buf->len = length;
   1b4ce:	8199      	strh	r1, [r3, #12]
			length = 0;
   1b4d0:	2100      	movs	r1, #0
	for (buf = pkt->buffer; buf; buf = buf->frags) {
   1b4d2:	681b      	ldr	r3, [r3, #0]
   1b4d4:	b123      	cbz	r3, 1b4e0 <net_pkt_update_length+0x16>
		if (buf->len < length) {
   1b4d6:	899a      	ldrh	r2, [r3, #12]
   1b4d8:	428a      	cmp	r2, r1
   1b4da:	d2f8      	bcs.n	1b4ce <net_pkt_update_length+0x4>
			length -= buf->len;
   1b4dc:	1a89      	subs	r1, r1, r2
   1b4de:	e7f8      	b.n	1b4d2 <net_pkt_update_length+0x8>
		}
	}

	return !length ? 0 : -EINVAL;
   1b4e0:	b909      	cbnz	r1, 1b4e6 <net_pkt_update_length+0x1c>
   1b4e2:	2000      	movs	r0, #0
   1b4e4:	4770      	bx	lr
   1b4e6:	f06f 0015 	mvn.w	r0, #21
}
   1b4ea:	4770      	bx	lr

0001b4ec <net_pkt_pull>:

int net_pkt_pull(struct net_pkt *pkt, size_t length)
{
   1b4ec:	b570      	push	{r4, r5, r6, lr}
   1b4ee:	4604      	mov	r4, r0
   1b4f0:	460d      	mov	r5, r1
	struct net_pkt_cursor *c_op = &pkt->cursor;

	while (length) {
   1b4f2:	e00d      	b.n	1b510 <net_pkt_pull+0x24>
			break;
		}

		rem = left;
		if (rem > length) {
			rem = length;
   1b4f4:	462e      	mov	r6, r5
   1b4f6:	e01b      	b.n	1b530 <net_pkt_pull+0x44>
		c_op->buf->len -= rem;
		left -= rem;
		if (left) {
			memmove(c_op->pos, c_op->pos+rem, left);
		} else {
			struct net_buf *buf = pkt->buffer;
   1b4f8:	68a0      	ldr	r0, [r4, #8]

			if (buf) {
   1b4fa:	b128      	cbz	r0, 1b508 <net_pkt_pull+0x1c>
				pkt->buffer = buf->frags;
   1b4fc:	6803      	ldr	r3, [r0, #0]
   1b4fe:	60a3      	str	r3, [r4, #8]
				buf->frags = NULL;
   1b500:	2300      	movs	r3, #0
   1b502:	6003      	str	r3, [r0, #0]
				net_buf_unref(buf);
   1b504:	f7fd fee4 	bl	192d0 <net_buf_unref>
			}

			net_pkt_cursor_init(pkt);
   1b508:	4620      	mov	r0, r4
   1b50a:	f7ff fe69 	bl	1b1e0 <net_pkt_cursor_init>
		}

		length -= rem;
   1b50e:	1bad      	subs	r5, r5, r6
	while (length) {
   1b510:	b1bd      	cbz	r5, 1b542 <net_pkt_pull+0x56>
		pkt_cursor_advance(pkt, false);
   1b512:	2100      	movs	r1, #0
   1b514:	4620      	mov	r0, r4
   1b516:	f7ff fc94 	bl	1ae42 <pkt_cursor_advance>
		if (!c_op->buf) {
   1b51a:	68e1      	ldr	r1, [r4, #12]
   1b51c:	b189      	cbz	r1, 1b542 <net_pkt_pull+0x56>
		left = c_op->buf->len - (c_op->pos - c_op->buf->data);
   1b51e:	898b      	ldrh	r3, [r1, #12]
   1b520:	6922      	ldr	r2, [r4, #16]
   1b522:	6888      	ldr	r0, [r1, #8]
   1b524:	1a12      	subs	r2, r2, r0
		if (!left) {
   1b526:	1a9a      	subs	r2, r3, r2
   1b528:	d00b      	beq.n	1b542 <net_pkt_pull+0x56>
		if (rem > length) {
   1b52a:	42aa      	cmp	r2, r5
   1b52c:	d8e2      	bhi.n	1b4f4 <net_pkt_pull+0x8>
		rem = left;
   1b52e:	4616      	mov	r6, r2
		c_op->buf->len -= rem;
   1b530:	1b9b      	subs	r3, r3, r6
   1b532:	818b      	strh	r3, [r1, #12]
		if (left) {
   1b534:	1b92      	subs	r2, r2, r6
   1b536:	d0df      	beq.n	1b4f8 <net_pkt_pull+0xc>
			memmove(c_op->pos, c_op->pos+rem, left);
   1b538:	6920      	ldr	r0, [r4, #16]
__ssp_bos_icheck3(memmove, void *, const void *)
   1b53a:	1981      	adds	r1, r0, r6
   1b53c:	f004 fc62 	bl	1fe04 <memmove>
   1b540:	e7e5      	b.n	1b50e <net_pkt_pull+0x22>
	}

	net_pkt_cursor_init(pkt);
   1b542:	4620      	mov	r0, r4
   1b544:	f7ff fe4c 	bl	1b1e0 <net_pkt_cursor_init>

	if (length) {
   1b548:	b90d      	cbnz	r5, 1b54e <net_pkt_pull+0x62>
		NET_DBG("Still some length to go %zu", length);
		return -ENOBUFS;
	}

	return 0;
   1b54a:	2000      	movs	r0, #0
}
   1b54c:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   1b54e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1b552:	e7fb      	b.n	1b54c <net_pkt_pull+0x60>

0001b554 <net_pkt_get_current_offset>:

uint16_t net_pkt_get_current_offset(struct net_pkt *pkt)
{
	struct net_buf *buf = pkt->buffer;
   1b554:	6883      	ldr	r3, [r0, #8]
	uint16_t offset;

	if (!pkt->cursor.buf || !pkt->cursor.pos) {
   1b556:	68c1      	ldr	r1, [r0, #12]
   1b558:	b181      	cbz	r1, 1b57c <net_pkt_get_current_offset+0x28>
{
   1b55a:	b410      	push	{r4}
	if (!pkt->cursor.buf || !pkt->cursor.pos) {
   1b55c:	6904      	ldr	r4, [r0, #16]
   1b55e:	b17c      	cbz	r4, 1b580 <net_pkt_get_current_offset+0x2c>
		return 0;
	}

	offset = 0U;
   1b560:	2000      	movs	r0, #0
   1b562:	e003      	b.n	1b56c <net_pkt_get_current_offset+0x18>

	while (buf != pkt->cursor.buf) {
		offset += buf->len;
   1b564:	899a      	ldrh	r2, [r3, #12]
   1b566:	4410      	add	r0, r2
   1b568:	b280      	uxth	r0, r0
		buf = buf->frags;
   1b56a:	681b      	ldr	r3, [r3, #0]
	while (buf != pkt->cursor.buf) {
   1b56c:	4299      	cmp	r1, r3
   1b56e:	d1f9      	bne.n	1b564 <net_pkt_get_current_offset+0x10>
	}

	offset += pkt->cursor.pos - buf->data;
   1b570:	689b      	ldr	r3, [r3, #8]
   1b572:	1ae4      	subs	r4, r4, r3
   1b574:	4420      	add	r0, r4
   1b576:	b280      	uxth	r0, r0

	return offset;
}
   1b578:	bc10      	pop	{r4}
   1b57a:	4770      	bx	lr
		return 0;
   1b57c:	2000      	movs	r0, #0
}
   1b57e:	4770      	bx	lr
		return 0;
   1b580:	2000      	movs	r0, #0
   1b582:	e7f9      	b.n	1b578 <net_pkt_get_current_offset+0x24>

0001b584 <net_pkt_clone_internal>:
{
   1b584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b588:	b086      	sub	sp, #24
   1b58a:	4605      	mov	r5, r0
   1b58c:	460f      	mov	r7, r1
   1b58e:	4692      	mov	sl, r2
   1b590:	4698      	mov	r8, r3
	size_t cursor_offset = net_pkt_get_current_offset(pkt);
   1b592:	f7ff ffdf 	bl	1b554 <net_pkt_get_current_offset>
   1b596:	4681      	mov	r9, r0
   1b598:	f895 6037 	ldrb.w	r6, [r5, #55]	; 0x37
   1b59c:	f006 0601 	and.w	r6, r6, #1
	return pkt->iface;
   1b5a0:	69a9      	ldr	r1, [r5, #24]
	return net_buf_frags_len(pkt->frags);
   1b5a2:	68ac      	ldr	r4, [r5, #8]
	size_t bytes = 0;
   1b5a4:	2200      	movs	r2, #0
	while (buf) {
   1b5a6:	e002      	b.n	1b5ae <net_pkt_clone_internal+0x2a>
		bytes += buf->len;
   1b5a8:	89a3      	ldrh	r3, [r4, #12]
   1b5aa:	441a      	add	r2, r3
		buf = buf->frags;
   1b5ac:	6824      	ldr	r4, [r4, #0]
	while (buf) {
   1b5ae:	2c00      	cmp	r4, #0
   1b5b0:	d1fa      	bne.n	1b5a8 <net_pkt_clone_internal+0x24>
	clone_pkt = pkt_alloc_with_buffer(slab, net_pkt_iface(pkt),
   1b5b2:	f8cd a008 	str.w	sl, [sp, #8]
   1b5b6:	f8cd 800c 	str.w	r8, [sp, #12]
   1b5ba:	2300      	movs	r3, #0
   1b5bc:	9300      	str	r3, [sp, #0]
   1b5be:	4638      	mov	r0, r7
   1b5c0:	f7ff fe39 	bl	1b236 <pkt_alloc_with_buffer>
	if (!clone_pkt) {
   1b5c4:	4607      	mov	r7, r0
   1b5c6:	2800      	cmp	r0, #0
   1b5c8:	d03d      	beq.n	1b646 <net_pkt_clone_internal+0xc2>
	pkt->overwrite = overwrite;
   1b5ca:	f895 3037 	ldrb.w	r3, [r5, #55]	; 0x37
   1b5ce:	f043 0301 	orr.w	r3, r3, #1
   1b5d2:	f885 3037 	strb.w	r3, [r5, #55]	; 0x37
	backup->buf = pkt->cursor.buf;
   1b5d6:	f8d5 a00c 	ldr.w	sl, [r5, #12]
   1b5da:	f8cd a010 	str.w	sl, [sp, #16]
	backup->pos = pkt->cursor.pos;
   1b5de:	f8d5 8010 	ldr.w	r8, [r5, #16]
   1b5e2:	f8cd 8014 	str.w	r8, [sp, #20]
	net_pkt_cursor_init(pkt);
   1b5e6:	4628      	mov	r0, r5
   1b5e8:	f7ff fdfa 	bl	1b1e0 <net_pkt_cursor_init>
	return net_buf_frags_len(pkt->frags);
   1b5ec:	68ac      	ldr	r4, [r5, #8]
	size_t bytes = 0;
   1b5ee:	2200      	movs	r2, #0
	while (buf) {
   1b5f0:	e002      	b.n	1b5f8 <net_pkt_clone_internal+0x74>
		bytes += buf->len;
   1b5f2:	89a3      	ldrh	r3, [r4, #12]
   1b5f4:	441a      	add	r2, r3
		buf = buf->frags;
   1b5f6:	6824      	ldr	r4, [r4, #0]
	while (buf) {
   1b5f8:	2c00      	cmp	r4, #0
   1b5fa:	d1fa      	bne.n	1b5f2 <net_pkt_clone_internal+0x6e>
	if (net_pkt_copy(clone_pkt, pkt, net_pkt_get_len(pkt))) {
   1b5fc:	4629      	mov	r1, r5
   1b5fe:	4638      	mov	r0, r7
   1b600:	f7ff fefd 	bl	1b3fe <net_pkt_copy>
   1b604:	bb18      	cbnz	r0, 1b64e <net_pkt_clone_internal+0xca>
	pkt->overwrite = overwrite;
   1b606:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   1b60a:	f043 0301 	orr.w	r3, r3, #1
   1b60e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	clone_pkt_attributes(pkt, clone_pkt);
   1b612:	4639      	mov	r1, r7
   1b614:	4628      	mov	r0, r5
   1b616:	f7ff fe75 	bl	1b304 <clone_pkt_attributes>
	net_pkt_cursor_init(clone_pkt);
   1b61a:	4638      	mov	r0, r7
   1b61c:	f7ff fde0 	bl	1b1e0 <net_pkt_cursor_init>
	if (cursor_offset) {
   1b620:	f1b9 0f00 	cmp.w	r9, #0
   1b624:	d122      	bne.n	1b66c <net_pkt_clone_internal+0xe8>
   1b626:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   1b62a:	f366 0300 	bfi	r3, r6, #0, #1
   1b62e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	pkt->cursor.buf = backup->buf;
   1b632:	f8c5 a00c 	str.w	sl, [r5, #12]
	pkt->cursor.pos = backup->pos;
   1b636:	f8c5 8010 	str.w	r8, [r5, #16]
	pkt->overwrite = overwrite;
   1b63a:	f895 3037 	ldrb.w	r3, [r5, #55]	; 0x37
   1b63e:	f366 0300 	bfi	r3, r6, #0, #1
   1b642:	f885 3037 	strb.w	r3, [r5, #55]	; 0x37
}
   1b646:	4638      	mov	r0, r7
   1b648:	b006      	add	sp, #24
   1b64a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		net_pkt_unref(clone_pkt);
   1b64e:	4638      	mov	r0, r7
   1b650:	f7ff fd2e 	bl	1b0b0 <net_pkt_unref>
	pkt->cursor.buf = backup->buf;
   1b654:	f8c5 a00c 	str.w	sl, [r5, #12]
	pkt->cursor.pos = backup->pos;
   1b658:	f8c5 8010 	str.w	r8, [r5, #16]
	pkt->overwrite = overwrite;
   1b65c:	f895 3037 	ldrb.w	r3, [r5, #55]	; 0x37
   1b660:	f366 0300 	bfi	r3, r6, #0, #1
   1b664:	f885 3037 	strb.w	r3, [r5, #55]	; 0x37
		return NULL;
   1b668:	4627      	mov	r7, r4
   1b66a:	e7ec      	b.n	1b646 <net_pkt_clone_internal+0xc2>
		net_pkt_skip(clone_pkt, cursor_offset);
   1b66c:	4649      	mov	r1, r9
   1b66e:	4638      	mov	r0, r7
   1b670:	f7ff fe28 	bl	1b2c4 <net_pkt_skip>
   1b674:	e7d7      	b.n	1b626 <net_pkt_clone_internal+0xa2>

0001b676 <net_pkt_clone>:
{
   1b676:	b508      	push	{r3, lr}
	return net_pkt_clone_internal(pkt, pkt->slab, timeout);
   1b678:	6841      	ldr	r1, [r0, #4]
   1b67a:	f7ff ff83 	bl	1b584 <net_pkt_clone_internal>
}
   1b67e:	bd08      	pop	{r3, pc}

0001b680 <net_pkt_get_contiguous_len>:

	return len >= size;
}

size_t net_pkt_get_contiguous_len(struct net_pkt *pkt)
{
   1b680:	b510      	push	{r4, lr}
   1b682:	4604      	mov	r4, r0
	return pkt->overwrite;
   1b684:	f890 1037 	ldrb.w	r1, [r0, #55]	; 0x37
   1b688:	f001 0101 	and.w	r1, r1, #1
	pkt_cursor_advance(pkt, !net_pkt_is_being_overwritten(pkt));
   1b68c:	f081 0101 	eor.w	r1, r1, #1
   1b690:	f7ff fbd7 	bl	1ae42 <pkt_cursor_advance>

	if (pkt->cursor.buf && pkt->cursor.pos) {
   1b694:	68e3      	ldr	r3, [r4, #12]
   1b696:	b16b      	cbz	r3, 1b6b4 <net_pkt_get_contiguous_len+0x34>
   1b698:	6922      	ldr	r2, [r4, #16]
   1b69a:	b16a      	cbz	r2, 1b6b8 <net_pkt_get_contiguous_len+0x38>
   1b69c:	f894 1037 	ldrb.w	r1, [r4, #55]	; 0x37
		size_t len;

		len = net_pkt_is_being_overwritten(pkt) ?
			pkt->cursor.buf->len : pkt->cursor.buf->size;
   1b6a0:	f011 0f01 	tst.w	r1, #1
   1b6a4:	d004      	beq.n	1b6b0 <net_pkt_get_contiguous_len+0x30>
   1b6a6:	8998      	ldrh	r0, [r3, #12]
		len -= pkt->cursor.pos - pkt->cursor.buf->data;
   1b6a8:	689b      	ldr	r3, [r3, #8]
   1b6aa:	1ad2      	subs	r2, r2, r3
   1b6ac:	1a80      	subs	r0, r0, r2
		return len;
	}

	return 0;
}
   1b6ae:	bd10      	pop	{r4, pc}
			pkt->cursor.buf->len : pkt->cursor.buf->size;
   1b6b0:	89d8      	ldrh	r0, [r3, #14]
   1b6b2:	e7f9      	b.n	1b6a8 <net_pkt_get_contiguous_len+0x28>
	return 0;
   1b6b4:	2000      	movs	r0, #0
   1b6b6:	e7fa      	b.n	1b6ae <net_pkt_get_contiguous_len+0x2e>
   1b6b8:	2000      	movs	r0, #0
   1b6ba:	e7f8      	b.n	1b6ae <net_pkt_get_contiguous_len+0x2e>

0001b6bc <net_pkt_is_contiguous>:
{
   1b6bc:	b510      	push	{r4, lr}
   1b6be:	460c      	mov	r4, r1
	size_t len = net_pkt_get_contiguous_len(pkt);
   1b6c0:	f7ff ffde 	bl	1b680 <net_pkt_get_contiguous_len>
}
   1b6c4:	42a0      	cmp	r0, r4
   1b6c6:	bf34      	ite	cc
   1b6c8:	2000      	movcc	r0, #0
   1b6ca:	2001      	movcs	r0, #1
   1b6cc:	bd10      	pop	{r4, pc}

0001b6ce <net_pkt_write>:
{
   1b6ce:	b570      	push	{r4, r5, r6, lr}
   1b6d0:	b082      	sub	sp, #8
   1b6d2:	4604      	mov	r4, r0
   1b6d4:	460d      	mov	r5, r1
   1b6d6:	4616      	mov	r6, r2
	if (data == pkt->cursor.pos && net_pkt_is_contiguous(pkt, length)) {
   1b6d8:	6903      	ldr	r3, [r0, #16]
   1b6da:	4299      	cmp	r1, r3
   1b6dc:	d008      	beq.n	1b6f0 <net_pkt_write+0x22>
	return net_pkt_cursor_operate(pkt, (void *)data, length, true, true);
   1b6de:	2301      	movs	r3, #1
   1b6e0:	9300      	str	r3, [sp, #0]
   1b6e2:	4632      	mov	r2, r6
   1b6e4:	4629      	mov	r1, r5
   1b6e6:	4620      	mov	r0, r4
   1b6e8:	f7ff fc3b 	bl	1af62 <net_pkt_cursor_operate>
}
   1b6ec:	b002      	add	sp, #8
   1b6ee:	bd70      	pop	{r4, r5, r6, pc}
	if (data == pkt->cursor.pos && net_pkt_is_contiguous(pkt, length)) {
   1b6f0:	4611      	mov	r1, r2
   1b6f2:	f7ff ffe3 	bl	1b6bc <net_pkt_is_contiguous>
   1b6f6:	2800      	cmp	r0, #0
   1b6f8:	d0f1      	beq.n	1b6de <net_pkt_write+0x10>
		return net_pkt_skip(pkt, length);
   1b6fa:	4631      	mov	r1, r6
   1b6fc:	4620      	mov	r0, r4
   1b6fe:	f7ff fde1 	bl	1b2c4 <net_pkt_skip>
   1b702:	e7f3      	b.n	1b6ec <net_pkt_write+0x1e>

0001b704 <net_pkt_get_data>:

void *net_pkt_get_data(struct net_pkt *pkt,
		       struct net_pkt_data_access *access)
{
   1b704:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b706:	b083      	sub	sp, #12
   1b708:	4605      	mov	r5, r0
   1b70a:	460c      	mov	r4, r1
			return NULL;
		}

		return pkt->cursor.pos;
	} else {
		if (net_pkt_is_contiguous(pkt, access->size)) {
   1b70c:	6849      	ldr	r1, [r1, #4]
   1b70e:	f7ff ffd5 	bl	1b6bc <net_pkt_is_contiguous>
   1b712:	b990      	cbnz	r0, 1b73a <net_pkt_get_data+0x36>
   1b714:	f895 3037 	ldrb.w	r3, [r5, #55]	; 0x37
			access->data = pkt->cursor.pos;
		} else if (net_pkt_is_being_overwritten(pkt)) {
   1b718:	f013 0f01 	tst.w	r3, #1
   1b71c:	d00f      	beq.n	1b73e <net_pkt_get_data+0x3a>
			struct net_pkt_cursor backup;

			if (!access->data) {
   1b71e:	6821      	ldr	r1, [r4, #0]
   1b720:	b191      	cbz	r1, 1b748 <net_pkt_get_data+0x44>
	backup->buf = pkt->cursor.buf;
   1b722:	68ef      	ldr	r7, [r5, #12]
   1b724:	9700      	str	r7, [sp, #0]
	backup->pos = pkt->cursor.pos;
   1b726:	692e      	ldr	r6, [r5, #16]
   1b728:	9601      	str	r6, [sp, #4]
				return NULL;
			}

			net_pkt_cursor_backup(pkt, &backup);

			if (net_pkt_read(pkt, access->data, access->size)) {
   1b72a:	6862      	ldr	r2, [r4, #4]
   1b72c:	4628      	mov	r0, r5
   1b72e:	f7ff fe5c 	bl	1b3ea <net_pkt_read>
   1b732:	b938      	cbnz	r0, 1b744 <net_pkt_get_data+0x40>
	pkt->cursor.buf = backup->buf;
   1b734:	60ef      	str	r7, [r5, #12]
	pkt->cursor.pos = backup->pos;
   1b736:	612e      	str	r6, [r5, #16]
   1b738:	e001      	b.n	1b73e <net_pkt_get_data+0x3a>
			access->data = pkt->cursor.pos;
   1b73a:	692b      	ldr	r3, [r5, #16]
   1b73c:	6023      	str	r3, [r4, #0]
			}

			net_pkt_cursor_restore(pkt, &backup);
		}

		return access->data;
   1b73e:	6820      	ldr	r0, [r4, #0]
	}

	return NULL;
}
   1b740:	b003      	add	sp, #12
   1b742:	bdf0      	pop	{r4, r5, r6, r7, pc}
	pkt->cursor.buf = backup->buf;
   1b744:	60ef      	str	r7, [r5, #12]
	pkt->cursor.pos = backup->pos;
   1b746:	612e      	str	r6, [r5, #16]
				return NULL;
   1b748:	2000      	movs	r0, #0
   1b74a:	e7f9      	b.n	1b740 <net_pkt_get_data+0x3c>

0001b74c <net_pkt_set_data>:

int net_pkt_set_data(struct net_pkt *pkt,
		     struct net_pkt_data_access *access)
{
   1b74c:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_NET_HEADERS_ALWAYS_CONTIGUOUS)) {
		return net_pkt_skip(pkt, access->size);
	}

	return net_pkt_write(pkt, access->data, access->size);
   1b74e:	684a      	ldr	r2, [r1, #4]
   1b750:	6809      	ldr	r1, [r1, #0]
   1b752:	f7ff ffbc 	bl	1b6ce <net_pkt_write>
}
   1b756:	bd08      	pop	{r3, pc}

0001b758 <net_pkt_init>:
		(size_t)(k_mem_slab_num_free_get(&tx_pkts) *
			 sizeof(struct net_pkt)),
		get_frees(&rx_bufs), get_size(&rx_bufs),
		get_frees(&tx_bufs), get_size(&tx_bufs));
#endif
}
   1b758:	4770      	bx	lr

0001b75a <rx_tc2thread>:
}
   1b75a:	200f      	movs	r0, #15
   1b75c:	4770      	bx	lr

0001b75e <tc_rx_handler>:
{
   1b75e:	b510      	push	{r4, lr}
   1b760:	4604      	mov	r4, r0
   1b762:	e001      	b.n	1b768 <tc_rx_handler+0xa>
		net_process_rx_packet(pkt);
   1b764:	f7fd ff95 	bl	19692 <net_process_rx_packet>
	return z_impl_k_queue_get(queue, timeout);
   1b768:	f04f 32ff 	mov.w	r2, #4294967295
   1b76c:	f04f 33ff 	mov.w	r3, #4294967295
   1b770:	4620      	mov	r0, r4
   1b772:	f7f5 fd0f 	bl	11194 <z_impl_k_queue_get>
		if (pkt == NULL) {
   1b776:	2800      	cmp	r0, #0
   1b778:	d1f4      	bne.n	1b764 <tc_rx_handler+0x6>
   1b77a:	e7f5      	b.n	1b768 <tc_rx_handler+0xa>

0001b77c <net_tx_priority2tc>:
}
   1b77c:	2000      	movs	r0, #0
   1b77e:	4770      	bx	lr

0001b780 <net_tc_tx_init>:
}
   1b780:	4770      	bx	lr

0001b782 <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
   1b782:	460b      	mov	r3, r1
   1b784:	b139      	cbz	r1, 1b796 <sys_slist_remove+0x14>
	return node->next;
   1b786:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
   1b788:	6019      	str	r1, [r3, #0]
	return list->tail;
   1b78a:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   1b78c:	428a      	cmp	r2, r1
   1b78e:	d009      	beq.n	1b7a4 <sys_slist_remove+0x22>
	parent->next = child;
   1b790:	2300      	movs	r3, #0
   1b792:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1b794:	4770      	bx	lr
	return node->next;
   1b796:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   1b798:	6003      	str	r3, [r0, #0]
	return list->tail;
   1b79a:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   1b79c:	428a      	cmp	r2, r1
   1b79e:	d1f7      	bne.n	1b790 <sys_slist_remove+0xe>
	list->tail = node;
   1b7a0:	6043      	str	r3, [r0, #4]
}
   1b7a2:	e7f5      	b.n	1b790 <sys_slist_remove+0xe>
	list->tail = node;
   1b7a4:	6043      	str	r3, [r0, #4]
}
   1b7a6:	e7f3      	b.n	1b790 <sys_slist_remove+0xe>

0001b7a8 <mgmt_event_wait_call>:
{
   1b7a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b7aa:	b08d      	sub	sp, #52	; 0x34
   1b7ac:	4617      	mov	r7, r2
   1b7ae:	461e      	mov	r6, r3
	struct mgmt_event_wait sync_data = {
   1b7b0:	ad05      	add	r5, sp, #20
   1b7b2:	2400      	movs	r4, #0
   1b7b4:	9405      	str	r4, [sp, #20]
   1b7b6:	9406      	str	r4, [sp, #24]
   1b7b8:	9407      	str	r4, [sp, #28]
   1b7ba:	9408      	str	r4, [sp, #32]
   1b7bc:	9409      	str	r4, [sp, #36]	; 0x24
   1b7be:	940a      	str	r4, [sp, #40]	; 0x28
   1b7c0:	940b      	str	r4, [sp, #44]	; 0x2c
   1b7c2:	9505      	str	r5, [sp, #20]
   1b7c4:	9506      	str	r5, [sp, #24]
   1b7c6:	2301      	movs	r3, #1
   1b7c8:	9308      	str	r3, [sp, #32]
   1b7ca:	ab09      	add	r3, sp, #36	; 0x24
   1b7cc:	9309      	str	r3, [sp, #36]	; 0x24
   1b7ce:	930a      	str	r3, [sp, #40]	; 0x28
	struct net_mgmt_event_callback sync = {
   1b7d0:	9400      	str	r4, [sp, #0]
   1b7d2:	9401      	str	r4, [sp, #4]
   1b7d4:	9402      	str	r4, [sp, #8]
   1b7d6:	9403      	str	r4, [sp, #12]
   1b7d8:	9404      	str	r4, [sp, #16]
   1b7da:	9501      	str	r5, [sp, #4]
		.event_mask = mgmt_event_mask | NET_MGMT_SYNC_EVENT_BIT,
   1b7dc:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
	struct net_mgmt_event_callback sync = {
   1b7e0:	9104      	str	r1, [sp, #16]
	if (iface) {
   1b7e2:	b100      	cbz	r0, 1b7e6 <mgmt_event_wait_call+0x3e>
		sync_data.iface = iface;
   1b7e4:	900b      	str	r0, [sp, #44]	; 0x2c
	net_mgmt_add_event_callback(&sync);
   1b7e6:	4668      	mov	r0, sp
   1b7e8:	f7ec fb0c 	bl	7e04 <net_mgmt_add_event_callback>
	ret = k_sem_take(sync.sync_call, timeout);
   1b7ec:	9801      	ldr	r0, [sp, #4]
	return z_impl_k_sem_take(sem, timeout);
   1b7ee:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   1b7f2:	f7f5 fd35 	bl	11260 <z_impl_k_sem_take>
	if (ret == -EAGAIN) {
   1b7f6:	f110 0f0b 	cmn.w	r0, #11
   1b7fa:	d012      	beq.n	1b822 <mgmt_event_wait_call+0x7a>
		if (!ret) {
   1b7fc:	b978      	cbnz	r0, 1b81e <mgmt_event_wait_call+0x76>
			if (raised_event) {
   1b7fe:	b10f      	cbz	r7, 1b804 <mgmt_event_wait_call+0x5c>
				*raised_event = sync.raised_event;
   1b800:	9b04      	ldr	r3, [sp, #16]
   1b802:	603b      	str	r3, [r7, #0]
			if (event_iface) {
   1b804:	b10e      	cbz	r6, 1b80a <mgmt_event_wait_call+0x62>
				*event_iface = sync_data.iface;
   1b806:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1b808:	6033      	str	r3, [r6, #0]
			if (info) {
   1b80a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1b80c:	b13b      	cbz	r3, 1b81e <mgmt_event_wait_call+0x76>
				*info = sync.info;
   1b80e:	9b02      	ldr	r3, [sp, #8]
   1b810:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1b812:	6013      	str	r3, [r2, #0]
				if (info_length) {
   1b814:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1b816:	b113      	cbz	r3, 1b81e <mgmt_event_wait_call+0x76>
					*info_length = sync.info_length;
   1b818:	9b03      	ldr	r3, [sp, #12]
   1b81a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1b81c:	6013      	str	r3, [r2, #0]
}
   1b81e:	b00d      	add	sp, #52	; 0x34
   1b820:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = -ETIMEDOUT;
   1b822:	f06f 0073 	mvn.w	r0, #115	; 0x73
	return ret;
   1b826:	e7fa      	b.n	1b81e <mgmt_event_wait_call+0x76>

0001b828 <net_mgmt_event_wait>:
{
   1b828:	e92d 4800 	stmdb	sp!, {fp, lr}
   1b82c:	b084      	sub	sp, #16
	return mgmt_event_wait_call(NULL, mgmt_event_mask,
   1b82e:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
   1b832:	e9cd bc02 	strd	fp, ip, [sp, #8]
   1b836:	f8dd c018 	ldr.w	ip, [sp, #24]
   1b83a:	f8cd c004 	str.w	ip, [sp, #4]
   1b83e:	9300      	str	r3, [sp, #0]
   1b840:	4613      	mov	r3, r2
   1b842:	460a      	mov	r2, r1
   1b844:	4601      	mov	r1, r0
   1b846:	2000      	movs	r0, #0
   1b848:	f7ff ffae 	bl	1b7a8 <mgmt_event_wait_call>
}
   1b84c:	b004      	add	sp, #16
   1b84e:	e8bd 8800 	ldmia.w	sp!, {fp, pc}

0001b852 <net_mgmt_event_wait_on_iface>:
{
   1b852:	e92d 4800 	stmdb	sp!, {fp, lr}
   1b856:	b084      	sub	sp, #16
	return mgmt_event_wait_call(iface, mgmt_event_mask,
   1b858:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
   1b85c:	e9cd bc02 	strd	fp, ip, [sp, #8]
   1b860:	f8dd c018 	ldr.w	ip, [sp, #24]
   1b864:	f8cd c004 	str.w	ip, [sp, #4]
   1b868:	9300      	str	r3, [sp, #0]
   1b86a:	2300      	movs	r3, #0
   1b86c:	f7ff ff9c 	bl	1b7a8 <mgmt_event_wait_call>
}
   1b870:	b004      	add	sp, #16
   1b872:	e8bd 8800 	ldmia.w	sp!, {fp, pc}

0001b876 <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
   1b876:	460b      	mov	r3, r1
   1b878:	b139      	cbz	r1, 1b88a <sys_slist_remove+0x14>
	return node->next;
   1b87a:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
   1b87c:	6019      	str	r1, [r3, #0]
	return list->tail;
   1b87e:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   1b880:	428a      	cmp	r2, r1
   1b882:	d009      	beq.n	1b898 <sys_slist_remove+0x22>
	parent->next = child;
   1b884:	2300      	movs	r3, #0
   1b886:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1b888:	4770      	bx	lr
	return node->next;
   1b88a:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   1b88c:	6003      	str	r3, [r0, #0]
	return list->tail;
   1b88e:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   1b890:	428a      	cmp	r2, r1
   1b892:	d1f7      	bne.n	1b884 <sys_slist_remove+0xe>
	list->tail = node;
   1b894:	6043      	str	r3, [r0, #4]
}
   1b896:	e7f5      	b.n	1b884 <sys_slist_remove+0xe>
	list->tail = node;
   1b898:	6043      	str	r3, [r0, #4]
}
   1b89a:	e7f3      	b.n	1b884 <sys_slist_remove+0xe>

0001b89c <sys_slist_find_and_remove>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1b89c:	b508      	push	{r3, lr}
   1b89e:	460a      	mov	r2, r1
	return list->head;
   1b8a0:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1b8a2:	2100      	movs	r1, #0
   1b8a4:	e001      	b.n	1b8aa <sys_slist_find_and_remove+0xe>
   1b8a6:	4619      	mov	r1, r3
   1b8a8:	681b      	ldr	r3, [r3, #0]
   1b8aa:	b12b      	cbz	r3, 1b8b8 <sys_slist_find_and_remove+0x1c>
   1b8ac:	4293      	cmp	r3, r2
   1b8ae:	d1fa      	bne.n	1b8a6 <sys_slist_find_and_remove+0xa>
   1b8b0:	f7ff ffe1 	bl	1b876 <sys_slist_remove>
   1b8b4:	2001      	movs	r0, #1
   1b8b6:	e000      	b.n	1b8ba <sys_slist_find_and_remove+0x1e>
   1b8b8:	2000      	movs	r0, #0
   1b8ba:	bd08      	pop	{r3, pc}

0001b8bc <net_ipv4_is_addr_mcast>:
	return (ntohl(UNALIGNED_GET(&addr->s_addr)) & 0xF0000000) == 0xE0000000;
   1b8bc:	6803      	ldr	r3, [r0, #0]
   1b8be:	0a18      	lsrs	r0, r3, #8
   1b8c0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
   1b8c4:	ea40 6013 	orr.w	r0, r0, r3, lsr #24
   1b8c8:	021a      	lsls	r2, r3, #8
   1b8ca:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
   1b8ce:	4310      	orrs	r0, r2
   1b8d0:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
   1b8d4:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
}
   1b8d8:	f1b0 4f60 	cmp.w	r0, #3758096384	; 0xe0000000
   1b8dc:	bf14      	ite	ne
   1b8de:	2000      	movne	r0, #0
   1b8e0:	2001      	moveq	r0, #1
   1b8e2:	4770      	bx	lr

0001b8e4 <conn_addr_cmp>:
	if (addr->sa_family != net_pkt_family(pkt)) {
   1b8e4:	f8b2 c000 	ldrh.w	ip, [r2]
	return pkt->family;
   1b8e8:	f890 0037 	ldrb.w	r0, [r0, #55]	; 0x37
   1b8ec:	ebbc 1f50 	cmp.w	ip, r0, lsr #5
   1b8f0:	d11a      	bne.n	1b928 <conn_addr_cmp+0x44>
{
   1b8f2:	b500      	push	{lr}
   1b8f4:	ea4f 1e50 	mov.w	lr, r0, lsr #5
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
   1b8f8:	f1be 0f01 	cmp.w	lr, #1
   1b8fc:	d002      	beq.n	1b904 <conn_addr_cmp+0x20>
	return true;
   1b8fe:	2001      	movs	r0, #1
}
   1b900:	f85d fb04 	ldr.w	pc, [sp], #4
		   net_pkt_family(pkt) == AF_INET &&
   1b904:	f1bc 0f01 	cmp.w	ip, #1
   1b908:	d001      	beq.n	1b90e <conn_addr_cmp+0x2a>
	return true;
   1b90a:	2001      	movs	r0, #1
   1b90c:	e7f8      	b.n	1b900 <conn_addr_cmp+0x1c>
		if (is_remote) {
   1b90e:	b143      	cbz	r3, 1b922 <conn_addr_cmp+0x3e>
			addr4 = ip_hdr->ipv4->src;
   1b910:	680b      	ldr	r3, [r1, #0]
   1b912:	330c      	adds	r3, #12
		if (net_sin(addr)->sin_addr.s_addr) {
   1b914:	6852      	ldr	r2, [r2, #4]
   1b916:	b14a      	cbz	r2, 1b92c <conn_addr_cmp+0x48>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   1b918:	681b      	ldr	r3, [r3, #0]
			if (!net_ipv4_addr_cmp_raw((uint8_t *)&net_sin(addr)->sin_addr,
   1b91a:	429a      	cmp	r2, r3
   1b91c:	d108      	bne.n	1b930 <conn_addr_cmp+0x4c>
	return true;
   1b91e:	2001      	movs	r0, #1
   1b920:	e7ee      	b.n	1b900 <conn_addr_cmp+0x1c>
			addr4 = ip_hdr->ipv4->dst;
   1b922:	680b      	ldr	r3, [r1, #0]
   1b924:	3310      	adds	r3, #16
   1b926:	e7f5      	b.n	1b914 <conn_addr_cmp+0x30>
		return false;
   1b928:	2000      	movs	r0, #0
}
   1b92a:	4770      	bx	lr
	return true;
   1b92c:	2001      	movs	r0, #1
   1b92e:	e7e7      	b.n	1b900 <conn_addr_cmp+0x1c>
				return false;
   1b930:	2000      	movs	r0, #0
   1b932:	e7e5      	b.n	1b900 <conn_addr_cmp+0x1c>

0001b934 <net_ipv4_is_addr_bcast>:
{
   1b934:	b538      	push	{r3, r4, r5, lr}
   1b936:	4605      	mov	r5, r0
   1b938:	460c      	mov	r4, r1
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
   1b93a:	f7eb fd41 	bl	73c0 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   1b93e:	6822      	ldr	r2, [r4, #0]
   1b940:	6803      	ldr	r3, [r0, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
   1b942:	429a      	cmp	r2, r3
   1b944:	d004      	beq.n	1b950 <net_ipv4_is_addr_bcast+0x1c>
	return net_if_ipv4_is_addr_bcast(iface, addr);
   1b946:	4621      	mov	r1, r4
   1b948:	4628      	mov	r0, r5
   1b94a:	f7eb f87b 	bl	6a44 <net_if_ipv4_is_addr_bcast>
}
   1b94e:	bd38      	pop	{r3, r4, r5, pc}
		return true;
   1b950:	2001      	movs	r0, #1
   1b952:	e7fc      	b.n	1b94e <net_ipv4_is_addr_bcast+0x1a>

0001b954 <net_ipv4_is_my_addr>:
{
   1b954:	b510      	push	{r4, lr}
   1b956:	4604      	mov	r4, r0
	ret = net_if_ipv4_addr_lookup(addr, NULL) != NULL;
   1b958:	2100      	movs	r1, #0
   1b95a:	f7eb f91b 	bl	6b94 <net_if_ipv4_addr_lookup>
   1b95e:	2800      	cmp	r0, #0
   1b960:	bf14      	ite	ne
   1b962:	2001      	movne	r0, #1
   1b964:	2000      	moveq	r0, #0
	if (!ret) {
   1b966:	d000      	beq.n	1b96a <net_ipv4_is_my_addr+0x16>
}
   1b968:	bd10      	pop	{r4, pc}
		ret = net_ipv4_is_addr_bcast(NULL, addr);
   1b96a:	4621      	mov	r1, r4
   1b96c:	2000      	movs	r0, #0
   1b96e:	f7ff ffe1 	bl	1b934 <net_ipv4_is_addr_bcast>
   1b972:	e7f9      	b.n	1b968 <net_ipv4_is_my_addr+0x14>

0001b974 <conn_are_endpoints_valid>:
	if (IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET) {
   1b974:	2901      	cmp	r1, #1
   1b976:	d001      	beq.n	1b97c <conn_are_endpoints_valid+0x8>
		return true;
   1b978:	2001      	movs	r0, #1
}
   1b97a:	4770      	bx	lr
{
   1b97c:	b538      	push	{r3, r4, r5, lr}
   1b97e:	4614      	mov	r4, r2
   1b980:	461d      	mov	r5, r3
			(struct in_addr *)ip_hdr->ipv4->src);
   1b982:	6810      	ldr	r0, [r2, #0]
		is_my_src_addr = net_ipv4_is_my_addr(
   1b984:	300c      	adds	r0, #12
   1b986:	f7ff ffe5 	bl	1b954 <net_ipv4_is_my_addr>
			ip_hdr->ipv4->src, ip_hdr->ipv4->dst);
   1b98a:	6823      	ldr	r3, [r4, #0]
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   1b98c:	68da      	ldr	r2, [r3, #12]
   1b98e:	691b      	ldr	r3, [r3, #16]
		(is_same_src_and_dst_addr || is_my_src_addr) && is_same_src_and_dst_port;
   1b990:	429a      	cmp	r2, r3
   1b992:	d000      	beq.n	1b996 <conn_are_endpoints_valid+0x22>
   1b994:	b138      	cbz	r0, 1b9a6 <conn_are_endpoints_valid+0x32>
   1b996:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   1b99a:	429d      	cmp	r5, r3
   1b99c:	d005      	beq.n	1b9aa <conn_are_endpoints_valid+0x36>
   1b99e:	2000      	movs	r0, #0
	return !are_invalid_endpoints;
   1b9a0:	f080 0001 	eor.w	r0, r0, #1
}
   1b9a4:	bd38      	pop	{r3, r4, r5, pc}
		(is_same_src_and_dst_addr || is_my_src_addr) && is_same_src_and_dst_port;
   1b9a6:	2000      	movs	r0, #0
   1b9a8:	e7fa      	b.n	1b9a0 <conn_are_endpoints_valid+0x2c>
   1b9aa:	2001      	movs	r0, #1
   1b9ac:	e7f8      	b.n	1b9a0 <conn_are_endpoints_valid+0x2c>

0001b9ae <net_conn_register>:
{
   1b9ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b9b2:	b083      	sub	sp, #12
   1b9b4:	4680      	mov	r8, r0
   1b9b6:	460f      	mov	r7, r1
   1b9b8:	4615      	mov	r5, r2
   1b9ba:	461e      	mov	r6, r3
   1b9bc:	f8bd a030 	ldrh.w	sl, [sp, #48]	; 0x30
   1b9c0:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
   1b9c4:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
	conn = conn_find_handler(proto, family, remote_addr, local_addr,
   1b9c8:	f8cd 9004 	str.w	r9, [sp, #4]
   1b9cc:	f8cd a000 	str.w	sl, [sp]
   1b9d0:	f7ec faa8 	bl	7f24 <conn_find_handler>
	if (conn) {
   1b9d4:	2800      	cmp	r0, #0
   1b9d6:	d15a      	bne.n	1ba8e <net_conn_register+0xe0>
	conn = conn_get_unused();
   1b9d8:	f7ec fa82 	bl	7ee0 <conn_get_unused>
	if (!conn) {
   1b9dc:	4604      	mov	r4, r0
   1b9de:	2800      	cmp	r0, #0
   1b9e0:	d058      	beq.n	1ba94 <net_conn_register+0xe6>
	if (remote_addr) {
   1b9e2:	2d00      	cmp	r5, #0
   1b9e4:	d04b      	beq.n	1ba7e <net_conn_register+0xd0>
			   remote_addr->sa_family == AF_INET) {
   1b9e6:	882b      	ldrh	r3, [r5, #0]
		} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
   1b9e8:	2b01      	cmp	r3, #1
   1b9ea:	d14a      	bne.n	1ba82 <net_conn_register+0xd4>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1b9ec:	682a      	ldr	r2, [r5, #0]
   1b9ee:	686b      	ldr	r3, [r5, #4]
   1b9f0:	6042      	str	r2, [r0, #4]
   1b9f2:	6083      	str	r3, [r0, #8]
			if (net_sin(remote_addr)->sin_addr.s_addr) {
   1b9f4:	686b      	ldr	r3, [r5, #4]
   1b9f6:	b103      	cbz	r3, 1b9fa <net_conn_register+0x4c>
				flags |= NET_CONN_REMOTE_ADDR_SPEC;
   1b9f8:	2320      	movs	r3, #32
		flags |= NET_CONN_REMOTE_ADDR_SET;
   1b9fa:	f043 0302 	orr.w	r3, r3, #2
	if (local_addr) {
   1b9fe:	b166      	cbz	r6, 1ba1a <net_conn_register+0x6c>
			   local_addr->sa_family == AF_INET) {
   1ba00:	8832      	ldrh	r2, [r6, #0]
		} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
   1ba02:	2a01      	cmp	r2, #1
   1ba04:	d13d      	bne.n	1ba82 <net_conn_register+0xd4>
   1ba06:	6831      	ldr	r1, [r6, #0]
   1ba08:	6872      	ldr	r2, [r6, #4]
   1ba0a:	60e1      	str	r1, [r4, #12]
   1ba0c:	6122      	str	r2, [r4, #16]
			if (net_sin(local_addr)->sin_addr.s_addr) {
   1ba0e:	6872      	ldr	r2, [r6, #4]
   1ba10:	b10a      	cbz	r2, 1ba16 <net_conn_register+0x68>
				flags |= NET_CONN_LOCAL_ADDR_SPEC;
   1ba12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
		flags |= NET_CONN_LOCAL_ADDR_SET;
   1ba16:	f043 0304 	orr.w	r3, r3, #4
	if (remote_addr && local_addr) {
   1ba1a:	b125      	cbz	r5, 1ba26 <net_conn_register+0x78>
   1ba1c:	b11e      	cbz	r6, 1ba26 <net_conn_register+0x78>
		if (remote_addr->sa_family != local_addr->sa_family) {
   1ba1e:	8829      	ldrh	r1, [r5, #0]
   1ba20:	8832      	ldrh	r2, [r6, #0]
   1ba22:	4291      	cmp	r1, r2
   1ba24:	d12d      	bne.n	1ba82 <net_conn_register+0xd4>
	if (remote_port) {
   1ba26:	f1ba 0f00 	cmp.w	sl, #0
   1ba2a:	d006      	beq.n	1ba3a <net_conn_register+0x8c>
		flags |= NET_CONN_REMOTE_PORT_SPEC;
   1ba2c:	f043 0308 	orr.w	r3, r3, #8
		net_sin(&conn->remote_addr)->sin_port = htons(remote_port);
   1ba30:	ea4f 220a 	mov.w	r2, sl, lsl #8
   1ba34:	ea42 221a 	orr.w	r2, r2, sl, lsr #8
   1ba38:	80e2      	strh	r2, [r4, #6]
	if (local_port) {
   1ba3a:	f1b9 0f00 	cmp.w	r9, #0
   1ba3e:	d006      	beq.n	1ba4e <net_conn_register+0xa0>
		flags |= NET_CONN_LOCAL_PORT_SPEC;
   1ba40:	f043 0310 	orr.w	r3, r3, #16
		net_sin(&conn->local_addr)->sin_port = htons(local_port);
   1ba44:	ea4f 2209 	mov.w	r2, r9, lsl #8
   1ba48:	ea42 2219 	orr.w	r2, r2, r9, lsr #8
   1ba4c:	81e2      	strh	r2, [r4, #14]
	conn->cb = cb;
   1ba4e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1ba50:	6162      	str	r2, [r4, #20]
	conn->user_data = user_data;
   1ba52:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1ba54:	61e2      	str	r2, [r4, #28]
	conn->flags = flags;
   1ba56:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	conn->proto = proto;
   1ba5a:	f8a4 8020 	strh.w	r8, [r4, #32]
	conn->family = family;
   1ba5e:	f884 7022 	strb.w	r7, [r4, #34]	; 0x22
	conn->context = context;
   1ba62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1ba64:	61a3      	str	r3, [r4, #24]
	if (handle) {
   1ba66:	f1bb 0f00 	cmp.w	fp, #0
   1ba6a:	d001      	beq.n	1ba70 <net_conn_register+0xc2>
		*handle = (struct net_conn_handle *)conn;
   1ba6c:	f8cb 4000 	str.w	r4, [fp]
	conn_set_used(conn);
   1ba70:	4620      	mov	r0, r4
   1ba72:	f7ec fa45 	bl	7f00 <conn_set_used>
	return 0;
   1ba76:	2000      	movs	r0, #0
}
   1ba78:	b003      	add	sp, #12
   1ba7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t flags = 0U;
   1ba7e:	2300      	movs	r3, #0
   1ba80:	e7bd      	b.n	1b9fe <net_conn_register+0x50>
	conn_set_unused(conn);
   1ba82:	4620      	mov	r0, r4
   1ba84:	f7ec fab0 	bl	7fe8 <conn_set_unused>
	return -EINVAL;
   1ba88:	f06f 0015 	mvn.w	r0, #21
   1ba8c:	e7f4      	b.n	1ba78 <net_conn_register+0xca>
		return -EALREADY;
   1ba8e:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1ba92:	e7f1      	b.n	1ba78 <net_conn_register+0xca>
		return -ENOENT;
   1ba94:	f06f 0001 	mvn.w	r0, #1
   1ba98:	e7ee      	b.n	1ba78 <net_conn_register+0xca>

0001ba9a <net_ipv4_is_addr_mcast>:
	return (ntohl(UNALIGNED_GET(&addr->s_addr)) & 0xF0000000) == 0xE0000000;
   1ba9a:	6803      	ldr	r3, [r0, #0]
   1ba9c:	0a18      	lsrs	r0, r3, #8
   1ba9e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
   1baa2:	ea40 6013 	orr.w	r0, r0, r3, lsr #24
   1baa6:	021a      	lsls	r2, r3, #8
   1baa8:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
   1baac:	4310      	orrs	r0, r2
   1baae:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
   1bab2:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
}
   1bab6:	f1b0 4f60 	cmp.w	r0, #3758096384	; 0xe0000000
   1baba:	bf14      	ite	ne
   1babc:	2000      	movne	r0, #0
   1babe:	2001      	moveq	r0, #1
   1bac0:	4770      	bx	lr

0001bac2 <icmpv4_create>:
{
   1bac2:	b570      	push	{r4, r5, r6, lr}
   1bac4:	b082      	sub	sp, #8
   1bac6:	4604      	mov	r4, r0
   1bac8:	460e      	mov	r6, r1
   1baca:	4615      	mov	r5, r2
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv4_access,
   1bacc:	2300      	movs	r3, #0
   1bace:	9300      	str	r3, [sp, #0]
   1bad0:	2304      	movs	r3, #4
   1bad2:	9301      	str	r3, [sp, #4]
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmpv4_access);
   1bad4:	4669      	mov	r1, sp
   1bad6:	f7ff fe15 	bl	1b704 <net_pkt_get_data>
	if (!icmp_hdr) {
   1bada:	b150      	cbz	r0, 1baf2 <icmpv4_create+0x30>
	icmp_hdr->type   = icmp_type;
   1badc:	7006      	strb	r6, [r0, #0]
	icmp_hdr->code   = icmp_code;
   1bade:	7045      	strb	r5, [r0, #1]
	icmp_hdr->chksum = 0U;
   1bae0:	2200      	movs	r2, #0
   1bae2:	7082      	strb	r2, [r0, #2]
   1bae4:	70c2      	strb	r2, [r0, #3]
	return net_pkt_set_data(pkt, &icmpv4_access);
   1bae6:	4669      	mov	r1, sp
   1bae8:	4620      	mov	r0, r4
   1baea:	f7ff fe2f 	bl	1b74c <net_pkt_set_data>
}
   1baee:	b002      	add	sp, #8
   1baf0:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   1baf2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1baf6:	e7fa      	b.n	1baee <icmpv4_create+0x2c>

0001baf8 <net_ipv4_is_addr_bcast>:
{
   1baf8:	b538      	push	{r3, r4, r5, lr}
   1bafa:	4605      	mov	r5, r0
   1bafc:	460c      	mov	r4, r1
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
   1bafe:	f7eb fc5f 	bl	73c0 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   1bb02:	6822      	ldr	r2, [r4, #0]
   1bb04:	6803      	ldr	r3, [r0, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
   1bb06:	429a      	cmp	r2, r3
   1bb08:	d004      	beq.n	1bb14 <net_ipv4_is_addr_bcast+0x1c>
	return net_if_ipv4_is_addr_bcast(iface, addr);
   1bb0a:	4621      	mov	r1, r4
   1bb0c:	4628      	mov	r0, r5
   1bb0e:	f7ea ff99 	bl	6a44 <net_if_ipv4_is_addr_bcast>
}
   1bb12:	bd38      	pop	{r3, r4, r5, pc}
		return true;
   1bb14:	2001      	movs	r0, #1
   1bb16:	e7fc      	b.n	1bb12 <net_ipv4_is_addr_bcast+0x1a>

0001bb18 <icmpv4_handle_echo_request>:
	return UNALIGNED_GET(&addr->s_addr) == 0;
   1bb18:	68cb      	ldr	r3, [r1, #12]
	if (net_ipv4_is_addr_unspecified((struct in_addr *)ip_hdr->src)) {
   1bb1a:	2b00      	cmp	r3, #0
   1bb1c:	d072      	beq.n	1bc04 <icmpv4_handle_echo_request+0xec>
{
   1bb1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bb22:	b082      	sub	sp, #8
   1bb24:	4605      	mov	r5, r0
   1bb26:	460e      	mov	r6, r1
	return net_buf_frags_len(pkt->frags);
   1bb28:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   1bb2a:	2200      	movs	r2, #0
	while (buf) {
   1bb2c:	e002      	b.n	1bb34 <icmpv4_handle_echo_request+0x1c>
		bytes += buf->len;
   1bb2e:	8999      	ldrh	r1, [r3, #12]
   1bb30:	440a      	add	r2, r1
		buf = buf->frags;
   1bb32:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1bb34:	2b00      	cmp	r3, #0
   1bb36:	d1fa      	bne.n	1bb2e <icmpv4_handle_echo_request+0x16>
	return pkt->ip_hdr_len;
   1bb38:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
	payload_len = net_pkt_get_len(pkt) -
   1bb3c:	1ad4      	subs	r4, r2, r3
   1bb3e:	b2a4      	uxth	r4, r4
	return pkt->ipv4_opts_len;
   1bb40:	f895 103a 	ldrb.w	r1, [r5, #58]	; 0x3a
		      net_pkt_ip_hdr_len(pkt) -
   1bb44:	1a64      	subs	r4, r4, r1
   1bb46:	b2a4      	uxth	r4, r4
		      net_pkt_ipv4_opts_len(pkt) - NET_ICMPH_LEN;
   1bb48:	3c04      	subs	r4, #4
	payload_len = net_pkt_get_len(pkt) -
   1bb4a:	b224      	sxth	r4, r4
	if (payload_len < NET_ICMPV4_UNUSED_LEN) {
   1bb4c:	2c03      	cmp	r4, #3
   1bb4e:	dd5b      	ble.n	1bc08 <icmpv4_handle_echo_request+0xf0>
					  PKT_WAIT_TIME);
   1bb50:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1bb54:	2300      	movs	r3, #0
	reply = net_pkt_alloc_with_buffer(net_pkt_iface(pkt),
   1bb56:	e9cd 2300 	strd	r2, r3, [sp]
   1bb5a:	2301      	movs	r3, #1
   1bb5c:	461a      	mov	r2, r3
   1bb5e:	4421      	add	r1, r4
   1bb60:	69a8      	ldr	r0, [r5, #24]
   1bb62:	f7eb ffab 	bl	7abc <net_pkt_alloc_with_buffer>
	if (!reply) {
   1bb66:	4607      	mov	r7, r0
   1bb68:	2800      	cmp	r0, #0
   1bb6a:	d04f      	beq.n	1bc0c <icmpv4_handle_echo_request+0xf4>
	if (net_ipv4_is_addr_mcast((struct in_addr *)ip_hdr->dst) ||
   1bb6c:	f106 0810 	add.w	r8, r6, #16
   1bb70:	4640      	mov	r0, r8
   1bb72:	f7ff ff92 	bl	1ba9a <net_ipv4_is_addr_mcast>
   1bb76:	b920      	cbnz	r0, 1bb82 <icmpv4_handle_echo_request+0x6a>
	    net_ipv4_is_addr_bcast(net_pkt_iface(pkt),
   1bb78:	4641      	mov	r1, r8
   1bb7a:	69a8      	ldr	r0, [r5, #24]
   1bb7c:	f7ff ffbc 	bl	1baf8 <net_ipv4_is_addr_bcast>
	if (net_ipv4_is_addr_mcast((struct in_addr *)ip_hdr->dst) ||
   1bb80:	b120      	cbz	r0, 1bb8c <icmpv4_handle_echo_request+0x74>
		src = net_if_ipv4_select_src_addr(net_pkt_iface(pkt),
   1bb82:	4641      	mov	r1, r8
   1bb84:	69a8      	ldr	r0, [r5, #24]
   1bb86:	f7ea ffa9 	bl	6adc <net_if_ipv4_select_src_addr>
   1bb8a:	4680      	mov	r8, r0
	return pkt->ip_dscp;
   1bb8c:	f895 203b 	ldrb.w	r2, [r5, #59]	; 0x3b
	pkt->ip_dscp = dscp;
   1bb90:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
   1bb94:	f362 0305 	bfi	r3, r2, #0, #6
   1bb98:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	return pkt->ip_ecn;
   1bb9c:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
   1bba0:	099b      	lsrs	r3, r3, #6
	pkt->ip_ecn = ecn;
   1bba2:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
   1bba6:	f363 1287 	bfi	r2, r3, #6, #2
   1bbaa:	f887 203b 	strb.w	r2, [r7, #59]	; 0x3b
	if (net_ipv4_create(reply, src, (struct in_addr *)ip_hdr->src)) {
   1bbae:	f106 020c 	add.w	r2, r6, #12
   1bbb2:	4641      	mov	r1, r8
   1bbb4:	4638      	mov	r0, r7
   1bbb6:	f000 f953 	bl	1be60 <net_ipv4_create>
   1bbba:	b9e0      	cbnz	r0, 1bbf6 <icmpv4_handle_echo_request+0xde>
	if (icmpv4_create(reply, NET_ICMPV4_ECHO_REPLY, 0) ||
   1bbbc:	2200      	movs	r2, #0
   1bbbe:	4611      	mov	r1, r2
   1bbc0:	4638      	mov	r0, r7
   1bbc2:	f7ff ff7e 	bl	1bac2 <icmpv4_create>
   1bbc6:	b9b0      	cbnz	r0, 1bbf6 <icmpv4_handle_echo_request+0xde>
	    net_pkt_copy(reply, pkt, payload_len)) {
   1bbc8:	4622      	mov	r2, r4
   1bbca:	4629      	mov	r1, r5
   1bbcc:	4638      	mov	r0, r7
   1bbce:	f7ff fc16 	bl	1b3fe <net_pkt_copy>
	if (icmpv4_create(reply, NET_ICMPV4_ECHO_REPLY, 0) ||
   1bbd2:	b980      	cbnz	r0, 1bbf6 <icmpv4_handle_echo_request+0xde>
	net_pkt_cursor_init(reply);
   1bbd4:	4638      	mov	r0, r7
   1bbd6:	f7ff fb03 	bl	1b1e0 <net_pkt_cursor_init>
	net_ipv4_finalize(reply, IPPROTO_ICMP);
   1bbda:	2101      	movs	r1, #1
   1bbdc:	4638      	mov	r0, r7
   1bbde:	f000 f953 	bl	1be88 <net_ipv4_finalize>
	if (net_send_data(reply) < 0) {
   1bbe2:	4638      	mov	r0, r7
   1bbe4:	f7fd fd29 	bl	1963a <net_send_data>
   1bbe8:	2800      	cmp	r0, #0
   1bbea:	db04      	blt.n	1bbf6 <icmpv4_handle_echo_request+0xde>
	net_pkt_unref(pkt);
   1bbec:	4628      	mov	r0, r5
   1bbee:	f7ff fa5f 	bl	1b0b0 <net_pkt_unref>
	return NET_OK;
   1bbf2:	2000      	movs	r0, #0
   1bbf4:	e003      	b.n	1bbfe <icmpv4_handle_echo_request+0xe6>
		net_pkt_unref(reply);
   1bbf6:	4638      	mov	r0, r7
   1bbf8:	f7ff fa5a 	bl	1b0b0 <net_pkt_unref>
	return NET_DROP;
   1bbfc:	2002      	movs	r0, #2
}
   1bbfe:	b002      	add	sp, #8
   1bc00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return NET_DROP;
   1bc04:	2002      	movs	r0, #2
}
   1bc06:	4770      	bx	lr
	return NET_DROP;
   1bc08:	2002      	movs	r0, #2
   1bc0a:	e7f8      	b.n	1bbfe <icmpv4_handle_echo_request+0xe6>
   1bc0c:	2002      	movs	r0, #2
   1bc0e:	e7f6      	b.n	1bbfe <icmpv4_handle_echo_request+0xe6>

0001bc10 <net_icmpv4_finalize>:
{
   1bc10:	b530      	push	{r4, r5, lr}
   1bc12:	b083      	sub	sp, #12
   1bc14:	4604      	mov	r4, r0
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv4_access,
   1bc16:	2300      	movs	r3, #0
   1bc18:	9300      	str	r3, [sp, #0]
   1bc1a:	2304      	movs	r3, #4
   1bc1c:	9301      	str	r3, [sp, #4]
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmpv4_access);
   1bc1e:	4669      	mov	r1, sp
   1bc20:	f7ff fd70 	bl	1b704 <net_pkt_get_data>
	if (!icmp_hdr) {
   1bc24:	b198      	cbz	r0, 1bc4e <net_icmpv4_finalize+0x3e>
   1bc26:	4605      	mov	r5, r0
	icmp_hdr->chksum = 0U;
   1bc28:	2300      	movs	r3, #0
   1bc2a:	7083      	strb	r3, [r0, #2]
   1bc2c:	70c3      	strb	r3, [r0, #3]
	if (net_if_need_calc_tx_checksum(net_pkt_iface(pkt))) {
   1bc2e:	69a0      	ldr	r0, [r4, #24]
   1bc30:	f7fd ff44 	bl	19abc <net_if_need_calc_tx_checksum>
   1bc34:	b928      	cbnz	r0, 1bc42 <net_icmpv4_finalize+0x32>
	return net_pkt_set_data(pkt, &icmpv4_access);
   1bc36:	4669      	mov	r1, sp
   1bc38:	4620      	mov	r0, r4
   1bc3a:	f7ff fd87 	bl	1b74c <net_pkt_set_data>
}
   1bc3e:	b003      	add	sp, #12
   1bc40:	bd30      	pop	{r4, r5, pc}
   1bc42:	2101      	movs	r1, #1
   1bc44:	4620      	mov	r0, r4
   1bc46:	f7fe f983 	bl	19f50 <net_calc_chksum>
		icmp_hdr->chksum = net_calc_chksum_icmpv4(pkt);
   1bc4a:	8068      	strh	r0, [r5, #2]
   1bc4c:	e7f3      	b.n	1bc36 <net_icmpv4_finalize+0x26>
		return -ENOBUFS;
   1bc4e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1bc52:	e7f4      	b.n	1bc3e <net_icmpv4_finalize+0x2e>

0001bc54 <net_icmpv4_send_error>:
{
   1bc54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1bc58:	b086      	sub	sp, #24
   1bc5a:	4605      	mov	r5, r0
   1bc5c:	460f      	mov	r7, r1
   1bc5e:	4690      	mov	r8, r2
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
   1bc60:	2300      	movs	r3, #0
   1bc62:	9304      	str	r3, [sp, #16]
   1bc64:	2314      	movs	r3, #20
   1bc66:	9305      	str	r3, [sp, #20]
	net_pkt_cursor_init(orig);
   1bc68:	f7ff faba 	bl	1b1e0 <net_pkt_cursor_init>
	ip_hdr = (struct net_ipv4_hdr *)net_pkt_get_data(orig, &ipv4_access);
   1bc6c:	a904      	add	r1, sp, #16
   1bc6e:	4628      	mov	r0, r5
   1bc70:	f7ff fd48 	bl	1b704 <net_pkt_get_data>
	if (!ip_hdr) {
   1bc74:	2800      	cmp	r0, #0
   1bc76:	d06c      	beq.n	1bd52 <net_icmpv4_send_error+0xfe>
   1bc78:	4606      	mov	r6, r0
	if (ip_hdr->proto == IPPROTO_ICMP) {
   1bc7a:	7a43      	ldrb	r3, [r0, #9]
   1bc7c:	2b01      	cmp	r3, #1
   1bc7e:	d04d      	beq.n	1bd1c <net_icmpv4_send_error+0xc8>
				   (struct in_addr *)ip_hdr->dst)) {
   1bc80:	f106 0910 	add.w	r9, r6, #16
	if (net_ipv4_is_addr_bcast(net_pkt_iface(orig),
   1bc84:	4649      	mov	r1, r9
   1bc86:	69a8      	ldr	r0, [r5, #24]
   1bc88:	f7ff ff36 	bl	1baf8 <net_ipv4_is_addr_bcast>
   1bc8c:	2800      	cmp	r0, #0
   1bc8e:	d163      	bne.n	1bd58 <net_icmpv4_send_error+0x104>
	if (ip_hdr->proto == IPPROTO_UDP) {
   1bc90:	7a73      	ldrb	r3, [r6, #9]
   1bc92:	2b11      	cmp	r3, #17
   1bc94:	d054      	beq.n	1bd40 <net_icmpv4_send_error+0xec>
	} else if (ip_hdr->proto == IPPROTO_TCP) {
   1bc96:	2b06      	cmp	r3, #6
   1bc98:	d04f      	beq.n	1bd3a <net_icmpv4_send_error+0xe6>
		copy_len = 0;
   1bc9a:	f04f 0a00 	mov.w	sl, #0
	pkt = net_pkt_alloc_with_buffer(net_pkt_iface(orig),
   1bc9e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1bca2:	2300      	movs	r3, #0
   1bca4:	e9cd 2300 	strd	r2, r3, [sp]
   1bca8:	2301      	movs	r3, #1
   1bcaa:	461a      	mov	r2, r3
   1bcac:	f10a 0104 	add.w	r1, sl, #4
   1bcb0:	69a8      	ldr	r0, [r5, #24]
   1bcb2:	f7eb ff03 	bl	7abc <net_pkt_alloc_with_buffer>
	if (!pkt) {
   1bcb6:	4604      	mov	r4, r0
   1bcb8:	2800      	cmp	r0, #0
   1bcba:	d050      	beq.n	1bd5e <net_icmpv4_send_error+0x10a>
	if (net_ipv4_create(pkt, (struct in_addr *)ip_hdr->dst,
   1bcbc:	f106 020c 	add.w	r2, r6, #12
   1bcc0:	4649      	mov	r1, r9
   1bcc2:	f000 f8cd 	bl	1be60 <net_ipv4_create>
   1bcc6:	2800      	cmp	r0, #0
   1bcc8:	d13d      	bne.n	1bd46 <net_icmpv4_send_error+0xf2>
	    icmpv4_create(pkt, type, code) ||
   1bcca:	4642      	mov	r2, r8
   1bccc:	4639      	mov	r1, r7
   1bcce:	4620      	mov	r0, r4
   1bcd0:	f7ff fef7 	bl	1bac2 <icmpv4_create>
			    (struct in_addr *)ip_hdr->src) ||
   1bcd4:	bbb8      	cbnz	r0, 1bd46 <net_icmpv4_send_error+0xf2>
	    net_pkt_memset(pkt, 0, NET_ICMPV4_UNUSED_LEN) ||
   1bcd6:	2204      	movs	r2, #4
   1bcd8:	2100      	movs	r1, #0
   1bcda:	4620      	mov	r0, r4
   1bcdc:	f7ff fb79 	bl	1b3d2 <net_pkt_memset>
	    icmpv4_create(pkt, type, code) ||
   1bce0:	bb88      	cbnz	r0, 1bd46 <net_icmpv4_send_error+0xf2>
	    net_pkt_copy(pkt, orig, copy_len)) {
   1bce2:	4652      	mov	r2, sl
   1bce4:	4629      	mov	r1, r5
   1bce6:	4620      	mov	r0, r4
   1bce8:	f7ff fb89 	bl	1b3fe <net_pkt_copy>
	    net_pkt_memset(pkt, 0, NET_ICMPV4_UNUSED_LEN) ||
   1bcec:	4606      	mov	r6, r0
   1bcee:	bb50      	cbnz	r0, 1bd46 <net_icmpv4_send_error+0xf2>
	net_pkt_cursor_init(pkt);
   1bcf0:	4620      	mov	r0, r4
   1bcf2:	f7ff fa75 	bl	1b1e0 <net_pkt_cursor_init>
	net_ipv4_finalize(pkt, IPPROTO_ICMP);
   1bcf6:	2101      	movs	r1, #1
   1bcf8:	4620      	mov	r0, r4
   1bcfa:	f000 f8c5 	bl	1be88 <net_ipv4_finalize>
	net_pkt_lladdr_dst(pkt)->addr = net_pkt_lladdr_src(orig)->addr;
   1bcfe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1bd00:	62e3      	str	r3, [r4, #44]	; 0x2c
	net_pkt_lladdr_dst(pkt)->len = net_pkt_lladdr_src(orig)->len;
   1bd02:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   1bd06:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	if (net_send_data(pkt) >= 0) {
   1bd0a:	4620      	mov	r0, r4
   1bd0c:	f7fd fc95 	bl	1963a <net_send_data>
   1bd10:	2800      	cmp	r0, #0
   1bd12:	db18      	blt.n	1bd46 <net_icmpv4_send_error+0xf2>
}
   1bd14:	4630      	mov	r0, r6
   1bd16:	b006      	add	sp, #24
   1bd18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv4_access,
   1bd1c:	2300      	movs	r3, #0
   1bd1e:	9302      	str	r3, [sp, #8]
   1bd20:	2304      	movs	r3, #4
   1bd22:	9303      	str	r3, [sp, #12]
		icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(
   1bd24:	a902      	add	r1, sp, #8
   1bd26:	4628      	mov	r0, r5
   1bd28:	f7ff fcec 	bl	1b704 <net_pkt_get_data>
		if (!icmp_hdr || icmp_hdr->code < 8) {
   1bd2c:	b110      	cbz	r0, 1bd34 <net_icmpv4_send_error+0xe0>
   1bd2e:	7843      	ldrb	r3, [r0, #1]
   1bd30:	2b07      	cmp	r3, #7
   1bd32:	d8a5      	bhi.n	1bc80 <net_icmpv4_send_error+0x2c>
			err = -EINVAL;
   1bd34:	f06f 0615 	mvn.w	r6, #21
   1bd38:	e7ec      	b.n	1bd14 <net_icmpv4_send_error+0xc0>
		copy_len = sizeof(struct net_ipv4_hdr) +
   1bd3a:	f04f 0a28 	mov.w	sl, #40	; 0x28
   1bd3e:	e7ae      	b.n	1bc9e <net_icmpv4_send_error+0x4a>
		copy_len = sizeof(struct net_ipv4_hdr) +
   1bd40:	f04f 0a1c 	mov.w	sl, #28
   1bd44:	e7ab      	b.n	1bc9e <net_icmpv4_send_error+0x4a>
	net_pkt_unref(pkt);
   1bd46:	4620      	mov	r0, r4
   1bd48:	f7ff f9b2 	bl	1b0b0 <net_pkt_unref>
	int err = -EIO;
   1bd4c:	f06f 0604 	mvn.w	r6, #4
   1bd50:	e7e0      	b.n	1bd14 <net_icmpv4_send_error+0xc0>
   1bd52:	f06f 0604 	mvn.w	r6, #4
   1bd56:	e7dd      	b.n	1bd14 <net_icmpv4_send_error+0xc0>
   1bd58:	f06f 0604 	mvn.w	r6, #4
   1bd5c:	e7da      	b.n	1bd14 <net_icmpv4_send_error+0xc0>
		err =  -ENOMEM;
   1bd5e:	f06f 060b 	mvn.w	r6, #11
   1bd62:	e7d7      	b.n	1bd14 <net_icmpv4_send_error+0xc0>

0001bd64 <net_ipv4_is_addr_mcast>:
	return (ntohl(UNALIGNED_GET(&addr->s_addr)) & 0xF0000000) == 0xE0000000;
   1bd64:	6803      	ldr	r3, [r0, #0]
   1bd66:	0a18      	lsrs	r0, r3, #8
   1bd68:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
   1bd6c:	ea40 6013 	orr.w	r0, r0, r3, lsr #24
   1bd70:	021a      	lsls	r2, r3, #8
   1bd72:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
   1bd76:	4310      	orrs	r0, r2
   1bd78:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
   1bd7c:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
}
   1bd80:	f1b0 4f60 	cmp.w	r0, #3758096384	; 0xe0000000
   1bd84:	bf14      	ite	ne
   1bd86:	2000      	movne	r0, #0
   1bd88:	2001      	moveq	r0, #1
   1bd8a:	4770      	bx	lr

0001bd8c <net_ipv4_is_addr_bcast>:
{
   1bd8c:	b538      	push	{r3, r4, r5, lr}
   1bd8e:	4605      	mov	r5, r0
   1bd90:	460c      	mov	r4, r1
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
   1bd92:	f7eb fb15 	bl	73c0 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   1bd96:	6822      	ldr	r2, [r4, #0]
   1bd98:	6803      	ldr	r3, [r0, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
   1bd9a:	429a      	cmp	r2, r3
   1bd9c:	d004      	beq.n	1bda8 <net_ipv4_is_addr_bcast+0x1c>
	return net_if_ipv4_is_addr_bcast(iface, addr);
   1bd9e:	4621      	mov	r1, r4
   1bda0:	4628      	mov	r0, r5
   1bda2:	f7ea fe4f 	bl	6a44 <net_if_ipv4_is_addr_bcast>
}
   1bda6:	bd38      	pop	{r3, r4, r5, pc}
		return true;
   1bda8:	2001      	movs	r0, #1
   1bdaa:	e7fc      	b.n	1bda6 <net_ipv4_is_addr_bcast+0x1a>

0001bdac <net_ipv4_is_my_addr>:
{
   1bdac:	b510      	push	{r4, lr}
   1bdae:	4604      	mov	r4, r0
	ret = net_if_ipv4_addr_lookup(addr, NULL) != NULL;
   1bdb0:	2100      	movs	r1, #0
   1bdb2:	f7ea feef 	bl	6b94 <net_if_ipv4_addr_lookup>
   1bdb6:	2800      	cmp	r0, #0
   1bdb8:	bf14      	ite	ne
   1bdba:	2001      	movne	r0, #1
   1bdbc:	2000      	moveq	r0, #0
	if (!ret) {
   1bdbe:	d000      	beq.n	1bdc2 <net_ipv4_is_my_addr+0x16>
}
   1bdc0:	bd10      	pop	{r4, pc}
		ret = net_ipv4_is_addr_bcast(NULL, addr);
   1bdc2:	4621      	mov	r1, r4
   1bdc4:	2000      	movs	r0, #0
   1bdc6:	f7ff ffe1 	bl	1bd8c <net_ipv4_is_addr_bcast>
   1bdca:	e7f9      	b.n	1bdc0 <net_ipv4_is_my_addr+0x14>

0001bdcc <net_ipv4_create_full>:
			 uint8_t tos,
			 uint16_t id,
			 uint8_t flags,
			 uint16_t offset,
			 uint8_t ttl)
{
   1bdcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bdd0:	b083      	sub	sp, #12
   1bdd2:	4605      	mov	r5, r0
   1bdd4:	460e      	mov	r6, r1
   1bdd6:	4617      	mov	r7, r2
   1bdd8:	4698      	mov	r8, r3
   1bdda:	f8bd b030 	ldrh.w	fp, [sp, #48]	; 0x30
   1bdde:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
   1bde2:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
   1bde6:	2300      	movs	r3, #0
   1bde8:	9300      	str	r3, [sp, #0]
   1bdea:	2314      	movs	r3, #20
   1bdec:	9301      	str	r3, [sp, #4]
	struct net_ipv4_hdr *ipv4_hdr;

	ipv4_hdr = (struct net_ipv4_hdr *)net_pkt_get_data(pkt, &ipv4_access);
   1bdee:	4669      	mov	r1, sp
   1bdf0:	f7ff fc88 	bl	1b704 <net_pkt_get_data>
	if (!ipv4_hdr) {
   1bdf4:	b388      	cbz	r0, 1be5a <net_ipv4_create_full+0x8e>
   1bdf6:	4604      	mov	r4, r0
		return -ENOBUFS;
	}

	ipv4_hdr->vhl       = 0x45;
   1bdf8:	2345      	movs	r3, #69	; 0x45
   1bdfa:	7003      	strb	r3, [r0, #0]
	ipv4_hdr->tos       = tos;
   1bdfc:	f880 8001 	strb.w	r8, [r0, #1]
	ipv4_hdr->len       = 0U;
   1be00:	2300      	movs	r3, #0
   1be02:	7083      	strb	r3, [r0, #2]
   1be04:	70c3      	strb	r3, [r0, #3]
	ipv4_hdr->id[0]     = id >> 8;
   1be06:	ea4f 231b 	mov.w	r3, fp, lsr #8
   1be0a:	7103      	strb	r3, [r0, #4]
	ipv4_hdr->id[1]     = id;
   1be0c:	f880 b005 	strb.w	fp, [r0, #5]
	ipv4_hdr->offset[0] = (offset >> 8) | (flags << 5);
   1be10:	ea4f 231a 	mov.w	r3, sl, lsr #8
   1be14:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
   1be18:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   1be1c:	7183      	strb	r3, [r0, #6]
	ipv4_hdr->offset[1] = offset;
   1be1e:	f880 a007 	strb.w	sl, [r0, #7]
	ipv4_hdr->ttl       = ttl;
   1be22:	f880 9008 	strb.w	r9, [r0, #8]

	if (ttl == 0U) {
   1be26:	f1b9 0f00 	cmp.w	r9, #0
   1be2a:	d011      	beq.n	1be50 <net_ipv4_create_full+0x84>
		ipv4_hdr->ttl = net_if_ipv4_get_ttl(net_pkt_iface(pkt));
	}

	ipv4_hdr->proto     = 0U;
   1be2c:	2300      	movs	r3, #0
   1be2e:	7263      	strb	r3, [r4, #9]
	ipv4_hdr->chksum    = 0U;
   1be30:	72a3      	strb	r3, [r4, #10]
   1be32:	72e3      	strb	r3, [r4, #11]
	net_ipaddr_copy((struct in_addr *)dest, (const struct in_addr *)src);
   1be34:	683b      	ldr	r3, [r7, #0]
   1be36:	6123      	str	r3, [r4, #16]
   1be38:	6833      	ldr	r3, [r6, #0]
   1be3a:	60e3      	str	r3, [r4, #12]
	pkt->ip_hdr_len = len;
   1be3c:	2314      	movs	r3, #20
   1be3e:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
	net_ipv4_addr_copy_raw(ipv4_hdr->dst, (uint8_t *)dst);
	net_ipv4_addr_copy_raw(ipv4_hdr->src, (uint8_t *)src);

	net_pkt_set_ip_hdr_len(pkt, sizeof(struct net_ipv4_hdr));

	return net_pkt_set_data(pkt, &ipv4_access);
   1be42:	4669      	mov	r1, sp
   1be44:	4628      	mov	r0, r5
   1be46:	f7ff fc81 	bl	1b74c <net_pkt_set_data>
}
   1be4a:	b003      	add	sp, #12
   1be4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ipv4_hdr->ttl = net_if_ipv4_get_ttl(net_pkt_iface(pkt));
   1be50:	69a8      	ldr	r0, [r5, #24]
   1be52:	f7ea fda9 	bl	69a8 <net_if_ipv4_get_ttl>
   1be56:	7220      	strb	r0, [r4, #8]
   1be58:	e7e8      	b.n	1be2c <net_ipv4_create_full+0x60>
		return -ENOBUFS;
   1be5a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1be5e:	e7f4      	b.n	1be4a <net_ipv4_create_full+0x7e>

0001be60 <net_ipv4_create>:

int net_ipv4_create(struct net_pkt *pkt,
		    const struct in_addr *src,
		    const struct in_addr *dst)
{
   1be60:	b510      	push	{r4, lr}
   1be62:	b084      	sub	sp, #16
	return pkt->ip_dscp;
   1be64:	f890 e03b 	ldrb.w	lr, [r0, #59]	; 0x3b
   1be68:	f00e 033f 	and.w	r3, lr, #63	; 0x3f
 * @param tos A pointer to the ToS field.
 * @param ecn ECN value to set.
 */
static inline void net_ipv4_set_ecn(uint8_t *tos, uint8_t ecn)
{
	*tos &= ~NET_IPV4_ECN_MASK;
   1be6c:	009b      	lsls	r3, r3, #2
	return pkt->ipv4_ttl;
   1be6e:	f890 4039 	ldrb.w	r4, [r0, #57]	; 0x39
	if (IS_ENABLED(CONFIG_NET_IP_DSCP_ECN)) {
		net_ipv4_set_dscp(&tos, net_pkt_ip_dscp(pkt));
		net_ipv4_set_ecn(&tos, net_pkt_ip_ecn(pkt));
	}

	return net_ipv4_create_full(pkt, src, dst, tos, 0U, 0U, 0U,
   1be72:	9403      	str	r4, [sp, #12]
   1be74:	2400      	movs	r4, #0
   1be76:	9402      	str	r4, [sp, #8]
   1be78:	9401      	str	r4, [sp, #4]
   1be7a:	9400      	str	r4, [sp, #0]
   1be7c:	ea43 139e 	orr.w	r3, r3, lr, lsr #6
   1be80:	f7ff ffa4 	bl	1bdcc <net_ipv4_create_full>
				    net_pkt_ipv4_ttl(pkt));
}
   1be84:	b004      	add	sp, #16
   1be86:	bd10      	pop	{r4, pc}

0001be88 <net_ipv4_finalize>:

int net_ipv4_finalize(struct net_pkt *pkt, uint8_t next_header_proto)
{
   1be88:	b570      	push	{r4, r5, r6, lr}
   1be8a:	b082      	sub	sp, #8
   1be8c:	4604      	mov	r4, r0
   1be8e:	460d      	mov	r5, r1
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
   1be90:	2300      	movs	r3, #0
   1be92:	9300      	str	r3, [sp, #0]
   1be94:	2314      	movs	r3, #20
   1be96:	9301      	str	r3, [sp, #4]
	pkt->overwrite = overwrite;
   1be98:	f890 3037 	ldrb.w	r3, [r0, #55]	; 0x37
   1be9c:	f043 0301 	orr.w	r3, r3, #1
   1bea0:	f880 3037 	strb.w	r3, [r0, #55]	; 0x37
	struct net_ipv4_hdr *ipv4_hdr;

	net_pkt_set_overwrite(pkt, true);

	ipv4_hdr = (struct net_ipv4_hdr *)net_pkt_get_data(pkt, &ipv4_access);
   1bea4:	4669      	mov	r1, sp
   1bea6:	f7ff fc2d 	bl	1b704 <net_pkt_get_data>
	if (!ipv4_hdr) {
   1beaa:	2800      	cmp	r0, #0
   1beac:	d03b      	beq.n	1bf26 <net_ipv4_finalize+0x9e>
   1beae:	4606      	mov	r6, r0
	return net_buf_frags_len(pkt->frags);
   1beb0:	68a3      	ldr	r3, [r4, #8]
   1beb2:	461a      	mov	r2, r3
	size_t bytes = 0;
   1beb4:	f04f 0c00 	mov.w	ip, #0
	while (buf) {
   1beb8:	e002      	b.n	1bec0 <net_ipv4_finalize+0x38>
		bytes += buf->len;
   1beba:	8991      	ldrh	r1, [r2, #12]
   1bebc:	448c      	add	ip, r1
		buf = buf->frags;
   1bebe:	6812      	ldr	r2, [r2, #0]
	while (buf) {
   1bec0:	2a00      	cmp	r2, #0
   1bec2:	d1fa      	bne.n	1beba <net_ipv4_finalize+0x32>
					((net_pkt_ip_hdr_len(pkt) +
					  net_pkt_ipv4_opts_len(pkt)) / 4U));
		}
	}

	ipv4_hdr->len   = htons(net_pkt_get_len(pkt));
   1bec4:	f3cc 2c07 	ubfx	ip, ip, #8, #8
   1bec8:	e002      	b.n	1bed0 <net_ipv4_finalize+0x48>
		bytes += buf->len;
   1beca:	8999      	ldrh	r1, [r3, #12]
   1becc:	440a      	add	r2, r1
		buf = buf->frags;
   1bece:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1bed0:	2b00      	cmp	r3, #0
   1bed2:	d1fa      	bne.n	1beca <net_ipv4_finalize+0x42>
   1bed4:	0212      	lsls	r2, r2, #8
   1bed6:	b292      	uxth	r2, r2
   1bed8:	ea4c 0c02 	orr.w	ip, ip, r2
   1bedc:	f8a6 c002 	strh.w	ip, [r6, #2]
	ipv4_hdr->proto = next_header_proto;
   1bee0:	7275      	strb	r5, [r6, #9]

	if (net_if_need_calc_tx_checksum(net_pkt_iface(pkt))) {
   1bee2:	69a0      	ldr	r0, [r4, #24]
   1bee4:	f7fd fdea 	bl	19abc <net_if_need_calc_tx_checksum>
   1bee8:	b960      	cbnz	r0, 1bf04 <net_ipv4_finalize+0x7c>
		ipv4_hdr->chksum = net_calc_chksum_ipv4(pkt);
	}

	net_pkt_set_data(pkt, &ipv4_access);
   1beea:	4669      	mov	r1, sp
   1beec:	4620      	mov	r0, r4
   1beee:	f7ff fc2d 	bl	1b74c <net_pkt_set_data>

	if (IS_ENABLED(CONFIG_NET_UDP) &&
   1bef2:	2d11      	cmp	r5, #17
   1bef4:	d00b      	beq.n	1bf0e <net_ipv4_finalize+0x86>
	    next_header_proto == IPPROTO_UDP) {
		return net_udp_finalize(pkt);
	} else if (IS_ENABLED(CONFIG_NET_TCP) &&
   1bef6:	2d06      	cmp	r5, #6
   1bef8:	d00d      	beq.n	1bf16 <net_ipv4_finalize+0x8e>
		   next_header_proto == IPPROTO_TCP) {
		return net_tcp_finalize(pkt);
	} else if (next_header_proto == IPPROTO_ICMP) {
   1befa:	2d01      	cmp	r5, #1
   1befc:	d00f      	beq.n	1bf1e <net_ipv4_finalize+0x96>
		return net_icmpv4_finalize(pkt);
	}

	return 0;
   1befe:	2000      	movs	r0, #0
}
   1bf00:	b002      	add	sp, #8
   1bf02:	bd70      	pop	{r4, r5, r6, pc}
		ipv4_hdr->chksum = net_calc_chksum_ipv4(pkt);
   1bf04:	4620      	mov	r0, r4
   1bf06:	f7fe f884 	bl	1a012 <net_calc_chksum_ipv4>
   1bf0a:	8170      	strh	r0, [r6, #10]
   1bf0c:	e7ed      	b.n	1beea <net_ipv4_finalize+0x62>
		return net_udp_finalize(pkt);
   1bf0e:	4620      	mov	r0, r4
   1bf10:	f000 ffe7 	bl	1cee2 <net_udp_finalize>
   1bf14:	e7f4      	b.n	1bf00 <net_ipv4_finalize+0x78>
		return net_tcp_finalize(pkt);
   1bf16:	4620      	mov	r0, r4
   1bf18:	f000 fd3c 	bl	1c994 <net_tcp_finalize>
   1bf1c:	e7f0      	b.n	1bf00 <net_ipv4_finalize+0x78>
		return net_icmpv4_finalize(pkt);
   1bf1e:	4620      	mov	r0, r4
   1bf20:	f7ff fe76 	bl	1bc10 <net_icmpv4_finalize>
   1bf24:	e7ec      	b.n	1bf00 <net_ipv4_finalize+0x78>
		return -ENOBUFS;
   1bf26:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1bf2a:	e7e9      	b.n	1bf00 <net_ipv4_finalize+0x78>

0001bf2c <net_ipv4_input>:
	return 0;
}
#endif

enum net_verdict net_ipv4_input(struct net_pkt *pkt)
{
   1bf2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bf2e:	b091      	sub	sp, #68	; 0x44
   1bf30:	4605      	mov	r5, r0
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
   1bf32:	2200      	movs	r2, #0
   1bf34:	920e      	str	r2, [sp, #56]	; 0x38
   1bf36:	2314      	movs	r3, #20
   1bf38:	930f      	str	r3, [sp, #60]	; 0x3c
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
   1bf3a:	a90c      	add	r1, sp, #48	; 0x30
   1bf3c:	910a      	str	r1, [sp, #40]	; 0x28
   1bf3e:	2108      	movs	r1, #8
   1bf40:	910b      	str	r1, [sp, #44]	; 0x2c
	NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
   1bf42:	eb0d 0103 	add.w	r1, sp, r3
   1bf46:	9103      	str	r1, [sp, #12]
   1bf48:	9304      	str	r3, [sp, #16]
   1bf4a:	6883      	ldr	r3, [r0, #8]
   1bf4c:	e002      	b.n	1bf54 <net_ipv4_input+0x28>
		bytes += buf->len;
   1bf4e:	8999      	ldrh	r1, [r3, #12]
   1bf50:	440a      	add	r2, r1
		buf = buf->frags;
   1bf52:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1bf54:	2b00      	cmp	r3, #0
   1bf56:	d1fa      	bne.n	1bf4e <net_ipv4_input+0x22>
	int real_len = net_pkt_get_len(pkt);
   1bf58:	4614      	mov	r4, r2
	net_pkt_cursor_backup(pkt, &hdr_start);
#endif

	net_stats_update_ipv4_recv(net_pkt_iface(pkt));

	hdr = (struct net_ipv4_hdr *)net_pkt_get_data(pkt, &ipv4_access);
   1bf5a:	a90e      	add	r1, sp, #56	; 0x38
   1bf5c:	4628      	mov	r0, r5
   1bf5e:	f7ff fbd1 	bl	1b704 <net_pkt_get_data>
	if (!hdr) {
   1bf62:	4607      	mov	r7, r0
   1bf64:	2800      	cmp	r0, #0
   1bf66:	f000 80ac 	beq.w	1c0c2 <net_ipv4_input+0x196>
		NET_DBG("DROP: no buffer");
		goto drop;
	}

	hdr_len = (hdr->vhl & NET_IPV4_IHL_MASK) * 4U;
   1bf6a:	7803      	ldrb	r3, [r0, #0]
   1bf6c:	f003 030f 	and.w	r3, r3, #15
   1bf70:	009b      	lsls	r3, r3, #2
	if (hdr_len < sizeof(struct net_ipv4_hdr)) {
   1bf72:	2b13      	cmp	r3, #19
   1bf74:	f240 80a7 	bls.w	1c0c6 <net_ipv4_input+0x19a>
	pkt->ip_hdr_len = len;
   1bf78:	2214      	movs	r2, #20
   1bf7a:	f885 2036 	strb.w	r2, [r5, #54]	; 0x36
	}

	net_pkt_set_ip_hdr_len(pkt, sizeof(struct net_ipv4_hdr));

	if (IS_ENABLED(CONFIG_NET_IP_DSCP_ECN)) {
		net_pkt_set_ip_dscp(pkt, net_ipv4_get_dscp(hdr->tos));
   1bf7e:	7842      	ldrb	r2, [r0, #1]
	return (tos & NET_IPV4_DSCP_MASK) >> NET_IPV4_DSCP_OFFSET;
   1bf80:	0892      	lsrs	r2, r2, #2
	pkt->ip_dscp = dscp;
   1bf82:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
   1bf86:	f362 0105 	bfi	r1, r2, #0, #6
   1bf8a:	f885 103b 	strb.w	r1, [r5, #59]	; 0x3b
		net_pkt_set_ip_ecn(pkt, net_ipv4_get_ecn(hdr->tos));
   1bf8e:	7841      	ldrb	r1, [r0, #1]
	pkt->ip_ecn = ecn;
   1bf90:	f895 203b 	ldrb.w	r2, [r5, #59]	; 0x3b
   1bf94:	f361 1287 	bfi	r2, r1, #6, #2
   1bf98:	f885 203b 	strb.w	r2, [r5, #59]	; 0x3b
	}

	opts_len = hdr_len - sizeof(struct net_ipv4_hdr);
   1bf9c:	3b14      	subs	r3, #20
   1bf9e:	b2de      	uxtb	r6, r3
	if (opts_len > NET_IPV4_HDR_OPTNS_MAX_LEN) {
   1bfa0:	2e28      	cmp	r6, #40	; 0x28
   1bfa2:	f200 8093 	bhi.w	1c0cc <net_ipv4_input+0x1a0>
		return -EINVAL;
	}

	if (hdr->ttl == 0) {
   1bfa6:	7a03      	ldrb	r3, [r0, #8]
   1bfa8:	2b00      	cmp	r3, #0
   1bfaa:	f000 8091 	beq.w	1c0d0 <net_ipv4_input+0x1a4>
	pkt->ipv4_opts_len = opts_len;
   1bfae:	f885 603a 	strb.w	r6, [r5, #58]	; 0x3a
		goto drop;
	}

	net_pkt_set_ipv4_opts_len(pkt, opts_len);

	pkt_len = ntohs(hdr->len);
   1bfb2:	8843      	ldrh	r3, [r0, #2]
   1bfb4:	0219      	lsls	r1, r3, #8
   1bfb6:	ea41 2113 	orr.w	r1, r1, r3, lsr #8
   1bfba:	b289      	uxth	r1, r1
	if (real_len < pkt_len) {
   1bfbc:	42a1      	cmp	r1, r4
   1bfbe:	f300 8089 	bgt.w	1c0d4 <net_ipv4_input+0x1a8>
		NET_DBG("DROP: pkt len per hdr %d != pkt real len %d",
			pkt_len, real_len);
		goto drop;
	} else if (real_len > pkt_len) {
   1bfc2:	db2e      	blt.n	1c022 <net_ipv4_input+0xf6>
		net_pkt_update_length(pkt, pkt_len);
	}

	if (net_ipv4_is_addr_mcast((struct in_addr *)hdr->src)) {
   1bfc4:	f107 040c 	add.w	r4, r7, #12
   1bfc8:	4620      	mov	r0, r4
   1bfca:	f7ff fecb 	bl	1bd64 <net_ipv4_is_addr_mcast>
   1bfce:	2800      	cmp	r0, #0
   1bfd0:	f040 8082 	bne.w	1c0d8 <net_ipv4_input+0x1ac>
		NET_DBG("DROP: src addr is %s", "mcast");
		goto drop;
	}

	if (net_ipv4_is_addr_bcast(net_pkt_iface(pkt), (struct in_addr *)hdr->src)) {
   1bfd4:	4621      	mov	r1, r4
   1bfd6:	69a8      	ldr	r0, [r5, #24]
   1bfd8:	f7ff fed8 	bl	1bd8c <net_ipv4_is_addr_bcast>
   1bfdc:	2800      	cmp	r0, #0
   1bfde:	d17d      	bne.n	1c0dc <net_ipv4_input+0x1b0>
	return UNALIGNED_GET(&addr->s_addr) == 0;
   1bfe0:	68fb      	ldr	r3, [r7, #12]
		NET_DBG("DROP: src addr is %s", "bcast");
		goto drop;
	}

	if (net_ipv4_is_addr_unspecified((struct in_addr *)hdr->src) &&
   1bfe2:	b933      	cbnz	r3, 1bff2 <net_ipv4_input+0xc6>
	    !net_ipv4_is_addr_bcast(net_pkt_iface(pkt), (struct in_addr *)hdr->dst)) {
   1bfe4:	f107 0110 	add.w	r1, r7, #16
   1bfe8:	69a8      	ldr	r0, [r5, #24]
   1bfea:	f7ff fecf 	bl	1bd8c <net_ipv4_is_addr_bcast>
	if (net_ipv4_is_addr_unspecified((struct in_addr *)hdr->src) &&
   1bfee:	2800      	cmp	r0, #0
   1bff0:	d076      	beq.n	1c0e0 <net_ipv4_input+0x1b4>
		NET_DBG("DROP: src addr is %s", "unspecified");
		goto drop;
	}

	if (net_if_need_calc_rx_checksum(net_pkt_iface(pkt)) &&
   1bff2:	69a8      	ldr	r0, [r5, #24]
   1bff4:	f7fd fd67 	bl	19ac6 <net_if_need_calc_rx_checksum>
   1bff8:	b120      	cbz	r0, 1c004 <net_ipv4_input+0xd8>
	    net_calc_chksum_ipv4(pkt) != 0U) {
   1bffa:	4628      	mov	r0, r5
   1bffc:	f7fe f809 	bl	1a012 <net_calc_chksum_ipv4>
	if (net_if_need_calc_rx_checksum(net_pkt_iface(pkt)) &&
   1c000:	2800      	cmp	r0, #0
   1c002:	d16f      	bne.n	1c0e4 <net_ipv4_input+0x1b8>
		NET_DBG("DROP: invalid chksum");
		goto drop;
	}

	if ((!net_ipv4_is_my_addr((struct in_addr *)hdr->dst) &&
   1c004:	f107 0410 	add.w	r4, r7, #16
   1c008:	4620      	mov	r0, r4
   1c00a:	f7ff fecf 	bl	1bdac <net_ipv4_is_my_addr>
   1c00e:	b990      	cbnz	r0, 1c036 <net_ipv4_input+0x10a>
	     !net_ipv4_is_addr_mcast((struct in_addr *)hdr->dst) &&
   1c010:	4620      	mov	r0, r4
   1c012:	f7ff fea7 	bl	1bd64 <net_ipv4_is_addr_mcast>
	if ((!net_ipv4_is_my_addr((struct in_addr *)hdr->dst) &&
   1c016:	b970      	cbnz	r0, 1c036 <net_ipv4_input+0x10a>
	     !(hdr->proto == IPPROTO_UDP &&
   1c018:	7a7b      	ldrb	r3, [r7, #9]
	     !net_ipv4_is_addr_mcast((struct in_addr *)hdr->dst) &&
   1c01a:	2b11      	cmp	r3, #17
   1c01c:	d005      	beq.n	1c02a <net_ipv4_input+0xfe>
		return verdict;
	}

drop:
	net_stats_update_ipv4_drop(net_pkt_iface(pkt));
	return NET_DROP;
   1c01e:	2002      	movs	r0, #2
		goto drop;
   1c020:	e052      	b.n	1c0c8 <net_ipv4_input+0x19c>
		net_pkt_update_length(pkt, pkt_len);
   1c022:	4628      	mov	r0, r5
   1c024:	f7ff fa51 	bl	1b4ca <net_pkt_update_length>
   1c028:	e7cc      	b.n	1bfc4 <net_ipv4_input+0x98>
	       (net_ipv4_addr_cmp((struct in_addr *)hdr->dst, net_ipv4_broadcast_address()) ||
   1c02a:	f7eb f9c9 	bl	73c0 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   1c02e:	693b      	ldr	r3, [r7, #16]
   1c030:	6802      	ldr	r2, [r0, #0]
	     !(hdr->proto == IPPROTO_UDP &&
   1c032:	429a      	cmp	r2, r3
   1c034:	d1f3      	bne.n	1c01e <net_ipv4_input+0xf2>
	    (hdr->proto == IPPROTO_TCP &&
   1c036:	7a7b      	ldrb	r3, [r7, #9]
				   net_ipv4_unspecified_address()))))) ||
   1c038:	2b06      	cmp	r3, #6
   1c03a:	d017      	beq.n	1c06c <net_ipv4_input+0x140>
	return net_pkt_skip(pkt, access->size);
   1c03c:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1c03e:	4628      	mov	r0, r5
   1c040:	f7ff f940 	bl	1b2c4 <net_pkt_skip>
	if (opts_len) {
   1c044:	b9ce      	cbnz	r6, 1c07a <net_ipv4_input+0x14e>
	net_pkt_set_ipv4_ttl(pkt, hdr->ttl);
   1c046:	7a3b      	ldrb	r3, [r7, #8]
	pkt->ipv4_ttl = ttl;
   1c048:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
	pkt->family = family;
   1c04c:	f895 3037 	ldrb.w	r3, [r5, #55]	; 0x37
   1c050:	2201      	movs	r2, #1
   1c052:	f362 1347 	bfi	r3, r2, #5, #3
   1c056:	f885 3037 	strb.w	r3, [r5, #55]	; 0x37
	switch (hdr->proto) {
   1c05a:	7a7b      	ldrb	r3, [r7, #9]
   1c05c:	2b06      	cmp	r3, #6
   1c05e:	d019      	beq.n	1c094 <net_ipv4_input+0x168>
   1c060:	2b11      	cmp	r3, #17
   1c062:	d026      	beq.n	1c0b2 <net_ipv4_input+0x186>
   1c064:	4293      	cmp	r3, r2
   1c066:	d010      	beq.n	1c08a <net_ipv4_input+0x15e>
	return NET_DROP;
   1c068:	2002      	movs	r0, #2
		goto drop;
   1c06a:	e02d      	b.n	1c0c8 <net_ipv4_input+0x19c>
	     net_ipv4_is_addr_bcast(net_pkt_iface(pkt), (struct in_addr *)hdr->dst))) {
   1c06c:	4621      	mov	r1, r4
   1c06e:	69a8      	ldr	r0, [r5, #24]
   1c070:	f7ff fe8c 	bl	1bd8c <net_ipv4_is_addr_bcast>
	    (hdr->proto == IPPROTO_TCP &&
   1c074:	2800      	cmp	r0, #0
   1c076:	d0e1      	beq.n	1c03c <net_ipv4_input+0x110>
   1c078:	e7d1      	b.n	1c01e <net_ipv4_input+0xf2>
		if (net_pkt_skip(pkt, opts_len)) {
   1c07a:	4631      	mov	r1, r6
   1c07c:	4628      	mov	r0, r5
   1c07e:	f7ff f921 	bl	1b2c4 <net_pkt_skip>
   1c082:	2800      	cmp	r0, #0
   1c084:	d0df      	beq.n	1c046 <net_ipv4_input+0x11a>
	return NET_DROP;
   1c086:	2002      	movs	r0, #2
   1c088:	e01e      	b.n	1c0c8 <net_ipv4_input+0x19c>
		verdict = net_icmpv4_input(pkt, hdr);
   1c08a:	4639      	mov	r1, r7
   1c08c:	4628      	mov	r0, r5
   1c08e:	f7ec f919 	bl	82c4 <net_icmpv4_input>
		if (verdict == NET_DROP) {
   1c092:	e019      	b.n	1c0c8 <net_ipv4_input+0x19c>
		proto_hdr.tcp = net_tcp_input(pkt, &tcp_access);
   1c094:	a903      	add	r1, sp, #12
   1c096:	4628      	mov	r0, r5
   1c098:	f000 fc9e 	bl	1c9d8 <net_tcp_input>
   1c09c:	9002      	str	r0, [sp, #8]
		if (proto_hdr.tcp) {
   1c09e:	2800      	cmp	r0, #0
   1c0a0:	d0e2      	beq.n	1c068 <net_ipv4_input+0x13c>
	ip.ipv4 = hdr;
   1c0a2:	9701      	str	r7, [sp, #4]
	verdict = net_conn_input(pkt, &ip, hdr->proto, &proto_hdr);
   1c0a4:	ab02      	add	r3, sp, #8
   1c0a6:	7a7a      	ldrb	r2, [r7, #9]
   1c0a8:	a901      	add	r1, sp, #4
   1c0aa:	4628      	mov	r0, r5
   1c0ac:	f7eb ffd2 	bl	8054 <net_conn_input>
	if (verdict != NET_DROP) {
   1c0b0:	e00a      	b.n	1c0c8 <net_ipv4_input+0x19c>
		proto_hdr.udp = net_udp_input(pkt, &udp_access);
   1c0b2:	a90a      	add	r1, sp, #40	; 0x28
   1c0b4:	4628      	mov	r0, r5
   1c0b6:	f000 ff4d 	bl	1cf54 <net_udp_input>
   1c0ba:	9002      	str	r0, [sp, #8]
		if (proto_hdr.udp) {
   1c0bc:	2800      	cmp	r0, #0
   1c0be:	d1f0      	bne.n	1c0a2 <net_ipv4_input+0x176>
   1c0c0:	e7d2      	b.n	1c068 <net_ipv4_input+0x13c>
	return NET_DROP;
   1c0c2:	2002      	movs	r0, #2
   1c0c4:	e000      	b.n	1c0c8 <net_ipv4_input+0x19c>
   1c0c6:	2002      	movs	r0, #2
}
   1c0c8:	b011      	add	sp, #68	; 0x44
   1c0ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
   1c0cc:	20ea      	movs	r0, #234	; 0xea
   1c0ce:	e7fb      	b.n	1c0c8 <net_ipv4_input+0x19c>
	return NET_DROP;
   1c0d0:	2002      	movs	r0, #2
   1c0d2:	e7f9      	b.n	1c0c8 <net_ipv4_input+0x19c>
   1c0d4:	2002      	movs	r0, #2
   1c0d6:	e7f7      	b.n	1c0c8 <net_ipv4_input+0x19c>
   1c0d8:	2002      	movs	r0, #2
   1c0da:	e7f5      	b.n	1c0c8 <net_ipv4_input+0x19c>
   1c0dc:	2002      	movs	r0, #2
   1c0de:	e7f3      	b.n	1c0c8 <net_ipv4_input+0x19c>
   1c0e0:	2002      	movs	r0, #2
   1c0e2:	e7f1      	b.n	1c0c8 <net_ipv4_input+0x19c>
   1c0e4:	2002      	movs	r0, #2
   1c0e6:	e7ef      	b.n	1c0c8 <net_ipv4_input+0x19c>

0001c0e8 <net_ipv4_init>:
void net_ipv4_init(void)
{
	if (IS_ENABLED(CONFIG_NET_IPV4_FRAGMENT)) {
		net_ipv4_setup_fragment_buffers();
	}
}
   1c0e8:	4770      	bx	lr

0001c0ea <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
   1c0ea:	460b      	mov	r3, r1
   1c0ec:	b139      	cbz	r1, 1c0fe <sys_slist_remove+0x14>
	return node->next;
   1c0ee:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
   1c0f0:	6019      	str	r1, [r3, #0]
	return list->tail;
   1c0f2:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   1c0f4:	428a      	cmp	r2, r1
   1c0f6:	d009      	beq.n	1c10c <sys_slist_remove+0x22>
	parent->next = child;
   1c0f8:	2300      	movs	r3, #0
   1c0fa:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1c0fc:	4770      	bx	lr
	return node->next;
   1c0fe:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   1c100:	6003      	str	r3, [r0, #0]
	return list->tail;
   1c102:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   1c104:	428a      	cmp	r2, r1
   1c106:	d1f7      	bne.n	1c0f8 <sys_slist_remove+0xe>
	list->tail = node;
   1c108:	6043      	str	r3, [r0, #4]
}
   1c10a:	e7f5      	b.n	1c0f8 <sys_slist_remove+0xe>
	list->tail = node;
   1c10c:	6043      	str	r3, [r0, #4]
}
   1c10e:	e7f3      	b.n	1c0f8 <sys_slist_remove+0xe>

0001c110 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c110:	b508      	push	{r3, lr}
   1c112:	460a      	mov	r2, r1
	return list->head;
   1c114:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c116:	2100      	movs	r1, #0
   1c118:	e001      	b.n	1c11e <sys_slist_find_and_remove+0xe>
   1c11a:	4619      	mov	r1, r3
   1c11c:	681b      	ldr	r3, [r3, #0]
   1c11e:	b12b      	cbz	r3, 1c12c <sys_slist_find_and_remove+0x1c>
   1c120:	4293      	cmp	r3, r2
   1c122:	d1fa      	bne.n	1c11a <sys_slist_find_and_remove+0xa>
   1c124:	f7ff ffe1 	bl	1c0ea <sys_slist_remove>
   1c128:	2001      	movs	r0, #1
   1c12a:	e000      	b.n	1c12e <sys_slist_find_and_remove+0x1e>
   1c12c:	2000      	movs	r0, #0
   1c12e:	bd08      	pop	{r3, pc}

0001c130 <tcp_get_seq>:
}
   1c130:	6940      	ldr	r0, [r0, #20]
   1c132:	4770      	bx	lr

0001c134 <tcp_set_seq>:
	*(uint32_t *)net_buf_user_data(buf) = seq;
   1c134:	6141      	str	r1, [r0, #20]
}
   1c136:	4770      	bx	lr

0001c138 <tcp_endpoint_len>:
	return (af == AF_INET) ? sizeof(struct sockaddr_in) :
   1c138:	2801      	cmp	r0, #1
   1c13a:	d001      	beq.n	1c140 <tcp_endpoint_len+0x8>
   1c13c:	2018      	movs	r0, #24
}
   1c13e:	4770      	bx	lr
	return (af == AF_INET) ? sizeof(struct sockaddr_in) :
   1c140:	2008      	movs	r0, #8
   1c142:	4770      	bx	lr

0001c144 <set_tcp_nodelay>:
	if (len != sizeof(int)) {
   1c144:	2a04      	cmp	r2, #4
   1c146:	d10d      	bne.n	1c164 <set_tcp_nodelay+0x20>
	no_delay_int = *(int *)value;
   1c148:	680b      	ldr	r3, [r1, #0]
	if ((no_delay_int < 0) || (no_delay_int > 1)) {
   1c14a:	2b01      	cmp	r3, #1
   1c14c:	d80d      	bhi.n	1c16a <set_tcp_nodelay+0x26>
	conn->tcp_nodelay = (bool)no_delay_int;
   1c14e:	3b00      	subs	r3, #0
   1c150:	bf18      	it	ne
   1c152:	2301      	movne	r3, #1
   1c154:	f890 2237 	ldrb.w	r2, [r0, #567]	; 0x237
   1c158:	f363 02c3 	bfi	r2, r3, #3, #1
   1c15c:	f880 2237 	strb.w	r2, [r0, #567]	; 0x237
	return 0;
   1c160:	2000      	movs	r0, #0
   1c162:	4770      	bx	lr
		return -EINVAL;
   1c164:	f06f 0015 	mvn.w	r0, #21
   1c168:	4770      	bx	lr
		return -EINVAL;
   1c16a:	f06f 0015 	mvn.w	r0, #21
}
   1c16e:	4770      	bx	lr

0001c170 <get_tcp_nodelay>:
	int no_delay_int = (int)conn->tcp_nodelay;
   1c170:	f890 3237 	ldrb.w	r3, [r0, #567]	; 0x237
   1c174:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	*((int *)value) = no_delay_int;
   1c178:	600b      	str	r3, [r1, #0]
	if (len) {
   1c17a:	4613      	mov	r3, r2
   1c17c:	b10a      	cbz	r2, 1c182 <get_tcp_nodelay+0x12>
		*len = sizeof(int);
   1c17e:	2204      	movs	r2, #4
   1c180:	601a      	str	r2, [r3, #0]
}
   1c182:	2000      	movs	r0, #0
   1c184:	4770      	bx	lr

0001c186 <tcp_window_full>:
	bool window_full = (conn->send_data_total >= conn->send_win);
   1c186:	f8d0 2210 	ldr.w	r2, [r0, #528]	; 0x210
   1c18a:	f8b0 0230 	ldrh.w	r0, [r0, #560]	; 0x230
}
   1c18e:	4282      	cmp	r2, r0
   1c190:	bf34      	ite	cc
   1c192:	2000      	movcc	r0, #0
   1c194:	2001      	movcs	r0, #1
   1c196:	4770      	bx	lr

0001c198 <tcp_unsent_len>:
	if (conn->unacked_len > conn->send_data_total) {
   1c198:	f8d0 1218 	ldr.w	r1, [r0, #536]	; 0x218
   1c19c:	f8d0 2210 	ldr.w	r2, [r0, #528]	; 0x210
   1c1a0:	4291      	cmp	r1, r2
   1c1a2:	d809      	bhi.n	1c1b8 <tcp_unsent_len+0x20>
	unsent_len = conn->send_data_total - conn->unacked_len;
   1c1a4:	1a52      	subs	r2, r2, r1
	if (conn->unacked_len >= conn->send_win) {
   1c1a6:	f8b0 3230 	ldrh.w	r3, [r0, #560]	; 0x230
   1c1aa:	4299      	cmp	r1, r3
   1c1ac:	da07      	bge.n	1c1be <tcp_unsent_len+0x26>
		unsent_len = MIN(unsent_len, conn->send_win - conn->unacked_len);
   1c1ae:	1a58      	subs	r0, r3, r1
   1c1b0:	4290      	cmp	r0, r2
   1c1b2:	bfa8      	it	ge
   1c1b4:	4610      	movge	r0, r2
   1c1b6:	4770      	bx	lr
		unsent_len = -ERANGE;
   1c1b8:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1c1bc:	4770      	bx	lr
		unsent_len = 0;
   1c1be:	2000      	movs	r0, #0
}
   1c1c0:	4770      	bx	lr

0001c1c2 <tcp_validate_seq>:
	return (net_tcp_seq_cmp(th_seq(hdr), conn->ack) >= 0) &&
   1c1c2:	684a      	ldr	r2, [r1, #4]
   1c1c4:	0a13      	lsrs	r3, r2, #8
   1c1c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   1c1ca:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1c1ce:	0211      	lsls	r1, r2, #8
   1c1d0:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   1c1d4:	430b      	orrs	r3, r1
   1c1d6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   1c1da:	f8d0 2228 	ldr.w	r2, [r0, #552]	; 0x228
	return (int32_t)(seq1 - seq2);
   1c1de:	1a99      	subs	r1, r3, r2
   1c1e0:	2900      	cmp	r1, #0
   1c1e2:	db09      	blt.n	1c1f8 <tcp_validate_seq+0x36>
		(net_tcp_seq_cmp(th_seq(hdr), conn->ack + conn->recv_win) < 0);
   1c1e4:	f8b0 122e 	ldrh.w	r1, [r0, #558]	; 0x22e
   1c1e8:	440a      	add	r2, r1
   1c1ea:	1a9b      	subs	r3, r3, r2
	return (net_tcp_seq_cmp(th_seq(hdr), conn->ack) >= 0) &&
   1c1ec:	2b00      	cmp	r3, #0
   1c1ee:	db01      	blt.n	1c1f4 <tcp_validate_seq+0x32>
   1c1f0:	2000      	movs	r0, #0
}
   1c1f2:	4770      	bx	lr
	return (net_tcp_seq_cmp(th_seq(hdr), conn->ack) >= 0) &&
   1c1f4:	2001      	movs	r0, #1
   1c1f6:	4770      	bx	lr
   1c1f8:	2000      	movs	r0, #0
   1c1fa:	4770      	bx	lr

0001c1fc <check_seq_list>:
{
   1c1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c1fe:	4604      	mov	r4, r0
	bool result = true;
   1c200:	2701      	movs	r7, #1
	uint32_t next_seq = 0;
   1c202:	2500      	movs	r5, #0
	struct net_buf *last = NULL;
   1c204:	462e      	mov	r6, r5
	while (tmp) {
   1c206:	e003      	b.n	1c210 <check_seq_list+0x14>
		next_seq = seq + tmp->len;
   1c208:	89a3      	ldrh	r3, [r4, #12]
   1c20a:	18c5      	adds	r5, r0, r3
		last = tmp;
   1c20c:	4626      	mov	r6, r4
		tmp = tmp->frags;
   1c20e:	6824      	ldr	r4, [r4, #0]
	while (tmp) {
   1c210:	b144      	cbz	r4, 1c224 <check_seq_list+0x28>
		seq = tcp_get_seq(tmp);
   1c212:	4620      	mov	r0, r4
   1c214:	f7ff ff8c 	bl	1c130 <tcp_get_seq>
		if (last != NULL) {
   1c218:	2e00      	cmp	r6, #0
   1c21a:	d0f5      	beq.n	1c208 <check_seq_list+0xc>
			if (next_seq != seq) {
   1c21c:	42a8      	cmp	r0, r5
   1c21e:	d0f3      	beq.n	1c208 <check_seq_list+0xc>
				result = false;
   1c220:	2700      	movs	r7, #0
   1c222:	e7f1      	b.n	1c208 <check_seq_list+0xc>
}
   1c224:	4638      	mov	r0, r7
   1c226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001c228 <tcp_timewait_timeout>:
{
   1c228:	b508      	push	{r3, lr}
	net_context_unref(conn->context);
   1c22a:	f5a0 7090 	sub.w	r0, r0, #288	; 0x120
   1c22e:	6840      	ldr	r0, [r0, #4]
   1c230:	f7fe f909 	bl	1a446 <net_context_unref>
}
   1c234:	bd08      	pop	{r3, pc}

0001c236 <tcp_send_queue_flush>:
{
   1c236:	b570      	push	{r4, r5, r6, lr}
   1c238:	4605      	mov	r5, r0
	k_work_cancel_delayable(&conn->send_timer);
   1c23a:	3090      	adds	r0, #144	; 0x90
   1c23c:	f003 f92d 	bl	1f49a <k_work_cancel_delayable>
	while ((pkt = tcp_slist(conn, &conn->send_queue, get,
   1c240:	e007      	b.n	1c252 <tcp_send_queue_flush+0x1c>
   1c242:	3c1c      	subs	r4, #28
	return z_impl_k_mutex_unlock(mutex);
   1c244:	4630      	mov	r0, r6
   1c246:	f7f4 ff67 	bl	11118 <z_impl_k_mutex_unlock>
   1c24a:	b1ac      	cbz	r4, 1c278 <tcp_send_queue_flush+0x42>
		tcp_pkt_unref(pkt);
   1c24c:	4620      	mov	r0, r4
   1c24e:	f7fe ff2f 	bl	1b0b0 <net_pkt_unref>
	while ((pkt = tcp_slist(conn, &conn->send_queue, get,
   1c252:	f105 0624 	add.w	r6, r5, #36	; 0x24
	return z_impl_k_mutex_lock(mutex, timeout);
   1c256:	f04f 32ff 	mov.w	r2, #4294967295
   1c25a:	f04f 33ff 	mov.w	r3, #4294967295
   1c25e:	4630      	mov	r0, r6
   1c260:	f7f4 fed6 	bl	11010 <z_impl_k_mutex_lock>
	return list->head;
   1c264:	69ac      	ldr	r4, [r5, #24]
Z_GENLIST_GET(slist, snode)
   1c266:	2c00      	cmp	r4, #0
   1c268:	d0ec      	beq.n	1c244 <tcp_send_queue_flush+0xe>
	return node->next;
   1c26a:	6823      	ldr	r3, [r4, #0]
	list->head = node;
   1c26c:	61ab      	str	r3, [r5, #24]
	return list->tail;
   1c26e:	69ea      	ldr	r2, [r5, #28]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1c270:	4294      	cmp	r4, r2
   1c272:	d1e6      	bne.n	1c242 <tcp_send_queue_flush+0xc>
	list->tail = node;
   1c274:	61eb      	str	r3, [r5, #28]
   1c276:	e7e4      	b.n	1c242 <tcp_send_queue_flush+0xc>
}
   1c278:	bd70      	pop	{r4, r5, r6, pc}

0001c27a <ip_header_add>:
{
   1c27a:	b508      	push	{r3, lr}
	return pkt->family;
   1c27c:	f891 3037 	ldrb.w	r3, [r1, #55]	; 0x37
   1c280:	095b      	lsrs	r3, r3, #5
	if (IS_ENABLED(CONFIG_NET_IPV4) && net_pkt_family(pkt) == AF_INET) {
   1c282:	2b01      	cmp	r3, #1
   1c284:	d107      	bne.n	1c296 <ip_header_add+0x1c>
		return net_context_create_ipv4_new(conn->context, pkt,
   1c286:	f500 73fe 	add.w	r3, r0, #508	; 0x1fc
   1c28a:	f500 72f2 	add.w	r2, r0, #484	; 0x1e4
   1c28e:	6840      	ldr	r0, [r0, #4]
   1c290:	f7fe f9f3 	bl	1a67a <net_context_create_ipv4_new>
}
   1c294:	bd08      	pop	{r3, pc}
	return -EINVAL;
   1c296:	f06f 0015 	mvn.w	r0, #21
   1c29a:	e7fb      	b.n	1c294 <ip_header_add+0x1a>

0001c29c <tcp_header_add>:
{
   1c29c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c29e:	b089      	sub	sp, #36	; 0x24
   1c2a0:	4604      	mov	r4, r0
   1c2a2:	460d      	mov	r5, r1
   1c2a4:	4616      	mov	r6, r2
   1c2a6:	461f      	mov	r7, r3
	NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct tcphdr);
   1c2a8:	ab03      	add	r3, sp, #12
   1c2aa:	9301      	str	r3, [sp, #4]
   1c2ac:	2314      	movs	r3, #20
   1c2ae:	9302      	str	r3, [sp, #8]
	th = (struct tcphdr *)net_pkt_get_data(pkt, &tcp_access);
   1c2b0:	a901      	add	r1, sp, #4
   1c2b2:	4628      	mov	r0, r5
   1c2b4:	f7ff fa26 	bl	1b704 <net_pkt_get_data>
	if (!th) {
   1c2b8:	2800      	cmp	r0, #0
   1c2ba:	d04b      	beq.n	1c354 <tcp_header_add+0xb8>
   1c2bc:	4684      	mov	ip, r0
__ssp_bos_icheck3(memset, void *, int)
   1c2be:	2300      	movs	r3, #0
   1c2c0:	6003      	str	r3, [r0, #0]
   1c2c2:	6043      	str	r3, [r0, #4]
   1c2c4:	6083      	str	r3, [r0, #8]
   1c2c6:	60c3      	str	r3, [r0, #12]
   1c2c8:	6103      	str	r3, [r0, #16]
	UNALIGNED_PUT(conn->src.sin.sin_port, &th->th_sport);
   1c2ca:	f8b4 31e2 	ldrh.w	r3, [r4, #482]	; 0x1e2
   1c2ce:	8003      	strh	r3, [r0, #0]
	UNALIGNED_PUT(conn->dst.sin.sin_port, &th->th_dport);
   1c2d0:	f8b4 31fa 	ldrh.w	r3, [r4, #506]	; 0x1fa
   1c2d4:	8043      	strh	r3, [r0, #2]
	th->th_off = 5;
   1c2d6:	7b03      	ldrb	r3, [r0, #12]
   1c2d8:	2205      	movs	r2, #5
   1c2da:	f362 1307 	bfi	r3, r2, #4, #4
   1c2de:	7303      	strb	r3, [r0, #12]
	if (conn->send_options.mss_found) {
   1c2e0:	f894 308a 	ldrb.w	r3, [r4, #138]	; 0x8a
   1c2e4:	f013 0f01 	tst.w	r3, #1
   1c2e8:	d004      	beq.n	1c2f4 <tcp_header_add+0x58>
		th->th_off++;
   1c2ea:	7b03      	ldrb	r3, [r0, #12]
   1c2ec:	2206      	movs	r2, #6
   1c2ee:	f362 1307 	bfi	r3, r2, #4, #4
   1c2f2:	7303      	strb	r3, [r0, #12]
	UNALIGNED_PUT(flags, &th->th_flags);
   1c2f4:	f88c 600d 	strb.w	r6, [ip, #13]
	UNALIGNED_PUT(htons(conn->recv_win), &th->th_win);
   1c2f8:	f8b4 222e 	ldrh.w	r2, [r4, #558]	; 0x22e
   1c2fc:	0213      	lsls	r3, r2, #8
   1c2fe:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   1c302:	f8ac 300e 	strh.w	r3, [ip, #14]
	UNALIGNED_PUT(htonl(seq), &th->th_seq);
   1c306:	ea4f 2e17 	mov.w	lr, r7, lsr #8
   1c30a:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
   1c30e:	ea4e 6e17 	orr.w	lr, lr, r7, lsr #24
   1c312:	023b      	lsls	r3, r7, #8
   1c314:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   1c318:	ea4e 0e03 	orr.w	lr, lr, r3
   1c31c:	ea4e 6307 	orr.w	r3, lr, r7, lsl #24
   1c320:	f8cc 3004 	str.w	r3, [ip, #4]
	if (ACK & flags) {
   1c324:	f016 0f10 	tst.w	r6, #16
   1c328:	d00e      	beq.n	1c348 <tcp_header_add+0xac>
		UNALIGNED_PUT(htonl(conn->ack), &th->th_ack);
   1c32a:	f8d4 2228 	ldr.w	r2, [r4, #552]	; 0x228
   1c32e:	0a13      	lsrs	r3, r2, #8
   1c330:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   1c334:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1c338:	0211      	lsls	r1, r2, #8
   1c33a:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   1c33e:	430b      	orrs	r3, r1
   1c340:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   1c344:	f8cc 3008 	str.w	r3, [ip, #8]
	return net_pkt_set_data(pkt, &tcp_access);
   1c348:	a901      	add	r1, sp, #4
   1c34a:	4628      	mov	r0, r5
   1c34c:	f7ff f9fe 	bl	1b74c <net_pkt_set_data>
}
   1c350:	b009      	add	sp, #36	; 0x24
   1c352:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
   1c354:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1c358:	e7fa      	b.n	1c350 <tcp_header_add+0xb4>

0001c35a <tcp_finalize_pkt>:
{
   1c35a:	b510      	push	{r4, lr}
   1c35c:	4604      	mov	r4, r0
	net_pkt_cursor_init(pkt);
   1c35e:	f7fe ff3f 	bl	1b1e0 <net_pkt_cursor_init>
   1c362:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
   1c366:	095b      	lsrs	r3, r3, #5
	if (IS_ENABLED(CONFIG_NET_IPV4) && net_pkt_family(pkt) == AF_INET) {
   1c368:	2b01      	cmp	r3, #1
   1c36a:	d104      	bne.n	1c376 <tcp_finalize_pkt+0x1c>
		return net_ipv4_finalize(pkt, IPPROTO_TCP);
   1c36c:	2106      	movs	r1, #6
   1c36e:	4620      	mov	r0, r4
   1c370:	f7ff fd8a 	bl	1be88 <net_ipv4_finalize>
}
   1c374:	bd10      	pop	{r4, pc}
	return -EINVAL;
   1c376:	f06f 0015 	mvn.w	r0, #21
   1c37a:	e7fb      	b.n	1c374 <tcp_finalize_pkt+0x1a>

0001c37c <net_ipv4_is_addr_bcast>:
{
   1c37c:	b538      	push	{r3, r4, r5, lr}
   1c37e:	4605      	mov	r5, r0
   1c380:	460c      	mov	r4, r1
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
   1c382:	f7eb f81d 	bl	73c0 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   1c386:	6822      	ldr	r2, [r4, #0]
   1c388:	6803      	ldr	r3, [r0, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
   1c38a:	429a      	cmp	r2, r3
   1c38c:	d004      	beq.n	1c398 <net_ipv4_is_addr_bcast+0x1c>
	return net_if_ipv4_is_addr_bcast(iface, addr);
   1c38e:	4621      	mov	r1, r4
   1c390:	4628      	mov	r0, r5
   1c392:	f7ea fb57 	bl	6a44 <net_if_ipv4_is_addr_bcast>
}
   1c396:	bd38      	pop	{r3, r4, r5, pc}
		return true;
   1c398:	2001      	movs	r0, #1
   1c39a:	e7fc      	b.n	1c396 <net_ipv4_is_addr_bcast+0x1a>

0001c39c <net_ipv4_is_my_addr>:
{
   1c39c:	b510      	push	{r4, lr}
   1c39e:	4604      	mov	r4, r0
	ret = net_if_ipv4_addr_lookup(addr, NULL) != NULL;
   1c3a0:	2100      	movs	r1, #0
   1c3a2:	f7ea fbf7 	bl	6b94 <net_if_ipv4_addr_lookup>
   1c3a6:	2800      	cmp	r0, #0
   1c3a8:	bf14      	ite	ne
   1c3aa:	2001      	movne	r0, #1
   1c3ac:	2000      	moveq	r0, #0
	if (!ret) {
   1c3ae:	d000      	beq.n	1c3b2 <net_ipv4_is_my_addr+0x16>
}
   1c3b0:	bd10      	pop	{r4, pc}
		ret = net_ipv4_is_addr_bcast(NULL, addr);
   1c3b2:	4621      	mov	r1, r4
   1c3b4:	2000      	movs	r0, #0
   1c3b6:	f7ff ffe1 	bl	1c37c <net_ipv4_is_addr_bcast>
   1c3ba:	e7f9      	b.n	1c3b0 <net_ipv4_is_my_addr+0x14>

0001c3bc <is_destination_local>:
{
   1c3bc:	b508      	push	{r3, lr}
   1c3be:	f890 3037 	ldrb.w	r3, [r0, #55]	; 0x37
   1c3c2:	095b      	lsrs	r3, r3, #5
	if (IS_ENABLED(CONFIG_NET_IPV4) && net_pkt_family(pkt) == AF_INET) {
   1c3c4:	2b01      	cmp	r3, #1
   1c3c6:	d001      	beq.n	1c3cc <is_destination_local+0x10>
	return false;
   1c3c8:	2000      	movs	r0, #0
}
   1c3ca:	bd08      	pop	{r3, pc}
	return pkt->frags->data;
   1c3cc:	6883      	ldr	r3, [r0, #8]
   1c3ce:	6898      	ldr	r0, [r3, #8]
	return addr->s4_addr[0] == 127U;
   1c3d0:	7c03      	ldrb	r3, [r0, #16]
		if (net_ipv4_is_addr_loopback(
   1c3d2:	2b7f      	cmp	r3, #127	; 0x7f
   1c3d4:	d004      	beq.n	1c3e0 <is_destination_local+0x24>
		    net_ipv4_is_my_addr(
   1c3d6:	3010      	adds	r0, #16
   1c3d8:	f7ff ffe0 	bl	1c39c <net_ipv4_is_my_addr>
				(struct in_addr *)NET_IPV4_HDR(pkt)->dst) ||
   1c3dc:	2800      	cmp	r0, #0
   1c3de:	d0f4      	beq.n	1c3ca <is_destination_local+0xe>
			return true;
   1c3e0:	2001      	movs	r0, #1
   1c3e2:	e7f2      	b.n	1c3ca <is_destination_local+0xe>

0001c3e4 <tcp_cleanup_recv_queue>:
{
   1c3e4:	b538      	push	{r3, r4, r5, lr}
   1c3e6:	4604      	mov	r4, r0
	k_mutex_lock(&conn->lock, K_FOREVER);
   1c3e8:	f1a0 059c 	sub.w	r5, r0, #156	; 0x9c
   1c3ec:	f04f 32ff 	mov.w	r2, #4294967295
   1c3f0:	f04f 33ff 	mov.w	r3, #4294967295
   1c3f4:	4628      	mov	r0, r5
   1c3f6:	f7f4 fe0b 	bl	11010 <z_impl_k_mutex_lock>
	net_buf_unref(conn->queue_recv_data->buffer);
   1c3fa:	f854 3cb4 	ldr.w	r3, [r4, #-180]
   1c3fe:	6898      	ldr	r0, [r3, #8]
   1c400:	f7fc ff66 	bl	192d0 <net_buf_unref>
	conn->queue_recv_data->buffer = NULL;
   1c404:	f854 3cb4 	ldr.w	r3, [r4, #-180]
   1c408:	2200      	movs	r2, #0
   1c40a:	609a      	str	r2, [r3, #8]
	return z_impl_k_mutex_unlock(mutex);
   1c40c:	4628      	mov	r0, r5
   1c40e:	f7f4 fe83 	bl	11118 <z_impl_k_mutex_unlock>
}
   1c412:	bd38      	pop	{r3, r4, r5, pc}

0001c414 <tcp_pkt_linearize>:
{
   1c414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c418:	b082      	sub	sp, #8
   1c41a:	4607      	mov	r7, r0
   1c41c:	4689      	mov	r9, r1
   1c41e:	4615      	mov	r5, r2
	struct net_buf *buf, *first = pkt->cursor.buf, *second = first->frags;
   1c420:	68c6      	ldr	r6, [r0, #12]
   1c422:	6834      	ldr	r4, [r6, #0]
	return net_buf_frags_len(pkt->frags);
   1c424:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   1c426:	2200      	movs	r2, #0
	while (buf) {
   1c428:	e002      	b.n	1c430 <tcp_pkt_linearize+0x1c>
		bytes += buf->len;
   1c42a:	8999      	ldrh	r1, [r3, #12]
   1c42c:	440a      	add	r2, r1
		buf = buf->frags;
   1c42e:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1c430:	2b00      	cmp	r3, #0
   1c432:	d1fa      	bne.n	1c42a <tcp_pkt_linearize+0x16>
	if (net_pkt_get_len(pkt) < (pos + len)) {
   1c434:	eb05 0309 	add.w	r3, r5, r9
   1c438:	4293      	cmp	r3, r2
   1c43a:	d840      	bhi.n	1c4be <tcp_pkt_linearize+0xaa>
	buf = net_pkt_get_frag(pkt, TCP_PKT_ALLOC_TIMEOUT);
   1c43c:	f640 42cd 	movw	r2, #3277	; 0xccd
   1c440:	2300      	movs	r3, #0
   1c442:	4638      	mov	r0, r7
   1c444:	f7eb fa7a 	bl	793c <net_pkt_get_frag>
	if (!buf || buf->size < len) {
   1c448:	4680      	mov	r8, r0
   1c44a:	b1d0      	cbz	r0, 1c482 <tcp_pkt_linearize+0x6e>
   1c44c:	89c1      	ldrh	r1, [r0, #14]
   1c44e:	428d      	cmp	r5, r1
   1c450:	d815      	bhi.n	1c47e <tcp_pkt_linearize+0x6a>
	net_buf_linearize(buf->data, buf->size, pkt->frags, pos, len);
   1c452:	4682      	mov	sl, r0
   1c454:	f85a 0f08 	ldr.w	r0, [sl, #8]!
   1c458:	9500      	str	r5, [sp, #0]
   1c45a:	464b      	mov	r3, r9
   1c45c:	68ba      	ldr	r2, [r7, #8]
   1c45e:	f7fc ff8a 	bl	19376 <net_buf_linearize>
	return net_buf_simple_add(&buf->b, len);
   1c462:	4629      	mov	r1, r5
   1c464:	4650      	mov	r0, sl
   1c466:	f7fc ffb2 	bl	193ce <net_buf_simple_add>
	len1 = first->len - (pkt->cursor.pos - pkt->cursor.buf->data);
   1c46a:	89b2      	ldrh	r2, [r6, #12]
   1c46c:	693b      	ldr	r3, [r7, #16]
   1c46e:	68f9      	ldr	r1, [r7, #12]
   1c470:	6889      	ldr	r1, [r1, #8]
   1c472:	1a5b      	subs	r3, r3, r1
   1c474:	1ad3      	subs	r3, r2, r3
	len2 = len - len1;
   1c476:	1aed      	subs	r5, r5, r3
	first->len -= len1;
   1c478:	1ad2      	subs	r2, r2, r3
   1c47a:	81b2      	strh	r2, [r6, #12]
	while (len2) {
   1c47c:	e005      	b.n	1c48a <tcp_pkt_linearize+0x76>
			net_buf_unref(buf);
   1c47e:	f7fc ff27 	bl	192d0 <net_buf_unref>
		ret = -ENOBUFS;
   1c482:	f06f 0068 	mvn.w	r0, #104	; 0x68
		goto out;
   1c486:	e017      	b.n	1c4b8 <tcp_pkt_linearize+0xa4>
	size_t bytes = 0;
   1c488:	463c      	mov	r4, r7
	while (len2) {
   1c48a:	b185      	cbz	r5, 1c4ae <tcp_pkt_linearize+0x9a>
		size_t pull_len = MIN(second->len, len2);
   1c48c:	89a1      	ldrh	r1, [r4, #12]
   1c48e:	42a9      	cmp	r1, r5
   1c490:	bf28      	it	cs
   1c492:	4629      	movcs	r1, r5
		len2 -= pull_len;
   1c494:	1a6d      	subs	r5, r5, r1
	return net_buf_simple_pull(&buf->b, len);
   1c496:	f104 0008 	add.w	r0, r4, #8
   1c49a:	f7fc ffa9 	bl	193f0 <net_buf_simple_pull>
		next = second->frags;
   1c49e:	6827      	ldr	r7, [r4, #0]
		if (second->len == 0) {
   1c4a0:	89a3      	ldrh	r3, [r4, #12]
   1c4a2:	2b00      	cmp	r3, #0
   1c4a4:	d1f0      	bne.n	1c488 <tcp_pkt_linearize+0x74>
			net_buf_unref(second);
   1c4a6:	4620      	mov	r0, r4
   1c4a8:	f7fc ff12 	bl	192d0 <net_buf_unref>
   1c4ac:	e7ec      	b.n	1c488 <tcp_pkt_linearize+0x74>
	buf->frags = second;
   1c4ae:	f8c8 4000 	str.w	r4, [r8]
	first->frags = buf;
   1c4b2:	f8c6 8000 	str.w	r8, [r6]
	int ret = 0;
   1c4b6:	2000      	movs	r0, #0
}
   1c4b8:	b002      	add	sp, #8
   1c4ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ret = -EINVAL;
   1c4be:	f06f 0015 	mvn.w	r0, #21
   1c4c2:	e7f9      	b.n	1c4b8 <tcp_pkt_linearize+0xa4>

0001c4c4 <th_get>:
{
   1c4c4:	b538      	push	{r3, r4, r5, lr}
   1c4c6:	4604      	mov	r4, r0
	return pkt->ip_hdr_len;
   1c4c8:	f890 5036 	ldrb.w	r5, [r0, #54]	; 0x36
	return pkt->ipv4_opts_len;
   1c4cc:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
	size_t ip_len = net_pkt_ip_hdr_len(pkt) + net_pkt_ip_opts_len(pkt);
   1c4d0:	441d      	add	r5, r3
	net_pkt_cursor_init(pkt);
   1c4d2:	4620      	mov	r0, r4
   1c4d4:	f7fe fe84 	bl	1b1e0 <net_pkt_cursor_init>
	pkt->overwrite = overwrite;
   1c4d8:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
   1c4dc:	f043 0301 	orr.w	r3, r3, #1
   1c4e0:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
	if (net_pkt_skip(pkt, ip_len) != 0) {
   1c4e4:	4629      	mov	r1, r5
   1c4e6:	4620      	mov	r0, r4
   1c4e8:	f7fe feec 	bl	1b2c4 <net_pkt_skip>
   1c4ec:	b978      	cbnz	r0, 1c50e <th_get+0x4a>
	if (!net_pkt_is_contiguous(pkt, sizeof(*th))) {
   1c4ee:	2114      	movs	r1, #20
   1c4f0:	4620      	mov	r0, r4
   1c4f2:	f7ff f8e3 	bl	1b6bc <net_pkt_is_contiguous>
   1c4f6:	b940      	cbnz	r0, 1c50a <th_get+0x46>
		if (tcp_pkt_linearize(pkt, ip_len, sizeof(*th)) < 0) {
   1c4f8:	2214      	movs	r2, #20
   1c4fa:	4629      	mov	r1, r5
   1c4fc:	4620      	mov	r0, r4
   1c4fe:	f7ff ff89 	bl	1c414 <tcp_pkt_linearize>
   1c502:	2800      	cmp	r0, #0
   1c504:	dae5      	bge.n	1c4d2 <th_get+0xe>
	struct tcphdr *th = NULL;
   1c506:	2000      	movs	r0, #0
	return th;
   1c508:	e002      	b.n	1c510 <th_get+0x4c>
	return pkt->cursor.pos;
   1c50a:	6920      	ldr	r0, [r4, #16]
   1c50c:	e000      	b.n	1c510 <th_get+0x4c>
	struct tcphdr *th = NULL;
   1c50e:	2000      	movs	r0, #0
}
   1c510:	bd38      	pop	{r3, r4, r5, pc}

0001c512 <tcp_endpoint_set>:
	return pkt->family;
   1c512:	f891 3037 	ldrb.w	r3, [r1, #55]	; 0x37
   1c516:	095b      	lsrs	r3, r3, #5
	switch (net_pkt_family(pkt)) {
   1c518:	2b01      	cmp	r3, #1
   1c51a:	d120      	bne.n	1c55e <tcp_endpoint_set+0x4c>
{
   1c51c:	b570      	push	{r4, r5, r6, lr}
   1c51e:	4604      	mov	r4, r0
   1c520:	4608      	mov	r0, r1
   1c522:	4615      	mov	r5, r2
	return pkt->frags->data;
   1c524:	688b      	ldr	r3, [r1, #8]
   1c526:	689e      	ldr	r6, [r3, #8]
			th = th_get(pkt);
   1c528:	f7ff ffcc 	bl	1c4c4 <th_get>
			if (!th) {
   1c52c:	b1d0      	cbz	r0, 1c564 <tcp_endpoint_set+0x52>
   1c52e:	2300      	movs	r3, #0
   1c530:	6023      	str	r3, [r4, #0]
   1c532:	6063      	str	r3, [r4, #4]
   1c534:	60a3      	str	r3, [r4, #8]
   1c536:	60e3      	str	r3, [r4, #12]
   1c538:	6123      	str	r3, [r4, #16]
   1c53a:	6163      	str	r3, [r4, #20]
			ep->sin.sin_port = src == TCP_EP_SRC ? th_sport(th) :
   1c53c:	2d01      	cmp	r5, #1
   1c53e:	d00a      	beq.n	1c556 <tcp_endpoint_set+0x44>
							       th_dport(th);
   1c540:	8843      	ldrh	r3, [r0, #2]
			ep->sin.sin_port = src == TCP_EP_SRC ? th_sport(th) :
   1c542:	8063      	strh	r3, [r4, #2]
			net_ipv4_addr_copy_raw((uint8_t *)&ep->sin.sin_addr,
   1c544:	2d01      	cmp	r5, #1
   1c546:	d008      	beq.n	1c55a <tcp_endpoint_set+0x48>
   1c548:	3610      	adds	r6, #16
	net_ipaddr_copy((struct in_addr *)dest, (const struct in_addr *)src);
   1c54a:	6833      	ldr	r3, [r6, #0]
   1c54c:	6063      	str	r3, [r4, #4]
			ep->sa.sa_family = AF_INET;
   1c54e:	2301      	movs	r3, #1
   1c550:	8023      	strh	r3, [r4, #0]
	int ret = 0;
   1c552:	2000      	movs	r0, #0
}
   1c554:	bd70      	pop	{r4, r5, r6, pc}
			ep->sin.sin_port = src == TCP_EP_SRC ? th_sport(th) :
   1c556:	8803      	ldrh	r3, [r0, #0]
   1c558:	e7f3      	b.n	1c542 <tcp_endpoint_set+0x30>
			net_ipv4_addr_copy_raw((uint8_t *)&ep->sin.sin_addr,
   1c55a:	360c      	adds	r6, #12
   1c55c:	e7f5      	b.n	1c54a <tcp_endpoint_set+0x38>
			ret = -EINVAL;
   1c55e:	f06f 0015 	mvn.w	r0, #21
}
   1c562:	4770      	bx	lr
				return -ENOBUFS;
   1c564:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1c568:	e7f4      	b.n	1c554 <tcp_endpoint_set+0x42>

0001c56a <tcp_data_len>:
{
   1c56a:	b510      	push	{r4, lr}
   1c56c:	4604      	mov	r4, r0
	struct tcphdr *th = th_get(pkt);
   1c56e:	f7ff ffa9 	bl	1c4c4 <th_get>
	size_t tcp_options_len = (th_off(th) - 5) * 4;
   1c572:	f890 c00c 	ldrb.w	ip, [r0, #12]
   1c576:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
   1c57a:	f1ac 0c05 	sub.w	ip, ip, #5
   1c57e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
	return net_buf_frags_len(pkt->frags);
   1c582:	68a3      	ldr	r3, [r4, #8]
	size_t bytes = 0;
   1c584:	2200      	movs	r2, #0
	while (buf) {
   1c586:	e002      	b.n	1c58e <tcp_data_len+0x24>
		bytes += buf->len;
   1c588:	8999      	ldrh	r1, [r3, #12]
   1c58a:	440a      	add	r2, r1
		buf = buf->frags;
   1c58c:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1c58e:	2b00      	cmp	r3, #0
   1c590:	d1fa      	bne.n	1c588 <tcp_data_len+0x1e>
	return pkt->ip_hdr_len;
   1c592:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
	int len = net_pkt_get_len(pkt) - net_pkt_ip_hdr_len(pkt) -
   1c596:	1ad0      	subs	r0, r2, r3
	return pkt->ipv4_opts_len;
   1c598:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   1c59c:	1ac0      	subs	r0, r0, r3
		net_pkt_ip_opts_len(pkt) - sizeof(*th) - tcp_options_len;
   1c59e:	eba0 000c 	sub.w	r0, r0, ip
   1c5a2:	3814      	subs	r0, #20
}
   1c5a4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   1c5a8:	bd10      	pop	{r4, pc}

0001c5aa <tcp_derive_rto>:
{
   1c5aa:	b510      	push	{r4, lr}
   1c5ac:	b082      	sub	sp, #8
   1c5ae:	4604      	mov	r4, r0
	z_impl_sys_rand_get(dst, len);
   1c5b0:	2101      	movs	r1, #1
   1c5b2:	f10d 0007 	add.w	r0, sp, #7
   1c5b6:	f000 fe19 	bl	1d1ec <z_impl_sys_rand_get>
	gain = (uint32_t)gain8;
   1c5ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
	gain += 1 << 9;
   1c5be:	f503 7300 	add.w	r3, r3, #512	; 0x200
	rto = (gain * rto) >> 9;
   1c5c2:	22c8      	movs	r2, #200	; 0xc8
   1c5c4:	fb02 f303 	mul.w	r3, r2, r3
	conn->rto = (uint16_t)rto;
   1c5c8:	0a5b      	lsrs	r3, r3, #9
   1c5ca:	f8a4 3232 	strh.w	r3, [r4, #562]	; 0x232
}
   1c5ce:	b002      	add	sp, #8
   1c5d0:	bd10      	pop	{r4, pc}

0001c5d2 <tcp_pkt_peek>:
{
   1c5d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c5d4:	4606      	mov	r6, r0
   1c5d6:	460c      	mov	r4, r1
   1c5d8:	4615      	mov	r5, r2
   1c5da:	461f      	mov	r7, r3
	net_pkt_cursor_init(to);
   1c5dc:	f7fe fe00 	bl	1b1e0 <net_pkt_cursor_init>
	net_pkt_cursor_init(from);
   1c5e0:	4620      	mov	r0, r4
   1c5e2:	f7fe fdfd 	bl	1b1e0 <net_pkt_cursor_init>
	if (pos) {
   1c5e6:	b92d      	cbnz	r5, 1c5f4 <tcp_pkt_peek+0x22>
	return net_pkt_copy(to, from, len);
   1c5e8:	463a      	mov	r2, r7
   1c5ea:	4621      	mov	r1, r4
   1c5ec:	4630      	mov	r0, r6
   1c5ee:	f7fe ff06 	bl	1b3fe <net_pkt_copy>
}
   1c5f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	pkt->overwrite = overwrite;
   1c5f4:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
   1c5f8:	f043 0301 	orr.w	r3, r3, #1
   1c5fc:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
		net_pkt_skip(from, pos);
   1c600:	4629      	mov	r1, r5
   1c602:	4620      	mov	r0, r4
   1c604:	f7fe fe5e 	bl	1b2c4 <net_pkt_skip>
   1c608:	e7ee      	b.n	1c5e8 <tcp_pkt_peek+0x16>

0001c60a <tcp_endpoint_cmp>:
{
   1c60a:	b510      	push	{r4, lr}
   1c60c:	b086      	sub	sp, #24
   1c60e:	4604      	mov	r4, r0
	if (tcp_endpoint_set(&ep_tmp, pkt, which) < 0) {
   1c610:	4668      	mov	r0, sp
   1c612:	f7ff ff7e 	bl	1c512 <tcp_endpoint_set>
   1c616:	2800      	cmp	r0, #0
   1c618:	db0c      	blt.n	1c634 <tcp_endpoint_cmp+0x2a>
	return !memcmp(ep, &ep_tmp, tcp_endpoint_len(ep->sa.sa_family));
   1c61a:	8820      	ldrh	r0, [r4, #0]
   1c61c:	f7ff fd8c 	bl	1c138 <tcp_endpoint_len>
   1c620:	4602      	mov	r2, r0
   1c622:	4669      	mov	r1, sp
   1c624:	4620      	mov	r0, r4
   1c626:	f003 fbbc 	bl	1fda2 <memcmp>
   1c62a:	fab0 f080 	clz	r0, r0
   1c62e:	0940      	lsrs	r0, r0, #5
}
   1c630:	b006      	add	sp, #24
   1c632:	bd10      	pop	{r4, pc}
		return false;
   1c634:	2000      	movs	r0, #0
   1c636:	e7fb      	b.n	1c630 <tcp_endpoint_cmp+0x26>

0001c638 <tcp_conn_cmp>:
{
   1c638:	b538      	push	{r3, r4, r5, lr}
   1c63a:	4604      	mov	r4, r0
   1c63c:	460d      	mov	r5, r1
	return tcp_endpoint_cmp(&conn->src, pkt, TCP_EP_DST) &&
   1c63e:	2200      	movs	r2, #0
   1c640:	f500 70f0 	add.w	r0, r0, #480	; 0x1e0
   1c644:	f7ff ffe1 	bl	1c60a <tcp_endpoint_cmp>
   1c648:	b908      	cbnz	r0, 1c64e <tcp_conn_cmp+0x16>
   1c64a:	2000      	movs	r0, #0
}
   1c64c:	bd38      	pop	{r3, r4, r5, pc}
		tcp_endpoint_cmp(&conn->dst, pkt, TCP_EP_SRC);
   1c64e:	2201      	movs	r2, #1
   1c650:	4629      	mov	r1, r5
   1c652:	f504 70fc 	add.w	r0, r4, #504	; 0x1f8
   1c656:	f7ff ffd8 	bl	1c60a <tcp_endpoint_cmp>
	return tcp_endpoint_cmp(&conn->src, pkt, TCP_EP_DST) &&
   1c65a:	b108      	cbz	r0, 1c660 <tcp_conn_cmp+0x28>
   1c65c:	2001      	movs	r0, #1
   1c65e:	e7f5      	b.n	1c64c <tcp_conn_cmp+0x14>
   1c660:	2000      	movs	r0, #0
   1c662:	e7f3      	b.n	1c64c <tcp_conn_cmp+0x14>

0001c664 <tcp_init_isn>:
{
   1c664:	b508      	push	{r3, lr}
			   saddr->sa_family == AF_INET) {
   1c666:	8803      	ldrh	r3, [r0, #0]
		} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
   1c668:	2b01      	cmp	r3, #1
   1c66a:	d002      	beq.n	1c672 <tcp_init_isn+0xe>
	return z_impl_sys_rand32_get();
   1c66c:	f7ed fde4 	bl	a238 <z_impl_sys_rand32_get>
}
   1c670:	bd08      	pop	{r3, pc}
			return tcpv4_init_isn(&net_sin(saddr)->sin_addr,
   1c672:	884b      	ldrh	r3, [r1, #2]
   1c674:	8842      	ldrh	r2, [r0, #2]
   1c676:	3104      	adds	r1, #4
   1c678:	3004      	adds	r0, #4
   1c67a:	f7eb ffb7 	bl	85ec <tcpv4_init_isn>
   1c67e:	e7f7      	b.n	1c670 <tcp_init_isn+0xc>

0001c680 <tcp_options_get>:
{
   1c680:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c684:	b083      	sub	sp, #12
   1c686:	4604      	mov	r4, r0
   1c688:	460f      	mov	r7, r1
   1c68a:	4615      	mov	r5, r2
   1c68c:	461e      	mov	r6, r3
	backup->buf = pkt->cursor.buf;
   1c68e:	f8d0 900c 	ldr.w	r9, [r0, #12]
   1c692:	f8cd 9000 	str.w	r9, [sp]
	backup->pos = pkt->cursor.pos;
   1c696:	f8d0 8010 	ldr.w	r8, [r0, #16]
   1c69a:	f8cd 8004 	str.w	r8, [sp, #4]
	net_pkt_cursor_init(pkt);
   1c69e:	f7fe fd9f 	bl	1b1e0 <net_pkt_cursor_init>
	return pkt->ip_hdr_len;
   1c6a2:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
	return pkt->ipv4_opts_len;
   1c6a6:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
	net_pkt_skip(pkt, net_pkt_ip_hdr_len(pkt) + net_pkt_ip_opts_len(pkt) +
   1c6aa:	4419      	add	r1, r3
   1c6ac:	3114      	adds	r1, #20
   1c6ae:	4620      	mov	r0, r4
   1c6b0:	f7fe fe08 	bl	1b2c4 <net_pkt_skip>
	ret = net_pkt_read(pkt, buf, MIN(tcp_options_len, buf_len));
   1c6b4:	463a      	mov	r2, r7
   1c6b6:	42b7      	cmp	r7, r6
   1c6b8:	bf28      	it	cs
   1c6ba:	4632      	movcs	r2, r6
   1c6bc:	4629      	mov	r1, r5
   1c6be:	4620      	mov	r0, r4
   1c6c0:	f7fe fe93 	bl	1b3ea <net_pkt_read>
	if (ret < 0) {
   1c6c4:	2800      	cmp	r0, #0
   1c6c6:	db07      	blt.n	1c6d8 <tcp_options_get+0x58>
   1c6c8:	4628      	mov	r0, r5
	pkt->cursor.buf = backup->buf;
   1c6ca:	f8c4 900c 	str.w	r9, [r4, #12]
	pkt->cursor.pos = backup->pos;
   1c6ce:	f8c4 8010 	str.w	r8, [r4, #16]
}
   1c6d2:	b003      	add	sp, #12
   1c6d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		buf = NULL;
   1c6d8:	2000      	movs	r0, #0
   1c6da:	e7f6      	b.n	1c6ca <tcp_options_get+0x4a>

0001c6dc <tcp_options_check>:
{
   1c6dc:	b570      	push	{r4, r5, r6, lr}
   1c6de:	b08a      	sub	sp, #40	; 0x28
   1c6e0:	4605      	mov	r5, r0
   1c6e2:	4608      	mov	r0, r1
	bool result = len > 0 && ((len % 4) == 0) ? true : false;
   1c6e4:	1e14      	subs	r4, r2, #0
   1c6e6:	dd04      	ble.n	1c6f2 <tcp_options_check+0x16>
   1c6e8:	f014 0f03 	tst.w	r4, #3
   1c6ec:	d011      	beq.n	1c712 <tcp_options_check+0x36>
   1c6ee:	2600      	movs	r6, #0
   1c6f0:	e000      	b.n	1c6f4 <tcp_options_check+0x18>
   1c6f2:	2600      	movs	r6, #0
	uint8_t *options = tcp_options_get(pkt, len, options_buf,
   1c6f4:	2328      	movs	r3, #40	; 0x28
   1c6f6:	466a      	mov	r2, sp
   1c6f8:	4621      	mov	r1, r4
   1c6fa:	f7ff ffc1 	bl	1c680 <tcp_options_get>
   1c6fe:	4603      	mov	r3, r0
	recv_options->mss_found = false;
   1c700:	792a      	ldrb	r2, [r5, #4]
   1c702:	f36f 0200 	bfc	r2, #0, #1
   1c706:	712a      	strb	r2, [r5, #4]
	recv_options->wnd_found = false;
   1c708:	b2d2      	uxtb	r2, r2
   1c70a:	f36f 0241 	bfc	r2, #1, #1
   1c70e:	712a      	strb	r2, [r5, #4]
	for ( ; options && len >= 1; options += opt_len, len -= opt_len) {
   1c710:	e00f      	b.n	1c732 <tcp_options_check+0x56>
	bool result = len > 0 && ((len % 4) == 0) ? true : false;
   1c712:	2601      	movs	r6, #1
   1c714:	e7ee      	b.n	1c6f4 <tcp_options_check+0x18>
			if (opt_len != 4) {
   1c716:	2904      	cmp	r1, #4
   1c718:	d12f      	bne.n	1c77a <tcp_options_check+0x9e>
				ntohs(UNALIGNED_GET((uint16_t *)(options + 2)));
   1c71a:	8858      	ldrh	r0, [r3, #2]
   1c71c:	0202      	lsls	r2, r0, #8
   1c71e:	b212      	sxth	r2, r2
   1c720:	ea42 2210 	orr.w	r2, r2, r0, lsr #8
			recv_options->mss =
   1c724:	802a      	strh	r2, [r5, #0]
			recv_options->mss_found = true;
   1c726:	792a      	ldrb	r2, [r5, #4]
   1c728:	f042 0201 	orr.w	r2, r2, #1
   1c72c:	712a      	strb	r2, [r5, #4]
	for ( ; options && len >= 1; options += opt_len, len -= opt_len) {
   1c72e:	440b      	add	r3, r1
   1c730:	1a64      	subs	r4, r4, r1
   1c732:	b1fb      	cbz	r3, 1c774 <tcp_options_check+0x98>
   1c734:	2c00      	cmp	r4, #0
   1c736:	dd1d      	ble.n	1c774 <tcp_options_check+0x98>
		opt = options[0];
   1c738:	781a      	ldrb	r2, [r3, #0]
		if (opt == NET_TCP_END_OPT) {
   1c73a:	b1da      	cbz	r2, 1c774 <tcp_options_check+0x98>
		} else if (opt == NET_TCP_NOP_OPT) {
   1c73c:	2a01      	cmp	r2, #1
   1c73e:	d012      	beq.n	1c766 <tcp_options_check+0x8a>
			if (len < 2) { /* Only END and NOP can have length 1 */
   1c740:	2c01      	cmp	r4, #1
   1c742:	dd16      	ble.n	1c772 <tcp_options_check+0x96>
			opt_len = options[1];
   1c744:	7859      	ldrb	r1, [r3, #1]
		if (opt_len < 2 || opt_len > len) {
   1c746:	2901      	cmp	r1, #1
   1c748:	d90f      	bls.n	1c76a <tcp_options_check+0x8e>
   1c74a:	42a1      	cmp	r1, r4
   1c74c:	dc0f      	bgt.n	1c76e <tcp_options_check+0x92>
		switch (opt) {
   1c74e:	2a02      	cmp	r2, #2
   1c750:	d0e1      	beq.n	1c716 <tcp_options_check+0x3a>
   1c752:	2a03      	cmp	r2, #3
   1c754:	d1eb      	bne.n	1c72e <tcp_options_check+0x52>
			if (opt_len != 3) {
   1c756:	2903      	cmp	r1, #3
   1c758:	d111      	bne.n	1c77e <tcp_options_check+0xa2>
			recv_options->window = opt;
   1c75a:	806a      	strh	r2, [r5, #2]
			recv_options->wnd_found = true;
   1c75c:	792a      	ldrb	r2, [r5, #4]
   1c75e:	f042 0202 	orr.w	r2, r2, #2
   1c762:	712a      	strb	r2, [r5, #4]
			break;
   1c764:	e7e3      	b.n	1c72e <tcp_options_check+0x52>
			opt_len = 1;
   1c766:	4611      	mov	r1, r2
   1c768:	e7e1      	b.n	1c72e <tcp_options_check+0x52>
			result = false;
   1c76a:	2600      	movs	r6, #0
   1c76c:	e002      	b.n	1c774 <tcp_options_check+0x98>
   1c76e:	2600      	movs	r6, #0
	if (false == result) {
   1c770:	e000      	b.n	1c774 <tcp_options_check+0x98>
				result = false;
   1c772:	2600      	movs	r6, #0
}
   1c774:	4630      	mov	r0, r6
   1c776:	b00a      	add	sp, #40	; 0x28
   1c778:	bd70      	pop	{r4, r5, r6, pc}
				result = false;
   1c77a:	2600      	movs	r6, #0
   1c77c:	e7fa      	b.n	1c774 <tcp_options_check+0x98>
				result = false;
   1c77e:	2600      	movs	r6, #0
   1c780:	e7f8      	b.n	1c774 <tcp_options_check+0x98>

0001c782 <tcp_check_pending_data>:
{
   1c782:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c786:	4605      	mov	r5, r0
   1c788:	460e      	mov	r6, r1
   1c78a:	4692      	mov	sl, r2
	    !net_pkt_is_empty(conn->queue_recv_data)) {
   1c78c:	68c3      	ldr	r3, [r0, #12]
	return !pkt->buffer || !net_pkt_data(pkt) || pkt->buffer->len == 0;
   1c78e:	689b      	ldr	r3, [r3, #8]
   1c790:	b12b      	cbz	r3, 1c79e <tcp_check_pending_data+0x1c>
	return pkt->frags->data;
   1c792:	689a      	ldr	r2, [r3, #8]
	return !pkt->buffer || !net_pkt_data(pkt) || pkt->buffer->len == 0;
   1c794:	b14a      	cbz	r2, 1c7aa <tcp_check_pending_data+0x28>
   1c796:	899b      	ldrh	r3, [r3, #12]
   1c798:	b14b      	cbz	r3, 1c7ae <tcp_check_pending_data+0x2c>
   1c79a:	2300      	movs	r3, #0
   1c79c:	e000      	b.n	1c7a0 <tcp_check_pending_data+0x1e>
   1c79e:	2301      	movs	r3, #1
	if (CONFIG_NET_TCP_RECV_QUEUE_TIMEOUT &&
   1c7a0:	b13b      	cbz	r3, 1c7b2 <tcp_check_pending_data+0x30>
	size_t pending_len = 0;
   1c7a2:	2400      	movs	r4, #0
}
   1c7a4:	4620      	mov	r0, r4
   1c7a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c7aa:	2301      	movs	r3, #1
   1c7ac:	e7f8      	b.n	1c7a0 <tcp_check_pending_data+0x1e>
   1c7ae:	2301      	movs	r3, #1
   1c7b0:	e7f6      	b.n	1c7a0 <tcp_check_pending_data+0x1e>
		struct tcphdr *th = th_get(pkt);
   1c7b2:	4630      	mov	r0, r6
   1c7b4:	f7ff fe86 	bl	1c4c4 <th_get>
		uint32_t expected_seq = th_seq(th) + len;
   1c7b8:	6843      	ldr	r3, [r0, #4]
   1c7ba:	0a1c      	lsrs	r4, r3, #8
   1c7bc:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
   1c7c0:	ea44 6413 	orr.w	r4, r4, r3, lsr #24
   1c7c4:	021a      	lsls	r2, r3, #8
   1c7c6:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
   1c7ca:	4314      	orrs	r4, r2
   1c7cc:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
   1c7d0:	eb04 090a 	add.w	r9, r4, sl
		pending_seq = tcp_get_seq(conn->queue_recv_data->buffer);
   1c7d4:	68eb      	ldr	r3, [r5, #12]
   1c7d6:	f8d3 8008 	ldr.w	r8, [r3, #8]
   1c7da:	4640      	mov	r0, r8
   1c7dc:	f7ff fca8 	bl	1c130 <tcp_get_seq>
   1c7e0:	4607      	mov	r7, r0
		end_offset = expected_seq - pending_seq;
   1c7e2:	eba9 0100 	sub.w	r1, r9, r0
		gap_size = (int32_t)(pending_seq - th_seq(th) - ((uint32_t)len));
   1c7e6:	1b04      	subs	r4, r0, r4
   1c7e8:	eba4 020a 	sub.w	r2, r4, sl
   1c7ec:	4643      	mov	r3, r8
	size_t bytes = 0;
   1c7ee:	2400      	movs	r4, #0
	while (buf) {
   1c7f0:	e003      	b.n	1c7fa <tcp_check_pending_data+0x78>
		bytes += buf->len;
   1c7f2:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
   1c7f6:	4464      	add	r4, ip
		buf = buf->frags;
   1c7f8:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1c7fa:	2b00      	cmp	r3, #0
   1c7fc:	d1f9      	bne.n	1c7f2 <tcp_check_pending_data+0x70>
		if (end_offset < pending_len) {
   1c7fe:	428c      	cmp	r4, r1
   1c800:	d914      	bls.n	1c82c <tcp_check_pending_data+0xaa>
			if (end_offset) {
   1c802:	b961      	cbnz	r1, 1c81e <tcp_check_pending_data+0x9c>
					 conn->queue_recv_data->buffer);
   1c804:	68eb      	ldr	r3, [r5, #12]
			net_buf_frag_add(pkt->buffer,
   1c806:	6899      	ldr	r1, [r3, #8]
   1c808:	68b0      	ldr	r0, [r6, #8]
   1c80a:	f7fc fd99 	bl	19340 <net_buf_frag_add>
			conn->queue_recv_data->buffer = NULL;
   1c80e:	68eb      	ldr	r3, [r5, #12]
   1c810:	2200      	movs	r2, #0
   1c812:	609a      	str	r2, [r3, #8]
			k_work_cancel_delayable(&conn->recv_queue_timer);
   1c814:	f105 00c0 	add.w	r0, r5, #192	; 0xc0
   1c818:	f002 fe3f 	bl	1f49a <k_work_cancel_delayable>
   1c81c:	e7c2      	b.n	1c7a4 <tcp_check_pending_data+0x22>
				net_pkt_remove_tail(pkt, end_offset);
   1c81e:	4630      	mov	r0, r6
   1c820:	f7fe fcbb 	bl	1b19a <net_pkt_remove_tail>
				pending_len -= end_offset;
   1c824:	eba7 0709 	sub.w	r7, r7, r9
   1c828:	443c      	add	r4, r7
   1c82a:	e7eb      	b.n	1c804 <tcp_check_pending_data+0x82>
			if (gap_size <= 0) {
   1c82c:	2a00      	cmp	r2, #0
   1c82e:	dd01      	ble.n	1c834 <tcp_check_pending_data+0xb2>
			pending_len = 0;
   1c830:	2400      	movs	r4, #0
	return pending_len;
   1c832:	e7b7      	b.n	1c7a4 <tcp_check_pending_data+0x22>
				net_buf_unref(conn->queue_recv_data->buffer);
   1c834:	4640      	mov	r0, r8
   1c836:	f7fc fd4b 	bl	192d0 <net_buf_unref>
				conn->queue_recv_data->buffer = NULL;
   1c83a:	68eb      	ldr	r3, [r5, #12]
   1c83c:	2400      	movs	r4, #0
   1c83e:	609c      	str	r4, [r3, #8]
				k_work_cancel_delayable(&conn->recv_queue_timer);
   1c840:	f105 00c0 	add.w	r0, r5, #192	; 0xc0
   1c844:	f002 fe29 	bl	1f49a <k_work_cancel_delayable>
   1c848:	e7ac      	b.n	1c7a4 <tcp_check_pending_data+0x22>

0001c84a <tcp_pkt_pull>:
{
   1c84a:	b538      	push	{r3, r4, r5, lr}
   1c84c:	4604      	mov	r4, r0
   1c84e:	460d      	mov	r5, r1
	return net_buf_frags_len(pkt->frags);
   1c850:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   1c852:	2200      	movs	r2, #0
	while (buf) {
   1c854:	e003      	b.n	1c85e <tcp_pkt_pull+0x14>
		bytes += buf->len;
   1c856:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
   1c85a:	4462      	add	r2, ip
		buf = buf->frags;
   1c85c:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1c85e:	2b00      	cmp	r3, #0
   1c860:	d1f9      	bne.n	1c856 <tcp_pkt_pull+0xc>
	if (len > total) {
   1c862:	4295      	cmp	r5, r2
   1c864:	d811      	bhi.n	1c88a <tcp_pkt_pull+0x40>
	net_pkt_cursor_init(pkt);
   1c866:	4620      	mov	r0, r4
   1c868:	f7fe fcba 	bl	1b1e0 <net_pkt_cursor_init>
	pkt->overwrite = overwrite;
   1c86c:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
   1c870:	f043 0301 	orr.w	r3, r3, #1
   1c874:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
	net_pkt_pull(pkt, len);
   1c878:	4629      	mov	r1, r5
   1c87a:	4620      	mov	r0, r4
   1c87c:	f7fe fe36 	bl	1b4ec <net_pkt_pull>
	net_pkt_trim_buffer(pkt);
   1c880:	4620      	mov	r0, r4
   1c882:	f7fe fc6e 	bl	1b162 <net_pkt_trim_buffer>
	int ret = 0;
   1c886:	2000      	movs	r0, #0
}
   1c888:	bd38      	pop	{r3, r4, r5, pc}
		ret = -EINVAL;
   1c88a:	f06f 0015 	mvn.w	r0, #21
	return ret;
   1c88e:	e7fb      	b.n	1c888 <tcp_pkt_pull+0x3e>

0001c890 <tcp_out_of_order_data>:
	if (data_len == 0) {
   1c890:	b1d2      	cbz	r2, 1c8c8 <tcp_out_of_order_data+0x38>
{
   1c892:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c894:	4605      	mov	r5, r0
   1c896:	460c      	mov	r4, r1
   1c898:	461f      	mov	r7, r3
   1c89a:	4616      	mov	r6, r2
	return net_buf_frags_len(pkt->frags);
   1c89c:	688a      	ldr	r2, [r1, #8]
	size_t bytes = 0;
   1c89e:	2100      	movs	r1, #0
	while (buf) {
   1c8a0:	e003      	b.n	1c8aa <tcp_out_of_order_data+0x1a>
		bytes += buf->len;
   1c8a2:	f8b2 e00c 	ldrh.w	lr, [r2, #12]
   1c8a6:	4471      	add	r1, lr
		buf = buf->frags;
   1c8a8:	6812      	ldr	r2, [r2, #0]
	while (buf) {
   1c8aa:	2a00      	cmp	r2, #0
   1c8ac:	d1f9      	bne.n	1c8a2 <tcp_out_of_order_data+0x12>
	if (tcp_pkt_pull(pkt, headers_len) < 0) {
   1c8ae:	1b89      	subs	r1, r1, r6
   1c8b0:	4620      	mov	r0, r4
   1c8b2:	f7ff ffca 	bl	1c84a <tcp_pkt_pull>
   1c8b6:	2800      	cmp	r0, #0
   1c8b8:	db05      	blt.n	1c8c6 <tcp_out_of_order_data+0x36>
	tcp_queue_recv_data(conn, pkt, data_len, seq);
   1c8ba:	463b      	mov	r3, r7
   1c8bc:	4632      	mov	r2, r6
   1c8be:	4621      	mov	r1, r4
   1c8c0:	4628      	mov	r0, r5
   1c8c2:	f7eb ff5b 	bl	877c <tcp_queue_recv_data>
}
   1c8c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c8c8:	4770      	bx	lr

0001c8ca <tcp_establish_timeout>:
{
   1c8ca:	b508      	push	{r3, lr}
	(void)tcp_conn_unref(conn, -ETIMEDOUT);
   1c8cc:	f06f 0173 	mvn.w	r1, #115	; 0x73
   1c8d0:	f7eb ffe6 	bl	88a0 <tcp_conn_unref>
}
   1c8d4:	bd08      	pop	{r3, pc}

0001c8d6 <tcp_fin_timeout>:
{
   1c8d6:	b508      	push	{r3, lr}
	if (conn->state == TCP_SYN_RECEIVED) {
   1c8d8:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
   1c8dc:	2b03      	cmp	r3, #3
   1c8de:	d005      	beq.n	1c8ec <tcp_fin_timeout+0x16>
	net_context_unref(conn->context);
   1c8e0:	f5a0 70d8 	sub.w	r0, r0, #432	; 0x1b0
   1c8e4:	6840      	ldr	r0, [r0, #4]
   1c8e6:	f7fd fdae 	bl	1a446 <net_context_unref>
}
   1c8ea:	bd08      	pop	{r3, pc}
   1c8ec:	f5a0 72d8 	sub.w	r2, r0, #432	; 0x1b0
		tcp_establish_timeout(conn);
   1c8f0:	4610      	mov	r0, r2
   1c8f2:	f7ff ffea 	bl	1c8ca <tcp_establish_timeout>
		return;
   1c8f6:	e7f8      	b.n	1c8ea <tcp_fin_timeout+0x14>

0001c8f8 <tcp_send_process>:
{
   1c8f8:	b570      	push	{r4, r5, r6, lr}
	struct tcp *conn = CONTAINER_OF(dwork, struct tcp, send_timer);
   1c8fa:	f1a0 0690 	sub.w	r6, r0, #144	; 0x90
	k_mutex_lock(&conn->lock, K_FOREVER);
   1c8fe:	f1a0 046c 	sub.w	r4, r0, #108	; 0x6c
	return z_impl_k_mutex_lock(mutex, timeout);
   1c902:	f04f 32ff 	mov.w	r2, #4294967295
   1c906:	f04f 33ff 	mov.w	r3, #4294967295
   1c90a:	4620      	mov	r0, r4
   1c90c:	f7f4 fb80 	bl	11010 <z_impl_k_mutex_lock>
	unref = tcp_send_process_no_lock(conn);
   1c910:	4630      	mov	r0, r6
   1c912:	f7eb fd91 	bl	8438 <tcp_send_process_no_lock>
   1c916:	4605      	mov	r5, r0
	return z_impl_k_mutex_unlock(mutex);
   1c918:	4620      	mov	r0, r4
   1c91a:	f7f4 fbfd 	bl	11118 <z_impl_k_mutex_unlock>
	if (unref) {
   1c91e:	b905      	cbnz	r5, 1c922 <tcp_send_process+0x2a>
}
   1c920:	bd70      	pop	{r4, r5, r6, pc}
		tcp_conn_unref(conn, -ETIMEDOUT);
   1c922:	f06f 0173 	mvn.w	r1, #115	; 0x73
   1c926:	4630      	mov	r0, r6
   1c928:	f7eb ffba 	bl	88a0 <tcp_conn_unref>
   1c92c:	e7f8      	b.n	1c920 <tcp_send_process+0x28>

0001c92e <tcp_conn_ref>:
	int ref_count = atomic_inc(&conn->ref_count) + 1;
   1c92e:	f500 7007 	add.w	r0, r0, #540	; 0x21c
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1c932:	f3bf 8f5b 	dmb	ish
   1c936:	e850 3f00 	ldrex	r3, [r0]
   1c93a:	3301      	adds	r3, #1
   1c93c:	e840 3200 	strex	r2, r3, [r0]
   1c940:	2a00      	cmp	r2, #0
   1c942:	d1f8      	bne.n	1c936 <tcp_conn_ref+0x8>
   1c944:	f3bf 8f5b 	dmb	ish
}
   1c948:	4770      	bx	lr

0001c94a <net_tcp_unref>:
	if (context->tcp) {
   1c94a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   1c94c:	b120      	cbz	r0, 1c958 <net_tcp_unref+0xe>
{
   1c94e:	b508      	push	{r3, lr}
		ref_count = tcp_conn_unref(context->tcp, 0);
   1c950:	2100      	movs	r1, #0
   1c952:	f7eb ffa5 	bl	88a0 <tcp_conn_unref>
}
   1c956:	bd08      	pop	{r3, pc}
	int ref_count = 0;
   1c958:	2000      	movs	r0, #0
}
   1c95a:	4770      	bx	lr

0001c95c <net_tcp_listen>:
	context->flags &= ~(NET_CONTEXT_STATE_MASK << NET_CONTEXT_STATE_SHIFT);
   1c95c:	f8b0 3088 	ldrh.w	r3, [r0, #136]	; 0x88
   1c960:	f023 0306 	bic.w	r3, r3, #6
   1c964:	b29b      	uxth	r3, r3
   1c966:	f8a0 3088 	strh.w	r3, [r0, #136]	; 0x88
	context->flags |= ((state & NET_CONTEXT_STATE_MASK) <<
   1c96a:	f043 0306 	orr.w	r3, r3, #6
   1c96e:	f8a0 3088 	strh.w	r3, [r0, #136]	; 0x88
}
   1c972:	2000      	movs	r0, #0
   1c974:	4770      	bx	lr

0001c976 <net_tcp_send_data>:
	if (cb) {
   1c976:	b129      	cbz	r1, 1c984 <net_tcp_send_data+0xe>
{
   1c978:	b508      	push	{r3, lr}
   1c97a:	460b      	mov	r3, r1
		cb(context, 0, user_data);
   1c97c:	2100      	movs	r1, #0
   1c97e:	4798      	blx	r3
}
   1c980:	2000      	movs	r0, #0
   1c982:	bd08      	pop	{r3, pc}
   1c984:	2000      	movs	r0, #0
   1c986:	4770      	bx	lr

0001c988 <net_tcp_recv>:
	struct tcp *conn = context->tcp;
   1c988:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
	context->recv_cb = cb;
   1c98a:	6301      	str	r1, [r0, #48]	; 0x30
	if (conn) {
   1c98c:	b103      	cbz	r3, 1c990 <net_tcp_recv+0x8>
		conn->recv_user_data = user_data;
   1c98e:	615a      	str	r2, [r3, #20]
}
   1c990:	2000      	movs	r0, #0
   1c992:	4770      	bx	lr

0001c994 <net_tcp_finalize>:
{
   1c994:	b530      	push	{r4, r5, lr}
   1c996:	b089      	sub	sp, #36	; 0x24
   1c998:	4604      	mov	r4, r0
	NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
   1c99a:	ab03      	add	r3, sp, #12
   1c99c:	9301      	str	r3, [sp, #4]
   1c99e:	2314      	movs	r3, #20
   1c9a0:	9302      	str	r3, [sp, #8]
	tcp_hdr = (struct net_tcp_hdr *)net_pkt_get_data(pkt, &tcp_access);
   1c9a2:	a901      	add	r1, sp, #4
   1c9a4:	f7fe feae 	bl	1b704 <net_pkt_get_data>
	if (!tcp_hdr) {
   1c9a8:	b198      	cbz	r0, 1c9d2 <net_tcp_finalize+0x3e>
   1c9aa:	4605      	mov	r5, r0
	tcp_hdr->chksum = 0U;
   1c9ac:	2300      	movs	r3, #0
   1c9ae:	7403      	strb	r3, [r0, #16]
   1c9b0:	7443      	strb	r3, [r0, #17]
	if (net_if_need_calc_tx_checksum(net_pkt_iface(pkt))) {
   1c9b2:	69a0      	ldr	r0, [r4, #24]
   1c9b4:	f7fd f882 	bl	19abc <net_if_need_calc_tx_checksum>
   1c9b8:	b928      	cbnz	r0, 1c9c6 <net_tcp_finalize+0x32>
	return net_pkt_set_data(pkt, &tcp_access);
   1c9ba:	a901      	add	r1, sp, #4
   1c9bc:	4620      	mov	r0, r4
   1c9be:	f7fe fec5 	bl	1b74c <net_pkt_set_data>
}
   1c9c2:	b009      	add	sp, #36	; 0x24
   1c9c4:	bd30      	pop	{r4, r5, pc}
	return net_calc_chksum(pkt, IPPROTO_UDP);
}

static inline uint16_t net_calc_chksum_tcp(struct net_pkt *pkt)
{
	return net_calc_chksum(pkt, IPPROTO_TCP);
   1c9c6:	2106      	movs	r1, #6
   1c9c8:	4620      	mov	r0, r4
   1c9ca:	f7fd fac1 	bl	19f50 <net_calc_chksum>
		tcp_hdr->chksum = net_calc_chksum_tcp(pkt);
   1c9ce:	8228      	strh	r0, [r5, #16]
   1c9d0:	e7f3      	b.n	1c9ba <net_tcp_finalize+0x26>
		return -ENOBUFS;
   1c9d2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1c9d6:	e7f4      	b.n	1c9c2 <net_tcp_finalize+0x2e>

0001c9d8 <net_tcp_input>:
{
   1c9d8:	b570      	push	{r4, r5, r6, lr}
   1c9da:	4604      	mov	r4, r0
   1c9dc:	460d      	mov	r5, r1
	    net_if_need_calc_rx_checksum(net_pkt_iface(pkt)) &&
   1c9de:	6980      	ldr	r0, [r0, #24]
   1c9e0:	f7fd f871 	bl	19ac6 <net_if_need_calc_rx_checksum>
	if (IS_ENABLED(CONFIG_NET_TCP_CHECKSUM) &&
   1c9e4:	b120      	cbz	r0, 1c9f0 <net_tcp_input+0x18>
   1c9e6:	2106      	movs	r1, #6
   1c9e8:	4620      	mov	r0, r4
   1c9ea:	f7fd fab1 	bl	19f50 <net_calc_chksum>
	    net_if_need_calc_rx_checksum(net_pkt_iface(pkt)) &&
   1c9ee:	b970      	cbnz	r0, 1ca0e <net_tcp_input+0x36>
	tcp_hdr = (struct net_tcp_hdr *)net_pkt_get_data(pkt, tcp_access);
   1c9f0:	4629      	mov	r1, r5
   1c9f2:	4620      	mov	r0, r4
   1c9f4:	f7fe fe86 	bl	1b704 <net_pkt_get_data>
	if (tcp_hdr && !net_pkt_set_data(pkt, tcp_access)) {
   1c9f8:	4606      	mov	r6, r0
   1c9fa:	b120      	cbz	r0, 1ca06 <net_tcp_input+0x2e>
   1c9fc:	4629      	mov	r1, r5
   1c9fe:	4620      	mov	r0, r4
   1ca00:	f7fe fea4 	bl	1b74c <net_pkt_set_data>
   1ca04:	b908      	cbnz	r0, 1ca0a <net_tcp_input+0x32>
}
   1ca06:	4630      	mov	r0, r6
   1ca08:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   1ca0a:	2600      	movs	r6, #0
   1ca0c:	e7fb      	b.n	1ca06 <net_tcp_input+0x2e>
   1ca0e:	2600      	movs	r6, #0
   1ca10:	e7f9      	b.n	1ca06 <net_tcp_input+0x2e>

0001ca12 <net_tcp_get_supported_mss>:
{
   1ca12:	b508      	push	{r3, lr}
	sa_family_t family = net_context_get_family(conn->context);
   1ca14:	6842      	ldr	r2, [r0, #4]
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
   1ca16:	f8b2 3088 	ldrh.w	r3, [r2, #136]	; 0x88
   1ca1a:	f3c3 03c2 	ubfx	r3, r3, #3, #3
	if (family == AF_INET) {
   1ca1e:	2b01      	cmp	r3, #1
   1ca20:	d001      	beq.n	1ca26 <net_tcp_get_supported_mss+0x14>
	return 0;
   1ca22:	2000      	movs	r0, #0
}
   1ca24:	bd08      	pop	{r3, pc}
	return net_if_get_by_index(context->iface);
   1ca26:	f992 008a 	ldrsb.w	r0, [r2, #138]	; 0x8a
   1ca2a:	f7e9 ff31 	bl	6890 <z_impl_net_if_get_by_index>
		if (iface && net_if_get_mtu(iface) >= NET_IPV4TCPH_LEN) {
   1ca2e:	b140      	cbz	r0, 1ca42 <net_tcp_get_supported_mss+0x30>
	return iface->if_dev->mtu;
   1ca30:	6803      	ldr	r3, [r0, #0]
   1ca32:	8b98      	ldrh	r0, [r3, #28]
   1ca34:	2827      	cmp	r0, #39	; 0x27
   1ca36:	d801      	bhi.n	1ca3c <net_tcp_get_supported_mss+0x2a>
	return 0;
   1ca38:	2000      	movs	r0, #0
   1ca3a:	e7f3      	b.n	1ca24 <net_tcp_get_supported_mss+0x12>
			return net_if_get_mtu(iface) - NET_IPV4TCPH_LEN;
   1ca3c:	3828      	subs	r0, #40	; 0x28
   1ca3e:	b280      	uxth	r0, r0
   1ca40:	e7f0      	b.n	1ca24 <net_tcp_get_supported_mss+0x12>
	return 0;
   1ca42:	2000      	movs	r0, #0
   1ca44:	e7ee      	b.n	1ca24 <net_tcp_get_supported_mss+0x12>

0001ca46 <net_tcp_set_mss_opt>:
{
   1ca46:	b570      	push	{r4, r5, r6, lr}
   1ca48:	b084      	sub	sp, #16
   1ca4a:	4606      	mov	r6, r0
   1ca4c:	460c      	mov	r4, r1
	NET_PKT_DATA_ACCESS_DEFINE(mss_opt_access, struct tcp_mss_option);
   1ca4e:	ab03      	add	r3, sp, #12
   1ca50:	9301      	str	r3, [sp, #4]
   1ca52:	2304      	movs	r3, #4
   1ca54:	9302      	str	r3, [sp, #8]
	mss = net_pkt_get_data(pkt, &mss_opt_access);
   1ca56:	eb0d 0103 	add.w	r1, sp, r3
   1ca5a:	4620      	mov	r0, r4
   1ca5c:	f7fe fe52 	bl	1b704 <net_pkt_get_data>
	if (!mss) {
   1ca60:	b1b8      	cbz	r0, 1ca92 <net_tcp_set_mss_opt+0x4c>
   1ca62:	4605      	mov	r5, r0
	recv_mss = net_tcp_get_supported_mss(conn);
   1ca64:	4630      	mov	r0, r6
   1ca66:	f7ff ffd4 	bl	1ca12 <net_tcp_get_supported_mss>
	recv_mss |= (NET_TCP_MSS_OPT << 24) | (NET_TCP_MSS_SIZE << 16);
   1ca6a:	f040 7201 	orr.w	r2, r0, #33816576	; 0x2040000
	UNALIGNED_PUT(htonl(recv_mss), (uint32_t *)mss);
   1ca6e:	0a13      	lsrs	r3, r2, #8
   1ca70:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   1ca74:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1ca78:	0211      	lsls	r1, r2, #8
   1ca7a:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   1ca7e:	430b      	orrs	r3, r1
   1ca80:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   1ca84:	602b      	str	r3, [r5, #0]
	return net_pkt_set_data(pkt, &mss_opt_access);
   1ca86:	a901      	add	r1, sp, #4
   1ca88:	4620      	mov	r0, r4
   1ca8a:	f7fe fe5f 	bl	1b74c <net_pkt_set_data>
}
   1ca8e:	b004      	add	sp, #16
   1ca90:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   1ca92:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1ca96:	e7fa      	b.n	1ca8e <net_tcp_set_mss_opt+0x48>

0001ca98 <tcp_out>:
{
   1ca98:	b508      	push	{r3, lr}
	(void)tcp_out_ext(conn, flags, NULL /* no data */, conn->seq);
   1ca9a:	f8d0 3224 	ldr.w	r3, [r0, #548]	; 0x224
   1ca9e:	2200      	movs	r2, #0
   1caa0:	f7ec f8b4 	bl	8c0c <tcp_out_ext>
}
   1caa4:	bd08      	pop	{r3, pc}

0001caa6 <tcp_send_ack>:
{
   1caa6:	b538      	push	{r3, r4, r5, lr}
	struct tcp *conn = CONTAINER_OF(dwork, struct tcp, ack_timer);
   1caa8:	f5a0 75c0 	sub.w	r5, r0, #384	; 0x180
	k_mutex_lock(&conn->lock, K_FOREVER);
   1caac:	f5a0 74ae 	sub.w	r4, r0, #348	; 0x15c
	return z_impl_k_mutex_lock(mutex, timeout);
   1cab0:	f04f 32ff 	mov.w	r2, #4294967295
   1cab4:	f04f 33ff 	mov.w	r3, #4294967295
   1cab8:	4620      	mov	r0, r4
   1caba:	f7f4 faa9 	bl	11010 <z_impl_k_mutex_lock>
	tcp_out(conn, ACK);
   1cabe:	2110      	movs	r1, #16
   1cac0:	4628      	mov	r0, r5
   1cac2:	f7ff ffe9 	bl	1ca98 <tcp_out>
	return z_impl_k_mutex_unlock(mutex);
   1cac6:	4620      	mov	r0, r4
   1cac8:	f7f4 fb26 	bl	11118 <z_impl_k_mutex_unlock>
}
   1cacc:	bd38      	pop	{r3, r4, r5, pc}

0001cace <tcp_send_data>:
{
   1cace:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cad0:	b083      	sub	sp, #12
   1cad2:	4604      	mov	r4, r0
	len = MIN3(conn->send_data_total - conn->unacked_len,
   1cad4:	f8d0 5210 	ldr.w	r5, [r0, #528]	; 0x210
   1cad8:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
   1cadc:	1aed      	subs	r5, r5, r3
   1cade:	f8b0 6230 	ldrh.w	r6, [r0, #560]	; 0x230
   1cae2:	1af6      	subs	r6, r6, r3
   1cae4:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
   1cae8:	f013 0f01 	tst.w	r3, #1
   1caec:	d00e      	beq.n	1cb0c <tcp_send_data+0x3e>
   1caee:	f8b0 7080 	ldrh.w	r7, [r0, #128]	; 0x80
   1caf2:	4620      	mov	r0, r4
   1caf4:	f7ff ff8d 	bl	1ca12 <net_tcp_get_supported_mss>
   1caf8:	42b8      	cmp	r0, r7
   1cafa:	dd0a      	ble.n	1cb12 <tcp_send_data+0x44>
   1cafc:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
   1cb00:	f013 0f01 	tst.w	r3, #1
   1cb04:	d009      	beq.n	1cb1a <tcp_send_data+0x4c>
   1cb06:	f8b4 0080 	ldrh.w	r0, [r4, #128]	; 0x80
   1cb0a:	e008      	b.n	1cb1e <tcp_send_data+0x50>
   1cb0c:	f44f 7706 	mov.w	r7, #536	; 0x218
   1cb10:	e7ef      	b.n	1caf2 <tcp_send_data+0x24>
   1cb12:	4620      	mov	r0, r4
   1cb14:	f7ff ff7d 	bl	1ca12 <net_tcp_get_supported_mss>
   1cb18:	e001      	b.n	1cb1e <tcp_send_data+0x50>
   1cb1a:	f44f 7006 	mov.w	r0, #536	; 0x218
   1cb1e:	4286      	cmp	r6, r0
   1cb20:	da45      	bge.n	1cbae <tcp_send_data+0xe0>
   1cb22:	f8b4 0230 	ldrh.w	r0, [r4, #560]	; 0x230
   1cb26:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
   1cb2a:	1ac0      	subs	r0, r0, r3
   1cb2c:	4285      	cmp	r5, r0
   1cb2e:	d25c      	bcs.n	1cbea <tcp_send_data+0x11c>
   1cb30:	f8d4 6210 	ldr.w	r6, [r4, #528]	; 0x210
   1cb34:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
   1cb38:	1af6      	subs	r6, r6, r3
	if (len == 0) {
   1cb3a:	2e00      	cmp	r6, #0
   1cb3c:	f000 80ab 	beq.w	1cc96 <tcp_send_data+0x1c8>
	pkt = tcp_pkt_alloc(conn, len);
   1cb40:	2e00      	cmp	r6, #0
   1cb42:	f340 809b 	ble.w	1cc7c <tcp_send_data+0x1ae>
   1cb46:	6863      	ldr	r3, [r4, #4]
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
   1cb48:	f8b3 2088 	ldrh.w	r2, [r3, #136]	; 0x88
   1cb4c:	f640 40cd 	movw	r0, #3277	; 0xccd
   1cb50:	2100      	movs	r1, #0
   1cb52:	e9cd 0100 	strd	r0, r1, [sp]
   1cb56:	2306      	movs	r3, #6
   1cb58:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   1cb5c:	4631      	mov	r1, r6
   1cb5e:	6920      	ldr	r0, [r4, #16]
   1cb60:	f7ea ffac 	bl	7abc <net_pkt_alloc_with_buffer>
   1cb64:	4605      	mov	r5, r0
	if (!pkt) {
   1cb66:	2d00      	cmp	r5, #0
   1cb68:	f000 8098 	beq.w	1cc9c <tcp_send_data+0x1ce>
	ret = tcp_pkt_peek(pkt, conn->send_data, conn->unacked_len, len);
   1cb6c:	4633      	mov	r3, r6
   1cb6e:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
   1cb72:	68a1      	ldr	r1, [r4, #8]
   1cb74:	4628      	mov	r0, r5
   1cb76:	f7ff fd2c 	bl	1c5d2 <tcp_pkt_peek>
	if (ret < 0) {
   1cb7a:	2800      	cmp	r0, #0
   1cb7c:	f2c0 8085 	blt.w	1cc8a <tcp_send_data+0x1bc>
	ret = tcp_out_ext(conn, PSH | ACK, pkt, conn->seq + conn->unacked_len);
   1cb80:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
   1cb84:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
   1cb88:	4413      	add	r3, r2
   1cb8a:	462a      	mov	r2, r5
   1cb8c:	2118      	movs	r1, #24
   1cb8e:	4620      	mov	r0, r4
   1cb90:	f7ec f83c 	bl	8c0c <tcp_out_ext>
	if (ret == 0) {
   1cb94:	4607      	mov	r7, r0
   1cb96:	b920      	cbnz	r0, 1cba2 <tcp_send_data+0xd4>
		conn->unacked_len += len;
   1cb98:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
   1cb9c:	4433      	add	r3, r6
   1cb9e:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
	tcp_pkt_unref(pkt);
   1cba2:	4628      	mov	r0, r5
   1cba4:	f7fe fa84 	bl	1b0b0 <net_pkt_unref>
}
   1cba8:	4638      	mov	r0, r7
   1cbaa:	b003      	add	sp, #12
   1cbac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	len = MIN3(conn->send_data_total - conn->unacked_len,
   1cbae:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
   1cbb2:	f013 0f01 	tst.w	r3, #1
   1cbb6:	d002      	beq.n	1cbbe <tcp_send_data+0xf0>
   1cbb8:	f8b4 6080 	ldrh.w	r6, [r4, #128]	; 0x80
   1cbbc:	e001      	b.n	1cbc2 <tcp_send_data+0xf4>
   1cbbe:	f44f 7606 	mov.w	r6, #536	; 0x218
   1cbc2:	4620      	mov	r0, r4
   1cbc4:	f7ff ff25 	bl	1ca12 <net_tcp_get_supported_mss>
   1cbc8:	42b0      	cmp	r0, r6
   1cbca:	dd07      	ble.n	1cbdc <tcp_send_data+0x10e>
   1cbcc:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
   1cbd0:	f013 0f01 	tst.w	r3, #1
   1cbd4:	d006      	beq.n	1cbe4 <tcp_send_data+0x116>
   1cbd6:	f8b4 0080 	ldrh.w	r0, [r4, #128]	; 0x80
   1cbda:	e7a7      	b.n	1cb2c <tcp_send_data+0x5e>
   1cbdc:	4620      	mov	r0, r4
   1cbde:	f7ff ff18 	bl	1ca12 <net_tcp_get_supported_mss>
   1cbe2:	e7a3      	b.n	1cb2c <tcp_send_data+0x5e>
   1cbe4:	f44f 7006 	mov.w	r0, #536	; 0x218
   1cbe8:	e7a0      	b.n	1cb2c <tcp_send_data+0x5e>
   1cbea:	f8b4 5230 	ldrh.w	r5, [r4, #560]	; 0x230
   1cbee:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
   1cbf2:	1aed      	subs	r5, r5, r3
   1cbf4:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
   1cbf8:	f013 0f01 	tst.w	r3, #1
   1cbfc:	d002      	beq.n	1cc04 <tcp_send_data+0x136>
   1cbfe:	f8b4 6080 	ldrh.w	r6, [r4, #128]	; 0x80
   1cc02:	e001      	b.n	1cc08 <tcp_send_data+0x13a>
   1cc04:	f44f 7606 	mov.w	r6, #536	; 0x218
   1cc08:	4620      	mov	r0, r4
   1cc0a:	f7ff ff02 	bl	1ca12 <net_tcp_get_supported_mss>
   1cc0e:	42b0      	cmp	r0, r6
   1cc10:	dd0e      	ble.n	1cc30 <tcp_send_data+0x162>
   1cc12:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
   1cc16:	f013 0f01 	tst.w	r3, #1
   1cc1a:	d00d      	beq.n	1cc38 <tcp_send_data+0x16a>
   1cc1c:	f8b4 0080 	ldrh.w	r0, [r4, #128]	; 0x80
   1cc20:	4285      	cmp	r5, r0
   1cc22:	da0c      	bge.n	1cc3e <tcp_send_data+0x170>
   1cc24:	f8b4 6230 	ldrh.w	r6, [r4, #560]	; 0x230
   1cc28:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
   1cc2c:	1af6      	subs	r6, r6, r3
   1cc2e:	e784      	b.n	1cb3a <tcp_send_data+0x6c>
   1cc30:	4620      	mov	r0, r4
   1cc32:	f7ff feee 	bl	1ca12 <net_tcp_get_supported_mss>
   1cc36:	e7f3      	b.n	1cc20 <tcp_send_data+0x152>
   1cc38:	f44f 7006 	mov.w	r0, #536	; 0x218
   1cc3c:	e7f0      	b.n	1cc20 <tcp_send_data+0x152>
   1cc3e:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
   1cc42:	f013 0f01 	tst.w	r3, #1
   1cc46:	d00e      	beq.n	1cc66 <tcp_send_data+0x198>
   1cc48:	f8b4 5080 	ldrh.w	r5, [r4, #128]	; 0x80
   1cc4c:	4620      	mov	r0, r4
   1cc4e:	f7ff fee0 	bl	1ca12 <net_tcp_get_supported_mss>
   1cc52:	42a8      	cmp	r0, r5
   1cc54:	dd0a      	ble.n	1cc6c <tcp_send_data+0x19e>
   1cc56:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
   1cc5a:	f013 0f01 	tst.w	r3, #1
   1cc5e:	d00a      	beq.n	1cc76 <tcp_send_data+0x1a8>
   1cc60:	f8b4 6080 	ldrh.w	r6, [r4, #128]	; 0x80
   1cc64:	e769      	b.n	1cb3a <tcp_send_data+0x6c>
   1cc66:	f44f 7506 	mov.w	r5, #536	; 0x218
   1cc6a:	e7ef      	b.n	1cc4c <tcp_send_data+0x17e>
   1cc6c:	4620      	mov	r0, r4
   1cc6e:	f7ff fed0 	bl	1ca12 <net_tcp_get_supported_mss>
   1cc72:	4606      	mov	r6, r0
   1cc74:	e761      	b.n	1cb3a <tcp_send_data+0x6c>
   1cc76:	f44f 7606 	mov.w	r6, #536	; 0x218
   1cc7a:	e761      	b.n	1cb40 <tcp_send_data+0x72>
	pkt = tcp_pkt_alloc(conn, len);
   1cc7c:	f640 40cd 	movw	r0, #3277	; 0xccd
   1cc80:	2100      	movs	r1, #0
   1cc82:	f7ea fe9f 	bl	79c4 <net_pkt_alloc>
   1cc86:	4605      	mov	r5, r0
   1cc88:	e76d      	b.n	1cb66 <tcp_send_data+0x98>
		tcp_pkt_unref(pkt);
   1cc8a:	4628      	mov	r0, r5
   1cc8c:	f7fe fa10 	bl	1b0b0 <net_pkt_unref>
		ret = -ENOBUFS;
   1cc90:	f06f 0768 	mvn.w	r7, #104	; 0x68
		goto out;
   1cc94:	e788      	b.n	1cba8 <tcp_send_data+0xda>
		ret = -ENODATA;
   1cc96:	f06f 073c 	mvn.w	r7, #60	; 0x3c
   1cc9a:	e785      	b.n	1cba8 <tcp_send_data+0xda>
		ret = -ENOBUFS;
   1cc9c:	f06f 0768 	mvn.w	r7, #104	; 0x68
	return ret;
   1cca0:	e782      	b.n	1cba8 <tcp_send_data+0xda>

0001cca2 <tcp_short_window>:
{
   1cca2:	b538      	push	{r3, r4, r5, lr}
   1cca4:	4604      	mov	r4, r0
	int32_t threshold = MIN(conn_mss(conn), conn->recv_win_max / 2);
   1cca6:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
   1ccaa:	f013 0f01 	tst.w	r3, #1
   1ccae:	d00e      	beq.n	1ccce <tcp_short_window+0x2c>
   1ccb0:	f8b0 5080 	ldrh.w	r5, [r0, #128]	; 0x80
   1ccb4:	4620      	mov	r0, r4
   1ccb6:	f7ff feac 	bl	1ca12 <net_tcp_get_supported_mss>
   1ccba:	42a8      	cmp	r0, r5
   1ccbc:	dd0a      	ble.n	1ccd4 <tcp_short_window+0x32>
   1ccbe:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
   1ccc2:	f013 0f01 	tst.w	r3, #1
   1ccc6:	d009      	beq.n	1ccdc <tcp_short_window+0x3a>
   1ccc8:	f8b4 0080 	ldrh.w	r0, [r4, #128]	; 0x80
   1cccc:	e008      	b.n	1cce0 <tcp_short_window+0x3e>
   1ccce:	f44f 7506 	mov.w	r5, #536	; 0x218
   1ccd2:	e7ef      	b.n	1ccb4 <tcp_short_window+0x12>
   1ccd4:	4620      	mov	r0, r4
   1ccd6:	f7ff fe9c 	bl	1ca12 <net_tcp_get_supported_mss>
   1ccda:	e001      	b.n	1cce0 <tcp_short_window+0x3e>
   1ccdc:	f44f 7006 	mov.w	r0, #536	; 0x218
   1cce0:	f8b4 322c 	ldrh.w	r3, [r4, #556]	; 0x22c
   1cce4:	085a      	lsrs	r2, r3, #1
   1cce6:	ebb0 0f53 	cmp.w	r0, r3, lsr #1
   1ccea:	da15      	bge.n	1cd18 <tcp_short_window+0x76>
   1ccec:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
   1ccf0:	f013 0f01 	tst.w	r3, #1
   1ccf4:	d002      	beq.n	1ccfc <tcp_short_window+0x5a>
   1ccf6:	f8b4 5080 	ldrh.w	r5, [r4, #128]	; 0x80
   1ccfa:	e001      	b.n	1cd00 <tcp_short_window+0x5e>
   1ccfc:	f44f 7506 	mov.w	r5, #536	; 0x218
   1cd00:	4620      	mov	r0, r4
   1cd02:	f7ff fe86 	bl	1ca12 <net_tcp_get_supported_mss>
   1cd06:	42a8      	cmp	r0, r5
   1cd08:	dd0c      	ble.n	1cd24 <tcp_short_window+0x82>
   1cd0a:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
   1cd0e:	f013 0f01 	tst.w	r3, #1
   1cd12:	d00c      	beq.n	1cd2e <tcp_short_window+0x8c>
   1cd14:	f8b4 2080 	ldrh.w	r2, [r4, #128]	; 0x80
	if (conn->recv_win > threshold) {
   1cd18:	f8b4 322e 	ldrh.w	r3, [r4, #558]	; 0x22e
   1cd1c:	4293      	cmp	r3, r2
   1cd1e:	dc09      	bgt.n	1cd34 <tcp_short_window+0x92>
	return true;
   1cd20:	2001      	movs	r0, #1
}
   1cd22:	bd38      	pop	{r3, r4, r5, pc}
	int32_t threshold = MIN(conn_mss(conn), conn->recv_win_max / 2);
   1cd24:	4620      	mov	r0, r4
   1cd26:	f7ff fe74 	bl	1ca12 <net_tcp_get_supported_mss>
   1cd2a:	4602      	mov	r2, r0
   1cd2c:	e7f4      	b.n	1cd18 <tcp_short_window+0x76>
   1cd2e:	f44f 7206 	mov.w	r2, #536	; 0x218
   1cd32:	e7f1      	b.n	1cd18 <tcp_short_window+0x76>
		return false;
   1cd34:	2000      	movs	r0, #0
   1cd36:	e7f4      	b.n	1cd22 <tcp_short_window+0x80>

0001cd38 <tcp_update_recv_wnd>:
{
   1cd38:	b570      	push	{r4, r5, r6, lr}
	new_win = conn->recv_win + delta;
   1cd3a:	f8b0 522e 	ldrh.w	r5, [r0, #558]	; 0x22e
   1cd3e:	440d      	add	r5, r1
	if (new_win < 0 || new_win > UINT16_MAX) {
   1cd40:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   1cd44:	d21a      	bcs.n	1cd7c <tcp_update_recv_wnd+0x44>
   1cd46:	4604      	mov	r4, r0
	short_win_before = tcp_short_window(conn);
   1cd48:	f7ff ffab 	bl	1cca2 <tcp_short_window>
   1cd4c:	4606      	mov	r6, r0
	conn->recv_win = new_win;
   1cd4e:	f8a4 522e 	strh.w	r5, [r4, #558]	; 0x22e
	short_win_after = tcp_short_window(conn);
   1cd52:	4620      	mov	r0, r4
   1cd54:	f7ff ffa5 	bl	1cca2 <tcp_short_window>
	if (short_win_before && !short_win_after &&
   1cd58:	b19e      	cbz	r6, 1cd82 <tcp_update_recv_wnd+0x4a>
   1cd5a:	b9a0      	cbnz	r0, 1cd86 <tcp_update_recv_wnd+0x4e>
	    conn->state == TCP_ESTABLISHED) {
   1cd5c:	f894 3220 	ldrb.w	r3, [r4, #544]	; 0x220
	if (short_win_before && !short_win_after &&
   1cd60:	2b04      	cmp	r3, #4
   1cd62:	d001      	beq.n	1cd68 <tcp_update_recv_wnd+0x30>
	return 0;
   1cd64:	2000      	movs	r0, #0
   1cd66:	e00d      	b.n	1cd84 <tcp_update_recv_wnd+0x4c>
		k_work_cancel_delayable(&conn->ack_timer);
   1cd68:	f504 70c0 	add.w	r0, r4, #384	; 0x180
   1cd6c:	f002 fb95 	bl	1f49a <k_work_cancel_delayable>
		tcp_out(conn, ACK);
   1cd70:	2110      	movs	r1, #16
   1cd72:	4620      	mov	r0, r4
   1cd74:	f7ff fe90 	bl	1ca98 <tcp_out>
	return 0;
   1cd78:	2000      	movs	r0, #0
   1cd7a:	e003      	b.n	1cd84 <tcp_update_recv_wnd+0x4c>
		return -EINVAL;
   1cd7c:	f06f 0015 	mvn.w	r0, #21
   1cd80:	e000      	b.n	1cd84 <tcp_update_recv_wnd+0x4c>
	return 0;
   1cd82:	2000      	movs	r0, #0
}
   1cd84:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   1cd86:	2000      	movs	r0, #0
   1cd88:	e7fc      	b.n	1cd84 <tcp_update_recv_wnd+0x4c>

0001cd8a <net_tcp_update_recv_wnd>:
{
   1cd8a:	b570      	push	{r4, r5, r6, lr}
	struct tcp *conn = context->tcp;
   1cd8c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
	if (!conn) {
   1cd8e:	b19c      	cbz	r4, 1cdb8 <net_tcp_update_recv_wnd+0x2e>
   1cd90:	4605      	mov	r5, r0
   1cd92:	460e      	mov	r6, r1
	k_mutex_lock(&conn->lock, K_FOREVER);
   1cd94:	3424      	adds	r4, #36	; 0x24
	return z_impl_k_mutex_lock(mutex, timeout);
   1cd96:	f04f 32ff 	mov.w	r2, #4294967295
   1cd9a:	f04f 33ff 	mov.w	r3, #4294967295
   1cd9e:	4620      	mov	r0, r4
   1cda0:	f7f4 f936 	bl	11010 <z_impl_k_mutex_lock>
	ret = tcp_update_recv_wnd((struct tcp *)context->tcp, delta);
   1cda4:	4631      	mov	r1, r6
   1cda6:	6be8      	ldr	r0, [r5, #60]	; 0x3c
   1cda8:	f7ff ffc6 	bl	1cd38 <tcp_update_recv_wnd>
   1cdac:	4605      	mov	r5, r0
	return z_impl_k_mutex_unlock(mutex);
   1cdae:	4620      	mov	r0, r4
   1cdb0:	f7f4 f9b2 	bl	11118 <z_impl_k_mutex_unlock>
}
   1cdb4:	4628      	mov	r0, r5
   1cdb6:	bd70      	pop	{r4, r5, r6, pc}
		return -EPROTOTYPE;
   1cdb8:	f06f 056a 	mvn.w	r5, #106	; 0x6a
   1cdbc:	e7fa      	b.n	1cdb4 <net_tcp_update_recv_wnd+0x2a>

0001cdbe <tcp_recv>:
{
   1cdbe:	b570      	push	{r4, r5, r6, lr}
   1cdc0:	b082      	sub	sp, #8
   1cdc2:	460c      	mov	r4, r1
	conn = tcp_conn_search(pkt);
   1cdc4:	4608      	mov	r0, r1
   1cdc6:	f7eb fbd9 	bl	857c <tcp_conn_search>
	if (conn) {
   1cdca:	4603      	mov	r3, r0
   1cdcc:	b128      	cbz	r0, 1cdda <tcp_recv+0x1c>
		verdict = tcp_in(conn, pkt);
   1cdce:	4621      	mov	r1, r4
   1cdd0:	4618      	mov	r0, r3
   1cdd2:	f7ec fa61 	bl	9298 <tcp_in>
}
   1cdd6:	b002      	add	sp, #8
   1cdd8:	bd70      	pop	{r4, r5, r6, pc}
	th = th_get(pkt);
   1cdda:	4620      	mov	r0, r4
   1cddc:	f7ff fb72 	bl	1c4c4 <th_get>
	if (th_flags(th) & SYN && !(th_flags(th) & ACK)) {
   1cde0:	7b43      	ldrb	r3, [r0, #13]
   1cde2:	f013 0f02 	tst.w	r3, #2
   1cde6:	d018      	beq.n	1ce1a <tcp_recv+0x5c>
   1cde8:	f013 0f10 	tst.w	r3, #16
   1cdec:	d001      	beq.n	1cdf2 <tcp_recv+0x34>
	enum net_verdict verdict = NET_DROP;
   1cdee:	2002      	movs	r0, #2
   1cdf0:	e7f1      	b.n	1cdd6 <tcp_recv+0x18>
		struct tcp *conn_old = ((struct net_context *)user_data)->tcp;
   1cdf2:	9b06      	ldr	r3, [sp, #24]
   1cdf4:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
		conn = tcp_conn_new(pkt);
   1cdf6:	4620      	mov	r0, r4
   1cdf8:	f7eb fc28 	bl	864c <tcp_conn_new>
		if (!conn) {
   1cdfc:	4603      	mov	r3, r0
   1cdfe:	b170      	cbz	r0, 1ce1e <tcp_recv+0x60>
		net_ipaddr_copy(&conn_old->context->remote, &conn->dst.sa);
   1ce00:	686e      	ldr	r6, [r5, #4]
   1ce02:	466a      	mov	r2, sp
   1ce04:	f8d0 01f8 	ldr.w	r0, [r0, #504]	; 0x1f8
   1ce08:	f8d3 11fc 	ldr.w	r1, [r3, #508]	; 0x1fc
   1ce0c:	c203      	stmia	r2!, {r0, r1}
   1ce0e:	466a      	mov	r2, sp
   1ce10:	ca03      	ldmia	r2!, {r0, r1}
   1ce12:	6270      	str	r0, [r6, #36]	; 0x24
   1ce14:	62b1      	str	r1, [r6, #40]	; 0x28
		conn->accepted_conn = conn_old;
   1ce16:	621d      	str	r5, [r3, #32]
	if (conn) {
   1ce18:	e7d9      	b.n	1cdce <tcp_recv+0x10>
	enum net_verdict verdict = NET_DROP;
   1ce1a:	2002      	movs	r0, #2
   1ce1c:	e7db      	b.n	1cdd6 <tcp_recv+0x18>
   1ce1e:	2002      	movs	r0, #2
   1ce20:	e7d9      	b.n	1cdd6 <tcp_recv+0x18>

0001ce22 <net_tcp_set_option>:
{
   1ce22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ce26:	460c      	mov	r4, r1
   1ce28:	4615      	mov	r5, r2
   1ce2a:	461e      	mov	r6, r3
	struct tcp *conn = context->tcp;
   1ce2c:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
	k_mutex_lock(&conn->lock, K_FOREVER);
   1ce30:	f108 0724 	add.w	r7, r8, #36	; 0x24
	return z_impl_k_mutex_lock(mutex, timeout);
   1ce34:	f04f 32ff 	mov.w	r2, #4294967295
   1ce38:	f04f 33ff 	mov.w	r3, #4294967295
   1ce3c:	4638      	mov	r0, r7
   1ce3e:	f7f4 f8e7 	bl	11010 <z_impl_k_mutex_lock>
	switch (option) {
   1ce42:	2c01      	cmp	r4, #1
   1ce44:	d006      	beq.n	1ce54 <net_tcp_set_option+0x32>
	int ret = 0;
   1ce46:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
   1ce48:	4638      	mov	r0, r7
   1ce4a:	f7f4 f965 	bl	11118 <z_impl_k_mutex_unlock>
}
   1ce4e:	4620      	mov	r0, r4
   1ce50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ret = set_tcp_nodelay(conn, value, len);
   1ce54:	4632      	mov	r2, r6
   1ce56:	4629      	mov	r1, r5
   1ce58:	4640      	mov	r0, r8
   1ce5a:	f7ff f973 	bl	1c144 <set_tcp_nodelay>
   1ce5e:	4604      	mov	r4, r0
		break;
   1ce60:	e7f2      	b.n	1ce48 <net_tcp_set_option+0x26>

0001ce62 <net_tcp_get_option>:
{
   1ce62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ce66:	460c      	mov	r4, r1
   1ce68:	4615      	mov	r5, r2
   1ce6a:	461e      	mov	r6, r3
	struct tcp *conn = context->tcp;
   1ce6c:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
	k_mutex_lock(&conn->lock, K_FOREVER);
   1ce70:	f108 0724 	add.w	r7, r8, #36	; 0x24
	return z_impl_k_mutex_lock(mutex, timeout);
   1ce74:	f04f 32ff 	mov.w	r2, #4294967295
   1ce78:	f04f 33ff 	mov.w	r3, #4294967295
   1ce7c:	4638      	mov	r0, r7
   1ce7e:	f7f4 f8c7 	bl	11010 <z_impl_k_mutex_lock>
	switch (option) {
   1ce82:	2c01      	cmp	r4, #1
   1ce84:	d006      	beq.n	1ce94 <net_tcp_get_option+0x32>
	int ret = 0;
   1ce86:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
   1ce88:	4638      	mov	r0, r7
   1ce8a:	f7f4 f945 	bl	11118 <z_impl_k_mutex_unlock>
}
   1ce8e:	4620      	mov	r0, r4
   1ce90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ret = get_tcp_nodelay(conn, value, len);
   1ce94:	4632      	mov	r2, r6
   1ce96:	4629      	mov	r1, r5
   1ce98:	4640      	mov	r0, r8
   1ce9a:	f7ff f969 	bl	1c170 <get_tcp_nodelay>
   1ce9e:	4604      	mov	r4, r0
		break;
   1cea0:	e7f2      	b.n	1ce88 <net_tcp_get_option+0x26>

0001cea2 <net_tcp_tx_sem_get>:
	struct tcp *conn = context->tcp;
   1cea2:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
   1cea4:	3050      	adds	r0, #80	; 0x50
   1cea6:	4770      	bx	lr

0001cea8 <net_udp_create>:
#include "net_stats.h"

#define PKT_WAIT_TIME K_SECONDS(1)

int net_udp_create(struct net_pkt *pkt, uint16_t src_port, uint16_t dst_port)
{
   1cea8:	b570      	push	{r4, r5, r6, lr}
   1ceaa:	b084      	sub	sp, #16
   1ceac:	4604      	mov	r4, r0
   1ceae:	460e      	mov	r6, r1
   1ceb0:	4615      	mov	r5, r2
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
   1ceb2:	ab02      	add	r3, sp, #8
   1ceb4:	9300      	str	r3, [sp, #0]
   1ceb6:	2308      	movs	r3, #8
   1ceb8:	9301      	str	r3, [sp, #4]
	struct net_udp_hdr *udp_hdr;

	udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt, &udp_access);
   1ceba:	4669      	mov	r1, sp
   1cebc:	f7fe fc22 	bl	1b704 <net_pkt_get_data>
	if (!udp_hdr) {
   1cec0:	b160      	cbz	r0, 1cedc <net_udp_create+0x34>
		return -ENOBUFS;
	}

	udp_hdr->src_port = src_port;
   1cec2:	8006      	strh	r6, [r0, #0]
	udp_hdr->dst_port = dst_port;
   1cec4:	8045      	strh	r5, [r0, #2]
	udp_hdr->len      = 0U;
   1cec6:	2200      	movs	r2, #0
   1cec8:	7102      	strb	r2, [r0, #4]
   1ceca:	7142      	strb	r2, [r0, #5]
	udp_hdr->chksum   = 0U;
   1cecc:	7182      	strb	r2, [r0, #6]
   1cece:	71c2      	strb	r2, [r0, #7]

	return net_pkt_set_data(pkt, &udp_access);
   1ced0:	4669      	mov	r1, sp
   1ced2:	4620      	mov	r0, r4
   1ced4:	f7fe fc3a 	bl	1b74c <net_pkt_set_data>
}
   1ced8:	b004      	add	sp, #16
   1ceda:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   1cedc:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1cee0:	e7fa      	b.n	1ced8 <net_udp_create+0x30>

0001cee2 <net_udp_finalize>:

int net_udp_finalize(struct net_pkt *pkt)
{
   1cee2:	b530      	push	{r4, r5, lr}
   1cee4:	b085      	sub	sp, #20
   1cee6:	4604      	mov	r4, r0
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
   1cee8:	ab02      	add	r3, sp, #8
   1ceea:	9300      	str	r3, [sp, #0]
   1ceec:	2308      	movs	r3, #8
   1ceee:	9301      	str	r3, [sp, #4]
	struct net_udp_hdr *udp_hdr;
	uint16_t length = 0;

	udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt, &udp_access);
   1cef0:	4669      	mov	r1, sp
   1cef2:	f7fe fc07 	bl	1b704 <net_pkt_get_data>
	if (!udp_hdr) {
   1cef6:	b350      	cbz	r0, 1cf4e <net_udp_finalize+0x6c>
   1cef8:	4605      	mov	r5, r0
   1cefa:	68a3      	ldr	r3, [r4, #8]
	size_t bytes = 0;
   1cefc:	2200      	movs	r2, #0
	while (buf) {
   1cefe:	e002      	b.n	1cf06 <net_udp_finalize+0x24>
		bytes += buf->len;
   1cf00:	8999      	ldrh	r1, [r3, #12]
   1cf02:	440a      	add	r2, r1
		buf = buf->frags;
   1cf04:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1cf06:	2b00      	cmp	r3, #0
   1cf08:	d1fa      	bne.n	1cf00 <net_udp_finalize+0x1e>
	return pkt->ip_hdr_len;
   1cf0a:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
		return -ENOBUFS;
	}

	length = net_pkt_get_len(pkt) - net_pkt_ip_hdr_len(pkt) -
   1cf0e:	1ad2      	subs	r2, r2, r3
   1cf10:	b292      	uxth	r2, r2
	return pkt->ipv4_opts_len;
   1cf12:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   1cf16:	1ad2      	subs	r2, r2, r3
   1cf18:	b293      	uxth	r3, r2
		 net_pkt_ip_opts_len(pkt);

	udp_hdr->len = htons(length);
   1cf1a:	f3c2 2207 	ubfx	r2, r2, #8, #8
   1cf1e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   1cf22:	80aa      	strh	r2, [r5, #4]

	if (net_if_need_calc_tx_checksum(net_pkt_iface(pkt))) {
   1cf24:	69a0      	ldr	r0, [r4, #24]
   1cf26:	f7fc fdc9 	bl	19abc <net_if_need_calc_tx_checksum>
   1cf2a:	b928      	cbnz	r0, 1cf38 <net_udp_finalize+0x56>
		udp_hdr->chksum = net_calc_chksum_udp(pkt);
	}

	return net_pkt_set_data(pkt, &udp_access);
   1cf2c:	4669      	mov	r1, sp
   1cf2e:	4620      	mov	r0, r4
   1cf30:	f7fe fc0c 	bl	1b74c <net_pkt_set_data>
}
   1cf34:	b005      	add	sp, #20
   1cf36:	bd30      	pop	{r4, r5, pc}
	uint16_t chksum = net_calc_chksum(pkt, IPPROTO_UDP);
   1cf38:	2111      	movs	r1, #17
   1cf3a:	4620      	mov	r0, r4
   1cf3c:	f7fd f808 	bl	19f50 <net_calc_chksum>
	return chksum == 0U ? 0xffff : chksum;
   1cf40:	4603      	mov	r3, r0
   1cf42:	b108      	cbz	r0, 1cf48 <net_udp_finalize+0x66>
		udp_hdr->chksum = net_calc_chksum_udp(pkt);
   1cf44:	80eb      	strh	r3, [r5, #6]
   1cf46:	e7f1      	b.n	1cf2c <net_udp_finalize+0x4a>
   1cf48:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1cf4c:	e7fa      	b.n	1cf44 <net_udp_finalize+0x62>
		return -ENOBUFS;
   1cf4e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1cf52:	e7ef      	b.n	1cf34 <net_udp_finalize+0x52>

0001cf54 <net_udp_input>:
	return net_conn_unregister(handle);
}

struct net_udp_hdr *net_udp_input(struct net_pkt *pkt,
				  struct net_pkt_data_access *udp_access)
{
   1cf54:	b570      	push	{r4, r5, r6, lr}
   1cf56:	4605      	mov	r5, r0
   1cf58:	460c      	mov	r4, r1
	struct net_udp_hdr *udp_hdr;

	udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt, udp_access);
   1cf5a:	f7fe fbd3 	bl	1b704 <net_pkt_get_data>
	if (!udp_hdr || net_pkt_set_data(pkt, udp_access)) {
   1cf5e:	b168      	cbz	r0, 1cf7c <net_udp_input+0x28>
   1cf60:	4606      	mov	r6, r0
   1cf62:	4621      	mov	r1, r4
   1cf64:	4628      	mov	r0, r5
   1cf66:	f7fe fbf1 	bl	1b74c <net_pkt_set_data>
   1cf6a:	b938      	cbnz	r0, 1cf7c <net_udp_input+0x28>
		NET_DBG("DROP: corrupted header");
		goto drop;
	}

	if (ntohs(udp_hdr->len) != (net_pkt_get_len(pkt) -
   1cf6c:	88b3      	ldrh	r3, [r6, #4]
   1cf6e:	0219      	lsls	r1, r3, #8
   1cf70:	ea41 2113 	orr.w	r1, r1, r3, lsr #8
   1cf74:	b289      	uxth	r1, r1
	return net_buf_frags_len(pkt->frags);
   1cf76:	68ac      	ldr	r4, [r5, #8]
	size_t bytes = 0;
   1cf78:	2300      	movs	r3, #0
	while (buf) {
   1cf7a:	e005      	b.n	1cf88 <net_udp_input+0x34>
	}
out:
	return udp_hdr;
drop:
	net_stats_update_udp_chkerr(net_pkt_iface(pkt));
	return NULL;
   1cf7c:	2400      	movs	r4, #0
}
   1cf7e:	4620      	mov	r0, r4
   1cf80:	bd70      	pop	{r4, r5, r6, pc}
		bytes += buf->len;
   1cf82:	89a2      	ldrh	r2, [r4, #12]
   1cf84:	4413      	add	r3, r2
		buf = buf->frags;
   1cf86:	6824      	ldr	r4, [r4, #0]
	while (buf) {
   1cf88:	2c00      	cmp	r4, #0
   1cf8a:	d1fa      	bne.n	1cf82 <net_udp_input+0x2e>
	return pkt->ip_hdr_len;
   1cf8c:	f895 2036 	ldrb.w	r2, [r5, #54]	; 0x36
	if (ntohs(udp_hdr->len) != (net_pkt_get_len(pkt) -
   1cf90:	1a9b      	subs	r3, r3, r2
	return pkt->ipv4_opts_len;
   1cf92:	f895 203a 	ldrb.w	r2, [r5, #58]	; 0x3a
				    net_pkt_ip_hdr_len(pkt) -
   1cf96:	1a9b      	subs	r3, r3, r2
	if (ntohs(udp_hdr->len) != (net_pkt_get_len(pkt) -
   1cf98:	4299      	cmp	r1, r3
   1cf9a:	d1f0      	bne.n	1cf7e <net_udp_input+0x2a>
	    net_if_need_calc_rx_checksum(net_pkt_iface(pkt))) {
   1cf9c:	69a8      	ldr	r0, [r5, #24]
   1cf9e:	f7fc fd92 	bl	19ac6 <net_if_need_calc_rx_checksum>
	if (IS_ENABLED(CONFIG_NET_UDP_CHECKSUM) &&
   1cfa2:	b150      	cbz	r0, 1cfba <net_udp_input+0x66>
		if (!udp_hdr->chksum) {
   1cfa4:	88f3      	ldrh	r3, [r6, #6]
   1cfa6:	2b00      	cmp	r3, #0
   1cfa8:	d0e9      	beq.n	1cf7e <net_udp_input+0x2a>
	return net_calc_chksum(pkt, IPPROTO_UDP);
   1cfaa:	2111      	movs	r1, #17
   1cfac:	4628      	mov	r0, r5
   1cfae:	f7fc ffcf 	bl	19f50 <net_calc_chksum>
		if (net_calc_verify_chksum_udp(pkt) != 0U) {
   1cfb2:	2800      	cmp	r0, #0
   1cfb4:	d1e3      	bne.n	1cf7e <net_udp_input+0x2a>
	return udp_hdr;
   1cfb6:	4634      	mov	r4, r6
   1cfb8:	e7e1      	b.n	1cf7e <net_udp_input+0x2a>
   1cfba:	4634      	mov	r4, r6
   1cfbc:	e7df      	b.n	1cf7e <net_udp_input+0x2a>

0001cfbe <net_ipv4_is_addr_mcast>:
	return (ntohl(UNALIGNED_GET(&addr->s_addr)) & 0xF0000000) == 0xE0000000;
   1cfbe:	6803      	ldr	r3, [r0, #0]
   1cfc0:	0a18      	lsrs	r0, r3, #8
   1cfc2:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
   1cfc6:	ea40 6013 	orr.w	r0, r0, r3, lsr #24
   1cfca:	021a      	lsls	r2, r3, #8
   1cfcc:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
   1cfd0:	4310      	orrs	r0, r2
   1cfd2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
   1cfd6:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
}
   1cfda:	f1b0 4f60 	cmp.w	r0, #3758096384	; 0xe0000000
   1cfde:	bf14      	ite	ne
   1cfe0:	2000      	movne	r0, #0
   1cfe2:	2001      	moveq	r0, #1
   1cfe4:	4770      	bx	lr

0001cfe6 <server_is_mdns>:
{
   1cfe6:	b510      	push	{r4, lr}
   1cfe8:	460c      	mov	r4, r1
	if (family == AF_INET) {
   1cfea:	2801      	cmp	r0, #1
   1cfec:	d003      	beq.n	1cff6 <server_is_mdns+0x10>
	if (family == AF_INET6) {
   1cfee:	2802      	cmp	r0, #2
   1cff0:	d00a      	beq.n	1d008 <server_is_mdns+0x22>
	return false;
   1cff2:	2000      	movs	r0, #0
}
   1cff4:	bd10      	pop	{r4, pc}
		if (net_ipv4_is_addr_mcast(&net_sin(addr)->sin_addr) &&
   1cff6:	1d08      	adds	r0, r1, #4
   1cff8:	f7ff ffe1 	bl	1cfbe <net_ipv4_is_addr_mcast>
   1cffc:	b160      	cbz	r0, 1d018 <server_is_mdns+0x32>
		    net_sin(addr)->sin_addr.s4_addr[3] == 251U) {
   1cffe:	79e3      	ldrb	r3, [r4, #7]
		if (net_ipv4_is_addr_mcast(&net_sin(addr)->sin_addr) &&
   1d000:	2bfb      	cmp	r3, #251	; 0xfb
   1d002:	d0f7      	beq.n	1cff4 <server_is_mdns+0xe>
		return false;
   1d004:	2000      	movs	r0, #0
   1d006:	e7f5      	b.n	1cff4 <server_is_mdns+0xe>
	return addr->s6_addr[0] == 0xFF;
   1d008:	790b      	ldrb	r3, [r1, #4]
		if (net_ipv6_is_addr_mcast(&net_sin6(addr)->sin6_addr) &&
   1d00a:	2bff      	cmp	r3, #255	; 0xff
   1d00c:	d106      	bne.n	1d01c <server_is_mdns+0x36>
		    net_sin6(addr)->sin6_addr.s6_addr[15] == 0xfb) {
   1d00e:	7ccb      	ldrb	r3, [r1, #19]
		if (net_ipv6_is_addr_mcast(&net_sin6(addr)->sin6_addr) &&
   1d010:	2bfb      	cmp	r3, #251	; 0xfb
   1d012:	d005      	beq.n	1d020 <server_is_mdns+0x3a>
		return false;
   1d014:	2000      	movs	r0, #0
   1d016:	e7ed      	b.n	1cff4 <server_is_mdns+0xe>
		return false;
   1d018:	2000      	movs	r0, #0
   1d01a:	e7eb      	b.n	1cff4 <server_is_mdns+0xe>
		return false;
   1d01c:	2000      	movs	r0, #0
   1d01e:	e7e9      	b.n	1cff4 <server_is_mdns+0xe>
			return true;
   1d020:	2001      	movs	r0, #1
   1d022:	e7e7      	b.n	1cff4 <server_is_mdns+0xe>

0001d024 <server_is_llmnr>:
{
   1d024:	b510      	push	{r4, lr}
   1d026:	460c      	mov	r4, r1
	if (family == AF_INET) {
   1d028:	2801      	cmp	r0, #1
   1d02a:	d003      	beq.n	1d034 <server_is_llmnr+0x10>
	if (family == AF_INET6) {
   1d02c:	2802      	cmp	r0, #2
   1d02e:	d00a      	beq.n	1d046 <server_is_llmnr+0x22>
	return false;
   1d030:	2000      	movs	r0, #0
}
   1d032:	bd10      	pop	{r4, pc}
		if (net_ipv4_is_addr_mcast(&net_sin(addr)->sin_addr) &&
   1d034:	1d08      	adds	r0, r1, #4
   1d036:	f7ff ffc2 	bl	1cfbe <net_ipv4_is_addr_mcast>
   1d03a:	b160      	cbz	r0, 1d056 <server_is_llmnr+0x32>
		    net_sin(addr)->sin_addr.s4_addr[3] == 252U) {
   1d03c:	79e3      	ldrb	r3, [r4, #7]
		if (net_ipv4_is_addr_mcast(&net_sin(addr)->sin_addr) &&
   1d03e:	2bfc      	cmp	r3, #252	; 0xfc
   1d040:	d0f7      	beq.n	1d032 <server_is_llmnr+0xe>
		return false;
   1d042:	2000      	movs	r0, #0
   1d044:	e7f5      	b.n	1d032 <server_is_llmnr+0xe>
   1d046:	790b      	ldrb	r3, [r1, #4]
		if (net_ipv6_is_addr_mcast(&net_sin6(addr)->sin6_addr) &&
   1d048:	2bff      	cmp	r3, #255	; 0xff
   1d04a:	d106      	bne.n	1d05a <server_is_llmnr+0x36>
		    net_sin6(addr)->sin6_addr.s6_addr[15] == 0x03) {
   1d04c:	7ccb      	ldrb	r3, [r1, #19]
		if (net_ipv6_is_addr_mcast(&net_sin6(addr)->sin6_addr) &&
   1d04e:	2b03      	cmp	r3, #3
   1d050:	d005      	beq.n	1d05e <server_is_llmnr+0x3a>
		return false;
   1d052:	2000      	movs	r0, #0
   1d054:	e7ed      	b.n	1d032 <server_is_llmnr+0xe>
		return false;
   1d056:	2000      	movs	r0, #0
   1d058:	e7eb      	b.n	1d032 <server_is_llmnr+0xe>
		return false;
   1d05a:	2000      	movs	r0, #0
   1d05c:	e7e9      	b.n	1d032 <server_is_llmnr+0xe>
			return true;
   1d05e:	2001      	movs	r0, #1
   1d060:	e7e7      	b.n	1d032 <server_is_llmnr+0xe>

0001d062 <dns_postprocess_server>:
{
   1d062:	b570      	push	{r4, r5, r6, lr}
	struct sockaddr *addr = &ctx->servers[idx].dns_server;
   1d064:	010b      	lsls	r3, r1, #4
   1d066:	eb00 1601 	add.w	r6, r0, r1, lsl #4
	if (addr->sa_family == AF_INET) {
   1d06a:	5ac3      	ldrh	r3, [r0, r3]
   1d06c:	2b01      	cmp	r3, #1
   1d06e:	d01c      	beq.n	1d0aa <dns_postprocess_server+0x48>
   1d070:	4604      	mov	r4, r0
   1d072:	460d      	mov	r5, r1
		ctx->servers[idx].is_mdns = server_is_mdns(AF_INET6, addr);
   1d074:	4631      	mov	r1, r6
   1d076:	2002      	movs	r0, #2
   1d078:	f7ff ffb5 	bl	1cfe6 <server_is_mdns>
   1d07c:	eb04 1305 	add.w	r3, r4, r5, lsl #4
   1d080:	7b1a      	ldrb	r2, [r3, #12]
   1d082:	f360 0200 	bfi	r2, r0, #0, #1
   1d086:	731a      	strb	r2, [r3, #12]
		if (!ctx->servers[idx].is_mdns) {
   1d088:	b948      	cbnz	r0, 1d09e <dns_postprocess_server+0x3c>
				server_is_llmnr(AF_INET6, addr);
   1d08a:	4631      	mov	r1, r6
   1d08c:	2002      	movs	r0, #2
   1d08e:	f7ff ffc9 	bl	1d024 <server_is_llmnr>
			ctx->servers[idx].is_llmnr =
   1d092:	eb04 1405 	add.w	r4, r4, r5, lsl #4
   1d096:	7b23      	ldrb	r3, [r4, #12]
   1d098:	f360 0341 	bfi	r3, r0, #1, #1
   1d09c:	7323      	strb	r3, [r4, #12]
		if (net_sin6(addr)->sin6_port == 0U) {
   1d09e:	8873      	ldrh	r3, [r6, #2]
   1d0a0:	b913      	cbnz	r3, 1d0a8 <dns_postprocess_server+0x46>
				net_sin6(addr)->sin6_port = htons(53);
   1d0a2:	f44f 5354 	mov.w	r3, #13568	; 0x3500
   1d0a6:	8073      	strh	r3, [r6, #2]
}
   1d0a8:	bd70      	pop	{r4, r5, r6, pc}
		ctx->servers[idx].is_mdns = server_is_mdns(AF_INET, addr);
   1d0aa:	4631      	mov	r1, r6
   1d0ac:	2001      	movs	r0, #1
   1d0ae:	f7ff ff9a 	bl	1cfe6 <server_is_mdns>
   1d0b2:	7b32      	ldrb	r2, [r6, #12]
   1d0b4:	f360 0200 	bfi	r2, r0, #0, #1
   1d0b8:	7332      	strb	r2, [r6, #12]
		if (!ctx->servers[idx].is_mdns) {
   1d0ba:	b938      	cbnz	r0, 1d0cc <dns_postprocess_server+0x6a>
				server_is_llmnr(AF_INET, addr);
   1d0bc:	4631      	mov	r1, r6
   1d0be:	2001      	movs	r0, #1
   1d0c0:	f7ff ffb0 	bl	1d024 <server_is_llmnr>
			ctx->servers[idx].is_llmnr =
   1d0c4:	7b33      	ldrb	r3, [r6, #12]
   1d0c6:	f360 0341 	bfi	r3, r0, #1, #1
   1d0ca:	7333      	strb	r3, [r6, #12]
		if (net_sin(addr)->sin_port == 0U) {
   1d0cc:	8873      	ldrh	r3, [r6, #2]
   1d0ce:	2b00      	cmp	r3, #0
   1d0d0:	d1ea      	bne.n	1d0a8 <dns_postprocess_server+0x46>
				net_sin(addr)->sin_port = htons(53);
   1d0d2:	f44f 5354 	mov.w	r3, #13568	; 0x3500
   1d0d6:	8073      	strh	r3, [r6, #2]
   1d0d8:	e7e6      	b.n	1d0a8 <dns_postprocess_server+0x46>

0001d0da <release_query>:
{
   1d0da:	b510      	push	{r4, lr}
   1d0dc:	4604      	mov	r4, r0
	int busy = k_work_cancel_delayable(&pending_query->timer);
   1d0de:	f002 f9dc 	bl	1f49a <k_work_cancel_delayable>
	if (busy == 0) {
   1d0e2:	b910      	cbnz	r0, 1d0ea <release_query+0x10>
		pending_query->cb = NULL;
   1d0e4:	2300      	movs	r3, #0
   1d0e6:	6363      	str	r3, [r4, #52]	; 0x34
}
   1d0e8:	bd10      	pop	{r4, pc}
		pending_query->query = NULL;
   1d0ea:	2300      	movs	r3, #0
   1d0ec:	64a3      	str	r3, [r4, #72]	; 0x48
}
   1d0ee:	e7fb      	b.n	1d0e8 <release_query+0xe>

0001d0f0 <dns_resolve_cancel_slot>:
{
   1d0f0:	b570      	push	{r4, r5, r6, lr}
   1d0f2:	4605      	mov	r5, r0
   1d0f4:	460c      	mov	r4, r1
	if (pending_query->query != NULL)  {
   1d0f6:	2358      	movs	r3, #88	; 0x58
   1d0f8:	fb03 0301 	mla	r3, r3, r1, r0
   1d0fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   1d0fe:	b143      	cbz	r3, 1d112 <dns_resolve_cancel_slot+0x22>
		pending_query->cb(status, info, pending_query->user_data);
   1d100:	2358      	movs	r3, #88	; 0x58
   1d102:	fb03 0301 	mla	r3, r3, r1, r0
   1d106:	6e5e      	ldr	r6, [r3, #100]	; 0x64
   1d108:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   1d10a:	2100      	movs	r1, #0
   1d10c:	f06f 0064 	mvn.w	r0, #100	; 0x64
   1d110:	47b0      	blx	r6
	release_query(&ctx->queries[slot]);
   1d112:	2358      	movs	r3, #88	; 0x58
   1d114:	fb03 f404 	mul.w	r4, r3, r4
   1d118:	3430      	adds	r4, #48	; 0x30
   1d11a:	1928      	adds	r0, r5, r4
   1d11c:	f7ff ffdd 	bl	1d0da <release_query>
}
   1d120:	bd70      	pop	{r4, r5, r6, pc}

0001d122 <dns_resolve_cancel_all>:
{
   1d122:	b538      	push	{r3, r4, r5, lr}
   1d124:	4605      	mov	r5, r0
	for (i = 0; i < CONFIG_DNS_NUM_CONCUR_QUERIES; i++) {
   1d126:	2400      	movs	r4, #0
   1d128:	2c00      	cmp	r4, #0
   1d12a:	dd00      	ble.n	1d12e <dns_resolve_cancel_all+0xc>
}
   1d12c:	bd38      	pop	{r3, r4, r5, pc}
		if (ctx->queries[i].cb && ctx->queries[i].query) {
   1d12e:	2358      	movs	r3, #88	; 0x58
   1d130:	fb03 5304 	mla	r3, r3, r4, r5
   1d134:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   1d136:	b143      	cbz	r3, 1d14a <dns_resolve_cancel_all+0x28>
   1d138:	2358      	movs	r3, #88	; 0x58
   1d13a:	fb03 5304 	mla	r3, r3, r4, r5
   1d13e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   1d140:	b11b      	cbz	r3, 1d14a <dns_resolve_cancel_all+0x28>
			dns_resolve_cancel_slot(ctx, i);
   1d142:	4621      	mov	r1, r4
   1d144:	4628      	mov	r0, r5
   1d146:	f7ff ffd3 	bl	1d0f0 <dns_resolve_cancel_slot>
	for (i = 0; i < CONFIG_DNS_NUM_CONCUR_QUERIES; i++) {
   1d14a:	3401      	adds	r4, #1
   1d14c:	e7ec      	b.n	1d128 <dns_resolve_cancel_all+0x6>

0001d14e <dns_resolve_init>:
	if (!ctx) {
   1d14e:	b1a0      	cbz	r0, 1d17a <dns_resolve_init+0x2c>
{
   1d150:	b570      	push	{r4, r5, r6, lr}
   1d152:	460d      	mov	r5, r1
   1d154:	4616      	mov	r6, r2
   1d156:	4604      	mov	r4, r0
   1d158:	2290      	movs	r2, #144	; 0x90
   1d15a:	2100      	movs	r1, #0
   1d15c:	f002 fe6c 	bl	1fe38 <memset>
	(void)k_mutex_init(&ctx->lock);
   1d160:	f104 0010 	add.w	r0, r4, #16
	return z_impl_k_mutex_init(mutex);
   1d164:	f001 ff63 	bl	1f02e <z_impl_k_mutex_init>
	ctx->state = DNS_RESOLVE_CONTEXT_INACTIVE;
   1d168:	2302      	movs	r3, #2
   1d16a:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
	return dns_resolve_init_locked(ctx, servers, servers_sa);
   1d16e:	4632      	mov	r2, r6
   1d170:	4629      	mov	r1, r5
   1d172:	4620      	mov	r0, r4
   1d174:	f7ec ff58 	bl	a028 <dns_resolve_init_locked>
}
   1d178:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOENT;
   1d17a:	f06f 0001 	mvn.w	r0, #1
}
   1d17e:	4770      	bx	lr

0001d180 <dns_resolve_reconfigure>:
{
   1d180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!ctx) {
   1d184:	b338      	cbz	r0, 1d1d6 <dns_resolve_reconfigure+0x56>
   1d186:	4688      	mov	r8, r1
   1d188:	4615      	mov	r5, r2
   1d18a:	4604      	mov	r4, r0
	k_mutex_lock(&ctx->lock, K_FOREVER);
   1d18c:	f100 0710 	add.w	r7, r0, #16
	return z_impl_k_mutex_lock(mutex, timeout);
   1d190:	f04f 32ff 	mov.w	r2, #4294967295
   1d194:	f04f 33ff 	mov.w	r3, #4294967295
   1d198:	4638      	mov	r0, r7
   1d19a:	f7f3 ff39 	bl	11010 <z_impl_k_mutex_lock>
	if (ctx->state == DNS_RESOLVE_CONTEXT_DEACTIVATING) {
   1d19e:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
   1d1a2:	2b01      	cmp	r3, #1
   1d1a4:	d014      	beq.n	1d1d0 <dns_resolve_reconfigure+0x50>
	if (ctx->state == DNS_RESOLVE_CONTEXT_ACTIVE) {
   1d1a6:	b93b      	cbnz	r3, 1d1b8 <dns_resolve_reconfigure+0x38>
		dns_resolve_cancel_all(ctx);
   1d1a8:	4620      	mov	r0, r4
   1d1aa:	f7ff ffba 	bl	1d122 <dns_resolve_cancel_all>
		err = dns_resolve_close_locked(ctx);
   1d1ae:	4620      	mov	r0, r4
   1d1b0:	f7ec ffde 	bl	a170 <dns_resolve_close_locked>
		if (err) {
   1d1b4:	4606      	mov	r6, r0
   1d1b6:	b928      	cbnz	r0, 1d1c4 <dns_resolve_reconfigure+0x44>
	err = dns_resolve_init_locked(ctx, servers, servers_sa);
   1d1b8:	462a      	mov	r2, r5
   1d1ba:	4641      	mov	r1, r8
   1d1bc:	4620      	mov	r0, r4
   1d1be:	f7ec ff33 	bl	a028 <dns_resolve_init_locked>
   1d1c2:	4606      	mov	r6, r0
	return z_impl_k_mutex_unlock(mutex);
   1d1c4:	4638      	mov	r0, r7
   1d1c6:	f7f3 ffa7 	bl	11118 <z_impl_k_mutex_unlock>
}
   1d1ca:	4630      	mov	r0, r6
   1d1cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err = -EBUSY;
   1d1d0:	f06f 060f 	mvn.w	r6, #15
   1d1d4:	e7f6      	b.n	1d1c4 <dns_resolve_reconfigure+0x44>
		return -ENOENT;
   1d1d6:	f06f 0601 	mvn.w	r6, #1
   1d1da:	e7f6      	b.n	1d1ca <dns_resolve_reconfigure+0x4a>

0001d1dc <dns_init_resolver>:

void dns_init_resolver(void)
{
   1d1dc:	b508      	push	{r3, lr}
	}
#else
	/* We must always call init even if there are no servers configured so
	 * that DNS mutex gets initialized properly.
	 */
	(void)dns_resolve_init(dns_resolve_get_default(), NULL, NULL);
   1d1de:	f7ec ffff 	bl	a1e0 <dns_resolve_get_default>
   1d1e2:	2200      	movs	r2, #0
   1d1e4:	4611      	mov	r1, r2
   1d1e6:	f7ff ffb2 	bl	1d14e <dns_resolve_init>
#endif
}
   1d1ea:	bd08      	pop	{r3, pc}

0001d1ec <z_impl_sys_rand_get>:

#if defined(CONFIG_ENTROPY_DEVICE_RANDOM_GENERATOR)
void z_impl_sys_rand_get(void *dst, size_t outlen)
{
   1d1ec:	b508      	push	{r3, lr}
	rand_get(dst, outlen, false);
   1d1ee:	2200      	movs	r2, #0
   1d1f0:	f7ec fffa 	bl	a1e8 <rand_get>
}
   1d1f4:	bd08      	pop	{r3, pc}

0001d1f6 <nrf_clock_is_running>:
    switch (domain)
   1d1f6:	b119      	cbz	r1, 1d200 <nrf_clock_is_running+0xa>
   1d1f8:	2901      	cmp	r1, #1
   1d1fa:	d00e      	beq.n	1d21a <nrf_clock_is_running+0x24>
   1d1fc:	2000      	movs	r0, #0
   1d1fe:	4770      	bx	lr
            if (p_clk_src != NULL)
   1d200:	b122      	cbz	r2, 1d20c <nrf_clock_is_running+0x16>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1d202:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   1d206:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   1d20a:	6013      	str	r3, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1d20c:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
   1d210:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1d214:	d10e      	bne.n	1d234 <nrf_clock_is_running+0x3e>
    return false;
   1d216:	2000      	movs	r0, #0
   1d218:	4770      	bx	lr
            if (p_clk_src != NULL)
   1d21a:	b122      	cbz	r2, 1d226 <nrf_clock_is_running+0x30>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1d21c:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
   1d220:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   1d224:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1d226:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
   1d22a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1d22e:	d103      	bne.n	1d238 <nrf_clock_is_running+0x42>
    return false;
   1d230:	2000      	movs	r0, #0
   1d232:	4770      	bx	lr
                return true;
   1d234:	2001      	movs	r0, #1
   1d236:	4770      	bx	lr
                return true;
   1d238:	2001      	movs	r0, #1
}
   1d23a:	4770      	bx	lr

0001d23c <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
   1d23c:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   1d23e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   1d242:	0089      	lsls	r1, r1, #2
   1d244:	3138      	adds	r1, #56	; 0x38
}
   1d246:	4408      	add	r0, r1
   1d248:	4770      	bx	lr

0001d24a <get_sub_config>:
	const struct nrf_clock_control_config *config =
   1d24a:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
   1d24c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
   1d250:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   1d254:	4770      	bx	lr

0001d256 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
   1d256:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
   1d258:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
   1d25c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   1d260:	4770      	bx	lr

0001d262 <get_status>:
{
   1d262:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1d264:	b2c9      	uxtb	r1, r1
   1d266:	f7ff ffe9 	bl	1d23c <get_sub_data>
   1d26a:	6880      	ldr	r0, [r0, #8]
}
   1d26c:	f000 0007 	and.w	r0, r0, #7
   1d270:	bd08      	pop	{r3, pc}

0001d272 <set_off_state>:
	__asm__ volatile(
   1d272:	f04f 0320 	mov.w	r3, #32
   1d276:	f3ef 8211 	mrs	r2, BASEPRI
   1d27a:	f383 8812 	msr	BASEPRI_MAX, r3
   1d27e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1d282:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1d284:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   1d288:	d001      	beq.n	1d28e <set_off_state+0x1c>
   1d28a:	428b      	cmp	r3, r1
   1d28c:	d107      	bne.n	1d29e <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1d28e:	2301      	movs	r3, #1
   1d290:	6003      	str	r3, [r0, #0]
	int err = 0;
   1d292:	2000      	movs	r0, #0
	__asm__ volatile(
   1d294:	f382 8811 	msr	BASEPRI, r2
   1d298:	f3bf 8f6f 	isb	sy
}
   1d29c:	4770      	bx	lr
		err = -EPERM;
   1d29e:	f04f 30ff 	mov.w	r0, #4294967295
   1d2a2:	e7f7      	b.n	1d294 <set_off_state+0x22>

0001d2a4 <set_starting_state>:
	__asm__ volatile(
   1d2a4:	f04f 0320 	mov.w	r3, #32
   1d2a8:	f3ef 8211 	mrs	r2, BASEPRI
   1d2ac:	f383 8812 	msr	BASEPRI_MAX, r3
   1d2b0:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1d2b4:	6803      	ldr	r3, [r0, #0]
   1d2b6:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1d2ba:	f003 0307 	and.w	r3, r3, #7
   1d2be:	2b01      	cmp	r3, #1
   1d2c0:	d008      	beq.n	1d2d4 <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
   1d2c2:	458c      	cmp	ip, r1
   1d2c4:	d009      	beq.n	1d2da <set_starting_state+0x36>
		err = -EPERM;
   1d2c6:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
   1d2ca:	f382 8811 	msr	BASEPRI, r2
   1d2ce:	f3bf 8f6f 	isb	sy
}
   1d2d2:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1d2d4:	6001      	str	r1, [r0, #0]
	int err = 0;
   1d2d6:	2000      	movs	r0, #0
   1d2d8:	e7f7      	b.n	1d2ca <set_starting_state+0x26>
		err = -EALREADY;
   1d2da:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1d2de:	e7f4      	b.n	1d2ca <set_starting_state+0x26>

0001d2e0 <set_on_state>:
	__asm__ volatile(
   1d2e0:	f04f 0320 	mov.w	r3, #32
   1d2e4:	f3ef 8211 	mrs	r2, BASEPRI
   1d2e8:	f383 8812 	msr	BASEPRI_MAX, r3
   1d2ec:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1d2f0:	6803      	ldr	r3, [r0, #0]
   1d2f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1d2f6:	f043 0302 	orr.w	r3, r3, #2
   1d2fa:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1d2fc:	f382 8811 	msr	BASEPRI, r2
   1d300:	f3bf 8f6f 	isb	sy
}
   1d304:	4770      	bx	lr

0001d306 <clkstarted_handle>:
{
   1d306:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d308:	4606      	mov	r6, r0
   1d30a:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   1d30c:	f7ff ff96 	bl	1d23c <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
   1d310:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
   1d312:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
   1d314:	2300      	movs	r3, #0
   1d316:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
   1d31a:	f7ff ffe1 	bl	1d2e0 <set_on_state>
	if (callback) {
   1d31e:	b11d      	cbz	r5, 1d328 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1d320:	463a      	mov	r2, r7
   1d322:	4621      	mov	r1, r4
   1d324:	4630      	mov	r0, r6
   1d326:	47a8      	blx	r5
}
   1d328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001d32a <stop>:
{
   1d32a:	b570      	push	{r4, r5, r6, lr}
   1d32c:	4606      	mov	r6, r0
   1d32e:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   1d330:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   1d332:	4621      	mov	r1, r4
   1d334:	f7ff ff82 	bl	1d23c <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
   1d338:	4629      	mov	r1, r5
   1d33a:	3008      	adds	r0, #8
   1d33c:	f7ff ff99 	bl	1d272 <set_off_state>
	if (err < 0) {
   1d340:	2800      	cmp	r0, #0
   1d342:	db06      	blt.n	1d352 <stop+0x28>
	get_sub_config(dev, type)->stop();
   1d344:	4621      	mov	r1, r4
   1d346:	4630      	mov	r0, r6
   1d348:	f7ff ff7f 	bl	1d24a <get_sub_config>
   1d34c:	6843      	ldr	r3, [r0, #4]
   1d34e:	4798      	blx	r3
	return 0;
   1d350:	2000      	movs	r0, #0
}
   1d352:	bd70      	pop	{r4, r5, r6, pc}

0001d354 <api_stop>:
{
   1d354:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
   1d356:	2280      	movs	r2, #128	; 0x80
   1d358:	f7ff ffe7 	bl	1d32a <stop>
}
   1d35c:	bd08      	pop	{r3, pc}

0001d35e <async_start>:
{
   1d35e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d362:	4606      	mov	r6, r0
   1d364:	4690      	mov	r8, r2
   1d366:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   1d368:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   1d36a:	4629      	mov	r1, r5
   1d36c:	f7ff ff66 	bl	1d23c <get_sub_data>
   1d370:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
   1d372:	9906      	ldr	r1, [sp, #24]
   1d374:	3008      	adds	r0, #8
   1d376:	f7ff ff95 	bl	1d2a4 <set_starting_state>
	if (err < 0) {
   1d37a:	2800      	cmp	r0, #0
   1d37c:	db09      	blt.n	1d392 <async_start+0x34>
	subdata->cb = cb;
   1d37e:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
   1d382:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
   1d384:	4629      	mov	r1, r5
   1d386:	4630      	mov	r0, r6
   1d388:	f7ff ff5f 	bl	1d24a <get_sub_config>
   1d38c:	6803      	ldr	r3, [r0, #0]
   1d38e:	4798      	blx	r3
	return 0;
   1d390:	2000      	movs	r0, #0
}
   1d392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001d396 <api_start>:
{
   1d396:	b510      	push	{r4, lr}
   1d398:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
   1d39a:	2480      	movs	r4, #128	; 0x80
   1d39c:	9400      	str	r4, [sp, #0]
   1d39e:	f7ff ffde 	bl	1d35e <async_start>
}
   1d3a2:	b002      	add	sp, #8
   1d3a4:	bd10      	pop	{r4, pc}

0001d3a6 <onoff_started_callback>:
{
   1d3a6:	b510      	push	{r4, lr}
   1d3a8:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
   1d3aa:	b2c9      	uxtb	r1, r1
   1d3ac:	f7ff ff53 	bl	1d256 <get_onoff_manager>
	notify(mgr, 0);
   1d3b0:	2100      	movs	r1, #0
   1d3b2:	47a0      	blx	r4
}
   1d3b4:	bd10      	pop	{r4, pc}

0001d3b6 <hfclk_start>:
{
   1d3b6:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1d3b8:	2001      	movs	r0, #1
   1d3ba:	f001 fc13 	bl	1ebe4 <nrfx_clock_start>
}
   1d3be:	bd08      	pop	{r3, pc}

0001d3c0 <lfclk_start>:
{
   1d3c0:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1d3c2:	2000      	movs	r0, #0
   1d3c4:	f001 fc0e 	bl	1ebe4 <nrfx_clock_start>
}
   1d3c8:	bd08      	pop	{r3, pc}

0001d3ca <hfclk_stop>:
{
   1d3ca:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1d3cc:	2001      	movs	r0, #1
   1d3ce:	f001 fc59 	bl	1ec84 <nrfx_clock_stop>
}
   1d3d2:	bd08      	pop	{r3, pc}

0001d3d4 <lfclk_stop>:
{
   1d3d4:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1d3d6:	2000      	movs	r0, #0
   1d3d8:	f001 fc54 	bl	1ec84 <nrfx_clock_stop>
}
   1d3dc:	bd08      	pop	{r3, pc}

0001d3de <k_msleep>:
{
   1d3de:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   1d3e0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   1d3e4:	17c1      	asrs	r1, r0, #31
			return ((t * to_hz + off) / from_hz);
   1d3e6:	03c9      	lsls	r1, r1, #15
   1d3e8:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   1d3ec:	03c0      	lsls	r0, r0, #15
   1d3ee:	f240 33e7 	movw	r3, #999	; 0x3e7
   1d3f2:	18c0      	adds	r0, r0, r3
   1d3f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1d3f8:	f04f 0300 	mov.w	r3, #0
   1d3fc:	f141 0100 	adc.w	r1, r1, #0
   1d400:	f7e3 fa9c 	bl	93c <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   1d404:	f7f4 fc48 	bl	11c98 <z_impl_k_sleep>
}
   1d408:	bd08      	pop	{r3, pc}

0001d40a <blocking_start_callback>:
{
   1d40a:	b508      	push	{r3, lr}
   1d40c:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1d40e:	f7f3 feff 	bl	11210 <z_impl_k_sem_give>
}
   1d412:	bd08      	pop	{r3, pc}

0001d414 <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
   1d414:	460b      	mov	r3, r1
   1d416:	b139      	cbz	r1, 1d428 <sys_slist_remove+0x14>
	return node->next;
   1d418:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
   1d41a:	6019      	str	r1, [r3, #0]
	return list->tail;
   1d41c:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   1d41e:	428a      	cmp	r2, r1
   1d420:	d009      	beq.n	1d436 <sys_slist_remove+0x22>
	parent->next = child;
   1d422:	2300      	movs	r3, #0
   1d424:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1d426:	4770      	bx	lr
	return node->next;
   1d428:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   1d42a:	6003      	str	r3, [r0, #0]
	return list->tail;
   1d42c:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   1d42e:	428a      	cmp	r2, r1
   1d430:	d1f7      	bne.n	1d422 <sys_slist_remove+0xe>
	list->tail = node;
   1d432:	6043      	str	r3, [r0, #4]
}
   1d434:	e7f5      	b.n	1d422 <sys_slist_remove+0xe>
	list->tail = node;
   1d436:	6043      	str	r3, [r0, #4]
}
   1d438:	e7f3      	b.n	1d422 <sys_slist_remove+0xe>

0001d43a <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d43a:	b508      	push	{r3, lr}
   1d43c:	460a      	mov	r2, r1
	return list->head;
   1d43e:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d440:	2100      	movs	r1, #0
   1d442:	e001      	b.n	1d448 <sys_slist_find_and_remove+0xe>
   1d444:	4619      	mov	r1, r3
   1d446:	681b      	ldr	r3, [r3, #0]
   1d448:	b12b      	cbz	r3, 1d456 <sys_slist_find_and_remove+0x1c>
   1d44a:	4293      	cmp	r3, r2
   1d44c:	d1fa      	bne.n	1d444 <sys_slist_find_and_remove+0xa>
   1d44e:	f7ff ffe1 	bl	1d414 <sys_slist_remove>
   1d452:	2001      	movs	r0, #1
   1d454:	e000      	b.n	1d458 <sys_slist_find_and_remove+0x1e>
   1d456:	2000      	movs	r0, #0
   1d458:	bd08      	pop	{r3, pc}

0001d45a <gpio_manage_callback>:
 * @return 0 on success, negative errno otherwise.
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
   1d45a:	b570      	push	{r4, r5, r6, lr}
   1d45c:	4604      	mov	r4, r0
   1d45e:	460d      	mov	r5, r1
   1d460:	4616      	mov	r6, r2
	return list->head;
   1d462:	6803      	ldr	r3, [r0, #0]
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   1d464:	b133      	cbz	r3, 1d474 <gpio_manage_callback+0x1a>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
   1d466:	f7ff ffe8 	bl	1d43a <sys_slist_find_and_remove>
   1d46a:	b970      	cbnz	r0, 1d48a <gpio_manage_callback+0x30>
			if (!set) {
   1d46c:	b91e      	cbnz	r6, 1d476 <gpio_manage_callback+0x1c>
				return -EINVAL;
   1d46e:	f06f 0015 	mvn.w	r0, #21
   1d472:	e006      	b.n	1d482 <gpio_manage_callback+0x28>
			}
		}
	} else if (!set) {
   1d474:	b132      	cbz	r2, 1d484 <gpio_manage_callback+0x2a>
   1d476:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
   1d478:	602b      	str	r3, [r5, #0]
	list->head = node;
   1d47a:	6025      	str	r5, [r4, #0]
	return list->tail;
   1d47c:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   1d47e:	b143      	cbz	r3, 1d492 <gpio_manage_callback+0x38>

	if (set) {
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1d480:	2000      	movs	r0, #0
}
   1d482:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   1d484:	f06f 0015 	mvn.w	r0, #21
   1d488:	e7fb      	b.n	1d482 <gpio_manage_callback+0x28>
	if (set) {
   1d48a:	2e00      	cmp	r6, #0
   1d48c:	d1f3      	bne.n	1d476 <gpio_manage_callback+0x1c>
	return 0;
   1d48e:	2000      	movs	r0, #0
   1d490:	e7f7      	b.n	1d482 <gpio_manage_callback+0x28>
	list->tail = node;
   1d492:	6065      	str	r5, [r4, #4]
   1d494:	2000      	movs	r0, #0
}
   1d496:	e7f4      	b.n	1d482 <gpio_manage_callback+0x28>

0001d498 <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
   1d498:	b570      	push	{r4, r5, r6, lr}
   1d49a:	460e      	mov	r6, r1
   1d49c:	4615      	mov	r5, r2
	return list->head;
   1d49e:	6801      	ldr	r1, [r0, #0]
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1d4a0:	b121      	cbz	r1, 1d4ac <gpio_fire_callbacks+0x14>
	return node->next;
   1d4a2:	680c      	ldr	r4, [r1, #0]
   1d4a4:	b13c      	cbz	r4, 1d4b6 <gpio_fire_callbacks+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1d4a6:	b931      	cbnz	r1, 1d4b6 <gpio_fire_callbacks+0x1e>
   1d4a8:	460c      	mov	r4, r1
   1d4aa:	e004      	b.n	1d4b6 <gpio_fire_callbacks+0x1e>
   1d4ac:	460c      	mov	r4, r1
   1d4ae:	e002      	b.n	1d4b6 <gpio_fire_callbacks+0x1e>
   1d4b0:	4623      	mov	r3, r4
   1d4b2:	4621      	mov	r1, r4
   1d4b4:	461c      	mov	r4, r3
   1d4b6:	b171      	cbz	r1, 1d4d6 <gpio_fire_callbacks+0x3e>
		if (cb->pin_mask & pins) {
   1d4b8:	688a      	ldr	r2, [r1, #8]
   1d4ba:	402a      	ands	r2, r5
   1d4bc:	d002      	beq.n	1d4c4 <gpio_fire_callbacks+0x2c>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   1d4be:	684b      	ldr	r3, [r1, #4]
   1d4c0:	4630      	mov	r0, r6
   1d4c2:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1d4c4:	2c00      	cmp	r4, #0
   1d4c6:	d0f3      	beq.n	1d4b0 <gpio_fire_callbacks+0x18>
	return node->next;
   1d4c8:	6823      	ldr	r3, [r4, #0]
   1d4ca:	2b00      	cmp	r3, #0
   1d4cc:	d0f1      	beq.n	1d4b2 <gpio_fire_callbacks+0x1a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1d4ce:	2c00      	cmp	r4, #0
   1d4d0:	d1ef      	bne.n	1d4b2 <gpio_fire_callbacks+0x1a>
   1d4d2:	4623      	mov	r3, r4
   1d4d4:	e7ed      	b.n	1d4b2 <gpio_fire_callbacks+0x1a>
		}
	}
}
   1d4d6:	bd70      	pop	{r4, r5, r6, pc}

0001d4d8 <get_drive>:
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1d4d8:	f020 00f9 	bic.w	r0, r0, #249	; 0xf9
   1d4dc:	0580      	lsls	r0, r0, #22
   1d4de:	0d80      	lsrs	r0, r0, #22
   1d4e0:	f5b0 7f83 	cmp.w	r0, #262	; 0x106
   1d4e4:	d033      	beq.n	1d54e <get_drive+0x76>
   1d4e6:	d816      	bhi.n	1d516 <get_drive+0x3e>
   1d4e8:	2806      	cmp	r0, #6
   1d4ea:	d02c      	beq.n	1d546 <get_drive+0x6e>
   1d4ec:	d906      	bls.n	1d4fc <get_drive+0x24>
   1d4ee:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   1d4f2:	d10d      	bne.n	1d510 <get_drive+0x38>
		*drive = NRF_GPIO_PIN_H0S1;
   1d4f4:	2301      	movs	r3, #1
   1d4f6:	700b      	strb	r3, [r1, #0]
	return 0;
   1d4f8:	2000      	movs	r0, #0
		break;
   1d4fa:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1d4fc:	b300      	cbz	r0, 1d540 <get_drive+0x68>
   1d4fe:	2802      	cmp	r0, #2
   1d500:	d103      	bne.n	1d50a <get_drive+0x32>
		*drive = NRF_GPIO_PIN_D0S1;
   1d502:	2304      	movs	r3, #4
   1d504:	700b      	strb	r3, [r1, #0]
	return 0;
   1d506:	2000      	movs	r0, #0
		break;
   1d508:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1d50a:	f06f 0015 	mvn.w	r0, #21
   1d50e:	4770      	bx	lr
   1d510:	f06f 0015 	mvn.w	r0, #21
   1d514:	4770      	bx	lr
   1d516:	f240 2302 	movw	r3, #514	; 0x202
   1d51a:	4298      	cmp	r0, r3
   1d51c:	d01b      	beq.n	1d556 <get_drive+0x7e>
   1d51e:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
   1d522:	d103      	bne.n	1d52c <get_drive+0x54>
		*drive = NRF_GPIO_PIN_H0H1;
   1d524:	2303      	movs	r3, #3
   1d526:	700b      	strb	r3, [r1, #0]
	return 0;
   1d528:	2000      	movs	r0, #0
		break;
   1d52a:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1d52c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   1d530:	d103      	bne.n	1d53a <get_drive+0x62>
		*drive = NRF_GPIO_PIN_S0H1;
   1d532:	2302      	movs	r3, #2
   1d534:	700b      	strb	r3, [r1, #0]
	return 0;
   1d536:	2000      	movs	r0, #0
		break;
   1d538:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1d53a:	f06f 0015 	mvn.w	r0, #21
   1d53e:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
   1d540:	2000      	movs	r0, #0
   1d542:	7008      	strb	r0, [r1, #0]
		break;
   1d544:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
   1d546:	2306      	movs	r3, #6
   1d548:	700b      	strb	r3, [r1, #0]
	return 0;
   1d54a:	2000      	movs	r0, #0
		break;
   1d54c:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
   1d54e:	2307      	movs	r3, #7
   1d550:	700b      	strb	r3, [r1, #0]
	return 0;
   1d552:	2000      	movs	r0, #0
		break;
   1d554:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_D0H1;
   1d556:	2305      	movs	r3, #5
   1d558:	700b      	strb	r3, [r1, #0]
	return 0;
   1d55a:	2000      	movs	r0, #0
}
   1d55c:	4770      	bx	lr

0001d55e <get_pull>:
	if (flags & GPIO_PULL_UP) {
   1d55e:	f010 0f10 	tst.w	r0, #16
   1d562:	d104      	bne.n	1d56e <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
   1d564:	f010 0f20 	tst.w	r0, #32
   1d568:	d103      	bne.n	1d572 <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
   1d56a:	2000      	movs	r0, #0
   1d56c:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
   1d56e:	2003      	movs	r0, #3
   1d570:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
   1d572:	2001      	movs	r0, #1
}
   1d574:	4770      	bx	lr

0001d576 <gpio_nrfx_port_get_raw>:
	return port->config;
   1d576:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d578:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1d57a:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   1d57e:	600b      	str	r3, [r1, #0]
}
   1d580:	2000      	movs	r0, #0
   1d582:	4770      	bx	lr

0001d584 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
   1d584:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d586:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   1d588:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   1d58c:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   1d590:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   1d594:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   1d598:	2000      	movs	r0, #0
   1d59a:	4770      	bx	lr

0001d59c <gpio_nrfx_port_set_bits_raw>:
	return port->config;
   1d59c:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d59e:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   1d5a0:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
   1d5a4:	2000      	movs	r0, #0
   1d5a6:	4770      	bx	lr

0001d5a8 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
   1d5a8:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d5aa:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   1d5ac:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   1d5b0:	2000      	movs	r0, #0
   1d5b2:	4770      	bx	lr

0001d5b4 <gpio_nrfx_port_toggle_bits>:
	return port->config;
   1d5b4:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d5b6:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1d5b8:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
   1d5bc:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   1d5c0:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   1d5c2:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   1d5c6:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   1d5ca:	2000      	movs	r0, #0
   1d5cc:	4770      	bx	lr

0001d5ce <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
   1d5ce:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
   1d5d2:	d007      	beq.n	1d5e4 <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1d5d4:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
   1d5d8:	d00d      	beq.n	1d5f6 <get_trigger+0x28>
   1d5da:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
   1d5de:	d008      	beq.n	1d5f2 <get_trigger+0x24>
   1d5e0:	2001      	movs	r0, #1
}
   1d5e2:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1d5e4:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
   1d5e8:	d001      	beq.n	1d5ee <get_trigger+0x20>
   1d5ea:	2005      	movs	r0, #5
   1d5ec:	4770      	bx	lr
   1d5ee:	2004      	movs	r0, #4
   1d5f0:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1d5f2:	2002      	movs	r0, #2
   1d5f4:	4770      	bx	lr
   1d5f6:	2003      	movs	r0, #3
   1d5f8:	4770      	bx	lr

0001d5fa <gpio_nrfx_manage_callback>:
{
   1d5fa:	b508      	push	{r3, lr}
	return port->data;
   1d5fc:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1d5fe:	3004      	adds	r0, #4
   1d600:	f7ff ff2b 	bl	1d45a <gpio_manage_callback>
}
   1d604:	bd08      	pop	{r3, pc}

0001d606 <nrfx_gpio_handler>:
{
   1d606:	b510      	push	{r4, lr}
    *p_pin = pin_number & 0x1F;
   1d608:	f000 041f 	and.w	r4, r0, #31
	const struct device *port = get_dev(port_id);
   1d60c:	0940      	lsrs	r0, r0, #5
   1d60e:	f7ec ffd9 	bl	a5c4 <get_dev>
	if (port == NULL) {
   1d612:	b130      	cbz	r0, 1d622 <nrfx_gpio_handler+0x1c>
   1d614:	4601      	mov	r1, r0
	return port->data;
   1d616:	6900      	ldr	r0, [r0, #16]
	gpio_fire_callbacks(list, port, BIT(pin));
   1d618:	2201      	movs	r2, #1
   1d61a:	40a2      	lsls	r2, r4
   1d61c:	3004      	adds	r0, #4
   1d61e:	f7ff ff3b 	bl	1d498 <gpio_fire_callbacks>
}
   1d622:	bd10      	pop	{r4, pc}

0001d624 <uart_irq_callback_user_data_set>:
{
   1d624:	b508      	push	{r3, lr}
	const struct uart_driver_api *api =
   1d626:	6883      	ldr	r3, [r0, #8]
	if ((api != NULL) && (api->irq_callback_set != NULL)) {
   1d628:	b113      	cbz	r3, 1d630 <uart_irq_callback_user_data_set+0xc>
   1d62a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1d62c:	b103      	cbz	r3, 1d630 <uart_irq_callback_user_data_set+0xc>
		api->irq_callback_set(dev, cb, user_data);
   1d62e:	4798      	blx	r3
}
   1d630:	bd08      	pop	{r3, pc}

0001d632 <uart_irq_tx_disable>:

extern void z_impl_uart_irq_tx_disable(const struct device * dev);

__pinned_func
static inline void uart_irq_tx_disable(const struct device * dev)
{
   1d632:	b508      	push	{r3, lr}
	const struct uart_driver_api *api =
   1d634:	6883      	ldr	r3, [r0, #8]
	if (api->irq_tx_disable != NULL) {
   1d636:	6a1b      	ldr	r3, [r3, #32]
   1d638:	b103      	cbz	r3, 1d63c <uart_irq_tx_disable+0xa>
		api->irq_tx_disable(dev);
   1d63a:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_tx_disable(dev);
}
   1d63c:	bd08      	pop	{r3, pc}

0001d63e <uart_irq_rx_enable>:

extern void z_impl_uart_irq_rx_enable(const struct device * dev);

__pinned_func
static inline void uart_irq_rx_enable(const struct device * dev)
{
   1d63e:	b508      	push	{r3, lr}
	const struct uart_driver_api *api =
   1d640:	6883      	ldr	r3, [r0, #8]
	if (api->irq_rx_enable != NULL) {
   1d642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1d644:	b103      	cbz	r3, 1d648 <uart_irq_rx_enable+0xa>
		api->irq_rx_enable(dev);
   1d646:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_enable(dev);
}
   1d648:	bd08      	pop	{r3, pc}

0001d64a <uart_irq_rx_disable>:

extern void z_impl_uart_irq_rx_disable(const struct device * dev);

__pinned_func
static inline void uart_irq_rx_disable(const struct device * dev)
{
   1d64a:	b508      	push	{r3, lr}
	const struct uart_driver_api *api =
   1d64c:	6883      	ldr	r3, [r0, #8]
	if (api->irq_rx_disable != NULL) {
   1d64e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d650:	b103      	cbz	r3, 1d654 <uart_irq_rx_disable+0xa>
		api->irq_rx_disable(dev);
   1d652:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_disable(dev);
}
   1d654:	bd08      	pop	{r3, pc}

0001d656 <uart_irq_update>:

extern int z_impl_uart_irq_update(const struct device * dev);

__pinned_func
static inline int uart_irq_update(const struct device * dev)
{
   1d656:	b508      	push	{r3, lr}
	const struct uart_driver_api *api =
   1d658:	6883      	ldr	r3, [r0, #8]
	if (api->irq_update == NULL) {
   1d65a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d65c:	b10b      	cbz	r3, 1d662 <uart_irq_update+0xc>
	return api->irq_update(dev);
   1d65e:	4798      	blx	r3
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_UART_IRQ_UPDATE);
	}
#endif
	compiler_barrier();
	return z_impl_uart_irq_update(dev);
}
   1d660:	bd08      	pop	{r3, pc}
		return -ENOSYS;
   1d662:	f06f 0057 	mvn.w	r0, #87	; 0x57
	return z_impl_uart_irq_update(dev);
   1d666:	e7fb      	b.n	1d660 <uart_irq_update+0xa>

0001d668 <mdm_receiver_flush>:
{
   1d668:	b510      	push	{r4, lr}
   1d66a:	b082      	sub	sp, #8
   1d66c:	4604      	mov	r4, r0
	while (uart_fifo_read(ctx->uart_dev, &c, 1) > 0) {
   1d66e:	6820      	ldr	r0, [r4, #0]
	const struct uart_driver_api *api =
   1d670:	6883      	ldr	r3, [r0, #8]
	if (api->fifo_read == NULL) {
   1d672:	699b      	ldr	r3, [r3, #24]
   1d674:	b12b      	cbz	r3, 1d682 <mdm_receiver_flush+0x1a>
	return api->fifo_read(dev, rx_data, size);
   1d676:	2201      	movs	r2, #1
   1d678:	f10d 0107 	add.w	r1, sp, #7
   1d67c:	4798      	blx	r3
   1d67e:	2800      	cmp	r0, #0
   1d680:	dcf5      	bgt.n	1d66e <mdm_receiver_flush+0x6>
}
   1d682:	b002      	add	sp, #8
   1d684:	bd10      	pop	{r4, pc}

0001d686 <mdm_receiver_recv>:
}

int mdm_receiver_recv(struct mdm_receiver_context *ctx,
		      uint8_t *buf, size_t size, size_t *bytes_read)
{
	if (!ctx) {
   1d686:	b158      	cbz	r0, 1d6a0 <mdm_receiver_recv+0x1a>
{
   1d688:	b510      	push	{r4, lr}
   1d68a:	461c      	mov	r4, r3
		return -EINVAL;
	}

	if (size == 0) {
   1d68c:	b912      	cbnz	r2, 1d694 <mdm_receiver_recv+0xe>
		*bytes_read = 0;
   1d68e:	2000      	movs	r0, #0
   1d690:	6020      	str	r0, [r4, #0]
		return 0;
	}

	*bytes_read = ring_buf_get(&ctx->rx_rb, buf, size);
	return 0;
}
   1d692:	bd10      	pop	{r4, pc}
	*bytes_read = ring_buf_get(&ctx->rx_rb, buf, size);
   1d694:	3004      	adds	r0, #4
   1d696:	f7f9 fe9b 	bl	173d0 <ring_buf_get>
   1d69a:	6020      	str	r0, [r4, #0]
	return 0;
   1d69c:	2000      	movs	r0, #0
   1d69e:	e7f8      	b.n	1d692 <mdm_receiver_recv+0xc>
		return -EINVAL;
   1d6a0:	f06f 0015 	mvn.w	r0, #21
}
   1d6a4:	4770      	bx	lr

0001d6a6 <mdm_receiver_send>:

int mdm_receiver_send(struct mdm_receiver_context *ctx,
		      const uint8_t *buf, size_t size)
{
	if (!ctx) {
   1d6a6:	b170      	cbz	r0, 1d6c6 <mdm_receiver_send+0x20>
{
   1d6a8:	b570      	push	{r4, r5, r6, lr}
   1d6aa:	460d      	mov	r5, r1
   1d6ac:	4614      	mov	r4, r2
   1d6ae:	4606      	mov	r6, r0
		return -EINVAL;
	}

	if (size == 0) {
   1d6b0:	b162      	cbz	r2, 1d6cc <mdm_receiver_send+0x26>
		return 0;
	}

	do {
		uart_poll_out(ctx->uart_dev, *buf++);
   1d6b2:	6830      	ldr	r0, [r6, #0]
   1d6b4:	7829      	ldrb	r1, [r5, #0]
   1d6b6:	3501      	adds	r5, #1
	const struct uart_driver_api *api =
   1d6b8:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
   1d6ba:	685b      	ldr	r3, [r3, #4]
   1d6bc:	4798      	blx	r3
	} while (--size);
   1d6be:	3c01      	subs	r4, #1
   1d6c0:	d1f7      	bne.n	1d6b2 <mdm_receiver_send+0xc>

	return 0;
   1d6c2:	2000      	movs	r0, #0
}
   1d6c4:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   1d6c6:	f06f 0015 	mvn.w	r0, #21
}
   1d6ca:	4770      	bx	lr
		return 0;
   1d6cc:	2000      	movs	r0, #0
   1d6ce:	e7f9      	b.n	1d6c4 <mdm_receiver_send+0x1e>

0001d6d0 <mdm_receiver_register>:
			  const struct device *uart_dev,
			  uint8_t *buf, size_t size)
{
	int ret;

	if ((!ctx) || (size == 0)) {
   1d6d0:	b310      	cbz	r0, 1d718 <mdm_receiver_register+0x48>
{
   1d6d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d6d4:	460e      	mov	r6, r1
   1d6d6:	4617      	mov	r7, r2
   1d6d8:	461d      	mov	r5, r3
   1d6da:	4604      	mov	r4, r0
	if ((!ctx) || (size == 0)) {
   1d6dc:	b1fb      	cbz	r3, 1d71e <mdm_receiver_register+0x4e>
   1d6de:	4608      	mov	r0, r1
   1d6e0:	f001 fb55 	bl	1ed8e <z_device_is_ready>
		return -EINVAL;
	}

	if (!device_is_ready(uart_dev)) {
   1d6e4:	b1f0      	cbz	r0, 1d724 <mdm_receiver_register+0x54>
		LOG_ERR("Device is not ready: %s",
			uart_dev ? uart_dev->name : "<null>");
		return -ENODEV;
	}

	ctx->uart_dev = uart_dev;
   1d6e6:	6026      	str	r6, [r4, #0]
	buf->size = size;
   1d6e8:	6225      	str	r5, [r4, #32]
	buf->buffer = data;
   1d6ea:	6067      	str	r7, [r4, #4]
	buf->put_head = buf->put_tail = buf->put_base = value;
   1d6ec:	2100      	movs	r1, #0
   1d6ee:	6121      	str	r1, [r4, #16]
   1d6f0:	60e1      	str	r1, [r4, #12]
   1d6f2:	60a1      	str	r1, [r4, #8]
	buf->get_head = buf->get_tail = buf->get_base = value;
   1d6f4:	61e1      	str	r1, [r4, #28]
   1d6f6:	61a1      	str	r1, [r4, #24]
   1d6f8:	6161      	str	r1, [r4, #20]
	ring_buf_init(&ctx->rx_rb, size, buf);
	k_sem_init(&ctx->rx_sem, 0, 1);
   1d6fa:	f104 0024 	add.w	r0, r4, #36	; 0x24
	return z_impl_k_sem_init(sem, initial_count, limit);
   1d6fe:	2201      	movs	r2, #1
   1d700:	f001 fd7a 	bl	1f1f8 <z_impl_k_sem_init>

	ret = mdm_receiver_get(ctx);
   1d704:	4620      	mov	r0, r4
   1d706:	f7ed f887 	bl	a818 <mdm_receiver_get>
	if (ret < 0) {
   1d70a:	2800      	cmp	r0, #0
   1d70c:	db03      	blt.n	1d716 <mdm_receiver_register+0x46>
		return ret;
	}

	mdm_receiver_setup(ctx);
   1d70e:	4620      	mov	r0, r4
   1d710:	f7ed f896 	bl	a840 <mdm_receiver_setup>
	return 0;
   1d714:	2000      	movs	r0, #0
}
   1d716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   1d718:	f06f 0015 	mvn.w	r0, #21
}
   1d71c:	4770      	bx	lr
		return -EINVAL;
   1d71e:	f06f 0015 	mvn.w	r0, #21
   1d722:	e7f8      	b.n	1d716 <mdm_receiver_register+0x46>
		return -ENODEV;
   1d724:	f06f 0012 	mvn.w	r0, #18
   1d728:	e7f5      	b.n	1d716 <mdm_receiver_register+0x46>

0001d72a <z_impl_gpio_pin_interrupt_configure>:
{
   1d72a:	b538      	push	{r3, r4, r5, lr}
	const struct gpio_driver_api *api =
   1d72c:	6883      	ldr	r3, [r0, #8]
	const struct gpio_driver_data *const data =
   1d72e:	6904      	ldr	r4, [r0, #16]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   1d730:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   1d734:	d006      	beq.n	1d744 <z_impl_gpio_pin_interrupt_configure+0x1a>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   1d736:	6825      	ldr	r5, [r4, #0]
   1d738:	2401      	movs	r4, #1
   1d73a:	408c      	lsls	r4, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   1d73c:	4225      	tst	r5, r4
   1d73e:	d001      	beq.n	1d744 <z_impl_gpio_pin_interrupt_configure+0x1a>
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   1d740:	f082 62c0 	eor.w	r2, r2, #100663296	; 0x6000000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   1d744:	699c      	ldr	r4, [r3, #24]
   1d746:	f002 63c0 	and.w	r3, r2, #100663296	; 0x6000000
   1d74a:	f002 72b0 	and.w	r2, r2, #23068672	; 0x1600000
   1d74e:	47a0      	blx	r4
}
   1d750:	bd38      	pop	{r3, r4, r5, pc}

0001d752 <z_impl_gpio_pin_configure>:
{
   1d752:	b538      	push	{r3, r4, r5, lr}
   1d754:	4613      	mov	r3, r2
	const struct gpio_driver_api *api =
   1d756:	6885      	ldr	r5, [r0, #8]
	struct gpio_driver_data *data =
   1d758:	6904      	ldr	r4, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   1d75a:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
   1d75e:	d007      	beq.n	1d770 <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
   1d760:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
   1d764:	d004      	beq.n	1d770 <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1d766:	f012 0f01 	tst.w	r2, #1
   1d76a:	d001      	beq.n	1d770 <z_impl_gpio_pin_configure+0x1e>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   1d76c:	f482 2340 	eor.w	r3, r2, #786432	; 0xc0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   1d770:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1d774:	f013 0f01 	tst.w	r3, #1
   1d778:	d00a      	beq.n	1d790 <z_impl_gpio_pin_configure+0x3e>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1d77a:	6823      	ldr	r3, [r4, #0]
   1d77c:	f04f 0c01 	mov.w	ip, #1
   1d780:	fa0c fc01 	lsl.w	ip, ip, r1
   1d784:	ea43 030c 	orr.w	r3, r3, ip
   1d788:	6023      	str	r3, [r4, #0]
	return api->pin_configure(port, pin, flags);
   1d78a:	682b      	ldr	r3, [r5, #0]
   1d78c:	4798      	blx	r3
}
   1d78e:	bd38      	pop	{r3, r4, r5, pc}
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1d790:	6823      	ldr	r3, [r4, #0]
   1d792:	f04f 0c01 	mov.w	ip, #1
   1d796:	fa0c fc01 	lsl.w	ip, ip, r1
   1d79a:	ea23 030c 	bic.w	r3, r3, ip
   1d79e:	6023      	str	r3, [r4, #0]
   1d7a0:	e7f3      	b.n	1d78a <z_impl_gpio_pin_configure+0x38>

0001d7a2 <gpio_pin_configure_dt>:
{
   1d7a2:	b508      	push	{r3, lr}
   1d7a4:	4603      	mov	r3, r0
   1d7a6:	468c      	mov	ip, r1
	return gpio_pin_configure(spec->port,
   1d7a8:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
   1d7aa:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
   1d7ac:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
   1d7ae:	ea42 020c 	orr.w	r2, r2, ip
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
   1d7b2:	f7ff ffce 	bl	1d752 <z_impl_gpio_pin_configure>
}
   1d7b6:	bd08      	pop	{r3, pc}

0001d7b8 <gpio_port_get>:
{
   1d7b8:	b538      	push	{r3, r4, r5, lr}
   1d7ba:	460c      	mov	r4, r1
	const struct gpio_driver_data *const data =
   1d7bc:	6905      	ldr	r5, [r0, #16]
	const struct gpio_driver_api *api =
   1d7be:	6883      	ldr	r3, [r0, #8]
	return api->port_get_raw(port, value);
   1d7c0:	685b      	ldr	r3, [r3, #4]
   1d7c2:	4798      	blx	r3
	if (ret == 0) {
   1d7c4:	b918      	cbnz	r0, 1d7ce <gpio_port_get+0x16>
		*value ^= data->invert;
   1d7c6:	6823      	ldr	r3, [r4, #0]
   1d7c8:	682a      	ldr	r2, [r5, #0]
   1d7ca:	4053      	eors	r3, r2
   1d7cc:	6023      	str	r3, [r4, #0]
}
   1d7ce:	bd38      	pop	{r3, r4, r5, pc}

0001d7d0 <gpio_pin_get>:
{
   1d7d0:	b510      	push	{r4, lr}
   1d7d2:	b082      	sub	sp, #8
   1d7d4:	460c      	mov	r4, r1
	ret = gpio_port_get(port, &value);
   1d7d6:	a901      	add	r1, sp, #4
   1d7d8:	f7ff ffee 	bl	1d7b8 <gpio_port_get>
	if (ret == 0) {
   1d7dc:	b930      	cbnz	r0, 1d7ec <gpio_pin_get+0x1c>
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   1d7de:	2301      	movs	r3, #1
   1d7e0:	40a3      	lsls	r3, r4
   1d7e2:	9a01      	ldr	r2, [sp, #4]
   1d7e4:	4213      	tst	r3, r2
   1d7e6:	bf14      	ite	ne
   1d7e8:	2001      	movne	r0, #1
   1d7ea:	2000      	moveq	r0, #0
}
   1d7ec:	b002      	add	sp, #8
   1d7ee:	bd10      	pop	{r4, pc}

0001d7f0 <gpio_pin_set_raw>:
{
   1d7f0:	b508      	push	{r3, lr}
	if (value != 0)	{
   1d7f2:	b132      	cbz	r2, 1d802 <gpio_pin_set_raw+0x12>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   1d7f4:	2301      	movs	r3, #1
   1d7f6:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
   1d7fa:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
   1d7fc:	68db      	ldr	r3, [r3, #12]
   1d7fe:	4798      	blx	r3
}
   1d800:	bd08      	pop	{r3, pc}
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   1d802:	2301      	movs	r3, #1
   1d804:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
   1d808:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
   1d80a:	691b      	ldr	r3, [r3, #16]
   1d80c:	4798      	blx	r3
	return ret;
   1d80e:	e7f7      	b.n	1d800 <gpio_pin_set_raw+0x10>

0001d810 <gpio_pin_set>:
{
   1d810:	b510      	push	{r4, lr}
	const struct gpio_driver_data *const data =
   1d812:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1d814:	681c      	ldr	r4, [r3, #0]
   1d816:	2301      	movs	r3, #1
   1d818:	408b      	lsls	r3, r1
   1d81a:	421c      	tst	r4, r3
   1d81c:	d002      	beq.n	1d824 <gpio_pin_set+0x14>
		value = (value != 0) ? 0 : 1;
   1d81e:	fab2 f282 	clz	r2, r2
   1d822:	0952      	lsrs	r2, r2, #5
	return gpio_pin_set_raw(port, pin, value);
   1d824:	f7ff ffe4 	bl	1d7f0 <gpio_pin_set_raw>
}
   1d828:	bd10      	pop	{r4, pc}

0001d82a <gpio_add_callback>:
 *
 * Note: enables to add as many callback as needed on the same port.
 */
static inline int gpio_add_callback(const struct device *port,
				    struct gpio_callback *callback)
{
   1d82a:	b508      	push	{r3, lr}
	const struct gpio_driver_api *api =
   1d82c:	6883      	ldr	r3, [r0, #8]
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   1d82e:	69db      	ldr	r3, [r3, #28]
   1d830:	b113      	cbz	r3, 1d838 <gpio_add_callback+0xe>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   1d832:	2201      	movs	r2, #1
   1d834:	4798      	blx	r3
}
   1d836:	bd08      	pop	{r3, pc}
		return -ENOTSUP;
   1d838:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1d83c:	e7fb      	b.n	1d836 <gpio_add_callback+0xc>

0001d83e <free_stale_socket>:
	if (sock != NULL) {
   1d83e:	b108      	cbz	r0, 1d844 <free_stale_socket+0x6>
		sock->allocated = false;
   1d840:	2200      	movs	r2, #0
   1d842:	7182      	strb	r2, [r0, #6]
}
   1d844:	4770      	bx	lr

0001d846 <read_pin>:
{
   1d846:	b510      	push	{r4, lr}
   1d848:	4604      	mov	r4, r0
   1d84a:	460b      	mov	r3, r1
	return gpio_pin_get(spec->port, spec->pin);
   1d84c:	7909      	ldrb	r1, [r1, #4]
   1d84e:	6818      	ldr	r0, [r3, #0]
   1d850:	f7ff ffbe 	bl	1d7d0 <gpio_pin_get>
	if (state < 0) {
   1d854:	2800      	cmp	r0, #0
   1d856:	db00      	blt.n	1d85a <read_pin+0x14>
}
   1d858:	bd10      	pop	{r4, pc}
		state = default_state;
   1d85a:	4620      	mov	r0, r4
	return state;
   1d85c:	e7fc      	b.n	1d858 <read_pin+0x12>

0001d85e <is_crlf>:
	if (c == '\n' || c == '\r') {
   1d85e:	280a      	cmp	r0, #10
   1d860:	d005      	beq.n	1d86e <is_crlf+0x10>
   1d862:	280d      	cmp	r0, #13
   1d864:	d001      	beq.n	1d86a <is_crlf+0xc>
		return false;
   1d866:	2000      	movs	r0, #0
}
   1d868:	4770      	bx	lr
		return true;
   1d86a:	2001      	movs	r0, #1
   1d86c:	4770      	bx	lr
   1d86e:	2001      	movs	r0, #1
   1d870:	4770      	bx	lr

0001d872 <net_buf_findcrlf>:
{
   1d872:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d874:	4605      	mov	r5, r0
   1d876:	460e      	mov	r6, r1
	uint16_t len = 0U, pos = 0U;
   1d878:	2400      	movs	r4, #0
   1d87a:	4627      	mov	r7, r4
	while (buf && !is_crlf(*(buf->data + pos))) {
   1d87c:	e001      	b.n	1d882 <net_buf_findcrlf+0x10>
			pos++;
   1d87e:	3401      	adds	r4, #1
   1d880:	b2a4      	uxth	r4, r4
	while (buf && !is_crlf(*(buf->data + pos))) {
   1d882:	b16d      	cbz	r5, 1d8a0 <net_buf_findcrlf+0x2e>
   1d884:	68ab      	ldr	r3, [r5, #8]
   1d886:	5d18      	ldrb	r0, [r3, r4]
   1d888:	f7ff ffe9 	bl	1d85e <is_crlf>
   1d88c:	b940      	cbnz	r0, 1d8a0 <net_buf_findcrlf+0x2e>
		if (pos + 1 >= buf->len) {
   1d88e:	1c63      	adds	r3, r4, #1
   1d890:	89aa      	ldrh	r2, [r5, #12]
   1d892:	4293      	cmp	r3, r2
   1d894:	dbf3      	blt.n	1d87e <net_buf_findcrlf+0xc>
			len += buf->len;
   1d896:	443a      	add	r2, r7
   1d898:	b297      	uxth	r7, r2
			buf = buf->frags;
   1d89a:	682d      	ldr	r5, [r5, #0]
			pos = 0U;
   1d89c:	2400      	movs	r4, #0
   1d89e:	e7f0      	b.n	1d882 <net_buf_findcrlf+0x10>
	if (buf && is_crlf(*(buf->data + pos))) {
   1d8a0:	b155      	cbz	r5, 1d8b8 <net_buf_findcrlf+0x46>
   1d8a2:	68ab      	ldr	r3, [r5, #8]
   1d8a4:	5d18      	ldrb	r0, [r3, r4]
   1d8a6:	f7ff ffda 	bl	1d85e <is_crlf>
   1d8aa:	b908      	cbnz	r0, 1d8b0 <net_buf_findcrlf+0x3e>
	return 0;
   1d8ac:	2000      	movs	r0, #0
}
   1d8ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		len += pos;
   1d8b0:	1938      	adds	r0, r7, r4
   1d8b2:	b280      	uxth	r0, r0
		*frag = buf;
   1d8b4:	6035      	str	r5, [r6, #0]
		return len;
   1d8b6:	e7fa      	b.n	1d8ae <net_buf_findcrlf+0x3c>
	return 0;
   1d8b8:	2000      	movs	r0, #0
   1d8ba:	e7f8      	b.n	1d8ae <net_buf_findcrlf+0x3c>

0001d8bc <calc_fw_update_crc>:
{
   1d8bc:	4602      	mov	r2, r0
	uint16_t i = 0;
   1d8be:	2300      	movs	r3, #0
	uint8_t crc = 0;
   1d8c0:	4618      	mov	r0, r3
	while (i < count) {
   1d8c2:	e005      	b.n	1d8d0 <calc_fw_update_crc+0x14>
		l = *ptr;
   1d8c4:	f812 cb01 	ldrb.w	ip, [r2], #1
		crc += l;
   1d8c8:	4460      	add	r0, ip
   1d8ca:	b2c0      	uxtb	r0, r0
		++i;
   1d8cc:	3301      	adds	r3, #1
   1d8ce:	b29b      	uxth	r3, r3
	while (i < count) {
   1d8d0:	428b      	cmp	r3, r1
   1d8d2:	dbf7      	blt.n	1d8c4 <calc_fw_update_crc+0x8>
}
   1d8d4:	4770      	bx	lr

0001d8d6 <mdm_gpio6_callback_isr>:
}
   1d8d6:	4770      	bx	lr

0001d8d8 <offload_bind>:
	if (!context) {
   1d8d8:	b160      	cbz	r0, 1d8f4 <offload_bind+0x1c>
	sock = (struct hl7800_socket *)context->offload_context;
   1d8da:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
	if (!sock) {
   1d8de:	b163      	cbz	r3, 1d8fa <offload_bind+0x22>
	sock->src.sa_family = addr->sa_family;
   1d8e0:	880a      	ldrh	r2, [r1, #0]
   1d8e2:	811a      	strh	r2, [r3, #8]
		if (addr->sa_family == AF_INET) {
   1d8e4:	2a01      	cmp	r2, #1
   1d8e6:	d10b      	bne.n	1d900 <offload_bind+0x28>
		net_ipaddr_copy(&net_sin(&sock->src)->sin_addr,
   1d8e8:	684a      	ldr	r2, [r1, #4]
   1d8ea:	60da      	str	r2, [r3, #12]
		net_sin(&sock->src)->sin_port = net_sin(addr)->sin_port;
   1d8ec:	884a      	ldrh	r2, [r1, #2]
   1d8ee:	815a      	strh	r2, [r3, #10]
	return 0;
   1d8f0:	2000      	movs	r0, #0
   1d8f2:	4770      	bx	lr
		return -EINVAL;
   1d8f4:	f06f 0015 	mvn.w	r0, #21
   1d8f8:	4770      	bx	lr
		return -EINVAL;
   1d8fa:	f06f 0015 	mvn.w	r0, #21
   1d8fe:	4770      	bx	lr
		return -EPFNOSUPPORT;
   1d900:	f06f 005f 	mvn.w	r0, #95	; 0x5f
}
   1d904:	4770      	bx	lr

0001d906 <offload_listen>:
}
   1d906:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1d90a:	4770      	bx	lr

0001d90c <offload_accept>:
}
   1d90c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1d910:	4770      	bx	lr

0001d912 <offload_recv>:
	if (!context) {
   1d912:	b140      	cbz	r0, 1d926 <offload_recv+0x14>
	sock = (struct hl7800_socket *)context->offload_context;
   1d914:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
	if (!sock) {
   1d918:	b142      	cbz	r2, 1d92c <offload_recv+0x1a>
	sock->recv_cb = cb;
   1d91a:	f8c2 1098 	str.w	r1, [r2, #152]	; 0x98
	sock->recv_user_data = user_data;
   1d91e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	return 0;
   1d922:	2000      	movs	r0, #0
   1d924:	4770      	bx	lr
		return -EINVAL;
   1d926:	f06f 0015 	mvn.w	r0, #21
   1d92a:	4770      	bx	lr
		return -EINVAL;
   1d92c:	f06f 0015 	mvn.w	r0, #21
}
   1d930:	4770      	bx	lr

0001d932 <hl7800_build_mac>:
	ictx->mac_addr[0] = ictx->mdm_imei[MDM_HL7800_IMEI_STRLEN - 6];
   1d932:	f890 3af2 	ldrb.w	r3, [r0, #2802]	; 0xaf2
   1d936:	7103      	strb	r3, [r0, #4]
	ictx->mac_addr[1] = ictx->mdm_imei[MDM_HL7800_IMEI_STRLEN - 5];
   1d938:	f890 3af3 	ldrb.w	r3, [r0, #2803]	; 0xaf3
   1d93c:	7143      	strb	r3, [r0, #5]
	ictx->mac_addr[2] = ictx->mdm_imei[MDM_HL7800_IMEI_STRLEN - 4];
   1d93e:	f890 3af4 	ldrb.w	r3, [r0, #2804]	; 0xaf4
   1d942:	7183      	strb	r3, [r0, #6]
	ictx->mac_addr[3] = ictx->mdm_imei[MDM_HL7800_IMEI_STRLEN - 3];
   1d944:	f890 3af5 	ldrb.w	r3, [r0, #2805]	; 0xaf5
   1d948:	71c3      	strb	r3, [r0, #7]
	ictx->mac_addr[4] = ictx->mdm_imei[MDM_HL7800_IMEI_STRLEN - 2];
   1d94a:	f890 3af6 	ldrb.w	r3, [r0, #2806]	; 0xaf6
   1d94e:	7203      	strb	r3, [r0, #8]
	ictx->mac_addr[5] = ictx->mdm_imei[MDM_HL7800_IMEI_STRLEN - 1];
   1d950:	f890 3af7 	ldrb.w	r3, [r0, #2807]	; 0xaf7
   1d954:	7243      	strb	r3, [r0, #9]
}
   1d956:	4770      	bx	lr

0001d958 <hl7800_lock>:
{
   1d958:	b508      	push	{r3, lr}
	hl7800_TX_lock();
   1d95a:	f7ed f963 	bl	ac24 <hl7800_TX_lock>
	hl7800_RX_lock();
   1d95e:	f7ed f96d 	bl	ac3c <hl7800_RX_lock>
}
   1d962:	bd08      	pop	{r3, pc}

0001d964 <hl7800_unlock>:
{
   1d964:	b508      	push	{r3, lr}
	hl7800_RX_unlock();
   1d966:	f7ed fa6b 	bl	ae40 <hl7800_RX_unlock>
	hl7800_TX_unlock();
   1d96a:	f7ed fa71 	bl	ae50 <hl7800_TX_unlock>
}
   1d96e:	bd08      	pop	{r3, pc}

0001d970 <rssi_query>:
{
   1d970:	b508      	push	{r3, lr}
	hl7800_lock();
   1d972:	f7ff fff1 	bl	1d958 <hl7800_lock>
	hl7800_query_rssi();
   1d976:	f7ed fa51 	bl	ae1c <hl7800_query_rssi>
	hl7800_unlock();
   1d97a:	f7ff fff3 	bl	1d964 <hl7800_unlock>
}
   1d97e:	bd08      	pop	{r3, pc}

0001d980 <sock_rx_data_cb_work>:
{
   1d980:	b538      	push	{r3, r4, r5, lr}
   1d982:	4604      	mov	r4, r0
	sock = CONTAINER_OF(work, struct hl7800_socket, rx_data_work);
   1d984:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
	hl7800_lock();
   1d988:	f7ff ffe6 	bl	1d958 <hl7800_lock>
	rc = start_socket_rx(sock, sock->rx_size);
   1d98c:	f834 1c34 	ldrh.w	r1, [r4, #-52]
   1d990:	4628      	mov	r0, r5
   1d992:	f7ed fc55 	bl	b240 <start_socket_rx>
   1d996:	4604      	mov	r4, r0
	hl7800_RX_unlock();
   1d998:	f7ed fa52 	bl	ae40 <hl7800_RX_unlock>
	if (rc < 0) {
   1d99c:	2c00      	cmp	r4, #0
   1d99e:	db00      	blt.n	1d9a2 <sock_rx_data_cb_work+0x22>
}
   1d9a0:	bd38      	pop	{r3, r4, r5, pc}
		hl7800_TX_unlock();
   1d9a2:	f7ed fa55 	bl	ae50 <hl7800_TX_unlock>
}
   1d9a6:	e7fb      	b.n	1d9a0 <sock_rx_data_cb_work+0x20>

0001d9a8 <glitch_filter>:
{
   1d9a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d9ac:	4681      	mov	r9, r0
   1d9ae:	460e      	mov	r6, r1
   1d9b0:	4690      	mov	r8, r2
   1d9b2:	461f      	mov	r7, r3
	int i = 0;
   1d9b4:	2500      	movs	r5, #0
   1d9b6:	e001      	b.n	1d9bc <glitch_filter+0x14>
	} while (((state1 != state2) || (state1 < 0) || (state2 < 0)) && (i < max_iterations));
   1d9b8:	42bd      	cmp	r5, r7
   1d9ba:	d214      	bcs.n	1d9e6 <glitch_filter+0x3e>
		state1 = read_pin(-1, spec);
   1d9bc:	4631      	mov	r1, r6
   1d9be:	f04f 30ff 	mov.w	r0, #4294967295
   1d9c2:	f7ff ff40 	bl	1d846 <read_pin>
   1d9c6:	4604      	mov	r4, r0
	z_impl_k_busy_wait(usec_to_wait);
   1d9c8:	4640      	mov	r0, r8
   1d9ca:	f001 ffbf 	bl	1f94c <z_impl_k_busy_wait>
		state2 = read_pin(-1, spec);
   1d9ce:	4631      	mov	r1, r6
   1d9d0:	f04f 30ff 	mov.w	r0, #4294967295
   1d9d4:	f7ff ff37 	bl	1d846 <read_pin>
		i += 1;
   1d9d8:	3501      	adds	r5, #1
	} while (((state1 != state2) || (state1 < 0) || (state2 < 0)) && (i < max_iterations));
   1d9da:	42a0      	cmp	r0, r4
   1d9dc:	d1ec      	bne.n	1d9b8 <glitch_filter+0x10>
   1d9de:	2c00      	cmp	r4, #0
   1d9e0:	dbea      	blt.n	1d9b8 <glitch_filter+0x10>
   1d9e2:	2800      	cmp	r0, #0
   1d9e4:	dbe8      	blt.n	1d9b8 <glitch_filter+0x10>
	if (i >= max_iterations) {
   1d9e6:	42bd      	cmp	r5, r7
   1d9e8:	d301      	bcc.n	1d9ee <glitch_filter+0x46>
		if (state1 < 0) {
   1d9ea:	2c00      	cmp	r4, #0
   1d9ec:	db02      	blt.n	1d9f4 <glitch_filter+0x4c>
}
   1d9ee:	4620      	mov	r0, r4
   1d9f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (state2 < 0) {
   1d9f4:	2800      	cmp	r0, #0
   1d9f6:	db01      	blt.n	1d9fc <glitch_filter+0x54>
				state1 = state2;
   1d9f8:	4604      	mov	r4, r0
	return state1;
   1d9fa:	e7f8      	b.n	1d9ee <glitch_filter+0x46>
				state1 = read_pin(default_state, spec);
   1d9fc:	4631      	mov	r1, r6
   1d9fe:	4648      	mov	r0, r9
   1da00:	f7ff ff21 	bl	1d846 <read_pin>
   1da04:	4604      	mov	r4, r0
   1da06:	e7f2      	b.n	1d9ee <glitch_filter+0x46>

0001da08 <compare_versions>:
{
   1da08:	b5f0      	push	{r4, r5, r6, r7, lr}
   1da0a:	b083      	sub	sp, #12
   1da0c:	4606      	mov	r6, r0
   1da0e:	460f      	mov	r7, r1
	int result = 0;
   1da10:	2500      	movs	r5, #0
	while (result == 0) {
   1da12:	e001      	b.n	1da18 <compare_versions+0x10>
			result = -1;
   1da14:	f04f 35ff 	mov.w	r5, #4294967295
	while (result == 0) {
   1da18:	bb05      	cbnz	r5, 1da5c <compare_versions+0x54>
		ver1 = strtoul(v1, &tail1, 10);
   1da1a:	220a      	movs	r2, #10
   1da1c:	a901      	add	r1, sp, #4
   1da1e:	4630      	mov	r0, r6
   1da20:	f7f5 fa10 	bl	12e44 <strtoul>
   1da24:	4604      	mov	r4, r0
		ver2 = strtoul(v2, &tail2, 10);
   1da26:	220a      	movs	r2, #10
   1da28:	4669      	mov	r1, sp
   1da2a:	4638      	mov	r0, r7
   1da2c:	f7f5 fa0a 	bl	12e44 <strtoul>
		if (ver1 < ver2) {
   1da30:	4284      	cmp	r4, r0
   1da32:	d3ef      	bcc.n	1da14 <compare_versions+0xc>
		} else if (ver1 > ver2) {
   1da34:	d80b      	bhi.n	1da4e <compare_versions+0x46>
			v1 = tail1;
   1da36:	9e01      	ldr	r6, [sp, #4]
			v2 = tail2;
   1da38:	9f00      	ldr	r7, [sp, #0]
			if (*v1 == '\0' && *v2 == '\0') {
   1da3a:	7833      	ldrb	r3, [r6, #0]
   1da3c:	b90b      	cbnz	r3, 1da42 <compare_versions+0x3a>
   1da3e:	783a      	ldrb	r2, [r7, #0]
   1da40:	b162      	cbz	r2, 1da5c <compare_versions+0x54>
			} else if (*v1 == '\0') {
   1da42:	b133      	cbz	r3, 1da52 <compare_versions+0x4a>
			} else if (*v2 == '\0') {
   1da44:	783b      	ldrb	r3, [r7, #0]
   1da46:	b13b      	cbz	r3, 1da58 <compare_versions+0x50>
				v1++;
   1da48:	3601      	adds	r6, #1
				v2++;
   1da4a:	3701      	adds	r7, #1
   1da4c:	e7e4      	b.n	1da18 <compare_versions+0x10>
			result = 1;
   1da4e:	2501      	movs	r5, #1
   1da50:	e7e2      	b.n	1da18 <compare_versions+0x10>
				result = -1;
   1da52:	f04f 35ff 	mov.w	r5, #4294967295
   1da56:	e7df      	b.n	1da18 <compare_versions+0x10>
				result = 1;
   1da58:	2501      	movs	r5, #1
   1da5a:	e7dd      	b.n	1da18 <compare_versions+0x10>
}
   1da5c:	4628      	mov	r0, r5
   1da5e:	b003      	add	sp, #12
   1da60:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001da62 <socket_put>:
	if (!sock) {
   1da62:	b170      	cbz	r0, 1da82 <socket_put+0x20>
	sock->context = NULL;
   1da64:	2200      	movs	r2, #0
   1da66:	6002      	str	r2, [r0, #0]
	sock->socket_id = -1;
   1da68:	f04f 31ff 	mov.w	r1, #4294967295
   1da6c:	61c1      	str	r1, [r0, #28]
	sock->created = false;
   1da6e:	7602      	strb	r2, [r0, #24]
	sock->reconfig = false;
   1da70:	7642      	strb	r2, [r0, #25]
	sock->error = 0;
   1da72:	6242      	str	r2, [r0, #36]	; 0x24
	sock->rx_size = 0;
   1da74:	6202      	str	r2, [r0, #32]
	sock->state = SOCK_IDLE;
   1da76:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
   1da7a:	6082      	str	r2, [r0, #8]
   1da7c:	60c2      	str	r2, [r0, #12]
   1da7e:	6102      	str	r2, [r0, #16]
   1da80:	6142      	str	r2, [r0, #20]
}
   1da82:	4770      	bx	lr

0001da84 <offload_sendto>:
{
   1da84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return pkt->context;
   1da86:	6947      	ldr	r7, [r0, #20]
	if (!context) {
   1da88:	b33f      	cbz	r7, 1dada <offload_sendto+0x56>
   1da8a:	4605      	mov	r5, r0
   1da8c:	461e      	mov	r6, r3
	sock = (struct hl7800_socket *)context->offload_context;
   1da8e:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
	if (!sock) {
   1da92:	b32c      	cbz	r4, 1dae0 <offload_sendto+0x5c>
		if (dst_addr->sa_family == AF_INET) {
   1da94:	880b      	ldrh	r3, [r1, #0]
   1da96:	2b01      	cmp	r3, #1
   1da98:	d125      	bne.n	1dae6 <offload_sendto+0x62>
		net_ipaddr_copy(&net_sin(&sock->dst)->sin_addr,
   1da9a:	684b      	ldr	r3, [r1, #4]
   1da9c:	6163      	str	r3, [r4, #20]
		dst_port = ntohs(net_sin(dst_addr)->sin_port);
   1da9e:	884b      	ldrh	r3, [r1, #2]
   1daa0:	021a      	lsls	r2, r3, #8
   1daa2:	b212      	sxth	r2, r2
   1daa4:	ea42 2213 	orr.w	r2, r2, r3, lsr #8
		net_sin(&sock->dst)->sin_port = dst_port;
   1daa8:	8262      	strh	r2, [r4, #18]
	hl7800_lock();
   1daaa:	f7ff ff55 	bl	1d958 <hl7800_lock>
	reconfigure_IP_connection();
   1daae:	f7ed fa75 	bl	af9c <reconfigure_IP_connection>
	ret = send_data(sock, pkt);
   1dab2:	4629      	mov	r1, r5
   1dab4:	4620      	mov	r0, r4
   1dab6:	f7ed fac5 	bl	b044 <send_data>
   1daba:	4604      	mov	r4, r0
	hl7800_unlock();
   1dabc:	f7ff ff52 	bl	1d964 <hl7800_unlock>
	if (ret >= 0) {
   1dac0:	2c00      	cmp	r4, #0
   1dac2:	da06      	bge.n	1dad2 <offload_sendto+0x4e>
	if (cb) {
   1dac4:	b11e      	cbz	r6, 1dace <offload_sendto+0x4a>
		cb(context, ret, user_data);
   1dac6:	9a07      	ldr	r2, [sp, #28]
   1dac8:	4621      	mov	r1, r4
   1daca:	4638      	mov	r0, r7
   1dacc:	47b0      	blx	r6
}
   1dace:	4620      	mov	r0, r4
   1dad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		net_pkt_unref(pkt);
   1dad2:	4628      	mov	r0, r5
   1dad4:	f7fd faec 	bl	1b0b0 <net_pkt_unref>
   1dad8:	e7f4      	b.n	1dac4 <offload_sendto+0x40>
		return -EINVAL;
   1dada:	f06f 0415 	mvn.w	r4, #21
   1dade:	e7f6      	b.n	1dace <offload_sendto+0x4a>
		return -EINVAL;
   1dae0:	f06f 0415 	mvn.w	r4, #21
   1dae4:	e7f3      	b.n	1dace <offload_sendto+0x4a>
		return -EINVAL;
   1dae6:	f06f 0415 	mvn.w	r4, #21
   1daea:	e7f0      	b.n	1dace <offload_sendto+0x4a>

0001daec <offload_send>:
{
   1daec:	b510      	push	{r4, lr}
   1daee:	b082      	sub	sp, #8
   1daf0:	6944      	ldr	r4, [r0, #20]
	return pkt->family;
   1daf2:	f890 c037 	ldrb.w	ip, [r0, #55]	; 0x37
   1daf6:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
		if (net_pkt_family(pkt) == AF_INET) {
   1dafa:	f1bc 0f01 	cmp.w	ip, #1
   1dafe:	d109      	bne.n	1db14 <offload_send+0x28>
	return offload_sendto(pkt, &context->remote, addr_len, cb, timeout,
   1db00:	9301      	str	r3, [sp, #4]
   1db02:	9200      	str	r2, [sp, #0]
   1db04:	460b      	mov	r3, r1
   1db06:	2208      	movs	r2, #8
   1db08:	f104 0124 	add.w	r1, r4, #36	; 0x24
   1db0c:	f7ff ffba 	bl	1da84 <offload_sendto>
}
   1db10:	b002      	add	sp, #8
   1db12:	bd10      	pop	{r4, pc}
		return -EPFNOSUPPORT;
   1db14:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   1db18:	e7fa      	b.n	1db10 <offload_send+0x24>

0001db1a <sockreadrecv_cb_work>:
{
   1db1a:	b510      	push	{r4, lr}
   1db1c:	b082      	sub	sp, #8
	pkt = sock->recv_pkt;
   1db1e:	6d81      	ldr	r1, [r0, #88]	; 0x58
	sock->recv_pkt = NULL;
   1db20:	2300      	movs	r3, #0
   1db22:	6583      	str	r3, [r0, #88]	; 0x58
	if (sock->recv_cb) {
   1db24:	6d44      	ldr	r4, [r0, #84]	; 0x54
   1db26:	b14c      	cbz	r4, 1db3c <sockreadrecv_cb_work+0x22>
		sock->recv_cb(sock->context, pkt, NULL, NULL, 0,
   1db28:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   1db2a:	9301      	str	r3, [sp, #4]
   1db2c:	2200      	movs	r2, #0
   1db2e:	9200      	str	r2, [sp, #0]
   1db30:	4613      	mov	r3, r2
   1db32:	f850 0c44 	ldr.w	r0, [r0, #-68]
   1db36:	47a0      	blx	r4
}
   1db38:	b002      	add	sp, #8
   1db3a:	bd10      	pop	{r4, pc}
		net_pkt_unref(pkt);
   1db3c:	4608      	mov	r0, r1
   1db3e:	f7fd fab7 	bl	1b0b0 <net_pkt_unref>
}
   1db42:	e7f9      	b.n	1db38 <sockreadrecv_cb_work+0x1e>

0001db44 <wait_for_modem_data>:
{
   1db44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1db46:	4607      	mov	r7, r0
   1db48:	460c      	mov	r4, r1
   1db4a:	4616      	mov	r6, r2
	uint32_t waitForDataTries = 0;
   1db4c:	2500      	movs	r5, #0
	while ((current_len < expected_len) &&
   1db4e:	e009      	b.n	1db64 <wait_for_modem_data+0x20>
	return z_impl_k_sleep(timeout);
   1db50:	f240 6067 	movw	r0, #1639	; 0x667
   1db54:	2100      	movs	r1, #0
   1db56:	f7f4 f89f 	bl	11c98 <z_impl_k_sleep>
		current_len += hl7800_read_rx(buf);
   1db5a:	4638      	mov	r0, r7
   1db5c:	f7ee f8f0 	bl	bd40 <hl7800_read_rx>
   1db60:	4404      	add	r4, r0
		waitForDataTries++;
   1db62:	3501      	adds	r5, #1
	while ((current_len < expected_len) &&
   1db64:	42a6      	cmp	r6, r4
   1db66:	d901      	bls.n	1db6c <wait_for_modem_data+0x28>
   1db68:	2d02      	cmp	r5, #2
   1db6a:	d9f1      	bls.n	1db50 <wait_for_modem_data+0xc>
}
   1db6c:	4620      	mov	r0, r4
   1db6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001db70 <read_rx_allocator>:
{
   1db70:	b538      	push	{r3, r4, r5, lr}
   1db72:	4604      	mov	r4, r0
   1db74:	4610      	mov	r0, r2
	return net_buf_alloc_fixed(pool, timeout);
   1db76:	4622      	mov	r2, r4
   1db78:	460b      	mov	r3, r1
   1db7a:	f7fb fba2 	bl	192c2 <net_buf_alloc_fixed>
}
   1db7e:	bd38      	pop	{r3, r4, r5, pc}

0001db80 <net_buf_get_u8>:
{
   1db80:	b538      	push	{r3, r4, r5, lr}
   1db82:	4604      	mov	r4, r0
	uint8_t val = net_buf_pull_u8(*buf);
   1db84:	6800      	ldr	r0, [r0, #0]
	return net_buf_simple_pull_u8(&buf->b);
   1db86:	3008      	adds	r0, #8
   1db88:	f7fb fc3a 	bl	19400 <net_buf_simple_pull_u8>
   1db8c:	4605      	mov	r5, r0
	if (!(*buf)->len) {
   1db8e:	6821      	ldr	r1, [r4, #0]
   1db90:	898b      	ldrh	r3, [r1, #12]
   1db92:	b10b      	cbz	r3, 1db98 <net_buf_get_u8+0x18>
}
   1db94:	4628      	mov	r0, r5
   1db96:	bd38      	pop	{r3, r4, r5, pc}
		*buf = net_buf_frag_del(NULL, *buf);
   1db98:	2000      	movs	r0, #0
   1db9a:	f7fb fbe0 	bl	1935e <net_buf_frag_del>
   1db9e:	6020      	str	r0, [r4, #0]
   1dba0:	e7f8      	b.n	1db94 <net_buf_get_u8+0x14>

0001dba2 <net_buf_skipcrlf>:
{
   1dba2:	b538      	push	{r3, r4, r5, lr}
   1dba4:	4605      	mov	r5, r0
	while (*buf && is_crlf(*(*buf)->data)) {
   1dba6:	682c      	ldr	r4, [r5, #0]
   1dba8:	b18c      	cbz	r4, 1dbce <net_buf_skipcrlf+0x2c>
   1dbaa:	68a3      	ldr	r3, [r4, #8]
   1dbac:	7818      	ldrb	r0, [r3, #0]
   1dbae:	f7ff fe56 	bl	1d85e <is_crlf>
   1dbb2:	b160      	cbz	r0, 1dbce <net_buf_skipcrlf+0x2c>
   1dbb4:	f104 0008 	add.w	r0, r4, #8
   1dbb8:	f7fb fc22 	bl	19400 <net_buf_simple_pull_u8>
		if (!(*buf)->len) {
   1dbbc:	6829      	ldr	r1, [r5, #0]
   1dbbe:	898b      	ldrh	r3, [r1, #12]
   1dbc0:	2b00      	cmp	r3, #0
   1dbc2:	d1f0      	bne.n	1dba6 <net_buf_skipcrlf+0x4>
			*buf = net_buf_frag_del(NULL, *buf);
   1dbc4:	2000      	movs	r0, #0
   1dbc6:	f7fb fbca 	bl	1935e <net_buf_frag_del>
   1dbca:	6028      	str	r0, [r5, #0]
   1dbcc:	e7eb      	b.n	1dba6 <net_buf_skipcrlf+0x4>
}
   1dbce:	bd38      	pop	{r3, r4, r5, pc}

0001dbd0 <net_buf_skip>:
{
   1dbd0:	b538      	push	{r3, r4, r5, lr}
   1dbd2:	4604      	mov	r4, r0
	while (buf && len--) {
   1dbd4:	e000      	b.n	1dbd8 <net_buf_skip+0x8>
{
   1dbd6:	4629      	mov	r1, r5
	while (buf && len--) {
   1dbd8:	b174      	cbz	r4, 1dbf8 <net_buf_skip+0x28>
   1dbda:	1e4d      	subs	r5, r1, #1
   1dbdc:	b161      	cbz	r1, 1dbf8 <net_buf_skip+0x28>
	return net_buf_simple_pull_u8(&buf->b);
   1dbde:	f104 0008 	add.w	r0, r4, #8
   1dbe2:	f7fb fc0d 	bl	19400 <net_buf_simple_pull_u8>
		if (!buf->len) {
   1dbe6:	89a3      	ldrh	r3, [r4, #12]
   1dbe8:	2b00      	cmp	r3, #0
   1dbea:	d1f4      	bne.n	1dbd6 <net_buf_skip+0x6>
			buf = net_buf_frag_del(NULL, buf);
   1dbec:	4621      	mov	r1, r4
   1dbee:	2000      	movs	r0, #0
   1dbf0:	f7fb fbb5 	bl	1935e <net_buf_frag_del>
   1dbf4:	4604      	mov	r4, r0
   1dbf6:	e7ee      	b.n	1dbd6 <net_buf_skip+0x6>
}
   1dbf8:	4620      	mov	r0, r4
   1dbfa:	bd38      	pop	{r3, r4, r5, pc}

0001dbfc <net_buf_remove>:
{
   1dbfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1dbfe:	4606      	mov	r6, r0
   1dc00:	460d      	mov	r5, r1
	uint32_t removed = 0;
   1dc02:	2700      	movs	r7, #0
	while (*buf && len > 0) {
   1dc04:	e008      	b.n	1dc18 <net_buf_remove+0x1c>
	return net_buf_simple_pull(&buf->b, len);
   1dc06:	4621      	mov	r1, r4
   1dc08:	3008      	adds	r0, #8
   1dc0a:	f7fb fbf1 	bl	193f0 <net_buf_simple_pull>
		removed += to_remove;
   1dc0e:	4427      	add	r7, r4
		len -= to_remove;
   1dc10:	1b2d      	subs	r5, r5, r4
		if (!(*buf)->len) {
   1dc12:	6831      	ldr	r1, [r6, #0]
   1dc14:	898b      	ldrh	r3, [r1, #12]
   1dc16:	b13b      	cbz	r3, 1dc28 <net_buf_remove+0x2c>
	while (*buf && len > 0) {
   1dc18:	6830      	ldr	r0, [r6, #0]
   1dc1a:	b150      	cbz	r0, 1dc32 <net_buf_remove+0x36>
   1dc1c:	b14d      	cbz	r5, 1dc32 <net_buf_remove+0x36>
		to_remove = (*buf)->len;
   1dc1e:	8984      	ldrh	r4, [r0, #12]
		if (to_remove > len) {
   1dc20:	42a5      	cmp	r5, r4
   1dc22:	d2f0      	bcs.n	1dc06 <net_buf_remove+0xa>
			to_remove = len;
   1dc24:	462c      	mov	r4, r5
   1dc26:	e7ee      	b.n	1dc06 <net_buf_remove+0xa>
			*buf = net_buf_frag_del(NULL, *buf);
   1dc28:	2000      	movs	r0, #0
   1dc2a:	f7fb fb98 	bl	1935e <net_buf_frag_del>
   1dc2e:	6030      	str	r0, [r6, #0]
   1dc30:	e7f2      	b.n	1dc18 <net_buf_remove+0x1c>
}
   1dc32:	4638      	mov	r0, r7
   1dc34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001dc36 <on_cmd_atcmdinfo_stored_profile1>:
{
   1dc36:	b508      	push	{r3, lr}
	return profile_handler(buf, len, false);
   1dc38:	2200      	movs	r2, #0
   1dc3a:	f7ee fabf 	bl	c1bc <profile_handler>
}
   1dc3e:	bd08      	pop	{r3, pc}

0001dc40 <on_cmd_atcmdinfo_stored_profile0>:
{
   1dc40:	b508      	push	{r3, lr}
	return profile_handler(buf, len, false);
   1dc42:	2200      	movs	r2, #0
   1dc44:	f7ee faba 	bl	c1bc <profile_handler>
}
   1dc48:	bd08      	pop	{r3, pc}

0001dc4a <on_cmd_atcmdinfo_active_profile>:
{
   1dc4a:	b508      	push	{r3, lr}
	return profile_handler(buf, len, true);
   1dc4c:	2201      	movs	r2, #1
   1dc4e:	f7ee fab5 	bl	c1bc <profile_handler>
}
   1dc52:	bd08      	pop	{r3, pc}

0001dc54 <hl7800_net_addr6_pton>:
{
   1dc54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1dc56:	4604      	mov	r4, r0
   1dc58:	460d      	mov	r5, r1
	len = strlen(src);
   1dc5a:	f7e3 f8a9 	bl	db0 <strlen>
	for (i = 0; i < len; i++) {
   1dc5e:	2300      	movs	r3, #0
   1dc60:	e000      	b.n	1dc64 <hl7800_net_addr6_pton+0x10>
   1dc62:	3301      	adds	r3, #1
   1dc64:	4283      	cmp	r3, r0
   1dc66:	da0c      	bge.n	1dc82 <hl7800_net_addr6_pton+0x2e>
		if (!(src[i] >= '0' && src[i] <= '9') && src[i] != '.') {
   1dc68:	f814 c003 	ldrb.w	ip, [r4, r3]
   1dc6c:	f1ac 0230 	sub.w	r2, ip, #48	; 0x30
   1dc70:	b2d2      	uxtb	r2, r2
   1dc72:	2a09      	cmp	r2, #9
   1dc74:	d9f5      	bls.n	1dc62 <hl7800_net_addr6_pton+0xe>
   1dc76:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
   1dc7a:	d0f2      	beq.n	1dc62 <hl7800_net_addr6_pton+0xe>
			return -EINVAL;
   1dc7c:	f06f 0015 	mvn.w	r0, #21
   1dc80:	e030      	b.n	1dce4 <hl7800_net_addr6_pton+0x90>
	for (i = 0; i < num_sections; i++) {
   1dc82:	2600      	movs	r6, #0
   1dc84:	2e07      	cmp	r6, #7
   1dc86:	dc2e      	bgt.n	1dce6 <hl7800_net_addr6_pton+0x92>
		if (!src || *src == '\0') {
   1dc88:	b37c      	cbz	r4, 1dcea <hl7800_net_addr6_pton+0x96>
   1dc8a:	7823      	ldrb	r3, [r4, #0]
   1dc8c:	b383      	cbz	r3, 1dcf0 <hl7800_net_addr6_pton+0x9c>
		ipv6_section = (uint16_t)strtol(src, NULL, 10);
   1dc8e:	220a      	movs	r2, #10
   1dc90:	2100      	movs	r1, #0
   1dc92:	4620      	mov	r0, r4
   1dc94:	f7f5 f85a 	bl	12d4c <strtol>
   1dc98:	4607      	mov	r7, r0
		src = strchr(src, '.');
   1dc9a:	212e      	movs	r1, #46	; 0x2e
   1dc9c:	4620      	mov	r0, r4
   1dc9e:	f002 fa07 	bl	200b0 <strchr>
		if (!src || *src == '\0') {
   1dca2:	1c44      	adds	r4, r0, #1
   1dca4:	d027      	beq.n	1dcf6 <hl7800_net_addr6_pton+0xa2>
   1dca6:	7843      	ldrb	r3, [r0, #1]
   1dca8:	b343      	cbz	r3, 1dcfc <hl7800_net_addr6_pton+0xa8>
		ipv6_section = (ipv6_section << 8) | (uint16_t)strtol(src, NULL, 10);
   1dcaa:	b2bf      	uxth	r7, r7
   1dcac:	023f      	lsls	r7, r7, #8
   1dcae:	220a      	movs	r2, #10
   1dcb0:	2100      	movs	r1, #0
   1dcb2:	4620      	mov	r0, r4
   1dcb4:	f7f5 f84a 	bl	12d4c <strtol>
   1dcb8:	b200      	sxth	r0, r0
   1dcba:	4338      	orrs	r0, r7
   1dcbc:	b283      	uxth	r3, r0
		UNALIGNED_PUT(htons(ipv6_section), &dst->s6_addr16[i]);
   1dcbe:	f3c0 2007 	ubfx	r0, r0, #8, #8
   1dcc2:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   1dcc6:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
		src = strchr(src, '.');
   1dcca:	212e      	movs	r1, #46	; 0x2e
   1dccc:	4620      	mov	r0, r4
   1dcce:	f002 f9ef 	bl	200b0 <strchr>
		if (src) {
   1dcd2:	4604      	mov	r4, r0
   1dcd4:	b110      	cbz	r0, 1dcdc <hl7800_net_addr6_pton+0x88>
			src++;
   1dcd6:	3401      	adds	r4, #1
	for (i = 0; i < num_sections; i++) {
   1dcd8:	3601      	adds	r6, #1
   1dcda:	e7d3      	b.n	1dc84 <hl7800_net_addr6_pton+0x30>
			if (i < num_sections - 1) {
   1dcdc:	2e06      	cmp	r6, #6
   1dcde:	dcfb      	bgt.n	1dcd8 <hl7800_net_addr6_pton+0x84>
				return -EINVAL;
   1dce0:	f06f 0015 	mvn.w	r0, #21
}
   1dce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return 0;
   1dce6:	2000      	movs	r0, #0
   1dce8:	e7fc      	b.n	1dce4 <hl7800_net_addr6_pton+0x90>
			return -EINVAL;
   1dcea:	f06f 0015 	mvn.w	r0, #21
   1dcee:	e7f9      	b.n	1dce4 <hl7800_net_addr6_pton+0x90>
   1dcf0:	f06f 0015 	mvn.w	r0, #21
   1dcf4:	e7f6      	b.n	1dce4 <hl7800_net_addr6_pton+0x90>
			return -EINVAL;
   1dcf6:	f06f 0015 	mvn.w	r0, #21
   1dcfa:	e7f3      	b.n	1dce4 <hl7800_net_addr6_pton+0x90>
   1dcfc:	f06f 0015 	mvn.w	r0, #21
   1dd00:	e7f0      	b.n	1dce4 <hl7800_net_addr6_pton+0x90>

0001dd02 <pkt_setup_ip_data>:
{
   1dd02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dd06:	b088      	sub	sp, #32
   1dd08:	4605      	mov	r5, r0
   1dd0a:	460c      	mov	r4, r1
   1dd0c:	f890 3037 	ldrb.w	r3, [r0, #55]	; 0x37
   1dd10:	095b      	lsrs	r3, r3, #5
	if (net_pkt_family(pkt) == AF_INET) {
   1dd12:	2b01      	cmp	r3, #1
   1dd14:	d00c      	beq.n	1dd30 <pkt_setup_ip_data+0x2e>
	uint16_t src_port = 0U, dst_port = 0U;
   1dd16:	2600      	movs	r6, #0
   1dd18:	46b0      	mov	r8, r6
	int hdr_len = 0;
   1dd1a:	4637      	mov	r7, r6
	if (sock->ip_proto == IPPROTO_UDP) {
   1dd1c:	79e3      	ldrb	r3, [r4, #7]
   1dd1e:	2b11      	cmp	r3, #17
   1dd20:	d01d      	beq.n	1dd5e <pkt_setup_ip_data+0x5c>
	if (sock->ip_proto == IPPROTO_TCP) {
   1dd22:	79e3      	ldrb	r3, [r4, #7]
   1dd24:	2b06      	cmp	r3, #6
   1dd26:	d022      	beq.n	1dd6e <pkt_setup_ip_data+0x6c>
}
   1dd28:	4638      	mov	r0, r7
   1dd2a:	b008      	add	sp, #32
   1dd2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (net_ipv4_create(
   1dd30:	f101 020c 	add.w	r2, r1, #12
   1dd34:	3114      	adds	r1, #20
   1dd36:	f7fe f893 	bl	1be60 <net_ipv4_create>
   1dd3a:	bba0      	cbnz	r0, 1dda6 <pkt_setup_ip_data+0xa4>
		src_port = ntohs(net_sin(&sock->src)->sin_port);
   1dd3c:	8963      	ldrh	r3, [r4, #10]
   1dd3e:	ea4f 2803 	mov.w	r8, r3, lsl #8
   1dd42:	fa0f f888 	sxth.w	r8, r8
   1dd46:	ea48 2813 	orr.w	r8, r8, r3, lsr #8
   1dd4a:	fa1f f888 	uxth.w	r8, r8
		dst_port = ntohs(net_sin(&sock->dst)->sin_port);
   1dd4e:	8a63      	ldrh	r3, [r4, #18]
   1dd50:	021e      	lsls	r6, r3, #8
   1dd52:	b236      	sxth	r6, r6
   1dd54:	ea46 2613 	orr.w	r6, r6, r3, lsr #8
   1dd58:	b2b6      	uxth	r6, r6
		hdr_len = sizeof(struct net_ipv4_hdr);
   1dd5a:	2714      	movs	r7, #20
   1dd5c:	e7de      	b.n	1dd1c <pkt_setup_ip_data+0x1a>
		if (net_udp_create(pkt, dst_port, src_port)) {
   1dd5e:	4642      	mov	r2, r8
   1dd60:	4631      	mov	r1, r6
   1dd62:	4628      	mov	r0, r5
   1dd64:	f7ff f8a0 	bl	1cea8 <net_udp_create>
   1dd68:	bb00      	cbnz	r0, 1ddac <pkt_setup_ip_data+0xaa>
		hdr_len += NET_UDPH_LEN;
   1dd6a:	3708      	adds	r7, #8
   1dd6c:	e7d9      	b.n	1dd22 <pkt_setup_ip_data+0x20>
		NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
   1dd6e:	ab03      	add	r3, sp, #12
   1dd70:	9301      	str	r3, [sp, #4]
   1dd72:	2314      	movs	r3, #20
   1dd74:	9302      	str	r3, [sp, #8]
		tcp = (struct net_tcp_hdr *)net_pkt_get_data(pkt, &tcp_access);
   1dd76:	a901      	add	r1, sp, #4
   1dd78:	4628      	mov	r0, r5
   1dd7a:	f7fd fcc3 	bl	1b704 <net_pkt_get_data>
		if (!tcp) {
   1dd7e:	b178      	cbz	r0, 1dda0 <pkt_setup_ip_data+0x9e>
   1dd80:	2200      	movs	r2, #0
   1dd82:	6002      	str	r2, [r0, #0]
   1dd84:	6042      	str	r2, [r0, #4]
   1dd86:	6082      	str	r2, [r0, #8]
   1dd88:	60c2      	str	r2, [r0, #12]
   1dd8a:	6102      	str	r2, [r0, #16]
		tcp->src_port = dst_port;
   1dd8c:	8006      	strh	r6, [r0, #0]
		tcp->dst_port = src_port;
   1dd8e:	f8a0 8002 	strh.w	r8, [r0, #2]
		if (net_pkt_set_data(pkt, &tcp_access)) {
   1dd92:	a901      	add	r1, sp, #4
   1dd94:	4628      	mov	r0, r5
   1dd96:	f7fd fcd9 	bl	1b74c <net_pkt_set_data>
   1dd9a:	b908      	cbnz	r0, 1dda0 <pkt_setup_ip_data+0x9e>
		hdr_len += NET_TCPH_LEN;
   1dd9c:	3714      	adds	r7, #20
   1dd9e:	e7c3      	b.n	1dd28 <pkt_setup_ip_data+0x26>
			return -1;
   1dda0:	f04f 37ff 	mov.w	r7, #4294967295
   1dda4:	e7c0      	b.n	1dd28 <pkt_setup_ip_data+0x26>
			return -1;
   1dda6:	f04f 37ff 	mov.w	r7, #4294967295
   1ddaa:	e7bd      	b.n	1dd28 <pkt_setup_ip_data+0x26>
			return -1;
   1ddac:	f04f 37ff 	mov.w	r7, #4294967295
   1ddb0:	e7ba      	b.n	1dd28 <pkt_setup_ip_data+0x26>

0001ddb2 <on_cmd_sock_udp_create>:
{
   1ddb2:	b508      	push	{r3, lr}
   1ddb4:	460a      	mov	r2, r1
	return on_cmd_sockcreate(SOCK_DGRAM, buf, len);
   1ddb6:	4601      	mov	r1, r0
   1ddb8:	2002      	movs	r0, #2
   1ddba:	f7ee ff83 	bl	ccc4 <on_cmd_sockcreate>
}
   1ddbe:	bd08      	pop	{r3, pc}

0001ddc0 <on_cmd_sock_tcp_create>:
{
   1ddc0:	b508      	push	{r3, lr}
   1ddc2:	460a      	mov	r2, r1
	return on_cmd_sockcreate(SOCK_STREAM, buf, len);
   1ddc4:	4601      	mov	r1, r0
   1ddc6:	2001      	movs	r0, #1
   1ddc8:	f7ee ff7c 	bl	ccc4 <on_cmd_sockcreate>
}
   1ddcc:	bd08      	pop	{r3, pc}

0001ddce <delete_untracked_socket_work_cb>:
{
   1ddce:	b510      	push	{r4, lr}
   1ddd0:	e008      	b.n	1dde4 <delete_untracked_socket_work_cb+0x16>
			delete_socket(NULL, sock->type, sock->id);
   1ddd2:	7942      	ldrb	r2, [r0, #5]
   1ddd4:	7901      	ldrb	r1, [r0, #4]
   1ddd6:	2000      	movs	r0, #0
   1ddd8:	f7ed f90e 	bl	aff8 <delete_socket>
			free_stale_socket(sock);
   1dddc:	4620      	mov	r0, r4
   1ddde:	f7ff fd2e 	bl	1d83e <free_stale_socket>
	} while (sock != NULL);
   1dde2:	b12c      	cbz	r4, 1ddf0 <delete_untracked_socket_work_cb+0x22>
		sock = dequeue_stale_socket();
   1dde4:	f7ef f9c0 	bl	d168 <dequeue_stale_socket>
		if (sock != NULL) {
   1dde8:	4604      	mov	r4, r0
   1ddea:	2800      	cmp	r0, #0
   1ddec:	d1f1      	bne.n	1ddd2 <delete_untracked_socket_work_cb+0x4>
   1ddee:	e7f8      	b.n	1dde2 <delete_untracked_socket_work_cb+0x14>
}
   1ddf0:	bd10      	pop	{r4, pc}

0001ddf2 <atomic_test_bit>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1ddf2:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ddf4:	f3bf 8f5b 	dmb	ish
   1ddf8:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
   1ddfc:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1de00:	f001 011f 	and.w	r1, r1, #31
   1de04:	4108      	asrs	r0, r1
}
   1de06:	f000 0001 	and.w	r0, r0, #1
   1de0a:	4770      	bx	lr

0001de0c <net_if_is_up>:
	if (iface == NULL) {
   1de0c:	b188      	cbz	r0, 1de32 <net_if_is_up+0x26>
{
   1de0e:	b510      	push	{r4, lr}
   1de10:	4604      	mov	r4, r0
	return atomic_test_bit(iface->if_dev->flags, value);
   1de12:	6800      	ldr	r0, [r0, #0]
   1de14:	2100      	movs	r1, #0
   1de16:	300c      	adds	r0, #12
   1de18:	f7ff ffeb 	bl	1ddf2 <atomic_test_bit>
	return net_if_flag_is_set(iface, NET_IF_UP) &&
   1de1c:	b908      	cbnz	r0, 1de22 <net_if_is_up+0x16>
   1de1e:	2000      	movs	r0, #0
}
   1de20:	bd10      	pop	{r4, pc}
	return atomic_test_bit(iface->if_dev->flags, value);
   1de22:	6820      	ldr	r0, [r4, #0]
   1de24:	2108      	movs	r1, #8
   1de26:	300c      	adds	r0, #12
   1de28:	f7ff ffe3 	bl	1ddf2 <atomic_test_bit>
	return net_if_flag_is_set(iface, NET_IF_UP) &&
   1de2c:	b118      	cbz	r0, 1de36 <net_if_is_up+0x2a>
   1de2e:	2001      	movs	r0, #1
   1de30:	e7f6      	b.n	1de20 <net_if_is_up+0x14>
   1de32:	2000      	movs	r0, #0
}
   1de34:	4770      	bx	lr
	return net_if_flag_is_set(iface, NET_IF_UP) &&
   1de36:	2000      	movs	r0, #0
   1de38:	e7f2      	b.n	1de20 <net_if_is_up+0x14>

0001de3a <offload_connect>:
{
   1de3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!context || !addr) {
   1de3c:	b388      	cbz	r0, 1dea2 <offload_connect+0x68>
   1de3e:	461d      	mov	r5, r3
   1de40:	4607      	mov	r7, r0
   1de42:	b389      	cbz	r1, 1dea8 <offload_connect+0x6e>
	sock = (struct hl7800_socket *)context->offload_context;
   1de44:	f8d0 4080 	ldr.w	r4, [r0, #128]	; 0x80
	if (!sock) {
   1de48:	b38c      	cbz	r4, 1deae <offload_connect+0x74>
	if (sock->socket_id < 1) {
   1de4a:	69e3      	ldr	r3, [r4, #28]
   1de4c:	2b00      	cmp	r3, #0
   1de4e:	dd31      	ble.n	1deb4 <offload_connect+0x7a>
	sock->dst.sa_family = addr->sa_family;
   1de50:	880b      	ldrh	r3, [r1, #0]
   1de52:	8223      	strh	r3, [r4, #16]
		if (addr->sa_family == AF_INET) {
   1de54:	2b01      	cmp	r3, #1
   1de56:	d130      	bne.n	1deba <offload_connect+0x80>
		net_ipaddr_copy(&net_sin(&sock->dst)->sin_addr,
   1de58:	684b      	ldr	r3, [r1, #4]
   1de5a:	6163      	str	r3, [r4, #20]
		dst_port = ntohs(net_sin(addr)->sin_port);
   1de5c:	884b      	ldrh	r3, [r1, #2]
   1de5e:	021a      	lsls	r2, r3, #8
   1de60:	b212      	sxth	r2, r2
   1de62:	ea42 2213 	orr.w	r2, r2, r3, lsr #8
		net_sin(&sock->dst)->sin_port = dst_port;
   1de66:	8262      	strh	r2, [r4, #18]
	hl7800_lock();
   1de68:	f7ff fd76 	bl	1d958 <hl7800_lock>
	if (sock->type == SOCK_STREAM) {
   1de6c:	79a3      	ldrb	r3, [r4, #6]
   1de6e:	2b01      	cmp	r3, #1
   1de70:	d009      	beq.n	1de86 <offload_connect+0x4c>
	int ret = 0;
   1de72:	2600      	movs	r6, #0
	hl7800_unlock();
   1de74:	f7ff fd76 	bl	1d964 <hl7800_unlock>
	if (cb) {
   1de78:	b11d      	cbz	r5, 1de82 <offload_connect+0x48>
		cb(context, ret, user_data);
   1de7a:	9a07      	ldr	r2, [sp, #28]
   1de7c:	4631      	mov	r1, r6
   1de7e:	4638      	mov	r0, r7
   1de80:	47a8      	blx	r5
}
   1de82:	4630      	mov	r0, r6
   1de84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		reconfigure_IP_connection();
   1de86:	f7ed f889 	bl	af9c <reconfigure_IP_connection>
		if (!sock->created) {
   1de8a:	7e23      	ldrb	r3, [r4, #24]
   1de8c:	b923      	cbnz	r3, 1de98 <offload_connect+0x5e>
			ret = configure_TCP_socket(sock);
   1de8e:	4620      	mov	r0, r4
   1de90:	f7ef fbe2 	bl	d658 <configure_TCP_socket>
			if (ret < 0) {
   1de94:	1e06      	subs	r6, r0, #0
   1de96:	dbed      	blt.n	1de74 <offload_connect+0x3a>
		ret = connect_TCP_socket(sock);
   1de98:	4620      	mov	r0, r4
   1de9a:	f7ed f95f 	bl	b15c <connect_TCP_socket>
   1de9e:	4606      	mov	r6, r0
done:
   1dea0:	e7e8      	b.n	1de74 <offload_connect+0x3a>
		return -EINVAL;
   1dea2:	f06f 0615 	mvn.w	r6, #21
   1dea6:	e7ec      	b.n	1de82 <offload_connect+0x48>
   1dea8:	f06f 0615 	mvn.w	r6, #21
   1deac:	e7e9      	b.n	1de82 <offload_connect+0x48>
		return -EINVAL;
   1deae:	f06f 0615 	mvn.w	r6, #21
   1deb2:	e7e6      	b.n	1de82 <offload_connect+0x48>
		return -EINVAL;
   1deb4:	f06f 0615 	mvn.w	r6, #21
   1deb8:	e7e3      	b.n	1de82 <offload_connect+0x48>
		return -EINVAL;
   1deba:	f06f 0615 	mvn.w	r6, #21
   1debe:	e7e0      	b.n	1de82 <offload_connect+0x48>

0001dec0 <get_next_time_string_digit>:
{
   1dec0:	b570      	push	{r4, r5, r6, lr}
   1dec2:	b082      	sub	sp, #8
   1dec4:	4604      	mov	r4, r0
   1dec6:	468c      	mov	ip, r1
   1dec8:	4616      	mov	r6, r2
   1deca:	461d      	mov	r5, r3
	memset(digits, 0, sizeof(digits));
   1decc:	2100      	movs	r1, #0
   1dece:	f8ad 1004 	strh.w	r1, [sp, #4]
   1ded2:	f88d 1006 	strb.w	r1, [sp, #6]
	memcpy(digits, *pp, TIME_STRING_DIGIT_STRLEN);
   1ded6:	f8dc 3000 	ldr.w	r3, [ip]
   1deda:	f833 2b03 	ldrh.w	r2, [r3], #3
   1dede:	f8ad 2004 	strh.w	r2, [sp, #4]
	*pp += TIME_STRING_DIGIT_STRLEN + TIME_STRING_SEPARATOR_STRLEN;
   1dee2:	f8cc 3000 	str.w	r3, [ip]
	result = strtol(digits, NULL, 10);
   1dee6:	220a      	movs	r2, #10
   1dee8:	a801      	add	r0, sp, #4
   1deea:	f7f4 ff2f 	bl	12d4c <strtol>
	if (result > max) {
   1deee:	42a8      	cmp	r0, r5
   1def0:	dc06      	bgt.n	1df00 <get_next_time_string_digit+0x40>
	} else if (result < min) {
   1def2:	42b0      	cmp	r0, r6
   1def4:	da08      	bge.n	1df08 <get_next_time_string_digit+0x48>
		*failure_cnt += 1;
   1def6:	6823      	ldr	r3, [r4, #0]
   1def8:	3301      	adds	r3, #1
   1defa:	6023      	str	r3, [r4, #0]
		return min;
   1defc:	4630      	mov	r0, r6
   1defe:	e003      	b.n	1df08 <get_next_time_string_digit+0x48>
		*failure_cnt += 1;
   1df00:	6823      	ldr	r3, [r4, #0]
   1df02:	3301      	adds	r3, #1
   1df04:	6023      	str	r3, [r4, #0]
		return max;
   1df06:	4628      	mov	r0, r5
}
   1df08:	b002      	add	sp, #8
   1df0a:	bd70      	pop	{r4, r5, r6, pc}

0001df0c <convert_time_string_to_struct>:
{
   1df0c:	b570      	push	{r4, r5, r6, lr}
   1df0e:	b082      	sub	sp, #8
   1df10:	4604      	mov	r4, r0
   1df12:	460e      	mov	r6, r1
   1df14:	4615      	mov	r5, r2
	int fc = 0;
   1df16:	2300      	movs	r3, #0
   1df18:	9301      	str	r3, [sp, #4]
	char *ptr = time_string;
   1df1a:	9200      	str	r2, [sp, #0]
	if (!valid_time_string(ptr)) {
   1df1c:	4610      	mov	r0, r2
   1df1e:	f7ec fe43 	bl	aba8 <valid_time_string>
   1df22:	4603      	mov	r3, r0
   1df24:	b910      	cbnz	r0, 1df2c <convert_time_string_to_struct+0x20>
}
   1df26:	4618      	mov	r0, r3
   1df28:	b002      	add	sp, #8
   1df2a:	bd70      	pop	{r4, r5, r6, pc}
	ptr = &ptr[TIME_STRING_FIRST_DIGIT_INDEX];
   1df2c:	1c6b      	adds	r3, r5, #1
   1df2e:	9300      	str	r3, [sp, #0]
		      get_next_time_string_digit(&fc, &ptr, TM_YEAR_RANGE);
   1df30:	2363      	movs	r3, #99	; 0x63
   1df32:	2200      	movs	r2, #0
   1df34:	4669      	mov	r1, sp
   1df36:	a801      	add	r0, sp, #4
   1df38:	f7ff ffc2 	bl	1dec0 <get_next_time_string_digit>
	tm->tm_year = TIME_STRING_TO_TM_STRUCT_YEAR_OFFSET +
   1df3c:	3064      	adds	r0, #100	; 0x64
   1df3e:	6160      	str	r0, [r4, #20]
		get_next_time_string_digit(&fc, &ptr, TM_MONTH_RANGE_PLUS_1) -
   1df40:	230c      	movs	r3, #12
   1df42:	2201      	movs	r2, #1
   1df44:	4669      	mov	r1, sp
   1df46:	a801      	add	r0, sp, #4
   1df48:	f7ff ffba 	bl	1dec0 <get_next_time_string_digit>
   1df4c:	3801      	subs	r0, #1
	tm->tm_mon =
   1df4e:	6120      	str	r0, [r4, #16]
	tm->tm_mday = get_next_time_string_digit(&fc, &ptr, TM_DAY_RANGE);
   1df50:	231f      	movs	r3, #31
   1df52:	2201      	movs	r2, #1
   1df54:	4669      	mov	r1, sp
   1df56:	a801      	add	r0, sp, #4
   1df58:	f7ff ffb2 	bl	1dec0 <get_next_time_string_digit>
   1df5c:	60e0      	str	r0, [r4, #12]
	tm->tm_hour = get_next_time_string_digit(&fc, &ptr, TM_HOUR_RANGE);
   1df5e:	2317      	movs	r3, #23
   1df60:	2200      	movs	r2, #0
   1df62:	4669      	mov	r1, sp
   1df64:	a801      	add	r0, sp, #4
   1df66:	f7ff ffab 	bl	1dec0 <get_next_time_string_digit>
   1df6a:	60a0      	str	r0, [r4, #8]
	tm->tm_min = get_next_time_string_digit(&fc, &ptr, TM_MIN_RANGE);
   1df6c:	233b      	movs	r3, #59	; 0x3b
   1df6e:	2200      	movs	r2, #0
   1df70:	4669      	mov	r1, sp
   1df72:	a801      	add	r0, sp, #4
   1df74:	f7ff ffa4 	bl	1dec0 <get_next_time_string_digit>
   1df78:	6060      	str	r0, [r4, #4]
	tm->tm_sec = get_next_time_string_digit(&fc, &ptr, TM_SEC_RANGE);
   1df7a:	233c      	movs	r3, #60	; 0x3c
   1df7c:	2200      	movs	r2, #0
   1df7e:	4669      	mov	r1, sp
   1df80:	a801      	add	r0, sp, #4
   1df82:	f7ff ff9d 	bl	1dec0 <get_next_time_string_digit>
   1df86:	6020      	str	r0, [r4, #0]
	tm->tm_isdst = 0;
   1df88:	2200      	movs	r2, #0
   1df8a:	6222      	str	r2, [r4, #32]
	*offset = (int32_t)get_next_time_string_digit(&fc, &ptr,
   1df8c:	2360      	movs	r3, #96	; 0x60
   1df8e:	4669      	mov	r1, sp
   1df90:	a801      	add	r0, sp, #4
   1df92:	f7ff ff95 	bl	1dec0 <get_next_time_string_digit>
						      QUARTER_HOUR_RANGE) *
   1df96:	f44f 7361 	mov.w	r3, #900	; 0x384
   1df9a:	fb03 f000 	mul.w	r0, r3, r0
	*offset = (int32_t)get_next_time_string_digit(&fc, &ptr,
   1df9e:	6030      	str	r0, [r6, #0]
	if (time_string[TIME_STRING_PLUS_MINUS_INDEX] == '-') {
   1dfa0:	7cab      	ldrb	r3, [r5, #18]
   1dfa2:	2b2d      	cmp	r3, #45	; 0x2d
   1dfa4:	d004      	beq.n	1dfb0 <convert_time_string_to_struct+0xa4>
	return (fc == 0);
   1dfa6:	9b01      	ldr	r3, [sp, #4]
   1dfa8:	fab3 f383 	clz	r3, r3
   1dfac:	095b      	lsrs	r3, r3, #5
   1dfae:	e7ba      	b.n	1df26 <convert_time_string_to_struct+0x1a>
		*offset *= -1;
   1dfb0:	4240      	negs	r0, r0
   1dfb2:	6030      	str	r0, [r6, #0]
   1dfb4:	e7f7      	b.n	1dfa6 <convert_time_string_to_struct+0x9a>

0001dfb6 <mdm_hl7800_reset>:
{
   1dfb6:	b510      	push	{r4, lr}
	hl7800_lock();
   1dfb8:	f7ff fcce 	bl	1d958 <hl7800_lock>
	ret = modem_reset_and_configure();
   1dfbc:	f7ed fb40 	bl	b640 <modem_reset_and_configure>
   1dfc0:	4604      	mov	r4, r0
	hl7800_unlock();
   1dfc2:	f7ff fccf 	bl	1d964 <hl7800_unlock>
}
   1dfc6:	4620      	mov	r0, r4
   1dfc8:	bd10      	pop	{r4, pc}

0001dfca <mdm_reset_work_callback>:
{
   1dfca:	b508      	push	{r3, lr}
	mdm_hl7800_reset();
   1dfcc:	f7ff fff3 	bl	1dfb6 <mdm_hl7800_reset>
}
   1dfd0:	bd08      	pop	{r3, pc}

0001dfd2 <uart_nrfx_config_get>:
{
   1dfd2:	460b      	mov	r3, r1
	struct uart_nrfx_data *data = dev->data;
   1dfd4:	6902      	ldr	r2, [r0, #16]
	*cfg = data->uart_config;
   1dfd6:	e892 0003 	ldmia.w	r2, {r0, r1}
   1dfda:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1dfde:	2000      	movs	r0, #0
   1dfe0:	4770      	bx	lr

0001dfe2 <uart_nrfx_irq_update>:
}
   1dfe2:	2001      	movs	r0, #1
   1dfe4:	4770      	bx	lr

0001dfe6 <k_msleep>:
{
   1dfe6:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   1dfe8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   1dfec:	17c1      	asrs	r1, r0, #31
   1dfee:	03c9      	lsls	r1, r1, #15
   1dff0:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   1dff4:	03c0      	lsls	r0, r0, #15
   1dff6:	f240 33e7 	movw	r3, #999	; 0x3e7
   1dffa:	18c0      	adds	r0, r0, r3
   1dffc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1e000:	f04f 0300 	mov.w	r3, #0
   1e004:	f141 0100 	adc.w	r1, r1, #0
   1e008:	f7e2 fc98 	bl	93c <__aeabi_uldivmod>
   1e00c:	f7f3 fe44 	bl	11c98 <z_impl_k_sleep>
}
   1e010:	bd08      	pop	{r3, pc}

0001e012 <pinctrl_apply_state>:
 * @retval -ENOENT If given state id does not exist.
 * @retval -errno Negative errno for other failures.
 */
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
				      uint8_t id)
{
   1e012:	b510      	push	{r4, lr}
   1e014:	b082      	sub	sp, #8
   1e016:	4604      	mov	r4, r0
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   1e018:	aa01      	add	r2, sp, #4
   1e01a:	f000 fb65 	bl	1e6e8 <pinctrl_lookup_state>
	if (ret < 0) {
   1e01e:	2800      	cmp	r0, #0
   1e020:	db05      	blt.n	1e02e <pinctrl_apply_state+0x1c>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   1e022:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1e024:	6822      	ldr	r2, [r4, #0]
   1e026:	7919      	ldrb	r1, [r3, #4]
   1e028:	6818      	ldr	r0, [r3, #0]
   1e02a:	f7f0 fb17 	bl	e65c <pinctrl_configure_pins>
}
   1e02e:	b002      	add	sp, #8
   1e030:	bd10      	pop	{r4, pc}

0001e032 <endtx_isr>:
	const struct uarte_nrfx_config *config = dev->config;
   1e032:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1e034:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   1e036:	f04f 0120 	mov.w	r1, #32
   1e03a:	f3ef 8311 	mrs	r3, BASEPRI
   1e03e:	f381 8812 	msr	BASEPRI_MAX, r1
   1e042:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e046:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1e04a:	b131      	cbz	r1, 1e05a <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e04c:	2100      	movs	r1, #0
   1e04e:	f8c2 1120 	str.w	r1, [r2, #288]	; 0x120
   1e052:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e056:	2101      	movs	r1, #1
   1e058:	60d1      	str	r1, [r2, #12]
	__asm__ volatile(
   1e05a:	f383 8811 	msr	BASEPRI, r3
   1e05e:	f3bf 8f6f 	isb	sy
}
   1e062:	4770      	bx	lr

0001e064 <uarte_nrfx_isr_int>:
{
   1e064:	b570      	push	{r4, r5, r6, lr}
   1e066:	4604      	mov	r4, r0
	const struct uarte_nrfx_config *config = dev->config;
   1e068:	6846      	ldr	r6, [r0, #4]
	return config->uarte_regs;
   1e06a:	6835      	ldr	r5, [r6, #0]
    return p_reg->INTENSET & mask;
   1e06c:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   1e070:	f413 7f80 	tst.w	r3, #256	; 0x100
   1e074:	d003      	beq.n	1e07e <uarte_nrfx_isr_int+0x1a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e076:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
   1e07a:	2b00      	cmp	r3, #0
   1e07c:	d138      	bne.n	1e0f0 <uarte_nrfx_isr_int+0x8c>
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1e07e:	6873      	ldr	r3, [r6, #4]
   1e080:	f013 0f10 	tst.w	r3, #16
   1e084:	d01a      	beq.n	1e0bc <uarte_nrfx_isr_int+0x58>
	__asm__ volatile(
   1e086:	f04f 0220 	mov.w	r2, #32
   1e08a:	f3ef 8311 	mrs	r3, BASEPRI
   1e08e:	f382 8812 	msr	BASEPRI_MAX, r2
   1e092:	f3bf 8f6f 	isb	sy
   1e096:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   1e09a:	b112      	cbz	r2, 1e0a2 <uarte_nrfx_isr_int+0x3e>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1e09c:	2200      	movs	r2, #0
   1e09e:	f8c5 2500 	str.w	r2, [r5, #1280]	; 0x500
		struct uarte_nrfx_data *data = dev->data;
   1e0a2:	6922      	ldr	r2, [r4, #16]
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
   1e0a4:	68d2      	ldr	r2, [r2, #12]
   1e0a6:	b10a      	cbz	r2, 1e0ac <uarte_nrfx_isr_int+0x48>
   1e0a8:	6912      	ldr	r2, [r2, #16]
   1e0aa:	b91a      	cbnz	r2, 1e0b4 <uarte_nrfx_isr_int+0x50>
    p_reg->INTENCLR = mask;
   1e0ac:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   1e0b0:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
	__asm__ volatile(
   1e0b4:	f383 8811 	msr	BASEPRI, r3
   1e0b8:	f3bf 8f6f 	isb	sy
	struct uarte_nrfx_data *data = dev->data;
   1e0bc:	6923      	ldr	r3, [r4, #16]
	if (!data->int_driven) {
   1e0be:	68da      	ldr	r2, [r3, #12]
   1e0c0:	b1aa      	cbz	r2, 1e0ee <uarte_nrfx_isr_int+0x8a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e0c2:	f8d5 1158 	ldr.w	r1, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   1e0c6:	b121      	cbz	r1, 1e0d2 <uarte_nrfx_isr_int+0x6e>
		data->int_driven->fifo_fill_lock = 0;
   1e0c8:	2100      	movs	r1, #0
   1e0ca:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
   1e0cc:	68da      	ldr	r2, [r3, #12]
   1e0ce:	7b92      	ldrb	r2, [r2, #14]
   1e0d0:	b98a      	cbnz	r2, 1e0f6 <uarte_nrfx_isr_int+0x92>
   1e0d2:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   1e0d6:	b122      	cbz	r2, 1e0e2 <uarte_nrfx_isr_int+0x7e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e0d8:	2200      	movs	r2, #0
   1e0da:	f8c5 2124 	str.w	r2, [r5, #292]	; 0x124
   1e0de:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
	if (data->int_driven->cb) {
   1e0e2:	68da      	ldr	r2, [r3, #12]
   1e0e4:	6813      	ldr	r3, [r2, #0]
   1e0e6:	b113      	cbz	r3, 1e0ee <uarte_nrfx_isr_int+0x8a>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   1e0e8:	6851      	ldr	r1, [r2, #4]
   1e0ea:	4620      	mov	r0, r4
   1e0ec:	4798      	blx	r3
}
   1e0ee:	bd70      	pop	{r4, r5, r6, pc}
		endtx_isr(dev);
   1e0f0:	f7ff ff9f 	bl	1e032 <endtx_isr>
   1e0f4:	e7c3      	b.n	1e07e <uarte_nrfx_isr_int+0x1a>
    p_reg->INTENCLR = mask;
   1e0f6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   1e0fa:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   1e0fe:	68db      	ldr	r3, [r3, #12]
   1e100:	7399      	strb	r1, [r3, #14]
			return;
   1e102:	e7f4      	b.n	1e0ee <uarte_nrfx_isr_int+0x8a>

0001e104 <uarte_nrfx_configure>:
{
   1e104:	b570      	push	{r4, r5, r6, lr}
   1e106:	b082      	sub	sp, #8
   1e108:	4606      	mov	r6, r0
   1e10a:	460c      	mov	r4, r1
	struct uarte_nrfx_data *data = dev->data;
   1e10c:	6905      	ldr	r5, [r0, #16]
	switch (cfg->stop_bits) {
   1e10e:	794b      	ldrb	r3, [r1, #5]
   1e110:	2b01      	cmp	r3, #1
   1e112:	d006      	beq.n	1e122 <uarte_nrfx_configure+0x1e>
   1e114:	2b03      	cmp	r3, #3
   1e116:	d011      	beq.n	1e13c <uarte_nrfx_configure+0x38>
   1e118:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
   1e11c:	4618      	mov	r0, r3
   1e11e:	b002      	add	sp, #8
   1e120:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   1e122:	2300      	movs	r3, #0
   1e124:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1e128:	79a3      	ldrb	r3, [r4, #6]
   1e12a:	2b03      	cmp	r3, #3
   1e12c:	d137      	bne.n	1e19e <uarte_nrfx_configure+0x9a>
	switch (cfg->flow_ctrl) {
   1e12e:	79e3      	ldrb	r3, [r4, #7]
   1e130:	b143      	cbz	r3, 1e144 <uarte_nrfx_configure+0x40>
   1e132:	2b01      	cmp	r3, #1
   1e134:	d010      	beq.n	1e158 <uarte_nrfx_configure+0x54>
   1e136:	f06f 0385 	mvn.w	r3, #133	; 0x85
   1e13a:	e7ef      	b.n	1e11c <uarte_nrfx_configure+0x18>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1e13c:	2310      	movs	r3, #16
   1e13e:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
   1e142:	e7f1      	b.n	1e128 <uarte_nrfx_configure+0x24>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
   1e144:	2300      	movs	r3, #0
   1e146:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
   1e14a:	7923      	ldrb	r3, [r4, #4]
   1e14c:	b143      	cbz	r3, 1e160 <uarte_nrfx_configure+0x5c>
   1e14e:	2b02      	cmp	r3, #2
   1e150:	d021      	beq.n	1e196 <uarte_nrfx_configure+0x92>
   1e152:	f06f 0385 	mvn.w	r3, #133	; 0x85
   1e156:	e7e1      	b.n	1e11c <uarte_nrfx_configure+0x18>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
   1e158:	2301      	movs	r3, #1
   1e15a:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
   1e15e:	e7f4      	b.n	1e14a <uarte_nrfx_configure+0x46>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
   1e160:	2300      	movs	r3, #0
   1e162:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1e166:	6821      	ldr	r1, [r4, #0]
   1e168:	4630      	mov	r0, r6
   1e16a:	f7ef fda1 	bl	dcb0 <baudrate_set>
   1e16e:	4603      	mov	r3, r0
   1e170:	b9c0      	cbnz	r0, 1e1a4 <uarte_nrfx_configure+0xa0>
	const struct uarte_nrfx_config *config = dev->config;
   1e172:	6872      	ldr	r2, [r6, #4]
	return config->uarte_regs;
   1e174:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1e176:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
   1e17a:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
   1e17e:	f89d 2004 	ldrb.w	r2, [sp, #4]
   1e182:	4331      	orrs	r1, r6
   1e184:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1e186:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	data->uart_config = *cfg;
   1e18a:	3504      	adds	r5, #4
   1e18c:	e894 0003 	ldmia.w	r4, {r0, r1}
   1e190:	e885 0003 	stmia.w	r5, {r0, r1}
	return 0;
   1e194:	e7c2      	b.n	1e11c <uarte_nrfx_configure+0x18>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1e196:	230e      	movs	r3, #14
   1e198:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
   1e19c:	e7e3      	b.n	1e166 <uarte_nrfx_configure+0x62>
		return -ENOTSUP;
   1e19e:	f06f 0385 	mvn.w	r3, #133	; 0x85
   1e1a2:	e7bb      	b.n	1e11c <uarte_nrfx_configure+0x18>
		return -ENOTSUP;
   1e1a4:	f06f 0385 	mvn.w	r3, #133	; 0x85
   1e1a8:	e7b8      	b.n	1e11c <uarte_nrfx_configure+0x18>

0001e1aa <uarte_nrfx_config_get>:
{
   1e1aa:	460a      	mov	r2, r1
	struct uarte_nrfx_data *data = dev->data;
   1e1ac:	6903      	ldr	r3, [r0, #16]
	*cfg = data->uart_config;
   1e1ae:	3304      	adds	r3, #4
   1e1b0:	e893 0003 	ldmia.w	r3, {r0, r1}
   1e1b4:	e882 0003 	stmia.w	r2, {r0, r1}
}
   1e1b8:	2000      	movs	r0, #0
   1e1ba:	4770      	bx	lr

0001e1bc <uarte_nrfx_err_check>:
	const struct uarte_nrfx_config *config = dev->config;
   1e1bc:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1e1be:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1e1c0:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1e1c4:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1e1c8:	4770      	bx	lr

0001e1ca <is_tx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
   1e1ca:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1e1cc:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   1e1ce:	685b      	ldr	r3, [r3, #4]
   1e1d0:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e1d4:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1e1d8:	b929      	cbnz	r1, 1e1e6 <is_tx_ready+0x1c>
   1e1da:	b933      	cbnz	r3, 1e1ea <is_tx_ready+0x20>
   1e1dc:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
   1e1e0:	b92b      	cbnz	r3, 1e1ee <is_tx_ready+0x24>
   1e1e2:	2000      	movs	r0, #0
   1e1e4:	4770      	bx	lr
   1e1e6:	2001      	movs	r0, #1
   1e1e8:	4770      	bx	lr
   1e1ea:	2000      	movs	r0, #0
   1e1ec:	4770      	bx	lr
   1e1ee:	2001      	movs	r0, #1
}
   1e1f0:	4770      	bx	lr

0001e1f2 <uarte_enable>:
	const struct uarte_nrfx_config *config = dev->config;
   1e1f2:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1e1f4:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1e1f6:	2208      	movs	r2, #8
   1e1f8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   1e1fc:	4770      	bx	lr

0001e1fe <tx_start>:
{
   1e1fe:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
   1e200:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1e202:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1e204:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1e208:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e20c:	2200      	movs	r2, #0
   1e20e:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
   1e212:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
   1e216:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
   1e21a:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1e21e:	685b      	ldr	r3, [r3, #4]
   1e220:	f013 0f10 	tst.w	r3, #16
   1e224:	d102      	bne.n	1e22c <tx_start+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e226:	2301      	movs	r3, #1
   1e228:	60a3      	str	r3, [r4, #8]
}
   1e22a:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
   1e22c:	2101      	movs	r1, #1
   1e22e:	f7ff ffe0 	bl	1e1f2 <uarte_enable>
    p_reg->INTENSET = mask;
   1e232:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1e236:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   1e23a:	e7f4      	b.n	1e226 <tx_start+0x28>

0001e23c <uarte_nrfx_poll_in>:
{
   1e23c:	b410      	push	{r4}
	const struct uarte_nrfx_data *data = dev->data;
   1e23e:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
   1e240:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1e242:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e244:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1e248:	b15a      	cbz	r2, 1e262 <uarte_nrfx_poll_in+0x26>
	*c = *data->rx_data;
   1e24a:	69a2      	ldr	r2, [r4, #24]
   1e24c:	7812      	ldrb	r2, [r2, #0]
   1e24e:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e250:	2000      	movs	r0, #0
   1e252:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1e256:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e25a:	2201      	movs	r2, #1
   1e25c:	601a      	str	r2, [r3, #0]
}
   1e25e:	bc10      	pop	{r4}
   1e260:	4770      	bx	lr
		return -1;
   1e262:	f04f 30ff 	mov.w	r0, #4294967295
   1e266:	e7fa      	b.n	1e25e <uarte_nrfx_poll_in+0x22>

0001e268 <uarte_nrfx_fifo_read>:
	const struct uarte_nrfx_config *config = dev->config;
   1e268:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1e26a:	681b      	ldr	r3, [r3, #0]
	const struct uarte_nrfx_data *data = dev->data;
   1e26c:	6900      	ldr	r0, [r0, #16]
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1e26e:	2a00      	cmp	r2, #0
   1e270:	dd0d      	ble.n	1e28e <uarte_nrfx_fifo_read+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e272:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   1e276:	b162      	cbz	r2, 1e292 <uarte_nrfx_fifo_read+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e278:	2200      	movs	r2, #0
   1e27a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   1e27e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
		rx_data[num_rx++] = *data->rx_data;
   1e282:	6982      	ldr	r2, [r0, #24]
   1e284:	7812      	ldrb	r2, [r2, #0]
   1e286:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e288:	2001      	movs	r0, #1
   1e28a:	6018      	str	r0, [r3, #0]
}
   1e28c:	4770      	bx	lr
	int num_rx = 0;
   1e28e:	2000      	movs	r0, #0
   1e290:	4770      	bx	lr
   1e292:	2000      	movs	r0, #0
}
   1e294:	4770      	bx	lr

0001e296 <uarte_nrfx_irq_tx_enable>:
	const struct uarte_nrfx_config *config = dev->config;
   1e296:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1e298:	681a      	ldr	r2, [r3, #0]
	struct uarte_nrfx_data *data = dev->data;
   1e29a:	6901      	ldr	r1, [r0, #16]
	__asm__ volatile(
   1e29c:	f04f 0020 	mov.w	r0, #32
   1e2a0:	f3ef 8311 	mrs	r3, BASEPRI
   1e2a4:	f380 8812 	msr	BASEPRI_MAX, r0
   1e2a8:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   1e2ac:	68c9      	ldr	r1, [r1, #12]
   1e2ae:	2000      	movs	r0, #0
   1e2b0:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   1e2b2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   1e2b6:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   1e2ba:	f383 8811 	msr	BASEPRI, r3
   1e2be:	f3bf 8f6f 	isb	sy
}
   1e2c2:	4770      	bx	lr

0001e2c4 <uarte_nrfx_irq_tx_disable>:
	struct uarte_nrfx_data *data = dev->data;
   1e2c4:	6903      	ldr	r3, [r0, #16]
	data->int_driven->disable_tx_irq = true;
   1e2c6:	68db      	ldr	r3, [r3, #12]
   1e2c8:	2201      	movs	r2, #1
   1e2ca:	739a      	strb	r2, [r3, #14]
}
   1e2cc:	4770      	bx	lr

0001e2ce <uarte_nrfx_irq_tx_ready_complete>:
	const struct uarte_nrfx_config *config = dev->config;
   1e2ce:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1e2d0:	6819      	ldr	r1, [r3, #0]
	struct uarte_nrfx_data *data = dev->data;
   1e2d2:	6903      	ldr	r3, [r0, #16]
	bool ready = !data->int_driven->disable_tx_irq &&
   1e2d4:	68db      	ldr	r3, [r3, #12]
   1e2d6:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   1e2d8:	b95a      	cbnz	r2, 1e2f2 <uarte_nrfx_irq_tx_ready_complete+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e2da:	f8d1 2158 	ldr.w	r2, [r1, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   1e2de:	b152      	cbz	r2, 1e2f6 <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
   1e2e0:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   1e2e4:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
   1e2e8:	d007      	beq.n	1e2fa <uarte_nrfx_irq_tx_ready_complete+0x2c>
		data->int_driven->fifo_fill_lock = 0;
   1e2ea:	2200      	movs	r2, #0
   1e2ec:	611a      	str	r2, [r3, #16]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   1e2ee:	2001      	movs	r0, #1
   1e2f0:	4770      	bx	lr
   1e2f2:	2000      	movs	r0, #0
   1e2f4:	4770      	bx	lr
   1e2f6:	2000      	movs	r0, #0
   1e2f8:	4770      	bx	lr
   1e2fa:	2000      	movs	r0, #0
}
   1e2fc:	4770      	bx	lr

0001e2fe <uarte_nrfx_irq_rx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
   1e2fe:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1e300:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e302:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   1e306:	3800      	subs	r0, #0
   1e308:	bf18      	it	ne
   1e30a:	2001      	movne	r0, #1
   1e30c:	4770      	bx	lr

0001e30e <uarte_nrfx_irq_rx_enable>:
	const struct uarte_nrfx_config *config = dev->config;
   1e30e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1e310:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1e312:	2210      	movs	r2, #16
   1e314:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1e318:	4770      	bx	lr

0001e31a <uarte_nrfx_irq_rx_disable>:
	const struct uarte_nrfx_config *config = dev->config;
   1e31a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1e31c:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   1e31e:	2210      	movs	r2, #16
   1e320:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1e324:	4770      	bx	lr

0001e326 <uarte_nrfx_irq_err_enable>:
	const struct uarte_nrfx_config *config = dev->config;
   1e326:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1e328:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1e32a:	f44f 7200 	mov.w	r2, #512	; 0x200
   1e32e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1e332:	4770      	bx	lr

0001e334 <uarte_nrfx_irq_err_disable>:
	const struct uarte_nrfx_config *config = dev->config;
   1e334:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1e336:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   1e338:	f44f 7200 	mov.w	r2, #512	; 0x200
   1e33c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1e340:	4770      	bx	lr

0001e342 <uarte_nrfx_irq_is_pending>:
{
   1e342:	b538      	push	{r3, r4, r5, lr}
   1e344:	4604      	mov	r4, r0
	const struct uarte_nrfx_config *config = dev->config;
   1e346:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1e348:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   1e34a:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   1e34e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
   1e352:	d106      	bne.n	1e362 <uarte_nrfx_irq_is_pending+0x20>
   1e354:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
   1e358:	f013 0f10 	tst.w	r3, #16
   1e35c:	d107      	bne.n	1e36e <uarte_nrfx_irq_is_pending+0x2c>
   1e35e:	2000      	movs	r0, #0
}
   1e360:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   1e362:	f7ff ffb4 	bl	1e2ce <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   1e366:	2800      	cmp	r0, #0
   1e368:	d0f4      	beq.n	1e354 <uarte_nrfx_irq_is_pending+0x12>
		||
   1e36a:	2001      	movs	r0, #1
   1e36c:	e7f8      	b.n	1e360 <uarte_nrfx_irq_is_pending+0x1e>
		 uarte_nrfx_irq_rx_ready(dev)));
   1e36e:	4620      	mov	r0, r4
   1e370:	f7ff ffc5 	bl	1e2fe <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   1e374:	2800      	cmp	r0, #0
   1e376:	d0f3      	beq.n	1e360 <uarte_nrfx_irq_is_pending+0x1e>
		||
   1e378:	2001      	movs	r0, #1
   1e37a:	e7f1      	b.n	1e360 <uarte_nrfx_irq_is_pending+0x1e>

0001e37c <uarte_nrfx_irq_update>:
}
   1e37c:	2001      	movs	r0, #1
   1e37e:	4770      	bx	lr

0001e380 <uarte_nrfx_irq_callback_set>:
	struct uarte_nrfx_data *data = dev->data;
   1e380:	6903      	ldr	r3, [r0, #16]
	data->int_driven->cb = cb;
   1e382:	68d8      	ldr	r0, [r3, #12]
   1e384:	6001      	str	r1, [r0, #0]
	data->int_driven->cb_data = cb_data;
   1e386:	68db      	ldr	r3, [r3, #12]
   1e388:	605a      	str	r2, [r3, #4]
}
   1e38a:	4770      	bx	lr

0001e38c <uarte_nrfx_fifo_fill>:
{
   1e38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e38e:	4606      	mov	r6, r0
	struct uarte_nrfx_data *data = dev->data;
   1e390:	6907      	ldr	r7, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
   1e392:	68fb      	ldr	r3, [r7, #12]
   1e394:	899c      	ldrh	r4, [r3, #12]
   1e396:	4294      	cmp	r4, r2
   1e398:	bfa8      	it	ge
   1e39a:	4614      	movge	r4, r2
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   1e39c:	3310      	adds	r3, #16
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1e39e:	2201      	movs	r2, #1
   1e3a0:	f3bf 8f5b 	dmb	ish
   1e3a4:	e853 0f00 	ldrex	r0, [r3]
   1e3a8:	2800      	cmp	r0, #0
   1e3aa:	d103      	bne.n	1e3b4 <uarte_nrfx_fifo_fill+0x28>
   1e3ac:	e843 2500 	strex	r5, r2, [r3]
   1e3b0:	2d00      	cmp	r5, #0
   1e3b2:	d1f7      	bne.n	1e3a4 <uarte_nrfx_fifo_fill+0x18>
   1e3b4:	f3bf 8f5b 	dmb	ish
   1e3b8:	d120      	bne.n	1e3fc <uarte_nrfx_fifo_fill+0x70>
	memcpy(data->int_driven->tx_buffer, tx_data, len);
   1e3ba:	68fb      	ldr	r3, [r7, #12]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1e3bc:	4622      	mov	r2, r4
   1e3be:	6898      	ldr	r0, [r3, #8]
   1e3c0:	f001 fcff 	bl	1fdc2 <memcpy>
	__asm__ volatile(
   1e3c4:	f04f 0320 	mov.w	r3, #32
   1e3c8:	f3ef 8511 	mrs	r5, BASEPRI
   1e3cc:	f383 8812 	msr	BASEPRI_MAX, r3
   1e3d0:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   1e3d4:	4630      	mov	r0, r6
   1e3d6:	f7ff fef8 	bl	1e1ca <is_tx_ready>
   1e3da:	b940      	cbnz	r0, 1e3ee <uarte_nrfx_fifo_fill+0x62>
		data->int_driven->fifo_fill_lock = 0;
   1e3dc:	68fb      	ldr	r3, [r7, #12]
   1e3de:	2400      	movs	r4, #0
   1e3e0:	611c      	str	r4, [r3, #16]
	__asm__ volatile(
   1e3e2:	f385 8811 	msr	BASEPRI, r5
   1e3e6:	f3bf 8f6f 	isb	sy
}
   1e3ea:	4620      	mov	r0, r4
   1e3ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx_start(dev, data->int_driven->tx_buffer, len);
   1e3ee:	68fb      	ldr	r3, [r7, #12]
   1e3f0:	4622      	mov	r2, r4
   1e3f2:	6899      	ldr	r1, [r3, #8]
   1e3f4:	4630      	mov	r0, r6
   1e3f6:	f7ff ff02 	bl	1e1fe <tx_start>
   1e3fa:	e7f2      	b.n	1e3e2 <uarte_nrfx_fifo_fill+0x56>
		return 0;
   1e3fc:	2400      	movs	r4, #0
   1e3fe:	e7f4      	b.n	1e3ea <uarte_nrfx_fifo_fill+0x5e>

0001e400 <k_msleep>:
{
   1e400:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   1e402:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   1e406:	17c1      	asrs	r1, r0, #31
   1e408:	03c9      	lsls	r1, r1, #15
   1e40a:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   1e40e:	03c0      	lsls	r0, r0, #15
   1e410:	f240 33e7 	movw	r3, #999	; 0x3e7
   1e414:	18c0      	adds	r0, r0, r3
   1e416:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1e41a:	f04f 0300 	mov.w	r3, #0
   1e41e:	f141 0100 	adc.w	r1, r1, #0
   1e422:	f7e2 fa8b 	bl	93c <__aeabi_uldivmod>
   1e426:	f7f3 fc37 	bl	11c98 <z_impl_k_sleep>
}
   1e42a:	bd08      	pop	{r3, pc}

0001e42c <wait_tx_ready>:
{
   1e42c:	b570      	push	{r4, r5, r6, lr}
   1e42e:	4606      	mov	r6, r0
   1e430:	e013      	b.n	1e45a <wait_tx_ready+0x2e>
		if (res) {
   1e432:	b17d      	cbz	r5, 1e454 <wait_tx_ready+0x28>
	__asm__ volatile(
   1e434:	f04f 0320 	mov.w	r3, #32
   1e438:	f3ef 8411 	mrs	r4, BASEPRI
   1e43c:	f383 8812 	msr	BASEPRI_MAX, r3
   1e440:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1e444:	4630      	mov	r0, r6
   1e446:	f7ff fec0 	bl	1e1ca <is_tx_ready>
   1e44a:	b998      	cbnz	r0, 1e474 <wait_tx_ready+0x48>
	__asm__ volatile(
   1e44c:	f384 8811 	msr	BASEPRI, r4
   1e450:	f3bf 8f6f 	isb	sy
			k_msleep(1);
   1e454:	2001      	movs	r0, #1
   1e456:	f7ff ffd3 	bl	1e400 <k_msleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1e45a:	2464      	movs	r4, #100	; 0x64
   1e45c:	4630      	mov	r0, r6
   1e45e:	f7ff feb4 	bl	1e1ca <is_tx_ready>
   1e462:	4605      	mov	r5, r0
   1e464:	2800      	cmp	r0, #0
   1e466:	d1e4      	bne.n	1e432 <wait_tx_ready+0x6>
   1e468:	2001      	movs	r0, #1
   1e46a:	f000 fb69 	bl	1eb40 <nrfx_busy_wait>
   1e46e:	3c01      	subs	r4, #1
   1e470:	d1f4      	bne.n	1e45c <wait_tx_ready+0x30>
   1e472:	e7de      	b.n	1e432 <wait_tx_ready+0x6>
}
   1e474:	4620      	mov	r0, r4
   1e476:	bd70      	pop	{r4, r5, r6, pc}

0001e478 <pinctrl_apply_state>:
{
   1e478:	b510      	push	{r4, lr}
   1e47a:	b082      	sub	sp, #8
   1e47c:	4604      	mov	r4, r0
	ret = pinctrl_lookup_state(config, id, &state);
   1e47e:	aa01      	add	r2, sp, #4
   1e480:	f000 f932 	bl	1e6e8 <pinctrl_lookup_state>
	if (ret < 0) {
   1e484:	2800      	cmp	r0, #0
   1e486:	db05      	blt.n	1e494 <pinctrl_apply_state+0x1c>
	return pinctrl_apply_state_direct(config, state);
   1e488:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1e48a:	6822      	ldr	r2, [r4, #0]
   1e48c:	7919      	ldrb	r1, [r3, #4]
   1e48e:	6818      	ldr	r0, [r3, #0]
   1e490:	f7f0 f8e4 	bl	e65c <pinctrl_configure_pins>
}
   1e494:	b002      	add	sp, #8
   1e496:	bd10      	pop	{r4, pc}

0001e498 <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
   1e498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e49c:	4604      	mov	r4, r0
	const struct uarte_nrfx_config *config = dev->config;
   1e49e:	6847      	ldr	r7, [r0, #4]
	return config->uarte_regs;
   1e4a0:	683e      	ldr	r6, [r7, #0]
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
   1e4a2:	f8d0 8010 	ldr.w	r8, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1e4a6:	2100      	movs	r1, #0
   1e4a8:	f8c6 1500 	str.w	r1, [r6, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
   1e4ac:	f8c8 0000 	str.w	r0, [r8]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   1e4b0:	68f8      	ldr	r0, [r7, #12]
   1e4b2:	f7ff ffe1 	bl	1e478 <pinctrl_apply_state>
	if (err < 0) {
   1e4b6:	1e05      	subs	r5, r0, #0
   1e4b8:	db35      	blt.n	1e526 <uarte_instance_init+0x8e>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
   1e4ba:	f108 0104 	add.w	r1, r8, #4
   1e4be:	4620      	mov	r0, r4
   1e4c0:	f7ff fe20 	bl	1e104 <uarte_nrfx_configure>
	if (err) {
   1e4c4:	4605      	mov	r5, r0
   1e4c6:	bb70      	cbnz	r0, 1e526 <uarte_instance_init+0x8e>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1e4c8:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1e4ca:	f013 0f02 	tst.w	r3, #2
   1e4ce:	d12d      	bne.n	1e52c <uarte_instance_init+0x94>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1e4d0:	2308      	movs	r3, #8
   1e4d2:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
   1e4d6:	7a3b      	ldrb	r3, [r7, #8]
   1e4d8:	b95b      	cbnz	r3, 1e4f2 <uarte_instance_init+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e4da:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
   1e4de:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, data->rx_data, 1);
   1e4e2:	f8d8 3018 	ldr.w	r3, [r8, #24]

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1e4e6:	f8c6 3534 	str.w	r3, [r6, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1e4ea:	2301      	movs	r3, #1
   1e4ec:	f8c6 3538 	str.w	r3, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e4f0:	6033      	str	r3, [r6, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1e4f2:	687b      	ldr	r3, [r7, #4]
   1e4f4:	f013 0f02 	tst.w	r3, #2
   1e4f8:	d103      	bne.n	1e502 <uarte_instance_init+0x6a>
    p_reg->INTENSET = mask;
   1e4fa:	f44f 7380 	mov.w	r3, #256	; 0x100
   1e4fe:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1e502:	687b      	ldr	r3, [r7, #4]
   1e504:	f013 0f10 	tst.w	r3, #16
   1e508:	d003      	beq.n	1e512 <uarte_instance_init+0x7a>
   1e50a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1e50e:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, data->char_out, 0);
   1e512:	f8d8 3014 	ldr.w	r3, [r8, #20]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1e516:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1e51a:	2300      	movs	r3, #0
   1e51c:	f8c6 3548 	str.w	r3, [r6, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e520:	2301      	movs	r3, #1
   1e522:	60b3      	str	r3, [r6, #8]
   1e524:	60f3      	str	r3, [r6, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   1e526:	4628      	mov	r0, r5
   1e528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
   1e52c:	4641      	mov	r1, r8
   1e52e:	4630      	mov	r0, r6
   1e530:	f7ef fc94 	bl	de5c <endtx_stoptx_ppi_init>
		if (err < 0) {
   1e534:	2800      	cmp	r0, #0
   1e536:	dacb      	bge.n	1e4d0 <uarte_instance_init+0x38>
			return err;
   1e538:	4605      	mov	r5, r0
   1e53a:	e7f4      	b.n	1e526 <uarte_instance_init+0x8e>

0001e53c <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   1e53c:	b510      	push	{r4, lr}
   1e53e:	4604      	mov	r4, r0
   1e540:	2200      	movs	r2, #0
   1e542:	2101      	movs	r1, #1
   1e544:	2028      	movs	r0, #40	; 0x28
   1e546:	f7fa fd17 	bl	18f78 <z_arm_irq_priority_set>
   1e54a:	2028      	movs	r0, #40	; 0x28
   1e54c:	f7fa fd0a 	bl	18f64 <arch_irq_enable>
   1e550:	2101      	movs	r1, #1
   1e552:	4620      	mov	r0, r4
   1e554:	f7ff ffa0 	bl	1e498 <uarte_instance_init>
   1e558:	bd10      	pop	{r4, pc}

0001e55a <rng_pool_put>:
	uint8_t first = rngp->first_read;
   1e55a:	7842      	ldrb	r2, [r0, #1]
	uint8_t last  = rngp->last;
   1e55c:	7883      	ldrb	r3, [r0, #2]
	uint8_t mask  = rngp->mask;
   1e55e:	f890 c003 	ldrb.w	ip, [r0, #3]
	if (((last - first) & mask) == mask) {
   1e562:	1a9a      	subs	r2, r3, r2
   1e564:	ea3c 0202 	bics.w	r2, ip, r2
   1e568:	d007      	beq.n	1e57a <rng_pool_put+0x20>
	rngp->buffer[last] = byte;
   1e56a:	18c2      	adds	r2, r0, r3
   1e56c:	7151      	strb	r1, [r2, #5]
	rngp->last = (last + 1) & mask;
   1e56e:	3301      	adds	r3, #1
   1e570:	ea03 030c 	and.w	r3, r3, ip
   1e574:	7083      	strb	r3, [r0, #2]
	return 0;
   1e576:	2000      	movs	r0, #0
   1e578:	4770      	bx	lr
		return -ENOBUFS;
   1e57a:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   1e57e:	4770      	bx	lr

0001e580 <rng_pool_init>:
	rngp->first_alloc = 0U;
   1e580:	2300      	movs	r3, #0
   1e582:	7003      	strb	r3, [r0, #0]
	rngp->first_read  = 0U;
   1e584:	7043      	strb	r3, [r0, #1]
	rngp->last	  = 0U;
   1e586:	7083      	strb	r3, [r0, #2]
	rngp->mask	  = size - 1;
   1e588:	3901      	subs	r1, #1
   1e58a:	70c1      	strb	r1, [r0, #3]
	rngp->threshold	  = threshold;
   1e58c:	7102      	strb	r2, [r0, #4]
}
   1e58e:	4770      	bx	lr

0001e590 <entropy_cc3xx_rng_get_entropy>:

#define CTR_DRBG_MAX_REQUEST 1024

static int entropy_cc3xx_rng_get_entropy(const struct device *dev,
					 uint8_t *buffer, uint16_t length)
{
   1e590:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e592:	b083      	sub	sp, #12
   1e594:	460f      	mov	r7, r1
   1e596:	4616      	mov	r6, r2

	return err;
#else
	size_t olen;
	size_t offset = 0;
	size_t chunk_size = CTR_DRBG_MAX_REQUEST;
   1e598:	f44f 6580 	mov.w	r5, #1024	; 0x400
	size_t offset = 0;
   1e59c:	2400      	movs	r4, #0
	/* This is a call from a secure app, in which case entropy is
	 * gathered using CC3xx HW using the CTR_DRBG features of the
	 * nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {
   1e59e:	e00a      	b.n	1e5b6 <entropy_cc3xx_rng_get_entropy+0x26>
		 * gathered using CC3xx HW using the CTR_DRBG features of the
		 * nrf_cc310_platform/nrf_cc312_platform library.
		 * When the given context is NULL, a global internal ctr_drbg
		 * context is being used.
		 */
		ret = nrf_cc3xx_platform_ctr_drbg_get(NULL, buffer + offset,
   1e5a0:	ab01      	add	r3, sp, #4
   1e5a2:	462a      	mov	r2, r5
   1e5a4:	1939      	adds	r1, r7, r4
   1e5a6:	2000      	movs	r0, #0
   1e5a8:	f7f5 fbde 	bl	13d68 <nrf_cc3xx_platform_ctr_drbg_get>
						      chunk_size, &olen);
		if (ret != 0) {
   1e5ac:	b970      	cbnz	r0, 1e5cc <entropy_cc3xx_rng_get_entropy+0x3c>
			return -EINVAL;
		}
#endif /* defined(CONFIG_SPM) */
		if (olen != chunk_size) {
   1e5ae:	9b01      	ldr	r3, [sp, #4]
   1e5b0:	42ab      	cmp	r3, r5
   1e5b2:	d10f      	bne.n	1e5d4 <entropy_cc3xx_rng_get_entropy+0x44>
			return -EINVAL;
		}

		offset += chunk_size;
   1e5b4:	442c      	add	r4, r5
	while (offset < length) {
   1e5b6:	42a6      	cmp	r6, r4
   1e5b8:	d905      	bls.n	1e5c6 <entropy_cc3xx_rng_get_entropy+0x36>
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   1e5ba:	1b33      	subs	r3, r6, r4
   1e5bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1e5c0:	d2ee      	bcs.n	1e5a0 <entropy_cc3xx_rng_get_entropy+0x10>
			chunk_size = length - offset;
   1e5c2:	461d      	mov	r5, r3
   1e5c4:	e7ec      	b.n	1e5a0 <entropy_cc3xx_rng_get_entropy+0x10>
	}

	if (offset == length) {
   1e5c6:	d008      	beq.n	1e5da <entropy_cc3xx_rng_get_entropy+0x4a>
	int err = EINVAL;
   1e5c8:	2016      	movs	r0, #22
   1e5ca:	e001      	b.n	1e5d0 <entropy_cc3xx_rng_get_entropy+0x40>
			return -EINVAL;
   1e5cc:	f06f 0015 	mvn.w	r0, #21
		err = 0;
	}

	return err;
#endif /* defined(CONFIG_BUILD_WITH_TFM) */
}
   1e5d0:	b003      	add	sp, #12
   1e5d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -EINVAL;
   1e5d4:	f06f 0015 	mvn.w	r0, #21
   1e5d8:	e7fa      	b.n	1e5d0 <entropy_cc3xx_rng_get_entropy+0x40>
		err = 0;
   1e5da:	2000      	movs	r0, #0
   1e5dc:	e7f8      	b.n	1e5d0 <entropy_cc3xx_rng_get_entropy+0x40>

0001e5de <entropy_cc3xx_rng_init>:

static int entropy_cc3xx_rng_init(const struct device *dev)
{
   1e5de:	b508      	push	{r3, lr}
	int ret;

	/* When the given context is NULL, a global internal
	 * ctr_drbg context is being used.
	 */
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   1e5e0:	2200      	movs	r2, #0
   1e5e2:	4611      	mov	r1, r2
   1e5e4:	4610      	mov	r0, r2
   1e5e6:	f7f5 fb8d 	bl	13d04 <nrf_cc3xx_platform_ctr_drbg_init>
	if (ret != 0) {
   1e5ea:	b900      	cbnz	r0, 1e5ee <entropy_cc3xx_rng_init+0x10>
		return -EINVAL;
	}
#endif

	return 0;
}
   1e5ec:	bd08      	pop	{r3, pc}
		return -EINVAL;
   1e5ee:	f06f 0015 	mvn.w	r0, #21
   1e5f2:	e7fb      	b.n	1e5ec <entropy_cc3xx_rng_init+0xe>

0001e5f4 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   1e5f4:	4770      	bx	lr

0001e5f6 <counter_sub>:
	return (a - b) & COUNTER_MAX;
   1e5f6:	1a40      	subs	r0, r0, r1
}
   1e5f8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1e5fc:	4770      	bx	lr

0001e5fe <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1e5fe:	f100 0350 	add.w	r3, r0, #80	; 0x50
   1e602:	009b      	lsls	r3, r3, #2
   1e604:	b29b      	uxth	r3, r3
   1e606:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1e60a:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   1e60e:	2200      	movs	r2, #0
   1e610:	601a      	str	r2, [r3, #0]
   1e612:	681b      	ldr	r3, [r3, #0]
}
   1e614:	4770      	bx	lr

0001e616 <absolute_time_to_cc>:
}
   1e616:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1e61a:	4770      	bx	lr

0001e61c <full_int_lock>:
	__asm__ volatile(
   1e61c:	f04f 0320 	mov.w	r3, #32
   1e620:	f3ef 8011 	mrs	r0, BASEPRI
   1e624:	f383 8812 	msr	BASEPRI_MAX, r3
   1e628:	f3bf 8f6f 	isb	sy
}
   1e62c:	4770      	bx	lr

0001e62e <full_int_unlock>:
	__asm__ volatile(
   1e62e:	f380 8811 	msr	BASEPRI, r0
   1e632:	f3bf 8f6f 	isb	sy
}
   1e636:	4770      	bx	lr

0001e638 <set_absolute_alarm>:
{
   1e638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e63a:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
   1e63c:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
   1e640:	f7ef fdac 	bl	e19c <get_comparator>
   1e644:	4607      	mov	r7, r0
   1e646:	e019      	b.n	1e67c <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
   1e648:	2013      	movs	r0, #19
   1e64a:	f001 f97f 	bl	1f94c <z_impl_k_busy_wait>
}
   1e64e:	e022      	b.n	1e696 <set_absolute_alarm+0x5e>
		event_clear(chan);
   1e650:	4630      	mov	r0, r6
   1e652:	f7ff ffd4 	bl	1e5fe <event_clear>
		event_enable(chan);
   1e656:	4630      	mov	r0, r6
   1e658:	f7ef fda8 	bl	e1ac <event_enable>
		set_comparator(chan, cc_val);
   1e65c:	4629      	mov	r1, r5
   1e65e:	4630      	mov	r0, r6
   1e660:	f7ef fd92 	bl	e188 <set_comparator>
		now2 = counter();
   1e664:	f7ef fdb6 	bl	e1d4 <counter>
	} while ((now2 != now) &&
   1e668:	4284      	cmp	r4, r0
   1e66a:	d01e      	beq.n	1e6aa <set_absolute_alarm+0x72>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   1e66c:	1c81      	adds	r1, r0, #2
   1e66e:	4628      	mov	r0, r5
   1e670:	f7ff ffc1 	bl	1e5f6 <counter_sub>
	} while ((now2 != now) &&
   1e674:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1e678:	d917      	bls.n	1e6aa <set_absolute_alarm+0x72>
		prev_cc = cc_val;
   1e67a:	462f      	mov	r7, r5
		now = counter();
   1e67c:	f7ef fdaa 	bl	e1d4 <counter>
   1e680:	4604      	mov	r4, r0
		set_comparator(chan, now);
   1e682:	4601      	mov	r1, r0
   1e684:	4630      	mov	r0, r6
   1e686:	f7ef fd7f 	bl	e188 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
   1e68a:	4621      	mov	r1, r4
   1e68c:	4638      	mov	r0, r7
   1e68e:	f7ff ffb2 	bl	1e5f6 <counter_sub>
   1e692:	2801      	cmp	r0, #1
   1e694:	d0d8      	beq.n	1e648 <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   1e696:	1ca7      	adds	r7, r4, #2
   1e698:	4639      	mov	r1, r7
   1e69a:	4628      	mov	r0, r5
   1e69c:	f7ff ffab 	bl	1e5f6 <counter_sub>
   1e6a0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1e6a4:	d9d4      	bls.n	1e650 <set_absolute_alarm+0x18>
			cc_val = now + 2;
   1e6a6:	463d      	mov	r5, r7
   1e6a8:	e7d2      	b.n	1e650 <set_absolute_alarm+0x18>
}
   1e6aa:	4628      	mov	r0, r5
   1e6ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001e6ae <compare_set>:
{
   1e6ae:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e6b0:	b083      	sub	sp, #12
   1e6b2:	4604      	mov	r4, r0
   1e6b4:	4617      	mov	r7, r2
   1e6b6:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
   1e6b8:	f7ef fd92 	bl	e1e0 <compare_int_lock>
   1e6bc:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
   1e6be:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1e6c0:	9301      	str	r3, [sp, #4]
   1e6c2:	9b08      	ldr	r3, [sp, #32]
   1e6c4:	9300      	str	r3, [sp, #0]
   1e6c6:	463a      	mov	r2, r7
   1e6c8:	462b      	mov	r3, r5
   1e6ca:	4620      	mov	r0, r4
   1e6cc:	f7ef fe74 	bl	e3b8 <compare_set_nolocks>
   1e6d0:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
   1e6d2:	4631      	mov	r1, r6
   1e6d4:	4620      	mov	r0, r4
   1e6d6:	f7ef fde3 	bl	e2a0 <compare_int_unlock>
}
   1e6da:	4628      	mov	r0, r5
   1e6dc:	b003      	add	sp, #12
   1e6de:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001e6e0 <sys_clock_cycle_get_32>:
{
   1e6e0:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   1e6e2:	f7ef fe49 	bl	e378 <z_nrf_rtc_timer_read>
}
   1e6e6:	bd08      	pop	{r3, pc}

0001e6e8 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   1e6e8:	b410      	push	{r4}
	*state = &config->states[0];
   1e6ea:	6843      	ldr	r3, [r0, #4]
   1e6ec:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   1e6ee:	e001      	b.n	1e6f4 <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
   1e6f0:	3408      	adds	r4, #8
   1e6f2:	6014      	str	r4, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   1e6f4:	6814      	ldr	r4, [r2, #0]
   1e6f6:	7a03      	ldrb	r3, [r0, #8]
   1e6f8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   1e6fc:	3b01      	subs	r3, #1
   1e6fe:	f8d0 c004 	ldr.w	ip, [r0, #4]
   1e702:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   1e706:	429c      	cmp	r4, r3
   1e708:	d804      	bhi.n	1e714 <pinctrl_lookup_state+0x2c>
		if (id == (*state)->id) {
   1e70a:	7963      	ldrb	r3, [r4, #5]
   1e70c:	428b      	cmp	r3, r1
   1e70e:	d1ef      	bne.n	1e6f0 <pinctrl_lookup_state+0x8>
			return 0;
   1e710:	2000      	movs	r0, #0
   1e712:	e001      	b.n	1e718 <pinctrl_lookup_state+0x30>
	}

	return -ENOENT;
   1e714:	f06f 0001 	mvn.w	r0, #1
}
   1e718:	bc10      	pop	{r4}
   1e71a:	4770      	bx	lr

0001e71c <z_impl_gpio_pin_interrupt_configure>:
{
   1e71c:	b538      	push	{r3, r4, r5, lr}
	const struct gpio_driver_api *api =
   1e71e:	6883      	ldr	r3, [r0, #8]
	const struct gpio_driver_data *const data =
   1e720:	6904      	ldr	r4, [r0, #16]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   1e722:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   1e726:	d006      	beq.n	1e736 <z_impl_gpio_pin_interrupt_configure+0x1a>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   1e728:	6825      	ldr	r5, [r4, #0]
   1e72a:	2401      	movs	r4, #1
   1e72c:	408c      	lsls	r4, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   1e72e:	4225      	tst	r5, r4
   1e730:	d001      	beq.n	1e736 <z_impl_gpio_pin_interrupt_configure+0x1a>
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   1e732:	f082 62c0 	eor.w	r2, r2, #100663296	; 0x6000000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   1e736:	699c      	ldr	r4, [r3, #24]
   1e738:	f002 63c0 	and.w	r3, r2, #100663296	; 0x6000000
   1e73c:	f002 72b0 	and.w	r2, r2, #23068672	; 0x1600000
   1e740:	47a0      	blx	r4
}
   1e742:	bd38      	pop	{r3, r4, r5, pc}

0001e744 <z_impl_gpio_pin_configure>:
{
   1e744:	b538      	push	{r3, r4, r5, lr}
   1e746:	4613      	mov	r3, r2
	const struct gpio_driver_api *api =
   1e748:	6885      	ldr	r5, [r0, #8]
	struct gpio_driver_data *data =
   1e74a:	6904      	ldr	r4, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   1e74c:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
   1e750:	d007      	beq.n	1e762 <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
   1e752:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
   1e756:	d004      	beq.n	1e762 <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1e758:	f012 0f01 	tst.w	r2, #1
   1e75c:	d001      	beq.n	1e762 <z_impl_gpio_pin_configure+0x1e>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   1e75e:	f482 2340 	eor.w	r3, r2, #786432	; 0xc0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   1e762:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1e766:	f013 0f01 	tst.w	r3, #1
   1e76a:	d00a      	beq.n	1e782 <z_impl_gpio_pin_configure+0x3e>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1e76c:	6823      	ldr	r3, [r4, #0]
   1e76e:	f04f 0c01 	mov.w	ip, #1
   1e772:	fa0c fc01 	lsl.w	ip, ip, r1
   1e776:	ea43 030c 	orr.w	r3, r3, ip
   1e77a:	6023      	str	r3, [r4, #0]
	return api->pin_configure(port, pin, flags);
   1e77c:	682b      	ldr	r3, [r5, #0]
   1e77e:	4798      	blx	r3
}
   1e780:	bd38      	pop	{r3, r4, r5, pc}
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1e782:	6823      	ldr	r3, [r4, #0]
   1e784:	f04f 0c01 	mov.w	ip, #1
   1e788:	fa0c fc01 	lsl.w	ip, ip, r1
   1e78c:	ea23 030c 	bic.w	r3, r3, ip
   1e790:	6023      	str	r3, [r4, #0]
   1e792:	e7f3      	b.n	1e77c <z_impl_gpio_pin_configure+0x38>

0001e794 <gpio_pin_configure_dt>:
{
   1e794:	b508      	push	{r3, lr}
   1e796:	4603      	mov	r3, r0
   1e798:	468c      	mov	ip, r1
	return gpio_pin_configure(spec->port,
   1e79a:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
   1e79c:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
   1e79e:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
   1e7a0:	ea42 020c 	orr.w	r2, r2, ip
   1e7a4:	f7ff ffce 	bl	1e744 <z_impl_gpio_pin_configure>
}
   1e7a8:	bd08      	pop	{r3, pc}

0001e7aa <gpio_port_get>:
{
   1e7aa:	b538      	push	{r3, r4, r5, lr}
   1e7ac:	460c      	mov	r4, r1
	const struct gpio_driver_data *const data =
   1e7ae:	6905      	ldr	r5, [r0, #16]
	const struct gpio_driver_api *api =
   1e7b0:	6883      	ldr	r3, [r0, #8]
	return api->port_get_raw(port, value);
   1e7b2:	685b      	ldr	r3, [r3, #4]
   1e7b4:	4798      	blx	r3
	if (ret == 0) {
   1e7b6:	b918      	cbnz	r0, 1e7c0 <gpio_port_get+0x16>
		*value ^= data->invert;
   1e7b8:	6823      	ldr	r3, [r4, #0]
   1e7ba:	682a      	ldr	r2, [r5, #0]
   1e7bc:	4053      	eors	r3, r2
   1e7be:	6023      	str	r3, [r4, #0]
}
   1e7c0:	bd38      	pop	{r3, r4, r5, pc}

0001e7c2 <gpio_pin_get>:
{
   1e7c2:	b510      	push	{r4, lr}
   1e7c4:	b082      	sub	sp, #8
   1e7c6:	460c      	mov	r4, r1
	ret = gpio_port_get(port, &value);
   1e7c8:	a901      	add	r1, sp, #4
   1e7ca:	f7ff ffee 	bl	1e7aa <gpio_port_get>
	if (ret == 0) {
   1e7ce:	b930      	cbnz	r0, 1e7de <gpio_pin_get+0x1c>
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   1e7d0:	2301      	movs	r3, #1
   1e7d2:	40a3      	lsls	r3, r4
   1e7d4:	9a01      	ldr	r2, [sp, #4]
   1e7d6:	4213      	tst	r3, r2
   1e7d8:	bf14      	ite	ne
   1e7da:	2001      	movne	r0, #1
   1e7dc:	2000      	moveq	r0, #0
}
   1e7de:	b002      	add	sp, #8
   1e7e0:	bd10      	pop	{r4, pc}

0001e7e2 <gpio_pin_set_raw>:
{
   1e7e2:	b508      	push	{r3, lr}
	if (value != 0)	{
   1e7e4:	b132      	cbz	r2, 1e7f4 <gpio_pin_set_raw+0x12>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   1e7e6:	2301      	movs	r3, #1
   1e7e8:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
   1e7ec:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
   1e7ee:	68db      	ldr	r3, [r3, #12]
   1e7f0:	4798      	blx	r3
}
   1e7f2:	bd08      	pop	{r3, pc}
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   1e7f4:	2301      	movs	r3, #1
   1e7f6:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
   1e7fa:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
   1e7fc:	691b      	ldr	r3, [r3, #16]
   1e7fe:	4798      	blx	r3
	return ret;
   1e800:	e7f7      	b.n	1e7f2 <gpio_pin_set_raw+0x10>

0001e802 <gpio_pin_set>:
{
   1e802:	b510      	push	{r4, lr}
	const struct gpio_driver_data *const data =
   1e804:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1e806:	681c      	ldr	r4, [r3, #0]
   1e808:	2301      	movs	r3, #1
   1e80a:	408b      	lsls	r3, r1
   1e80c:	421c      	tst	r4, r3
   1e80e:	d002      	beq.n	1e816 <gpio_pin_set+0x14>
		value = (value != 0) ? 0 : 1;
   1e810:	fab2 f282 	clz	r2, r2
   1e814:	0952      	lsrs	r2, r2, #5
	return gpio_pin_set_raw(port, pin, value);
   1e816:	f7ff ffe4 	bl	1e7e2 <gpio_pin_set_raw>
}
   1e81a:	bd10      	pop	{r4, pc}

0001e81c <gpio_add_callback>:
{
   1e81c:	b508      	push	{r3, lr}
	const struct gpio_driver_api *api =
   1e81e:	6883      	ldr	r3, [r0, #8]
	if (api->manage_callback == NULL) {
   1e820:	69db      	ldr	r3, [r3, #28]
   1e822:	b113      	cbz	r3, 1e82a <gpio_add_callback+0xe>
	return api->manage_callback(port, callback, true);
   1e824:	2201      	movs	r2, #1
   1e826:	4798      	blx	r3
}
   1e828:	bd08      	pop	{r3, pc}
		return -ENOTSUP;
   1e82a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1e82e:	e7fb      	b.n	1e828 <gpio_add_callback+0xc>

0001e830 <dk_set_led_on>:

int dk_set_led_on(uint8_t led_idx)
{
   1e830:	b508      	push	{r3, lr}
	return dk_set_led(led_idx, 1);
   1e832:	2101      	movs	r1, #1
   1e834:	f7f0 fb2c 	bl	ee90 <dk_set_led>
}
   1e838:	bd08      	pop	{r3, pc}

0001e83a <dk_set_led_off>:

int dk_set_led_off(uint8_t led_idx)
{
   1e83a:	b508      	push	{r3, lr}
	return dk_set_led(led_idx, 0);
   1e83c:	2100      	movs	r1, #0
   1e83e:	f7f0 fb27 	bl	ee90 <dk_set_led>
}
   1e842:	bd08      	pop	{r3, pc}

0001e844 <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
   1e844:	b508      	push	{r3, lr}

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
   1e846:	f7f5 fa07 	bl	13c58 <nrf_cc3xx_platform_init>
#else
	res = nrf_cc3xx_platform_init_no_rng();
#endif

	return res;
}
   1e84a:	bd08      	pop	{r3, pc}

0001e84c <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
   1e84c:	b510      	push	{r4, lr}
   1e84e:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   1e850:	f7e6 f906 	bl	4a60 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   1e854:	f7e6 fa04 	bl	4c60 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
   1e858:	4620      	mov	r0, r4
   1e85a:	f7ff fff3 	bl	1e844 <hw_cc3xx_init_internal>
	return res;
}
   1e85e:	bd10      	pop	{r4, pc}

0001e860 <_mbedtls_init>:
#if defined(CONFIG_MBEDTLS_DEBUG_LEVEL)
	mbedtls_debug_set_threshold(CONFIG_MBEDTLS_DEBUG_LEVEL);
#endif

	return 0;
}
   1e860:	2000      	movs	r0, #0
   1e862:	4770      	bx	lr

0001e864 <mbedtls_md5_init>:
{
   1e864:	b508      	push	{r3, lr}
__ssp_bos_icheck3(memset, void *, int)
   1e866:	2258      	movs	r2, #88	; 0x58
   1e868:	2100      	movs	r1, #0
   1e86a:	f001 fae5 	bl	1fe38 <memset>
}
   1e86e:	bd08      	pop	{r3, pc}

0001e870 <mbedtls_md5_free>:
    if( ctx == NULL )
   1e870:	b120      	cbz	r0, 1e87c <mbedtls_md5_free+0xc>
{
   1e872:	b508      	push	{r3, lr}
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_md5_context ) );
   1e874:	2158      	movs	r1, #88	; 0x58
   1e876:	f7f5 fb43 	bl	13f00 <mbedtls_platform_zeroize>
}
   1e87a:	bd08      	pop	{r3, pc}
   1e87c:	4770      	bx	lr

0001e87e <mbedtls_md5_update>:
 * MD5 process buffer
 */
int mbedtls_md5_update( mbedtls_md5_context *ctx,
                            const unsigned char *input,
                            size_t ilen )
{
   1e87e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    size_t fill;
    uint32_t left;

    if( ilen == 0 )
   1e882:	2a00      	cmp	r2, #0
   1e884:	d03a      	beq.n	1e8fc <mbedtls_md5_update+0x7e>
   1e886:	4606      	mov	r6, r0
   1e888:	460d      	mov	r5, r1
   1e88a:	4614      	mov	r4, r2
        return( 0 );

    left = ctx->total[0] & 0x3F;
   1e88c:	6803      	ldr	r3, [r0, #0]
   1e88e:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    fill = 64 - left;
   1e892:	f1c7 0840 	rsb	r8, r7, #64	; 0x40

    ctx->total[0] += (uint32_t) ilen;
   1e896:	4413      	add	r3, r2
   1e898:	6003      	str	r3, [r0, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
   1e89a:	4293      	cmp	r3, r2
   1e89c:	d202      	bcs.n	1e8a4 <mbedtls_md5_update+0x26>
        ctx->total[1]++;
   1e89e:	6843      	ldr	r3, [r0, #4]
   1e8a0:	3301      	adds	r3, #1
   1e8a2:	6043      	str	r3, [r0, #4]

    if( left && ilen >= fill )
   1e8a4:	b1b7      	cbz	r7, 1e8d4 <mbedtls_md5_update+0x56>
   1e8a6:	4544      	cmp	r4, r8
   1e8a8:	d314      	bcc.n	1e8d4 <mbedtls_md5_update+0x56>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
   1e8aa:	f106 0918 	add.w	r9, r6, #24
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1e8ae:	4642      	mov	r2, r8
   1e8b0:	4629      	mov	r1, r5
   1e8b2:	eb09 0007 	add.w	r0, r9, r7
   1e8b6:	f001 fa84 	bl	1fdc2 <memcpy>
        if( ( ret = mbedtls_internal_md5_process( ctx, ctx->buffer ) ) != 0 )
   1e8ba:	4649      	mov	r1, r9
   1e8bc:	4630      	mov	r0, r6
   1e8be:	f7f0 fb65 	bl	ef8c <mbedtls_internal_md5_process>
   1e8c2:	4603      	mov	r3, r0
   1e8c4:	b9d8      	cbnz	r0, 1e8fe <mbedtls_md5_update+0x80>
            return( ret );

        input += fill;
   1e8c6:	4445      	add	r5, r8
        ilen  -= fill;
   1e8c8:	3f40      	subs	r7, #64	; 0x40
   1e8ca:	443c      	add	r4, r7
        left = 0;
   1e8cc:	2700      	movs	r7, #0
   1e8ce:	e001      	b.n	1e8d4 <mbedtls_md5_update+0x56>
    while( ilen >= 64 )
    {
        if( ( ret = mbedtls_internal_md5_process( ctx, input ) ) != 0 )
            return( ret );

        input += 64;
   1e8d0:	3540      	adds	r5, #64	; 0x40
        ilen  -= 64;
   1e8d2:	3c40      	subs	r4, #64	; 0x40
    while( ilen >= 64 )
   1e8d4:	2c3f      	cmp	r4, #63	; 0x3f
   1e8d6:	d907      	bls.n	1e8e8 <mbedtls_md5_update+0x6a>
        if( ( ret = mbedtls_internal_md5_process( ctx, input ) ) != 0 )
   1e8d8:	4629      	mov	r1, r5
   1e8da:	4630      	mov	r0, r6
   1e8dc:	f7f0 fb56 	bl	ef8c <mbedtls_internal_md5_process>
   1e8e0:	4603      	mov	r3, r0
   1e8e2:	2800      	cmp	r0, #0
   1e8e4:	d0f4      	beq.n	1e8d0 <mbedtls_md5_update+0x52>
   1e8e6:	e00a      	b.n	1e8fe <mbedtls_md5_update+0x80>
    }

    if( ilen > 0 )
   1e8e8:	b164      	cbz	r4, 1e904 <mbedtls_md5_update+0x86>
    {
        memcpy( (void *) (ctx->buffer + left), input, ilen );
   1e8ea:	f106 0018 	add.w	r0, r6, #24
   1e8ee:	4622      	mov	r2, r4
   1e8f0:	4629      	mov	r1, r5
   1e8f2:	4438      	add	r0, r7
   1e8f4:	f001 fa65 	bl	1fdc2 <memcpy>
    }

    return( 0 );
   1e8f8:	2300      	movs	r3, #0
   1e8fa:	e000      	b.n	1e8fe <mbedtls_md5_update+0x80>
        return( 0 );
   1e8fc:	2300      	movs	r3, #0
}
   1e8fe:	4618      	mov	r0, r3
   1e900:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return( 0 );
   1e904:	2300      	movs	r3, #0
   1e906:	e7fa      	b.n	1e8fe <mbedtls_md5_update+0x80>

0001e908 <mbedtls_md5_finish>:
/*
 * MD5 final digest
 */
int mbedtls_md5_finish( mbedtls_md5_context *ctx,
                            unsigned char output[16] )
{
   1e908:	b570      	push	{r4, r5, r6, lr}
   1e90a:	4604      	mov	r4, r0
   1e90c:	460d      	mov	r5, r1
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
   1e90e:	6803      	ldr	r3, [r0, #0]
   1e910:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
   1e914:	f103 0c01 	add.w	ip, r3, #1
   1e918:	4403      	add	r3, r0
   1e91a:	2280      	movs	r2, #128	; 0x80
   1e91c:	761a      	strb	r2, [r3, #24]

    if( used <= 56 )
   1e91e:	f1bc 0f38 	cmp.w	ip, #56	; 0x38
   1e922:	d84d      	bhi.n	1e9c0 <mbedtls_md5_finish+0xb8>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
   1e924:	3018      	adds	r0, #24
__ssp_bos_icheck3(memset, void *, int)
   1e926:	f1cc 0238 	rsb	r2, ip, #56	; 0x38
   1e92a:	2100      	movs	r1, #0
   1e92c:	4460      	add	r0, ip
   1e92e:	f001 fa83 	bl	1fe38 <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
   1e932:	6822      	ldr	r2, [r4, #0]
         | ( ctx->total[1] <<  3 );
   1e934:	6863      	ldr	r3, [r4, #4]
   1e936:	00db      	lsls	r3, r3, #3
    high = ( ctx->total[0] >> 29 )
   1e938:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    low  = ( ctx->total[0] <<  3 );
   1e93c:	00d2      	lsls	r2, r2, #3

    MBEDTLS_PUT_UINT32_LE( low,  ctx->buffer, 56 );
   1e93e:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
   1e942:	f3c2 2107 	ubfx	r1, r2, #8, #8
   1e946:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51
   1e94a:	f3c2 4107 	ubfx	r1, r2, #16, #8
   1e94e:	f884 1052 	strb.w	r1, [r4, #82]	; 0x52
   1e952:	0e12      	lsrs	r2, r2, #24
   1e954:	f884 2053 	strb.w	r2, [r4, #83]	; 0x53
    MBEDTLS_PUT_UINT32_LE( high, ctx->buffer, 60 );
   1e958:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
   1e95c:	f3c3 2207 	ubfx	r2, r3, #8, #8
   1e960:	f884 2055 	strb.w	r2, [r4, #85]	; 0x55
   1e964:	f3c3 4207 	ubfx	r2, r3, #16, #8
   1e968:	f884 2056 	strb.w	r2, [r4, #86]	; 0x56
   1e96c:	0e1b      	lsrs	r3, r3, #24
   1e96e:	f884 3057 	strb.w	r3, [r4, #87]	; 0x57

    if( ( ret = mbedtls_internal_md5_process( ctx, ctx->buffer ) ) != 0 )
   1e972:	f104 0118 	add.w	r1, r4, #24
   1e976:	4620      	mov	r0, r4
   1e978:	f7f0 fb08 	bl	ef8c <mbedtls_internal_md5_process>
   1e97c:	b9f8      	cbnz	r0, 1e9be <mbedtls_md5_finish+0xb6>
        return( ret );

    /*
     * Output final state
     */
    MBEDTLS_PUT_UINT32_LE( ctx->state[0], output,  0 );
   1e97e:	7a23      	ldrb	r3, [r4, #8]
   1e980:	702b      	strb	r3, [r5, #0]
   1e982:	7a63      	ldrb	r3, [r4, #9]
   1e984:	706b      	strb	r3, [r5, #1]
   1e986:	7aa3      	ldrb	r3, [r4, #10]
   1e988:	70ab      	strb	r3, [r5, #2]
   1e98a:	7ae3      	ldrb	r3, [r4, #11]
   1e98c:	70eb      	strb	r3, [r5, #3]
    MBEDTLS_PUT_UINT32_LE( ctx->state[1], output,  4 );
   1e98e:	7b23      	ldrb	r3, [r4, #12]
   1e990:	712b      	strb	r3, [r5, #4]
   1e992:	7b63      	ldrb	r3, [r4, #13]
   1e994:	716b      	strb	r3, [r5, #5]
   1e996:	7ba3      	ldrb	r3, [r4, #14]
   1e998:	71ab      	strb	r3, [r5, #6]
   1e99a:	7be3      	ldrb	r3, [r4, #15]
   1e99c:	71eb      	strb	r3, [r5, #7]
    MBEDTLS_PUT_UINT32_LE( ctx->state[2], output,  8 );
   1e99e:	7c23      	ldrb	r3, [r4, #16]
   1e9a0:	722b      	strb	r3, [r5, #8]
   1e9a2:	7c63      	ldrb	r3, [r4, #17]
   1e9a4:	726b      	strb	r3, [r5, #9]
   1e9a6:	7ca3      	ldrb	r3, [r4, #18]
   1e9a8:	72ab      	strb	r3, [r5, #10]
   1e9aa:	7ce3      	ldrb	r3, [r4, #19]
   1e9ac:	72eb      	strb	r3, [r5, #11]
    MBEDTLS_PUT_UINT32_LE( ctx->state[3], output, 12 );
   1e9ae:	7d23      	ldrb	r3, [r4, #20]
   1e9b0:	732b      	strb	r3, [r5, #12]
   1e9b2:	7d63      	ldrb	r3, [r4, #21]
   1e9b4:	736b      	strb	r3, [r5, #13]
   1e9b6:	7da3      	ldrb	r3, [r4, #22]
   1e9b8:	73ab      	strb	r3, [r5, #14]
   1e9ba:	7de3      	ldrb	r3, [r4, #23]
   1e9bc:	73eb      	strb	r3, [r5, #15]

    return( 0 );
}
   1e9be:	bd70      	pop	{r4, r5, r6, pc}
        memset( ctx->buffer + used, 0, 64 - used );
   1e9c0:	f100 0618 	add.w	r6, r0, #24
   1e9c4:	f1cc 0240 	rsb	r2, ip, #64	; 0x40
   1e9c8:	2100      	movs	r1, #0
   1e9ca:	eb06 000c 	add.w	r0, r6, ip
   1e9ce:	f001 fa33 	bl	1fe38 <memset>
        if( ( ret = mbedtls_internal_md5_process( ctx, ctx->buffer ) ) != 0 )
   1e9d2:	4631      	mov	r1, r6
   1e9d4:	4620      	mov	r0, r4
   1e9d6:	f7f0 fad9 	bl	ef8c <mbedtls_internal_md5_process>
   1e9da:	2800      	cmp	r0, #0
   1e9dc:	d1ef      	bne.n	1e9be <mbedtls_md5_finish+0xb6>
   1e9de:	2238      	movs	r2, #56	; 0x38
   1e9e0:	2100      	movs	r1, #0
   1e9e2:	4630      	mov	r0, r6
   1e9e4:	f001 fa28 	bl	1fe38 <memset>
   1e9e8:	e7a3      	b.n	1e932 <mbedtls_md5_finish+0x2a>

0001e9ea <mbedtls_md5>:
 * output = MD5( input buffer )
 */
int mbedtls_md5( const unsigned char *input,
                     size_t ilen,
                     unsigned char output[16] )
{
   1e9ea:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e9ec:	b097      	sub	sp, #92	; 0x5c
   1e9ee:	4604      	mov	r4, r0
   1e9f0:	460d      	mov	r5, r1
   1e9f2:	4616      	mov	r6, r2
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    mbedtls_md5_context ctx;

    mbedtls_md5_init( &ctx );
   1e9f4:	4668      	mov	r0, sp
   1e9f6:	f7ff ff35 	bl	1e864 <mbedtls_md5_init>

    if( ( ret = mbedtls_md5_starts( &ctx ) ) != 0 )
   1e9fa:	4668      	mov	r0, sp
   1e9fc:	f7f0 fab0 	bl	ef60 <mbedtls_md5_starts>
   1ea00:	4607      	mov	r7, r0
   1ea02:	b128      	cbz	r0, 1ea10 <mbedtls_md5+0x26>

    if( ( ret = mbedtls_md5_finish( &ctx, output ) ) != 0 )
        goto exit;

exit:
    mbedtls_md5_free( &ctx );
   1ea04:	4668      	mov	r0, sp
   1ea06:	f7ff ff33 	bl	1e870 <mbedtls_md5_free>

    return( ret );
}
   1ea0a:	4638      	mov	r0, r7
   1ea0c:	b017      	add	sp, #92	; 0x5c
   1ea0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( ( ret = mbedtls_md5_update( &ctx, input, ilen ) ) != 0 )
   1ea10:	462a      	mov	r2, r5
   1ea12:	4621      	mov	r1, r4
   1ea14:	4668      	mov	r0, sp
   1ea16:	f7ff ff32 	bl	1e87e <mbedtls_md5_update>
   1ea1a:	4607      	mov	r7, r0
   1ea1c:	2800      	cmp	r0, #0
   1ea1e:	d1f1      	bne.n	1ea04 <mbedtls_md5+0x1a>
    if( ( ret = mbedtls_md5_finish( &ctx, output ) ) != 0 )
   1ea20:	4631      	mov	r1, r6
   1ea22:	4668      	mov	r0, sp
   1ea24:	f7ff ff70 	bl	1e908 <mbedtls_md5_finish>
   1ea28:	4607      	mov	r7, r0
exit:
   1ea2a:	e7eb      	b.n	1ea04 <mbedtls_md5+0x1a>

0001ea2c <nrf52_errata_36>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1ea2c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1ea30:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1ea34:	2b08      	cmp	r3, #8
   1ea36:	d001      	beq.n	1ea3c <nrf52_errata_36+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   1ea38:	2000      	movs	r0, #0
   1ea3a:	4770      	bx	lr
                        return true;
   1ea3c:	2001      	movs	r0, #1
    #endif
}
   1ea3e:	4770      	bx	lr

0001ea40 <nrf52_errata_66>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1ea40:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1ea44:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1ea48:	2b08      	cmp	r3, #8
   1ea4a:	d001      	beq.n	1ea50 <nrf52_errata_66+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   1ea4c:	2000      	movs	r0, #0
   1ea4e:	4770      	bx	lr
                        return true;
   1ea50:	2001      	movs	r0, #1
    #endif
}
   1ea52:	4770      	bx	lr

0001ea54 <nrf52_errata_98>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1ea54:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1ea58:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1ea5c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1ea60:	2a08      	cmp	r2, #8
   1ea62:	d001      	beq.n	1ea68 <nrf52_errata_98+0x14>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   1ea64:	2000      	movs	r0, #0
   1ea66:	4770      	bx	lr
                switch(var2)
   1ea68:	2b00      	cmp	r3, #0
   1ea6a:	d804      	bhi.n	1ea76 <nrf52_errata_98+0x22>
   1ea6c:	e8df f003 	tbb	[pc, r3]
   1ea70:	01          	.byte	0x01
   1ea71:	00          	.byte	0x00
   1ea72:	2001      	movs	r0, #1
   1ea74:	4770      	bx	lr
                        return false;
   1ea76:	2000      	movs	r0, #0
    #endif
}
   1ea78:	4770      	bx	lr

0001ea7a <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1ea7a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1ea7e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1ea82:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1ea86:	2a08      	cmp	r2, #8
   1ea88:	d001      	beq.n	1ea8e <nrf52_errata_103+0x14>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   1ea8a:	2000      	movs	r0, #0
   1ea8c:	4770      	bx	lr
                switch(var2)
   1ea8e:	2b00      	cmp	r3, #0
   1ea90:	d804      	bhi.n	1ea9c <nrf52_errata_103+0x22>
   1ea92:	e8df f003 	tbb	[pc, r3]
   1ea96:	01          	.byte	0x01
   1ea97:	00          	.byte	0x00
   1ea98:	2001      	movs	r0, #1
   1ea9a:	4770      	bx	lr
                        return false;
   1ea9c:	2000      	movs	r0, #0
    #endif
}
   1ea9e:	4770      	bx	lr

0001eaa0 <nrf52_errata_115>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1eaa0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1eaa4:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1eaa8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1eaac:	2a08      	cmp	r2, #8
   1eaae:	d001      	beq.n	1eab4 <nrf52_errata_115+0x14>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   1eab0:	2000      	movs	r0, #0
   1eab2:	4770      	bx	lr
                switch(var2)
   1eab4:	2b00      	cmp	r3, #0
   1eab6:	d804      	bhi.n	1eac2 <nrf52_errata_115+0x22>
   1eab8:	e8df f003 	tbb	[pc, r3]
   1eabc:	01          	.byte	0x01
   1eabd:	00          	.byte	0x00
   1eabe:	2001      	movs	r0, #1
   1eac0:	4770      	bx	lr
                        return false;
   1eac2:	2000      	movs	r0, #0
    #endif
}
   1eac4:	4770      	bx	lr

0001eac6 <nrf52_errata_120>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1eac6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1eaca:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1eace:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1ead2:	2a08      	cmp	r2, #8
   1ead4:	d001      	beq.n	1eada <nrf52_errata_120+0x14>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   1ead6:	2000      	movs	r0, #0
   1ead8:	4770      	bx	lr
                switch(var2)
   1eada:	2b00      	cmp	r3, #0
   1eadc:	d804      	bhi.n	1eae8 <nrf52_errata_120+0x22>
   1eade:	e8df f003 	tbb	[pc, r3]
   1eae2:	01          	.byte	0x01
   1eae3:	00          	.byte	0x00
   1eae4:	2001      	movs	r0, #1
   1eae6:	4770      	bx	lr
                        return false;
   1eae8:	2000      	movs	r0, #0
    #endif
}
   1eaea:	4770      	bx	lr

0001eaec <nrf52_errata_136>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1eaec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1eaf0:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1eaf4:	2b08      	cmp	r3, #8
   1eaf6:	d001      	beq.n	1eafc <nrf52_errata_136+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   1eaf8:	2000      	movs	r0, #0
   1eafa:	4770      	bx	lr
                        return true;
   1eafc:	2001      	movs	r0, #1
    #endif
}
   1eafe:	4770      	bx	lr

0001eb00 <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1eb00:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1eb04:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1eb08:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1eb0c:	2a08      	cmp	r2, #8
   1eb0e:	d001      	beq.n	1eb14 <nrf52_configuration_249+0x14>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   1eb10:	2000      	movs	r0, #0
   1eb12:	4770      	bx	lr
                switch(var2)
   1eb14:	2b04      	cmp	r3, #4
   1eb16:	d801      	bhi.n	1eb1c <nrf52_configuration_249+0x1c>
   1eb18:	2000      	movs	r0, #0
   1eb1a:	4770      	bx	lr
                        return true;
   1eb1c:	2001      	movs	r0, #1
    #endif
}
   1eb1e:	4770      	bx	lr

0001eb20 <nrf52_handle_approtect>:
        Otherwise, the fw branch state is loaded from UICR, emulating the legacy APPROTECT behavior.

         The same mechanism is implemented for SECURE APPROTECT, with the macros
         ENABLE_SECURE_APPROTECT and ENABLE_SECURE_APPROTECT_USER_HANDLING. */
static inline void nrf52_handle_approtect(void)
{
   1eb20:	b508      	push	{r3, lr}
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   1eb22:	f7ff ffed 	bl	1eb00 <nrf52_configuration_249>
   1eb26:	b138      	cbz	r0, 1eb38 <nrf52_handle_approtect+0x18>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   1eb28:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1eb2c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   1eb30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1eb34:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
            }
        #endif
    #endif
}
   1eb38:	bd08      	pop	{r3, pc}

0001eb3a <nrfx_isr>:
#include <nrfx.h>
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
   1eb3a:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
   1eb3c:	4780      	blx	r0
}
   1eb3e:	bd08      	pop	{r3, pc}

0001eb40 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
   1eb40:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
   1eb42:	f000 ff03 	bl	1f94c <z_impl_k_busy_wait>
	if (IS_ENABLED(CONFIG_SYS_CLOCK_EXISTS)) {
		k_busy_wait(usec_to_wait);
	} else {
		nrfx_coredep_delay_us(usec_to_wait);
	}
}
   1eb46:	bd08      	pop	{r3, pc}

0001eb48 <nrf_clock_is_running>:
    switch (domain)
   1eb48:	b119      	cbz	r1, 1eb52 <nrf_clock_is_running+0xa>
   1eb4a:	2901      	cmp	r1, #1
   1eb4c:	d00e      	beq.n	1eb6c <nrf_clock_is_running+0x24>
   1eb4e:	2000      	movs	r0, #0
   1eb50:	4770      	bx	lr
            if (p_clk_src != NULL)
   1eb52:	b122      	cbz	r2, 1eb5e <nrf_clock_is_running+0x16>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1eb54:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   1eb58:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   1eb5c:	6013      	str	r3, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1eb5e:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
   1eb62:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1eb66:	d10e      	bne.n	1eb86 <nrf_clock_is_running+0x3e>
    return false;
   1eb68:	2000      	movs	r0, #0
   1eb6a:	4770      	bx	lr
            if (p_clk_src != NULL)
   1eb6c:	b122      	cbz	r2, 1eb78 <nrf_clock_is_running+0x30>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1eb6e:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
   1eb72:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   1eb76:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1eb78:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
   1eb7c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1eb80:	d103      	bne.n	1eb8a <nrf_clock_is_running+0x42>
    return false;
   1eb82:	2000      	movs	r0, #0
   1eb84:	4770      	bx	lr
                return true;
   1eb86:	2001      	movs	r0, #1
   1eb88:	4770      	bx	lr
                return true;
   1eb8a:	2001      	movs	r0, #1
}
   1eb8c:	4770      	bx	lr

0001eb8e <clock_initial_lfclksrc_get>:
}
   1eb8e:	2000      	movs	r0, #0
   1eb90:	4770      	bx	lr

0001eb92 <nrfx_power_clock_irq_init>:
extern "C" {
#endif


__STATIC_INLINE void nrfx_power_clock_irq_init(void)
{
   1eb92:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   1eb94:	2000      	movs	r0, #0
   1eb96:	f7e6 f9ef 	bl	4f78 <arch_irq_is_enabled>
   1eb9a:	b100      	cbz	r0, 1eb9e <nrfx_power_clock_irq_init+0xc>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    }
}
   1eb9c:	bd08      	pop	{r3, pc}
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   1eb9e:	f7fa f9e1 	bl	18f64 <arch_irq_enable>
}
   1eba2:	e7fb      	b.n	1eb9c <nrfx_power_clock_irq_init+0xa>

0001eba4 <clock_lfclksrc_tweak>:
{
   1eba4:	b538      	push	{r3, r4, r5, lr}
   1eba6:	4604      	mov	r4, r0
    bool is_correct_clk = (*p_lfclksrc == NRFX_CLOCK_CONFIG_LF_SRC);
   1eba8:	6803      	ldr	r3, [r0, #0]
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   1ebaa:	2b01      	cmp	r3, #1
   1ebac:	d002      	beq.n	1ebb4 <clock_lfclksrc_tweak+0x10>
   1ebae:	b933      	cbnz	r3, 1ebbe <clock_lfclksrc_tweak+0x1a>
   1ebb0:	2301      	movs	r3, #1
   1ebb2:	e000      	b.n	1ebb6 <clock_lfclksrc_tweak+0x12>
   1ebb4:	2301      	movs	r3, #1
    if (!is_correct_clk)
   1ebb6:	461d      	mov	r5, r3
   1ebb8:	b11b      	cbz	r3, 1ebc2 <clock_lfclksrc_tweak+0x1e>
}
   1ebba:	4628      	mov	r0, r5
   1ebbc:	bd38      	pop	{r3, r4, r5, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   1ebbe:	2300      	movs	r3, #0
   1ebc0:	e7f9      	b.n	1ebb6 <clock_lfclksrc_tweak+0x12>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1ebc2:	2000      	movs	r0, #0
   1ebc4:	f7f1 f88e 	bl	fce4 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   1ebc8:	f7ff ffe1 	bl	1eb8e <clock_initial_lfclksrc_get>
   1ebcc:	6020      	str	r0, [r4, #0]
   1ebce:	e7f4      	b.n	1ebba <clock_lfclksrc_tweak+0x16>

0001ebd0 <nrfx_clock_enable>:
{
   1ebd0:	b508      	push	{r3, lr}
    nrfx_power_clock_irq_init();
   1ebd2:	f7ff ffde 	bl	1eb92 <nrfx_power_clock_irq_init>
    nrf_clock_lf_src_set(NRF_CLOCK, clock_initial_lfclksrc_get());
   1ebd6:	f7ff ffda 	bl	1eb8e <clock_initial_lfclksrc_get>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1ebda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ebde:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
}
   1ebe2:	bd08      	pop	{r3, pc}

0001ebe4 <nrfx_clock_start>:
    switch (domain)
   1ebe4:	b110      	cbz	r0, 1ebec <nrfx_clock_start+0x8>
   1ebe6:	2801      	cmp	r0, #1
   1ebe8:	d040      	beq.n	1ec6c <nrfx_clock_start+0x88>
   1ebea:	4770      	bx	lr
{
   1ebec:	b500      	push	{lr}
   1ebee:	b083      	sub	sp, #12
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1ebf0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1ebf4:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   1ebf8:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   1ebfc:	9301      	str	r3, [sp, #4]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1ebfe:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
   1ec02:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1ec06:	d11b      	bne.n	1ec40 <nrfx_clock_start+0x5c>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
   1ec08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ec0c:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   1ec10:	f013 0f01 	tst.w	r3, #1
   1ec14:	d118      	bne.n	1ec48 <nrfx_clock_start+0x64>
                    lfclksrc = clock_initial_lfclksrc_get();
   1ec16:	f7ff ffba 	bl	1eb8e <clock_initial_lfclksrc_get>
   1ec1a:	9001      	str	r0, [sp, #4]
    p_reg->LFCLKSRC = (uint32_t)(source);
   1ec1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ec20:	9a01      	ldr	r2, [sp, #4]
   1ec22:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ec26:	2200      	movs	r2, #0
   1ec28:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1ec2c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
   1ec30:	2202      	movs	r2, #2
   1ec32:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ec36:	2201      	movs	r2, #1
   1ec38:	609a      	str	r2, [r3, #8]
}
   1ec3a:	b003      	add	sp, #12
   1ec3c:	f85d fb04 	ldr.w	pc, [sp], #4
                    (void)clock_lfclksrc_tweak(&lfclksrc);
   1ec40:	a801      	add	r0, sp, #4
   1ec42:	f7ff ffaf 	bl	1eba4 <clock_lfclksrc_tweak>
   1ec46:	e7e9      	b.n	1ec1c <nrfx_clock_start+0x38>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1ec48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ec4c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   1ec50:	f003 0303 	and.w	r3, r3, #3
                    lfclksrc = nrf_clock_lf_srccopy_get(NRF_CLOCK);
   1ec54:	9301      	str	r3, [sp, #4]
                    if (clock_lfclksrc_tweak(&lfclksrc))
   1ec56:	a801      	add	r0, sp, #4
   1ec58:	f7ff ffa4 	bl	1eba4 <clock_lfclksrc_tweak>
   1ec5c:	2800      	cmp	r0, #0
   1ec5e:	d0dd      	beq.n	1ec1c <nrfx_clock_start+0x38>
    p_reg->INTENSET = mask;
   1ec60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ec64:	2202      	movs	r2, #2
   1ec66:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
   1ec6a:	e7e6      	b.n	1ec3a <nrfx_clock_start+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ec6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ec70:	2200      	movs	r2, #0
   1ec72:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1ec76:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   1ec7a:	2201      	movs	r2, #1
   1ec7c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ec80:	601a      	str	r2, [r3, #0]
   1ec82:	4770      	bx	lr

0001ec84 <nrfx_clock_stop>:
{
   1ec84:	b508      	push	{r3, lr}
    clock_stop(domain);
   1ec86:	f7f1 f82d 	bl	fce4 <clock_stop>
}
   1ec8a:	bd08      	pop	{r3, pc}

0001ec8c <nrf_gpiote_event_configure>:
{
   1ec8c:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1ec8e:	f501 71a2 	add.w	r1, r1, #324	; 0x144
   1ec92:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   1ec96:	f424 344f 	bic.w	r4, r4, #211968	; 0x33c00
   1ec9a:	f424 7440 	bic.w	r4, r4, #768	; 0x300
   1ec9e:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1eca2:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   1eca6:	0212      	lsls	r2, r2, #8
   1eca8:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
   1ecac:	041b      	lsls	r3, r3, #16
   1ecae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1ecb2:	431a      	orrs	r2, r3
   1ecb4:	4314      	orrs	r4, r2
   1ecb6:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
   1ecba:	bc10      	pop	{r4}
   1ecbc:	4770      	bx	lr

0001ecbe <nrf_gpiote_task_configure>:
{
   1ecbe:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   1ecc0:	f501 71a2 	add.w	r1, r1, #324	; 0x144
   1ecc4:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   1ecc8:	f424 1499 	bic.w	r4, r4, #1253376	; 0x132000
   1eccc:	f424 54f8 	bic.w	r4, r4, #7936	; 0x1f00
   1ecd0:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1ecd4:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   1ecd8:	0212      	lsls	r2, r2, #8
   1ecda:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1ecde:	041b      	lsls	r3, r3, #16
   1ece0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1ece4:	431a      	orrs	r2, r3
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1ece6:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1ecea:	051b      	lsls	r3, r3, #20
   1ecec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1ecf0:	431a      	orrs	r2, r3
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1ecf2:	4314      	orrs	r4, r2
   1ecf4:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
   1ecf8:	bc10      	pop	{r4}
   1ecfa:	4770      	bx	lr

0001ecfc <nrf_gpio_cfg_sense_set>:
{
   1ecfc:	b500      	push	{lr}
   1ecfe:	b085      	sub	sp, #20
   1ed00:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   1ed04:	f10d 030f 	add.w	r3, sp, #15
   1ed08:	9301      	str	r3, [sp, #4]
   1ed0a:	2100      	movs	r1, #0
   1ed0c:	9100      	str	r1, [sp, #0]
   1ed0e:	460b      	mov	r3, r1
   1ed10:	460a      	mov	r2, r1
   1ed12:	f7f1 f87f 	bl	fe14 <nrf_gpio_reconfigure>
}
   1ed16:	b005      	add	sp, #20
   1ed18:	f85d fb04 	ldr.w	pc, [sp], #4

0001ed1c <pin_is_task_output>:
{
   1ed1c:	b510      	push	{r4, lr}
   1ed1e:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   1ed20:	f7f1 f916 	bl	ff50 <pin_is_output>
   1ed24:	b128      	cbz	r0, 1ed32 <pin_is_task_output+0x16>
   1ed26:	4620      	mov	r0, r4
   1ed28:	f7f1 f8fc 	bl	ff24 <pin_in_use_by_te>
   1ed2c:	b118      	cbz	r0, 1ed36 <pin_is_task_output+0x1a>
   1ed2e:	2001      	movs	r0, #1
   1ed30:	e000      	b.n	1ed34 <pin_is_task_output+0x18>
   1ed32:	2000      	movs	r0, #0
}
   1ed34:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   1ed36:	2000      	movs	r0, #0
   1ed38:	e7fc      	b.n	1ed34 <pin_is_task_output+0x18>

0001ed3a <pin_is_input>:
{
   1ed3a:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
   1ed3c:	f7f1 f908 	bl	ff50 <pin_is_output>
   1ed40:	f080 0001 	eor.w	r0, r0, #1
}
   1ed44:	b2c0      	uxtb	r0, r0
   1ed46:	bd08      	pop	{r3, pc}

0001ed48 <gpiote_polarity_to_trigger>:
}
   1ed48:	4770      	bx	lr

0001ed4a <gpiote_trigger_to_polarity>:
}
   1ed4a:	4770      	bx	lr

0001ed4c <is_level>:
}
   1ed4c:	2803      	cmp	r0, #3
   1ed4e:	bf94      	ite	ls
   1ed50:	2000      	movls	r0, #0
   1ed52:	2001      	movhi	r0, #1
   1ed54:	4770      	bx	lr

0001ed56 <latch_pending_read_and_check>:
{
   1ed56:	b510      	push	{r4, lr}
   1ed58:	4604      	mov	r4, r0
    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);
   1ed5a:	4602      	mov	r2, r0
   1ed5c:	2102      	movs	r1, #2
   1ed5e:	2000      	movs	r0, #0
   1ed60:	f7f1 f8b4 	bl	fecc <nrf_gpio_latches_read_and_clear>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   1ed64:	2300      	movs	r3, #0
   1ed66:	2b01      	cmp	r3, #1
   1ed68:	d804      	bhi.n	1ed74 <latch_pending_read_and_check+0x1e>
        if (latch[port_idx])
   1ed6a:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   1ed6e:	b91a      	cbnz	r2, 1ed78 <latch_pending_read_and_check+0x22>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   1ed70:	3301      	adds	r3, #1
   1ed72:	e7f8      	b.n	1ed66 <latch_pending_read_and_check+0x10>
    return false;
   1ed74:	2000      	movs	r0, #0
}
   1ed76:	bd10      	pop	{r4, pc}
            return true;
   1ed78:	2001      	movs	r0, #1
   1ed7a:	e7fc      	b.n	1ed76 <latch_pending_read_and_check+0x20>

0001ed7c <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
   1ed7c:	b508      	push	{r3, lr}
  _DoInit();
   1ed7e:	f7f1 fcb1 	bl	106e4 <_DoInit>
}
   1ed82:	bd08      	pop	{r3, pc}

0001ed84 <rtt_init>:
{
   1ed84:	b508      	push	{r3, lr}
	SEGGER_RTT_Init();
   1ed86:	f7ff fff9 	bl	1ed7c <SEGGER_RTT_Init>
}
   1ed8a:	2000      	movs	r0, #0
   1ed8c:	bd08      	pop	{r3, pc}

0001ed8e <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   1ed8e:	b160      	cbz	r0, 1edaa <z_device_is_ready+0x1c>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   1ed90:	68c3      	ldr	r3, [r0, #12]
   1ed92:	785a      	ldrb	r2, [r3, #1]
   1ed94:	f012 0f01 	tst.w	r2, #1
   1ed98:	d003      	beq.n	1eda2 <z_device_is_ready+0x14>
   1ed9a:	781b      	ldrb	r3, [r3, #0]
   1ed9c:	b11b      	cbz	r3, 1eda6 <z_device_is_ready+0x18>
   1ed9e:	2000      	movs	r0, #0
   1eda0:	4770      	bx	lr
   1eda2:	2000      	movs	r0, #0
   1eda4:	4770      	bx	lr
   1eda6:	2001      	movs	r0, #1
   1eda8:	4770      	bx	lr
		return false;
   1edaa:	2000      	movs	r0, #0
}
   1edac:	4770      	bx	lr

0001edae <arch_system_halt>:
	__asm__ volatile(
   1edae:	f04f 0220 	mov.w	r2, #32
   1edb2:	f3ef 8311 	mrs	r3, BASEPRI
   1edb6:	f382 8812 	msr	BASEPRI_MAX, r2
   1edba:	f3bf 8f6f 	isb	sy
	for (;;) {
   1edbe:	e7fe      	b.n	1edbe <arch_system_halt+0x10>

0001edc0 <z_early_memset>:
{
   1edc0:	b508      	push	{r3, lr}
   1edc2:	f001 f839 	bl	1fe38 <memset>
}
   1edc6:	bd08      	pop	{r3, pc}

0001edc8 <z_early_memcpy>:
{
   1edc8:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1edca:	f000 fffa 	bl	1fdc2 <memcpy>
}
   1edce:	bd08      	pop	{r3, pc}

0001edd0 <k_heap_init>:
{
   1edd0:	b510      	push	{r4, lr}
	sys_dlist_init(&w->waitq);
   1edd2:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
   1edd6:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   1edd8:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
   1edda:	f7f7 febd 	bl	16b58 <sys_heap_init>
}
   1edde:	bd10      	pop	{r4, pc}

0001ede0 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   1ede0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ede4:	b085      	sub	sp, #20
   1ede6:	4607      	mov	r7, r0
   1ede8:	9103      	str	r1, [sp, #12]
   1edea:	4692      	mov	sl, r2
   1edec:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1edee:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1edf0:	4628      	mov	r0, r5
   1edf2:	4621      	mov	r1, r4
   1edf4:	f000 fdb0 	bl	1f958 <sys_clock_timeout_end_calc>
   1edf8:	4606      	mov	r6, r0
   1edfa:	4689      	mov	r9, r1
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   1edfc:	f1b4 3fff 	cmp.w	r4, #4294967295
   1ee00:	bf08      	it	eq
   1ee02:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   1ee06:	d00d      	beq.n	1ee24 <k_heap_aligned_alloc+0x44>

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1ee08:	f107 0b14 	add.w	fp, r7, #20
   1ee0c:	f04f 0320 	mov.w	r3, #32
   1ee10:	f3ef 8511 	mrs	r5, BASEPRI
   1ee14:	f383 8812 	msr	BASEPRI_MAX, r3
   1ee18:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");

	bool blocked_alloc = false;
   1ee1c:	f04f 0800 	mov.w	r8, #0
	void *ret = NULL;
   1ee20:	4644      	mov	r4, r8

	while (ret == NULL) {
   1ee22:	e014      	b.n	1ee4e <k_heap_aligned_alloc+0x6e>
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   1ee24:	f04f 36ff 	mov.w	r6, #4294967295
   1ee28:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
   1ee2c:	e7ec      	b.n	1ee08 <k_heap_aligned_alloc+0x28>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1ee2e:	9000      	str	r0, [sp, #0]
   1ee30:	9101      	str	r1, [sp, #4]
   1ee32:	f107 020c 	add.w	r2, r7, #12
   1ee36:	4629      	mov	r1, r5
   1ee38:	4658      	mov	r0, fp
   1ee3a:	f7f2 fd8b 	bl	11954 <z_pend_curr>
   1ee3e:	f04f 0320 	mov.w	r3, #32
   1ee42:	f3ef 8511 	mrs	r5, BASEPRI
   1ee46:	f383 8812 	msr	BASEPRI_MAX, r3
   1ee4a:	f3bf 8f6f 	isb	sy
	while (ret == NULL) {
   1ee4e:	b9ac      	cbnz	r4, 1ee7c <k_heap_aligned_alloc+0x9c>
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   1ee50:	4652      	mov	r2, sl
   1ee52:	9903      	ldr	r1, [sp, #12]
   1ee54:	4638      	mov	r0, r7
   1ee56:	f7f7 fe09 	bl	16a6c <sys_heap_aligned_alloc>
   1ee5a:	4604      	mov	r4, r0
		now = sys_clock_tick_get();
   1ee5c:	f7f3 f92c 	bl	120b8 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   1ee60:	b964      	cbnz	r4, 1ee7c <k_heap_aligned_alloc+0x9c>
		    (ret != NULL) || ((end - now) <= 0)) {
   1ee62:	1a30      	subs	r0, r6, r0
   1ee64:	eb69 0101 	sbc.w	r1, r9, r1
   1ee68:	2801      	cmp	r0, #1
   1ee6a:	f171 0300 	sbcs.w	r3, r1, #0
   1ee6e:	db05      	blt.n	1ee7c <k_heap_aligned_alloc+0x9c>
		if (!blocked_alloc) {
   1ee70:	f1b8 0f00 	cmp.w	r8, #0
   1ee74:	d1db      	bne.n	1ee2e <k_heap_aligned_alloc+0x4e>
			blocked_alloc = true;
   1ee76:	f04f 0801 	mov.w	r8, #1
   1ee7a:	e7d8      	b.n	1ee2e <k_heap_aligned_alloc+0x4e>
	__asm__ volatile(
   1ee7c:	f385 8811 	msr	BASEPRI, r5
   1ee80:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   1ee84:	4620      	mov	r0, r4
   1ee86:	b005      	add	sp, #20
   1ee88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001ee8c <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   1ee8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ee8e:	4604      	mov	r4, r0
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1ee90:	f100 0714 	add.w	r7, r0, #20
	__asm__ volatile(
   1ee94:	f04f 0320 	mov.w	r3, #32
   1ee98:	f3ef 8511 	mrs	r5, BASEPRI
   1ee9c:	f383 8812 	msr	BASEPRI_MAX, r3
   1eea0:	f3bf 8f6f 	isb	sy

	sys_heap_free(&h->heap, mem);
   1eea4:	f7f7 fd9e 	bl	169e4 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   1eea8:	f104 000c 	add.w	r0, r4, #12
   1eeac:	f000 fc52 	bl	1f754 <z_unpend_all>
   1eeb0:	b920      	cbnz	r0, 1eebc <k_heap_free+0x30>
	__asm__ volatile(
   1eeb2:	f385 8811 	msr	BASEPRI, r5
   1eeb6:	f3bf 8f6f 	isb	sy
		z_reschedule(&h->lock, key);
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   1eeba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		z_reschedule(&h->lock, key);
   1eebc:	4629      	mov	r1, r5
   1eebe:	4638      	mov	r0, r7
   1eec0:	f7f2 fbe4 	bl	1168c <z_reschedule>
   1eec4:	e7f9      	b.n	1eeba <k_heap_free+0x2e>

0001eec6 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1eec6:	68c2      	ldr	r2, [r0, #12]
   1eec8:	6903      	ldr	r3, [r0, #16]
   1eeca:	431a      	orrs	r2, r3
   1eecc:	f012 0203 	ands.w	r2, r2, #3
   1eed0:	d10d      	bne.n	1eeee <create_free_list+0x28>
	slab->free_list = NULL;
   1eed2:	2100      	movs	r1, #0
   1eed4:	6141      	str	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1eed6:	e005      	b.n	1eee4 <create_free_list+0x1e>
		*(char **)p = slab->free_list;
   1eed8:	6941      	ldr	r1, [r0, #20]
   1eeda:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
   1eedc:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
   1eede:	68c1      	ldr	r1, [r0, #12]
   1eee0:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   1eee2:	3201      	adds	r2, #1
   1eee4:	6881      	ldr	r1, [r0, #8]
   1eee6:	4291      	cmp	r1, r2
   1eee8:	d8f6      	bhi.n	1eed8 <create_free_list+0x12>
	return 0;
   1eeea:	2000      	movs	r0, #0
   1eeec:	4770      	bx	lr
		return -EINVAL;
   1eeee:	f06f 0015 	mvn.w	r0, #21
}
   1eef2:	4770      	bx	lr

0001eef4 <k_mem_slab_init>:
{
   1eef4:	b510      	push	{r4, lr}
   1eef6:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
   1eef8:	6083      	str	r3, [r0, #8]
	slab->block_size = block_size;
   1eefa:	60c2      	str	r2, [r0, #12]
	slab->buffer = buffer;
   1eefc:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
   1eefe:	2300      	movs	r3, #0
   1ef00:	6183      	str	r3, [r0, #24]
	rc = create_free_list(slab);
   1ef02:	f7ff ffe0 	bl	1eec6 <create_free_list>
	if (rc < 0) {
   1ef06:	2800      	cmp	r0, #0
   1ef08:	db01      	blt.n	1ef0e <k_mem_slab_init+0x1a>
	list->head = (sys_dnode_t *)list;
   1ef0a:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
   1ef0c:	6064      	str	r4, [r4, #4]
}
   1ef0e:	bd10      	pop	{r4, pc}

0001ef10 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1ef10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ef14:	4604      	mov	r4, r0
   1ef16:	460d      	mov	r5, r1
	__asm__ volatile(
   1ef18:	f04f 0320 	mov.w	r3, #32
   1ef1c:	f3ef 8611 	mrs	r6, BASEPRI
   1ef20:	f383 8812 	msr	BASEPRI_MAX, r3
   1ef24:	f3bf 8f6f 	isb	sy
   1ef28:	4637      	mov	r7, r6
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   1ef2a:	6943      	ldr	r3, [r0, #20]
   1ef2c:	b16b      	cbz	r3, 1ef4a <k_mem_slab_free+0x3a>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
   1ef2e:	682b      	ldr	r3, [r5, #0]
   1ef30:	6962      	ldr	r2, [r4, #20]
   1ef32:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   1ef34:	682b      	ldr	r3, [r5, #0]
   1ef36:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   1ef38:	69a3      	ldr	r3, [r4, #24]
   1ef3a:	3b01      	subs	r3, #1
   1ef3c:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1ef3e:	f387 8811 	msr	BASEPRI, r7
   1ef42:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   1ef46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ef4a:	f100 0808 	add.w	r8, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1ef4e:	f000 fbdf 	bl	1f710 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   1ef52:	2800      	cmp	r0, #0
   1ef54:	d0eb      	beq.n	1ef2e <k_mem_slab_free+0x1e>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1ef56:	682a      	ldr	r2, [r5, #0]
   1ef58:	2100      	movs	r1, #0
   1ef5a:	67c1      	str	r1, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1ef5c:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   1ef5e:	f000 fb23 	bl	1f5a8 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   1ef62:	4631      	mov	r1, r6
   1ef64:	4640      	mov	r0, r8
   1ef66:	f7f2 fb91 	bl	1168c <z_reschedule>
			return;
   1ef6a:	e7ec      	b.n	1ef46 <k_mem_slab_free+0x36>

0001ef6c <setup_thread_stack>:
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1ef6c:	3207      	adds	r2, #7
   1ef6e:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
   1ef72:	6681      	str	r1, [r0, #104]	; 0x68
	new_thread->stack_info.size = stack_buf_size;
   1ef74:	66c2      	str	r2, [r0, #108]	; 0x6c
	new_thread->stack_info.delta = delta;
   1ef76:	2300      	movs	r3, #0
   1ef78:	6703      	str	r3, [r0, #112]	; 0x70
}
   1ef7a:	1888      	adds	r0, r1, r2
   1ef7c:	4770      	bx	lr

0001ef7e <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1ef7e:	f3ef 8005 	mrs	r0, IPSR
}
   1ef82:	3800      	subs	r0, #0
   1ef84:	bf18      	it	ne
   1ef86:	2001      	movne	r0, #1
   1ef88:	4770      	bx	lr

0001ef8a <z_impl_k_thread_name_set>:
}
   1ef8a:	f06f 0057 	mvn.w	r0, #87	; 0x57
   1ef8e:	4770      	bx	lr

0001ef90 <k_thread_name_get>:
}
   1ef90:	2000      	movs	r0, #0
   1ef92:	4770      	bx	lr

0001ef94 <z_impl_k_thread_start>:
{
   1ef94:	b508      	push	{r3, lr}
	z_sched_start(thread);
   1ef96:	f7f2 fca3 	bl	118e0 <z_sched_start>
}
   1ef9a:	bd08      	pop	{r3, pc}

0001ef9c <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
   1ef9c:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
   1ef9e:	2400      	movs	r4, #0
   1efa0:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
   1efa2:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1efa4:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
   1efa6:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
   1efa8:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
   1efaa:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
   1efac:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
   1efae:	bc10      	pop	{r4}
   1efb0:	4770      	bx	lr

0001efb2 <z_impl_k_thread_create>:
{
   1efb2:	b5f0      	push	{r4, r5, r6, r7, lr}
   1efb4:	b087      	sub	sp, #28
   1efb6:	4604      	mov	r4, r0
   1efb8:	9e12      	ldr	r6, [sp, #72]	; 0x48
   1efba:	9d13      	ldr	r5, [sp, #76]	; 0x4c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1efbc:	2700      	movs	r7, #0
   1efbe:	9705      	str	r7, [sp, #20]
   1efc0:	9f10      	ldr	r7, [sp, #64]	; 0x40
   1efc2:	9704      	str	r7, [sp, #16]
   1efc4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   1efc6:	9703      	str	r7, [sp, #12]
   1efc8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   1efca:	9702      	str	r7, [sp, #8]
   1efcc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   1efce:	9701      	str	r7, [sp, #4]
   1efd0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   1efd2:	9700      	str	r7, [sp, #0]
   1efd4:	f7f1 ff84 	bl	10ee0 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1efd8:	f1b5 3fff 	cmp.w	r5, #4294967295
   1efdc:	bf08      	it	eq
   1efde:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1efe2:	d102      	bne.n	1efea <z_impl_k_thread_create+0x38>
}
   1efe4:	4620      	mov	r0, r4
   1efe6:	b007      	add	sp, #28
   1efe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
   1efea:	4632      	mov	r2, r6
   1efec:	462b      	mov	r3, r5
   1efee:	4620      	mov	r0, r4
   1eff0:	f7f1 ff68 	bl	10ec4 <schedule_new_thread>
   1eff4:	e7f6      	b.n	1efe4 <z_impl_k_thread_create+0x32>

0001eff6 <z_pm_save_idle_exit>:
{
   1eff6:	b508      	push	{r3, lr}
	pm_system_resume();
   1eff8:	f7e5 fc38 	bl	486c <pm_system_resume>
	sys_clock_idle_exit();
   1effc:	f7ff fafa 	bl	1e5f4 <sys_clock_idle_exit>
}
   1f000:	bd08      	pop	{r3, pc}

0001f002 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
   1f002:	4288      	cmp	r0, r1
   1f004:	da00      	bge.n	1f008 <new_prio_for_inheritance+0x6>
   1f006:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   1f008:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
   1f00c:	db01      	blt.n	1f012 <new_prio_for_inheritance+0x10>
   1f00e:	4608      	mov	r0, r1
   1f010:	4770      	bx	lr
   1f012:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
   1f016:	4770      	bx	lr

0001f018 <adjust_owner_prio>:
{
   1f018:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
   1f01a:	6880      	ldr	r0, [r0, #8]
   1f01c:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1f020:	428b      	cmp	r3, r1
   1f022:	d101      	bne.n	1f028 <adjust_owner_prio+0x10>
	return false;
   1f024:	2000      	movs	r0, #0
}
   1f026:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
   1f028:	f7f2 fcb0 	bl	1198c <z_set_prio>
   1f02c:	e7fb      	b.n	1f026 <adjust_owner_prio+0xe>

0001f02e <z_impl_k_mutex_init>:
{
   1f02e:	4603      	mov	r3, r0
	mutex->owner = NULL;
   1f030:	2000      	movs	r0, #0
   1f032:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
   1f034:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
   1f036:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   1f038:	605b      	str	r3, [r3, #4]
}
   1f03a:	4770      	bx	lr

0001f03c <sys_sflist_append>:
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1f03c:	680b      	ldr	r3, [r1, #0]
   1f03e:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   1f042:	600b      	str	r3, [r1, #0]
	return list->tail;
   1f044:	6842      	ldr	r2, [r0, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   1f046:	b132      	cbz	r2, 1f056 <sys_sflist_append+0x1a>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1f048:	6813      	ldr	r3, [r2, #0]
   1f04a:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   1f04e:	430b      	orrs	r3, r1
   1f050:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1f052:	6041      	str	r1, [r0, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   1f054:	4770      	bx	lr
	list->tail = node;
   1f056:	6041      	str	r1, [r0, #4]
	list->head = node;
   1f058:	6001      	str	r1, [r0, #0]
}
   1f05a:	4770      	bx	lr

0001f05c <sys_sflist_insert>:
Z_GENLIST_INSERT(sflist, sfnode)
   1f05c:	b508      	push	{r3, lr}
   1f05e:	b191      	cbz	r1, 1f086 <sys_sflist_insert+0x2a>
   1f060:	468c      	mov	ip, r1
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1f062:	680b      	ldr	r3, [r1, #0]
   1f064:	f023 0103 	bic.w	r1, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
   1f068:	2b03      	cmp	r3, #3
   1f06a:	d918      	bls.n	1f09e <sys_sflist_insert+0x42>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1f06c:	6813      	ldr	r3, [r2, #0]
   1f06e:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   1f072:	430b      	orrs	r3, r1
   1f074:	6013      	str	r3, [r2, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1f076:	f8dc 3000 	ldr.w	r3, [ip]
   1f07a:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   1f07e:	4313      	orrs	r3, r2
   1f080:	f8cc 3000 	str.w	r3, [ip]
Z_GENLIST_INSERT(sflist, sfnode)
   1f084:	bd08      	pop	{r3, pc}
	return list->head;
   1f086:	6801      	ldr	r1, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1f088:	6813      	ldr	r3, [r2, #0]
   1f08a:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   1f08e:	430b      	orrs	r3, r1
   1f090:	6013      	str	r3, [r2, #0]
	list->head = node;
   1f092:	6002      	str	r2, [r0, #0]
	return list->tail;
   1f094:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_PREPEND(sflist, sfnode)
   1f096:	2b00      	cmp	r3, #0
   1f098:	d1f4      	bne.n	1f084 <sys_sflist_insert+0x28>
	list->tail = node;
   1f09a:	6042      	str	r2, [r0, #4]
}
   1f09c:	e7f2      	b.n	1f084 <sys_sflist_insert+0x28>
Z_GENLIST_INSERT(sflist, sfnode)
   1f09e:	4611      	mov	r1, r2
   1f0a0:	f7ff ffcc 	bl	1f03c <sys_sflist_append>
   1f0a4:	e7ee      	b.n	1f084 <sys_sflist_insert+0x28>

0001f0a6 <prepare_thread_to_run>:
{
   1f0a6:	b508      	push	{r3, lr}
   1f0a8:	2200      	movs	r2, #0
   1f0aa:	67c2      	str	r2, [r0, #124]	; 0x7c
   1f0ac:	6141      	str	r1, [r0, #20]
	z_ready_thread(thread);
   1f0ae:	f000 fa7b 	bl	1f5a8 <z_ready_thread>
}
   1f0b2:	bd08      	pop	{r3, pc}

0001f0b4 <queue_insert>:
{
   1f0b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f0b8:	4604      	mov	r4, r0
   1f0ba:	460e      	mov	r6, r1
   1f0bc:	4615      	mov	r5, r2
   1f0be:	461f      	mov	r7, r3
   1f0c0:	f89d 3020 	ldrb.w	r3, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1f0c4:	f100 0808 	add.w	r8, r0, #8
	__asm__ volatile(
   1f0c8:	f04f 0220 	mov.w	r2, #32
   1f0cc:	f3ef 8911 	mrs	r9, BASEPRI
   1f0d0:	f382 8812 	msr	BASEPRI_MAX, r2
   1f0d4:	f3bf 8f6f 	isb	sy
   1f0d8:	46ca      	mov	sl, r9
	if (is_append) {
   1f0da:	b103      	cbz	r3, 1f0de <queue_insert+0x2a>
	return list->tail;
   1f0dc:	6846      	ldr	r6, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   1f0de:	4640      	mov	r0, r8
   1f0e0:	f000 fb16 	bl	1f710 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   1f0e4:	b998      	cbnz	r0, 1f10e <queue_insert+0x5a>
	if (alloc) {
   1f0e6:	b9df      	cbnz	r7, 1f120 <queue_insert+0x6c>
	node->next_and_flags = flags;
   1f0e8:	2300      	movs	r3, #0
   1f0ea:	602b      	str	r3, [r5, #0]
	sys_sflist_insert(&queue->data_q, prev, data);
   1f0ec:	462a      	mov	r2, r5
   1f0ee:	4631      	mov	r1, r6
   1f0f0:	4620      	mov	r0, r4
   1f0f2:	f7ff ffb3 	bl	1f05c <sys_sflist_insert>
	z_handle_obj_poll_events(&queue->poll_events, state);
   1f0f6:	2104      	movs	r1, #4
   1f0f8:	f104 0010 	add.w	r0, r4, #16
   1f0fc:	f000 fe1f 	bl	1fd3e <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   1f100:	4649      	mov	r1, r9
   1f102:	4640      	mov	r0, r8
   1f104:	f7f2 fac2 	bl	1168c <z_reschedule>
	return 0;
   1f108:	2000      	movs	r0, #0
}
   1f10a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prepare_thread_to_run(first_pending_thread, data);
   1f10e:	4629      	mov	r1, r5
   1f110:	f7ff ffc9 	bl	1f0a6 <prepare_thread_to_run>
		z_reschedule(&queue->lock, key);
   1f114:	4649      	mov	r1, r9
   1f116:	4640      	mov	r0, r8
   1f118:	f7f2 fab8 	bl	1168c <z_reschedule>
		return 0;
   1f11c:	2000      	movs	r0, #0
   1f11e:	e7f4      	b.n	1f10a <queue_insert+0x56>
	return z_thread_aligned_alloc(0, size);
   1f120:	2108      	movs	r1, #8
   1f122:	2000      	movs	r0, #0
   1f124:	f7f3 f93c 	bl	123a0 <z_thread_aligned_alloc>
		if (anode == NULL) {
   1f128:	b120      	cbz	r0, 1f134 <queue_insert+0x80>
		anode->data = data;
   1f12a:	6045      	str	r5, [r0, #4]
   1f12c:	2201      	movs	r2, #1
   1f12e:	6002      	str	r2, [r0, #0]
		data = anode;
   1f130:	4605      	mov	r5, r0
   1f132:	e7db      	b.n	1f0ec <queue_insert+0x38>
	__asm__ volatile(
   1f134:	f38a 8811 	msr	BASEPRI, sl
   1f138:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   1f13c:	f06f 000b 	mvn.w	r0, #11
   1f140:	e7e3      	b.n	1f10a <queue_insert+0x56>

0001f142 <z_queue_node_peek>:
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   1f142:	b160      	cbz	r0, 1f15e <z_queue_node_peek+0x1c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1f144:	6803      	ldr	r3, [r0, #0]
   1f146:	f013 0f03 	tst.w	r3, #3
   1f14a:	d008      	beq.n	1f15e <z_queue_node_peek+0x1c>
{
   1f14c:	b510      	push	{r4, lr}
		ret = anode->data;
   1f14e:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1f150:	b909      	cbnz	r1, 1f156 <z_queue_node_peek+0x14>
		ret = anode->data;
   1f152:	4620      	mov	r0, r4
}
   1f154:	bd10      	pop	{r4, pc}
			k_free(anode);
   1f156:	f000 fe1a 	bl	1fd8e <k_free>
		ret = anode->data;
   1f15a:	4620      	mov	r0, r4
   1f15c:	e7fa      	b.n	1f154 <z_queue_node_peek+0x12>
}
   1f15e:	4770      	bx	lr

0001f160 <z_impl_k_queue_init>:
	list->head = NULL;
   1f160:	2300      	movs	r3, #0
   1f162:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   1f164:	6043      	str	r3, [r0, #4]
   1f166:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
   1f16a:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   1f16c:	60c3      	str	r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   1f16e:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   1f172:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   1f174:	6143      	str	r3, [r0, #20]
}
   1f176:	4770      	bx	lr

0001f178 <z_impl_k_queue_cancel_wait>:
{
   1f178:	b570      	push	{r4, r5, r6, lr}
   1f17a:	4604      	mov	r4, r0
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1f17c:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   1f180:	f04f 0320 	mov.w	r3, #32
   1f184:	f3ef 8611 	mrs	r6, BASEPRI
   1f188:	f383 8812 	msr	BASEPRI_MAX, r3
   1f18c:	f3bf 8f6f 	isb	sy
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   1f190:	4628      	mov	r0, r5
   1f192:	f000 fabd 	bl	1f710 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   1f196:	b110      	cbz	r0, 1f19e <z_impl_k_queue_cancel_wait+0x26>
		prepare_thread_to_run(first_pending_thread, NULL);
   1f198:	2100      	movs	r1, #0
   1f19a:	f7ff ff84 	bl	1f0a6 <prepare_thread_to_run>
	z_handle_obj_poll_events(&queue->poll_events, state);
   1f19e:	2108      	movs	r1, #8
   1f1a0:	f104 0010 	add.w	r0, r4, #16
   1f1a4:	f000 fdcb 	bl	1fd3e <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   1f1a8:	4631      	mov	r1, r6
   1f1aa:	4628      	mov	r0, r5
   1f1ac:	f7f2 fa6e 	bl	1168c <z_reschedule>
}
   1f1b0:	bd70      	pop	{r4, r5, r6, pc}

0001f1b2 <k_queue_append>:
{
   1f1b2:	b500      	push	{lr}
   1f1b4:	b083      	sub	sp, #12
   1f1b6:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   1f1b8:	2301      	movs	r3, #1
   1f1ba:	9300      	str	r3, [sp, #0]
   1f1bc:	2300      	movs	r3, #0
   1f1be:	4619      	mov	r1, r3
   1f1c0:	f7ff ff78 	bl	1f0b4 <queue_insert>
}
   1f1c4:	b003      	add	sp, #12
   1f1c6:	f85d fb04 	ldr.w	pc, [sp], #4

0001f1ca <k_queue_prepend>:
{
   1f1ca:	b500      	push	{lr}
   1f1cc:	b083      	sub	sp, #12
   1f1ce:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   1f1d0:	2100      	movs	r1, #0
   1f1d2:	9100      	str	r1, [sp, #0]
   1f1d4:	460b      	mov	r3, r1
   1f1d6:	f7ff ff6d 	bl	1f0b4 <queue_insert>
}
   1f1da:	b003      	add	sp, #12
   1f1dc:	f85d fb04 	ldr.w	pc, [sp], #4

0001f1e0 <z_impl_k_queue_peek_head>:

	return true;
}

void *z_impl_k_queue_peek_head(struct k_queue *queue)
{
   1f1e0:	b508      	push	{r3, lr}
	void *ret = z_queue_node_peek(sys_sflist_peek_head(&queue->data_q), false);
   1f1e2:	2100      	movs	r1, #0
   1f1e4:	6800      	ldr	r0, [r0, #0]
   1f1e6:	f7ff ffac 	bl	1f142 <z_queue_node_peek>

	SYS_PORT_TRACING_OBJ_FUNC(k_queue, peek_head, queue, ret);

	return ret;
}
   1f1ea:	bd08      	pop	{r3, pc}

0001f1ec <z_impl_k_queue_peek_tail>:

void *z_impl_k_queue_peek_tail(struct k_queue *queue)
{
   1f1ec:	b508      	push	{r3, lr}
	void *ret = z_queue_node_peek(sys_sflist_peek_tail(&queue->data_q), false);
   1f1ee:	2100      	movs	r1, #0
   1f1f0:	6840      	ldr	r0, [r0, #4]
   1f1f2:	f7ff ffa6 	bl	1f142 <z_queue_node_peek>

	SYS_PORT_TRACING_OBJ_FUNC(k_queue, peek_tail, queue, ret);

	return ret;
}
   1f1f6:	bd08      	pop	{r3, pc}

0001f1f8 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   1f1f8:	b15a      	cbz	r2, 1f212 <z_impl_k_sem_init+0x1a>
   1f1fa:	428a      	cmp	r2, r1
   1f1fc:	d30c      	bcc.n	1f218 <z_impl_k_sem_init+0x20>
	sem->count = initial_count;
   1f1fe:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   1f200:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   1f202:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   1f204:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->poll_events);
   1f206:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   1f20a:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   1f20c:	6143      	str	r3, [r0, #20]
	return 0;
   1f20e:	2000      	movs	r0, #0
   1f210:	4770      	bx	lr
		return -EINVAL;
   1f212:	f06f 0015 	mvn.w	r0, #21
   1f216:	4770      	bx	lr
   1f218:	f06f 0015 	mvn.w	r0, #21
}
   1f21c:	4770      	bx	lr

0001f21e <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
   1f21e:	460b      	mov	r3, r1
   1f220:	b139      	cbz	r1, 1f232 <sys_slist_remove+0x14>
	return node->next;
   1f222:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
   1f224:	6019      	str	r1, [r3, #0]
	return list->tail;
   1f226:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   1f228:	428a      	cmp	r2, r1
   1f22a:	d009      	beq.n	1f240 <sys_slist_remove+0x22>
	parent->next = child;
   1f22c:	2300      	movs	r3, #0
   1f22e:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1f230:	4770      	bx	lr
	return node->next;
   1f232:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   1f234:	6003      	str	r3, [r0, #0]
	return list->tail;
   1f236:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   1f238:	428a      	cmp	r2, r1
   1f23a:	d1f7      	bne.n	1f22c <sys_slist_remove+0xe>
	list->tail = node;
   1f23c:	6043      	str	r3, [r0, #4]
}
   1f23e:	e7f5      	b.n	1f22c <sys_slist_remove+0xe>
	list->tail = node;
   1f240:	6043      	str	r3, [r0, #4]
}
   1f242:	e7f3      	b.n	1f22c <sys_slist_remove+0xe>

0001f244 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f244:	b508      	push	{r3, lr}
   1f246:	460a      	mov	r2, r1
	return list->head;
   1f248:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f24a:	2100      	movs	r1, #0
   1f24c:	e001      	b.n	1f252 <sys_slist_find_and_remove+0xe>
   1f24e:	4619      	mov	r1, r3
   1f250:	681b      	ldr	r3, [r3, #0]
   1f252:	b12b      	cbz	r3, 1f260 <sys_slist_find_and_remove+0x1c>
   1f254:	4293      	cmp	r3, r2
   1f256:	d1fa      	bne.n	1f24e <sys_slist_find_and_remove+0xa>
   1f258:	f7ff ffe1 	bl	1f21e <sys_slist_remove>
   1f25c:	2001      	movs	r0, #1
   1f25e:	e000      	b.n	1f262 <sys_slist_find_and_remove+0x1e>
   1f260:	2000      	movs	r0, #0
   1f262:	bd08      	pop	{r3, pc}

0001f264 <queue_remove_locked>:
{
   1f264:	b508      	push	{r3, lr}
	return (*flagp & BIT(bit)) != 0U;
   1f266:	68cb      	ldr	r3, [r1, #12]
	*flagp &= ~BIT(bit);
   1f268:	f023 0204 	bic.w	r2, r3, #4
   1f26c:	60ca      	str	r2, [r1, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   1f26e:	f013 0f04 	tst.w	r3, #4
   1f272:	d100      	bne.n	1f276 <queue_remove_locked+0x12>
}
   1f274:	bd08      	pop	{r3, pc}
		(void)sys_slist_find_and_remove(&queue->pending, &work->node);
   1f276:	3080      	adds	r0, #128	; 0x80
   1f278:	f7ff ffe4 	bl	1f244 <sys_slist_find_and_remove>
}
   1f27c:	e7fa      	b.n	1f274 <queue_remove_locked+0x10>

0001f27e <cancel_async_locked>:
{
   1f27e:	b510      	push	{r4, lr}
   1f280:	4604      	mov	r4, r0
	return (*flagp & BIT(bit)) != 0U;
   1f282:	68c3      	ldr	r3, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1f284:	f013 0f02 	tst.w	r3, #2
   1f288:	d009      	beq.n	1f29e <cancel_async_locked+0x20>
	return *flagp;
   1f28a:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   1f28c:	f013 000f 	ands.w	r0, r3, #15
   1f290:	d004      	beq.n	1f29c <cancel_async_locked+0x1e>
	*flagp |= BIT(bit);
   1f292:	f043 0202 	orr.w	r2, r3, #2
   1f296:	60e2      	str	r2, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   1f298:	f040 0002 	orr.w	r0, r0, #2
}
   1f29c:	bd10      	pop	{r4, pc}
		queue_remove_locked(work->queue, work);
   1f29e:	4601      	mov	r1, r0
   1f2a0:	6880      	ldr	r0, [r0, #8]
   1f2a2:	f7ff ffdf 	bl	1f264 <queue_remove_locked>
   1f2a6:	e7f0      	b.n	1f28a <cancel_async_locked+0xc>

0001f2a8 <notify_queue_locked>:
	if (queue != NULL) {
   1f2a8:	b130      	cbz	r0, 1f2b8 <notify_queue_locked+0x10>
{
   1f2aa:	b508      	push	{r3, lr}
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   1f2ac:	2200      	movs	r2, #0
   1f2ae:	4611      	mov	r1, r2
   1f2b0:	3088      	adds	r0, #136	; 0x88
   1f2b2:	f000 fa63 	bl	1f77c <z_sched_wake>
}
   1f2b6:	bd08      	pop	{r3, pc}
	bool rv = false;
   1f2b8:	2000      	movs	r0, #0
}
   1f2ba:	4770      	bx	lr

0001f2bc <submit_to_queue_locked>:
{
   1f2bc:	b570      	push	{r4, r5, r6, lr}
   1f2be:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
   1f2c0:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1f2c2:	f013 0f02 	tst.w	r3, #2
   1f2c6:	d122      	bne.n	1f30e <submit_to_queue_locked+0x52>
   1f2c8:	4604      	mov	r4, r0
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   1f2ca:	f013 0f04 	tst.w	r3, #4
   1f2ce:	d123      	bne.n	1f318 <submit_to_queue_locked+0x5c>
		if (*queuep == NULL) {
   1f2d0:	680b      	ldr	r3, [r1, #0]
   1f2d2:	b1ab      	cbz	r3, 1f300 <submit_to_queue_locked+0x44>
	return (*flagp & BIT(bit)) != 0U;
   1f2d4:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   1f2d6:	f013 0f01 	tst.w	r3, #1
   1f2da:	d014      	beq.n	1f306 <submit_to_queue_locked+0x4a>
			*queuep = work->queue;
   1f2dc:	68a3      	ldr	r3, [r4, #8]
   1f2de:	602b      	str	r3, [r5, #0]
			ret = 2;
   1f2e0:	2602      	movs	r6, #2
		int rc = queue_submit_locked(*queuep, work);
   1f2e2:	4621      	mov	r1, r4
   1f2e4:	6828      	ldr	r0, [r5, #0]
   1f2e6:	f7f2 f807 	bl	112f8 <queue_submit_locked>
		if (rc < 0) {
   1f2ea:	2800      	cmp	r0, #0
   1f2ec:	db11      	blt.n	1f312 <submit_to_queue_locked+0x56>
	*flagp |= BIT(bit);
   1f2ee:	68e3      	ldr	r3, [r4, #12]
   1f2f0:	f043 0304 	orr.w	r3, r3, #4
   1f2f4:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   1f2f6:	682b      	ldr	r3, [r5, #0]
   1f2f8:	60a3      	str	r3, [r4, #8]
	if (ret <= 0) {
   1f2fa:	b136      	cbz	r6, 1f30a <submit_to_queue_locked+0x4e>
   1f2fc:	4630      	mov	r0, r6
	return ret;
   1f2fe:	e00a      	b.n	1f316 <submit_to_queue_locked+0x5a>
			*queuep = work->queue;
   1f300:	6883      	ldr	r3, [r0, #8]
   1f302:	600b      	str	r3, [r1, #0]
   1f304:	e7e6      	b.n	1f2d4 <submit_to_queue_locked+0x18>
		ret = 1;
   1f306:	2601      	movs	r6, #1
   1f308:	e7eb      	b.n	1f2e2 <submit_to_queue_locked+0x26>
   1f30a:	4630      	mov	r0, r6
   1f30c:	e001      	b.n	1f312 <submit_to_queue_locked+0x56>
		ret = -EBUSY;
   1f30e:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
   1f312:	2300      	movs	r3, #0
   1f314:	602b      	str	r3, [r5, #0]
}
   1f316:	bd70      	pop	{r4, r5, r6, pc}
	int ret = 0;
   1f318:	2000      	movs	r0, #0
   1f31a:	e7fa      	b.n	1f312 <submit_to_queue_locked+0x56>

0001f31c <work_timeout>:
{
   1f31c:	b510      	push	{r4, lr}
   1f31e:	b082      	sub	sp, #8
   1f320:	4603      	mov	r3, r0
   1f322:	f04f 0220 	mov.w	r2, #32
   1f326:	f3ef 8411 	mrs	r4, BASEPRI
   1f32a:	f382 8812 	msr	BASEPRI_MAX, r2
   1f32e:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   1f332:	2200      	movs	r2, #0
   1f334:	9201      	str	r2, [sp, #4]
	return (*flagp & BIT(bit)) != 0U;
   1f336:	f850 2c04 	ldr.w	r2, [r0, #-4]
	*flagp &= ~BIT(bit);
   1f33a:	f022 0108 	bic.w	r1, r2, #8
   1f33e:	f840 1c04 	str.w	r1, [r0, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   1f342:	f012 0f08 	tst.w	r2, #8
   1f346:	d105      	bne.n	1f354 <work_timeout+0x38>
	__asm__ volatile(
   1f348:	f384 8811 	msr	BASEPRI, r4
   1f34c:	f3bf 8f6f 	isb	sy
}
   1f350:	b002      	add	sp, #8
   1f352:	bd10      	pop	{r4, pc}
   1f354:	3810      	subs	r0, #16
		queue = dw->queue;
   1f356:	699b      	ldr	r3, [r3, #24]
   1f358:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   1f35a:	a901      	add	r1, sp, #4
   1f35c:	f7ff ffae 	bl	1f2bc <submit_to_queue_locked>
   1f360:	e7f2      	b.n	1f348 <work_timeout+0x2c>

0001f362 <z_reschedule_unlocked>:
{
   1f362:	b508      	push	{r3, lr}
	__asm__ volatile(
   1f364:	f04f 0320 	mov.w	r3, #32
   1f368:	f3ef 8011 	mrs	r0, BASEPRI
   1f36c:	f383 8812 	msr	BASEPRI_MAX, r3
   1f370:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1f374:	f000 f8c6 	bl	1f504 <z_reschedule_irqlock>
}
   1f378:	bd08      	pop	{r3, pc}

0001f37a <unschedule_locked>:
{
   1f37a:	b508      	push	{r3, lr}
	return (*flagp & BIT(bit)) != 0U;
   1f37c:	68c3      	ldr	r3, [r0, #12]
	*flagp &= ~BIT(bit);
   1f37e:	f023 0208 	bic.w	r2, r3, #8
   1f382:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   1f384:	f013 0f08 	tst.w	r3, #8
   1f388:	d101      	bne.n	1f38e <unschedule_locked+0x14>
	bool ret = false;
   1f38a:	2000      	movs	r0, #0
}
   1f38c:	bd08      	pop	{r3, pc}
		z_abort_timeout(&dwork->timeout);
   1f38e:	3010      	adds	r0, #16
   1f390:	f000 fa5b 	bl	1f84a <z_abort_timeout>
		ret = true;
   1f394:	2001      	movs	r0, #1
   1f396:	e7f9      	b.n	1f38c <unschedule_locked+0x12>

0001f398 <cancel_delayable_async_locked>:
{
   1f398:	b510      	push	{r4, lr}
   1f39a:	4604      	mov	r4, r0
	(void)unschedule_locked(dwork);
   1f39c:	f7ff ffed 	bl	1f37a <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   1f3a0:	4620      	mov	r0, r4
   1f3a2:	f7ff ff6c 	bl	1f27e <cancel_async_locked>
}
   1f3a6:	bd10      	pop	{r4, pc}

0001f3a8 <k_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1f3a8:	2300      	movs	r3, #0
   1f3aa:	6003      	str	r3, [r0, #0]
   1f3ac:	6043      	str	r3, [r0, #4]
   1f3ae:	6083      	str	r3, [r0, #8]
   1f3b0:	60c3      	str	r3, [r0, #12]
   1f3b2:	6041      	str	r1, [r0, #4]
}
   1f3b4:	4770      	bx	lr

0001f3b6 <z_work_submit_to_queue>:
{
   1f3b6:	b510      	push	{r4, lr}
   1f3b8:	b082      	sub	sp, #8
   1f3ba:	9001      	str	r0, [sp, #4]
   1f3bc:	4608      	mov	r0, r1
   1f3be:	f04f 0320 	mov.w	r3, #32
   1f3c2:	f3ef 8411 	mrs	r4, BASEPRI
   1f3c6:	f383 8812 	msr	BASEPRI_MAX, r3
   1f3ca:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   1f3ce:	a901      	add	r1, sp, #4
   1f3d0:	f7ff ff74 	bl	1f2bc <submit_to_queue_locked>
	__asm__ volatile(
   1f3d4:	f384 8811 	msr	BASEPRI, r4
   1f3d8:	f3bf 8f6f 	isb	sy
}
   1f3dc:	b002      	add	sp, #8
   1f3de:	bd10      	pop	{r4, pc}

0001f3e0 <k_work_submit_to_queue>:
{
   1f3e0:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   1f3e2:	f7ff ffe8 	bl	1f3b6 <z_work_submit_to_queue>
	if (ret > 0) {
   1f3e6:	1e04      	subs	r4, r0, #0
   1f3e8:	dc01      	bgt.n	1f3ee <k_work_submit_to_queue+0xe>
}
   1f3ea:	4620      	mov	r0, r4
   1f3ec:	bd10      	pop	{r4, pc}
		z_reschedule_unlocked();
   1f3ee:	f7ff ffb8 	bl	1f362 <z_reschedule_unlocked>
	return ret;
   1f3f2:	e7fa      	b.n	1f3ea <k_work_submit_to_queue+0xa>

0001f3f4 <k_work_init_delayable>:
{
   1f3f4:	b538      	push	{r3, r4, r5, lr}
   1f3f6:	4604      	mov	r4, r0
   1f3f8:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   1f3fa:	2230      	movs	r2, #48	; 0x30
   1f3fc:	2100      	movs	r1, #0
   1f3fe:	f000 fd1b 	bl	1fe38 <memset>
   1f402:	6065      	str	r5, [r4, #4]
   1f404:	f44f 7380 	mov.w	r3, #256	; 0x100
   1f408:	60e3      	str	r3, [r4, #12]
}
   1f40a:	bd38      	pop	{r3, r4, r5, pc}

0001f40c <k_work_delayable_busy_get>:
	__asm__ volatile(
   1f40c:	f04f 0220 	mov.w	r2, #32
   1f410:	f3ef 8311 	mrs	r3, BASEPRI
   1f414:	f382 8812 	msr	BASEPRI_MAX, r2
   1f418:	f3bf 8f6f 	isb	sy
	return *flagp;
   1f41c:	68c0      	ldr	r0, [r0, #12]
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   1f41e:	f000 000f 	and.w	r0, r0, #15
	__asm__ volatile(
   1f422:	f383 8811 	msr	BASEPRI, r3
   1f426:	f3bf 8f6f 	isb	sy
}
   1f42a:	4770      	bx	lr

0001f42c <k_work_schedule_for_queue>:
{
   1f42c:	b510      	push	{r4, lr}
   1f42e:	b082      	sub	sp, #8
   1f430:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
   1f432:	f04f 0020 	mov.w	r0, #32
   1f436:	f3ef 8411 	mrs	r4, BASEPRI
   1f43a:	f380 8812 	msr	BASEPRI_MAX, r0
   1f43e:	f3bf 8f6f 	isb	sy
	return *flagp;
   1f442:	68c8      	ldr	r0, [r1, #12]
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   1f444:	f010 0f0e 	tst.w	r0, #14
   1f448:	d006      	beq.n	1f458 <k_work_schedule_for_queue+0x2c>
	int ret = 0;
   1f44a:	2000      	movs	r0, #0
	__asm__ volatile(
   1f44c:	f384 8811 	msr	BASEPRI, r4
   1f450:	f3bf 8f6f 	isb	sy
}
   1f454:	b002      	add	sp, #8
   1f456:	bd10      	pop	{r4, pc}
		ret = schedule_for_queue_locked(&queue, dwork, delay);
   1f458:	a801      	add	r0, sp, #4
   1f45a:	f7f2 f833 	bl	114c4 <schedule_for_queue_locked>
   1f45e:	e7f5      	b.n	1f44c <k_work_schedule_for_queue+0x20>

0001f460 <k_work_reschedule_for_queue>:
{
   1f460:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f462:	b083      	sub	sp, #12
   1f464:	9001      	str	r0, [sp, #4]
   1f466:	460c      	mov	r4, r1
   1f468:	4616      	mov	r6, r2
   1f46a:	461d      	mov	r5, r3
	__asm__ volatile(
   1f46c:	f04f 0320 	mov.w	r3, #32
   1f470:	f3ef 8711 	mrs	r7, BASEPRI
   1f474:	f383 8812 	msr	BASEPRI_MAX, r3
   1f478:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   1f47c:	4608      	mov	r0, r1
   1f47e:	f7ff ff7c 	bl	1f37a <unschedule_locked>
	ret = schedule_for_queue_locked(&queue, dwork, delay);
   1f482:	4632      	mov	r2, r6
   1f484:	462b      	mov	r3, r5
   1f486:	4621      	mov	r1, r4
   1f488:	a801      	add	r0, sp, #4
   1f48a:	f7f2 f81b 	bl	114c4 <schedule_for_queue_locked>
	__asm__ volatile(
   1f48e:	f387 8811 	msr	BASEPRI, r7
   1f492:	f3bf 8f6f 	isb	sy
}
   1f496:	b003      	add	sp, #12
   1f498:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001f49a <k_work_cancel_delayable>:

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   1f49a:	b510      	push	{r4, lr}
	__asm__ volatile(
   1f49c:	f04f 0320 	mov.w	r3, #32
   1f4a0:	f3ef 8411 	mrs	r4, BASEPRI
   1f4a4:	f383 8812 	msr	BASEPRI_MAX, r3
   1f4a8:	f3bf 8f6f 	isb	sy
	__ASSERT_NO_MSG(dwork != NULL);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable, dwork);

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = cancel_delayable_async_locked(dwork);
   1f4ac:	f7ff ff74 	bl	1f398 <cancel_delayable_async_locked>
	__asm__ volatile(
   1f4b0:	f384 8811 	msr	BASEPRI, r4
   1f4b4:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   1f4b8:	bd10      	pop	{r4, pc}

0001f4ba <thread_active_elsewhere>:
}
   1f4ba:	2000      	movs	r0, #0
   1f4bc:	4770      	bx	lr

0001f4be <pended_on_thread>:
}
   1f4be:	6880      	ldr	r0, [r0, #8]
   1f4c0:	4770      	bx	lr

0001f4c2 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   1f4c2:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1f4c6:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   1f4ca:	4283      	cmp	r3, r0
   1f4cc:	d001      	beq.n	1f4d2 <z_sched_prio_cmp+0x10>
		return b2 - b1;
   1f4ce:	1ac0      	subs	r0, r0, r3
   1f4d0:	4770      	bx	lr
	return 0;
   1f4d2:	2000      	movs	r0, #0
}
   1f4d4:	4770      	bx	lr

0001f4d6 <z_unpend_thread_no_timeout>:
{
   1f4d6:	b538      	push	{r3, r4, r5, lr}
   1f4d8:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
   1f4da:	2300      	movs	r3, #0
	__asm__ volatile(
   1f4dc:	f04f 0220 	mov.w	r2, #32
   1f4e0:	f3ef 8411 	mrs	r4, BASEPRI
   1f4e4:	f382 8812 	msr	BASEPRI_MAX, r2
   1f4e8:	f3bf 8f6f 	isb	sy
   1f4ec:	e007      	b.n	1f4fe <z_unpend_thread_no_timeout+0x28>
		unpend_thread_no_timeout(thread);
   1f4ee:	4628      	mov	r0, r5
   1f4f0:	f000 f82a 	bl	1f548 <unpend_thread_no_timeout>
	__asm__ volatile(
   1f4f4:	f384 8811 	msr	BASEPRI, r4
   1f4f8:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1f4fc:	2301      	movs	r3, #1
   1f4fe:	2b00      	cmp	r3, #0
   1f500:	d0f5      	beq.n	1f4ee <z_unpend_thread_no_timeout+0x18>
}
   1f502:	bd38      	pop	{r3, r4, r5, pc}

0001f504 <z_reschedule_irqlock>:
{
   1f504:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1f506:	4603      	mov	r3, r0
   1f508:	b928      	cbnz	r0, 1f516 <z_reschedule_irqlock+0x12>
   1f50a:	f3ef 8205 	mrs	r2, IPSR
   1f50e:	b912      	cbnz	r2, 1f516 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
   1f510:	f7e5 fd60 	bl	4fd4 <arch_swap>
	return ret;
   1f514:	e003      	b.n	1f51e <z_reschedule_irqlock+0x1a>
   1f516:	f383 8811 	msr	BASEPRI, r3
   1f51a:	f3bf 8f6f 	isb	sy
}
   1f51e:	bd08      	pop	{r3, pc}

0001f520 <z_reschedule_unlocked>:
{
   1f520:	b508      	push	{r3, lr}
	__asm__ volatile(
   1f522:	f04f 0320 	mov.w	r3, #32
   1f526:	f3ef 8011 	mrs	r0, BASEPRI
   1f52a:	f383 8812 	msr	BASEPRI_MAX, r3
   1f52e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1f532:	f7ff ffe7 	bl	1f504 <z_reschedule_irqlock>
}
   1f536:	bd08      	pop	{r3, pc}

0001f538 <z_priq_dumb_remove>:
	sys_dnode_t *const prev = node->prev;
   1f538:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
   1f53a:	680b      	ldr	r3, [r1, #0]
	prev->next = next;
   1f53c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1f53e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1f540:	2300      	movs	r3, #0
   1f542:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
   1f544:	604b      	str	r3, [r1, #4]
}
   1f546:	4770      	bx	lr

0001f548 <unpend_thread_no_timeout>:
{
   1f548:	b510      	push	{r4, lr}
   1f54a:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   1f54c:	f7ff ffb7 	bl	1f4be <pended_on_thread>
   1f550:	4621      	mov	r1, r4
   1f552:	f7ff fff1 	bl	1f538 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1f556:	7b63      	ldrb	r3, [r4, #13]
   1f558:	f023 0302 	bic.w	r3, r3, #2
   1f55c:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   1f55e:	2300      	movs	r3, #0
   1f560:	60a3      	str	r3, [r4, #8]
}
   1f562:	bd10      	pop	{r4, pc}

0001f564 <z_unpend_thread>:
{
   1f564:	b538      	push	{r3, r4, r5, lr}
   1f566:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   1f568:	2300      	movs	r3, #0
   1f56a:	f04f 0220 	mov.w	r2, #32
   1f56e:	f3ef 8511 	mrs	r5, BASEPRI
   1f572:	f382 8812 	msr	BASEPRI_MAX, r2
   1f576:	f3bf 8f6f 	isb	sy
   1f57a:	e007      	b.n	1f58c <z_unpend_thread+0x28>
		unpend_thread_no_timeout(thread);
   1f57c:	4620      	mov	r0, r4
   1f57e:	f7ff ffe3 	bl	1f548 <unpend_thread_no_timeout>
	__asm__ volatile(
   1f582:	f385 8811 	msr	BASEPRI, r5
   1f586:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1f58a:	2301      	movs	r3, #1
   1f58c:	2b00      	cmp	r3, #0
   1f58e:	d0f5      	beq.n	1f57c <z_unpend_thread+0x18>
	return z_abort_timeout(&thread->base.timeout);
   1f590:	f104 0018 	add.w	r0, r4, #24
   1f594:	f000 f959 	bl	1f84a <z_abort_timeout>
}
   1f598:	bd38      	pop	{r3, r4, r5, pc}

0001f59a <z_priq_dumb_best>:
{
   1f59a:	4603      	mov	r3, r0
	return list->head == list;
   1f59c:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f59e:	4283      	cmp	r3, r0
   1f5a0:	d000      	beq.n	1f5a4 <z_priq_dumb_best+0xa>
}
   1f5a2:	4770      	bx	lr
	struct k_thread *thread = NULL;
   1f5a4:	2000      	movs	r0, #0
	return thread;
   1f5a6:	e7fc      	b.n	1f5a2 <z_priq_dumb_best+0x8>

0001f5a8 <z_ready_thread>:
{
   1f5a8:	b538      	push	{r3, r4, r5, lr}
   1f5aa:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   1f5ac:	2300      	movs	r3, #0
	__asm__ volatile(
   1f5ae:	f04f 0220 	mov.w	r2, #32
   1f5b2:	f3ef 8511 	mrs	r5, BASEPRI
   1f5b6:	f382 8812 	msr	BASEPRI_MAX, r2
   1f5ba:	f3bf 8f6f 	isb	sy
   1f5be:	e004      	b.n	1f5ca <z_ready_thread+0x22>
	__asm__ volatile(
   1f5c0:	f385 8811 	msr	BASEPRI, r5
   1f5c4:	f3bf 8f6f 	isb	sy
   1f5c8:	2301      	movs	r3, #1
   1f5ca:	b943      	cbnz	r3, 1f5de <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
   1f5cc:	4620      	mov	r0, r4
   1f5ce:	f7ff ff74 	bl	1f4ba <thread_active_elsewhere>
   1f5d2:	2800      	cmp	r0, #0
   1f5d4:	d1f4      	bne.n	1f5c0 <z_ready_thread+0x18>
			ready_thread(thread);
   1f5d6:	4620      	mov	r0, r4
   1f5d8:	f7f2 f946 	bl	11868 <ready_thread>
   1f5dc:	e7f0      	b.n	1f5c0 <z_ready_thread+0x18>
}
   1f5de:	bd38      	pop	{r3, r4, r5, pc}

0001f5e0 <z_thread_timeout>:
{
   1f5e0:	b570      	push	{r4, r5, r6, lr}
   1f5e2:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   1f5e4:	f1a0 0618 	sub.w	r6, r0, #24
	LOCKED(&sched_spinlock) {
   1f5e8:	2300      	movs	r3, #0
	__asm__ volatile(
   1f5ea:	f04f 0220 	mov.w	r2, #32
   1f5ee:	f3ef 8511 	mrs	r5, BASEPRI
   1f5f2:	f382 8812 	msr	BASEPRI_MAX, r2
   1f5f6:	f3bf 8f6f 	isb	sy
   1f5fa:	e011      	b.n	1f620 <z_thread_timeout+0x40>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1f5fc:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   1f600:	f023 0204 	bic.w	r2, r3, #4
   1f604:	f804 2c0b 	strb.w	r2, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1f608:	f023 0314 	bic.w	r3, r3, #20
   1f60c:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   1f610:	4630      	mov	r0, r6
   1f612:	f7f2 f929 	bl	11868 <ready_thread>
	__asm__ volatile(
   1f616:	f385 8811 	msr	BASEPRI, r5
   1f61a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1f61e:	2301      	movs	r3, #1
   1f620:	b963      	cbnz	r3, 1f63c <z_thread_timeout+0x5c>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
   1f622:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
   1f626:	f013 0f28 	tst.w	r3, #40	; 0x28
   1f62a:	d1f4      	bne.n	1f616 <z_thread_timeout+0x36>
			if (thread->base.pended_on != NULL) {
   1f62c:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1f630:	2b00      	cmp	r3, #0
   1f632:	d0e3      	beq.n	1f5fc <z_thread_timeout+0x1c>
				unpend_thread_no_timeout(thread);
   1f634:	4630      	mov	r0, r6
   1f636:	f7ff ff87 	bl	1f548 <unpend_thread_no_timeout>
   1f63a:	e7df      	b.n	1f5fc <z_thread_timeout+0x1c>
}
   1f63c:	bd70      	pop	{r4, r5, r6, pc}

0001f63e <unpend_all>:
{
   1f63e:	b538      	push	{r3, r4, r5, lr}
   1f640:	4605      	mov	r5, r0
	return list->head == list;
   1f642:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f644:	42a5      	cmp	r5, r4
   1f646:	d00d      	beq.n	1f664 <unpend_all+0x26>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1f648:	b164      	cbz	r4, 1f664 <unpend_all+0x26>
		unpend_thread_no_timeout(thread);
   1f64a:	4620      	mov	r0, r4
   1f64c:	f7ff ff7c 	bl	1f548 <unpend_thread_no_timeout>
   1f650:	f104 0018 	add.w	r0, r4, #24
   1f654:	f000 f8f9 	bl	1f84a <z_abort_timeout>
   1f658:	2300      	movs	r3, #0
   1f65a:	67e3      	str	r3, [r4, #124]	; 0x7c
		ready_thread(thread);
   1f65c:	4620      	mov	r0, r4
   1f65e:	f7f2 f903 	bl	11868 <ready_thread>
   1f662:	e7ee      	b.n	1f642 <unpend_all+0x4>
}
   1f664:	bd38      	pop	{r3, r4, r5, pc}

0001f666 <add_to_waitq_locked>:
{
   1f666:	b570      	push	{r4, r5, r6, lr}
   1f668:	4605      	mov	r5, r0
   1f66a:	460e      	mov	r6, r1
	unready_thread(thread);
   1f66c:	f7f2 f956 	bl	1191c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   1f670:	7b6b      	ldrb	r3, [r5, #13]
   1f672:	f043 0302 	orr.w	r3, r3, #2
   1f676:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
   1f678:	b1fe      	cbz	r6, 1f6ba <add_to_waitq_locked+0x54>
		thread->base.pended_on = wait_q;
   1f67a:	60ae      	str	r6, [r5, #8]
	return list->head == list;
   1f67c:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f67e:	42a6      	cmp	r6, r4
   1f680:	d108      	bne.n	1f694 <add_to_waitq_locked+0x2e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1f682:	2400      	movs	r4, #0
   1f684:	e006      	b.n	1f694 <add_to_waitq_locked+0x2e>
	sys_dnode_t *const prev = successor->prev;
   1f686:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   1f688:	606b      	str	r3, [r5, #4]
	node->next = successor;
   1f68a:	602c      	str	r4, [r5, #0]
	prev->next = node;
   1f68c:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1f68e:	6065      	str	r5, [r4, #4]
}
   1f690:	e013      	b.n	1f6ba <add_to_waitq_locked+0x54>
   1f692:	2400      	movs	r4, #0
   1f694:	b164      	cbz	r4, 1f6b0 <add_to_waitq_locked+0x4a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1f696:	4621      	mov	r1, r4
   1f698:	4628      	mov	r0, r5
   1f69a:	f7ff ff12 	bl	1f4c2 <z_sched_prio_cmp>
   1f69e:	2800      	cmp	r0, #0
   1f6a0:	dcf1      	bgt.n	1f686 <add_to_waitq_locked+0x20>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1f6a2:	2c00      	cmp	r4, #0
   1f6a4:	d0f6      	beq.n	1f694 <add_to_waitq_locked+0x2e>
	return (node == list->tail) ? NULL : node->next;
   1f6a6:	6873      	ldr	r3, [r6, #4]
   1f6a8:	429c      	cmp	r4, r3
   1f6aa:	d0f2      	beq.n	1f692 <add_to_waitq_locked+0x2c>
   1f6ac:	6824      	ldr	r4, [r4, #0]
   1f6ae:	e7f1      	b.n	1f694 <add_to_waitq_locked+0x2e>
	sys_dnode_t *const tail = list->tail;
   1f6b0:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   1f6b2:	602e      	str	r6, [r5, #0]
	node->prev = tail;
   1f6b4:	606b      	str	r3, [r5, #4]
	tail->next = node;
   1f6b6:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1f6b8:	6075      	str	r5, [r6, #4]
}
   1f6ba:	bd70      	pop	{r4, r5, r6, pc}

0001f6bc <pend_locked>:
{
   1f6bc:	b570      	push	{r4, r5, r6, lr}
   1f6be:	4604      	mov	r4, r0
   1f6c0:	4616      	mov	r6, r2
   1f6c2:	461d      	mov	r5, r3
	add_to_waitq_locked(thread, wait_q);
   1f6c4:	f7ff ffcf 	bl	1f666 <add_to_waitq_locked>
	add_thread_timeout(thread, timeout);
   1f6c8:	4632      	mov	r2, r6
   1f6ca:	462b      	mov	r3, r5
   1f6cc:	4620      	mov	r0, r4
   1f6ce:	f7f1 ff7f 	bl	115d0 <add_thread_timeout>
}
   1f6d2:	bd70      	pop	{r4, r5, r6, pc}

0001f6d4 <z_unpend1_no_timeout>:
{
   1f6d4:	b570      	push	{r4, r5, r6, lr}
   1f6d6:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   1f6d8:	2300      	movs	r3, #0
	__asm__ volatile(
   1f6da:	f04f 0220 	mov.w	r2, #32
   1f6de:	f3ef 8511 	mrs	r5, BASEPRI
   1f6e2:	f382 8812 	msr	BASEPRI_MAX, r2
   1f6e6:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   1f6ea:	461c      	mov	r4, r3
   1f6ec:	e004      	b.n	1f6f8 <z_unpend1_no_timeout+0x24>
	__asm__ volatile(
   1f6ee:	f385 8811 	msr	BASEPRI, r5
   1f6f2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1f6f6:	2301      	movs	r3, #1
   1f6f8:	b943      	cbnz	r3, 1f70c <z_unpend1_no_timeout+0x38>
		thread = _priq_wait_best(&wait_q->waitq);
   1f6fa:	4630      	mov	r0, r6
   1f6fc:	f7ff ff4d 	bl	1f59a <z_priq_dumb_best>
		if (thread != NULL) {
   1f700:	4604      	mov	r4, r0
   1f702:	2800      	cmp	r0, #0
   1f704:	d0f3      	beq.n	1f6ee <z_unpend1_no_timeout+0x1a>
			unpend_thread_no_timeout(thread);
   1f706:	f7ff ff1f 	bl	1f548 <unpend_thread_no_timeout>
   1f70a:	e7f0      	b.n	1f6ee <z_unpend1_no_timeout+0x1a>
}
   1f70c:	4620      	mov	r0, r4
   1f70e:	bd70      	pop	{r4, r5, r6, pc}

0001f710 <z_unpend_first_thread>:
{
   1f710:	b570      	push	{r4, r5, r6, lr}
   1f712:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   1f714:	2300      	movs	r3, #0
	__asm__ volatile(
   1f716:	f04f 0220 	mov.w	r2, #32
   1f71a:	f3ef 8511 	mrs	r5, BASEPRI
   1f71e:	f382 8812 	msr	BASEPRI_MAX, r2
   1f722:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   1f726:	461c      	mov	r4, r3
   1f728:	e004      	b.n	1f734 <z_unpend_first_thread+0x24>
	__asm__ volatile(
   1f72a:	f385 8811 	msr	BASEPRI, r5
   1f72e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1f732:	2301      	movs	r3, #1
   1f734:	b963      	cbnz	r3, 1f750 <z_unpend_first_thread+0x40>
		thread = _priq_wait_best(&wait_q->waitq);
   1f736:	4630      	mov	r0, r6
   1f738:	f7ff ff2f 	bl	1f59a <z_priq_dumb_best>
		if (thread != NULL) {
   1f73c:	4604      	mov	r4, r0
   1f73e:	2800      	cmp	r0, #0
   1f740:	d0f3      	beq.n	1f72a <z_unpend_first_thread+0x1a>
			unpend_thread_no_timeout(thread);
   1f742:	f7ff ff01 	bl	1f548 <unpend_thread_no_timeout>
   1f746:	f104 0018 	add.w	r0, r4, #24
   1f74a:	f000 f87e 	bl	1f84a <z_abort_timeout>
   1f74e:	e7ec      	b.n	1f72a <z_unpend_first_thread+0x1a>
}
   1f750:	4620      	mov	r0, r4
   1f752:	bd70      	pop	{r4, r5, r6, pc}

0001f754 <z_unpend_all>:
{
   1f754:	b538      	push	{r3, r4, r5, lr}
   1f756:	4605      	mov	r5, r0
	int need_sched = 0;
   1f758:	2000      	movs	r0, #0
	return list->head == list;
   1f75a:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f75c:	42a5      	cmp	r5, r4
   1f75e:	d008      	beq.n	1f772 <z_unpend_all+0x1e>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1f760:	b13c      	cbz	r4, 1f772 <z_unpend_all+0x1e>
		z_unpend_thread(thread);
   1f762:	4620      	mov	r0, r4
   1f764:	f7ff fefe 	bl	1f564 <z_unpend_thread>
		z_ready_thread(thread);
   1f768:	4620      	mov	r0, r4
   1f76a:	f7ff ff1d 	bl	1f5a8 <z_ready_thread>
		need_sched = 1;
   1f76e:	2001      	movs	r0, #1
   1f770:	e7f3      	b.n	1f75a <z_unpend_all+0x6>
}
   1f772:	bd38      	pop	{r3, r4, r5, pc}

0001f774 <init_ready_q>:
	sys_dlist_init(&rq->runq);
   1f774:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
   1f776:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
   1f778:	6083      	str	r3, [r0, #8]
}
   1f77a:	4770      	bx	lr

0001f77c <z_sched_wake>:
{
   1f77c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f780:	4606      	mov	r6, r0
   1f782:	4688      	mov	r8, r1
   1f784:	4617      	mov	r7, r2
	LOCKED(&sched_spinlock) {
   1f786:	2300      	movs	r3, #0
	__asm__ volatile(
   1f788:	f04f 0220 	mov.w	r2, #32
   1f78c:	f3ef 8511 	mrs	r5, BASEPRI
   1f790:	f382 8812 	msr	BASEPRI_MAX, r2
   1f794:	f3bf 8f6f 	isb	sy
	bool ret = false;
   1f798:	4699      	mov	r9, r3
   1f79a:	e004      	b.n	1f7a6 <z_sched_wake+0x2a>
	__asm__ volatile(
   1f79c:	f385 8811 	msr	BASEPRI, r5
   1f7a0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1f7a4:	2301      	movs	r3, #1
   1f7a6:	b9a3      	cbnz	r3, 1f7d2 <z_sched_wake+0x56>
		thread = _priq_wait_best(&wait_q->waitq);
   1f7a8:	4630      	mov	r0, r6
   1f7aa:	f7ff fef6 	bl	1f59a <z_priq_dumb_best>
		if (thread != NULL) {
   1f7ae:	4604      	mov	r4, r0
   1f7b0:	2800      	cmp	r0, #0
   1f7b2:	d0f3      	beq.n	1f79c <z_sched_wake+0x20>
   1f7b4:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
	thread->base.swap_data = data;
   1f7b8:	6147      	str	r7, [r0, #20]
			unpend_thread_no_timeout(thread);
   1f7ba:	f7ff fec5 	bl	1f548 <unpend_thread_no_timeout>
   1f7be:	f104 0018 	add.w	r0, r4, #24
   1f7c2:	f000 f842 	bl	1f84a <z_abort_timeout>
			ready_thread(thread);
   1f7c6:	4620      	mov	r0, r4
   1f7c8:	f7f2 f84e 	bl	11868 <ready_thread>
			ret = true;
   1f7cc:	f04f 0901 	mov.w	r9, #1
   1f7d0:	e7e4      	b.n	1f79c <z_sched_wake+0x20>
}
   1f7d2:	4648      	mov	r0, r9
   1f7d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001f7d8 <z_impl_k_condvar_init>:
	list->head = (sys_dnode_t *)list;
   1f7d8:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   1f7da:	6040      	str	r0, [r0, #4]
}
   1f7dc:	2000      	movs	r0, #0
   1f7de:	4770      	bx	lr

0001f7e0 <remove_timeout>:
{
   1f7e0:	b510      	push	{r4, lr}
   1f7e2:	4604      	mov	r4, r0
	if (next(t) != NULL) {
   1f7e4:	f7f2 fb3e 	bl	11e64 <next>
   1f7e8:	b148      	cbz	r0, 1f7fe <remove_timeout+0x1e>
   1f7ea:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
   1f7ec:	6903      	ldr	r3, [r0, #16]
   1f7ee:	6941      	ldr	r1, [r0, #20]
   1f7f0:	6920      	ldr	r0, [r4, #16]
   1f7f2:	181b      	adds	r3, r3, r0
   1f7f4:	6960      	ldr	r0, [r4, #20]
   1f7f6:	eb41 0100 	adc.w	r1, r1, r0
   1f7fa:	6113      	str	r3, [r2, #16]
   1f7fc:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
   1f7fe:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
   1f800:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
   1f802:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1f804:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1f806:	2300      	movs	r3, #0
   1f808:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   1f80a:	6063      	str	r3, [r4, #4]
}
   1f80c:	bd10      	pop	{r4, pc}

0001f80e <timeout_rem>:
	return node->next != NULL;
   1f80e:	6803      	ldr	r3, [r0, #0]
	if (z_is_inactive_timeout(timeout)) {
   1f810:	b1c3      	cbz	r3, 1f844 <timeout_rem+0x36>
{
   1f812:	b570      	push	{r4, r5, r6, lr}
   1f814:	4606      	mov	r6, r0
	for (struct _timeout *t = first(); t != NULL; t = next(t)) {
   1f816:	f7f2 fb1b 	bl	11e50 <first>
	k_ticks_t ticks = 0;
   1f81a:	2400      	movs	r4, #0
   1f81c:	4625      	mov	r5, r4
	for (struct _timeout *t = first(); t != NULL; t = next(t)) {
   1f81e:	b150      	cbz	r0, 1f836 <timeout_rem+0x28>
		ticks += t->dticks;
   1f820:	6903      	ldr	r3, [r0, #16]
   1f822:	6942      	ldr	r2, [r0, #20]
   1f824:	191b      	adds	r3, r3, r4
   1f826:	461c      	mov	r4, r3
   1f828:	eb42 0505 	adc.w	r5, r2, r5
		if (timeout == t) {
   1f82c:	42b0      	cmp	r0, r6
   1f82e:	d002      	beq.n	1f836 <timeout_rem+0x28>
	for (struct _timeout *t = first(); t != NULL; t = next(t)) {
   1f830:	f7f2 fb18 	bl	11e64 <next>
   1f834:	e7f3      	b.n	1f81e <timeout_rem+0x10>
	return ticks - elapsed();
   1f836:	f7f2 fb21 	bl	11e7c <elapsed>
   1f83a:	4603      	mov	r3, r0
   1f83c:	1a20      	subs	r0, r4, r0
   1f83e:	eb65 71e3 	sbc.w	r1, r5, r3, asr #31
}
   1f842:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   1f844:	2000      	movs	r0, #0
   1f846:	4601      	mov	r1, r0
}
   1f848:	4770      	bx	lr

0001f84a <z_abort_timeout>:
{
   1f84a:	b570      	push	{r4, r5, r6, lr}
   1f84c:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
   1f84e:	2300      	movs	r3, #0
	__asm__ volatile(
   1f850:	f04f 0220 	mov.w	r2, #32
   1f854:	f3ef 8611 	mrs	r6, BASEPRI
   1f858:	f382 8812 	msr	BASEPRI_MAX, r2
   1f85c:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
   1f860:	f06f 0015 	mvn.w	r0, #21
   1f864:	e004      	b.n	1f870 <z_abort_timeout+0x26>
	__asm__ volatile(
   1f866:	f386 8811 	msr	BASEPRI, r6
   1f86a:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   1f86e:	2301      	movs	r3, #1
   1f870:	461d      	mov	r5, r3
   1f872:	b93b      	cbnz	r3, 1f884 <z_abort_timeout+0x3a>
   1f874:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
   1f876:	2b00      	cmp	r3, #0
   1f878:	d0f5      	beq.n	1f866 <z_abort_timeout+0x1c>
			remove_timeout(to);
   1f87a:	4620      	mov	r0, r4
   1f87c:	f7ff ffb0 	bl	1f7e0 <remove_timeout>
			ret = 0;
   1f880:	4628      	mov	r0, r5
   1f882:	e7f0      	b.n	1f866 <z_abort_timeout+0x1c>
}
   1f884:	bd70      	pop	{r4, r5, r6, pc}

0001f886 <z_timeout_remaining>:
{
   1f886:	b538      	push	{r3, r4, r5, lr}
   1f888:	4605      	mov	r5, r0
	LOCKED(&timeout_lock) {
   1f88a:	2300      	movs	r3, #0
	__asm__ volatile(
   1f88c:	f04f 0220 	mov.w	r2, #32
   1f890:	f3ef 8411 	mrs	r4, BASEPRI
   1f894:	f382 8812 	msr	BASEPRI_MAX, r2
   1f898:	f3bf 8f6f 	isb	sy
	k_ticks_t ticks = 0;
   1f89c:	4618      	mov	r0, r3
   1f89e:	4619      	mov	r1, r3
   1f8a0:	e007      	b.n	1f8b2 <z_timeout_remaining+0x2c>
		ticks = timeout_rem(timeout);
   1f8a2:	4628      	mov	r0, r5
   1f8a4:	f7ff ffb3 	bl	1f80e <timeout_rem>
	__asm__ volatile(
   1f8a8:	f384 8811 	msr	BASEPRI, r4
   1f8ac:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   1f8b0:	2301      	movs	r3, #1
   1f8b2:	2b00      	cmp	r3, #0
   1f8b4:	d0f5      	beq.n	1f8a2 <z_timeout_remaining+0x1c>
}
   1f8b6:	bd38      	pop	{r3, r4, r5, pc}

0001f8b8 <z_get_next_timeout_expiry>:
{
   1f8b8:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
   1f8ba:	2300      	movs	r3, #0
	__asm__ volatile(
   1f8bc:	f04f 0220 	mov.w	r2, #32
   1f8c0:	f3ef 8411 	mrs	r4, BASEPRI
   1f8c4:	f382 8812 	msr	BASEPRI_MAX, r2
   1f8c8:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
   1f8cc:	f04f 30ff 	mov.w	r0, #4294967295
   1f8d0:	e006      	b.n	1f8e0 <z_get_next_timeout_expiry+0x28>
		ret = next_timeout();
   1f8d2:	f7f2 fadf 	bl	11e94 <next_timeout>
	__asm__ volatile(
   1f8d6:	f384 8811 	msr	BASEPRI, r4
   1f8da:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   1f8de:	2301      	movs	r3, #1
   1f8e0:	2b00      	cmp	r3, #0
   1f8e2:	d0f6      	beq.n	1f8d2 <z_get_next_timeout_expiry+0x1a>
}
   1f8e4:	bd10      	pop	{r4, pc}

0001f8e6 <z_set_timeout_expiry>:
{
   1f8e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f8e8:	4606      	mov	r6, r0
   1f8ea:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
   1f8ec:	2300      	movs	r3, #0
	__asm__ volatile(
   1f8ee:	f04f 0220 	mov.w	r2, #32
   1f8f2:	f3ef 8511 	mrs	r5, BASEPRI
   1f8f6:	f382 8812 	msr	BASEPRI_MAX, r2
   1f8fa:	f3bf 8f6f 	isb	sy
   1f8fe:	e00a      	b.n	1f916 <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
   1f900:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
   1f902:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   1f906:	2801      	cmp	r0, #1
   1f908:	dd00      	ble.n	1f90c <z_set_timeout_expiry+0x26>
   1f90a:	b97c      	cbnz	r4, 1f92c <z_set_timeout_expiry+0x46>
	__asm__ volatile(
   1f90c:	f385 8811 	msr	BASEPRI, r5
   1f910:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   1f914:	2301      	movs	r3, #1
   1f916:	461c      	mov	r4, r3
   1f918:	b97b      	cbnz	r3, 1f93a <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
   1f91a:	f7f2 fabb 	bl	11e94 <next_timeout>
			      || (ticks <= next_to);
   1f91e:	f1b0 3fff 	cmp.w	r0, #4294967295
   1f922:	d0ed      	beq.n	1f900 <z_set_timeout_expiry+0x1a>
   1f924:	42b0      	cmp	r0, r6
   1f926:	dbec      	blt.n	1f902 <z_set_timeout_expiry+0x1c>
   1f928:	2401      	movs	r4, #1
   1f92a:	e7ea      	b.n	1f902 <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   1f92c:	4639      	mov	r1, r7
   1f92e:	42b0      	cmp	r0, r6
   1f930:	bfa8      	it	ge
   1f932:	4630      	movge	r0, r6
   1f934:	f7ee fe36 	bl	e5a4 <sys_clock_set_timeout>
   1f938:	e7e8      	b.n	1f90c <z_set_timeout_expiry+0x26>
}
   1f93a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001f93c <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   1f93c:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   1f93e:	f7f2 fbbb 	bl	120b8 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   1f942:	bd08      	pop	{r3, pc}

0001f944 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
   1f944:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
   1f946:	f7f2 fbb7 	bl	120b8 <sys_clock_tick_get>
}
   1f94a:	bd08      	pop	{r3, pc}

0001f94c <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   1f94c:	b900      	cbnz	r0, 1f950 <z_impl_k_busy_wait+0x4>
   1f94e:	4770      	bx	lr
{
   1f950:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   1f952:	f7e6 fced 	bl	6330 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   1f956:	bd08      	pop	{r3, pc}

0001f958 <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   1f958:	b538      	push	{r3, r4, r5, lr}
   1f95a:	460c      	mov	r4, r1
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1f95c:	f1b1 3fff 	cmp.w	r1, #4294967295
   1f960:	bf08      	it	eq
   1f962:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   1f966:	d020      	beq.n	1f9aa <sys_clock_timeout_end_calc+0x52>
   1f968:	4605      	mov	r5, r0
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1f96a:	ea51 0300 	orrs.w	r3, r1, r0
   1f96e:	d009      	beq.n	1f984 <sys_clock_timeout_end_calc+0x2c>
		return sys_clock_tick_get();
	} else {

		dt = timeout.ticks;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   1f970:	f06f 0301 	mvn.w	r3, #1
   1f974:	1a18      	subs	r0, r3, r0
   1f976:	f04f 33ff 	mov.w	r3, #4294967295
   1f97a:	eb63 0101 	sbc.w	r1, r3, r1
   1f97e:	2900      	cmp	r1, #0
   1f980:	db03      	blt.n	1f98a <sys_clock_timeout_end_calc+0x32>
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   1f982:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get();
   1f984:	f7f2 fb98 	bl	120b8 <sys_clock_tick_get>
   1f988:	e7fb      	b.n	1f982 <sys_clock_timeout_end_calc+0x2a>
		return sys_clock_tick_get() + MAX(1, dt);
   1f98a:	f7f2 fb95 	bl	120b8 <sys_clock_tick_get>
   1f98e:	4603      	mov	r3, r0
   1f990:	462a      	mov	r2, r5
   1f992:	46a4      	mov	ip, r4
   1f994:	2d01      	cmp	r5, #1
   1f996:	f174 0400 	sbcs.w	r4, r4, #0
   1f99a:	da02      	bge.n	1f9a2 <sys_clock_timeout_end_calc+0x4a>
   1f99c:	2201      	movs	r2, #1
   1f99e:	f04f 0c00 	mov.w	ip, #0
   1f9a2:	1898      	adds	r0, r3, r2
   1f9a4:	eb41 010c 	adc.w	r1, r1, ip
   1f9a8:	e7eb      	b.n	1f982 <sys_clock_timeout_end_calc+0x2a>
		return UINT64_MAX;
   1f9aa:	f04f 30ff 	mov.w	r0, #4294967295
   1f9ae:	4601      	mov	r1, r0
   1f9b0:	e7e7      	b.n	1f982 <sys_clock_timeout_end_calc+0x2a>

0001f9b2 <z_reschedule_unlocked>:
{
   1f9b2:	b508      	push	{r3, lr}
	__asm__ volatile(
   1f9b4:	f04f 0320 	mov.w	r3, #32
   1f9b8:	f3ef 8011 	mrs	r0, BASEPRI
   1f9bc:	f383 8812 	msr	BASEPRI_MAX, r3
   1f9c0:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1f9c4:	f7ff fd9e 	bl	1f504 <z_reschedule_irqlock>
}
   1f9c8:	bd08      	pop	{r3, pc}

0001f9ca <k_timer_init>:
	timer->expiry_fn = expiry_fn;
   1f9ca:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
   1f9cc:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
   1f9ce:	2300      	movs	r3, #0
   1f9d0:	6303      	str	r3, [r0, #48]	; 0x30
   1f9d2:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
   1f9d6:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
   1f9d8:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
   1f9da:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   1f9dc:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
   1f9de:	6343      	str	r3, [r0, #52]	; 0x34
}
   1f9e0:	4770      	bx	lr

0001f9e2 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   1f9e2:	b510      	push	{r4, lr}
   1f9e4:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   1f9e6:	f7ff ff30 	bl	1f84a <z_abort_timeout>

	if (inactive) {
   1f9ea:	b960      	cbnz	r0, 1fa06 <z_impl_k_timer_stop+0x24>
		return;
	}

	if (timer->stop_fn != NULL) {
   1f9ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f9ee:	b10b      	cbz	r3, 1f9f4 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   1f9f0:	4620      	mov	r0, r4
   1f9f2:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   1f9f4:	f104 0018 	add.w	r0, r4, #24
   1f9f8:	f7ff fe6c 	bl	1f6d4 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   1f9fc:	b118      	cbz	r0, 1fa06 <z_impl_k_timer_stop+0x24>
			z_ready_thread(pending_thread);
   1f9fe:	f7ff fdd3 	bl	1f5a8 <z_ready_thread>
			z_reschedule_unlocked();
   1fa02:	f7ff ffd6 	bl	1f9b2 <z_reschedule_unlocked>
		}
	}
}
   1fa06:	bd10      	pop	{r4, pc}

0001fa08 <is_condition_met>:
	switch (event->type) {
   1fa08:	7b43      	ldrb	r3, [r0, #13]
   1fa0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1fa0e:	3b01      	subs	r3, #1
   1fa10:	2b07      	cmp	r3, #7
   1fa12:	d826      	bhi.n	1fa62 <is_condition_met+0x5a>
   1fa14:	e8df f003 	tbb	[pc, r3]
   1fa18:	0d250414 	.word	0x0d250414
   1fa1c:	1c252525 	.word	0x1c252525
		if (k_sem_count_get(event->sem) > 0U) {
   1fa20:	6903      	ldr	r3, [r0, #16]
	return sem->count;
   1fa22:	689b      	ldr	r3, [r3, #8]
   1fa24:	b90b      	cbnz	r3, 1fa2a <is_condition_met+0x22>
	return false;
   1fa26:	2000      	movs	r0, #0
   1fa28:	4770      	bx	lr
			*state = K_POLL_STATE_SEM_AVAILABLE;
   1fa2a:	2302      	movs	r3, #2
   1fa2c:	600b      	str	r3, [r1, #0]
			return true;
   1fa2e:	2001      	movs	r0, #1
   1fa30:	4770      	bx	lr
		if (!k_queue_is_empty(event->queue)) {
   1fa32:	6903      	ldr	r3, [r0, #16]
	return list->head;
   1fa34:	681b      	ldr	r3, [r3, #0]
   1fa36:	b1b3      	cbz	r3, 1fa66 <is_condition_met+0x5e>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   1fa38:	2304      	movs	r3, #4
   1fa3a:	600b      	str	r3, [r1, #0]
			return true;
   1fa3c:	2001      	movs	r0, #1
   1fa3e:	4770      	bx	lr
		if (event->signal->signaled != 0U) {
   1fa40:	6903      	ldr	r3, [r0, #16]
   1fa42:	689b      	ldr	r3, [r3, #8]
   1fa44:	b90b      	cbnz	r3, 1fa4a <is_condition_met+0x42>
	return false;
   1fa46:	2000      	movs	r0, #0
   1fa48:	4770      	bx	lr
			*state = K_POLL_STATE_SIGNALED;
   1fa4a:	2001      	movs	r0, #1
   1fa4c:	6008      	str	r0, [r1, #0]
			return true;
   1fa4e:	4770      	bx	lr
		if (event->msgq->used_msgs > 0) {
   1fa50:	6903      	ldr	r3, [r0, #16]
   1fa52:	6a1b      	ldr	r3, [r3, #32]
   1fa54:	b90b      	cbnz	r3, 1fa5a <is_condition_met+0x52>
	return false;
   1fa56:	2000      	movs	r0, #0
}
   1fa58:	4770      	bx	lr
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   1fa5a:	2310      	movs	r3, #16
   1fa5c:	600b      	str	r3, [r1, #0]
			return true;
   1fa5e:	2001      	movs	r0, #1
   1fa60:	4770      	bx	lr
	switch (event->type) {
   1fa62:	2000      	movs	r0, #0
   1fa64:	4770      	bx	lr
	return false;
   1fa66:	2000      	movs	r0, #0
   1fa68:	4770      	bx	lr

0001fa6a <poller_thread>:
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1fa6a:	b108      	cbz	r0, 1fa70 <poller_thread+0x6>
   1fa6c:	3860      	subs	r0, #96	; 0x60
   1fa6e:	4770      	bx	lr
}
   1fa70:	4770      	bx	lr

0001fa72 <clear_event_registration>:
	event->poller = NULL;
   1fa72:	2300      	movs	r3, #0
   1fa74:	6083      	str	r3, [r0, #8]
	switch (event->type) {
   1fa76:	7b43      	ldrb	r3, [r0, #13]
   1fa78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1fa7c:	2b08      	cmp	r3, #8
   1fa7e:	d80e      	bhi.n	1fa9e <clear_event_registration+0x2c>
   1fa80:	f44f 728b 	mov.w	r2, #278	; 0x116
   1fa84:	fa22 f303 	lsr.w	r3, r2, r3
   1fa88:	f013 0f01 	tst.w	r3, #1
   1fa8c:	d007      	beq.n	1fa9e <clear_event_registration+0x2c>
	return node->next != NULL;
   1fa8e:	6803      	ldr	r3, [r0, #0]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   1fa90:	b12b      	cbz	r3, 1fa9e <clear_event_registration+0x2c>
	sys_dnode_t *const prev = node->prev;
   1fa92:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
   1fa94:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1fa96:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1fa98:	2300      	movs	r3, #0
   1fa9a:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   1fa9c:	6043      	str	r3, [r0, #4]
}
   1fa9e:	4770      	bx	lr

0001faa0 <clear_event_registrations>:
{
   1faa0:	b570      	push	{r4, r5, r6, lr}
   1faa2:	4606      	mov	r6, r0
   1faa4:	4614      	mov	r4, r2
	while (num_events--) {
   1faa6:	e012      	b.n	1face <clear_event_registrations+0x2e>
		clear_event_registration(&events[num_events]);
   1faa8:	eb05 0085 	add.w	r0, r5, r5, lsl #2
   1faac:	eb06 0080 	add.w	r0, r6, r0, lsl #2
   1fab0:	f7ff ffdf 	bl	1fa72 <clear_event_registration>
	__asm__ volatile(
   1fab4:	f384 8811 	msr	BASEPRI, r4
   1fab8:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1fabc:	f04f 0320 	mov.w	r3, #32
   1fac0:	f3ef 8411 	mrs	r4, BASEPRI
   1fac4:	f383 8812 	msr	BASEPRI_MAX, r3
   1fac8:	f3bf 8f6f 	isb	sy
	while (num_events--) {
   1facc:	4629      	mov	r1, r5
   1face:	1e4d      	subs	r5, r1, #1
   1fad0:	2900      	cmp	r1, #0
   1fad2:	d1e9      	bne.n	1faa8 <clear_event_registrations+0x8>
}
   1fad4:	bd70      	pop	{r4, r5, r6, pc}

0001fad6 <add_event>:
{
   1fad6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fada:	4605      	mov	r5, r0
   1fadc:	460e      	mov	r6, r1
	return list->head == list;
   1fade:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1fae0:	4298      	cmp	r0, r3
   1fae2:	d015      	beq.n	1fb10 <add_event+0x3a>
   1fae4:	4614      	mov	r4, r2
   1fae6:	6843      	ldr	r3, [r0, #4]
	if ((pending == NULL) ||
   1fae8:	b193      	cbz	r3, 1fb10 <add_event+0x3a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1faea:	6898      	ldr	r0, [r3, #8]
   1faec:	f7ff ffbd 	bl	1fa6a <poller_thread>
   1faf0:	4680      	mov	r8, r0
   1faf2:	4620      	mov	r0, r4
   1faf4:	f7ff ffb9 	bl	1fa6a <poller_thread>
   1faf8:	4607      	mov	r7, r0
   1fafa:	4601      	mov	r1, r0
   1fafc:	4640      	mov	r0, r8
   1fafe:	f7ff fce0 	bl	1f4c2 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   1fb02:	2800      	cmp	r0, #0
   1fb04:	dc04      	bgt.n	1fb10 <add_event+0x3a>
	return list->head == list;
   1fb06:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1fb08:	42a5      	cmp	r5, r4
   1fb0a:	d10f      	bne.n	1fb2c <add_event+0x56>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1fb0c:	2400      	movs	r4, #0
   1fb0e:	e00d      	b.n	1fb2c <add_event+0x56>
	sys_dnode_t *const tail = list->tail;
   1fb10:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   1fb12:	6035      	str	r5, [r6, #0]
	node->prev = tail;
   1fb14:	6073      	str	r3, [r6, #4]
	tail->next = node;
   1fb16:	601e      	str	r6, [r3, #0]
	list->tail = node;
   1fb18:	606e      	str	r6, [r5, #4]
}
   1fb1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	sys_dnode_t *const prev = successor->prev;
   1fb1e:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   1fb20:	6073      	str	r3, [r6, #4]
	node->next = successor;
   1fb22:	6034      	str	r4, [r6, #0]
	prev->next = node;
   1fb24:	601e      	str	r6, [r3, #0]
	successor->prev = node;
   1fb26:	6066      	str	r6, [r4, #4]
			return;
   1fb28:	e7f7      	b.n	1fb1a <add_event+0x44>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1fb2a:	2400      	movs	r4, #0
   1fb2c:	b19c      	cbz	r4, 1fb56 <add_event+0x80>
		if (z_sched_prio_cmp(poller_thread(poller),
   1fb2e:	68a0      	ldr	r0, [r4, #8]
   1fb30:	f7ff ff9b 	bl	1fa6a <poller_thread>
   1fb34:	4601      	mov	r1, r0
   1fb36:	4638      	mov	r0, r7
   1fb38:	f7ff fcc3 	bl	1f4c2 <z_sched_prio_cmp>
   1fb3c:	2800      	cmp	r0, #0
   1fb3e:	dcee      	bgt.n	1fb1e <add_event+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1fb40:	4622      	mov	r2, r4
	return (node == list->tail) ? NULL : node->next;
   1fb42:	686b      	ldr	r3, [r5, #4]
   1fb44:	429c      	cmp	r4, r3
   1fb46:	d0f0      	beq.n	1fb2a <add_event+0x54>
   1fb48:	6824      	ldr	r4, [r4, #0]
   1fb4a:	2c00      	cmp	r4, #0
   1fb4c:	d0ee      	beq.n	1fb2c <add_event+0x56>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1fb4e:	2a00      	cmp	r2, #0
   1fb50:	d1ec      	bne.n	1fb2c <add_event+0x56>
   1fb52:	4614      	mov	r4, r2
   1fb54:	e7ea      	b.n	1fb2c <add_event+0x56>
	sys_dnode_t *const tail = list->tail;
   1fb56:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   1fb58:	6035      	str	r5, [r6, #0]
	node->prev = tail;
   1fb5a:	6073      	str	r3, [r6, #4]
	tail->next = node;
   1fb5c:	601e      	str	r6, [r3, #0]
	list->tail = node;
   1fb5e:	606e      	str	r6, [r5, #4]
}
   1fb60:	e7db      	b.n	1fb1a <add_event+0x44>

0001fb62 <register_event>:
{
   1fb62:	b538      	push	{r3, r4, r5, lr}
   1fb64:	4604      	mov	r4, r0
   1fb66:	460d      	mov	r5, r1
	switch (event->type) {
   1fb68:	7b43      	ldrb	r3, [r0, #13]
   1fb6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1fb6e:	3b01      	subs	r3, #1
   1fb70:	2b07      	cmp	r3, #7
   1fb72:	d80b      	bhi.n	1fb8c <register_event+0x2a>
   1fb74:	e8df f003 	tbb	[pc, r3]
   1fb78:	0c0a0413 	.word	0x0c0a0413
   1fb7c:	190a0a0a 	.word	0x190a0a0a
		add_event(&event->sem->poll_events, event, poller);
   1fb80:	6900      	ldr	r0, [r0, #16]
   1fb82:	460a      	mov	r2, r1
   1fb84:	4621      	mov	r1, r4
   1fb86:	3010      	adds	r0, #16
   1fb88:	f7ff ffa5 	bl	1fad6 <add_event>
	event->poller = poller;
   1fb8c:	60a5      	str	r5, [r4, #8]
}
   1fb8e:	bd38      	pop	{r3, r4, r5, pc}
		add_event(&event->queue->poll_events, event, poller);
   1fb90:	6900      	ldr	r0, [r0, #16]
   1fb92:	460a      	mov	r2, r1
   1fb94:	4621      	mov	r1, r4
   1fb96:	3010      	adds	r0, #16
   1fb98:	f7ff ff9d 	bl	1fad6 <add_event>
		break;
   1fb9c:	e7f6      	b.n	1fb8c <register_event+0x2a>
		add_event(&event->signal->poll_events, event, poller);
   1fb9e:	460a      	mov	r2, r1
   1fba0:	4601      	mov	r1, r0
   1fba2:	6900      	ldr	r0, [r0, #16]
   1fba4:	f7ff ff97 	bl	1fad6 <add_event>
		break;
   1fba8:	e7f0      	b.n	1fb8c <register_event+0x2a>
		add_event(&event->msgq->poll_events, event, poller);
   1fbaa:	6900      	ldr	r0, [r0, #16]
   1fbac:	460a      	mov	r2, r1
   1fbae:	4621      	mov	r1, r4
   1fbb0:	3024      	adds	r0, #36	; 0x24
   1fbb2:	f7ff ff90 	bl	1fad6 <add_event>
		break;
   1fbb6:	e7e9      	b.n	1fb8c <register_event+0x2a>

0001fbb8 <register_events>:
{
   1fbb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fbbc:	b083      	sub	sp, #12
   1fbbe:	4680      	mov	r8, r0
   1fbc0:	460f      	mov	r7, r1
   1fbc2:	4691      	mov	r9, r2
   1fbc4:	469a      	mov	sl, r3
	for (int ii = 0; ii < num_events; ii++) {
   1fbc6:	2500      	movs	r5, #0
	int events_registered = 0;
   1fbc8:	46ab      	mov	fp, r5
	for (int ii = 0; ii < num_events; ii++) {
   1fbca:	e00a      	b.n	1fbe2 <register_events+0x2a>
		} else if (!just_check && poller->is_polling) {
   1fbcc:	f1ba 0f00 	cmp.w	sl, #0
   1fbd0:	d102      	bne.n	1fbd8 <register_events+0x20>
   1fbd2:	f899 3000 	ldrb.w	r3, [r9]
   1fbd6:	bb2b      	cbnz	r3, 1fc24 <register_events+0x6c>
	__asm__ volatile(
   1fbd8:	f386 8811 	msr	BASEPRI, r6
   1fbdc:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1fbe0:	3501      	adds	r5, #1
   1fbe2:	42bd      	cmp	r5, r7
   1fbe4:	da25      	bge.n	1fc32 <register_events+0x7a>
	__asm__ volatile(
   1fbe6:	f04f 0320 	mov.w	r3, #32
   1fbea:	f3ef 8611 	mrs	r6, BASEPRI
   1fbee:	f383 8812 	msr	BASEPRI_MAX, r3
   1fbf2:	f3bf 8f6f 	isb	sy
		if (is_condition_met(&events[ii], &state)) {
   1fbf6:	eb05 0485 	add.w	r4, r5, r5, lsl #2
   1fbfa:	eb08 0484 	add.w	r4, r8, r4, lsl #2
   1fbfe:	a901      	add	r1, sp, #4
   1fc00:	4620      	mov	r0, r4
   1fc02:	f7ff ff01 	bl	1fa08 <is_condition_met>
   1fc06:	2800      	cmp	r0, #0
   1fc08:	d0e0      	beq.n	1fbcc <register_events+0x14>
	event->poller = NULL;
   1fc0a:	2100      	movs	r1, #0
   1fc0c:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   1fc0e:	68e3      	ldr	r3, [r4, #12]
   1fc10:	f3c3 3286 	ubfx	r2, r3, #14, #7
   1fc14:	9801      	ldr	r0, [sp, #4]
   1fc16:	4302      	orrs	r2, r0
   1fc18:	f362 3394 	bfi	r3, r2, #14, #7
   1fc1c:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
   1fc1e:	f889 1000 	strb.w	r1, [r9]
   1fc22:	e7d9      	b.n	1fbd8 <register_events+0x20>
			register_event(&events[ii], poller);
   1fc24:	4649      	mov	r1, r9
   1fc26:	4620      	mov	r0, r4
   1fc28:	f7ff ff9b 	bl	1fb62 <register_event>
			events_registered += 1;
   1fc2c:	f10b 0b01 	add.w	fp, fp, #1
   1fc30:	e7d2      	b.n	1fbd8 <register_events+0x20>
}
   1fc32:	4658      	mov	r0, fp
   1fc34:	b003      	add	sp, #12
   1fc36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001fc3a <signal_poller>:
{
   1fc3a:	b538      	push	{r3, r4, r5, lr}
   1fc3c:	460d      	mov	r5, r1
	struct k_thread *thread = poller_thread(event->poller);
   1fc3e:	6880      	ldr	r0, [r0, #8]
   1fc40:	f7ff ff13 	bl	1fa6a <poller_thread>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
   1fc44:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_pending(thread)) {
   1fc46:	f013 0f02 	tst.w	r3, #2
   1fc4a:	d024      	beq.n	1fc96 <signal_poller+0x5c>
   1fc4c:	4604      	mov	r4, r0
	return thread->base.timeout.dticks == _EXPIRED;
   1fc4e:	6a82      	ldr	r2, [r0, #40]	; 0x28
   1fc50:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	if (z_is_thread_timeout_expired(thread)) {
   1fc52:	f1b3 3fff 	cmp.w	r3, #4294967295
   1fc56:	bf08      	it	eq
   1fc58:	f112 0f02 	cmneq.w	r2, #2
   1fc5c:	d01d      	beq.n	1fc9a <signal_poller+0x60>
	z_unpend_thread(thread);
   1fc5e:	f7ff fc81 	bl	1f564 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   1fc62:	2d08      	cmp	r5, #8
   1fc64:	d009      	beq.n	1fc7a <signal_poller+0x40>
   1fc66:	2300      	movs	r3, #0
   1fc68:	67e3      	str	r3, [r4, #124]	; 0x7c
	uint8_t state = thread->base.thread_state;
   1fc6a:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1fc6c:	f013 0f1f 	tst.w	r3, #31
   1fc70:	d108      	bne.n	1fc84 <signal_poller+0x4a>
	return node->next != NULL;
   1fc72:	69a3      	ldr	r3, [r4, #24]
   1fc74:	b123      	cbz	r3, 1fc80 <signal_poller+0x46>
   1fc76:	2300      	movs	r3, #0
   1fc78:	e005      	b.n	1fc86 <signal_poller+0x4c>
   1fc7a:	f06f 0303 	mvn.w	r3, #3
   1fc7e:	e7f3      	b.n	1fc68 <signal_poller+0x2e>
   1fc80:	2301      	movs	r3, #1
   1fc82:	e000      	b.n	1fc86 <signal_poller+0x4c>
   1fc84:	2300      	movs	r3, #0
	if (!z_is_thread_ready(thread)) {
   1fc86:	b90b      	cbnz	r3, 1fc8c <signal_poller+0x52>
		return 0;
   1fc88:	2000      	movs	r0, #0
   1fc8a:	e005      	b.n	1fc98 <signal_poller+0x5e>
	z_ready_thread(thread);
   1fc8c:	4620      	mov	r0, r4
   1fc8e:	f7ff fc8b 	bl	1f5a8 <z_ready_thread>
	return 0;
   1fc92:	2000      	movs	r0, #0
   1fc94:	e000      	b.n	1fc98 <signal_poller+0x5e>
		return 0;
   1fc96:	2000      	movs	r0, #0
}
   1fc98:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
   1fc9a:	f06f 000a 	mvn.w	r0, #10
   1fc9e:	e7fb      	b.n	1fc98 <signal_poller+0x5e>

0001fca0 <signal_triggered_work>:

extern int z_work_submit_to_queue(struct k_work_q *queue,
			 struct k_work *work);

static int signal_triggered_work(struct k_poll_event *event, uint32_t status)
{
   1fca0:	b570      	push	{r4, r5, r6, lr}
	struct z_poller *poller = event->poller;
   1fca2:	6884      	ldr	r4, [r0, #8]
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   1fca4:	7823      	ldrb	r3, [r4, #0]
   1fca6:	b173      	cbz	r3, 1fcc6 <signal_triggered_work+0x26>
   1fca8:	f854 5c04 	ldr.w	r5, [r4, #-4]
   1fcac:	b15d      	cbz	r5, 1fcc6 <signal_triggered_work+0x26>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
   1fcae:	f1a4 0614 	sub.w	r6, r4, #20
   1fcb2:	f104 0014 	add.w	r0, r4, #20
   1fcb6:	f7ff fdc8 	bl	1f84a <z_abort_timeout>
		twork->poll_result = 0;
   1fcba:	2300      	movs	r3, #0
   1fcbc:	62e3      	str	r3, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   1fcbe:	4631      	mov	r1, r6
   1fcc0:	4628      	mov	r0, r5
   1fcc2:	f7ff fb78 	bl	1f3b6 <z_work_submit_to_queue>
	}

	return 0;
}
   1fcc6:	2000      	movs	r0, #0
   1fcc8:	bd70      	pop	{r4, r5, r6, pc}

0001fcca <signal_poll_event>:
{
   1fcca:	b570      	push	{r4, r5, r6, lr}
   1fccc:	4604      	mov	r4, r0
   1fcce:	460d      	mov	r5, r1
	struct z_poller *poller = event->poller;
   1fcd0:	6886      	ldr	r6, [r0, #8]
	if (poller != NULL) {
   1fcd2:	b1d6      	cbz	r6, 1fd0a <signal_poll_event+0x40>
		if (poller->mode == MODE_POLL) {
   1fcd4:	7873      	ldrb	r3, [r6, #1]
   1fcd6:	2b01      	cmp	r3, #1
   1fcd8:	d00d      	beq.n	1fcf6 <signal_poll_event+0x2c>
		} else if (poller->mode == MODE_TRIGGERED) {
   1fcda:	2b02      	cmp	r3, #2
   1fcdc:	d012      	beq.n	1fd04 <signal_poll_event+0x3a>
		poller->is_polling = false;
   1fcde:	2000      	movs	r0, #0
   1fce0:	7030      	strb	r0, [r6, #0]
	event->poller = NULL;
   1fce2:	2300      	movs	r3, #0
   1fce4:	60a3      	str	r3, [r4, #8]
	event->state |= state;
   1fce6:	68e3      	ldr	r3, [r4, #12]
   1fce8:	f3c3 3286 	ubfx	r2, r3, #14, #7
   1fcec:	432a      	orrs	r2, r5
   1fcee:	f362 3394 	bfi	r3, r2, #14, #7
   1fcf2:	60e3      	str	r3, [r4, #12]
}
   1fcf4:	bd70      	pop	{r4, r5, r6, pc}
			retcode = signal_poller(event, state);
   1fcf6:	f7ff ffa0 	bl	1fc3a <signal_poller>
		poller->is_polling = false;
   1fcfa:	2300      	movs	r3, #0
   1fcfc:	7033      	strb	r3, [r6, #0]
		if (retcode < 0) {
   1fcfe:	4298      	cmp	r0, r3
   1fd00:	daef      	bge.n	1fce2 <signal_poll_event+0x18>
   1fd02:	e7f7      	b.n	1fcf4 <signal_poll_event+0x2a>
			retcode = signal_triggered_work(event, state);
   1fd04:	f7ff ffcc 	bl	1fca0 <signal_triggered_work>
   1fd08:	e7f7      	b.n	1fcfa <signal_poll_event+0x30>
	int retcode = 0;
   1fd0a:	2000      	movs	r0, #0
   1fd0c:	e7e9      	b.n	1fce2 <signal_poll_event+0x18>

0001fd0e <k_poll_event_init>:
{
   1fd0e:	b410      	push	{r4}
	event->poller = NULL;
   1fd10:	2400      	movs	r4, #0
   1fd12:	6084      	str	r4, [r0, #8]
	event->type = type;
   1fd14:	f890 c00d 	ldrb.w	ip, [r0, #13]
   1fd18:	f361 0c05 	bfi	ip, r1, #0, #6
   1fd1c:	f880 c00d 	strb.w	ip, [r0, #13]
	event->state = K_POLL_STATE_NOT_READY;
   1fd20:	68c1      	ldr	r1, [r0, #12]
   1fd22:	f364 3194 	bfi	r1, r4, #14, #7
   1fd26:	60c1      	str	r1, [r0, #12]
	event->mode = mode;
   1fd28:	7b81      	ldrb	r1, [r0, #14]
   1fd2a:	f362 1145 	bfi	r1, r2, #5, #1
   1fd2e:	7381      	strb	r1, [r0, #14]
	event->unused = 0U;
   1fd30:	89c2      	ldrh	r2, [r0, #14]
   1fd32:	f364 128f 	bfi	r2, r4, #6, #10
   1fd36:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
   1fd38:	6103      	str	r3, [r0, #16]
}
   1fd3a:	bc10      	pop	{r4}
   1fd3c:	4770      	bx	lr

0001fd3e <z_handle_obj_poll_events>:
{
   1fd3e:	b508      	push	{r3, lr}
   1fd40:	4603      	mov	r3, r0
	return list->head == list;
   1fd42:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   1fd44:	4283      	cmp	r3, r0
   1fd46:	d008      	beq.n	1fd5a <z_handle_obj_poll_events+0x1c>
	sys_dnode_t *const prev = node->prev;
   1fd48:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   1fd4a:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   1fd4c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1fd4e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1fd50:	2300      	movs	r3, #0
   1fd52:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   1fd54:	6043      	str	r3, [r0, #4]
		(void) signal_poll_event(poll_event, state);
   1fd56:	f7ff ffb8 	bl	1fcca <signal_poll_event>
}
   1fd5a:	bd08      	pop	{r3, pc}

0001fd5c <z_heap_aligned_alloc>:
{
   1fd5c:	b5d0      	push	{r4, r6, r7, lr}
   1fd5e:	b082      	sub	sp, #8
   1fd60:	4604      	mov	r4, r0
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1fd62:	2300      	movs	r3, #0
   1fd64:	3204      	adds	r2, #4
   1fd66:	d20e      	bcs.n	1fd86 <z_heap_aligned_alloc+0x2a>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
   1fd68:	b97b      	cbnz	r3, 1fd8a <z_heap_aligned_alloc+0x2e>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   1fd6a:	2600      	movs	r6, #0
   1fd6c:	2700      	movs	r7, #0
   1fd6e:	e9cd 6700 	strd	r6, r7, [sp]
   1fd72:	f041 0104 	orr.w	r1, r1, #4
   1fd76:	4620      	mov	r0, r4
   1fd78:	f7ff f832 	bl	1ede0 <k_heap_aligned_alloc>
	if (mem == NULL) {
   1fd7c:	b108      	cbz	r0, 1fd82 <z_heap_aligned_alloc+0x26>
	*heap_ref = heap;
   1fd7e:	f840 4b04 	str.w	r4, [r0], #4
}
   1fd82:	b002      	add	sp, #8
   1fd84:	bdd0      	pop	{r4, r6, r7, pc}
   1fd86:	2301      	movs	r3, #1
   1fd88:	e7ee      	b.n	1fd68 <z_heap_aligned_alloc+0xc>
		return NULL;
   1fd8a:	2000      	movs	r0, #0
   1fd8c:	e7f9      	b.n	1fd82 <z_heap_aligned_alloc+0x26>

0001fd8e <k_free>:
	if (ptr != NULL) {
   1fd8e:	b130      	cbz	r0, 1fd9e <k_free+0x10>
{
   1fd90:	b508      	push	{r3, lr}
		k_heap_free(*heap_ref, ptr);
   1fd92:	1f01      	subs	r1, r0, #4
   1fd94:	f850 0c04 	ldr.w	r0, [r0, #-4]
   1fd98:	f7ff f878 	bl	1ee8c <k_heap_free>
}
   1fd9c:	bd08      	pop	{r3, pc}
   1fd9e:	4770      	bx	lr

0001fda0 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   1fda0:	4770      	bx	lr

0001fda2 <memcmp>:
   1fda2:	b510      	push	{r4, lr}
   1fda4:	3901      	subs	r1, #1
   1fda6:	4402      	add	r2, r0
   1fda8:	4290      	cmp	r0, r2
   1fdaa:	d101      	bne.n	1fdb0 <memcmp+0xe>
   1fdac:	2000      	movs	r0, #0
   1fdae:	e005      	b.n	1fdbc <memcmp+0x1a>
   1fdb0:	7803      	ldrb	r3, [r0, #0]
   1fdb2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1fdb6:	42a3      	cmp	r3, r4
   1fdb8:	d001      	beq.n	1fdbe <memcmp+0x1c>
   1fdba:	1b18      	subs	r0, r3, r4
   1fdbc:	bd10      	pop	{r4, pc}
   1fdbe:	3001      	adds	r0, #1
   1fdc0:	e7f2      	b.n	1fda8 <memcmp+0x6>

0001fdc2 <memcpy>:
   1fdc2:	440a      	add	r2, r1
   1fdc4:	4291      	cmp	r1, r2
   1fdc6:	f100 33ff 	add.w	r3, r0, #4294967295
   1fdca:	d100      	bne.n	1fdce <memcpy+0xc>
   1fdcc:	4770      	bx	lr
   1fdce:	b510      	push	{r4, lr}
   1fdd0:	f811 4b01 	ldrb.w	r4, [r1], #1
   1fdd4:	f803 4f01 	strb.w	r4, [r3, #1]!
   1fdd8:	4291      	cmp	r1, r2
   1fdda:	d1f9      	bne.n	1fdd0 <memcpy+0xe>
   1fddc:	bd10      	pop	{r4, pc}

0001fdde <__memcpy_chk>:
   1fdde:	429a      	cmp	r2, r3
   1fde0:	b508      	push	{r3, lr}
   1fde2:	d901      	bls.n	1fde8 <__memcpy_chk+0xa>
   1fde4:	f7e6 fa7e 	bl	62e4 <__chk_fail>
   1fde8:	4281      	cmp	r1, r0
   1fdea:	d804      	bhi.n	1fdf6 <__memcpy_chk+0x18>
   1fdec:	188b      	adds	r3, r1, r2
   1fdee:	4298      	cmp	r0, r3
   1fdf0:	d3f8      	bcc.n	1fde4 <__memcpy_chk+0x6>
   1fdf2:	4281      	cmp	r1, r0
   1fdf4:	d102      	bne.n	1fdfc <__memcpy_chk+0x1e>
   1fdf6:	1883      	adds	r3, r0, r2
   1fdf8:	4299      	cmp	r1, r3
   1fdfa:	d3f3      	bcc.n	1fde4 <__memcpy_chk+0x6>
   1fdfc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1fe00:	f7ff bfdf 	b.w	1fdc2 <memcpy>

0001fe04 <memmove>:
   1fe04:	4288      	cmp	r0, r1
   1fe06:	b510      	push	{r4, lr}
   1fe08:	eb01 0402 	add.w	r4, r1, r2
   1fe0c:	d902      	bls.n	1fe14 <memmove+0x10>
   1fe0e:	4284      	cmp	r4, r0
   1fe10:	4623      	mov	r3, r4
   1fe12:	d807      	bhi.n	1fe24 <memmove+0x20>
   1fe14:	1e43      	subs	r3, r0, #1
   1fe16:	42a1      	cmp	r1, r4
   1fe18:	d008      	beq.n	1fe2c <memmove+0x28>
   1fe1a:	f811 2b01 	ldrb.w	r2, [r1], #1
   1fe1e:	f803 2f01 	strb.w	r2, [r3, #1]!
   1fe22:	e7f8      	b.n	1fe16 <memmove+0x12>
   1fe24:	4402      	add	r2, r0
   1fe26:	4601      	mov	r1, r0
   1fe28:	428a      	cmp	r2, r1
   1fe2a:	d100      	bne.n	1fe2e <memmove+0x2a>
   1fe2c:	bd10      	pop	{r4, pc}
   1fe2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   1fe32:	f802 4d01 	strb.w	r4, [r2, #-1]!
   1fe36:	e7f7      	b.n	1fe28 <memmove+0x24>

0001fe38 <memset>:
   1fe38:	4402      	add	r2, r0
   1fe3a:	4603      	mov	r3, r0
   1fe3c:	4293      	cmp	r3, r2
   1fe3e:	d100      	bne.n	1fe42 <memset+0xa>
   1fe40:	4770      	bx	lr
   1fe42:	f803 1b01 	strb.w	r1, [r3], #1
   1fe46:	e7f9      	b.n	1fe3c <memset+0x4>

0001fe48 <_calloc_r>:
   1fe48:	b538      	push	{r3, r4, r5, lr}
   1fe4a:	fb02 f501 	mul.w	r5, r2, r1
   1fe4e:	4629      	mov	r1, r5
   1fe50:	f7f2 fb30 	bl	124b4 <_malloc_r>
   1fe54:	4604      	mov	r4, r0
   1fe56:	b118      	cbz	r0, 1fe60 <_calloc_r+0x18>
   1fe58:	462a      	mov	r2, r5
   1fe5a:	2100      	movs	r1, #0
   1fe5c:	f7ff ffec 	bl	1fe38 <memset>
   1fe60:	4620      	mov	r0, r4
   1fe62:	bd38      	pop	{r3, r4, r5, pc}

0001fe64 <__cvt>:
   1fe64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fe68:	b089      	sub	sp, #36	; 0x24
   1fe6a:	e9dd 9815 	ldrd	r9, r8, [sp, #84]	; 0x54
   1fe6e:	2b00      	cmp	r3, #0
   1fe70:	461d      	mov	r5, r3
   1fe72:	4614      	mov	r4, r2
   1fe74:	bfbc      	itt	lt
   1fe76:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
   1fe7a:	4614      	movlt	r4, r2
   1fe7c:	f028 0a20 	bic.w	sl, r8, #32
   1fe80:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1fe82:	bfb6      	itet	lt
   1fe84:	461d      	movlt	r5, r3
   1fe86:	2300      	movge	r3, #0
   1fe88:	232d      	movlt	r3, #45	; 0x2d
   1fe8a:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   1fe8e:	e9dd 6b12 	ldrd	r6, fp, [sp, #72]	; 0x48
   1fe92:	7013      	strb	r3, [r2, #0]
   1fe94:	d005      	beq.n	1fea2 <__cvt+0x3e>
   1fe96:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
   1fe9a:	d100      	bne.n	1fe9e <__cvt+0x3a>
   1fe9c:	3601      	adds	r6, #1
   1fe9e:	2302      	movs	r3, #2
   1fea0:	e000      	b.n	1fea4 <__cvt+0x40>
   1fea2:	2303      	movs	r3, #3
   1fea4:	aa07      	add	r2, sp, #28
   1fea6:	9204      	str	r2, [sp, #16]
   1fea8:	aa06      	add	r2, sp, #24
   1feaa:	e9cd 9202 	strd	r9, r2, [sp, #8]
   1feae:	e9cd 3600 	strd	r3, r6, [sp]
   1feb2:	4622      	mov	r2, r4
   1feb4:	462b      	mov	r3, r5
   1feb6:	f7e0 ff83 	bl	dc0 <_dtoa_r>
   1feba:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
   1febe:	4607      	mov	r7, r0
   1fec0:	d119      	bne.n	1fef6 <__cvt+0x92>
   1fec2:	f01b 0f01 	tst.w	fp, #1
   1fec6:	d00e      	beq.n	1fee6 <__cvt+0x82>
   1fec8:	eb07 0806 	add.w	r8, r7, r6
   1fecc:	2200      	movs	r2, #0
   1fece:	2300      	movs	r3, #0
   1fed0:	4620      	mov	r0, r4
   1fed2:	4629      	mov	r1, r5
   1fed4:	f7e0 fda2 	bl	a1c <__aeabi_dcmpeq>
   1fed8:	b108      	cbz	r0, 1fede <__cvt+0x7a>
   1feda:	f8cd 801c 	str.w	r8, [sp, #28]
   1fede:	2230      	movs	r2, #48	; 0x30
   1fee0:	9b07      	ldr	r3, [sp, #28]
   1fee2:	4543      	cmp	r3, r8
   1fee4:	d321      	bcc.n	1ff2a <__cvt+0xc6>
   1fee6:	9b07      	ldr	r3, [sp, #28]
   1fee8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1feea:	1bdb      	subs	r3, r3, r7
   1feec:	4638      	mov	r0, r7
   1feee:	6013      	str	r3, [r2, #0]
   1fef0:	b009      	add	sp, #36	; 0x24
   1fef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fef6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   1fefa:	d0e2      	beq.n	1fec2 <__cvt+0x5e>
   1fefc:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   1ff00:	eb00 0806 	add.w	r8, r0, r6
   1ff04:	d1e2      	bne.n	1fecc <__cvt+0x68>
   1ff06:	7803      	ldrb	r3, [r0, #0]
   1ff08:	2b30      	cmp	r3, #48	; 0x30
   1ff0a:	d10a      	bne.n	1ff22 <__cvt+0xbe>
   1ff0c:	2200      	movs	r2, #0
   1ff0e:	2300      	movs	r3, #0
   1ff10:	4620      	mov	r0, r4
   1ff12:	4629      	mov	r1, r5
   1ff14:	f7e0 fd82 	bl	a1c <__aeabi_dcmpeq>
   1ff18:	b918      	cbnz	r0, 1ff22 <__cvt+0xbe>
   1ff1a:	f1c6 0601 	rsb	r6, r6, #1
   1ff1e:	f8c9 6000 	str.w	r6, [r9]
   1ff22:	f8d9 3000 	ldr.w	r3, [r9]
   1ff26:	4498      	add	r8, r3
   1ff28:	e7d0      	b.n	1fecc <__cvt+0x68>
   1ff2a:	1c59      	adds	r1, r3, #1
   1ff2c:	9107      	str	r1, [sp, #28]
   1ff2e:	701a      	strb	r2, [r3, #0]
   1ff30:	e7d6      	b.n	1fee0 <__cvt+0x7c>

0001ff32 <__exponent>:
   1ff32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1ff34:	2900      	cmp	r1, #0
   1ff36:	bfba      	itte	lt
   1ff38:	4249      	neglt	r1, r1
   1ff3a:	232d      	movlt	r3, #45	; 0x2d
   1ff3c:	232b      	movge	r3, #43	; 0x2b
   1ff3e:	2909      	cmp	r1, #9
   1ff40:	7002      	strb	r2, [r0, #0]
   1ff42:	7043      	strb	r3, [r0, #1]
   1ff44:	dd29      	ble.n	1ff9a <__exponent+0x68>
   1ff46:	f10d 0307 	add.w	r3, sp, #7
   1ff4a:	461d      	mov	r5, r3
   1ff4c:	270a      	movs	r7, #10
   1ff4e:	461a      	mov	r2, r3
   1ff50:	fbb1 f6f7 	udiv	r6, r1, r7
   1ff54:	fb07 1416 	mls	r4, r7, r6, r1
   1ff58:	3430      	adds	r4, #48	; 0x30
   1ff5a:	f802 4c01 	strb.w	r4, [r2, #-1]
   1ff5e:	460c      	mov	r4, r1
   1ff60:	2c63      	cmp	r4, #99	; 0x63
   1ff62:	f103 33ff 	add.w	r3, r3, #4294967295
   1ff66:	4631      	mov	r1, r6
   1ff68:	dcf1      	bgt.n	1ff4e <__exponent+0x1c>
   1ff6a:	3130      	adds	r1, #48	; 0x30
   1ff6c:	1e94      	subs	r4, r2, #2
   1ff6e:	f803 1c01 	strb.w	r1, [r3, #-1]
   1ff72:	1c41      	adds	r1, r0, #1
   1ff74:	4623      	mov	r3, r4
   1ff76:	42ab      	cmp	r3, r5
   1ff78:	d30a      	bcc.n	1ff90 <__exponent+0x5e>
   1ff7a:	f10d 0309 	add.w	r3, sp, #9
   1ff7e:	1a9b      	subs	r3, r3, r2
   1ff80:	42ac      	cmp	r4, r5
   1ff82:	bf88      	it	hi
   1ff84:	2300      	movhi	r3, #0
   1ff86:	3302      	adds	r3, #2
   1ff88:	4403      	add	r3, r0
   1ff8a:	1a18      	subs	r0, r3, r0
   1ff8c:	b003      	add	sp, #12
   1ff8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ff90:	f813 6b01 	ldrb.w	r6, [r3], #1
   1ff94:	f801 6f01 	strb.w	r6, [r1, #1]!
   1ff98:	e7ed      	b.n	1ff76 <__exponent+0x44>
   1ff9a:	2330      	movs	r3, #48	; 0x30
   1ff9c:	3130      	adds	r1, #48	; 0x30
   1ff9e:	7083      	strb	r3, [r0, #2]
   1ffa0:	70c1      	strb	r1, [r0, #3]
   1ffa2:	1d03      	adds	r3, r0, #4
   1ffa4:	e7f1      	b.n	1ff8a <__exponent+0x58>

0001ffa6 <_printf_common>:
   1ffa6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ffaa:	4616      	mov	r6, r2
   1ffac:	4698      	mov	r8, r3
   1ffae:	688a      	ldr	r2, [r1, #8]
   1ffb0:	690b      	ldr	r3, [r1, #16]
   1ffb2:	f8dd 9020 	ldr.w	r9, [sp, #32]
   1ffb6:	4293      	cmp	r3, r2
   1ffb8:	bfb8      	it	lt
   1ffba:	4613      	movlt	r3, r2
   1ffbc:	6033      	str	r3, [r6, #0]
   1ffbe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   1ffc2:	4607      	mov	r7, r0
   1ffc4:	460c      	mov	r4, r1
   1ffc6:	b10a      	cbz	r2, 1ffcc <_printf_common+0x26>
   1ffc8:	3301      	adds	r3, #1
   1ffca:	6033      	str	r3, [r6, #0]
   1ffcc:	6823      	ldr	r3, [r4, #0]
   1ffce:	0699      	lsls	r1, r3, #26
   1ffd0:	bf42      	ittt	mi
   1ffd2:	6833      	ldrmi	r3, [r6, #0]
   1ffd4:	3302      	addmi	r3, #2
   1ffd6:	6033      	strmi	r3, [r6, #0]
   1ffd8:	6825      	ldr	r5, [r4, #0]
   1ffda:	f015 0506 	ands.w	r5, r5, #6
   1ffde:	d106      	bne.n	1ffee <_printf_common+0x48>
   1ffe0:	f104 0a19 	add.w	sl, r4, #25
   1ffe4:	68e3      	ldr	r3, [r4, #12]
   1ffe6:	6832      	ldr	r2, [r6, #0]
   1ffe8:	1a9b      	subs	r3, r3, r2
   1ffea:	42ab      	cmp	r3, r5
   1ffec:	dc26      	bgt.n	2003c <_printf_common+0x96>
   1ffee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   1fff2:	6822      	ldr	r2, [r4, #0]
   1fff4:	3b00      	subs	r3, #0
   1fff6:	bf18      	it	ne
   1fff8:	2301      	movne	r3, #1
   1fffa:	0692      	lsls	r2, r2, #26
   1fffc:	d42b      	bmi.n	20056 <_printf_common+0xb0>
   1fffe:	f104 0243 	add.w	r2, r4, #67	; 0x43
   20002:	4641      	mov	r1, r8
   20004:	4638      	mov	r0, r7
   20006:	47c8      	blx	r9
   20008:	3001      	adds	r0, #1
   2000a:	d01e      	beq.n	2004a <_printf_common+0xa4>
   2000c:	6823      	ldr	r3, [r4, #0]
   2000e:	6922      	ldr	r2, [r4, #16]
   20010:	f003 0306 	and.w	r3, r3, #6
   20014:	2b04      	cmp	r3, #4
   20016:	bf02      	ittt	eq
   20018:	68e5      	ldreq	r5, [r4, #12]
   2001a:	6833      	ldreq	r3, [r6, #0]
   2001c:	1aed      	subeq	r5, r5, r3
   2001e:	68a3      	ldr	r3, [r4, #8]
   20020:	bf0c      	ite	eq
   20022:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   20026:	2500      	movne	r5, #0
   20028:	4293      	cmp	r3, r2
   2002a:	bfc4      	itt	gt
   2002c:	1a9b      	subgt	r3, r3, r2
   2002e:	18ed      	addgt	r5, r5, r3
   20030:	2600      	movs	r6, #0
   20032:	341a      	adds	r4, #26
   20034:	42b5      	cmp	r5, r6
   20036:	d11a      	bne.n	2006e <_printf_common+0xc8>
   20038:	2000      	movs	r0, #0
   2003a:	e008      	b.n	2004e <_printf_common+0xa8>
   2003c:	2301      	movs	r3, #1
   2003e:	4652      	mov	r2, sl
   20040:	4641      	mov	r1, r8
   20042:	4638      	mov	r0, r7
   20044:	47c8      	blx	r9
   20046:	3001      	adds	r0, #1
   20048:	d103      	bne.n	20052 <_printf_common+0xac>
   2004a:	f04f 30ff 	mov.w	r0, #4294967295
   2004e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   20052:	3501      	adds	r5, #1
   20054:	e7c6      	b.n	1ffe4 <_printf_common+0x3e>
   20056:	18e1      	adds	r1, r4, r3
   20058:	1c5a      	adds	r2, r3, #1
   2005a:	2030      	movs	r0, #48	; 0x30
   2005c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   20060:	4422      	add	r2, r4
   20062:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   20066:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   2006a:	3302      	adds	r3, #2
   2006c:	e7c7      	b.n	1fffe <_printf_common+0x58>
   2006e:	2301      	movs	r3, #1
   20070:	4622      	mov	r2, r4
   20072:	4641      	mov	r1, r8
   20074:	4638      	mov	r0, r7
   20076:	47c8      	blx	r9
   20078:	3001      	adds	r0, #1
   2007a:	d0e6      	beq.n	2004a <_printf_common+0xa4>
   2007c:	3601      	adds	r6, #1
   2007e:	e7d9      	b.n	20034 <_printf_common+0x8e>

00020080 <__strcat_chk>:
   20080:	b538      	push	{r3, r4, r5, lr}
   20082:	4604      	mov	r4, r0
   20084:	4623      	mov	r3, r4
   20086:	f814 5b01 	ldrb.w	r5, [r4], #1
   2008a:	b935      	cbnz	r5, 2009a <__strcat_chk+0x1a>
   2008c:	3901      	subs	r1, #1
   2008e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   20092:	b93c      	cbnz	r4, 200a4 <__strcat_chk+0x24>
   20094:	b112      	cbz	r2, 2009c <__strcat_chk+0x1c>
   20096:	701c      	strb	r4, [r3, #0]
   20098:	bd38      	pop	{r3, r4, r5, pc}
   2009a:	b90a      	cbnz	r2, 200a0 <__strcat_chk+0x20>
   2009c:	f7e6 f922 	bl	62e4 <__chk_fail>
   200a0:	3a01      	subs	r2, #1
   200a2:	e7ef      	b.n	20084 <__strcat_chk+0x4>
   200a4:	2a00      	cmp	r2, #0
   200a6:	d0f9      	beq.n	2009c <__strcat_chk+0x1c>
   200a8:	f803 4b01 	strb.w	r4, [r3], #1
   200ac:	3a01      	subs	r2, #1
   200ae:	e7ee      	b.n	2008e <__strcat_chk+0xe>

000200b0 <strchr>:
   200b0:	b2c9      	uxtb	r1, r1
   200b2:	4603      	mov	r3, r0
   200b4:	4618      	mov	r0, r3
   200b6:	f813 2b01 	ldrb.w	r2, [r3], #1
   200ba:	b112      	cbz	r2, 200c2 <strchr+0x12>
   200bc:	428a      	cmp	r2, r1
   200be:	d1f9      	bne.n	200b4 <strchr+0x4>
   200c0:	4770      	bx	lr
   200c2:	2900      	cmp	r1, #0
   200c4:	bf18      	it	ne
   200c6:	2000      	movne	r0, #0
   200c8:	4770      	bx	lr

000200ca <__strncat_chk>:
   200ca:	b570      	push	{r4, r5, r6, lr}
   200cc:	b1b2      	cbz	r2, 200fc <__strncat_chk+0x32>
   200ce:	429a      	cmp	r2, r3
   200d0:	d815      	bhi.n	200fe <__strncat_chk+0x34>
   200d2:	4604      	mov	r4, r0
   200d4:	4625      	mov	r5, r4
   200d6:	f815 6b01 	ldrb.w	r6, [r5], #1
   200da:	b996      	cbnz	r6, 20102 <__strncat_chk+0x38>
   200dc:	440a      	add	r2, r1
   200de:	f811 6b01 	ldrb.w	r6, [r1], #1
   200e2:	7026      	strb	r6, [r4, #0]
   200e4:	4625      	mov	r5, r4
   200e6:	3401      	adds	r4, #1
   200e8:	b12e      	cbz	r6, 200f6 <__strncat_chk+0x2c>
   200ea:	1e5e      	subs	r6, r3, #1
   200ec:	b13b      	cbz	r3, 200fe <__strncat_chk+0x34>
   200ee:	4291      	cmp	r1, r2
   200f0:	d10c      	bne.n	2010c <__strncat_chk+0x42>
   200f2:	4625      	mov	r5, r4
   200f4:	4633      	mov	r3, r6
   200f6:	b113      	cbz	r3, 200fe <__strncat_chk+0x34>
   200f8:	2300      	movs	r3, #0
   200fa:	702b      	strb	r3, [r5, #0]
   200fc:	bd70      	pop	{r4, r5, r6, pc}
   200fe:	f7e6 f8f1 	bl	62e4 <__chk_fail>
   20102:	2b00      	cmp	r3, #0
   20104:	d0fb      	beq.n	200fe <__strncat_chk+0x34>
   20106:	3b01      	subs	r3, #1
   20108:	462c      	mov	r4, r5
   2010a:	e7e3      	b.n	200d4 <__strncat_chk+0xa>
   2010c:	4633      	mov	r3, r6
   2010e:	e7e6      	b.n	200de <__strncat_chk+0x14>

00020110 <strncmp>:
   20110:	b510      	push	{r4, lr}
   20112:	b16a      	cbz	r2, 20130 <strncmp+0x20>
   20114:	3901      	subs	r1, #1
   20116:	1884      	adds	r4, r0, r2
   20118:	f810 2b01 	ldrb.w	r2, [r0], #1
   2011c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   20120:	429a      	cmp	r2, r3
   20122:	d103      	bne.n	2012c <strncmp+0x1c>
   20124:	42a0      	cmp	r0, r4
   20126:	d001      	beq.n	2012c <strncmp+0x1c>
   20128:	2a00      	cmp	r2, #0
   2012a:	d1f5      	bne.n	20118 <strncmp+0x8>
   2012c:	1ad0      	subs	r0, r2, r3
   2012e:	bd10      	pop	{r4, pc}
   20130:	4610      	mov	r0, r2
   20132:	e7fc      	b.n	2012e <strncmp+0x1e>

00020134 <strncpy>:
   20134:	b510      	push	{r4, lr}
   20136:	3901      	subs	r1, #1
   20138:	4603      	mov	r3, r0
   2013a:	b132      	cbz	r2, 2014a <strncpy+0x16>
   2013c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   20140:	f803 4b01 	strb.w	r4, [r3], #1
   20144:	3a01      	subs	r2, #1
   20146:	2c00      	cmp	r4, #0
   20148:	d1f7      	bne.n	2013a <strncpy+0x6>
   2014a:	441a      	add	r2, r3
   2014c:	2100      	movs	r1, #0
   2014e:	4293      	cmp	r3, r2
   20150:	d100      	bne.n	20154 <strncpy+0x20>
   20152:	bd10      	pop	{r4, pc}
   20154:	f803 1b01 	strb.w	r1, [r3], #1
   20158:	e7f9      	b.n	2014e <strncpy+0x1a>

0002015a <__strncpy_chk>:
   2015a:	429a      	cmp	r2, r3
   2015c:	b508      	push	{r3, lr}
   2015e:	d901      	bls.n	20164 <__strncpy_chk+0xa>
   20160:	f7e6 f8c0 	bl	62e4 <__chk_fail>
   20164:	4281      	cmp	r1, r0
   20166:	d804      	bhi.n	20172 <__strncpy_chk+0x18>
   20168:	188b      	adds	r3, r1, r2
   2016a:	4298      	cmp	r0, r3
   2016c:	d3f8      	bcc.n	20160 <__strncpy_chk+0x6>
   2016e:	4281      	cmp	r1, r0
   20170:	d102      	bne.n	20178 <__strncpy_chk+0x1e>
   20172:	1883      	adds	r3, r0, r2
   20174:	4299      	cmp	r1, r3
   20176:	d3f3      	bcc.n	20160 <__strncpy_chk+0x6>
   20178:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2017c:	f7ff bfda 	b.w	20134 <strncpy>

00020180 <strnlen>:
   20180:	b510      	push	{r4, lr}
   20182:	4602      	mov	r2, r0
   20184:	4401      	add	r1, r0
   20186:	428a      	cmp	r2, r1
   20188:	4613      	mov	r3, r2
   2018a:	d003      	beq.n	20194 <strnlen+0x14>
   2018c:	781c      	ldrb	r4, [r3, #0]
   2018e:	3201      	adds	r2, #1
   20190:	2c00      	cmp	r4, #0
   20192:	d1f8      	bne.n	20186 <strnlen+0x6>
   20194:	1a18      	subs	r0, r3, r0
   20196:	bd10      	pop	{r4, pc}

00020198 <strrchr>:
   20198:	b538      	push	{r3, r4, r5, lr}
   2019a:	4603      	mov	r3, r0
   2019c:	460c      	mov	r4, r1
   2019e:	b969      	cbnz	r1, 201bc <strrchr+0x24>
   201a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   201a4:	f7ff bf84 	b.w	200b0 <strchr>
   201a8:	1c43      	adds	r3, r0, #1
   201aa:	4605      	mov	r5, r0
   201ac:	4621      	mov	r1, r4
   201ae:	4618      	mov	r0, r3
   201b0:	f7ff ff7e 	bl	200b0 <strchr>
   201b4:	2800      	cmp	r0, #0
   201b6:	d1f7      	bne.n	201a8 <strrchr+0x10>
   201b8:	4628      	mov	r0, r5
   201ba:	bd38      	pop	{r3, r4, r5, pc}
   201bc:	2500      	movs	r5, #0
   201be:	e7f5      	b.n	201ac <strrchr+0x14>

000201c0 <strstr>:
   201c0:	780a      	ldrb	r2, [r1, #0]
   201c2:	b570      	push	{r4, r5, r6, lr}
   201c4:	b96a      	cbnz	r2, 201e2 <strstr+0x22>
   201c6:	bd70      	pop	{r4, r5, r6, pc}
   201c8:	429a      	cmp	r2, r3
   201ca:	d109      	bne.n	201e0 <strstr+0x20>
   201cc:	460c      	mov	r4, r1
   201ce:	4605      	mov	r5, r0
   201d0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   201d4:	2b00      	cmp	r3, #0
   201d6:	d0f6      	beq.n	201c6 <strstr+0x6>
   201d8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   201dc:	429e      	cmp	r6, r3
   201de:	d0f7      	beq.n	201d0 <strstr+0x10>
   201e0:	3001      	adds	r0, #1
   201e2:	7803      	ldrb	r3, [r0, #0]
   201e4:	2b00      	cmp	r3, #0
   201e6:	d1ef      	bne.n	201c8 <strstr+0x8>
   201e8:	4618      	mov	r0, r3
   201ea:	e7ec      	b.n	201c6 <strstr+0x6>

000201ec <quorem>:
   201ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   201f0:	6903      	ldr	r3, [r0, #16]
   201f2:	690c      	ldr	r4, [r1, #16]
   201f4:	42a3      	cmp	r3, r4
   201f6:	4607      	mov	r7, r0
   201f8:	db7e      	blt.n	202f8 <quorem+0x10c>
   201fa:	3c01      	subs	r4, #1
   201fc:	f101 0814 	add.w	r8, r1, #20
   20200:	00a3      	lsls	r3, r4, #2
   20202:	f100 0514 	add.w	r5, r0, #20
   20206:	9300      	str	r3, [sp, #0]
   20208:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   2020c:	9301      	str	r3, [sp, #4]
   2020e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   20212:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   20216:	3301      	adds	r3, #1
   20218:	429a      	cmp	r2, r3
   2021a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   2021e:	fbb2 f6f3 	udiv	r6, r2, r3
   20222:	d32e      	bcc.n	20282 <quorem+0x96>
   20224:	f04f 0a00 	mov.w	sl, #0
   20228:	46c4      	mov	ip, r8
   2022a:	46ae      	mov	lr, r5
   2022c:	46d3      	mov	fp, sl
   2022e:	f85c 3b04 	ldr.w	r3, [ip], #4
   20232:	b298      	uxth	r0, r3
   20234:	fb06 a000 	mla	r0, r6, r0, sl
   20238:	0c02      	lsrs	r2, r0, #16
   2023a:	0c1b      	lsrs	r3, r3, #16
   2023c:	fb06 2303 	mla	r3, r6, r3, r2
   20240:	f8de 2000 	ldr.w	r2, [lr]
   20244:	b280      	uxth	r0, r0
   20246:	b292      	uxth	r2, r2
   20248:	1a12      	subs	r2, r2, r0
   2024a:	445a      	add	r2, fp
   2024c:	f8de 0000 	ldr.w	r0, [lr]
   20250:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   20254:	b29b      	uxth	r3, r3
   20256:	ebc3 4322 	rsb	r3, r3, r2, asr #16
   2025a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
   2025e:	b292      	uxth	r2, r2
   20260:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   20264:	45e1      	cmp	r9, ip
   20266:	f84e 2b04 	str.w	r2, [lr], #4
   2026a:	ea4f 4b23 	mov.w	fp, r3, asr #16
   2026e:	d2de      	bcs.n	2022e <quorem+0x42>
   20270:	9b00      	ldr	r3, [sp, #0]
   20272:	58eb      	ldr	r3, [r5, r3]
   20274:	b92b      	cbnz	r3, 20282 <quorem+0x96>
   20276:	9b01      	ldr	r3, [sp, #4]
   20278:	3b04      	subs	r3, #4
   2027a:	429d      	cmp	r5, r3
   2027c:	461a      	mov	r2, r3
   2027e:	d32f      	bcc.n	202e0 <quorem+0xf4>
   20280:	613c      	str	r4, [r7, #16]
   20282:	4638      	mov	r0, r7
   20284:	f000 f889 	bl	2039a <__mcmp>
   20288:	2800      	cmp	r0, #0
   2028a:	db25      	blt.n	202d8 <quorem+0xec>
   2028c:	4629      	mov	r1, r5
   2028e:	2000      	movs	r0, #0
   20290:	f858 2b04 	ldr.w	r2, [r8], #4
   20294:	f8d1 c000 	ldr.w	ip, [r1]
   20298:	fa1f fe82 	uxth.w	lr, r2
   2029c:	fa1f f38c 	uxth.w	r3, ip
   202a0:	eba3 030e 	sub.w	r3, r3, lr
   202a4:	4403      	add	r3, r0
   202a6:	0c12      	lsrs	r2, r2, #16
   202a8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
   202ac:	eb02 421c 	add.w	r2, r2, ip, lsr #16
   202b0:	b29b      	uxth	r3, r3
   202b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   202b6:	45c1      	cmp	r9, r8
   202b8:	f841 3b04 	str.w	r3, [r1], #4
   202bc:	ea4f 4022 	mov.w	r0, r2, asr #16
   202c0:	d2e6      	bcs.n	20290 <quorem+0xa4>
   202c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   202c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   202ca:	b922      	cbnz	r2, 202d6 <quorem+0xea>
   202cc:	3b04      	subs	r3, #4
   202ce:	429d      	cmp	r5, r3
   202d0:	461a      	mov	r2, r3
   202d2:	d30b      	bcc.n	202ec <quorem+0x100>
   202d4:	613c      	str	r4, [r7, #16]
   202d6:	3601      	adds	r6, #1
   202d8:	4630      	mov	r0, r6
   202da:	b003      	add	sp, #12
   202dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   202e0:	6812      	ldr	r2, [r2, #0]
   202e2:	3b04      	subs	r3, #4
   202e4:	2a00      	cmp	r2, #0
   202e6:	d1cb      	bne.n	20280 <quorem+0x94>
   202e8:	3c01      	subs	r4, #1
   202ea:	e7c6      	b.n	2027a <quorem+0x8e>
   202ec:	6812      	ldr	r2, [r2, #0]
   202ee:	3b04      	subs	r3, #4
   202f0:	2a00      	cmp	r2, #0
   202f2:	d1ef      	bne.n	202d4 <quorem+0xe8>
   202f4:	3c01      	subs	r4, #1
   202f6:	e7ea      	b.n	202ce <quorem+0xe2>
   202f8:	2000      	movs	r0, #0
   202fa:	e7ee      	b.n	202da <quorem+0xee>

000202fc <__hi0bits>:
   202fc:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   20300:	4603      	mov	r3, r0
   20302:	bf36      	itet	cc
   20304:	0403      	lslcc	r3, r0, #16
   20306:	2000      	movcs	r0, #0
   20308:	2010      	movcc	r0, #16
   2030a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   2030e:	bf3c      	itt	cc
   20310:	021b      	lslcc	r3, r3, #8
   20312:	3008      	addcc	r0, #8
   20314:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   20318:	bf3c      	itt	cc
   2031a:	011b      	lslcc	r3, r3, #4
   2031c:	3004      	addcc	r0, #4
   2031e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   20322:	d303      	bcc.n	2032c <__hi0bits+0x30>
   20324:	2b00      	cmp	r3, #0
   20326:	db0a      	blt.n	2033e <__hi0bits+0x42>
   20328:	3001      	adds	r0, #1
   2032a:	4770      	bx	lr
   2032c:	009b      	lsls	r3, r3, #2
   2032e:	d501      	bpl.n	20334 <__hi0bits+0x38>
   20330:	3002      	adds	r0, #2
   20332:	4770      	bx	lr
   20334:	005b      	lsls	r3, r3, #1
   20336:	d501      	bpl.n	2033c <__hi0bits+0x40>
   20338:	3003      	adds	r0, #3
   2033a:	4770      	bx	lr
   2033c:	2020      	movs	r0, #32
   2033e:	4770      	bx	lr

00020340 <__lo0bits>:
   20340:	6803      	ldr	r3, [r0, #0]
   20342:	4602      	mov	r2, r0
   20344:	f013 0007 	ands.w	r0, r3, #7
   20348:	d00b      	beq.n	20362 <__lo0bits+0x22>
   2034a:	07d9      	lsls	r1, r3, #31
   2034c:	d421      	bmi.n	20392 <__lo0bits+0x52>
   2034e:	0798      	lsls	r0, r3, #30
   20350:	bf49      	itett	mi
   20352:	085b      	lsrmi	r3, r3, #1
   20354:	089b      	lsrpl	r3, r3, #2
   20356:	2001      	movmi	r0, #1
   20358:	6013      	strmi	r3, [r2, #0]
   2035a:	bf5c      	itt	pl
   2035c:	6013      	strpl	r3, [r2, #0]
   2035e:	2002      	movpl	r0, #2
   20360:	4770      	bx	lr
   20362:	b299      	uxth	r1, r3
   20364:	b909      	cbnz	r1, 2036a <__lo0bits+0x2a>
   20366:	0c1b      	lsrs	r3, r3, #16
   20368:	2010      	movs	r0, #16
   2036a:	b2d9      	uxtb	r1, r3
   2036c:	b909      	cbnz	r1, 20372 <__lo0bits+0x32>
   2036e:	3008      	adds	r0, #8
   20370:	0a1b      	lsrs	r3, r3, #8
   20372:	0719      	lsls	r1, r3, #28
   20374:	bf04      	itt	eq
   20376:	091b      	lsreq	r3, r3, #4
   20378:	3004      	addeq	r0, #4
   2037a:	0799      	lsls	r1, r3, #30
   2037c:	bf04      	itt	eq
   2037e:	089b      	lsreq	r3, r3, #2
   20380:	3002      	addeq	r0, #2
   20382:	07d9      	lsls	r1, r3, #31
   20384:	d403      	bmi.n	2038e <__lo0bits+0x4e>
   20386:	085b      	lsrs	r3, r3, #1
   20388:	f100 0001 	add.w	r0, r0, #1
   2038c:	d003      	beq.n	20396 <__lo0bits+0x56>
   2038e:	6013      	str	r3, [r2, #0]
   20390:	4770      	bx	lr
   20392:	2000      	movs	r0, #0
   20394:	4770      	bx	lr
   20396:	2020      	movs	r0, #32
   20398:	4770      	bx	lr

0002039a <__mcmp>:
   2039a:	690a      	ldr	r2, [r1, #16]
   2039c:	4603      	mov	r3, r0
   2039e:	6900      	ldr	r0, [r0, #16]
   203a0:	1a80      	subs	r0, r0, r2
   203a2:	b530      	push	{r4, r5, lr}
   203a4:	d10e      	bne.n	203c4 <__mcmp+0x2a>
   203a6:	3314      	adds	r3, #20
   203a8:	3114      	adds	r1, #20
   203aa:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   203ae:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   203b2:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   203b6:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   203ba:	4295      	cmp	r5, r2
   203bc:	d003      	beq.n	203c6 <__mcmp+0x2c>
   203be:	d205      	bcs.n	203cc <__mcmp+0x32>
   203c0:	f04f 30ff 	mov.w	r0, #4294967295
   203c4:	bd30      	pop	{r4, r5, pc}
   203c6:	42a3      	cmp	r3, r4
   203c8:	d3f3      	bcc.n	203b2 <__mcmp+0x18>
   203ca:	e7fb      	b.n	203c4 <__mcmp+0x2a>
   203cc:	2001      	movs	r0, #1
   203ce:	e7f9      	b.n	203c4 <__mcmp+0x2a>

000203d0 <__ascii_mbtowc>:
   203d0:	b082      	sub	sp, #8
   203d2:	b901      	cbnz	r1, 203d6 <__ascii_mbtowc+0x6>
   203d4:	a901      	add	r1, sp, #4
   203d6:	b142      	cbz	r2, 203ea <__ascii_mbtowc+0x1a>
   203d8:	b14b      	cbz	r3, 203ee <__ascii_mbtowc+0x1e>
   203da:	7813      	ldrb	r3, [r2, #0]
   203dc:	600b      	str	r3, [r1, #0]
   203de:	7812      	ldrb	r2, [r2, #0]
   203e0:	1e10      	subs	r0, r2, #0
   203e2:	bf18      	it	ne
   203e4:	2001      	movne	r0, #1
   203e6:	b002      	add	sp, #8
   203e8:	4770      	bx	lr
   203ea:	4610      	mov	r0, r2
   203ec:	e7fb      	b.n	203e6 <__ascii_mbtowc+0x16>
   203ee:	f06f 0001 	mvn.w	r0, #1
   203f2:	e7f8      	b.n	203e6 <__ascii_mbtowc+0x16>

000203f4 <__sfputc_r>:
   203f4:	6893      	ldr	r3, [r2, #8]
   203f6:	3b01      	subs	r3, #1
   203f8:	2b00      	cmp	r3, #0
   203fa:	b410      	push	{r4}
   203fc:	6093      	str	r3, [r2, #8]
   203fe:	da07      	bge.n	20410 <__sfputc_r+0x1c>
   20400:	6994      	ldr	r4, [r2, #24]
   20402:	42a3      	cmp	r3, r4
   20404:	db01      	blt.n	2040a <__sfputc_r+0x16>
   20406:	290a      	cmp	r1, #10
   20408:	d102      	bne.n	20410 <__sfputc_r+0x1c>
   2040a:	bc10      	pop	{r4}
   2040c:	f7f3 b9a8 	b.w	13760 <__swbuf_r>
   20410:	6813      	ldr	r3, [r2, #0]
   20412:	1c58      	adds	r0, r3, #1
   20414:	6010      	str	r0, [r2, #0]
   20416:	7019      	strb	r1, [r3, #0]
   20418:	4608      	mov	r0, r1
   2041a:	bc10      	pop	{r4}
   2041c:	4770      	bx	lr

0002041e <__sfputs_r>:
   2041e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20420:	4606      	mov	r6, r0
   20422:	460f      	mov	r7, r1
   20424:	4614      	mov	r4, r2
   20426:	18d5      	adds	r5, r2, r3
   20428:	42ac      	cmp	r4, r5
   2042a:	d101      	bne.n	20430 <__sfputs_r+0x12>
   2042c:	2000      	movs	r0, #0
   2042e:	e007      	b.n	20440 <__sfputs_r+0x22>
   20430:	f814 1b01 	ldrb.w	r1, [r4], #1
   20434:	463a      	mov	r2, r7
   20436:	4630      	mov	r0, r6
   20438:	f7ff ffdc 	bl	203f4 <__sfputc_r>
   2043c:	1c43      	adds	r3, r0, #1
   2043e:	d1f3      	bne.n	20428 <__sfputs_r+0xa>
   20440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00020442 <__ascii_wctomb>:
   20442:	4603      	mov	r3, r0
   20444:	4608      	mov	r0, r1
   20446:	b141      	cbz	r1, 2045a <__ascii_wctomb+0x18>
   20448:	2aff      	cmp	r2, #255	; 0xff
   2044a:	d904      	bls.n	20456 <__ascii_wctomb+0x14>
   2044c:	228a      	movs	r2, #138	; 0x8a
   2044e:	601a      	str	r2, [r3, #0]
   20450:	f04f 30ff 	mov.w	r0, #4294967295
   20454:	4770      	bx	lr
   20456:	700a      	strb	r2, [r1, #0]
   20458:	2001      	movs	r0, #1
   2045a:	4770      	bx	lr

0002045c <abort>:
   2045c:	b508      	push	{r3, lr}
   2045e:	2006      	movs	r0, #6
   20460:	f7f3 fb78 	bl	13b54 <raise>
   20464:	2001      	movs	r0, #1
   20466:	f7e5 ff1d 	bl	62a4 <_exit>

0002046a <__sflush_r>:
   2046a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   2046e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20470:	0717      	lsls	r7, r2, #28
   20472:	4605      	mov	r5, r0
   20474:	460c      	mov	r4, r1
   20476:	d456      	bmi.n	20526 <__sflush_r+0xbc>
   20478:	684b      	ldr	r3, [r1, #4]
   2047a:	2b00      	cmp	r3, #0
   2047c:	dc02      	bgt.n	20484 <__sflush_r+0x1a>
   2047e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   20480:	2b00      	cmp	r3, #0
   20482:	dd3d      	ble.n	20500 <__sflush_r+0x96>
   20484:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   20486:	2e00      	cmp	r6, #0
   20488:	d03a      	beq.n	20500 <__sflush_r+0x96>
   2048a:	2300      	movs	r3, #0
   2048c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   20490:	682f      	ldr	r7, [r5, #0]
   20492:	6a21      	ldr	r1, [r4, #32]
   20494:	602b      	str	r3, [r5, #0]
   20496:	d025      	beq.n	204e4 <__sflush_r+0x7a>
   20498:	6d62      	ldr	r2, [r4, #84]	; 0x54
   2049a:	89a3      	ldrh	r3, [r4, #12]
   2049c:	0758      	lsls	r0, r3, #29
   2049e:	d505      	bpl.n	204ac <__sflush_r+0x42>
   204a0:	6863      	ldr	r3, [r4, #4]
   204a2:	1ad2      	subs	r2, r2, r3
   204a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   204a6:	b10b      	cbz	r3, 204ac <__sflush_r+0x42>
   204a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
   204aa:	1ad2      	subs	r2, r2, r3
   204ac:	6a21      	ldr	r1, [r4, #32]
   204ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   204b0:	2300      	movs	r3, #0
   204b2:	4628      	mov	r0, r5
   204b4:	47b0      	blx	r6
   204b6:	1c41      	adds	r1, r0, #1
   204b8:	d024      	beq.n	20504 <__sflush_r+0x9a>
   204ba:	2300      	movs	r3, #0
   204bc:	6063      	str	r3, [r4, #4]
   204be:	6923      	ldr	r3, [r4, #16]
   204c0:	6023      	str	r3, [r4, #0]
   204c2:	89a3      	ldrh	r3, [r4, #12]
   204c4:	04da      	lsls	r2, r3, #19
   204c6:	d500      	bpl.n	204ca <__sflush_r+0x60>
   204c8:	6560      	str	r0, [r4, #84]	; 0x54
   204ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
   204cc:	602f      	str	r7, [r5, #0]
   204ce:	b1b9      	cbz	r1, 20500 <__sflush_r+0x96>
   204d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
   204d4:	4299      	cmp	r1, r3
   204d6:	d002      	beq.n	204de <__sflush_r+0x74>
   204d8:	4628      	mov	r0, r5
   204da:	f7f1 ffa1 	bl	12420 <_free_r>
   204de:	2300      	movs	r3, #0
   204e0:	6363      	str	r3, [r4, #52]	; 0x34
   204e2:	e00d      	b.n	20500 <__sflush_r+0x96>
   204e4:	2301      	movs	r3, #1
   204e6:	4628      	mov	r0, r5
   204e8:	47b0      	blx	r6
   204ea:	1c46      	adds	r6, r0, #1
   204ec:	4602      	mov	r2, r0
   204ee:	d1d4      	bne.n	2049a <__sflush_r+0x30>
   204f0:	682b      	ldr	r3, [r5, #0]
   204f2:	2b00      	cmp	r3, #0
   204f4:	d0d1      	beq.n	2049a <__sflush_r+0x30>
   204f6:	2b1d      	cmp	r3, #29
   204f8:	d001      	beq.n	204fe <__sflush_r+0x94>
   204fa:	2b16      	cmp	r3, #22
   204fc:	d12a      	bne.n	20554 <__sflush_r+0xea>
   204fe:	602f      	str	r7, [r5, #0]
   20500:	2000      	movs	r0, #0
   20502:	e02e      	b.n	20562 <__sflush_r+0xf8>
   20504:	682a      	ldr	r2, [r5, #0]
   20506:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2050a:	b142      	cbz	r2, 2051e <__sflush_r+0xb4>
   2050c:	2a1d      	cmp	r2, #29
   2050e:	d001      	beq.n	20514 <__sflush_r+0xaa>
   20510:	2a16      	cmp	r2, #22
   20512:	d121      	bne.n	20558 <__sflush_r+0xee>
   20514:	2300      	movs	r3, #0
   20516:	6063      	str	r3, [r4, #4]
   20518:	6923      	ldr	r3, [r4, #16]
   2051a:	6023      	str	r3, [r4, #0]
   2051c:	e7d5      	b.n	204ca <__sflush_r+0x60>
   2051e:	6062      	str	r2, [r4, #4]
   20520:	6922      	ldr	r2, [r4, #16]
   20522:	6022      	str	r2, [r4, #0]
   20524:	e7ce      	b.n	204c4 <__sflush_r+0x5a>
   20526:	690f      	ldr	r7, [r1, #16]
   20528:	2f00      	cmp	r7, #0
   2052a:	d0e9      	beq.n	20500 <__sflush_r+0x96>
   2052c:	0793      	lsls	r3, r2, #30
   2052e:	680e      	ldr	r6, [r1, #0]
   20530:	bf08      	it	eq
   20532:	694b      	ldreq	r3, [r1, #20]
   20534:	600f      	str	r7, [r1, #0]
   20536:	bf18      	it	ne
   20538:	2300      	movne	r3, #0
   2053a:	1bf6      	subs	r6, r6, r7
   2053c:	608b      	str	r3, [r1, #8]
   2053e:	2e00      	cmp	r6, #0
   20540:	ddde      	ble.n	20500 <__sflush_r+0x96>
   20542:	6a21      	ldr	r1, [r4, #32]
   20544:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
   20548:	4633      	mov	r3, r6
   2054a:	463a      	mov	r2, r7
   2054c:	4628      	mov	r0, r5
   2054e:	47e0      	blx	ip
   20550:	2800      	cmp	r0, #0
   20552:	dc07      	bgt.n	20564 <__sflush_r+0xfa>
   20554:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   20558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2055c:	81a3      	strh	r3, [r4, #12]
   2055e:	f04f 30ff 	mov.w	r0, #4294967295
   20562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20564:	4407      	add	r7, r0
   20566:	1a36      	subs	r6, r6, r0
   20568:	e7e9      	b.n	2053e <__sflush_r+0xd4>

0002056a <__sfmoreglue>:
   2056a:	b570      	push	{r4, r5, r6, lr}
   2056c:	2368      	movs	r3, #104	; 0x68
   2056e:	1e4d      	subs	r5, r1, #1
   20570:	435d      	muls	r5, r3
   20572:	460e      	mov	r6, r1
   20574:	f105 0174 	add.w	r1, r5, #116	; 0x74
   20578:	f7f1 ff9c 	bl	124b4 <_malloc_r>
   2057c:	4604      	mov	r4, r0
   2057e:	b140      	cbz	r0, 20592 <__sfmoreglue+0x28>
   20580:	2100      	movs	r1, #0
   20582:	e9c0 1600 	strd	r1, r6, [r0]
   20586:	300c      	adds	r0, #12
   20588:	60a0      	str	r0, [r4, #8]
   2058a:	f105 0268 	add.w	r2, r5, #104	; 0x68
   2058e:	f7ff fc53 	bl	1fe38 <memset>
   20592:	4620      	mov	r0, r4
   20594:	bd70      	pop	{r4, r5, r6, pc}

00020596 <_fwalk_reent>:
   20596:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2059a:	4606      	mov	r6, r0
   2059c:	4688      	mov	r8, r1
   2059e:	f100 0448 	add.w	r4, r0, #72	; 0x48
   205a2:	2700      	movs	r7, #0
   205a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   205a8:	f1b9 0901 	subs.w	r9, r9, #1
   205ac:	d505      	bpl.n	205ba <_fwalk_reent+0x24>
   205ae:	6824      	ldr	r4, [r4, #0]
   205b0:	2c00      	cmp	r4, #0
   205b2:	d1f7      	bne.n	205a4 <_fwalk_reent+0xe>
   205b4:	4638      	mov	r0, r7
   205b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   205ba:	89ab      	ldrh	r3, [r5, #12]
   205bc:	2b01      	cmp	r3, #1
   205be:	d907      	bls.n	205d0 <_fwalk_reent+0x3a>
   205c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   205c4:	3301      	adds	r3, #1
   205c6:	d003      	beq.n	205d0 <_fwalk_reent+0x3a>
   205c8:	4629      	mov	r1, r5
   205ca:	4630      	mov	r0, r6
   205cc:	47c0      	blx	r8
   205ce:	4307      	orrs	r7, r0
   205d0:	3568      	adds	r5, #104	; 0x68
   205d2:	e7e9      	b.n	205a8 <_fwalk_reent+0x12>

000205d4 <__swhatbuf_r>:
   205d4:	b570      	push	{r4, r5, r6, lr}
   205d6:	460c      	mov	r4, r1
   205d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   205dc:	2900      	cmp	r1, #0
   205de:	b096      	sub	sp, #88	; 0x58
   205e0:	4615      	mov	r5, r2
   205e2:	461e      	mov	r6, r3
   205e4:	da0d      	bge.n	20602 <__swhatbuf_r+0x2e>
   205e6:	89a3      	ldrh	r3, [r4, #12]
   205e8:	f013 0f80 	tst.w	r3, #128	; 0x80
   205ec:	f04f 0100 	mov.w	r1, #0
   205f0:	bf14      	ite	ne
   205f2:	2340      	movne	r3, #64	; 0x40
   205f4:	f44f 6380 	moveq.w	r3, #1024	; 0x400
   205f8:	2000      	movs	r0, #0
   205fa:	6031      	str	r1, [r6, #0]
   205fc:	602b      	str	r3, [r5, #0]
   205fe:	b016      	add	sp, #88	; 0x58
   20600:	bd70      	pop	{r4, r5, r6, pc}
   20602:	466a      	mov	r2, sp
   20604:	f7f3 fae2 	bl	13bcc <_fstat_r>
   20608:	2800      	cmp	r0, #0
   2060a:	dbec      	blt.n	205e6 <__swhatbuf_r+0x12>
   2060c:	9901      	ldr	r1, [sp, #4]
   2060e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
   20612:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
   20616:	4259      	negs	r1, r3
   20618:	4159      	adcs	r1, r3
   2061a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   2061e:	e7eb      	b.n	205f8 <__swhatbuf_r+0x24>

00020620 <_raise_r>:
   20620:	291f      	cmp	r1, #31
   20622:	b538      	push	{r3, r4, r5, lr}
   20624:	4605      	mov	r5, r0
   20626:	460c      	mov	r4, r1
   20628:	d904      	bls.n	20634 <_raise_r+0x14>
   2062a:	2316      	movs	r3, #22
   2062c:	6003      	str	r3, [r0, #0]
   2062e:	f04f 30ff 	mov.w	r0, #4294967295
   20632:	bd38      	pop	{r3, r4, r5, pc}
   20634:	6c42      	ldr	r2, [r0, #68]	; 0x44
   20636:	b112      	cbz	r2, 2063e <_raise_r+0x1e>
   20638:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   2063c:	b94b      	cbnz	r3, 20652 <_raise_r+0x32>
   2063e:	4628      	mov	r0, r5
   20640:	f000 f816 	bl	20670 <_getpid_r>
   20644:	4622      	mov	r2, r4
   20646:	4601      	mov	r1, r0
   20648:	4628      	mov	r0, r5
   2064a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2064e:	f7f3 ba89 	b.w	13b64 <_kill_r>
   20652:	2b01      	cmp	r3, #1
   20654:	d00a      	beq.n	2066c <_raise_r+0x4c>
   20656:	1c59      	adds	r1, r3, #1
   20658:	d103      	bne.n	20662 <_raise_r+0x42>
   2065a:	2316      	movs	r3, #22
   2065c:	6003      	str	r3, [r0, #0]
   2065e:	2001      	movs	r0, #1
   20660:	e7e7      	b.n	20632 <_raise_r+0x12>
   20662:	2100      	movs	r1, #0
   20664:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
   20668:	4620      	mov	r0, r4
   2066a:	4798      	blx	r3
   2066c:	2000      	movs	r0, #0
   2066e:	e7e0      	b.n	20632 <_raise_r+0x12>

00020670 <_getpid_r>:
   20670:	f7f8 bd0e 	b.w	19090 <_getpid>

00020674 <__sread>:
   20674:	b510      	push	{r4, lr}
   20676:	460c      	mov	r4, r1
   20678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2067c:	f7f3 fada 	bl	13c34 <_read_r>
   20680:	2800      	cmp	r0, #0
   20682:	bfab      	itete	ge
   20684:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   20686:	89a3      	ldrhlt	r3, [r4, #12]
   20688:	181b      	addge	r3, r3, r0
   2068a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   2068e:	bfac      	ite	ge
   20690:	6563      	strge	r3, [r4, #84]	; 0x54
   20692:	81a3      	strhlt	r3, [r4, #12]
   20694:	bd10      	pop	{r4, pc}

00020696 <__swrite>:
   20696:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2069a:	461f      	mov	r7, r3
   2069c:	898b      	ldrh	r3, [r1, #12]
   2069e:	05db      	lsls	r3, r3, #23
   206a0:	4605      	mov	r5, r0
   206a2:	460c      	mov	r4, r1
   206a4:	4616      	mov	r6, r2
   206a6:	d505      	bpl.n	206b4 <__swrite+0x1e>
   206a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   206ac:	2302      	movs	r3, #2
   206ae:	2200      	movs	r2, #0
   206b0:	f7f3 faae 	bl	13c10 <_lseek_r>
   206b4:	89a3      	ldrh	r3, [r4, #12]
   206b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   206ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   206be:	81a3      	strh	r3, [r4, #12]
   206c0:	4632      	mov	r2, r6
   206c2:	463b      	mov	r3, r7
   206c4:	4628      	mov	r0, r5
   206c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   206ca:	f7f3 ba5d 	b.w	13b88 <_write_r>

000206ce <__sseek>:
   206ce:	b510      	push	{r4, lr}
   206d0:	460c      	mov	r4, r1
   206d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   206d6:	f7f3 fa9b 	bl	13c10 <_lseek_r>
   206da:	1c43      	adds	r3, r0, #1
   206dc:	89a3      	ldrh	r3, [r4, #12]
   206de:	bf15      	itete	ne
   206e0:	6560      	strne	r0, [r4, #84]	; 0x54
   206e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   206e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   206ea:	81a3      	strheq	r3, [r4, #12]
   206ec:	bf18      	it	ne
   206ee:	81a3      	strhne	r3, [r4, #12]
   206f0:	bd10      	pop	{r4, pc}

000206f2 <__sclose>:
   206f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   206f6:	f7f3 ba59 	b.w	13bac <_close_r>
	...
